
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7fc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  0800b93c  0800b93c  0001b93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c3d4  0800c3d4  0001c3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c3dc  0800c3dc  0001c3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c3e0  0800c3e0  0001c3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000004  0800c3e4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000ac  0800c48c  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000090  20000148  0800c525  00020148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000025  200001d8  0800c5b5  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000200  0800c5da  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000013e0  20000214  0800c5eb  00020214  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  200015f4  0800c5eb  000215f4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0003f66c  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 000078e4  00000000  00000000  0005f8ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000028c8  00000000  00000000  00067198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00002610  00000000  00000000  00069a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002e0c0  00000000  00000000  0006c070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0002e741  00000000  00000000  0009a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f8c5f  00000000  00000000  000c8871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001c14d0  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000af7c  00000000  00000000  001c1524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000214 	.word	0x20000214
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b924 	.word	0x0800b924

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000218 	.word	0x20000218
 800017c:	0800b924 	.word	0x0800b924

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000532:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000536:	4905      	ldr	r1, [pc, #20]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	58000800 	.word	0x58000800

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ac:	68fb      	ldr	r3, [r7, #12]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005be:	f003 fa65 	bl	8003a8c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005c2:	f003 fa69 	bl	8003a98 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ca:	f7ff ffad 	bl	8000528 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005ce:	f008 fa39 	bl	8008a44 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005d2:	f000 f821 	bl	8000618 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005d6:	f000 f8c3 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005da:	bf00      	nop
}
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <APPD_EnableCPU2+0x34>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	c403      	stmia	r4!, {r0, r1}
 80005f6:	8022      	strh	r2, [r4, #0]
 80005f8:	3402      	adds	r4, #2
 80005fa:	0c13      	lsrs	r3, r2, #16
 80005fc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80005fe:	f009 fe9b 	bl	800a338 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f008 fdbc 	bl	8009182 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800060a:	bf00      	nop
}
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	0800b93c 	.word	0x0800b93c

08000618 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000638:	2300      	movs	r3, #0
 800063a:	77fb      	strb	r3, [r7, #31]
 800063c:	e038      	b.n	80006b0 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	4a44      	ldr	r2, [pc, #272]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d02b      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d01b      	beq.n	8000692 <APPD_SetCPU2GpioConfig+0x7a>
 800065a:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d823      	bhi.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
 8000660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000664:	d003      	beq.n	800066e <APPD_SetCPU2GpioConfig+0x56>
 8000666:	4a3d      	ldr	r2, [pc, #244]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d009      	beq.n	8000680 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800066c:	e01c      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	4413      	add	r3, r2
 8000676:	889a      	ldrh	r2, [r3, #4]
 8000678:	8bbb      	ldrh	r3, [r7, #28]
 800067a:	4313      	orrs	r3, r2
 800067c:	83bb      	strh	r3, [r7, #28]
          break;
 800067e:	e014      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	889a      	ldrh	r2, [r3, #4]
 800068a:	8b7b      	ldrh	r3, [r7, #26]
 800068c:	4313      	orrs	r3, r2
 800068e:	837b      	strh	r3, [r7, #26]
          break;
 8000690:	e00b      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	889a      	ldrh	r2, [r3, #4]
 800069c:	8b3b      	ldrh	r3, [r7, #24]
 800069e:	4313      	orrs	r3, r2
 80006a0:	833b      	strh	r3, [r7, #24]
          break;
 80006a2:	e002      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006a8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b21      	cmp	r3, #33	; 0x21
 80006b4:	d9c3      	bls.n	800063e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c8:	8bbb      	ldrh	r3, [r7, #28]
 80006ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff3f 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff55 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f003 feec 	bl	80044bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e4:	8bbb      	ldrh	r3, [r7, #28]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f004 f855 	bl	800479c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f2:	8b7b      	ldrh	r3, [r7, #26]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f8:	8b7b      	ldrh	r3, [r7, #26]
 80006fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff27 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff3d 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800070e:	f003 fed5 	bl	80044bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f004 f83f 	bl	800479c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000724:	8b3b      	ldrh	r3, [r7, #24]
 8000726:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff ff11 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072e:	2004      	movs	r0, #4
 8000730:	f7ff ff27 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800073a:	f003 febf 	bl	80044bc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f004 f829 	bl	800479c <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
}
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800c110 	.word	0x0800c110
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f001 faab 	bl	8001ccc <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f000 ffc0 	bl	8001714 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007aa:	f023 0207 	bic.w	r2, r3, #7
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58000400 	.word	0x58000400

080007c8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	608b      	str	r3, [r1, #8]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80007f4:	f000 f814 	bl	8000820 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80007f8:	4908      	ldr	r1, [pc, #32]	; (800081c <APPE_Init+0x2c>)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fd08 	bl	8001210 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000800:	f7ff fedb 	bl	80005ba <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000804:	2101      	movs	r1, #1
 8000806:	2001      	movs	r0, #1
 8000808:	f009 fe34 	bl	800a474 <UTIL_LPM_SetOffMode>

  Led_Init();
 800080c:	f000 f867 	bl	80008de <Led_Init>

  Button_Init();
 8000810:	f000 f875 	bl	80008fe <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000814:	f000 f812 	bl	800083c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000818:	bf00      	nop
}
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20001554 	.word	0x20001554

08000820 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000824:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000828:	f7ff ffce 	bl	80007c8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800082c:	f009 fe10 	bl	800a450 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000830:	2004      	movs	r0, #4
 8000832:	f7ff ffb3 	bl	800079c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000836:	bf00      	nop
}
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000842:	f009 fbc3 	bl	8009fcc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <appe_Tl_Init+0x50>)
 8000848:	2100      	movs	r1, #0
 800084a:	2010      	movs	r0, #16
 800084c:	f009 ff26 	bl	800a69c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <appe_Tl_Init+0x54>)
 8000852:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <appe_Tl_Init+0x58>)
 8000856:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <appe_Tl_Init+0x5c>)
 800085e:	f008 fca7 	bl	80091b0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <appe_Tl_Init+0x60>)
 8000864:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <appe_Tl_Init+0x64>)
 8000868:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <appe_Tl_Init+0x68>)
 800086c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800086e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000872:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4618      	mov	r0, r3
 800087a:	f009 fce9 	bl	800a250 <TL_MM_Init>

  TL_Enable();
 800087e:	f009 fb9f 	bl	8009fc0 <TL_Enable>

  return;
 8000882:	bf00      	nop
}
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	080091e9 	.word	0x080091e9
 8000890:	20030724 	.word	0x20030724
 8000894:	080008a9 	.word	0x080008a9
 8000898:	080008bf 	.word	0x080008bf
 800089c:	2003093c 	.word	0x2003093c
 80008a0:	20030830 	.word	0x20030830
 80008a4:	200301e8 	.word	0x200301e8

080008a8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80008b2:	bf00      	nop
}
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80008c6:	f7ff fe8b 	bl	80005e0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80008ca:	f001 fe39 	bl	8002540 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2001      	movs	r0, #1
 80008d2:	f009 fdcf 	bl	800a474 <UTIL_LPM_SetOffMode>
  return;
 80008d6:	bf00      	nop
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f002 feea 	bl	80036bc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f002 fee7 	bl	80036bc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f002 fee4 	bl	80036bc <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f002 ff1b 	bl	8003730 <BSP_LED_On>
#endif

  return;
 80008fa:	bf00      	nop
}
 80008fc:	bd80      	pop	{r7, pc}

080008fe <Button_Init>:

static void Button_Init( void )
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000902:	2101      	movs	r1, #1
 8000904:	2000      	movs	r0, #0
 8000906:	f002 ff47 	bl	8003798 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800090a:	2101      	movs	r1, #1
 800090c:	2001      	movs	r0, #1
 800090e:	f002 ff43 	bl	8003798 <BSP_PB_Init>
#endif

  return;
 8000912:	bf00      	nop
}
 8000914:	bd80      	pop	{r7, pc}

08000916 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800091a:	bf00      	nop
}
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800092e:	f04f 30ff 	mov.w	r0, #4294967295
 8000932:	f009 fdcf 	bl	800a4d4 <UTIL_SEQ_Run>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000946:	2100      	movs	r1, #0
 8000948:	2010      	movs	r0, #16
 800094a:	f009 fec9 	bl	800a6e0 <UTIL_SEQ_SetTask>
  return;
 800094e:	bf00      	nop
}
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800095e:	2002      	movs	r0, #2
 8000960:	f009 ff2a 	bl	800a7b8 <UTIL_SEQ_SetEvt>
  return;
 8000964:	bf00      	nop
}
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000974:	2002      	movs	r0, #2
 8000976:	f009 ff3f 	bl	800a7f8 <UTIL_SEQ_WaitEvt>
  return;
 800097a:	bf00      	nop
}
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	2b10      	cmp	r3, #16
 8000990:	d006      	beq.n	80009a0 <HAL_GPIO_EXTI_Callback+0x1e>
 8000992:	2b10      	cmp	r3, #16
 8000994:	dc0d      	bgt.n	80009b2 <HAL_GPIO_EXTI_Callback+0x30>
 8000996:	2b01      	cmp	r3, #1
 8000998:	d005      	beq.n	80009a6 <HAL_GPIO_EXTI_Callback+0x24>
 800099a:	2b02      	cmp	r3, #2
 800099c:	d006      	beq.n	80009ac <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 800099e:	e008      	b.n	80009b2 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 80009a0:	f001 fff4 	bl	800298c <APP_BLE_Key_Button1_Action>
      break; 
 80009a4:	e006      	b.n	80009b4 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80009a6:	f001 fff7 	bl	8002998 <APP_BLE_Key_Button2_Action>
      break; 
 80009aa:	e003      	b.n	80009b4 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80009ac:	f001 fffc 	bl	80029a8 <APP_BLE_Key_Button3_Action>
      break;
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80009b2:	bf00      	nop

  }
  return;
 80009b4:	bf00      	nop
}
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <LL_EXTI_EnableIT_0_31>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80009c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	58000800 	.word	0x58000800

080009e4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	600b      	str	r3, [r1, #0]

}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58000800 	.word	0x58000800

08000a08 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a1e:	e005      	b.n	8000a2c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d1f5      	bne.n	8000a20 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a34:	683b      	ldr	r3, [r7, #0]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40002800 	.word	0x40002800

08000a48 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a58:	79ba      	ldrb	r2, [r7, #6]
 8000a5a:	491d      	ldr	r1, [pc, #116]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	440b      	add	r3, r1
 8000a66:	3315      	adds	r3, #21
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d009      	beq.n	8000a86 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3314      	adds	r3, #20
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4911      	ldr	r1, [pc, #68]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	3315      	adds	r3, #21
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3314      	adds	r3, #20
 8000aaa:	79ba      	ldrb	r2, [r7, #6]
 8000aac:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	440b      	add	r3, r1
 8000abc:	3315      	adds	r3, #21
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	701a      	strb	r2, [r3, #0]

  return;
 8000ac2:	bf00      	nop
}
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000ac 	.word	0x200000ac

08000ad4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <LinkTimerBefore+0xb8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	79ba      	ldrb	r2, [r7, #6]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d032      	beq.n	8000b56 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	4927      	ldr	r1, [pc, #156]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	440b      	add	r3, r1
 8000afe:	3314      	adds	r3, #20
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	4922      	ldr	r1, [pc, #136]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	491d      	ldr	r1, [pc, #116]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
 8000b26:	3315      	adds	r3, #21
 8000b28:	79ba      	ldrb	r2, [r7, #6]
 8000b2a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	4918      	ldr	r1, [pc, #96]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b40:	79ba      	ldrb	r2, [r7, #6]
 8000b42:	4913      	ldr	r1, [pc, #76]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3314      	adds	r3, #20
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b54:	e014      	b.n	8000b80 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3315      	adds	r3, #21
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b6a:	79ba      	ldrb	r2, [r7, #6]
 8000b6c:	4908      	ldr	r1, [pc, #32]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3314      	adds	r3, #20
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	701a      	strb	r2, [r3, #0]
  return;
 8000b7e:	bf00      	nop
}
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2000013c 	.word	0x2000013c
 8000b90:	200000ac 	.word	0x200000ac

08000b94 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <linkTimer+0x144>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d118      	bne.n	8000bda <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ba8:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <linkTimer+0x144>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <linkTimer+0x148>)
 8000bb0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <linkTimer+0x144>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	4949      	ldr	r1, [pc, #292]	; (8000ce0 <linkTimer+0x14c>)
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3315      	adds	r3, #21
 8000bc8:	2206      	movs	r2, #6
 8000bca:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bcc:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <linkTimer+0x150>)
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	81fb      	strh	r3, [r7, #14]
 8000bd8:	e078      	b.n	8000ccc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bda:	f000 f909 	bl	8000df0 <ReturnTimeElapsed>
 8000bde:	4603      	mov	r3, r0
 8000be0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	493e      	ldr	r1, [pc, #248]	; (8000ce0 <linkTimer+0x14c>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	6819      	ldr	r1, [r3, #0]
 8000bf4:	89fb      	ldrh	r3, [r7, #14]
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	4419      	add	r1, r3
 8000bfa:	4839      	ldr	r0, [pc, #228]	; (8000ce0 <linkTimer+0x14c>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4403      	add	r3, r0
 8000c06:	3308      	adds	r3, #8
 8000c08:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	4934      	ldr	r1, [pc, #208]	; (8000ce0 <linkTimer+0x14c>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <linkTimer+0x144>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <linkTimer+0x14c>)
 8000c28:	460b      	mov	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	440b      	add	r3, r1
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4413      	add	r3, r2
 8000c32:	3308      	adds	r3, #8
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d337      	bcc.n	8000cac <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <linkTimer+0x144>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c42:	7b7a      	ldrb	r2, [r7, #13]
 8000c44:	4926      	ldr	r1, [pc, #152]	; (8000ce0 <linkTimer+0x14c>)
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	440b      	add	r3, r1
 8000c50:	3315      	adds	r3, #21
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c56:	e013      	b.n	8000c80 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c58:	7b7a      	ldrb	r2, [r7, #13]
 8000c5a:	4921      	ldr	r1, [pc, #132]	; (8000ce0 <linkTimer+0x14c>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3315      	adds	r3, #21
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c6c:	7b7a      	ldrb	r2, [r7, #13]
 8000c6e:	491c      	ldr	r1, [pc, #112]	; (8000ce0 <linkTimer+0x14c>)
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3315      	adds	r3, #21
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d00b      	beq.n	8000c9e <linkTimer+0x10a>
 8000c86:	7b3a      	ldrb	r2, [r7, #12]
 8000c88:	4915      	ldr	r1, [pc, #84]	; (8000ce0 <linkTimer+0x14c>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	3308      	adds	r3, #8
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d2dc      	bcs.n	8000c58 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000c9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fecf 	bl	8000a48 <LinkTimerAfter>
 8000caa:	e00f      	b.n	8000ccc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <linkTimer+0x144>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff0c 	bl	8000ad4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <linkTimer+0x144>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <linkTimer+0x148>)
 8000cc4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <linkTimer+0x144>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000013c 	.word	0x2000013c
 8000cdc:	2000013d 	.word	0x2000013d
 8000ce0:	200000ac 	.word	0x200000ac
 8000ce4:	20000140 	.word	0x20000140

08000ce8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000cf8:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <UnlinkTimer+0xf8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d111      	bne.n	8000d28 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <UnlinkTimer+0xf8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <UnlinkTimer+0xfc>)
 8000d0c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	4935      	ldr	r1, [pc, #212]	; (8000de8 <UnlinkTimer+0x100>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3315      	adds	r3, #21
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <UnlinkTimer+0xf8>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e03e      	b.n	8000da6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	492f      	ldr	r1, [pc, #188]	; (8000de8 <UnlinkTimer+0x100>)
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	3314      	adds	r3, #20
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	492a      	ldr	r1, [pc, #168]	; (8000de8 <UnlinkTimer+0x100>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	3315      	adds	r3, #21
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d50:	79f9      	ldrb	r1, [r7, #7]
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4824      	ldr	r0, [pc, #144]	; (8000de8 <UnlinkTimer+0x100>)
 8000d56:	460b      	mov	r3, r1
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	440b      	add	r3, r1
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4403      	add	r3, r0
 8000d60:	3315      	adds	r3, #21
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2d8      	uxtb	r0, r3
 8000d66:	4920      	ldr	r1, [pc, #128]	; (8000de8 <UnlinkTimer+0x100>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	3315      	adds	r3, #21
 8000d74:	4602      	mov	r2, r0
 8000d76:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d013      	beq.n	8000da6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d7e:	79f9      	ldrb	r1, [r7, #7]
 8000d80:	7bba      	ldrb	r2, [r7, #14]
 8000d82:	4819      	ldr	r0, [pc, #100]	; (8000de8 <UnlinkTimer+0x100>)
 8000d84:	460b      	mov	r3, r1
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4403      	add	r3, r0
 8000d8e:	3314      	adds	r3, #20
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	4914      	ldr	r1, [pc, #80]	; (8000de8 <UnlinkTimer+0x100>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3314      	adds	r3, #20
 8000da2:	4602      	mov	r2, r0
 8000da4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	490f      	ldr	r1, [pc, #60]	; (8000de8 <UnlinkTimer+0x100>)
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	330c      	adds	r3, #12
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <UnlinkTimer+0xf8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d107      	bne.n	8000dd4 <UnlinkTimer+0xec>
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d104      	bne.n	8000dd4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <UnlinkTimer+0x104>)
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
}
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	2000013c 	.word	0x2000013c
 8000de4:	2000013d 	.word	0x2000013d
 8000de8:	200000ac 	.word	0x200000ac
 8000dec:	20000140 	.word	0x20000140

08000df0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfe:	d026      	beq.n	8000e4e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e00:	f7ff fe02 	bl	8000a08 <ReadRtcSsrValue>
 8000e04:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d805      	bhi.n	8000e1c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e00a      	b.n	8000e32 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <ReturnTimeElapsed+0x74>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <ReturnTimeElapsed+0x78>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <ReturnTimeElapsed+0x7c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	40d3      	lsrs	r3, r2
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	e001      	b.n	8000e52 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b29b      	uxth	r3, r3
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000140 	.word	0x20000140
 8000e64:	20000236 	.word	0x20000236
 8000e68:	20000235 	.word	0x20000235
 8000e6c:	20000234 	.word	0x20000234

08000e70 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d108      	bne.n	8000e92 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e80:	f7ff fdc2 	bl	8000a08 <ReadRtcSsrValue>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <RestartWakeupCounter+0xa8>)
 8000e88:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f002 ff87 	bl	8003d9e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000e90:	e03e      	b.n	8000f10 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d803      	bhi.n	8000ea0 <RestartWakeupCounter+0x30>
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <RestartWakeupCounter+0xac>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d002      	beq.n	8000ea6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ea6:	bf00      	nop
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f7      	beq.n	8000ea8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ecc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <RestartWakeupCounter+0xb4>)
 8000ed0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ed4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f002 ff6f 	bl	8003dba <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <RestartWakeupCounter+0xb8>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	0c1b      	lsrs	r3, r3, #16
 8000ee2:	041b      	lsls	r3, r3, #16
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	4910      	ldr	r1, [pc, #64]	; (8000f28 <RestartWakeupCounter+0xb8>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000eec:	f7ff fd8c 	bl	8000a08 <ReadRtcSsrValue>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <RestartWakeupCounter+0xa8>)
 8000ef4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f08:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f0a:	f3af 8000 	nop.w
  return ;
 8000f0e:	bf00      	nop
}
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000140 	.word	0x20000140
 8000f1c:	20000234 	.word	0x20000234
 8000f20:	20000230 	.word	0x20000230
 8000f24:	58000800 	.word	0x58000800
 8000f28:	40002800 	.word	0x40002800

08000f2c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <RescheduleTimerList+0x124>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3e:	d108      	bne.n	8000f52 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f40:	bf00      	nop
 8000f42:	4b44      	ldr	r3, [pc, #272]	; (8001054 <RescheduleTimerList+0x128>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f7      	bne.n	8000f42 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <RescheduleTimerList+0x128>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <RescheduleTimerList+0x128>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f64:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <RescheduleTimerList+0x12c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	493b      	ldr	r1, [pc, #236]	; (800105c <RescheduleTimerList+0x130>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f80:	f7ff ff36 	bl	8000df0 <ReturnTimeElapsed>
 8000f84:	4603      	mov	r3, r0
 8000f86:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d205      	bcs.n	8000f9c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <RescheduleTimerList+0x134>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	e04d      	b.n	8001038 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	4a31      	ldr	r2, [pc, #196]	; (8001064 <RescheduleTimerList+0x138>)
 8000fa0:	8812      	ldrh	r2, [r2, #0]
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d906      	bls.n	8000fbc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <RescheduleTimerList+0x138>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <RescheduleTimerList+0x134>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e03d      	b.n	8001038 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <RescheduleTimerList+0x134>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fcc:	e034      	b.n	8001038 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	4922      	ldr	r1, [pc, #136]	; (800105c <RescheduleTimerList+0x130>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	3308      	adds	r3, #8
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d20a      	bcs.n	8000ffc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	491c      	ldr	r1, [pc, #112]	; (800105c <RescheduleTimerList+0x130>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e013      	b.n	8001024 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	4917      	ldr	r1, [pc, #92]	; (800105c <RescheduleTimerList+0x130>)
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3308      	adds	r3, #8
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <RescheduleTimerList+0x130>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4403      	add	r3, r0
 8001020:	3308      	adds	r3, #8
 8001022:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <RescheduleTimerList+0x130>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	3315      	adds	r3, #21
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b06      	cmp	r3, #6
 800103c:	d1c7      	bne.n	8000fce <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800103e:	89bb      	ldrh	r3, [r7, #12]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff15 	bl	8000e70 <RestartWakeupCounter>

  return ;
 8001046:	bf00      	nop
}
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40002800 	.word	0x40002800
 8001054:	20000230 	.word	0x20000230
 8001058:	2000013c 	.word	0x2000013c
 800105c:	200000ac 	.word	0x200000ac
 8001060:	20000144 	.word	0x20000144
 8001064:	20000238 	.word	0x20000238

08001068 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800106e:	f3ef 8310 	mrs	r3, PRIMASK
 8001072:	617b      	str	r3, [r7, #20]
  return(result);
 8001074:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800107c:	4b5f      	ldr	r3, [pc, #380]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	22ca      	movs	r2, #202	; 0xca
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2253      	movs	r2, #83	; 0x53
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001090:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	4b58      	ldr	r3, [pc, #352]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010a2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010a4:	4b56      	ldr	r3, [pc, #344]	; (8001200 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010b0:	4954      	ldr	r1, [pc, #336]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d172      	bne.n	80011ac <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010ca:	494e      	ldr	r1, [pc, #312]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010de:	4949      	ldr	r1, [pc, #292]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	3310      	adds	r3, #16
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010f0:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d050      	beq.n	800119c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80010fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010fe:	4941      	ldr	r1, [pc, #260]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	330d      	adds	r3, #13
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d126      	bne.n	8001162 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001118:	2101      	movs	r1, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fde4 	bl	8000ce8 <UnlinkTimer>
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f383 8810 	msr	PRIMASK, r3
}
 800112a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800112c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001130:	4934      	ldr	r1, [pc, #208]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	3304      	adds	r3, #4
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fa4e 	bl	80015e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	22ca      	movs	r2, #202	; 0xca
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2253      	movs	r2, #83	; 0x53
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
 8001160:	e014      	b.n	800118c <HW_TS_RTC_Wakeup_Handler+0x124>
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f383 8810 	msr	PRIMASK, r3
}
 800116c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800116e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f9ac 	bl	80014d0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	22ca      	movs	r2, #202	; 0xca
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	; 0x53
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800118c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	4619      	mov	r1, r3
 8001194:	69b8      	ldr	r0, [r7, #24]
 8001196:	f000 faaf 	bl	80016f8 <HW_TS_RTC_Int_AppNot>
 800119a:	e025      	b.n	80011e8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 800119c:	f7ff fec6 	bl	8000f2c <RescheduleTimerList>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f383 8810 	msr	PRIMASK, r3
}
 80011aa:	e01d      	b.n	80011e8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011ac:	bf00      	nop
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f7      	beq.n	80011ae <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011d2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80011d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f383 8810 	msr	PRIMASK, r3
}
 80011e6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	22ff      	movs	r2, #255	; 0xff
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80011f2:	bf00      	nop
}
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000230 	.word	0x20000230
 8001200:	2000013c 	.word	0x2000013c
 8001204:	200000ac 	.word	0x200000ac
 8001208:	20000144 	.word	0x20000144
 800120c:	58000800 	.word	0x58000800

08001210 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800121c:	4a64      	ldr	r2, [pc, #400]	; (80013b0 <HW_TS_Init+0x1a0>)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001222:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	22ca      	movs	r2, #202	; 0xca
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
 800122c:	4b60      	ldr	r3, [pc, #384]	; (80013b0 <HW_TS_Init+0x1a0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2253      	movs	r2, #83	; 0x53
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001236:	4b5f      	ldr	r3, [pc, #380]	; (80013b4 <HW_TS_Init+0x1a4>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <HW_TS_Init+0x1a4>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001242:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <HW_TS_Init+0x1a4>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f1c3 0304 	rsb	r3, r3, #4
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HW_TS_Init+0x1a8>)
 8001256:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <HW_TS_Init+0x1a4>)
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001260:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001264:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	fa92 f2a2 	rbit	r2, r2
 800126c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	2a00      	cmp	r2, #0
 8001276:	d101      	bne.n	800127c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001278:	2220      	movs	r2, #32
 800127a:	e003      	b.n	8001284 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	fab2 f282 	clz	r2, r2
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	40d3      	lsrs	r3, r2
 8001286:	b2db      	uxtb	r3, r3
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HW_TS_Init+0x1ac>)
 800128e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001290:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <HW_TS_Init+0x1a4>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	b29b      	uxth	r3, r3
 8001296:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800129a:	b29b      	uxth	r3, r3
 800129c:	3301      	adds	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HW_TS_Init+0x1b0>)
 80012a2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012a4:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <HW_TS_Init+0x1b0>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4a44      	ldr	r2, [pc, #272]	; (80013bc <HW_TS_Init+0x1ac>)
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012b6:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HW_TS_Init+0x1a8>)
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	40d3      	lsrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d904      	bls.n	80012d2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012c8:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HW_TS_Init+0x1b4>)
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	801a      	strh	r2, [r3, #0]
 80012d0:	e003      	b.n	80012da <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HW_TS_Init+0x1b4>)
 80012d8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012de:	f7ff fb81 	bl	80009e4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012e6:	f7ff fb69 	bl	80009bc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d143      	bne.n	8001378 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <HW_TS_Init+0x1b8>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <HW_TS_Init+0x1bc>)
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012fe:	2300      	movs	r3, #0
 8001300:	77fb      	strb	r3, [r7, #31]
 8001302:	e00c      	b.n	800131e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001304:	7ffa      	ldrb	r2, [r7, #31]
 8001306:	4932      	ldr	r1, [pc, #200]	; (80013d0 <HW_TS_Init+0x1c0>)
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	330c      	adds	r3, #12
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	3301      	adds	r3, #1
 800131c:	77fb      	strb	r3, [r7, #31]
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d9ef      	bls.n	8001304 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HW_TS_Init+0x1c4>)
 8001326:	2206      	movs	r2, #6
 8001328:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HW_TS_Init+0x1a0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800133c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HW_TS_Init+0x1a0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001352:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HW_TS_Init+0x1c8>)
 8001356:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800135a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800135c:	2003      	movs	r0, #3
 800135e:	f002 fd2c 	bl	8003dba <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HW_TS_Init+0x1a0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	e00a      	b.n	800138e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HW_TS_Init+0x1a0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001388:	2003      	movs	r0, #3
 800138a:	f002 fd08 	bl	8003d9e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	22ff      	movs	r2, #255	; 0xff
 8001396:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001398:	2200      	movs	r2, #0
 800139a:	2103      	movs	r1, #3
 800139c:	2003      	movs	r0, #3
 800139e:	f002 fcbc 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a2:	2003      	movs	r0, #3
 80013a4:	f002 fcd3 	bl	8003d4e <HAL_NVIC_EnableIRQ>

  return;
 80013a8:	bf00      	nop
}
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000230 	.word	0x20000230
 80013b4:	40002800 	.word	0x40002800
 80013b8:	20000234 	.word	0x20000234
 80013bc:	20000235 	.word	0x20000235
 80013c0:	20000236 	.word	0x20000236
 80013c4:	20000238 	.word	0x20000238
 80013c8:	20000144 	.word	0x20000144
 80013cc:	20000140 	.word	0x20000140
 80013d0:	200000ac 	.word	0x200000ac
 80013d4:	2000013c 	.word	0x2000013c
 80013d8:	58000800 	.word	0x58000800

080013dc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013dc:	b480      	push	{r7}
 80013de:	b08b      	sub	sp, #44	; 0x2c
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	4613      	mov	r3, r2
 80013ea:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013f2:	f3ef 8310 	mrs	r3, PRIMASK
 80013f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80013f8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001400:	e004      	b.n	800140c <HW_TS_Create+0x30>
  {
    loop++;
 8001402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001406:	3301      	adds	r3, #1
 8001408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800140c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001410:	2b05      	cmp	r3, #5
 8001412:	d80c      	bhi.n	800142e <HW_TS_Create+0x52>
 8001414:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001418:	492c      	ldr	r1, [pc, #176]	; (80014cc <HW_TS_Create+0xf0>)
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	330c      	adds	r3, #12
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e9      	bne.n	8001402 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800142e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001432:	2b06      	cmp	r3, #6
 8001434:	d038      	beq.n	80014a8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001436:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800143a:	4924      	ldr	r1, [pc, #144]	; (80014cc <HW_TS_Create+0xf0>)
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f383 8810 	msr	PRIMASK, r3
}
 8001456:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001458:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800145c:	491b      	ldr	r1, [pc, #108]	; (80014cc <HW_TS_Create+0xf0>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	3310      	adds	r3, #16
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800146e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001472:	4916      	ldr	r1, [pc, #88]	; (80014cc <HW_TS_Create+0xf0>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	330d      	adds	r3, #13
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001484:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001488:	4910      	ldr	r1, [pc, #64]	; (80014cc <HW_TS_Create+0xf0>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800149e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014a6:	e008      	b.n	80014ba <HW_TS_Create+0xde>
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f383 8810 	msr	PRIMASK, r3
}
 80014b2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014be:	4618      	mov	r0, r3
 80014c0:	372c      	adds	r7, #44	; 0x2c
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200000ac 	.word	0x200000ac

080014d0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014da:	f3ef 8310 	mrs	r3, PRIMASK
 80014de:	60fb      	str	r3, [r7, #12]
  return(result);
 80014e0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014e8:	2003      	movs	r0, #3
 80014ea:	f002 fc3e 	bl	8003d6a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <HW_TS_Stop+0x100>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	22ca      	movs	r2, #202	; 0xca
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <HW_TS_Stop+0x100>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2253      	movs	r2, #83	; 0x53
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	4933      	ldr	r1, [pc, #204]	; (80015d4 <HW_TS_Stop+0x104>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	330c      	adds	r3, #12
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d148      	bne.n	80015ac <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fbe2 	bl	8000ce8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HW_TS_Stop+0x108>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800152a:	7cfb      	ldrb	r3, [r7, #19]
 800152c:	2b06      	cmp	r3, #6
 800152e:	d135      	bne.n	800159c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HW_TS_Stop+0x10c>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153c:	d108      	bne.n	8001550 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800153e:	bf00      	nop
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <HW_TS_Stop+0x100>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f7      	bne.n	8001540 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HW_TS_Stop+0x100>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HW_TS_Stop+0x100>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001562:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001564:	bf00      	nop
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HW_TS_Stop+0x100>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f7      	beq.n	8001566 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HW_TS_Stop+0x100>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HW_TS_Stop+0x100>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800158a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HW_TS_Stop+0x110>)
 800158e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001592:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001594:	2003      	movs	r0, #3
 8001596:	f002 fc10 	bl	8003dba <HAL_NVIC_ClearPendingIRQ>
 800159a:	e007      	b.n	80015ac <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HW_TS_Stop+0x114>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	7cfa      	ldrb	r2, [r7, #19]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80015a8:	f7ff fcc0 	bl	8000f2c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HW_TS_Stop+0x100>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	22ff      	movs	r2, #255	; 0xff
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015b6:	2003      	movs	r0, #3
 80015b8:	f002 fbc9 	bl	8003d4e <HAL_NVIC_EnableIRQ>
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f383 8810 	msr	PRIMASK, r3
}
 80015c6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015c8:	bf00      	nop
}
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000230 	.word	0x20000230
 80015d4:	200000ac 	.word	0x200000ac
 80015d8:	2000013c 	.word	0x2000013c
 80015dc:	40002800 	.word	0x40002800
 80015e0:	58000800 	.word	0x58000800
 80015e4:	2000013d 	.word	0x2000013d

080015e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	493c      	ldr	r1, [pc, #240]	; (80016e8 <HW_TS_Start+0x100>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	330c      	adds	r3, #12
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d103      	bne.n	8001614 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff5e 	bl	80014d0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001614:	f3ef 8310 	mrs	r3, PRIMASK
 8001618:	60fb      	str	r3, [r7, #12]
  return(result);
 800161a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800161c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800161e:	b672      	cpsid	i
}
 8001620:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001622:	2003      	movs	r0, #3
 8001624:	f002 fba1 	bl	8003d6a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HW_TS_Start+0x104>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	22ca      	movs	r2, #202	; 0xca
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HW_TS_Start+0x104>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2253      	movs	r2, #83	; 0x53
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800163c:	79fa      	ldrb	r2, [r7, #7]
 800163e:	492a      	ldr	r1, [pc, #168]	; (80016e8 <HW_TS_Start+0x100>)
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	330c      	adds	r3, #12
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001650:	79fa      	ldrb	r2, [r7, #7]
 8001652:	4925      	ldr	r1, [pc, #148]	; (80016e8 <HW_TS_Start+0x100>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3308      	adds	r3, #8
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	4920      	ldr	r1, [pc, #128]	; (80016e8 <HW_TS_Start+0x100>)
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3304      	adds	r3, #4
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fa8a 	bl	8000b94 <linkTimer>
 8001680:	4603      	mov	r3, r0
 8001682:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HW_TS_Start+0x108>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HW_TS_Start+0x10c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	7c7a      	ldrb	r2, [r7, #17]
 8001692:	429a      	cmp	r2, r3
 8001694:	d002      	beq.n	800169c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001696:	f7ff fc49 	bl	8000f2c <RescheduleTimerList>
 800169a:	e013      	b.n	80016c4 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	4912      	ldr	r1, [pc, #72]	; (80016e8 <HW_TS_Start+0x100>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3308      	adds	r3, #8
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	8a7b      	ldrh	r3, [r7, #18]
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	1ac9      	subs	r1, r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <HW_TS_Start+0x100>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4403      	add	r3, r0
 80016c0:	3308      	adds	r3, #8
 80016c2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HW_TS_Start+0x104>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	22ff      	movs	r2, #255	; 0xff
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016ce:	2003      	movs	r0, #3
 80016d0:	f002 fb3d 	bl	8003d4e <HAL_NVIC_EnableIRQ>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f383 8810 	msr	PRIMASK, r3
}
 80016de:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016e0:	bf00      	nop
}
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200000ac 	.word	0x200000ac
 80016ec:	20000230 	.word	0x20000230
 80016f0:	2000013c 	.word	0x2000013c
 80016f4:	2000013d 	.word	0x2000013d

080016f8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	460b      	mov	r3, r1
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4798      	blx	r3

  return;
 800170a:	bf00      	nop
}
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4603      	mov	r3, r0
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	4613      	mov	r3, r2
 8001724:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800172a:	2300      	movs	r3, #0
 800172c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HW_UART_Transmit_DMA+0x26>
 8001734:	2b02      	cmp	r3, #2
 8001736:	d00f      	beq.n	8001758 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001738:	e01d      	b.n	8001776 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <HW_UART_Transmit_DMA+0xa4>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HW_UART_Transmit_DMA+0xa8>)
 8001742:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <HW_UART_Transmit_DMA+0xac>)
 8001744:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001746:	89bb      	ldrh	r3, [r7, #12]
 8001748:	461a      	mov	r2, r3
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	481b      	ldr	r0, [pc, #108]	; (80017bc <HW_UART_Transmit_DMA+0xa8>)
 800174e:	f005 f87b 	bl	8006848 <HAL_UART_Transmit_DMA>
 8001752:	4603      	mov	r3, r0
 8001754:	75fb      	strb	r3, [r7, #23]
            break;
 8001756:	e00e      	b.n	8001776 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8001758:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HW_UART_Transmit_DMA+0xb0>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HW_UART_Transmit_DMA+0xb4>)
 8001760:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HW_UART_Transmit_DMA+0xb8>)
 8001762:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	461a      	mov	r2, r3
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	4817      	ldr	r0, [pc, #92]	; (80017c8 <HW_UART_Transmit_DMA+0xb4>)
 800176c:	f005 f86c 	bl	8006848 <HAL_UART_Transmit_DMA>
 8001770:	4603      	mov	r3, r0
 8001772:	75fb      	strb	r3, [r7, #23]
            break;
 8001774:	bf00      	nop
    }

    switch (hal_status)
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d817      	bhi.n	80017ac <HW_UART_Transmit_DMA+0x98>
 800177c:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <HW_UART_Transmit_DMA+0x70>)
 800177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001782:	bf00      	nop
 8001784:	08001795 	.word	0x08001795
 8001788:	0800179b 	.word	0x0800179b
 800178c:	080017a1 	.word	0x080017a1
 8001790:	080017a7 	.word	0x080017a7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001794:	2300      	movs	r3, #0
 8001796:	75bb      	strb	r3, [r7, #22]
            break;
 8001798:	e009      	b.n	80017ae <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800179a:	2301      	movs	r3, #1
 800179c:	75bb      	strb	r3, [r7, #22]
            break;
 800179e:	e006      	b.n	80017ae <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80017a0:	2302      	movs	r3, #2
 80017a2:	75bb      	strb	r3, [r7, #22]
            break;
 80017a4:	e003      	b.n	80017ae <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80017a6:	2303      	movs	r3, #3
 80017a8:	75bb      	strb	r3, [r7, #22]
            break;
 80017aa:	e000      	b.n	80017ae <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80017ac:	bf00      	nop
    }

    return hw_status;
 80017ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20001394 	.word	0x20001394
 80017bc:	200014c4 	.word	0x200014c4
 80017c0:	40013800 	.word	0x40013800
 80017c4:	20001388 	.word	0x20001388
 80017c8:	200013d4 	.word	0x200013d4
 80017cc:	40008000 	.word	0x40008000

080017d0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_UART_TxCpltCallback+0x4c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00a      	beq.n	80017f8 <HAL_UART_TxCpltCallback+0x28>
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_UART_TxCpltCallback+0x50>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10f      	bne.n	8001808 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_UART_TxCpltCallback+0x54>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_UART_TxCpltCallback+0x54>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4798      	blx	r3
            }
            break;
 80017f6:	e009      	b.n	800180c <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_UART_TxCpltCallback+0x58>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_UART_TxCpltCallback+0x58>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4798      	blx	r3
            }
            break;
 8001806:	e003      	b.n	8001810 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8001808:	bf00      	nop
 800180a:	e002      	b.n	8001812 <HAL_UART_TxCpltCallback+0x42>
            break;
 800180c:	bf00      	nop
 800180e:	e000      	b.n	8001812 <HAL_UART_TxCpltCallback+0x42>
            break;
 8001810:	bf00      	nop
    }

    return;
 8001812:	bf00      	nop
}
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40008000 	.word	0x40008000
 8001820:	40013800 	.word	0x40013800
 8001824:	20001394 	.word	0x20001394
 8001828:	20001388 	.word	0x20001388

0800182c <LL_EXTI_DisableIT_0_31>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001834:	4b07      	ldr	r3, [pc, #28]	; (8001854 <LL_EXTI_DisableIT_0_31+0x28>)
 8001836:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	43db      	mvns	r3, r3
 800183e:	4905      	ldr	r1, [pc, #20]	; (8001854 <LL_EXTI_DisableIT_0_31+0x28>)
 8001840:	4013      	ands	r3, r2
 8001842:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	58000800 	.word	0x58000800

08001858 <LL_EXTI_DisableIT_32_63>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <LL_EXTI_DisableIT_32_63+0x28>)
 8001862:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	43db      	mvns	r3, r3
 800186a:	4905      	ldr	r1, [pc, #20]	; (8001880 <LL_EXTI_DisableIT_32_63+0x28>)
 800186c:	4013      	ands	r3, r2
 800186e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	58000800 	.word	0x58000800

08001884 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001890:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001892:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800189e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018aa:	4313      	orrs	r3, r2
 80018ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	cafecafe 	.word	0xcafecafe

080018c0 <LL_RCC_LSE_SetDriveCapability>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d0:	f023 0218 	bic.w	r2, r3, #24
 80018d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4313      	orrs	r3, r2
 80018dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800191e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001926:	bf00      	nop
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001940:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001944:	d101      	bne.n	800194a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800196a:	d101      	bne.n	8001970 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_AHB1_GRP1_EnableClock>:
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800198a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019a0:	68fb      	ldr	r3, [r7, #12]
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_AHB2_GRP1_EnableClock>:
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019d2:	68fb      	ldr	r3, [r7, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_AHB3_GRP1_EnableClock>:
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a04:	68fb      	ldr	r3, [r7, #12]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	041b      	lsls	r3, r3, #16
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	605a      	str	r2, [r3, #4]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
 8001a3e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	605a      	str	r2, [r3, #4]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	041b      	lsls	r3, r3, #16
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	615a      	str	r2, [r3, #20]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	615a      	str	r2, [r3, #20]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	609a      	str	r2, [r3, #8]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	683a      	ldr	r2, [r7, #0]
 8001ac8:	619a      	str	r2, [r3, #24]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <LL_LPM_EnableSleep+0x1c>)
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <LL_LPM_EnableSleep+0x1c>)
 8001ae2:	f023 0304 	bic.w	r3, r3, #4
 8001ae6:	6113      	str	r3, [r2, #16]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	22ff      	movs	r2, #255	; 0xff
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	22ca      	movs	r2, #202	; 0xca
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2253      	movs	r2, #83	; 0x53
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f023 0207 	bic.w	r2, r3, #7
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <main+0x48>)
 8001b5e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b62:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b64:	f001 ff00 	bl	8003968 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001b68:	f000 f97f 	bl	8001e6a <Reset_Device>
  Config_HSE();
 8001b6c:	f000 f969 	bl	8001e42 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b70:	f000 f818 	bl	8001ba4 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001b74:	f000 f896 	bl	8001ca4 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001b78:	f000 f95c 	bl	8001e34 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001b7c:	f000 f9b7 	bl	8001eee <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b80:	f000 f94b 	bl	8001e1a <MX_GPIO_Init>
  MX_DMA_Init();
 8001b84:	f000 f92c 	bl	8001de0 <MX_DMA_Init>
  MX_RF_Init();
 8001b88:	f000 f8ee 	bl	8001d68 <MX_RF_Init>
  MX_RTC_Init();
 8001b8c:	f000 f8f4 	bl	8001d78 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001b90:	f7fe fe2e 	bl	80007f0 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f008 fc9c 	bl	800a4d4 <UTIL_SEQ_Run>
 8001b9c:	e7fa      	b.n	8001b94 <main+0x3c>
 8001b9e:	bf00      	nop
 8001ba0:	58004000 	.word	0x58004000

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b0ae      	sub	sp, #184	; 0xb8
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bae:	2248      	movs	r2, #72	; 0x48
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f008 fee2 	bl	800a97c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2250      	movs	r2, #80	; 0x50
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f008 fed2 	bl	800a97c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bd8:	f002 feba 	bl	8004950 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff fe6f 	bl	80018c0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <SystemClock_Config+0xfc>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <SystemClock_Config+0xfc>)
 8001bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <SystemClock_Config+0xfc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001bfe:	2307      	movs	r3, #7
 8001c00:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c06:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c10:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c12:	2340      	movs	r3, #64	; 0x40
 8001c14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 fa28 	bl	8005078 <HAL_RCC_OscConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c2e:	f000 f98f 	bl	8001f50 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001c32:	236f      	movs	r3, #111	; 0x6f
 8001c34:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c36:	2302      	movs	r3, #2
 8001c38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001c46:	2300      	movs	r3, #0
 8001c48:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c52:	2101      	movs	r1, #1
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fd9b 	bl	8005790 <HAL_RCC_ClockConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c60:	f000 f976 	bl	8001f50 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001c64:	f643 0303 	movw	r3, #14339	; 0x3803
 8001c68:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c76:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001c82:	2310      	movs	r3, #16
 8001c84:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f004 f9c2 	bl	8006012 <HAL_RCCEx_PeriphCLKConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001c94:	f000 f95c 	bl	8001f50 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8001c98:	bf00      	nop
 8001c9a:	37b8      	adds	r7, #184	; 0xb8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	58000400 	.word	0x58000400

08001ca4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_IPCC_Init+0x20>)
 8001caa:	4a07      	ldr	r2, [pc, #28]	; (8001cc8 <MX_IPCC_Init+0x24>)
 8001cac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_IPCC_Init+0x20>)
 8001cb0:	f002 fdc8 	bl	8004844 <HAL_IPCC_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001cba:	f000 f949 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20001398 	.word	0x20001398
 8001cc8:	58000c00 	.word	0x58000c00

08001ccc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001cd2:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <MX_USART1_UART_Init+0x98>)
 8001cd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cd6:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001cd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001cfe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d16:	4812      	ldr	r0, [pc, #72]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001d18:	f004 fd46 	bl	80067a8 <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001d22:	f000 f915 	bl	8001f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d26:	2100      	movs	r1, #0
 8001d28:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001d2a:	f005 fd23 	bl	8007774 <HAL_UARTEx_SetTxFifoThreshold>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001d34:	f000 f90c 	bl	8001f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4809      	ldr	r0, [pc, #36]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001d3c:	f005 fd58 	bl	80077f0 <HAL_UARTEx_SetRxFifoThreshold>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001d46:	f000 f903 	bl	8001f50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_USART1_UART_Init+0x94>)
 8001d4c:	f005 fcd9 	bl	8007702 <HAL_UARTEx_DisableFifoMode>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001d56:	f000 f8fb 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	200014c4 	.word	0x200014c4
 8001d64:	40013800 	.word	0x40013800

08001d68 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <MX_RTC_Init+0x64>)
 8001d80:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001d90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d94:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dae:	480a      	ldr	r0, [pc, #40]	; (8001dd8 <MX_RTC_Init+0x60>)
 8001db0:	f004 fbb6 	bl	8006520 <HAL_RTC_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001dba:	f000 f8c9 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001dbe:	4807      	ldr	r0, [pc, #28]	; (8001ddc <MX_RTC_Init+0x64>)
 8001dc0:	f7ff fea7 	bl	8001b12 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_RTC_Init+0x64>)
 8001dc8:	f7ff feb3 	bl	8001b32 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001dcc:	4803      	ldr	r0, [pc, #12]	; (8001ddc <MX_RTC_Init+0x64>)
 8001dce:	f7ff fe93 	bl	8001af8 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20001554 	.word	0x20001554
 8001ddc:	40002800 	.word	0x40002800

08001de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001de4:	2004      	movs	r0, #4
 8001de6:	f7ff fdc9 	bl	800197c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dea:	2001      	movs	r0, #1
 8001dec:	f7ff fdc6 	bl	800197c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001df0:	2002      	movs	r0, #2
 8001df2:	f7ff fdc3 	bl	800197c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001df6:	2200      	movs	r2, #0
 8001df8:	210f      	movs	r1, #15
 8001dfa:	200e      	movs	r0, #14
 8001dfc:	f001 ff8d 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001e00:	200e      	movs	r0, #14
 8001e02:	f001 ffa4 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	210f      	movs	r1, #15
 8001e0a:	203a      	movs	r0, #58	; 0x3a
 8001e0c:	f001 ff85 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001e10:	203a      	movs	r0, #58	; 0x3a
 8001e12:	f001 ff9c 	bl	8003d4e <HAL_NVIC_EnableIRQ>

}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1e:	2004      	movs	r0, #4
 8001e20:	f7ff fdc5 	bl	80019ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e24:	2001      	movs	r0, #1
 8001e26:	f7ff fdc2 	bl	80019ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2a:	2002      	movs	r0, #2
 8001e2c:	f7ff fdbf 	bl	80019ae <LL_AHB2_GRP1_EnableClock>

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001e38:	bf00      	nop
}
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f007 f82f 	bl	8008eac <OTP_Read>
 8001e4e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	799b      	ldrb	r3, [r3, #6]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fd12 	bl	8001884 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
}  
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <Reset_Device>:


static void Reset_Device( void )
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001e6e:	f000 f827 	bl	8001ec0 <Reset_BackupDomain>

	Reset_IPCC();
 8001e72:	f000 f803 	bl	8001e7c <Reset_IPCC>
#endif

	return;
 8001e76:	bf00      	nop
}
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001e80:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e84:	f7ff fdac 	bl	80019e0 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001e88:	213f      	movs	r1, #63	; 0x3f
 8001e8a:	480c      	ldr	r0, [pc, #48]	; (8001ebc <Reset_IPCC+0x40>)
 8001e8c:	f7ff fe07 	bl	8001a9e <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001e90:	213f      	movs	r1, #63	; 0x3f
 8001e92:	480a      	ldr	r0, [pc, #40]	; (8001ebc <Reset_IPCC+0x40>)
 8001e94:	f7ff fe11 	bl	8001aba <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001e98:	213f      	movs	r1, #63	; 0x3f
 8001e9a:	4808      	ldr	r0, [pc, #32]	; (8001ebc <Reset_IPCC+0x40>)
 8001e9c:	f7ff fdb9 	bl	8001a12 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001ea0:	213f      	movs	r1, #63	; 0x3f
 8001ea2:	4806      	ldr	r0, [pc, #24]	; (8001ebc <Reset_IPCC+0x40>)
 8001ea4:	f7ff fdd8 	bl	8001a58 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001ea8:	213f      	movs	r1, #63	; 0x3f
 8001eaa:	4804      	ldr	r0, [pc, #16]	; (8001ebc <Reset_IPCC+0x40>)
 8001eac:	f7ff fdc3 	bl	8001a36 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001eb0:	213f      	movs	r1, #63	; 0x3f
 8001eb2:	4802      	ldr	r0, [pc, #8]	; (8001ebc <Reset_IPCC+0x40>)
 8001eb4:	f7ff fde2 	bl	8001a7c <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001eb8:	bf00      	nop
}
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	58000c00 	.word	0x58000c00

08001ec0 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001ec4:	f7ff fd34 	bl	8001930 <LL_RCC_IsActiveFlag_PINRST>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00d      	beq.n	8001eea <Reset_BackupDomain+0x2a>
 8001ece:	f7ff fd42 	bl	8001956 <LL_RCC_IsActiveFlag_SFTRST>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d108      	bne.n	8001eea <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001ed8:	f002 fd3a 	bl	8004950 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001edc:	f002 fd38 	bl	8004950 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001ee0:	f7ff fd04 	bl	80018ec <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001ee4:	f7ff fd13 	bl	800190e <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
}
 8001eec:	bd80      	pop	{r7, pc}

08001eee <Init_Exti>:

static void Init_Exti( void )
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef6:	f7ff fc99 	bl	800182c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001efa:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001efe:	f7ff fcab 	bl	8001858 <LL_EXTI_DisableIT_32_63>

  return;
 8001f02:	bf00      	nop
}
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f0e:	f001 fd99 	bl	8003a44 <HAL_GetTick>
 8001f12:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f1e:	d00a      	beq.n	8001f36 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001f20:	f001 fda8 	bl	8003a74 <HAL_GetTickFreq>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f2e:	e002      	b.n	8001f36 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001f30:	f7ff fdd2 	bl	8001ad8 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001f34:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001f36:	f001 fd85 	bl	8003a44 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d8f4      	bhi.n	8001f30 <HAL_Delay+0x2a>
  }
}
 8001f46:	bf00      	nop
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_RCC_SetRTCClockSource>:
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <LL_RCC_EnableRTC>:
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_AHB2_GRP1_EnableClock>:
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_AHB3_GRP1_EnableClock>:
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b085      	sub	sp, #20
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4013      	ands	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002002:	68fb      	ldr	r3, [r7, #12]
}
 8002004:	bf00      	nop
 8002006:	3714      	adds	r7, #20
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_APB1_GRP1_EnableClock>:
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800201e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4313      	orrs	r3, r2
 8002026:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4013      	ands	r3, r2
 8002032:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002034:	68fb      	ldr	r3, [r7, #12]
}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr

08002042 <LL_APB1_GRP2_EnableClock>:
{
 8002042:	b480      	push	{r7}
 8002044:	b085      	sub	sp, #20
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4313      	orrs	r3, r2
 8002058:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800205a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4013      	ands	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_APB2_GRP1_EnableClock>:
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800207c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002080:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002082:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4313      	orrs	r3, r2
 800208a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4013      	ands	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002098:	68fb      	ldr	r3, [r7, #12]
}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80020aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020ae:	f7ff ff96 	bl	8001fde <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	202e      	movs	r0, #46	; 0x2e
 80020b8:	f001 fe2f 	bl	8003d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80020bc:	202e      	movs	r0, #46	; 0x2e
 80020be:	f001 fe46 	bl	8003d4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_IPCC_MspInit+0x44>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d113      	bne.n	8002102 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80020da:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80020de:	f7ff ff7e 	bl	8001fde <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	202c      	movs	r0, #44	; 0x2c
 80020e8:	f001 fe17 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80020ec:	202c      	movs	r0, #44	; 0x2c
 80020ee:	f001 fe2e 	bl	8003d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	202d      	movs	r0, #45	; 0x2d
 80020f8:	f001 fe0f 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80020fc:	202d      	movs	r0, #45	; 0x2d
 80020fe:	f001 fe26 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	58000c00 	.word	0x58000c00

08002110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08c      	sub	sp, #48	; 0x30
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a59      	ldr	r2, [pc, #356]	; (8002294 <HAL_UART_MspInit+0x184>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d15e      	bne.n	80021f0 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002132:	2001      	movs	r0, #1
 8002134:	f7ff ff85 	bl	8002042 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002138:	2001      	movs	r0, #1
 800213a:	f7ff ff37 	bl	8001fac <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800213e:	230c      	movs	r3, #12
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800214e:	2308      	movs	r3, #8
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800215c:	f002 f9ae 	bl	80044bc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_UART_MspInit+0x188>)
 8002162:	4a4e      	ldr	r2, [pc, #312]	; (800229c <HAL_UART_MspInit+0x18c>)
 8002164:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002166:	4b4c      	ldr	r3, [pc, #304]	; (8002298 <HAL_UART_MspInit+0x188>)
 8002168:	2211      	movs	r2, #17
 800216a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800216c:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_UART_MspInit+0x188>)
 800216e:	2210      	movs	r2, #16
 8002170:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002172:	4b49      	ldr	r3, [pc, #292]	; (8002298 <HAL_UART_MspInit+0x188>)
 8002174:	2200      	movs	r2, #0
 8002176:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002178:	4b47      	ldr	r3, [pc, #284]	; (8002298 <HAL_UART_MspInit+0x188>)
 800217a:	2280      	movs	r2, #128	; 0x80
 800217c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217e:	4b46      	ldr	r3, [pc, #280]	; (8002298 <HAL_UART_MspInit+0x188>)
 8002180:	2200      	movs	r2, #0
 8002182:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002184:	4b44      	ldr	r3, [pc, #272]	; (8002298 <HAL_UART_MspInit+0x188>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_UART_MspInit+0x188>)
 800218c:	2200      	movs	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002190:	4b41      	ldr	r3, [pc, #260]	; (8002298 <HAL_UART_MspInit+0x188>)
 8002192:	2200      	movs	r2, #0
 8002194:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002196:	4840      	ldr	r0, [pc, #256]	; (8002298 <HAL_UART_MspInit+0x188>)
 8002198:	f001 fe1e 	bl	8003dd8 <HAL_DMA_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 80021a2:	f7ff fed5 	bl	8001f50 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80021a6:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80021aa:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	4619      	mov	r1, r3
 80021c2:	4835      	ldr	r0, [pc, #212]	; (8002298 <HAL_UART_MspInit+0x188>)
 80021c4:	f002 f93a 	bl	800443c <HAL_DMAEx_ConfigMuxSync>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80021ce:	f7ff febf 	bl	8001f50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a30      	ldr	r2, [pc, #192]	; (8002298 <HAL_UART_MspInit+0x188>)
 80021d6:	679a      	str	r2, [r3, #120]	; 0x78
 80021d8:	4a2f      	ldr	r2, [pc, #188]	; (8002298 <HAL_UART_MspInit+0x188>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2025      	movs	r0, #37	; 0x25
 80021e4:	f001 fd99 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80021e8:	2025      	movs	r0, #37	; 0x25
 80021ea:	f001 fdb0 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021ee:	e04c      	b.n	800228a <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2a      	ldr	r2, [pc, #168]	; (80022a0 <HAL_UART_MspInit+0x190>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d147      	bne.n	800228a <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021fe:	f7ff ff39 	bl	8002074 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002202:	2002      	movs	r0, #2
 8002204:	f7ff fed2 	bl	8001fac <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002208:	23c0      	movs	r3, #192	; 0xc0
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002210:	2301      	movs	r3, #1
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002214:	2303      	movs	r3, #3
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002218:	2307      	movs	r3, #7
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4820      	ldr	r0, [pc, #128]	; (80022a4 <HAL_UART_MspInit+0x194>)
 8002224:	f002 f94a 	bl	80044bc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002228:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <HAL_UART_MspInit+0x198>)
 800222a:	4a20      	ldr	r2, [pc, #128]	; (80022ac <HAL_UART_MspInit+0x19c>)
 800222c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <HAL_UART_MspInit+0x198>)
 8002230:	220f      	movs	r2, #15
 8002232:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002234:	4b1c      	ldr	r3, [pc, #112]	; (80022a8 <HAL_UART_MspInit+0x198>)
 8002236:	2210      	movs	r2, #16
 8002238:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_UART_MspInit+0x198>)
 800223c:	2200      	movs	r2, #0
 800223e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_UART_MspInit+0x198>)
 8002242:	2280      	movs	r2, #128	; 0x80
 8002244:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002246:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <HAL_UART_MspInit+0x198>)
 8002248:	2200      	movs	r2, #0
 800224a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_UART_MspInit+0x198>)
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_UART_MspInit+0x198>)
 8002254:	2200      	movs	r2, #0
 8002256:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_UART_MspInit+0x198>)
 800225a:	2200      	movs	r2, #0
 800225c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800225e:	4812      	ldr	r0, [pc, #72]	; (80022a8 <HAL_UART_MspInit+0x198>)
 8002260:	f001 fdba 	bl	8003dd8 <HAL_DMA_Init>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_UART_MspInit+0x15e>
      Error_Handler();
 800226a:	f7ff fe71 	bl	8001f50 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <HAL_UART_MspInit+0x198>)
 8002272:	679a      	str	r2, [r3, #120]	; 0x78
 8002274:	4a0c      	ldr	r2, [pc, #48]	; (80022a8 <HAL_UART_MspInit+0x198>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2024      	movs	r0, #36	; 0x24
 8002280:	f001 fd4b 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002284:	2024      	movs	r0, #36	; 0x24
 8002286:	f001 fd62 	bl	8003d4e <HAL_NVIC_EnableIRQ>
}
 800228a:	bf00      	nop
 800228c:	3730      	adds	r7, #48	; 0x30
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40008000 	.word	0x40008000
 8002298:	20001578 	.word	0x20001578
 800229c:	40020044 	.word	0x40020044
 80022a0:	40013800 	.word	0x40013800
 80022a4:	48000400 	.word	0x48000400
 80022a8:	20001464 	.word	0x20001464
 80022ac:	40020444 	.word	0x40020444

080022b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_RTC_MspInit+0x3c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d110      	bne.n	80022e4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80022c2:	f002 fb45 	bl	8004950 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 80022c6:	f002 fb43 	bl	8004950 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80022ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022ce:	f7ff fe46 	bl	8001f5e <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022d2:	f7ff fe5a 	bl	8001f8a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80022d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022da:	f7ff fe99 	bl	8002010 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f004 fa0c 	bl	80066fc <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40002800 	.word	0x40002800

080022f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002302:	e7fe      	b.n	8002302 <HardFault_Handler+0x4>

08002304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <MemManage_Handler+0x4>

0800230a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <BusFault_Handler+0x4>

08002310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <UsageFault_Handler+0x4>

08002316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002332:	b480      	push	{r7}
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002344:	f001 fb6a 	bl	8003a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002348:	bf00      	nop
 800234a:	bd80      	pop	{r7, pc}

0800234c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <DMA1_Channel4_IRQHandler+0x10>)
 8002352:	f001 ff22 	bl	800419a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20001578 	.word	0x20001578

08002360 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <USART1_IRQHandler+0x10>)
 8002366:	f004 faef 	bl	8006948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	200014c4 	.word	0x200014c4

08002374 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <LPUART1_IRQHandler+0x10>)
 800237a:	f004 fae5 	bl	8006948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200013d4 	.word	0x200013d4

08002388 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800238c:	f000 fff2 	bl	8003374 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}

08002394 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002398:	f001 f824 	bl	80033e4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80023a4:	f002 fa2a 	bl	80047fc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}

080023ac <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA2_Channel4_IRQHandler+0x10>)
 80023b2:	f001 fef2 	bl	800419a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20001464 	.word	0x20001464

080023c0 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80023c4:	2010      	movs	r0, #16
 80023c6:	f002 fa01 	bl	80047cc <HAL_GPIO_EXTI_IRQHandler>
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}

080023ce <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f002 f9fa 	bl	80047cc <HAL_GPIO_EXTI_IRQHandler>
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}

080023dc <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 80023e0:	f7fe fe42 	bl	8001068 <HW_TS_RTC_Wakeup_Handler>
}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e00a      	b.n	8002410 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023fa:	f3af 8000 	nop.w
 80023fe:	4601      	mov	r1, r0
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	60ba      	str	r2, [r7, #8]
 8002406:	b2ca      	uxtb	r2, r1
 8002408:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	3301      	adds	r3, #1
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	dbf0      	blt.n	80023fa <_read+0x12>
	}

return len;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
	return -1;
 800242a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800244a:	605a      	str	r2, [r3, #4]
	return 0;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <_isatty>:

int _isatty(int file)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
	return 1;
 8002462:	2301      	movs	r3, #1
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
	return 0;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002494:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <_sbrk+0x5c>)
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <_sbrk+0x60>)
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d102      	bne.n	80024ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <_sbrk+0x64>)
 80024aa:	4a12      	ldr	r2, [pc, #72]	; (80024f4 <_sbrk+0x68>)
 80024ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024ae:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d207      	bcs.n	80024cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024bc:	f008 fa26 	bl	800a90c <__errno>
 80024c0:	4603      	mov	r3, r0
 80024c2:	220c      	movs	r2, #12
 80024c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	e009      	b.n	80024e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <_sbrk+0x64>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	4a05      	ldr	r2, [pc, #20]	; (80024f0 <_sbrk+0x64>)
 80024dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024de:	68fb      	ldr	r3, [r7, #12]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20030000 	.word	0x20030000
 80024ec:	00001000 	.word	0x00001000
 80024f0:	2000023c 	.word	0x2000023c
 80024f4:	200015f8 	.word	0x200015f8

080024f8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80024fc:	4b03      	ldr	r3, [pc, #12]	; (800250c <LL_FLASH_GetUDN+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	1fff7580 	.word	0x1fff7580

08002510 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <LL_FLASH_GetDeviceID+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	b2db      	uxtb	r3, r3
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	1fff7584 	.word	0x1fff7584

08002528 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <LL_FLASH_GetSTCompanyID+0x14>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	0a1b      	lsrs	r3, r3, #8
}
 8002532:	4618      	mov	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	1fff7584 	.word	0x1fff7584

08002540 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <APP_BLE_Init+0xc4>)
 8002548:	463c      	mov	r4, r7
 800254a:	461d      	mov	r5, r3
 800254c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002554:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002558:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800255c:	f000 fa2c 	bl	80029b8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002560:	2101      	movs	r1, #1
 8002562:	2002      	movs	r0, #2
 8002564:	f007 ff86 	bl	800a474 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002568:	4a27      	ldr	r2, [pc, #156]	; (8002608 <APP_BLE_Init+0xc8>)
 800256a:	2100      	movs	r1, #0
 800256c:	2008      	movs	r0, #8
 800256e:	f008 f895 	bl	800a69c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8002572:	463b      	mov	r3, r7
 8002574:	4618      	mov	r0, r3
 8002576:	f006 fded 	bl	8009154 <SHCI_C2_BLE_Init>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8002580:	f7ff fce6 	bl	8001f50 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002584:	f000 fa2e 	bl	80029e4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002588:	f007 fc76 	bl	8009e78 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800258c:	4b1f      	ldr	r3, [pc, #124]	; (800260c <APP_BLE_Init+0xcc>)
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8002594:	4b1d      	ldr	r3, [pc, #116]	; (800260c <APP_BLE_Init+0xcc>)
 8002596:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800259a:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800259c:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <APP_BLE_Init+0xd0>)
 800259e:	2100      	movs	r1, #0
 80025a0:	2001      	movs	r0, #1
 80025a2:	f008 f87b 	bl	800a69c <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 80025a6:	4a1b      	ldr	r2, [pc, #108]	; (8002614 <APP_BLE_Init+0xd4>)
 80025a8:	2100      	movs	r1, #0
 80025aa:	2004      	movs	r0, #4
 80025ac:	f008 f876 	bl	800a69c <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80025b0:	2006      	movs	r0, #6
 80025b2:	f006 f84e 	bl	8008652 <aci_hal_set_radio_activity_mask>
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <APP_BLE_Init+0xd8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 80025bc:	4b17      	ldr	r3, [pc, #92]	; (800261c <APP_BLE_Init+0xdc>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 80025c2:	f000 fd71 	bl	80030a8 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <APP_BLE_Init+0xe0>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	4916      	ldr	r1, [pc, #88]	; (8002624 <APP_BLE_Init+0xe4>)
 80025cc:	2000      	movs	r0, #0
 80025ce:	f7fe ff05 	bl	80013dc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <APP_BLE_Init+0xe8>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	4915      	ldr	r1, [pc, #84]	; (800262c <APP_BLE_Init+0xec>)
 80025d8:	2000      	movs	r0, #0
 80025da:	f7fe feff 	bl	80013dc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <APP_BLE_Init+0xcc>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80025e4:	4b09      	ldr	r3, [pc, #36]	; (800260c <APP_BLE_Init+0xcc>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80025ea:	4b11      	ldr	r3, [pc, #68]	; (8002630 <APP_BLE_Init+0xf0>)
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <APP_BLE_Init+0xf4>)
 80025f2:	22a0      	movs	r2, #160	; 0xa0
 80025f4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80025f6:	2001      	movs	r0, #1
 80025f8:	f000 fab6 	bl	8002b68 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80025fc:	bf00      	nop
}
 80025fe:	3730      	adds	r7, #48	; 0x30
 8002600:	46bd      	mov	sp, r7
 8002602:	bdb0      	pop	{r4, r5, r7, pc}
 8002604:	0800b958 	.word	0x0800b958
 8002608:	08008b79 	.word	0x08008b79
 800260c:	20000148 	.word	0x20000148
 8002610:	08002d3d 	.word	0x08002d3d
 8002614:	08002e85 	.word	0x08002e85
 8002618:	200015dd 	.word	0x200015dd
 800261c:	200015dc 	.word	0x200015dc
 8002620:	08002d9d 	.word	0x08002d9d
 8002624:	200001c9 	.word	0x200001c9
 8002628:	08002dad 	.word	0x08002dad
 800262c:	200001ca 	.word	0x200001ca
 8002630:	200001cc 	.word	0x200001cc
 8002634:	200001ce 	.word	0x200001ce

08002638 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002640:	2342      	movs	r3, #66	; 0x42
 8002642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3301      	adds	r3, #1
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2bff      	cmp	r3, #255	; 0xff
 8002652:	f000 80b6 	beq.w	80027c2 <SVCCTL_App_Notification+0x18a>
 8002656:	2bff      	cmp	r3, #255	; 0xff
 8002658:	f300 8158 	bgt.w	800290c <SVCCTL_App_Notification+0x2d4>
 800265c:	2b05      	cmp	r3, #5
 800265e:	d002      	beq.n	8002666 <SVCCTL_App_Notification+0x2e>
 8002660:	2b3e      	cmp	r3, #62	; 0x3e
 8002662:	d023      	beq.n	80026ac <SVCCTL_App_Notification+0x74>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8002664:	e152      	b.n	800290c <SVCCTL_App_Notification+0x2d4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8002666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002668:	3302      	adds	r3, #2
 800266a:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002672:	b29a      	uxth	r2, r3
 8002674:	4ba9      	ldr	r3, [pc, #676]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 8002676:	8adb      	ldrh	r3, [r3, #22]
 8002678:	429a      	cmp	r2, r3
 800267a:	d109      	bne.n	8002690 <SVCCTL_App_Notification+0x58>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800267c:	4ba7      	ldr	r3, [pc, #668]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 800267e:	2200      	movs	r2, #0
 8002680:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002682:	4ba6      	ldr	r3, [pc, #664]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 800268a:	48a5      	ldr	r0, [pc, #660]	; (8002920 <SVCCTL_App_Notification+0x2e8>)
 800268c:	f008 fa04 	bl	800aa98 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8002690:	2001      	movs	r0, #1
 8002692:	f000 fa69 	bl	8002b68 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002696:	4ba3      	ldr	r3, [pc, #652]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800269c:	4b9f      	ldr	r3, [pc, #636]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 800269e:	8ada      	ldrh	r2, [r3, #22]
 80026a0:	4ba0      	ldr	r3, [pc, #640]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 80026a2:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 80026a4:	489f      	ldr	r0, [pc, #636]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 80026a6:	f000 fceb 	bl	8003080 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80026aa:	e132      	b.n	8002912 <SVCCTL_App_Notification+0x2da>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	3302      	adds	r3, #2
 80026b0:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d009      	beq.n	80026ce <SVCCTL_App_Notification+0x96>
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	dc7f      	bgt.n	80027be <SVCCTL_App_Notification+0x186>
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d043      	beq.n	800274a <SVCCTL_App_Notification+0x112>
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d17b      	bne.n	80027be <SVCCTL_App_Notification+0x186>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 80026c6:	4898      	ldr	r0, [pc, #608]	; (8002928 <SVCCTL_App_Notification+0x2f0>)
 80026c8:	f008 f9e6 	bl	800aa98 <puts>
          break;
 80026cc:	e078      	b.n	80027c0 <SVCCTL_App_Notification+0x188>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 80026ce:	4897      	ldr	r0, [pc, #604]	; (800292c <SVCCTL_App_Notification+0x2f4>)
 80026d0:	f008 f9e2 	bl	800aa98 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	3301      	adds	r3, #1
 80026d8:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d103      	bne.n	80026ea <SVCCTL_App_Notification+0xb2>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 80026e2:	4893      	ldr	r0, [pc, #588]	; (8002930 <SVCCTL_App_Notification+0x2f8>)
 80026e4:	f008 f9d8 	bl	800aa98 <puts>
 80026e8:	e002      	b.n	80026f0 <SVCCTL_App_Notification+0xb8>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 80026ea:	4892      	ldr	r0, [pc, #584]	; (8002934 <SVCCTL_App_Notification+0x2fc>)
 80026ec:	f008 f9d4 	bl	800aa98 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80026f0:	4b8a      	ldr	r3, [pc, #552]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 80026f2:	8adb      	ldrh	r3, [r3, #22]
 80026f4:	f107 020e 	add.w	r2, r7, #14
 80026f8:	f107 010f 	add.w	r1, r7, #15
 80026fc:	4618      	mov	r0, r3
 80026fe:	f006 f816 	bl	800872e <hci_le_read_phy>
 8002702:	4603      	mov	r3, r0
 8002704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8002708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800270c:	2b00      	cmp	r3, #0
 800270e:	d118      	bne.n	8002742 <SVCCTL_App_Notification+0x10a>
            APP_DBG_MSG("Read_PHY success \n");
 8002710:	4889      	ldr	r0, [pc, #548]	; (8002938 <SVCCTL_App_Notification+0x300>)
 8002712:	f008 f9c1 	bl	800aa98 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8002716:	7bfb      	ldrb	r3, [r7, #15]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d10a      	bne.n	8002732 <SVCCTL_App_Notification+0xfa>
 800271c:	7bbb      	ldrb	r3, [r7, #14]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d107      	bne.n	8002732 <SVCCTL_App_Notification+0xfa>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	4619      	mov	r1, r3
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	461a      	mov	r2, r3
 800272a:	4884      	ldr	r0, [pc, #528]	; (800293c <SVCCTL_App_Notification+0x304>)
 800272c:	f008 f92e 	bl	800a98c <iprintf>
          break;
 8002730:	e046      	b.n	80027c0 <SVCCTL_App_Notification+0x188>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	4619      	mov	r1, r3
 8002736:	7bbb      	ldrb	r3, [r7, #14]
 8002738:	461a      	mov	r2, r3
 800273a:	4880      	ldr	r0, [pc, #512]	; (800293c <SVCCTL_App_Notification+0x304>)
 800273c:	f008 f926 	bl	800a98c <iprintf>
          break;
 8002740:	e03e      	b.n	80027c0 <SVCCTL_App_Notification+0x188>
            APP_DBG_MSG("Read conf not succeess \n");
 8002742:	487f      	ldr	r0, [pc, #508]	; (8002940 <SVCCTL_App_Notification+0x308>)
 8002744:	f008 f9a8 	bl	800aa98 <puts>
          break;
 8002748:	e03a      	b.n	80027c0 <SVCCTL_App_Notification+0x188>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3301      	adds	r3, #1
 800274e:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002750:	4b72      	ldr	r3, [pc, #456]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 8002752:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe feba 	bl	80014d0 <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002762:	b29b      	uxth	r3, r3
 8002764:	4619      	mov	r1, r3
 8002766:	4877      	ldr	r0, [pc, #476]	; (8002944 <SVCCTL_App_Notification+0x30c>)
 8002768:	f008 f910 	bl	800a98c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800276c:	4b6b      	ldr	r3, [pc, #428]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 800276e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002772:	2b04      	cmp	r3, #4
 8002774:	d104      	bne.n	8002780 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002776:	4b69      	ldr	r3, [pc, #420]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 8002778:	2206      	movs	r2, #6
 800277a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800277e:	e003      	b.n	8002788 <SVCCTL_App_Notification+0x150>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8002780:	4b66      	ldr	r3, [pc, #408]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 8002782:	2205      	movs	r2, #5
 8002784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b62      	ldr	r3, [pc, #392]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 8002792:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002794:	4b63      	ldr	r3, [pc, #396]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800279a:	4b60      	ldr	r3, [pc, #384]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 800279c:	8ada      	ldrh	r2, [r3, #22]
 800279e:	4b61      	ldr	r3, [pc, #388]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 80027a0:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80027a2:	4860      	ldr	r0, [pc, #384]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 80027a4:	f000 fc6c 	bl	8003080 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80027a8:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80027ae:	4b5b      	ldr	r3, [pc, #364]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 80027b0:	8ada      	ldrh	r2, [r3, #22]
 80027b2:	4b5c      	ldr	r3, [pc, #368]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 80027b4:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80027b6:	485b      	ldr	r0, [pc, #364]	; (8002924 <SVCCTL_App_Notification+0x2ec>)
 80027b8:	f000 fc62 	bl	8003080 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80027bc:	e000      	b.n	80027c0 <SVCCTL_App_Notification+0x188>
          break;
 80027be:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80027c0:	e0a7      	b.n	8002912 <SVCCTL_App_Notification+0x2da>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80027c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c4:	3302      	adds	r3, #2
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027d2:	f000 8087 	beq.w	80028e4 <SVCCTL_App_Notification+0x2ac>
 80027d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027da:	f300 8099 	bgt.w	8002910 <SVCCTL_App_Notification+0x2d8>
 80027de:	2b04      	cmp	r3, #4
 80027e0:	f000 8088 	beq.w	80028f4 <SVCCTL_App_Notification+0x2bc>
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	f2c0 8093 	blt.w	8002910 <SVCCTL_App_Notification+0x2d8>
 80027ea:	f240 420a 	movw	r2, #1034	; 0x40a
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f300 808e 	bgt.w	8002910 <SVCCTL_App_Notification+0x2d8>
 80027f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f8:	f2c0 808a 	blt.w	8002910 <SVCCTL_App_Notification+0x2d8>
 80027fc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002800:	2b0a      	cmp	r3, #10
 8002802:	f200 8085 	bhi.w	8002910 <SVCCTL_App_Notification+0x2d8>
 8002806:	a201      	add	r2, pc, #4	; (adr r2, 800280c <SVCCTL_App_Notification+0x1d4>)
 8002808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280c:	08002839 	.word	0x08002839
 8002810:	080028bb 	.word	0x080028bb
 8002814:	08002841 	.word	0x08002841
 8002818:	0800284f 	.word	0x0800284f
 800281c:	08002857 	.word	0x08002857
 8002820:	0800285f 	.word	0x0800285f
 8002824:	08002911 	.word	0x08002911
 8002828:	080028ed 	.word	0x080028ed
 800282c:	08002877 	.word	0x08002877
 8002830:	08002887 	.word	0x08002887
 8002834:	0800287f 	.word	0x0800287f
        APP_DBG_MSG("\r\n\r** ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8002838:	4843      	ldr	r0, [pc, #268]	; (8002948 <SVCCTL_App_Notification+0x310>)
 800283a:	f008 f92d 	bl	800aa98 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800283e:	e064      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8002840:	4842      	ldr	r0, [pc, #264]	; (800294c <SVCCTL_App_Notification+0x314>)
 8002842:	f008 f929 	bl	800aa98 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 8002846:	4842      	ldr	r0, [pc, #264]	; (8002950 <SVCCTL_App_Notification+0x318>)
 8002848:	f008 f926 	bl	800aa98 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800284c:	e05d      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE \n");
 800284e:	4841      	ldr	r0, [pc, #260]	; (8002954 <SVCCTL_App_Notification+0x31c>)
 8002850:	f008 f922 	bl	800aa98 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 8002854:	e059      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 8002856:	4840      	ldr	r0, [pc, #256]	; (8002958 <SVCCTL_App_Notification+0x320>)
 8002858:	f008 f91e 	bl	800aa98 <puts>
          break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 800285c:	e055      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800285e:	483f      	ldr	r0, [pc, #252]	; (800295c <SVCCTL_App_Notification+0x324>)
 8002860:	f008 f91a 	bl	800aa98 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 8002866:	8adb      	ldrh	r3, [r3, #22]
 8002868:	4618      	mov	r0, r3
 800286a:	f005 fb4c 	bl	8007f06 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 800286e:	483c      	ldr	r0, [pc, #240]	; (8002960 <SVCCTL_App_Notification+0x328>)
 8002870:	f008 f912 	bl	800aa98 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8002874:	e049      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
         APP_DBG_MSG("\r\n\r** ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 8002876:	483b      	ldr	r0, [pc, #236]	; (8002964 <SVCCTL_App_Notification+0x32c>)
 8002878:	f008 f90e 	bl	800aa98 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800287c:	e045      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800287e:	483a      	ldr	r0, [pc, #232]	; (8002968 <SVCCTL_App_Notification+0x330>)
 8002880:	f008 f90a 	bl	800aa98 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 8002884:	e041      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blecore_evt->data))->Numeric_Value);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 800288a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800288e:	4619      	mov	r1, r3
 8002890:	4836      	ldr	r0, [pc, #216]	; (800296c <SVCCTL_App_Notification+0x334>)
 8002892:	f008 f87b 	bl	800a98c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blecore_evt->data))->Numeric_Value);
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 800289a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800289e:	4619      	mov	r1, r3
 80028a0:	4833      	ldr	r0, [pc, #204]	; (8002970 <SVCCTL_App_Notification+0x338>)
 80028a2:	f008 f873 	bl	800a98c <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 80028a8:	8adb      	ldrh	r3, [r3, #22]
 80028aa:	2101      	movs	r1, #1
 80028ac:	4618      	mov	r0, r3
 80028ae:	f005 fb74 	bl	8007f9a <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 80028b2:	4830      	ldr	r0, [pc, #192]	; (8002974 <SVCCTL_App_Notification+0x33c>)
 80028b4:	f008 f8f0 	bl	800aa98 <puts>
      break;
 80028b8:	e027      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	3302      	adds	r3, #2
 80028be:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 80028c0:	6a3b      	ldr	r3, [r7, #32]
 80028c2:	789b      	ldrb	r3, [r3, #2]
 80028c4:	4619      	mov	r1, r3
 80028c6:	482c      	ldr	r0, [pc, #176]	; (8002978 <SVCCTL_App_Notification+0x340>)
 80028c8:	f008 f860 	bl	800a98c <iprintf>
            if (pairing_complete->Status == 0)
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	789b      	ldrb	r3, [r3, #2]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d103      	bne.n	80028dc <SVCCTL_App_Notification+0x2a4>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 80028d4:	4829      	ldr	r0, [pc, #164]	; (800297c <SVCCTL_App_Notification+0x344>)
 80028d6:	f008 f8df 	bl	800aa98 <puts>
           break;    
 80028da:	e016      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 80028dc:	4828      	ldr	r0, [pc, #160]	; (8002980 <SVCCTL_App_Notification+0x348>)
 80028de:	f008 f8db 	bl	800aa98 <puts>
           break;    
 80028e2:	e012      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
          mutex = 1;
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <SVCCTL_App_Notification+0x34c>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
      break;
 80028ea:	e00e      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 80028ec:	4826      	ldr	r0, [pc, #152]	; (8002988 <SVCCTL_App_Notification+0x350>)
 80028ee:	f008 f8d3 	bl	800aa98 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80028f2:	e00a      	b.n	800290a <SVCCTL_App_Notification+0x2d2>
          BSP_LED_On(LED_GREEN);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f000 ff1b 	bl	8003730 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 80028fa:	4b08      	ldr	r3, [pc, #32]	; (800291c <SVCCTL_App_Notification+0x2e4>)
 80028fc:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002900:	210a      	movs	r1, #10
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fe70 	bl	80015e8 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8002908:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800290a:	e001      	b.n	8002910 <SVCCTL_App_Notification+0x2d8>
      break;
 800290c:	bf00      	nop
 800290e:	e000      	b.n	8002912 <SVCCTL_App_Notification+0x2da>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002910:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	3730      	adds	r7, #48	; 0x30
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000148 	.word	0x20000148
 8002920:	0800b988 	.word	0x0800b988
 8002924:	200015d8 	.word	0x200015d8
 8002928:	0800b9b0 	.word	0x0800b9b0
 800292c:	0800b9dc 	.word	0x0800b9dc
 8002930:	0800b9f8 	.word	0x0800b9f8
 8002934:	0800ba1c 	.word	0x0800ba1c
 8002938:	0800ba44 	.word	0x0800ba44
 800293c:	0800ba58 	.word	0x0800ba58
 8002940:	0800ba74 	.word	0x0800ba74
 8002944:	0800ba8c 	.word	0x0800ba8c
 8002948:	0800bad0 	.word	0x0800bad0
 800294c:	0800bb00 	.word	0x0800bb00
 8002950:	0800bb28 	.word	0x0800bb28
 8002954:	0800bb48 	.word	0x0800bb48
 8002958:	0800bb74 	.word	0x0800bb74
 800295c:	0800bba8 	.word	0x0800bba8
 8002960:	0800bbcc 	.word	0x0800bbcc
 8002964:	0800bbe8 	.word	0x0800bbe8
 8002968:	0800bc14 	.word	0x0800bc14
 800296c:	0800bc44 	.word	0x0800bc44
 8002970:	0800bc5c 	.word	0x0800bc5c
 8002974:	0800bc70 	.word	0x0800bc70
 8002978:	0800bcac 	.word	0x0800bcac
 800297c:	0800bd0c 	.word	0x0800bd0c
 8002980:	0800bd20 	.word	0x0800bd20
 8002984:	200015dc 	.word	0x200015dc
 8002988:	0800bd34 	.word	0x0800bd34

0800298c <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8002990:	f000 fbb2 	bl	80030f8 <P2PS_APP_SW1_Button_Action>
}
 8002994:	bf00      	nop
 8002996:	bd80      	pop	{r7, pc}

08002998 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 800299c:	2100      	movs	r1, #0
 800299e:	2004      	movs	r0, #4
 80029a0:	f007 fe9e 	bl	800a6e0 <UTIL_SEQ_SetTask>
#endif
  
  return;
 80029a4:	bf00      	nop
}
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <Ble_Tl_Init+0x20>)
 80029c0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80029c2:	4b06      	ldr	r3, [pc, #24]	; (80029dc <Ble_Tl_Init+0x24>)
 80029c4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80029c6:	463b      	mov	r3, r7
 80029c8:	4619      	mov	r1, r3
 80029ca:	4805      	ldr	r0, [pc, #20]	; (80029e0 <Ble_Tl_Init+0x28>)
 80029cc:	f006 f8b8 	bl	8008b40 <hci_init>

  return;
 80029d0:	bf00      	nop
}
 80029d2:	3708      	adds	r7, #8
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20030028 	.word	0x20030028
 80029dc:	08002f2d 	.word	0x08002f2d
 80029e0:	08002ef5 	.word	0x08002ef5

080029e4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80029e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029e6:	b08f      	sub	sp, #60	; 0x3c
 80029e8:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80029ea:	2300      	movs	r3, #0
 80029ec:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80029ee:	f005 fe7a 	bl	80086e6 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80029f2:	f000 f95f 	bl	8002cb4 <BleGetBdAddress>
 80029f6:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80029f8:	69fa      	ldr	r2, [r7, #28]
 80029fa:	2106      	movs	r1, #6
 80029fc:	2000      	movs	r0, #0
 80029fe:	f005 fd68 	bl	80084d2 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	795a      	ldrb	r2, [r3, #5]
 8002a06:	4b52      	ldr	r3, [pc, #328]	; (8002b50 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002a08:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	791a      	ldrb	r2, [r3, #4]
 8002a0e:	4b50      	ldr	r3, [pc, #320]	; (8002b50 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002a10:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	78da      	ldrb	r2, [r3, #3]
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002a18:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	789a      	ldrb	r2, [r3, #2]
 8002a1e:	4b4c      	ldr	r3, [pc, #304]	; (8002b50 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002a20:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	785a      	ldrb	r2, [r3, #1]
 8002a26:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002a28:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	781a      	ldrb	r2, [r3, #0]
 8002a2e:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002a30:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8002a32:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8002a36:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8002a38:	f7ff fd5e 	bl	80024f8 <LL_FLASH_GetUDN>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	461a      	mov	r2, r3
 8002a44:	2106      	movs	r1, #6
 8002a46:	202e      	movs	r0, #46	; 0x2e
 8002a48:	f005 fd43 	bl	80084d2 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002a4c:	4a41      	ldr	r2, [pc, #260]	; (8002b54 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8002a4e:	2110      	movs	r1, #16
 8002a50:	2018      	movs	r0, #24
 8002a52:	f005 fd3e 	bl	80084d2 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002a56:	4a40      	ldr	r2, [pc, #256]	; (8002b58 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8002a58:	2110      	movs	r1, #16
 8002a5a:	2008      	movs	r0, #8
 8002a5c:	f005 fd39 	bl	80084d2 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002a60:	2118      	movs	r1, #24
 8002a62:	2001      	movs	r0, #1
 8002a64:	f005 fd9e 	bl	80085a4 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8002a68:	f005 faee 	bl	8008048 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002a70:	7efb      	ldrb	r3, [r7, #27]
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8002a78:	7efb      	ldrb	r3, [r7, #27]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d01e      	beq.n	8002abc <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "P2PSRV1";
 8002a7e:	4b37      	ldr	r3, [pc, #220]	; (8002b5c <Ble_Hci_Gap_Gatt_Init+0x178>)
 8002a80:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8002a82:	f107 0212 	add.w	r2, r7, #18
 8002a86:	7ef8      	ldrb	r0, [r7, #27]
 8002a88:	f107 030e 	add.w	r3, r7, #14
 8002a8c:	9301      	str	r3, [sp, #4]
 8002a8e:	f107 0310 	add.w	r3, r7, #16
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	4613      	mov	r3, r2
 8002a96:	2207      	movs	r2, #7
 8002a98:	2100      	movs	r1, #0
 8002a9a:	f005 f929 	bl	8007cf0 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002a9e:	8a7c      	ldrh	r4, [r7, #18]
 8002aa0:	8a3d      	ldrh	r5, [r7, #16]
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7fd fb6c 	bl	8000180 <strlen>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	f005 fc84 	bl	80083c4 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002abc:	8a78      	ldrh	r0, [r7, #18]
 8002abe:	89f9      	ldrh	r1, [r7, #14]
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f005 fc7c 	bl	80083c4 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002acc:	2202      	movs	r2, #2
 8002ace:	2102      	movs	r1, #2
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f005 fe94 	bl	80087fe <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002ad6:	4b22      	ldr	r3, [pc, #136]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ad8:	2201      	movs	r2, #1
 8002ada:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002adc:	4b20      	ldr	r3, [pc, #128]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f005 f813 	bl	8007b0c <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002ae6:	4b1e      	ldr	r3, [pc, #120]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002aec:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002aee:	2208      	movs	r2, #8
 8002af0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002af2:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002af4:	2210      	movs	r2, #16
 8002af6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002afe:	4b18      	ldr	r3, [pc, #96]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <Ble_Hci_Gap_Gatt_Init+0x180>)
 8002b02:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002b04:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b0c:	789c      	ldrb	r4, [r3, #2]
 8002b0e:	4b14      	ldr	r3, [pc, #80]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b10:	785d      	ldrb	r5, [r3, #1]
 8002b12:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b14:	791b      	ldrb	r3, [r3, #4]
 8002b16:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b18:	7952      	ldrb	r2, [r2, #5]
 8002b1a:	4911      	ldr	r1, [pc, #68]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b1c:	78c9      	ldrb	r1, [r1, #3]
 8002b1e:	4810      	ldr	r0, [pc, #64]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b20:	6880      	ldr	r0, [r0, #8]
 8002b22:	2600      	movs	r6, #0
 8002b24:	9604      	str	r6, [sp, #16]
 8002b26:	9003      	str	r0, [sp, #12]
 8002b28:	9102      	str	r1, [sp, #8]
 8002b2a:	9201      	str	r2, [sp, #4]
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	2300      	movs	r3, #0
 8002b30:	2201      	movs	r2, #1
 8002b32:	4629      	mov	r1, r5
 8002b34:	4620      	mov	r0, r4
 8002b36:	f005 f833 	bl	8007ba0 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002b3c:	789b      	ldrb	r3, [r3, #2]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8002b42:	f005 f9bc 	bl	8007ebe <aci_gap_configure_whitelist>
   }
}
 8002b46:	bf00      	nop
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	2000000c 	.word	0x2000000c
 8002b54:	0800c228 	.word	0x0800c228
 8002b58:	0800c238 	.word	0x0800c238
 8002b5c:	0800bd5c 	.word	0x0800bd5c
 8002b60:	20000148 	.word	0x20000148
 8002b64:	0001b207 	.word	0x0001b207

08002b68 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08c      	sub	sp, #48	; 0x30
 8002b6c:	af08      	add	r7, sp, #32
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002b72:	2342      	movs	r3, #66	; 0x42
 8002b74:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002b7c:	4b3f      	ldr	r3, [pc, #252]	; (8002c7c <Adv_Request+0x114>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8002b82:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <Adv_Request+0x118>)
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	81bb      	strh	r3, [r7, #12]
 8002b88:	e005      	b.n	8002b96 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002b8a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002b8e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002b90:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002b94:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <Adv_Request+0x11c>)
 8002b98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fc97 	bl	80014d0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8002ba2:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <Adv_Request+0x11c>)
 8002ba4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4837      	ldr	r0, [pc, #220]	; (8002c88 <Adv_Request+0x120>)
 8002bac:	f007 feee 	bl	800a98c <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d119      	bne.n	8002bea <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <Adv_Request+0x11c>)
 8002bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d004      	beq.n	8002bca <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8002bc0:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <Adv_Request+0x11c>)
 8002bc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d10f      	bne.n	8002bea <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8002bca:	f004 fe9d 	bl	8007908 <aci_gap_set_non_discoverable>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 8002bd2:	7afb      	ldrb	r3, [r7, #11]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d103      	bne.n	8002be0 <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8002bd8:	482c      	ldr	r0, [pc, #176]	; (8002c8c <Adv_Request+0x124>)
 8002bda:	f007 ff5d 	bl	800aa98 <puts>
 8002bde:	e004      	b.n	8002bea <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 8002be0:	7afb      	ldrb	r3, [r7, #11]
 8002be2:	4619      	mov	r1, r3
 8002be4:	482a      	ldr	r0, [pc, #168]	; (8002c90 <Adv_Request+0x128>)
 8002be6:	f007 fed1 	bl	800a98c <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8002bea:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <Adv_Request+0x11c>)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <Adv_Request+0x11c>)
 8002bf4:	7e1b      	ldrb	r3, [r3, #24]
 8002bf6:	89ba      	ldrh	r2, [r7, #12]
 8002bf8:	89f9      	ldrh	r1, [r7, #14]
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	9006      	str	r0, [sp, #24]
 8002bfe:	2000      	movs	r0, #0
 8002c00:	9005      	str	r0, [sp, #20]
 8002c02:	4824      	ldr	r0, [pc, #144]	; (8002c94 <Adv_Request+0x12c>)
 8002c04:	9004      	str	r0, [sp, #16]
 8002c06:	9303      	str	r3, [sp, #12]
 8002c08:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <Adv_Request+0x130>)
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	2308      	movs	r3, #8
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	2300      	movs	r3, #0
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2300      	movs	r3, #0
 8002c16:	2000      	movs	r0, #0
 8002c18:	f004 fe9a 	bl	8007950 <aci_gap_set_discoverable>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8002c20:	491e      	ldr	r1, [pc, #120]	; (8002c9c <Adv_Request+0x134>)
 8002c22:	200e      	movs	r0, #14
 8002c24:	f005 f8ef 	bl	8007e06 <aci_gap_update_adv_data>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8002c2c:	7afb      	ldrb	r3, [r7, #11]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d111      	bne.n	8002c56 <Adv_Request+0xee>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d10a      	bne.n	8002c4e <Adv_Request+0xe6>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8002c38:	4819      	ldr	r0, [pc, #100]	; (8002ca0 <Adv_Request+0x138>)
 8002c3a:	f007 ff2d 	bl	800aa98 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8002c3e:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <Adv_Request+0x11c>)
 8002c40:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002c44:	4917      	ldr	r1, [pc, #92]	; (8002ca4 <Adv_Request+0x13c>)
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fe fcce 	bl	80015e8 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8002c4c:	e012      	b.n	8002c74 <Adv_Request+0x10c>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 8002c4e:	4816      	ldr	r0, [pc, #88]	; (8002ca8 <Adv_Request+0x140>)
 8002c50:	f007 ff22 	bl	800aa98 <puts>
  return;
 8002c54:	e00e      	b.n	8002c74 <Adv_Request+0x10c>
      if (New_Status == APP_BLE_FAST_ADV)
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d105      	bne.n	8002c68 <Adv_Request+0x100>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4812      	ldr	r0, [pc, #72]	; (8002cac <Adv_Request+0x144>)
 8002c62:	f007 fe93 	bl	800a98c <iprintf>
  return;
 8002c66:	e005      	b.n	8002c74 <Adv_Request+0x10c>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4810      	ldr	r0, [pc, #64]	; (8002cb0 <Adv_Request+0x148>)
 8002c6e:	f007 fe8d 	bl	800a98c <iprintf>
  return;
 8002c72:	bf00      	nop
}
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200001cc 	.word	0x200001cc
 8002c80:	200001ce 	.word	0x200001ce
 8002c84:	20000148 	.word	0x20000148
 8002c88:	0800bd64 	.word	0x0800bd64
 8002c8c:	0800bd80 	.word	0x0800bd80
 8002c90:	0800bda4 	.word	0x0800bda4
 8002c94:	20000161 	.word	0x20000161
 8002c98:	0800c248 	.word	0x0800c248
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	0800bdcc 	.word	0x0800bdcc
 8002ca4:	0001e046 	.word	0x0001e046
 8002ca8:	0800bdf4 	.word	0x0800bdf4
 8002cac:	0800be20 	.word	0x0800be20
 8002cb0:	0800be50 	.word	0x0800be50

08002cb4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002cba:	f7ff fc1d 	bl	80024f8 <LL_FLASH_GetUDN>
 8002cbe:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	d023      	beq.n	8002d10 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002cc8:	f7ff fc2e 	bl	8002528 <LL_FLASH_GetSTCompanyID>
 8002ccc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002cce:	f7ff fc1f 	bl	8002510 <LL_FLASH_GetDeviceID>
 8002cd2:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <BleGetBdAddress+0x80>)
 8002cda:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <BleGetBdAddress+0x80>)
 8002ce4:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <BleGetBdAddress+0x80>)
 8002cec:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <BleGetBdAddress+0x80>)
 8002cf4:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	4b0d      	ldr	r3, [pc, #52]	; (8002d34 <BleGetBdAddress+0x80>)
 8002cfe:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <BleGetBdAddress+0x80>)
 8002d08:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002d0a:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <BleGetBdAddress+0x80>)
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e00b      	b.n	8002d28 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f006 f8cb 	bl	8008eac <OTP_Read>
 8002d16:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e001      	b.n	8002d28 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002d24:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <BleGetBdAddress+0x84>)
 8002d26:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002d28:	697b      	ldr	r3, [r7, #20]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000240 	.word	0x20000240
 8002d38:	0800c220 	.word	0x0800c220

08002d3c <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8002d42:	2001      	movs	r0, #1
 8002d44:	f000 fd0e 	bl	8003764 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002d48:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <Adv_Cancel+0x50>)
 8002d4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d017      	beq.n	8002d82 <Adv_Cancel+0x46>

  {

    tBleStatus result = 0x00;
 8002d52:	2300      	movs	r3, #0
 8002d54:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8002d56:	f004 fdd7 	bl	8007908 <aci_gap_set_non_discoverable>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <Adv_Cancel+0x50>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d106      	bne.n	8002d7a <Adv_Cancel+0x3e>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8002d6c:	4808      	ldr	r0, [pc, #32]	; (8002d90 <Adv_Cancel+0x54>)
 8002d6e:	f007 fe0d 	bl	800a98c <iprintf>
 8002d72:	4808      	ldr	r0, [pc, #32]	; (8002d94 <Adv_Cancel+0x58>)
 8002d74:	f007 fe0a 	bl	800a98c <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8002d78:	e003      	b.n	8002d82 <Adv_Cancel+0x46>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8002d7a:	4807      	ldr	r0, [pc, #28]	; (8002d98 <Adv_Cancel+0x5c>)
 8002d7c:	f007 fe06 	bl	800a98c <iprintf>
  return;
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
}
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000148 	.word	0x20000148
 8002d90:	0800be84 	.word	0x0800be84
 8002d94:	0800be8c 	.word	0x0800be8c
 8002d98:	0800bea8 	.word	0x0800bea8

08002d9c <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8002da0:	2100      	movs	r1, #0
 8002da2:	2001      	movs	r0, #1
 8002da4:	f007 fc9c 	bl	800a6e0 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8002da8:	bf00      	nop
}
 8002daa:	bd80      	pop	{r7, pc}

08002dac <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8002db0:	2001      	movs	r0, #1
 8002db2:	f000 fcd7 	bl	8003764 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af02      	add	r7, sp, #8
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) {
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d149      	bne.n	8002e62 <BLE_SVC_L2CAP_Conn_Update+0xa6>
    mutex = 0;
 8002dce:	4b27      	ldr	r3, [pc, #156]	; (8002e6c <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8002dd4:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	bfb8      	it	lt
 8002de2:	425b      	neglt	r3, r3
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8002de8:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 8002dea:	4b21      	ldr	r3, [pc, #132]	; (8002e70 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	ed93 7a00 	vldr	s14, [r3]
 8002df8:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e04:	ee17 3a90 	vmov	r3, s15
 8002e08:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	ed93 7a00 	vldr	s14, [r3]
 8002e18:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e24:	ee17 3a90 	vmov	r3, s15
 8002e28:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8002e2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e32:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8002e34:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 8002e36:	8ad8      	ldrh	r0, [r3, #22]
 8002e38:	8a7c      	ldrh	r4, [r7, #18]
 8002e3a:	8aba      	ldrh	r2, [r7, #20]
 8002e3c:	8af9      	ldrh	r1, [r7, #22]
 8002e3e:	8a3b      	ldrh	r3, [r7, #16]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	4623      	mov	r3, r4
 8002e44:	f005 fd42 	bl	80088cc <aci_l2cap_connection_parameter_update_req>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	73fb      	strb	r3, [r7, #15]
                                                       interval_min, interval_max,
                                                       slave_latency, timeout_multiplier);
    if( result == BLE_STATUS_SUCCESS )
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d103      	bne.n	8002e5a <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8002e52:	480a      	ldr	r0, [pc, #40]	; (8002e7c <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8002e54:	f007 fd9a 	bl	800a98c <iprintf>
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 8002e58:	e003      	b.n	8002e62 <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8002e5a:	4809      	ldr	r0, [pc, #36]	; (8002e80 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8002e5c:	f007 fd96 	bl	800a98c <iprintf>
  return;
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
}
 8002e64:	371c      	adds	r7, #28
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	200015dc 	.word	0x200015dc
 8002e70:	200015dd 	.word	0x200015dd
 8002e74:	20000004 	.word	0x20000004
 8002e78:	20000148 	.word	0x20000148
 8002e7c:	0800becc 	.word	0x0800becc
 8002e80:	0800befc 	.word	0x0800befc

08002e84 <Connection_Interval_Update_Req>:
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
static void Connection_Interval_Update_Req( void )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8002e88:	4b08      	ldr	r3, [pc, #32]	; (8002eac <Connection_Interval_Update_Req+0x28>)
 8002e8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d00a      	beq.n	8002ea8 <Connection_Interval_Update_Req+0x24>
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <Connection_Interval_Update_Req+0x28>)
 8002e94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <Connection_Interval_Update_Req+0x28>)
 8002e9e:	8adb      	ldrh	r3, [r3, #22]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ff8b 	bl	8002dbc <BLE_SVC_L2CAP_Conn_Update>
  }
  return;
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
}
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000148 	.word	0x20000148

08002eb0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2008      	movs	r0, #8
 8002ebc:	f007 fc10 	bl	800a6e0 <UTIL_SEQ_SetTask>
  return;
 8002ec0:	bf00      	nop
}
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002ed0:	2001      	movs	r0, #1
 8002ed2:	f007 fc71 	bl	800a7b8 <UTIL_SEQ_SetEvt>
  return;
 8002ed6:	bf00      	nop
}
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002ee6:	2001      	movs	r0, #1
 8002ee8:	f007 fc86 	bl	800a7f8 <UTIL_SEQ_WaitEvt>
  return;
 8002eec:	bf00      	nop
}
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	3308      	adds	r3, #8
 8002f06:	4618      	mov	r0, r3
 8002f08:	f007 f806 	bl	8009f18 <SVCCTL_UserEvtRx>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002f10:	7afb      	ldrb	r3, [r7, #11]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002f1c:	e002      	b.n	8002f24 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <BLE_StatusNot+0x16>
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d006      	beq.n	8002f4e <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002f40:	e00b      	b.n	8002f5a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002f42:	230f      	movs	r3, #15
 8002f44:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f007 fbf6 	bl	800a738 <UTIL_SEQ_PauseTask>
      break;
 8002f4c:	e005      	b.n	8002f5a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002f4e:	230f      	movs	r3, #15
 8002f50:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f007 fc10 	bl	800a778 <UTIL_SEQ_ResumeTask>
      break;
 8002f58:	bf00      	nop
  }
  return;
 8002f5a:	bf00      	nop
}
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d01a      	beq.n	8002faa <P2PS_STM_App_Notification+0x46>
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	dc6b      	bgt.n	8003050 <P2PS_STM_App_Notification+0xec>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <P2PS_STM_App_Notification+0x1e>
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d00a      	beq.n	8002f96 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8002f80:	e066      	b.n	8003050 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 8002f82:	4b37      	ldr	r3, [pc, #220]	; (8003060 <P2PS_STM_App_Notification+0xfc>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8002f88:	4836      	ldr	r0, [pc, #216]	; (8003064 <P2PS_STM_App_Notification+0x100>)
 8002f8a:	f007 fd85 	bl	800aa98 <puts>
      APP_DBG_MSG(" \n\r");
 8002f8e:	4836      	ldr	r0, [pc, #216]	; (8003068 <P2PS_STM_App_Notification+0x104>)
 8002f90:	f007 fcfc 	bl	800a98c <iprintf>
      break;
 8002f94:	e05f      	b.n	8003056 <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 8002f96:	4b32      	ldr	r3, [pc, #200]	; (8003060 <P2PS_STM_App_Notification+0xfc>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8002f9c:	4833      	ldr	r0, [pc, #204]	; (800306c <P2PS_STM_App_Notification+0x108>)
 8002f9e:	f007 fd7b 	bl	800aa98 <puts>
      APP_DBG_MSG(" \n\r");
 8002fa2:	4831      	ldr	r0, [pc, #196]	; (8003068 <P2PS_STM_App_Notification+0x104>)
 8002fa4:	f007 fcf2 	bl	800a98c <iprintf>
      break;
 8002fa8:	e055      	b.n	8003056 <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d123      	bne.n	8002ffc <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10b      	bne.n	8002fd8 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f000 fbb5 	bl	8003730 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 8002fc6:	482a      	ldr	r0, [pc, #168]	; (8003070 <P2PS_STM_App_Notification+0x10c>)
 8002fc8:	f007 fd66 	bl	800aa98 <puts>
          APP_DBG_MSG(" \n\r");
 8002fcc:	4826      	ldr	r0, [pc, #152]	; (8003068 <P2PS_STM_App_Notification+0x104>)
 8002fce:	f007 fcdd 	bl	800a98c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <P2PS_STM_App_Notification+0xfc>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10b      	bne.n	8002ffc <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f000 fbbd 	bl	8003764 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 8002fea:	4822      	ldr	r0, [pc, #136]	; (8003074 <P2PS_STM_App_Notification+0x110>)
 8002fec:	f007 fd54 	bl	800aa98 <puts>
          APP_DBG_MSG(" \n\r");
 8002ff0:	481d      	ldr	r0, [pc, #116]	; (8003068 <P2PS_STM_App_Notification+0x104>)
 8002ff2:	f007 fccb 	bl	800a98c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002ff6:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <P2PS_STM_App_Notification+0xfc>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d126      	bne.n	8003054 <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	3301      	adds	r3, #1
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10b      	bne.n	800302a <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 8003012:	2000      	movs	r0, #0
 8003014:	f000 fb8c 	bl	8003730 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8003018:	4817      	ldr	r0, [pc, #92]	; (8003078 <P2PS_STM_App_Notification+0x114>)
 800301a:	f007 fd3d 	bl	800aa98 <puts>
          APP_DBG_MSG(" \n\r");
 800301e:	4812      	ldr	r0, [pc, #72]	; (8003068 <P2PS_STM_App_Notification+0x104>)
 8003020:	f007 fcb4 	bl	800a98c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <P2PS_STM_App_Notification+0xfc>)
 8003026:	2201      	movs	r2, #1
 8003028:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	3301      	adds	r3, #1
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10e      	bne.n	8003054 <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 8003036:	2000      	movs	r0, #0
 8003038:	f000 fb94 	bl	8003764 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 800303c:	480f      	ldr	r0, [pc, #60]	; (800307c <P2PS_STM_App_Notification+0x118>)
 800303e:	f007 fd2b 	bl	800aa98 <puts>
          APP_DBG_MSG(" \n\r");
 8003042:	4809      	ldr	r0, [pc, #36]	; (8003068 <P2PS_STM_App_Notification+0x104>)
 8003044:	f007 fca2 	bl	800a98c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <P2PS_STM_App_Notification+0xfc>)
 800304a:	2200      	movs	r2, #0
 800304c:	709a      	strb	r2, [r3, #2]
      break;
 800304e:	e001      	b.n	8003054 <P2PS_STM_App_Notification+0xf0>
      break;
 8003050:	bf00      	nop
 8003052:	e000      	b.n	8003056 <P2PS_STM_App_Notification+0xf2>
      break;
 8003054:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8003056:	bf00      	nop
}
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200001d0 	.word	0x200001d0
 8003064:	0800bf24 	.word	0x0800bf24
 8003068:	0800bf58 	.word	0x0800bf58
 800306c:	0800bf5c 	.word	0x0800bf5c
 8003070:	0800bf90 	.word	0x0800bf90
 8003074:	0800bfb8 	.word	0x0800bfb8
 8003078:	0800bfe0 	.word	0x0800bfe0
 800307c:	0800c008 	.word	0x0800c008

08003080 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <P2PS_APP_Notification+0x1c>
 8003090:	2b01      	cmp	r3, #1
 8003092:	d000      	beq.n	8003096 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8003094:	e003      	b.n	800309e <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8003096:	f000 f819 	bl	80030cc <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800309a:	e000      	b.n	800309e <P2PS_APP_Notification+0x1e>
    break;
 800309c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800309e:	bf00      	nop
}
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
	...

080030a8 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 80030ac:	4a05      	ldr	r2, [pc, #20]	; (80030c4 <P2PS_APP_Init+0x1c>)
 80030ae:	2100      	movs	r1, #0
 80030b0:	2002      	movs	r0, #2
 80030b2:	f007 faf3 	bl	800a69c <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <P2PS_APP_Init+0x20>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80030bc:	f000 f806 	bl	80030cc <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 80030c0:	bf00      	nop
}
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	08003109 	.word	0x08003109
 80030c8:	200001d0 	.word	0x200001d0

080030cc <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f000 fb47 	bl	8003764 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80030d8:	2201      	movs	r2, #1
 80030da:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80030de:	2200      	movs	r2, #0
 80030e0:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80030e2:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80030e8:	4b02      	ldr	r3, [pc, #8]	; (80030f4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	200001d0 	.word	0x200001d0

080030f8 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80030fc:	2100      	movs	r1, #0
 80030fe:	2002      	movs	r0, #2
 8003100:	f007 faee 	bl	800a6e0 <UTIL_SEQ_SetTask>

  return;
 8003104:	bf00      	nop
}
 8003106:	bd80      	pop	{r7, pc}

08003108 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 800310c:	4b0f      	ldr	r3, [pc, #60]	; (800314c <P2PS_Send_Notification+0x44>)
 800310e:	791b      	ldrb	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <P2PS_Send_Notification+0x44>)
 8003116:	2201      	movs	r2, #1
 8003118:	711a      	strb	r2, [r3, #4]
 800311a:	e002      	b.n	8003122 <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800311c:	4b0b      	ldr	r3, [pc, #44]	; (800314c <P2PS_Send_Notification+0x44>)
 800311e:	2200      	movs	r2, #0
 8003120:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8003122:	4b0a      	ldr	r3, [pc, #40]	; (800314c <P2PS_Send_Notification+0x44>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 800312a:	4809      	ldr	r0, [pc, #36]	; (8003150 <P2PS_Send_Notification+0x48>)
 800312c:	f007 fc2e 	bl	800a98c <iprintf>
    APP_DBG_MSG(" \n\r");
 8003130:	4808      	ldr	r0, [pc, #32]	; (8003154 <P2PS_Send_Notification+0x4c>)
 8003132:	f007 fc2b 	bl	800a98c <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8003136:	4908      	ldr	r1, [pc, #32]	; (8003158 <P2PS_Send_Notification+0x50>)
 8003138:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800313c:	f005 ffe8 	bl	8009110 <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8003140:	e003      	b.n	800314a <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8003142:	4806      	ldr	r0, [pc, #24]	; (800315c <P2PS_Send_Notification+0x54>)
 8003144:	f007 fc22 	bl	800a98c <iprintf>
  return;
 8003148:	bf00      	nop
}
 800314a:	bd80      	pop	{r7, pc}
 800314c:	200001d0 	.word	0x200001d0
 8003150:	0800c030 	.word	0x0800c030
 8003154:	0800bf58 	.word	0x0800bf58
 8003158:	200001d3 	.word	0x200001d3
 800315c:	0800c070 	.word	0x0800c070

08003160 <LL_PWR_EnableBootC2>:
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003164:	4b05      	ldr	r3, [pc, #20]	; (800317c <LL_PWR_EnableBootC2+0x1c>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	4a04      	ldr	r2, [pc, #16]	; (800317c <LL_PWR_EnableBootC2+0x1c>)
 800316a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800316e:	60d3      	str	r3, [r2, #12]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	58000400 	.word	0x58000400

08003180 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003188:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800318a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800318e:	4905      	ldr	r1, [pc, #20]	; (80031a4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	58000800 	.word	0x58000800

080031a8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80031b2:	6a1a      	ldr	r2, [r3, #32]
 80031b4:	4904      	ldr	r1, [pc, #16]	; (80031c8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	620b      	str	r3, [r1, #32]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	58000800 	.word	0x58000800

080031cc <LL_AHB3_GRP1_EnableClock>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80031e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031f0:	68fb      	ldr	r3, [r7, #12]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8003206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800320e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4013      	ands	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003228:	68fb      	ldr	r3, [r7, #12]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_C1_IPCC_EnableIT_TXF>:
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	601a      	str	r2, [r3, #0]
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	43db      	mvns	r3, r3
 800328a:	401a      	ands	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	605a      	str	r2, [r3, #4]
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	605a      	str	r2, [r3, #4]
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	43db      	mvns	r3, r3
 80032d2:	401a      	ands	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_C1_IPCC_SetFlag_CHx>:
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	041a      	lsls	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	609a      	str	r2, [r3, #8]
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	4013      	ands	r3, r2
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d101      	bne.n	800333a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	4013      	ands	r3, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d101      	bne.n	8003364 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003378:	2102      	movs	r1, #2
 800337a:	4819      	ldr	r0, [pc, #100]	; (80033e0 <HW_IPCC_Rx_Handler+0x6c>)
 800337c:	f7ff ffe4 	bl	8003348 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d009      	beq.n	800339a <HW_IPCC_Rx_Handler+0x26>
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HW_IPCC_Rx_Handler+0x6c>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	43db      	mvns	r3, r3
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003394:	f000 f8ea 	bl	800356c <HW_IPCC_SYS_EvtHandler>
 8003398:	e01f      	b.n	80033da <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800339a:	2101      	movs	r1, #1
 800339c:	4810      	ldr	r0, [pc, #64]	; (80033e0 <HW_IPCC_Rx_Handler+0x6c>)
 800339e:	f7ff ffd3 	bl	8003348 <LL_C2_IPCC_IsActiveFlag_CHx>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HW_IPCC_Rx_Handler+0x46>
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HW_IPCC_Rx_Handler+0x6c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80033b4:	f000 f89e 	bl	80034f4 <HW_IPCC_BLE_EvtHandler>
 80033b8:	e00f      	b.n	80033da <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80033ba:	2108      	movs	r1, #8
 80033bc:	4808      	ldr	r0, [pc, #32]	; (80033e0 <HW_IPCC_Rx_Handler+0x6c>)
 80033be:	f7ff ffc3 	bl	8003348 <LL_C2_IPCC_IsActiveFlag_CHx>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d009      	beq.n	80033dc <HW_IPCC_Rx_Handler+0x68>
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HW_IPCC_Rx_Handler+0x6c>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80033d6:	f000 f915 	bl	8003604 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80033da:	bf00      	nop
 80033dc:	bf00      	nop
}
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	58000c00 	.word	0x58000c00

080033e4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80033e8:	2102      	movs	r1, #2
 80033ea:	4822      	ldr	r0, [pc, #136]	; (8003474 <HW_IPCC_Tx_Handler+0x90>)
 80033ec:	f7ff ff97 	bl	800331e <LL_C1_IPCC_IsActiveFlag_CHx>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HW_IPCC_Tx_Handler+0x26>
 80033f6:	4b1f      	ldr	r3, [pc, #124]	; (8003474 <HW_IPCC_Tx_Handler+0x90>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003404:	f000 f8a6 	bl	8003554 <HW_IPCC_SYS_CmdEvtHandler>
 8003408:	e031      	b.n	800346e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800340a:	2102      	movs	r1, #2
 800340c:	4819      	ldr	r0, [pc, #100]	; (8003474 <HW_IPCC_Tx_Handler+0x90>)
 800340e:	f7ff ff86 	bl	800331e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d109      	bne.n	800342c <HW_IPCC_Tx_Handler+0x48>
 8003418:	4b16      	ldr	r3, [pc, #88]	; (8003474 <HW_IPCC_Tx_Handler+0x90>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	43db      	mvns	r3, r3
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003426:	f000 f895 	bl	8003554 <HW_IPCC_SYS_CmdEvtHandler>
 800342a:	e020      	b.n	800346e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800342c:	2108      	movs	r1, #8
 800342e:	4811      	ldr	r0, [pc, #68]	; (8003474 <HW_IPCC_Tx_Handler+0x90>)
 8003430:	f7ff ff75 	bl	800331e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HW_IPCC_Tx_Handler+0x6a>
 800343a:	4b0e      	ldr	r3, [pc, #56]	; (8003474 <HW_IPCC_Tx_Handler+0x90>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	43db      	mvns	r3, r3
 8003440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003448:	f000 f8be 	bl	80035c8 <HW_IPCC_MM_FreeBufHandler>
 800344c:	e00f      	b.n	800346e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800344e:	2120      	movs	r1, #32
 8003450:	4808      	ldr	r0, [pc, #32]	; (8003474 <HW_IPCC_Tx_Handler+0x90>)
 8003452:	f7ff ff64 	bl	800331e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d109      	bne.n	8003470 <HW_IPCC_Tx_Handler+0x8c>
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HW_IPCC_Tx_Handler+0x90>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	43db      	mvns	r3, r3
 8003462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800346a:	f000 f84f 	bl	800350c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800346e:	bf00      	nop
 8003470:	bf00      	nop
}
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58000c00 	.word	0x58000c00

08003478 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800347c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003480:	f7ff febd 	bl	80031fe <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003484:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003488:	f7ff fe7a 	bl	8003180 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800348c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003490:	f7ff fe8a 	bl	80031a8 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003494:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003496:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003498:	f7ff fe62 	bl	8003160 <LL_PWR_EnableBootC2>

  return;
 800349c:	bf00      	nop
}
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80034a4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80034a8:	f7ff fe90 	bl	80031cc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80034ac:	4806      	ldr	r0, [pc, #24]	; (80034c8 <HW_IPCC_Init+0x28>)
 80034ae:	f7ff fed2 	bl	8003256 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80034b2:	4805      	ldr	r0, [pc, #20]	; (80034c8 <HW_IPCC_Init+0x28>)
 80034b4:	f7ff febf 	bl	8003236 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80034b8:	202c      	movs	r0, #44	; 0x2c
 80034ba:	f000 fc48 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80034be:	202d      	movs	r0, #45	; 0x2d
 80034c0:	f000 fc45 	bl	8003d4e <HAL_NVIC_EnableIRQ>

  return;
 80034c4:	bf00      	nop
}
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	58000c00 	.word	0x58000c00

080034cc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80034d0:	2101      	movs	r1, #1
 80034d2:	4802      	ldr	r0, [pc, #8]	; (80034dc <HW_IPCC_BLE_Init+0x10>)
 80034d4:	f7ff fef4 	bl	80032c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80034d8:	bf00      	nop
}
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	58000c00 	.word	0x58000c00

080034e0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80034e4:	2101      	movs	r1, #1
 80034e6:	4802      	ldr	r0, [pc, #8]	; (80034f0 <HW_IPCC_BLE_SendCmd+0x10>)
 80034e8:	f7ff ff0a 	bl	8003300 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80034ec:	bf00      	nop
}
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	58000c00 	.word	0x58000c00

080034f4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80034f8:	f006 fdf2 	bl	800a0e0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80034fc:	2101      	movs	r1, #1
 80034fe:	4802      	ldr	r0, [pc, #8]	; (8003508 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003500:	f7ff fef0 	bl	80032e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003504:	bf00      	nop
}
 8003506:	bd80      	pop	{r7, pc}
 8003508:	58000c00 	.word	0x58000c00

0800350c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003510:	2120      	movs	r1, #32
 8003512:	4803      	ldr	r0, [pc, #12]	; (8003520 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003514:	f7ff fec2 	bl	800329c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003518:	f006 fe12 	bl	800a140 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800351c:	bf00      	nop
}
 800351e:	bd80      	pop	{r7, pc}
 8003520:	58000c00 	.word	0x58000c00

08003524 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003528:	2102      	movs	r1, #2
 800352a:	4802      	ldr	r0, [pc, #8]	; (8003534 <HW_IPCC_SYS_Init+0x10>)
 800352c:	f7ff fec8 	bl	80032c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003530:	bf00      	nop
}
 8003532:	bd80      	pop	{r7, pc}
 8003534:	58000c00 	.word	0x58000c00

08003538 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800353c:	2102      	movs	r1, #2
 800353e:	4804      	ldr	r0, [pc, #16]	; (8003550 <HW_IPCC_SYS_SendCmd+0x18>)
 8003540:	f7ff fede 	bl	8003300 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003544:	2102      	movs	r1, #2
 8003546:	4802      	ldr	r0, [pc, #8]	; (8003550 <HW_IPCC_SYS_SendCmd+0x18>)
 8003548:	f7ff fe95 	bl	8003276 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800354c:	bf00      	nop
}
 800354e:	bd80      	pop	{r7, pc}
 8003550:	58000c00 	.word	0x58000c00

08003554 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003558:	2102      	movs	r1, #2
 800355a:	4803      	ldr	r0, [pc, #12]	; (8003568 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800355c:	f7ff fe9e 	bl	800329c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003560:	f006 fe3e 	bl	800a1e0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003564:	bf00      	nop
}
 8003566:	bd80      	pop	{r7, pc}
 8003568:	58000c00 	.word	0x58000c00

0800356c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003570:	f006 fe4c 	bl	800a20c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003574:	2102      	movs	r1, #2
 8003576:	4802      	ldr	r0, [pc, #8]	; (8003580 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003578:	f7ff feb4 	bl	80032e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800357c:	bf00      	nop
}
 800357e:	bd80      	pop	{r7, pc}
 8003580:	58000c00 	.word	0x58000c00

08003584 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800358c:	2108      	movs	r1, #8
 800358e:	480c      	ldr	r0, [pc, #48]	; (80035c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003590:	f7ff fec5 	bl	800331e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800359a:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80035a0:	2108      	movs	r1, #8
 80035a2:	4807      	ldr	r0, [pc, #28]	; (80035c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80035a4:	f7ff fe67 	bl	8003276 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80035a8:	e006      	b.n	80035b8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80035ae:	2108      	movs	r1, #8
 80035b0:	4803      	ldr	r0, [pc, #12]	; (80035c0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80035b2:	f7ff fea5 	bl	8003300 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80035b6:	bf00      	nop
}
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	58000c00 	.word	0x58000c00
 80035c4:	20000248 	.word	0x20000248

080035c8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80035cc:	2108      	movs	r1, #8
 80035ce:	4806      	ldr	r0, [pc, #24]	; (80035e8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80035d0:	f7ff fe64 	bl	800329c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <HW_IPCC_MM_FreeBufHandler+0x24>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80035da:	2108      	movs	r1, #8
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80035de:	f7ff fe8f 	bl	8003300 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80035e2:	bf00      	nop
}
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	58000c00 	.word	0x58000c00
 80035ec:	20000248 	.word	0x20000248

080035f0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80035f4:	2108      	movs	r1, #8
 80035f6:	4802      	ldr	r0, [pc, #8]	; (8003600 <HW_IPCC_TRACES_Init+0x10>)
 80035f8:	f7ff fe62 	bl	80032c0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80035fc:	bf00      	nop
}
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	58000c00 	.word	0x58000c00

08003604 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003608:	f006 fea8 	bl	800a35c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800360c:	2108      	movs	r1, #8
 800360e:	4802      	ldr	r0, [pc, #8]	; (8003618 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003610:	f7ff fe68 	bl	80032e4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003614:	bf00      	nop
}
 8003616:	bd80      	pop	{r7, pc}
 8003618:	58000c00 	.word	0x58000c00

0800361c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800361c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800361e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003620:	3304      	adds	r3, #4

08003622 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003622:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003624:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003626:	d3f9      	bcc.n	800361c <CopyDataInit>
  bx lr
 8003628:	4770      	bx	lr

0800362a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800362a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800362c:	3004      	adds	r0, #4

0800362e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800362e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003630:	d3fb      	bcc.n	800362a <FillZerobss>
  bx lr
 8003632:	4770      	bx	lr

08003634 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003634:	480c      	ldr	r0, [pc, #48]	; (8003668 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003636:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <LoopForever+0x8>)
 800363a:	490d      	ldr	r1, [pc, #52]	; (8003670 <LoopForever+0xc>)
 800363c:	4a0d      	ldr	r2, [pc, #52]	; (8003674 <LoopForever+0x10>)
 800363e:	2300      	movs	r3, #0
 8003640:	f7ff ffef 	bl	8003622 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003644:	480c      	ldr	r0, [pc, #48]	; (8003678 <LoopForever+0x14>)
 8003646:	490d      	ldr	r1, [pc, #52]	; (800367c <LoopForever+0x18>)
 8003648:	2300      	movs	r3, #0
 800364a:	f7ff fff0 	bl	800362e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800364e:	480c      	ldr	r0, [pc, #48]	; (8003680 <LoopForever+0x1c>)
 8003650:	490c      	ldr	r1, [pc, #48]	; (8003684 <LoopForever+0x20>)
 8003652:	2300      	movs	r3, #0
 8003654:	f7ff ffeb 	bl	800362e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003658:	f000 f910 	bl	800387c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800365c:	f007 f95c 	bl	800a918 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003660:	f7fe fa7a 	bl	8001b58 <main>

08003664 <LoopForever>:

LoopForever:
  b LoopForever
 8003664:	e7fe      	b.n	8003664 <LoopForever>
 8003666:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003668:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800366c:	20000004 	.word	0x20000004
 8003670:	200000ac 	.word	0x200000ac
 8003674:	0800c3e4 	.word	0x0800c3e4
  INIT_BSS _sbss, _ebss
 8003678:	20000214 	.word	0x20000214
 800367c:	200015f4 	.word	0x200015f4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003680:	200301e0 	.word	0x200301e0
 8003684:	20030a57 	.word	0x20030a57

08003688 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003688:	e7fe      	b.n	8003688 <ADC1_IRQHandler>

0800368a <LL_AHB2_GRP1_EnableClock>:
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4313      	orrs	r3, r2
 80036a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4013      	ands	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036ae:	68fb      	ldr	r3, [r7, #12]
}
 80036b0:	bf00      	nop
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80036c6:	f107 030c 	add.w	r3, r7, #12
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	60da      	str	r2, [r3, #12]
 80036d4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80036d6:	2002      	movs	r0, #2
 80036d8:	f7ff ffd7 	bl	800368a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <BSP_LED_Init+0x6c>)
 80036e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036e4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036e6:	2301      	movs	r3, #1
 80036e8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80036ee:	2302      	movs	r3, #2
 80036f0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <BSP_LED_Init+0x70>)
 80036f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fa:	f107 020c 	add.w	r2, r7, #12
 80036fe:	4611      	mov	r1, r2
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fedb 	bl	80044bc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	4a08      	ldr	r2, [pc, #32]	; (800372c <BSP_LED_Init+0x70>)
 800370a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800370e:	79fb      	ldrb	r3, [r7, #7]
 8003710:	4a05      	ldr	r2, [pc, #20]	; (8003728 <BSP_LED_Init+0x6c>)
 8003712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003716:	2200      	movs	r2, #0
 8003718:	4619      	mov	r1, r3
 800371a:	f001 f83f 	bl	800479c <HAL_GPIO_WritePin>
}
 800371e:	bf00      	nop
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	0800c250 	.word	0x0800c250
 800372c:	2000001c 	.word	0x2000001c

08003730 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	4a07      	ldr	r2, [pc, #28]	; (800375c <BSP_LED_On+0x2c>)
 800373e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	4a06      	ldr	r2, [pc, #24]	; (8003760 <BSP_LED_On+0x30>)
 8003746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800374a:	2201      	movs	r2, #1
 800374c:	4619      	mov	r1, r3
 800374e:	f001 f825 	bl	800479c <HAL_GPIO_WritePin>
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	2000001c 	.word	0x2000001c
 8003760:	0800c250 	.word	0x0800c250

08003764 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	4a07      	ldr	r2, [pc, #28]	; (8003790 <BSP_LED_Off+0x2c>)
 8003772:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <BSP_LED_Off+0x30>)
 800377a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800377e:	2200      	movs	r2, #0
 8003780:	4619      	mov	r1, r3
 8003782:	f001 f80b 	bl	800479c <HAL_GPIO_WritePin>
}
 8003786:	bf00      	nop
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	2000001c 	.word	0x2000001c
 8003794:	0800c250 	.word	0x0800c250

08003798 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	460a      	mov	r2, r1
 80037a2:	71fb      	strb	r3, [r7, #7]
 80037a4:	4613      	mov	r3, r2
 80037a6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80037a8:	f107 030c 	add.w	r3, r7, #12
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <BSP_PB_Init+0x2e>
 80037be:	2004      	movs	r0, #4
 80037c0:	f7ff ff63 	bl	800368a <LL_AHB2_GRP1_EnableClock>
 80037c4:	e00c      	b.n	80037e0 <BSP_PB_Init+0x48>
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d103      	bne.n	80037d4 <BSP_PB_Init+0x3c>
 80037cc:	2008      	movs	r0, #8
 80037ce:	f7ff ff5c 	bl	800368a <LL_AHB2_GRP1_EnableClock>
 80037d2:	e005      	b.n	80037e0 <BSP_PB_Init+0x48>
 80037d4:	79fb      	ldrb	r3, [r7, #7]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d102      	bne.n	80037e0 <BSP_PB_Init+0x48>
 80037da:	2008      	movs	r0, #8
 80037dc:	f7ff ff55 	bl	800368a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80037e0:	79bb      	ldrb	r3, [r7, #6]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d117      	bne.n	8003816 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80037e6:	79fb      	ldrb	r3, [r7, #7]
 80037e8:	4a20      	ldr	r2, [pc, #128]	; (800386c <BSP_PB_Init+0xd4>)
 80037ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ee:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80037f4:	2301      	movs	r3, #1
 80037f6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037f8:	2302      	movs	r3, #2
 80037fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	4a1c      	ldr	r2, [pc, #112]	; (8003870 <BSP_PB_Init+0xd8>)
 8003800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003804:	f107 020c 	add.w	r2, r7, #12
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f000 fe56 	bl	80044bc <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003810:	2001      	movs	r0, #1
 8003812:	f7fe fb78 	bl	8001f06 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003816:	79bb      	ldrb	r3, [r7, #6]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d122      	bne.n	8003862 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	4a13      	ldr	r2, [pc, #76]	; (800386c <BSP_PB_Init+0xd4>)
 8003820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003824:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003826:	2301      	movs	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <BSP_PB_Init+0xdc>)
 800382c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <BSP_PB_Init+0xd8>)
 8003832:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003836:	f107 020c 	add.w	r2, r7, #12
 800383a:	4611      	mov	r1, r2
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fe3d 	bl	80044bc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4a0c      	ldr	r2, [pc, #48]	; (8003878 <BSP_PB_Init+0xe0>)
 8003846:	5cd3      	ldrb	r3, [r2, r3]
 8003848:	b25b      	sxtb	r3, r3
 800384a:	2200      	movs	r2, #0
 800384c:	210f      	movs	r1, #15
 800384e:	4618      	mov	r0, r3
 8003850:	f000 fa63 	bl	8003d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <BSP_PB_Init+0xe0>)
 8003858:	5cd3      	ldrb	r3, [r2, r3]
 800385a:	b25b      	sxtb	r3, r3
 800385c:	4618      	mov	r0, r3
 800385e:	f000 fa76 	bl	8003d4e <HAL_NVIC_EnableIRQ>
  }
}
 8003862:	bf00      	nop
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	0800c258 	.word	0x0800c258
 8003870:	20000028 	.word	0x20000028
 8003874:	10210000 	.word	0x10210000
 8003878:	0800c260 	.word	0x0800c260

0800387c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003880:	4b26      	ldr	r3, [pc, #152]	; (800391c <SystemInit+0xa0>)
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003886:	4b25      	ldr	r3, [pc, #148]	; (800391c <SystemInit+0xa0>)
 8003888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388c:	4a23      	ldr	r2, [pc, #140]	; (800391c <SystemInit+0xa0>)
 800388e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003892:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038aa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80038ae:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ba:	4b19      	ldr	r3, [pc, #100]	; (8003920 <SystemInit+0xa4>)
 80038bc:	4013      	ands	r3, r2
 80038be:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038cc:	f023 0305 	bic.w	r3, r3, #5
 80038d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80038d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038e0:	f023 0301 	bic.w	r3, r3, #1
 80038e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ec:	4a0d      	ldr	r2, [pc, #52]	; (8003924 <SystemInit+0xa8>)
 80038ee:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80038f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <SystemInit+0xa8>)
 80038f6:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003906:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000ed00 	.word	0xe000ed00
 8003920:	faf6fefb 	.word	0xfaf6fefb
 8003924:	22041000 	.word	0x22041000

08003928 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6053      	str	r3, [r2, #4]
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	e0042000 	.word	0xe0042000

08003948 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800394c:	4b05      	ldr	r3, [pc, #20]	; (8003964 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a04      	ldr	r2, [pc, #16]	; (8003964 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	6053      	str	r3, [r2, #4]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	e0042000 	.word	0xe0042000

08003968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <HAL_Init+0x3c>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <HAL_Init+0x3c>)
 8003978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800397c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800397e:	2003      	movs	r0, #3
 8003980:	f000 f9c0 	bl	8003d04 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003984:	2000      	movs	r0, #0
 8003986:	f000 f80f 	bl	80039a8 <HAL_InitTick>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	71fb      	strb	r3, [r7, #7]
 8003994:	e001      	b.n	800399a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003996:	f7fe fb86 	bl	80020a6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800399a:	79fb      	ldrb	r3, [r7, #7]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	58004000 	.word	0x58004000

080039a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_InitTick+0x6c>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d024      	beq.n	8003a06 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039bc:	f002 f894 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 80039c0:	4602      	mov	r2, r0
 80039c2:	4b14      	ldr	r3, [pc, #80]	; (8003a14 <HAL_InitTick+0x6c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	4619      	mov	r1, r3
 80039c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f9d6 	bl	8003d86 <HAL_SYSTICK_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10f      	bne.n	8003a00 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b0f      	cmp	r3, #15
 80039e4:	d809      	bhi.n	80039fa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039e6:	2200      	movs	r2, #0
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	f04f 30ff 	mov.w	r0, #4294967295
 80039ee:	f000 f994 	bl	8003d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_InitTick+0x70>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	e007      	b.n	8003a0a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	e004      	b.n	8003a0a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e001      	b.n	8003a0a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	2000003c 	.word	0x2000003c
 8003a18:	20000038 	.word	0x20000038

08003a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a20:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_IncTick+0x20>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_IncTick+0x24>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_IncTick+0x24>)
 8003a2e:	6013      	str	r3, [r2, #0]
}
 8003a30:	bf00      	nop
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	2000003c 	.word	0x2000003c
 8003a40:	200015e0 	.word	0x200015e0

08003a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  return uwTick;
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_GetTick+0x14>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	200015e0 	.word	0x200015e0

08003a5c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <HAL_GetTickPrio+0x14>)
 8003a62:	681b      	ldr	r3, [r3, #0]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000038 	.word	0x20000038

08003a74 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <HAL_GetTickFreq+0x14>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	2000003c 	.word	0x2000003c

08003a8c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003a90:	f7ff ff4a 	bl	8003928 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003a94:	bf00      	nop
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003a9c:	f7ff ff54 	bl	8003948 <LL_DBGMCU_EnableDBGStopMode>
}
 8003aa0:	bf00      	nop
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003acc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ad0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ad6:	4a04      	ldr	r2, [pc, #16]	; (8003ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	60d3      	str	r3, [r2, #12]
}
 8003adc:	bf00      	nop
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	e000ed00 	.word	0xe000ed00

08003aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003af0:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <__NVIC_GetPriorityGrouping+0x18>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	f003 0307 	and.w	r3, r3, #7
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000ed00 	.word	0xe000ed00

08003b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	db0b      	blt.n	8003b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	f003 021f 	and.w	r2, r3, #31
 8003b20:	4907      	ldr	r1, [pc, #28]	; (8003b40 <__NVIC_EnableIRQ+0x38>)
 8003b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2001      	movs	r0, #1
 8003b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000e100 	.word	0xe000e100

08003b44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db12      	blt.n	8003b7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	490a      	ldr	r1, [pc, #40]	; (8003b88 <__NVIC_DisableIRQ+0x44>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	3320      	adds	r3, #32
 8003b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b70:	f3bf 8f4f 	dsb	sy
}
 8003b74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b76:	f3bf 8f6f 	isb	sy
}
 8003b7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000e100 	.word	0xe000e100

08003b8c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	db0c      	blt.n	8003bb8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	4907      	ldr	r1, [pc, #28]	; (8003bc4 <__NVIC_SetPendingIRQ+0x38>)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2001      	movs	r0, #1
 8003bae:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb2:	3340      	adds	r3, #64	; 0x40
 8003bb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100

08003bc8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	db0c      	blt.n	8003bf4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	f003 021f 	and.w	r2, r3, #31
 8003be0:	4907      	ldr	r1, [pc, #28]	; (8003c00 <__NVIC_ClearPendingIRQ+0x38>)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2001      	movs	r0, #1
 8003bea:	fa00 f202 	lsl.w	r2, r0, r2
 8003bee:	3360      	adds	r3, #96	; 0x60
 8003bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000e100 	.word	0xe000e100

08003c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	6039      	str	r1, [r7, #0]
 8003c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	db0a      	blt.n	8003c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	490c      	ldr	r1, [pc, #48]	; (8003c50 <__NVIC_SetPriority+0x4c>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	0112      	lsls	r2, r2, #4
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	440b      	add	r3, r1
 8003c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c2c:	e00a      	b.n	8003c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	4908      	ldr	r1, [pc, #32]	; (8003c54 <__NVIC_SetPriority+0x50>)
 8003c34:	79fb      	ldrb	r3, [r7, #7]
 8003c36:	f003 030f 	and.w	r3, r3, #15
 8003c3a:	3b04      	subs	r3, #4
 8003c3c:	0112      	lsls	r2, r2, #4
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	440b      	add	r3, r1
 8003c42:	761a      	strb	r2, [r3, #24]
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000e100 	.word	0xe000e100
 8003c54:	e000ed00 	.word	0xe000ed00

08003c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f1c3 0307 	rsb	r3, r3, #7
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	bf28      	it	cs
 8003c76:	2304      	movcs	r3, #4
 8003c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d902      	bls.n	8003c88 <NVIC_EncodePriority+0x30>
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	3b03      	subs	r3, #3
 8003c86:	e000      	b.n	8003c8a <NVIC_EncodePriority+0x32>
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43da      	mvns	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	401a      	ands	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8003caa:	43d9      	mvns	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cb0:	4313      	orrs	r3, r2
         );
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3724      	adds	r7, #36	; 0x24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
	...

08003cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd0:	d301      	bcc.n	8003cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e00f      	b.n	8003cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	; (8003d00 <SysTick_Config+0x40>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cde:	210f      	movs	r1, #15
 8003ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce4:	f7ff ff8e 	bl	8003c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <SysTick_Config+0x40>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cee:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <SysTick_Config+0x40>)
 8003cf0:	2207      	movs	r2, #7
 8003cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	e000e010 	.word	0xe000e010

08003d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fec9 	bl	8003aa4 <__NVIC_SetPriorityGrouping>
}
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b086      	sub	sp, #24
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	4603      	mov	r3, r0
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d28:	f7ff fee0 	bl	8003aec <__NVIC_GetPriorityGrouping>
 8003d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	6978      	ldr	r0, [r7, #20]
 8003d34:	f7ff ff90 	bl	8003c58 <NVIC_EncodePriority>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff5f 	bl	8003c04 <__NVIC_SetPriority>
}
 8003d46:	bf00      	nop
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b082      	sub	sp, #8
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	4603      	mov	r3, r0
 8003d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fed3 	bl	8003b08 <__NVIC_EnableIRQ>
}
 8003d62:	bf00      	nop
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fee3 	bl	8003b44 <__NVIC_DisableIRQ>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff ff96 	bl	8003cc0 <SysTick_Config>
 8003d94:	4603      	mov	r3, r0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff feed 	bl	8003b8c <__NVIC_SetPendingIRQ>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fefd 	bl	8003bc8 <__NVIC_ClearPendingIRQ>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e08e      	b.n	8003f08 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b47      	ldr	r3, [pc, #284]	; (8003f10 <HAL_DMA_Init+0x138>)
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d80f      	bhi.n	8003e16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b45      	ldr	r3, [pc, #276]	; (8003f14 <HAL_DMA_Init+0x13c>)
 8003dfe:	4413      	add	r3, r2
 8003e00:	4a45      	ldr	r2, [pc, #276]	; (8003f18 <HAL_DMA_Init+0x140>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	009a      	lsls	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a42      	ldr	r2, [pc, #264]	; (8003f1c <HAL_DMA_Init+0x144>)
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
 8003e14:	e00e      	b.n	8003e34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	4b40      	ldr	r3, [pc, #256]	; (8003f20 <HAL_DMA_Init+0x148>)
 8003e1e:	4413      	add	r3, r2
 8003e20:	4a3d      	ldr	r2, [pc, #244]	; (8003f18 <HAL_DMA_Init+0x140>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	009a      	lsls	r2, r3, #2
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a3c      	ldr	r2, [pc, #240]	; (8003f24 <HAL_DMA_Init+0x14c>)
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fa74 	bl	8004374 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e94:	d102      	bne.n	8003e9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003ea8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003eb2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <HAL_DMA_Init+0x106>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d80c      	bhi.n	8003ede <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fa93 	bl	80043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003eda:	605a      	str	r2, [r3, #4]
 8003edc:	e008      	b.n	8003ef0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40020407 	.word	0x40020407
 8003f14:	bffdfff8 	.word	0xbffdfff8
 8003f18:	cccccccd 	.word	0xcccccccd
 8003f1c:	40020000 	.word	0x40020000
 8003f20:	bffdfbf8 	.word	0xbffdfbf8
 8003f24:	40020400 	.word	0x40020400

08003f28 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f36:	2300      	movs	r3, #0
 8003f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_DMA_Start_IT+0x20>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e066      	b.n	8004016 <HAL_DMA_Start_IT+0xee>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d155      	bne.n	8004008 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f9b9 	bl	80042f8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d008      	beq.n	8003fa0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 020e 	orr.w	r2, r2, #14
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e00f      	b.n	8003fc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 020a 	orr.w	r2, r2, #10
 8003fbe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fdc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0201 	orr.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e005      	b.n	8004014 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004010:	2302      	movs	r3, #2
 8004012:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004014:	7dfb      	ldrb	r3, [r7, #23]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e04f      	b.n	80040d0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d008      	beq.n	800404e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2204      	movs	r2, #4
 8004040:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e040      	b.n	80040d0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 020e 	bic.w	r2, r2, #14
 800405c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800406c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f003 021c 	and.w	r2, r3, #28
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2101      	movs	r1, #1
 800408c:	fa01 f202 	lsl.w	r2, r1, r2
 8004090:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800409a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00c      	beq.n	80040be <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e4:	2300      	movs	r3, #0
 80040e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d005      	beq.n	8004100 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2204      	movs	r2, #4
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e047      	b.n	8004190 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 020e 	bic.w	r2, r2, #14
 800410e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800412e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	f003 021c 	and.w	r2, r3, #28
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2101      	movs	r1, #1
 800413e:	fa01 f202 	lsl.w	r2, r1, r2
 8004142:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800414c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00c      	beq.n	8004170 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004164:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800416e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
    }
  }
  return status;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f003 031c 	and.w	r3, r3, #28
 80041ba:	2204      	movs	r2, #4
 80041bc:	409a      	lsls	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4013      	ands	r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d026      	beq.n	8004214 <HAL_DMA_IRQHandler+0x7a>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d021      	beq.n	8004214 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d107      	bne.n	80041ee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0204 	bic.w	r2, r2, #4
 80041ec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	f003 021c 	and.w	r2, r3, #28
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	2104      	movs	r1, #4
 80041fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004200:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	2b00      	cmp	r3, #0
 8004208:	d071      	beq.n	80042ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004212:	e06c      	b.n	80042ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004218:	f003 031c 	and.w	r3, r3, #28
 800421c:	2202      	movs	r2, #2
 800421e:	409a      	lsls	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d02e      	beq.n	8004286 <HAL_DMA_IRQHandler+0xec>
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d029      	beq.n	8004286 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0320 	and.w	r3, r3, #32
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10b      	bne.n	8004258 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020a 	bic.w	r2, r2, #10
 800424e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425c:	f003 021c 	and.w	r2, r3, #28
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	2102      	movs	r1, #2
 8004266:	fa01 f202 	lsl.w	r2, r1, r2
 800426a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	2b00      	cmp	r3, #0
 800427a:	d038      	beq.n	80042ee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004284:	e033      	b.n	80042ee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428a:	f003 031c 	and.w	r3, r3, #28
 800428e:	2208      	movs	r2, #8
 8004290:	409a      	lsls	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4013      	ands	r3, r2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d02a      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x156>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d025      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 020e 	bic.w	r2, r2, #14
 80042b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b8:	f003 021c 	and.w	r2, r3, #28
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	2101      	movs	r1, #1
 80042c2:	fa01 f202 	lsl.w	r2, r1, r2
 80042c6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d004      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80042ee:	bf00      	nop
 80042f0:	bf00      	nop
}
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800430e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	2b00      	cmp	r3, #0
 8004316:	d004      	beq.n	8004322 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004320:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f003 021c 	and.w	r2, r3, #28
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	2101      	movs	r1, #1
 8004330:	fa01 f202 	lsl.w	r2, r1, r2
 8004334:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b10      	cmp	r3, #16
 8004344:	d108      	bne.n	8004358 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004356:	e007      	b.n	8004368 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	60da      	str	r2, [r3, #12]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004384:	429a      	cmp	r2, r3
 8004386:	d80a      	bhi.n	800439e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	089b      	lsrs	r3, r3, #2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004394:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6493      	str	r3, [r2, #72]	; 0x48
 800439c:	e007      	b.n	80043ae <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a2:	089b      	lsrs	r3, r3, #2
 80043a4:	009a      	lsls	r2, r3, #2
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80043a8:	4413      	add	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	3b08      	subs	r3, #8
 80043b6:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	091b      	lsrs	r3, r3, #4
 80043be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80043c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2201      	movs	r2, #1
 80043ce:	409a      	lsls	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40020407 	.word	0x40020407
 80043e4:	4002081c 	.word	0x4002081c
 80043e8:	cccccccd 	.word	0xcccccccd
 80043ec:	40020880 	.word	0x40020880

080043f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004400:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004406:	4413      	add	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	461a      	mov	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004414:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b01      	subs	r3, #1
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2201      	movs	r2, #1
 8004420:	409a      	lsls	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	1000823f 	.word	0x1000823f
 8004438:	40020940 	.word	0x40020940

0800443c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d12b      	bne.n	80044aa <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_DMAEx_ConfigMuxSync+0x24>
 800445c:	2302      	movs	r3, #2
 800445e:	e025      	b.n	80044ac <HAL_DMAEx_ConfigMuxSync+0x70>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b12      	ldr	r3, [pc, #72]	; (80044b8 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004470:	4013      	ands	r3, r2
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	6811      	ldr	r1, [r2, #0]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	68d2      	ldr	r2, [r2, #12]
 800447a:	3a01      	subs	r2, #1
 800447c:	04d2      	lsls	r2, r2, #19
 800447e:	4311      	orrs	r1, r2
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	6852      	ldr	r2, [r2, #4]
 8004484:	4311      	orrs	r1, r2
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	7a12      	ldrb	r2, [r2, #8]
 800448a:	0412      	lsls	r2, r2, #16
 800448c:	4311      	orrs	r1, r2
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	7a52      	ldrb	r2, [r2, #9]
 8004492:	0252      	lsls	r2, r2, #9
 8004494:	4311      	orrs	r1, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800449a:	430b      	orrs	r3, r1
 800449c:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e000      	b.n	80044ac <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
  }
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000fdff 	.word	0xe000fdff

080044bc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044c6:	2300      	movs	r3, #0
 80044c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044ca:	e14c      	b.n	8004766 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2101      	movs	r1, #1
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f000 813e 	beq.w	8004760 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d00b      	beq.n	8004504 <HAL_GPIO_Init+0x48>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d007      	beq.n	8004504 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044f8:	2b11      	cmp	r3, #17
 80044fa:	d003      	beq.n	8004504 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b12      	cmp	r3, #18
 8004502:	d130      	bne.n	8004566 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	2203      	movs	r2, #3
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800453a:	2201      	movs	r2, #1
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43db      	mvns	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4013      	ands	r3, r2
 8004548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	091b      	lsrs	r3, r3, #4
 8004550:	f003 0201 	and.w	r2, r3, #1
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	2203      	movs	r2, #3
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4313      	orrs	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d003      	beq.n	80045a6 <HAL_GPIO_Init+0xea>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b12      	cmp	r3, #18
 80045a4:	d123      	bne.n	80045ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	08da      	lsrs	r2, r3, #3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3208      	adds	r2, #8
 80045ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	220f      	movs	r2, #15
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	43db      	mvns	r3, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4013      	ands	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	08da      	lsrs	r2, r3, #3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3208      	adds	r2, #8
 80045e8:	6939      	ldr	r1, [r7, #16]
 80045ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	2203      	movs	r2, #3
 80045fa:	fa02 f303 	lsl.w	r3, r2, r3
 80045fe:	43db      	mvns	r3, r3
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4013      	ands	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f003 0203 	and.w	r2, r3, #3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 8098 	beq.w	8004760 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004630:	4a54      	ldr	r2, [pc, #336]	; (8004784 <HAL_GPIO_Init+0x2c8>)
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	089b      	lsrs	r3, r3, #2
 8004636:	3302      	adds	r3, #2
 8004638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	220f      	movs	r2, #15
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	43db      	mvns	r3, r3
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	4013      	ands	r3, r2
 8004652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800465a:	d019      	beq.n	8004690 <HAL_GPIO_Init+0x1d4>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a4a      	ldr	r2, [pc, #296]	; (8004788 <HAL_GPIO_Init+0x2cc>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d013      	beq.n	800468c <HAL_GPIO_Init+0x1d0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a49      	ldr	r2, [pc, #292]	; (800478c <HAL_GPIO_Init+0x2d0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00d      	beq.n	8004688 <HAL_GPIO_Init+0x1cc>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a48      	ldr	r2, [pc, #288]	; (8004790 <HAL_GPIO_Init+0x2d4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <HAL_GPIO_Init+0x1c8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a47      	ldr	r2, [pc, #284]	; (8004794 <HAL_GPIO_Init+0x2d8>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_GPIO_Init+0x1c4>
 800467c:	2304      	movs	r3, #4
 800467e:	e008      	b.n	8004692 <HAL_GPIO_Init+0x1d6>
 8004680:	2307      	movs	r3, #7
 8004682:	e006      	b.n	8004692 <HAL_GPIO_Init+0x1d6>
 8004684:	2303      	movs	r3, #3
 8004686:	e004      	b.n	8004692 <HAL_GPIO_Init+0x1d6>
 8004688:	2302      	movs	r3, #2
 800468a:	e002      	b.n	8004692 <HAL_GPIO_Init+0x1d6>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <HAL_GPIO_Init+0x1d6>
 8004690:	2300      	movs	r3, #0
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	f002 0203 	and.w	r2, r2, #3
 8004698:	0092      	lsls	r2, r2, #2
 800469a:	4093      	lsls	r3, r2
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046a2:	4938      	ldr	r1, [pc, #224]	; (8004784 <HAL_GPIO_Init+0x2c8>)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	089b      	lsrs	r3, r3, #2
 80046a8:	3302      	adds	r3, #2
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80046b0:	4b39      	ldr	r3, [pc, #228]	; (8004798 <HAL_GPIO_Init+0x2dc>)
 80046b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	43db      	mvns	r3, r3
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	4013      	ands	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046d6:	4a30      	ldr	r2, [pc, #192]	; (8004798 <HAL_GPIO_Init+0x2dc>)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80046de:	4b2e      	ldr	r3, [pc, #184]	; (8004798 <HAL_GPIO_Init+0x2dc>)
 80046e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	43db      	mvns	r3, r3
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004704:	4a24      	ldr	r2, [pc, #144]	; (8004798 <HAL_GPIO_Init+0x2dc>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800470c:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_GPIO_Init+0x2dc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43db      	mvns	r3, r3
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_GPIO_Init+0x2dc>)
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004736:	4b18      	ldr	r3, [pc, #96]	; (8004798 <HAL_GPIO_Init+0x2dc>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	43db      	mvns	r3, r3
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4013      	ands	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800475a:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <HAL_GPIO_Init+0x2dc>)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	3301      	adds	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	fa22 f303 	lsr.w	r3, r2, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f aeab 	bne.w	80044cc <HAL_GPIO_Init+0x10>
  }
}
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	40010000 	.word	0x40010000
 8004788:	48000400 	.word	0x48000400
 800478c:	48000800 	.word	0x48000800
 8004790:	48000c00 	.word	0x48000c00
 8004794:	48001000 	.word	0x48001000
 8004798:	58000800 	.word	0x58000800

0800479c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]
 80047a8:	4613      	mov	r3, r2
 80047aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047ac:	787b      	ldrb	r3, [r7, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047b2:	887a      	ldrh	r2, [r7, #2]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047b8:	e002      	b.n	80047c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	4013      	ands	r3, r2
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d006      	beq.n	80047f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047e2:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e4:	88fb      	ldrh	r3, [r7, #6]
 80047e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7fc f8c9 	bl	8000982 <HAL_GPIO_EXTI_Callback>
  }
}
 80047f0:	bf00      	nop
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	58000800 	.word	0x58000800

080047fc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <HAL_HSEM_IRQHandler+0x30>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004808:	4b08      	ldr	r3, [pc, #32]	; (800482c <HAL_HSEM_IRQHandler+0x30>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	43db      	mvns	r3, r3
 8004810:	4906      	ldr	r1, [pc, #24]	; (800482c <HAL_HSEM_IRQHandler+0x30>)
 8004812:	4013      	ands	r3, r2
 8004814:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004816:	4a05      	ldr	r2, [pc, #20]	; (800482c <HAL_HSEM_IRQHandler+0x30>)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f807 	bl	8004830 <HAL_HSEM_FreeCallback>
}
 8004822:	bf00      	nop
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	58001500 	.word	0x58001500

08004830 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01e      	beq.n	8004894 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004856:	4b13      	ldr	r3, [pc, #76]	; (80048a4 <HAL_IPCC_Init+0x60>)
 8004858:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d102      	bne.n	800486c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fd fc2e 	bl	80020c8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800486c:	68b8      	ldr	r0, [r7, #8]
 800486e:	f000 f85b 	bl	8004928 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f82c 	bl	80048dc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004892:	e001      	b.n	8004898 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004898:	7bfb      	ldrb	r3, [r7, #15]
}
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	58000c00 	.word	0x58000c00

080048a8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	4613      	mov	r3, r2
 80048ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e00f      	b.n	800490a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	4a0b      	ldr	r2, [pc, #44]	; (8004920 <IPCC_SetDefaultCallbacks+0x44>)
 80048f4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3306      	adds	r3, #6
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	4a08      	ldr	r2, [pc, #32]	; (8004924 <IPCC_SetDefaultCallbacks+0x48>)
 8004902:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3301      	adds	r3, #1
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b05      	cmp	r3, #5
 800490e:	d9ec      	bls.n	80048ea <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	080048a9 	.word	0x080048a9
 8004924:	080048c3 	.word	0x080048c3

08004928 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 800493c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	223f      	movs	r2, #63	; 0x3f
 8004942:	609a      	str	r2, [r3, #8]
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a04      	ldr	r2, [pc, #16]	; (800496c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800495a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495e:	6013      	str	r3, [r2, #0]
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	58000400 	.word	0x58000400

08004970 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <HAL_PWREx_GetVoltageRange+0x18>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	58000400 	.word	0x58000400

0800498c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800499a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800499e:	d101      	bne.n	80049a4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_HSE_Enable>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_RCC_HSE_Disable>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049e0:	6013      	str	r3, [r2, #0]
}
 80049e2:	bf00      	nop
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_RCC_HSE_IsReady>:
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80049f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049fe:	d101      	bne.n	8004a04 <LL_RCC_HSE_IsReady+0x18>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <LL_RCC_HSE_IsReady+0x1a>
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_RCC_HSI_Enable>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	6013      	str	r3, [r2, #0]
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_RCC_HSI_Disable>:
{
 8004a2e:	b480      	push	{r7}
 8004a30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a40:	6013      	str	r3, [r2, #0]
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_RCC_HSI_IsReady>:
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a5e:	d101      	bne.n	8004a64 <LL_RCC_HSI_IsReady+0x18>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <LL_RCC_HSI_IsReady+0x1a>
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	061b      	lsls	r3, r3, #24
 8004a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	604b      	str	r3, [r1, #4]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_RCC_HSI48_Enable>:
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004aaa:	f043 0301 	orr.w	r3, r3, #1
 8004aae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <LL_RCC_HSI48_Disable>:
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ac8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004ad4:	bf00      	nop
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <LL_RCC_HSI48_IsReady>:
{
 8004ade:	b480      	push	{r7}
 8004ae0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d101      	bne.n	8004af6 <LL_RCC_HSI48_IsReady+0x18>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <LL_RCC_HSI48_IsReady+0x1a>
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_RCC_LSE_Enable>:
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b12:	f043 0301 	orr.w	r3, r3, #1
 8004b16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b1a:	bf00      	nop
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <LL_RCC_LSE_Disable>:
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b34:	f023 0301 	bic.w	r3, r3, #1
 8004b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <LL_RCC_LSE_EnableBypass>:
{
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b56:	f043 0304 	orr.w	r3, r3, #4
 8004b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b5e:	bf00      	nop
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <LL_RCC_LSE_DisableBypass>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b80:	bf00      	nop
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <LL_RCC_LSE_IsReady>:
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d101      	bne.n	8004ba2 <LL_RCC_LSE_IsReady+0x18>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <LL_RCC_LSE_IsReady+0x1a>
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <LL_RCC_LSI1_Enable>:
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bc6:	bf00      	nop
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <LL_RCC_LSI1_Disable>:
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004be8:	bf00      	nop
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <LL_RCC_LSI1_IsReady>:
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d101      	bne.n	8004c0a <LL_RCC_LSI1_IsReady+0x18>
 8004c06:	2301      	movs	r3, #1
 8004c08:	e000      	b.n	8004c0c <LL_RCC_LSI1_IsReady+0x1a>
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <LL_RCC_LSI2_Enable>:
{
 8004c16:	b480      	push	{r7}
 8004c18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c26:	f043 0304 	orr.w	r3, r3, #4
 8004c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c2e:	bf00      	nop
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <LL_RCC_LSI2_Disable>:
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c48:	f023 0304 	bic.w	r3, r3, #4
 8004c4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <LL_RCC_LSI2_IsReady>:
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d101      	bne.n	8004c72 <LL_RCC_LSI2_IsReady+0x18>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <LL_RCC_LSI2_IsReady+0x1a>
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <LL_RCC_LSI2_SetTrimming>:
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c8e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <LL_RCC_MSI_Enable>:
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	6013      	str	r3, [r2, #0]
}
 8004cc0:	bf00      	nop
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_RCC_MSI_Disable>:
{
 8004cca:	b480      	push	{r7}
 8004ccc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]
}
 8004cde:	bf00      	nop
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <LL_RCC_MSI_IsReady>:
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d101      	bne.n	8004cfe <LL_RCC_MSI_IsReady+0x16>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <LL_RCC_MSI_IsReady+0x18>
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_RCC_MSI_SetRange>:
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
}
 8004d26:	bf00      	nop
 8004d28:	370c      	adds	r7, #12
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_RCC_MSI_GetRange>:
{
 8004d32:	b480      	push	{r7}
 8004d34:	b083      	sub	sp, #12
 8004d36:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d42:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2bb0      	cmp	r3, #176	; 0xb0
 8004d48:	d901      	bls.n	8004d4e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004d4a:	23b0      	movs	r3, #176	; 0xb0
 8004d4c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004d4e:	687b      	ldr	r3, [r7, #4]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <LL_RCC_MSI_SetCalibTrimming>:
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d76:	4313      	orrs	r3, r2
 8004d78:	604b      	str	r3, [r1, #4]
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_RCC_SetSysClkSource>:
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f023 0203 	bic.w	r2, r3, #3
 8004d98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <LL_RCC_GetSysClkSource>:
{
 8004dae:	b480      	push	{r7}
 8004db0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <LL_RCC_SetAHBPrescaler>:
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	608b      	str	r3, [r1, #8]
}
 8004de2:	bf00      	nop
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <LL_C2_RCC_SetAHBPrescaler>:
{
 8004dee:	b480      	push	{r7}
 8004df0:	b083      	sub	sp, #12
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <LL_RCC_SetAHB4Prescaler>:
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e26:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e2a:	f023 020f 	bic.w	r2, r3, #15
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <LL_RCC_SetAPB1Prescaler>:
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	608b      	str	r3, [r1, #8]
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <LL_RCC_SetAPB2Prescaler>:
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr

08004e98 <LL_RCC_GetAHBPrescaler>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <LL_RCC_GetAHB4Prescaler>:
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <LL_RCC_GetAPB1Prescaler>:
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <LL_RCC_GetAPB2Prescaler>:
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <LL_RCC_PLL_Enable>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]
}
 8004f10:	bf00      	nop
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <LL_RCC_PLL_Disable>:
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f2c:	6013      	str	r3, [r2, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_RCC_PLL_IsReady>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f4a:	d101      	bne.n	8004f50 <LL_RCC_PLL_IsReady+0x18>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <LL_RCC_PLL_IsReady+0x1a>
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_RCC_PLL_GetN>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	0a1b      	lsrs	r3, r3, #8
 8004f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <LL_RCC_PLL_GetR>:
{
 8004f76:	b480      	push	{r7}
 8004f78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <LL_RCC_PLL_GetDivider>:
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <LL_RCC_PLL_GetMainSource>:
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <LL_RCC_IsActiveFlag_HPRE>:
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd0:	d101      	bne.n	8004fd6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ff6:	d101      	bne.n	8004ffc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e000      	b.n	8004ffe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005010:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501c:	d101      	bne.n	8005022 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800501e:	2301      	movs	r3, #1
 8005020:	e000      	b.n	8005024 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005040:	d101      	bne.n	8005046 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005064:	d101      	bne.n	800506a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005066:	2301      	movs	r3, #1
 8005068:	e000      	b.n	800506c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b590      	push	{r4, r7, lr}
 800507a:	b08d      	sub	sp, #52	; 0x34
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e37e      	b.n	8005788 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0320 	and.w	r3, r3, #32
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8092 	beq.w	80051bc <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005098:	f7ff fe89 	bl	8004dae <LL_RCC_GetSysClkSource>
 800509c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800509e:	f7ff ff82 	bl	8004fa6 <LL_RCC_PLL_GetMainSource>
 80050a2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d005      	beq.n	80050b6 <HAL_RCC_OscConfig+0x3e>
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	2b0c      	cmp	r3, #12
 80050ae:	d14c      	bne.n	800514a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d149      	bne.n	800514a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050b6:	f7ff fe17 	bl	8004ce8 <LL_RCC_MSI_IsReady>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <HAL_RCC_OscConfig+0x54>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e35d      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80050d0:	f7ff fe2f 	bl	8004d32 <LL_RCC_MSI_GetRange>
 80050d4:	4603      	mov	r3, r0
 80050d6:	429c      	cmp	r4, r3
 80050d8:	d914      	bls.n	8005104 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 fd42 	bl	8005b68 <RCC_SetFlashLatencyFromMSIRange>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e34c      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fe09 	bl	8004d0a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f7ff fe2d 	bl	8004d5c <LL_RCC_MSI_SetCalibTrimming>
 8005102:	e013      	b.n	800512c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fdfe 	bl	8004d0a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff fe22 	bl	8004d5c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fd23 	bl	8005b68 <RCC_SetFlashLatencyFromMSIRange>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e32d      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800512c:	f000 fcdc 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 8005130:	4603      	mov	r3, r0
 8005132:	4ab3      	ldr	r2, [pc, #716]	; (8005400 <HAL_RCC_OscConfig+0x388>)
 8005134:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005136:	4bb3      	ldr	r3, [pc, #716]	; (8005404 <HAL_RCC_OscConfig+0x38c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe fc34 	bl	80039a8 <HAL_InitTick>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d039      	beq.n	80051ba <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e31e      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d01e      	beq.n	8005190 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005152:	f7ff fdab 	bl	8004cac <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005156:	f7fe fc75 	bl	8003a44 <HAL_GetTick>
 800515a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800515e:	f7fe fc71 	bl	8003a44 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e30b      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005170:	f7ff fdba 	bl	8004ce8 <LL_RCC_MSI_IsReady>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f1      	beq.n	800515e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fdc3 	bl	8004d0a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	4618      	mov	r0, r3
 800518a:	f7ff fde7 	bl	8004d5c <LL_RCC_MSI_SetCalibTrimming>
 800518e:	e015      	b.n	80051bc <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005190:	f7ff fd9b 	bl	8004cca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005194:	f7fe fc56 	bl	8003a44 <HAL_GetTick>
 8005198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800519c:	f7fe fc52 	bl	8003a44 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e2ec      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80051ae:	f7ff fd9b 	bl	8004ce8 <LL_RCC_MSI_IsReady>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f1      	bne.n	800519c <HAL_RCC_OscConfig+0x124>
 80051b8:	e000      	b.n	80051bc <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d04e      	beq.n	8005266 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051c8:	f7ff fdf1 	bl	8004dae <LL_RCC_GetSysClkSource>
 80051cc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ce:	f7ff feea 	bl	8004fa6 <LL_RCC_PLL_GetMainSource>
 80051d2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d005      	beq.n	80051e6 <HAL_RCC_OscConfig+0x16e>
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d10d      	bne.n	80051fc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d10a      	bne.n	80051fc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e6:	f7ff fc01 	bl	80049ec <LL_RCC_HSE_IsReady>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d039      	beq.n	8005264 <HAL_RCC_OscConfig+0x1ec>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d135      	bne.n	8005264 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e2c5      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005204:	d102      	bne.n	800520c <HAL_RCC_OscConfig+0x194>
 8005206:	f7ff fbd3 	bl	80049b0 <LL_RCC_HSE_Enable>
 800520a:	e001      	b.n	8005210 <HAL_RCC_OscConfig+0x198>
 800520c:	f7ff fbdf 	bl	80049ce <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d012      	beq.n	800523e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fe fc14 	bl	8003a44 <HAL_GetTick>
 800521c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005220:	f7fe fc10 	bl	8003a44 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	; 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e2aa      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005232:	f7ff fbdb 	bl	80049ec <LL_RCC_HSE_IsReady>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f1      	beq.n	8005220 <HAL_RCC_OscConfig+0x1a8>
 800523c:	e013      	b.n	8005266 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523e:	f7fe fc01 	bl	8003a44 <HAL_GetTick>
 8005242:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005246:	f7fe fbfd 	bl	8003a44 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b64      	cmp	r3, #100	; 0x64
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e297      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005258:	f7ff fbc8 	bl	80049ec <LL_RCC_HSE_IsReady>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f1      	bne.n	8005246 <HAL_RCC_OscConfig+0x1ce>
 8005262:	e000      	b.n	8005266 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d051      	beq.n	8005316 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005272:	f7ff fd9c 	bl	8004dae <LL_RCC_GetSysClkSource>
 8005276:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	f7ff fe95 	bl	8004fa6 <LL_RCC_PLL_GetMainSource>
 800527c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	2b04      	cmp	r3, #4
 8005282:	d005      	beq.n	8005290 <HAL_RCC_OscConfig+0x218>
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b0c      	cmp	r3, #12
 8005288:	d113      	bne.n	80052b2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	2b02      	cmp	r3, #2
 800528e:	d110      	bne.n	80052b2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005290:	f7ff fbdc 	bl	8004a4c <LL_RCC_HSI_IsReady>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_RCC_OscConfig+0x22e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d101      	bne.n	80052a6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e270      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fbe0 	bl	8004a70 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052b0:	e031      	b.n	8005316 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d019      	beq.n	80052ee <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052ba:	f7ff fba9 	bl	8004a10 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052be:	f7fe fbc1 	bl	8003a44 <HAL_GetTick>
 80052c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80052c4:	e008      	b.n	80052d8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c6:	f7fe fbbd 	bl	8003a44 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d901      	bls.n	80052d8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e257      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80052d8:	f7ff fbb8 	bl	8004a4c <LL_RCC_HSI_IsReady>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f1      	beq.n	80052c6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fbc2 	bl	8004a70 <LL_RCC_HSI_SetCalibTrimming>
 80052ec:	e013      	b.n	8005316 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052ee:	f7ff fb9e 	bl	8004a2e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f2:	f7fe fba7 	bl	8003a44 <HAL_GetTick>
 80052f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052fa:	f7fe fba3 	bl	8003a44 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e23d      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 800530c:	f7ff fb9e 	bl	8004a4c <LL_RCC_HSI_IsReady>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1f1      	bne.n	80052fa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 80a3 	beq.w	8005476 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d076      	beq.n	8005426 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	d046      	beq.n	80053d2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005344:	f7ff fc55 	bl	8004bf2 <LL_RCC_LSI1_IsReady>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d113      	bne.n	8005376 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800534e:	f7ff fc2e 	bl	8004bae <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005352:	f7fe fb77 	bl	8003a44 <HAL_GetTick>
 8005356:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800535a:	f7fe fb73 	bl	8003a44 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e20d      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800536c:	f7ff fc41 	bl	8004bf2 <LL_RCC_LSI1_IsReady>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d0f1      	beq.n	800535a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005376:	f7ff fc4e 	bl	8004c16 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537a:	f7fe fb63 	bl	8003a44 <HAL_GetTick>
 800537e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005380:	e008      	b.n	8005394 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005382:	f7fe fb5f 	bl	8003a44 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b03      	cmp	r3, #3
 800538e:	d901      	bls.n	8005394 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e1f9      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005394:	f7ff fc61 	bl	8004c5a <LL_RCC_LSI2_IsReady>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f1      	beq.n	8005382 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff fc6b 	bl	8004c7e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80053a8:	f7ff fc12 	bl	8004bd0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ac:	f7fe fb4a 	bl	8003a44 <HAL_GetTick>
 80053b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80053b2:	e008      	b.n	80053c6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053b4:	f7fe fb46 	bl	8003a44 <HAL_GetTick>
 80053b8:	4602      	mov	r2, r0
 80053ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d901      	bls.n	80053c6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e1e0      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80053c6:	f7ff fc14 	bl	8004bf2 <LL_RCC_LSI1_IsReady>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f1      	bne.n	80053b4 <HAL_RCC_OscConfig+0x33c>
 80053d0:	e051      	b.n	8005476 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80053d2:	f7ff fbec 	bl	8004bae <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d6:	f7fe fb35 	bl	8003a44 <HAL_GetTick>
 80053da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053dc:	e008      	b.n	80053f0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053de:	f7fe fb31 	bl	8003a44 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e1cb      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80053f0:	f7ff fbff 	bl	8004bf2 <LL_RCC_LSI1_IsReady>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f1      	beq.n	80053de <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80053fa:	f7ff fc1d 	bl	8004c38 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80053fe:	e00c      	b.n	800541a <HAL_RCC_OscConfig+0x3a2>
 8005400:	20000034 	.word	0x20000034
 8005404:	20000038 	.word	0x20000038
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005408:	f7fe fb1c 	bl	8003a44 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e1b6      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800541a:	f7ff fc1e 	bl	8004c5a <LL_RCC_LSI2_IsReady>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1f1      	bne.n	8005408 <HAL_RCC_OscConfig+0x390>
 8005424:	e027      	b.n	8005476 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005426:	f7ff fc07 	bl	8004c38 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542a:	f7fe fb0b 	bl	8003a44 <HAL_GetTick>
 800542e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005430:	e008      	b.n	8005444 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005432:	f7fe fb07 	bl	8003a44 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b03      	cmp	r3, #3
 800543e:	d901      	bls.n	8005444 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005440:	2303      	movs	r3, #3
 8005442:	e1a1      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005444:	f7ff fc09 	bl	8004c5a <LL_RCC_LSI2_IsReady>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f1      	bne.n	8005432 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800544e:	f7ff fbbf 	bl	8004bd0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fe faf7 	bl	8003a44 <HAL_GetTick>
 8005456:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800545a:	f7fe faf3 	bl	8003a44 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e18d      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800546c:	f7ff fbc1 	bl	8004bf2 <LL_RCC_LSI1_IsReady>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f1      	bne.n	800545a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d05b      	beq.n	800553a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005482:	4bb5      	ldr	r3, [pc, #724]	; (8005758 <HAL_RCC_OscConfig+0x6e0>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d114      	bne.n	80054b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800548e:	f7ff fa5f 	bl	8004950 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005492:	f7fe fad7 	bl	8003a44 <HAL_GetTick>
 8005496:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800549a:	f7fe fad3 	bl	8003a44 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e16d      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ac:	4baa      	ldr	r3, [pc, #680]	; (8005758 <HAL_RCC_OscConfig+0x6e0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0f0      	beq.n	800549a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d102      	bne.n	80054c6 <HAL_RCC_OscConfig+0x44e>
 80054c0:	f7ff fb1f 	bl	8004b02 <LL_RCC_LSE_Enable>
 80054c4:	e00c      	b.n	80054e0 <HAL_RCC_OscConfig+0x468>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	2b05      	cmp	r3, #5
 80054cc:	d104      	bne.n	80054d8 <HAL_RCC_OscConfig+0x460>
 80054ce:	f7ff fb3a 	bl	8004b46 <LL_RCC_LSE_EnableBypass>
 80054d2:	f7ff fb16 	bl	8004b02 <LL_RCC_LSE_Enable>
 80054d6:	e003      	b.n	80054e0 <HAL_RCC_OscConfig+0x468>
 80054d8:	f7ff fb24 	bl	8004b24 <LL_RCC_LSE_Disable>
 80054dc:	f7ff fb44 	bl	8004b68 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d014      	beq.n	8005512 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fe faac 	bl	8003a44 <HAL_GetTick>
 80054ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80054ee:	e00a      	b.n	8005506 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f0:	f7fe faa8 	bl	8003a44 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e140      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005506:	f7ff fb40 	bl	8004b8a <LL_RCC_LSE_IsReady>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0ef      	beq.n	80054f0 <HAL_RCC_OscConfig+0x478>
 8005510:	e013      	b.n	800553a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005512:	f7fe fa97 	bl	8003a44 <HAL_GetTick>
 8005516:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005518:	e00a      	b.n	8005530 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800551a:	f7fe fa93 	bl	8003a44 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f241 3288 	movw	r2, #5000	; 0x1388
 8005528:	4293      	cmp	r3, r2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e12b      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005530:	f7ff fb2b 	bl	8004b8a <LL_RCC_LSE_IsReady>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1ef      	bne.n	800551a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d02c      	beq.n	80055a0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	2b00      	cmp	r3, #0
 800554c:	d014      	beq.n	8005578 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800554e:	f7ff faa4 	bl	8004a9a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fe fa77 	bl	8003a44 <HAL_GetTick>
 8005556:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800555a:	f7fe fa73 	bl	8003a44 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e10d      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800556c:	f7ff fab7 	bl	8004ade <LL_RCC_HSI48_IsReady>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0f1      	beq.n	800555a <HAL_RCC_OscConfig+0x4e2>
 8005576:	e013      	b.n	80055a0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005578:	f7ff faa0 	bl	8004abc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fe fa62 	bl	8003a44 <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005584:	f7fe fa5e 	bl	8003a44 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e0f8      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005596:	f7ff faa2 	bl	8004ade <LL_RCC_HSI48_IsReady>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1f1      	bne.n	8005584 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80ee 	beq.w	8005786 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055aa:	f7ff fc00 	bl	8004dae <LL_RCC_GetSysClkSource>
 80055ae:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055bc:	2b02      	cmp	r3, #2
 80055be:	f040 80af 	bne.w	8005720 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0203 	and.w	r2, r3, #3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d123      	bne.n	8005618 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055da:	429a      	cmp	r2, r3
 80055dc:	d11c      	bne.n	8005618 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	0a1b      	lsrs	r3, r3, #8
 80055e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d114      	bne.n	8005618 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d10d      	bne.n	8005618 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005606:	429a      	cmp	r2, r3
 8005608:	d106      	bne.n	8005618 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d05d      	beq.n	80056d4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b0c      	cmp	r3, #12
 800561c:	d058      	beq.n	80056d0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800561e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e0ab      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005630:	f7ff fc73 	bl	8004f1a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005634:	f7fe fa06 	bl	8003a44 <HAL_GetTick>
 8005638:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800563c:	f7fe fa02 	bl	8003a44 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e09c      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800564e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1ef      	bne.n	800563c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	4b3e      	ldr	r3, [pc, #248]	; (800575c <HAL_RCC_OscConfig+0x6e4>)
 8005664:	4013      	ands	r3, r2
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800566e:	4311      	orrs	r1, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005674:	0212      	lsls	r2, r2, #8
 8005676:	4311      	orrs	r1, r2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800567c:	4311      	orrs	r1, r2
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005682:	4311      	orrs	r1, r2
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005688:	430a      	orrs	r2, r1
 800568a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800568e:	4313      	orrs	r3, r2
 8005690:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005692:	f7ff fc33 	bl	8004efc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056a4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056a6:	f7fe f9cd 	bl	8003a44 <HAL_GetTick>
 80056aa:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ae:	f7fe f9c9 	bl	8003a44 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e063      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0ef      	beq.n	80056ae <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ce:	e05a      	b.n	8005786 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e059      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d151      	bne.n	8005786 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80056e2:	f7ff fc0b 	bl	8004efc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80056e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80056f6:	f7fe f9a5 	bl	8003a44 <HAL_GetTick>
 80056fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056fc:	e008      	b.n	8005710 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056fe:	f7fe f9a1 	bl	8003a44 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	2b02      	cmp	r3, #2
 800570a:	d901      	bls.n	8005710 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e03b      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0ef      	beq.n	80056fe <HAL_RCC_OscConfig+0x686>
 800571e:	e032      	b.n	8005786 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	2b0c      	cmp	r3, #12
 8005724:	d02d      	beq.n	8005782 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005726:	f7ff fbf8 	bl	8004f1a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005734:	f023 0303 	bic.w	r3, r3, #3
 8005738:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800573a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005744:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800574c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800574e:	f7fe f979 	bl	8003a44 <HAL_GetTick>
 8005752:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005754:	e00d      	b.n	8005772 <HAL_RCC_OscConfig+0x6fa>
 8005756:	bf00      	nop
 8005758:	58000400 	.word	0x58000400
 800575c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005760:	f7fe f970 	bl	8003a44 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e00a      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ef      	bne.n	8005760 <HAL_RCC_OscConfig+0x6e8>
 8005780:	e001      	b.n	8005786 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3734      	adds	r7, #52	; 0x34
 800578c:	46bd      	mov	sp, r7
 800578e:	bd90      	pop	{r4, r7, pc}

08005790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e12d      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057a4:	4b98      	ldr	r3, [pc, #608]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 0307 	and.w	r3, r3, #7
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d91b      	bls.n	80057ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b2:	4b95      	ldr	r3, [pc, #596]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f023 0207 	bic.w	r2, r3, #7
 80057ba:	4993      	ldr	r1, [pc, #588]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	4313      	orrs	r3, r2
 80057c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c2:	f7fe f93f 	bl	8003a44 <HAL_GetTick>
 80057c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c8:	e008      	b.n	80057dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057ca:	f7fe f93b 	bl	8003a44 <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e111      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057dc:	4b8a      	ldr	r3, [pc, #552]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0307 	and.w	r3, r3, #7
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d1ef      	bne.n	80057ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d016      	beq.n	8005824 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff fae3 	bl	8004dc6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005800:	f7fe f920 	bl	8003a44 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005806:	e008      	b.n	800581a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005808:	f7fe f91c 	bl	8003a44 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e0f2      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800581a:	f7ff fbd0 	bl	8004fbe <LL_RCC_IsActiveFlag_HPRE>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f1      	beq.n	8005808 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	d016      	beq.n	800585e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fada 	bl	8004dee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800583a:	f7fe f903 	bl	8003a44 <HAL_GetTick>
 800583e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005840:	e008      	b.n	8005854 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005842:	f7fe f8ff 	bl	8003a44 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e0d5      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005854:	f7ff fbc5 	bl	8004fe2 <LL_RCC_IsActiveFlag_C2HPRE>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0f1      	beq.n	8005842 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005866:	2b00      	cmp	r3, #0
 8005868:	d016      	beq.n	8005898 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff fad3 	bl	8004e1a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005874:	f7fe f8e6 	bl	8003a44 <HAL_GetTick>
 8005878:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800587a:	e008      	b.n	800588e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800587c:	f7fe f8e2 	bl	8003a44 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e0b8      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800588e:	f7ff fbbb 	bl	8005008 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f1      	beq.n	800587c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d016      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff facd 	bl	8004e48 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058ae:	f7fe f8c9 	bl	8003a44 <HAL_GetTick>
 80058b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80058b4:	e008      	b.n	80058c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058b6:	f7fe f8c5 	bl	8003a44 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d901      	bls.n	80058c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e09b      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80058c8:	f7ff fbb1 	bl	800502e <LL_RCC_IsActiveFlag_PPRE1>
 80058cc:	4603      	mov	r3, r0
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0f1      	beq.n	80058b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d017      	beq.n	800590e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fac3 	bl	8004e70 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80058ea:	f7fe f8ab 	bl	8003a44 <HAL_GetTick>
 80058ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80058f2:	f7fe f8a7 	bl	8003a44 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e07d      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005904:	f7ff fba5 	bl	8005052 <LL_RCC_IsActiveFlag_PPRE2>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f1      	beq.n	80058f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d043      	beq.n	80059a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d106      	bne.n	8005930 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005922:	f7ff f863 	bl	80049ec <LL_RCC_HSE_IsReady>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d11e      	bne.n	800596a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e067      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b03      	cmp	r3, #3
 8005936:	d106      	bne.n	8005946 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005938:	f7ff fafe 	bl	8004f38 <LL_RCC_PLL_IsReady>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d113      	bne.n	800596a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e05c      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800594e:	f7ff f9cb 	bl	8004ce8 <LL_RCC_MSI_IsReady>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d108      	bne.n	800596a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e051      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800595c:	f7ff f876 	bl	8004a4c <LL_RCC_HSI_IsReady>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e04a      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	4618      	mov	r0, r3
 8005970:	f7ff fa09 	bl	8004d86 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005974:	f7fe f866 	bl	8003a44 <HAL_GetTick>
 8005978:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597a:	e00a      	b.n	8005992 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800597c:	f7fe f862 	bl	8003a44 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f241 3288 	movw	r2, #5000	; 0x1388
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e036      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005992:	f7ff fa0c 	bl	8004dae <LL_RCC_GetSysClkSource>
 8005996:	4602      	mov	r2, r0
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	429a      	cmp	r2, r3
 80059a0:	d1ec      	bne.n	800597c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059a2:	4b19      	ldr	r3, [pc, #100]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d21b      	bcs.n	80059e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b0:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f023 0207 	bic.w	r2, r3, #7
 80059b8:	4913      	ldr	r1, [pc, #76]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	4313      	orrs	r3, r2
 80059be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059c0:	f7fe f840 	bl	8003a44 <HAL_GetTick>
 80059c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	e008      	b.n	80059da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059c8:	f7fe f83c 	bl	8003a44 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e012      	b.n	8005a00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_RCC_ClockConfig+0x278>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0307 	and.w	r3, r3, #7
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d1ef      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80059e8:	f000 f87e 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 80059ec:	4603      	mov	r3, r0
 80059ee:	4a07      	ldr	r2, [pc, #28]	; (8005a0c <HAL_RCC_ClockConfig+0x27c>)
 80059f0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80059f2:	f7fe f833 	bl	8003a5c <HAL_GetTickPrio>
 80059f6:	4603      	mov	r3, r0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fd ffd5 	bl	80039a8 <HAL_InitTick>
 80059fe:	4603      	mov	r3, r0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	58004000 	.word	0x58004000
 8005a0c:	20000034 	.word	0x20000034

08005a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a10:	b590      	push	{r4, r7, lr}
 8005a12:	b085      	sub	sp, #20
 8005a14:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a16:	f7ff f9ca 	bl	8004dae <LL_RCC_GetSysClkSource>
 8005a1a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a22:	f7ff f986 	bl	8004d32 <LL_RCC_MSI_GetRange>
 8005a26:	4603      	mov	r3, r0
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	4a2b      	ldr	r2, [pc, #172]	; (8005adc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a34:	60fb      	str	r3, [r7, #12]
 8005a36:	e04b      	b.n	8005ad0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d102      	bne.n	8005a44 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a3e:	4b28      	ldr	r3, [pc, #160]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e045      	b.n	8005ad0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b08      	cmp	r3, #8
 8005a48:	d10a      	bne.n	8005a60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a4a:	f7fe ff9f 	bl	800498c <LL_RCC_HSE_IsEnabledDiv2>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d102      	bne.n	8005a5a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005a54:	4b22      	ldr	r3, [pc, #136]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e03a      	b.n	8005ad0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005a5a:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	e037      	b.n	8005ad0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005a60:	f7ff faa1 	bl	8004fa6 <LL_RCC_PLL_GetMainSource>
 8005a64:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d003      	beq.n	8005a74 <HAL_RCC_GetSysClockFreq+0x64>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d003      	beq.n	8005a7a <HAL_RCC_GetSysClockFreq+0x6a>
 8005a72:	e00d      	b.n	8005a90 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005a74:	4b1a      	ldr	r3, [pc, #104]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a76:	60bb      	str	r3, [r7, #8]
        break;
 8005a78:	e015      	b.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005a7a:	f7fe ff87 	bl	800498c <LL_RCC_HSE_IsEnabledDiv2>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d102      	bne.n	8005a8a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005a84:	4b16      	ldr	r3, [pc, #88]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a86:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005a88:	e00d      	b.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005a8a:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005a8c:	60bb      	str	r3, [r7, #8]
        break;
 8005a8e:	e00a      	b.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a90:	f7ff f94f 	bl	8004d32 <LL_RCC_MSI_GetRange>
 8005a94:	4603      	mov	r3, r0
 8005a96:	091b      	lsrs	r3, r3, #4
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	4a0f      	ldr	r2, [pc, #60]	; (8005adc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa2:	60bb      	str	r3, [r7, #8]
        break;
 8005aa4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005aa6:	f7ff fa59 	bl	8004f5c <LL_RCC_PLL_GetN>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	fb03 f402 	mul.w	r4, r3, r2
 8005ab2:	f7ff fa6c 	bl	8004f8e <LL_RCC_PLL_GetDivider>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	091b      	lsrs	r3, r3, #4
 8005aba:	3301      	adds	r3, #1
 8005abc:	fbb4 f4f3 	udiv	r4, r4, r3
 8005ac0:	f7ff fa59 	bl	8004f76 <LL_RCC_PLL_GetR>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	0f5b      	lsrs	r3, r3, #29
 8005ac8:	3301      	adds	r3, #1
 8005aca:	fbb4 f3f3 	udiv	r3, r4, r3
 8005ace:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd90      	pop	{r4, r7, pc}
 8005ada:	bf00      	nop
 8005adc:	0800c2c4 	.word	0x0800c2c4
 8005ae0:	00f42400 	.word	0x00f42400
 8005ae4:	01e84800 	.word	0x01e84800

08005ae8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ae8:	b598      	push	{r3, r4, r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005aec:	f7ff ff90 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8005af0:	4604      	mov	r4, r0
 8005af2:	f7ff f9d1 	bl	8004e98 <LL_RCC_GetAHBPrescaler>
 8005af6:	4603      	mov	r3, r0
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	4a03      	ldr	r2, [pc, #12]	; (8005b0c <HAL_RCC_GetHCLKFreq+0x24>)
 8005b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	bd98      	pop	{r3, r4, r7, pc}
 8005b0c:	0800c264 	.word	0x0800c264

08005b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b10:	b598      	push	{r3, r4, r7, lr}
 8005b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005b14:	f7ff ffe8 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 8005b18:	4604      	mov	r4, r0
 8005b1a:	f7ff f9d7 	bl	8004ecc <LL_RCC_GetAPB1Prescaler>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	0a1b      	lsrs	r3, r3, #8
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b2c:	f003 031f 	and.w	r3, r3, #31
 8005b30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	bd98      	pop	{r3, r4, r7, pc}
 8005b38:	0800c2a4 	.word	0x0800c2a4

08005b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b3c:	b598      	push	{r3, r4, r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005b40:	f7ff ffd2 	bl	8005ae8 <HAL_RCC_GetHCLKFreq>
 8005b44:	4604      	mov	r4, r0
 8005b46:	f7ff f9cd 	bl	8004ee4 <LL_RCC_GetAPB2Prescaler>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	0adb      	lsrs	r3, r3, #11
 8005b4e:	f003 0307 	and.w	r3, r3, #7
 8005b52:	4a04      	ldr	r2, [pc, #16]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b58:	f003 031f 	and.w	r3, r3, #31
 8005b5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd98      	pop	{r3, r4, r7, pc}
 8005b64:	0800c2a4 	.word	0x0800c2a4

08005b68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2bb0      	cmp	r3, #176	; 0xb0
 8005b74:	d903      	bls.n	8005b7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005b76:	4b15      	ldr	r3, [pc, #84]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b7a:	60fb      	str	r3, [r7, #12]
 8005b7c:	e007      	b.n	8005b8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	4a11      	ldr	r2, [pc, #68]	; (8005bcc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005b88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005b8e:	f7ff f98f 	bl	8004eb0 <LL_RCC_GetAHB4Prescaler>
 8005b92:	4603      	mov	r3, r0
 8005b94:	091b      	lsrs	r3, r3, #4
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	4a0d      	ldr	r2, [pc, #52]	; (8005bd0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4a0a      	ldr	r2, [pc, #40]	; (8005bd4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005bac:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb0:	0c9c      	lsrs	r4, r3, #18
 8005bb2:	f7fe fedd 	bl	8004970 <HAL_PWREx_GetVoltageRange>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4619      	mov	r1, r3
 8005bba:	4620      	mov	r0, r4
 8005bbc:	f000 f80c 	bl	8005bd8 <RCC_SetFlashLatency>
 8005bc0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd90      	pop	{r4, r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	0800c2c4 	.word	0x0800c2c4
 8005bd0:	0800c264 	.word	0x0800c264
 8005bd4:	431bde83 	.word	0x431bde83

08005bd8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005bd8:	b590      	push	{r4, r7, lr}
 8005bda:	b093      	sub	sp, #76	; 0x4c
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005be2:	4b39      	ldr	r3, [pc, #228]	; (8005cc8 <RCC_SetFlashLatency+0xf0>)
 8005be4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005be8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005bee:	4a37      	ldr	r2, [pc, #220]	; (8005ccc <RCC_SetFlashLatency+0xf4>)
 8005bf0:	f107 031c 	add.w	r3, r7, #28
 8005bf4:	ca07      	ldmia	r2, {r0, r1, r2}
 8005bf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005bfa:	4b35      	ldr	r3, [pc, #212]	; (8005cd0 <RCC_SetFlashLatency+0xf8>)
 8005bfc:	f107 040c 	add.w	r4, r7, #12
 8005c00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005c02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005c06:	2300      	movs	r3, #0
 8005c08:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c10:	d11c      	bne.n	8005c4c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	643b      	str	r3, [r7, #64]	; 0x40
 8005c16:	e015      	b.n	8005c44 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c20:	4413      	add	r3, r2
 8005c22:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d808      	bhi.n	8005c3e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c34:	4413      	add	r3, r2
 8005c36:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c3a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005c3c:	e022      	b.n	8005c84 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c40:	3301      	adds	r3, #1
 8005c42:	643b      	str	r3, [r7, #64]	; 0x40
 8005c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d9e6      	bls.n	8005c18 <RCC_SetFlashLatency+0x40>
 8005c4a:	e01b      	b.n	8005c84 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c50:	e015      	b.n	8005c7e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d808      	bhi.n	8005c78 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005c6e:	4413      	add	r3, r2
 8005c70:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005c74:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005c76:	e005      	b.n	8005c84 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d9e6      	bls.n	8005c52 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <RCC_SetFlashLatency+0xfc>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f023 0207 	bic.w	r2, r3, #7
 8005c8c:	4911      	ldr	r1, [pc, #68]	; (8005cd4 <RCC_SetFlashLatency+0xfc>)
 8005c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c90:	4313      	orrs	r3, r2
 8005c92:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c94:	f7fd fed6 	bl	8003a44 <HAL_GetTick>
 8005c98:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c9a:	e008      	b.n	8005cae <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c9c:	f7fd fed2 	bl	8003a44 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e007      	b.n	8005cbe <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005cae:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <RCC_SetFlashLatency+0xfc>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d1ef      	bne.n	8005c9c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	374c      	adds	r7, #76	; 0x4c
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd90      	pop	{r4, r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	0800c0bc 	.word	0x0800c0bc
 8005ccc:	0800c0cc 	.word	0x0800c0cc
 8005cd0:	0800c0d8 	.word	0x0800c0d8
 8005cd4:	58004000 	.word	0x58004000

08005cd8 <LL_RCC_LSE_IsEnabled>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <LL_RCC_LSE_IsEnabled+0x18>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <LL_RCC_LSE_IsEnabled+0x1a>
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <LL_RCC_LSE_IsReady>:
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d101      	bne.n	8005d14 <LL_RCC_LSE_IsReady+0x18>
 8005d10:	2301      	movs	r3, #1
 8005d12:	e000      	b.n	8005d16 <LL_RCC_LSE_IsReady+0x1a>
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <LL_RCC_SetRFWKPClockSource>:
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <LL_RCC_SetSMPSClockSource>:
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <LL_RCC_SetSMPSPrescaler>:
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_SetUSARTClockSource>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f023 0203 	bic.w	r2, r3, #3
 8005db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <LL_RCC_SetLPUARTClockSource>:
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ddc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <LL_RCC_SetI2CClockSource>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e00:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	091b      	lsrs	r3, r3, #4
 8005e08:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	401a      	ands	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005e18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e22:	bf00      	nop
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <LL_RCC_SetLPTIMClockSource>:
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	0c1b      	lsrs	r3, r3, #16
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	43db      	mvns	r3, r3
 8005e46:	401a      	ands	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	041b      	lsls	r3, r3, #16
 8005e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <LL_RCC_SetSAIClockSource>:
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <LL_RCC_SetRNGClockSource>:
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005eae:	bf00      	nop
 8005eb0:	370c      	adds	r7, #12
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <LL_RCC_SetCLK48ClockSource>:
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <LL_RCC_SetUSBClockSource>:
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b082      	sub	sp, #8
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff ffe3 	bl	8005eba <LL_RCC_SetCLK48ClockSource>
}
 8005ef4:	bf00      	nop
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <LL_RCC_SetADCClockSource>:
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <LL_RCC_SetRTCClockSource>:
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <LL_RCC_GetRTCClockSource>:
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <LL_RCC_ForceBackupDomainReset>:
{
 8005f6e:	b480      	push	{r7}
 8005f70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005fa8:	bf00      	nop
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_RCC_PLLSAI1_Enable>:
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fc4:	6013      	str	r3, [r2, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <LL_RCC_PLLSAI1_Disable>:
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fe2:	6013      	str	r3, [r2, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <LL_RCC_PLLSAI1_IsReady>:
{
 8005fee:	b480      	push	{r7}
 8005ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006000:	d101      	bne.n	8006006 <LL_RCC_PLLSAI1_IsReady+0x18>
 8006002:	2301      	movs	r3, #1
 8006004:	e000      	b.n	8006008 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b088      	sub	sp, #32
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800601a:	2300      	movs	r3, #0
 800601c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800601e:	2300      	movs	r3, #0
 8006020:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602a:	2b00      	cmp	r3, #0
 800602c:	d034      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006032:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006036:	d021      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006038:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800603c:	d81b      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800603e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006042:	d01d      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006044:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006048:	d815      	bhi.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00b      	beq.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800604e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006052:	d110      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800605e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006062:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006064:	e00d      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3304      	adds	r3, #4
 800606a:	4618      	mov	r0, r3
 800606c:	f000 f947 	bl	80062fe <RCCEx_PLLSAI1_ConfigNP>
 8006070:	4603      	mov	r3, r0
 8006072:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006074:	e005      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	77fb      	strb	r3, [r7, #31]
        break;
 800607a:	e002      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006082:	7ffb      	ldrb	r3, [r7, #31]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fee8 	bl	8005e62 <LL_RCC_SetSAIClockSource>
 8006092:	e001      	b.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006094:	7ffb      	ldrb	r3, [r7, #31]
 8006096:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d046      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80060a4:	f7ff ff56 	bl	8005f54 <LL_RCC_GetRTCClockSource>
 80060a8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d03c      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80060b4:	f7fe fc4c 	bl	8004950 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff ff30 	bl	8005f28 <LL_RCC_SetRTCClockSource>
 80060c8:	e02e      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80060ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80060d4:	f7ff ff4b 	bl	8005f6e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80060d8:	f7ff ff5a 	bl	8005f90 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80060ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80060f4:	f7ff fdf0 	bl	8005cd8 <LL_RCC_LSE_IsEnabled>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d114      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060fe:	f7fd fca1 	bl	8003a44 <HAL_GetTick>
 8006102:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006104:	e00b      	b.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006106:	f7fd fc9d 	bl	8003a44 <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	f241 3288 	movw	r2, #5000	; 0x1388
 8006114:	4293      	cmp	r3, r2
 8006116:	d902      	bls.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	77fb      	strb	r3, [r7, #31]
              break;
 800611c:	e004      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800611e:	f7ff fded 	bl	8005cfc <LL_RCC_LSE_IsReady>
 8006122:	4603      	mov	r3, r0
 8006124:	2b01      	cmp	r3, #1
 8006126:	d1ee      	bne.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006128:	7ffb      	ldrb	r3, [r7, #31]
 800612a:	77bb      	strb	r3, [r7, #30]
 800612c:	e001      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612e:	7ffb      	ldrb	r3, [r7, #31]
 8006130:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d004      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	4618      	mov	r0, r3
 8006144:	f7ff fe2a 	bl	8005d9c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d004      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fe35 	bl	8005dc8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 0310 	and.w	r3, r3, #16
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff fe5d 	bl	8005e2e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d004      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	4618      	mov	r0, r3
 8006186:	f7ff fe52 	bl	8005e2e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0304 	and.w	r3, r3, #4
 8006192:	2b00      	cmp	r3, #0
 8006194:	d004      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4618      	mov	r0, r3
 800619c:	f7ff fe2a 	bl	8005df4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d004      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fe1f 	bl	8005df4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d022      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7ff fe8d 	bl	8005ee6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061d4:	d107      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80061d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061e4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061ee:	d10b      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 f8dd 	bl	80063b4 <RCCEx_PLLSAI1_ConfigNQ>
 80061fa:	4603      	mov	r3, r0
 80061fc:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80061fe:	7ffb      	ldrb	r3, [r7, #31]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8006204:	7ffb      	ldrb	r3, [r7, #31]
 8006206:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006210:	2b00      	cmp	r3, #0
 8006212:	d02b      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800621c:	d008      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006226:	d003      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	d105      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff fe2a 	bl	8005e8e <LL_RCC_SetRNGClockSource>
 800623a:	e00a      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	2000      	movs	r0, #0
 8006248:	f7ff fe21 	bl	8005e8e <LL_RCC_SetRNGClockSource>
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fe34 	bl	8005eba <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800625a:	d107      	bne.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800625c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800626a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006274:	2b00      	cmp	r3, #0
 8006276:	d022      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fe3d 	bl	8005efc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800628a:	d107      	bne.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800628c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062a4:	d10b      	bne.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	3304      	adds	r3, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f8dd 	bl	800646a <RCCEx_PLLSAI1_ConfigNR>
 80062b0:	4603      	mov	r3, r0
 80062b2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80062b4:	7ffb      	ldrb	r3, [r7, #31]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 80062ba:	7ffb      	ldrb	r3, [r7, #31]
 80062bc:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff fd26 	bl	8005d20 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d009      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7ff fd45 	bl	8005d74 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fd2c 	bl	8005d4c <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80062f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3720      	adds	r7, #32
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006306:	2300      	movs	r3, #0
 8006308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800630a:	f7ff fe61 	bl	8005fd0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800630e:	f7fd fb99 	bl	8003a44 <HAL_GetTick>
 8006312:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006314:	e009      	b.n	800632a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006316:	f7fd fb95 	bl	8003a44 <HAL_GetTick>
 800631a:	4602      	mov	r2, r0
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	2b02      	cmp	r3, #2
 8006322:	d902      	bls.n	800632a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	73fb      	strb	r3, [r7, #15]
      break;
 8006328:	e004      	b.n	8006334 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800632a:	f7ff fe60 	bl	8005fee <LL_RCC_PLLSAI1_IsReady>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1f0      	bne.n	8006316 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d137      	bne.n	80063aa <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800633a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800634e:	4313      	orrs	r3, r2
 8006350:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8006352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006364:	4313      	orrs	r3, r2
 8006366:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006368:	f7ff fe23 	bl	8005fb2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800636c:	f7fd fb6a 	bl	8003a44 <HAL_GetTick>
 8006370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006372:	e009      	b.n	8006388 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006374:	f7fd fb66 	bl	8003a44 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d902      	bls.n	8006388 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	73fb      	strb	r3, [r7, #15]
        break;
 8006386:	e004      	b.n	8006392 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006388:	f7ff fe31 	bl	8005fee <LL_RCC_PLLSAI1_IsReady>
 800638c:	4603      	mov	r3, r0
 800638e:	2b01      	cmp	r3, #1
 8006390:	d1f0      	bne.n	8006374 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d108      	bne.n	80063aa <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639c:	691a      	ldr	r2, [r3, #16]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063a6:	4313      	orrs	r3, r2
 80063a8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80063c0:	f7ff fe06 	bl	8005fd0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80063c4:	f7fd fb3e 	bl	8003a44 <HAL_GetTick>
 80063c8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80063ca:	e009      	b.n	80063e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063cc:	f7fd fb3a 	bl	8003a44 <HAL_GetTick>
 80063d0:	4602      	mov	r2, r0
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d902      	bls.n	80063e0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	73fb      	strb	r3, [r7, #15]
      break;
 80063de:	e004      	b.n	80063ea <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80063e0:	f7ff fe05 	bl	8005fee <LL_RCC_PLLSAI1_IsReady>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1f0      	bne.n	80063cc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d137      	bne.n	8006460 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80063f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	021b      	lsls	r3, r3, #8
 8006400:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006404:	4313      	orrs	r3, r2
 8006406:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800641a:	4313      	orrs	r3, r2
 800641c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800641e:	f7ff fdc8 	bl	8005fb2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006422:	f7fd fb0f 	bl	8003a44 <HAL_GetTick>
 8006426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006428:	e009      	b.n	800643e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800642a:	f7fd fb0b 	bl	8003a44 <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d902      	bls.n	800643e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	73fb      	strb	r3, [r7, #15]
        break;
 800643c:	e004      	b.n	8006448 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800643e:	f7ff fdd6 	bl	8005fee <LL_RCC_PLLSAI1_IsReady>
 8006442:	4603      	mov	r3, r0
 8006444:	2b01      	cmp	r3, #1
 8006446:	d1f0      	bne.n	800642a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d108      	bne.n	8006460 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800644e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006452:	691a      	ldr	r2, [r3, #16]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800645c:	4313      	orrs	r3, r2
 800645e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b084      	sub	sp, #16
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006476:	f7ff fdab 	bl	8005fd0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800647a:	f7fd fae3 	bl	8003a44 <HAL_GetTick>
 800647e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006480:	e009      	b.n	8006496 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006482:	f7fd fadf 	bl	8003a44 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	2b02      	cmp	r3, #2
 800648e:	d902      	bls.n	8006496 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	73fb      	strb	r3, [r7, #15]
      break;
 8006494:	e004      	b.n	80064a0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006496:	f7ff fdaa 	bl	8005fee <LL_RCC_PLLSAI1_IsReady>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1f0      	bne.n	8006482 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d137      	bne.n	8006516 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80064a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ba:	4313      	orrs	r3, r2
 80064bc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80064be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064d0:	4313      	orrs	r3, r2
 80064d2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80064d4:	f7ff fd6d 	bl	8005fb2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d8:	f7fd fab4 	bl	8003a44 <HAL_GetTick>
 80064dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064de:	e009      	b.n	80064f4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064e0:	f7fd fab0 	bl	8003a44 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d902      	bls.n	80064f4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	73fb      	strb	r3, [r7, #15]
        break;
 80064f2:	e004      	b.n	80064fe <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80064f4:	f7ff fd7b 	bl	8005fee <LL_RCC_PLLSAI1_IsReady>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d1f0      	bne.n	80064e0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d108      	bne.n	8006516 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006512:	4313      	orrs	r3, r2
 8006514:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e090      	b.n	8006654 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d106      	bne.n	800654c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f7fb feb2 	bl	80022b0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	22ca      	movs	r2, #202	; 0xca
 800655a:	625a      	str	r2, [r3, #36]	; 0x24
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2253      	movs	r2, #83	; 0x53
 8006562:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f89f 	bl	80066a8 <RTC_EnterInitMode>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d009      	beq.n	8006584 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	22ff      	movs	r2, #255	; 0xff
 8006576:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2204      	movs	r2, #4
 800657c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e067      	b.n	8006654 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006596:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6899      	ldr	r1, [r3, #8]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	431a      	orrs	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699b      	ldr	r3, [r3, #24]
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	68d2      	ldr	r2, [r2, #12]
 80065be:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6919      	ldr	r1, [r3, #16]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	041a      	lsls	r2, r3, #16
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f022 0203 	bic.w	r2, r2, #3
 80065f2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69da      	ldr	r2, [r3, #28]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d113      	bne.n	8006642 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f81e 	bl	800665c <HAL_RTC_WaitForSynchro>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00d      	beq.n	8006642 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	22ff      	movs	r2, #255	; 0xff
 800662c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2204      	movs	r2, #4
 8006632:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e008      	b.n	8006654 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	22ff      	movs	r2, #255	; 0xff
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006652:	2300      	movs	r3, #0
  }
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006672:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006674:	f7fd f9e6 	bl	8003a44 <HAL_GetTick>
 8006678:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800667a:	e009      	b.n	8006690 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800667c:	f7fd f9e2 	bl	8003a44 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800668a:	d901      	bls.n	8006690 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e007      	b.n	80066a0 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	f003 0320 	and.w	r3, r3, #32
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0ee      	beq.n	800667c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d119      	bne.n	80066f2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f04f 32ff 	mov.w	r2, #4294967295
 80066c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066c8:	f7fd f9bc 	bl	8003a44 <HAL_GetTick>
 80066cc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066ce:	e009      	b.n	80066e4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80066d0:	f7fd f9b8 	bl	8003a44 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066de:	d901      	bls.n	80066e4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e007      	b.n	80066f4 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0ee      	beq.n	80066d0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_RTCEx_EnableBypassShadow+0x16>
 800670e:	2302      	movs	r3, #2
 8006710:	e024      	b.n	800675c <HAL_RTCEx_EnableBypassShadow+0x60>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	22ca      	movs	r2, #202	; 0xca
 8006728:	625a      	str	r2, [r3, #36]	; 0x24
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2253      	movs	r2, #83	; 0x53
 8006730:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	689a      	ldr	r2, [r3, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0220 	orr.w	r2, r2, #32
 8006740:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	22ff      	movs	r2, #255	; 0xff
 8006748:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <LL_RCC_GetUSARTClockSource>:
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8006770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006774:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4013      	ands	r3, r2
}
 800677c:	4618      	mov	r0, r3
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <LL_RCC_GetLPUARTClockSource>:
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8006790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006794:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4013      	ands	r3, r2
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e042      	b.n	8006840 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fb fc9f 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2224      	movs	r2, #36	; 0x24
 80067d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 0201 	bic.w	r2, r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fb00 	bl	8006df0 <UART_SetConfig>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e022      	b.n	8006840 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fcfa 	bl	80071fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685a      	ldr	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006816:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006826:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0201 	orr.w	r2, r2, #1
 8006836:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fd81 	bl	8007340 <UART_CheckIdleState>
 800683e:	4603      	mov	r3, r0
}
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800685c:	2b20      	cmp	r3, #32
 800685e:	d168      	bne.n	8006932 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <HAL_UART_Transmit_DMA+0x24>
 8006866:	88fb      	ldrh	r3, [r7, #6]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e061      	b.n	8006934 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_UART_Transmit_DMA+0x36>
 800687a:	2302      	movs	r3, #2
 800687c:	e05a      	b.n	8006934 <HAL_UART_Transmit_DMA+0xec>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	88fa      	ldrh	r2, [r7, #6]
 8006898:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2221      	movs	r2, #33	; 0x21
 80068a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d02c      	beq.n	800690e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <HAL_UART_Transmit_DMA+0xf4>)
 80068ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c0:	4a1f      	ldr	r2, [pc, #124]	; (8006940 <HAL_UART_Transmit_DMA+0xf8>)
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c8:	4a1e      	ldr	r2, [pc, #120]	; (8006944 <HAL_UART_Transmit_DMA+0xfc>)
 80068ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068d0:	2200      	movs	r2, #0
 80068d2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068dc:	4619      	mov	r1, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3328      	adds	r3, #40	; 0x28
 80068e4:	461a      	mov	r2, r3
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	f7fd fb1e 	bl	8003f28 <HAL_DMA_Start_IT>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00d      	beq.n	800690e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2210      	movs	r2, #16
 80068f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e012      	b.n	8006934 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2240      	movs	r2, #64	; 0x40
 8006914:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800692c:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	e000      	b.n	8006934 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 8006932:	2302      	movs	r3, #2
  }
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	08007577 	.word	0x08007577
 8006940:	080075cb 	.word	0x080075cb
 8006944:	080075e7 	.word	0x080075e7

08006948 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	f640 030f 	movw	r3, #2063	; 0x80f
 800696e:	4013      	ands	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d118      	bne.n	80069aa <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d013      	beq.n	80069aa <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 81fb 	beq.w	8006d96 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	4798      	blx	r3
      }
      return;
 80069a8:	e1f5      	b.n	8006d96 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 80ef 	beq.w	8006b90 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4b73      	ldr	r3, [pc, #460]	; (8006b84 <HAL_UART_IRQHandler+0x23c>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4b72      	ldr	r3, [pc, #456]	; (8006b88 <HAL_UART_IRQHandler+0x240>)
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f000 80e4 	beq.w	8006b90 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d010      	beq.n	80069f4 <HAL_UART_IRQHandler+0xac>
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00b      	beq.n	80069f4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ea:	f043 0201 	orr.w	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d010      	beq.n	8006a20 <HAL_UART_IRQHandler+0xd8>
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a16:	f043 0204 	orr.w	r2, r3, #4
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d010      	beq.n	8006a4c <HAL_UART_IRQHandler+0x104>
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f003 0301 	and.w	r3, r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00b      	beq.n	8006a4c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2204      	movs	r2, #4
 8006a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a42:	f043 0202 	orr.w	r2, r3, #2
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d015      	beq.n	8006a82 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	f003 0320 	and.w	r3, r3, #32
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d104      	bne.n	8006a6a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4b48      	ldr	r3, [pc, #288]	; (8006b84 <HAL_UART_IRQHandler+0x23c>)
 8006a64:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2208      	movs	r2, #8
 8006a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a78:	f043 0208 	orr.w	r2, r3, #8
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d011      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x168>
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00c      	beq.n	8006ab0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa6:	f043 0220 	orr.w	r2, r3, #32
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f000 816f 	beq.w	8006d9a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d011      	beq.n	8006aea <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d007      	beq.n	8006aea <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afc:	2b40      	cmp	r3, #64	; 0x40
 8006afe:	d004      	beq.n	8006b0a <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d031      	beq.n	8006b6e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fd01 	bl	8007512 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d123      	bne.n	8006b66 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d013      	beq.n	8006b5e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b3a:	4a14      	ldr	r2, [pc, #80]	; (8006b8c <HAL_UART_IRQHandler+0x244>)
 8006b3c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fd faca 	bl	80040dc <HAL_DMA_Abort_IT>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d017      	beq.n	8006b7e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006b58:	4610      	mov	r0, r2
 8006b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5c:	e00f      	b.n	8006b7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f930 	bl	8006dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b64:	e00b      	b.n	8006b7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f92c 	bl	8006dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b6c:	e007      	b.n	8006b7e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 f928 	bl	8006dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006b7c:	e10d      	b.n	8006d9a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b7e:	bf00      	nop
    return;
 8006b80:	e10b      	b.n	8006d9a <HAL_UART_IRQHandler+0x452>
 8006b82:	bf00      	nop
 8006b84:	10000001 	.word	0x10000001
 8006b88:	04000120 	.word	0x04000120
 8006b8c:	08007667 	.word	0x08007667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	f040 80ab 	bne.w	8006cf0 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f003 0310 	and.w	r3, r3, #16
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	f000 80a5 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	f003 0310 	and.w	r3, r3, #16
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 809f 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2210      	movs	r2, #16
 8006bb8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b40      	cmp	r3, #64	; 0x40
 8006bc6:	d155      	bne.n	8006c74 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006bd2:	893b      	ldrh	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80e2 	beq.w	8006d9e <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006be0:	893a      	ldrh	r2, [r7, #8]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	f080 80db 	bcs.w	8006d9e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	893a      	ldrh	r2, [r7, #8]
 8006bec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d12b      	bne.n	8006c58 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c0e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f022 0201 	bic.w	r2, r2, #1
 8006c1e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0210 	bic.w	r2, r2, #16
 8006c4c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd f9e3 	bl	800401e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f8b3 	bl	8006dd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006c72:	e094      	b.n	8006d9e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 8087 	beq.w	8006da2 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8006c94:	897b      	ldrh	r3, [r7, #10]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8083 	beq.w	8006da2 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006caa:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0210 	bic.w	r2, r2, #16
 8006ce2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ce4:	897b      	ldrh	r3, [r7, #10]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f875 	bl	8006dd8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006cee:	e058      	b.n	8006da2 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d00d      	beq.n	8006d16 <HAL_UART_IRQHandler+0x3ce>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d008      	beq.n	8006d16 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d0c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 fcd9 	bl	80076c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d14:	e048      	b.n	8006da8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d012      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d104      	bne.n	8006d34 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d034      	beq.n	8006da6 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
    }
    return;
 8006d44:	e02f      	b.n	8006da6 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d008      	beq.n	8006d62 <HAL_UART_IRQHandler+0x41a>
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fc99 	bl	8007692 <UART_EndTransmit_IT>
    return;
 8006d60:	e022      	b.n	8006da8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_UART_IRQHandler+0x436>
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fcb9 	bl	80076ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7c:	e014      	b.n	8006da8 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00f      	beq.n	8006da8 <HAL_UART_IRQHandler+0x460>
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	da0c      	bge.n	8006da8 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fca3 	bl	80076da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d94:	e008      	b.n	8006da8 <HAL_UART_IRQHandler+0x460>
      return;
 8006d96:	bf00      	nop
 8006d98:	e006      	b.n	8006da8 <HAL_UART_IRQHandler+0x460>
    return;
 8006d9a:	bf00      	nop
 8006d9c:	e004      	b.n	8006da8 <HAL_UART_IRQHandler+0x460>
      return;
 8006d9e:	bf00      	nop
 8006da0:	e002      	b.n	8006da8 <HAL_UART_IRQHandler+0x460>
      return;
 8006da2:	bf00      	nop
 8006da4:	e000      	b.n	8006da8 <HAL_UART_IRQHandler+0x460>
    return;
 8006da6:	bf00      	nop
  }
}
 8006da8:	3720      	adds	r7, #32
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop

08006db0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df0:	b5b0      	push	{r4, r5, r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4ba3      	ldr	r3, [pc, #652]	; (80070a8 <UART_SetConfig+0x2b8>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	69f9      	ldr	r1, [r7, #28]
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a98      	ldr	r2, [pc, #608]	; (80070ac <UART_SetConfig+0x2bc>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006e62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	69f9      	ldr	r1, [r7, #28]
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	f023 010f 	bic.w	r1, r3, #15
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a89      	ldr	r2, [pc, #548]	; (80070b0 <UART_SetConfig+0x2c0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d120      	bne.n	8006ed2 <UART_SetConfig+0xe2>
 8006e90:	2003      	movs	r0, #3
 8006e92:	f7ff fc69 	bl	8006768 <LL_RCC_GetUSARTClockSource>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b03      	cmp	r3, #3
 8006e9a:	d817      	bhi.n	8006ecc <UART_SetConfig+0xdc>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <UART_SetConfig+0xb4>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006ec1 	.word	0x08006ec1
 8006eac:	08006ebb 	.word	0x08006ebb
 8006eb0:	08006ec7 	.word	0x08006ec7
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	76fb      	strb	r3, [r7, #27]
 8006eb8:	e038      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	76fb      	strb	r3, [r7, #27]
 8006ebe:	e035      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	76fb      	strb	r3, [r7, #27]
 8006ec4:	e032      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006ec6:	2308      	movs	r3, #8
 8006ec8:	76fb      	strb	r3, [r7, #27]
 8006eca:	e02f      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	76fb      	strb	r3, [r7, #27]
 8006ed0:	e02c      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a75      	ldr	r2, [pc, #468]	; (80070ac <UART_SetConfig+0x2bc>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d125      	bne.n	8006f28 <UART_SetConfig+0x138>
 8006edc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006ee0:	f7ff fc52 	bl	8006788 <LL_RCC_GetLPUARTClockSource>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006eea:	d017      	beq.n	8006f1c <UART_SetConfig+0x12c>
 8006eec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ef0:	d817      	bhi.n	8006f22 <UART_SetConfig+0x132>
 8006ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef6:	d00b      	beq.n	8006f10 <UART_SetConfig+0x120>
 8006ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006efc:	d811      	bhi.n	8006f22 <UART_SetConfig+0x132>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <UART_SetConfig+0x11a>
 8006f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f06:	d006      	beq.n	8006f16 <UART_SetConfig+0x126>
 8006f08:	e00b      	b.n	8006f22 <UART_SetConfig+0x132>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	76fb      	strb	r3, [r7, #27]
 8006f0e:	e00d      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006f10:	2302      	movs	r3, #2
 8006f12:	76fb      	strb	r3, [r7, #27]
 8006f14:	e00a      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006f16:	2304      	movs	r3, #4
 8006f18:	76fb      	strb	r3, [r7, #27]
 8006f1a:	e007      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	76fb      	strb	r3, [r7, #27]
 8006f20:	e004      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006f22:	2310      	movs	r3, #16
 8006f24:	76fb      	strb	r3, [r7, #27]
 8006f26:	e001      	b.n	8006f2c <UART_SetConfig+0x13c>
 8006f28:	2310      	movs	r3, #16
 8006f2a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a5e      	ldr	r2, [pc, #376]	; (80070ac <UART_SetConfig+0x2bc>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	f040 808b 	bne.w	800704e <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f38:	7efb      	ldrb	r3, [r7, #27]
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d823      	bhi.n	8006f86 <UART_SetConfig+0x196>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0x154>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f87 	.word	0x08006f87
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f87 	.word	0x08006f87
 8006f54:	08006f77 	.word	0x08006f77
 8006f58:	08006f87 	.word	0x08006f87
 8006f5c:	08006f87 	.word	0x08006f87
 8006f60:	08006f87 	.word	0x08006f87
 8006f64:	08006f7f 	.word	0x08006f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f68:	f7fe fdd2 	bl	8005b10 <HAL_RCC_GetPCLK1Freq>
 8006f6c:	6178      	str	r0, [r7, #20]
        break;
 8006f6e:	e00f      	b.n	8006f90 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f70:	4b50      	ldr	r3, [pc, #320]	; (80070b4 <UART_SetConfig+0x2c4>)
 8006f72:	617b      	str	r3, [r7, #20]
        break;
 8006f74:	e00c      	b.n	8006f90 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f76:	f7fe fd4b 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 8006f7a:	6178      	str	r0, [r7, #20]
        break;
 8006f7c:	e008      	b.n	8006f90 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f82:	617b      	str	r3, [r7, #20]
        break;
 8006f84:	e004      	b.n	8006f90 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	76bb      	strb	r3, [r7, #26]
        break;
 8006f8e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f000 811a 	beq.w	80071cc <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	4a46      	ldr	r2, [pc, #280]	; (80070b8 <UART_SetConfig+0x2c8>)
 8006f9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006faa:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	4413      	add	r3, r2
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d305      	bcc.n	8006fc8 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d902      	bls.n	8006fce <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	76bb      	strb	r3, [r7, #26]
 8006fcc:	e0fe      	b.n	80071cc <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f04f 0100 	mov.w	r1, #0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fda:	4a37      	ldr	r2, [pc, #220]	; (80070b8 <UART_SetConfig+0x2c8>)
 8006fdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	f7f9 f923 	bl	8000230 <__aeabi_uldivmod>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4610      	mov	r0, r2
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	020b      	lsls	r3, r1, #8
 8006ffc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007000:	0202      	lsls	r2, r0, #8
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	6849      	ldr	r1, [r1, #4]
 8007006:	0849      	lsrs	r1, r1, #1
 8007008:	4608      	mov	r0, r1
 800700a:	f04f 0100 	mov.w	r1, #0
 800700e:	1814      	adds	r4, r2, r0
 8007010:	eb43 0501 	adc.w	r5, r3, r1
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	461a      	mov	r2, r3
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 f905 	bl	8000230 <__aeabi_uldivmod>
 8007026:	4602      	mov	r2, r0
 8007028:	460b      	mov	r3, r1
 800702a:	4613      	mov	r3, r2
 800702c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007034:	d308      	bcc.n	8007048 <UART_SetConfig+0x258>
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800703c:	d204      	bcs.n	8007048 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	60da      	str	r2, [r3, #12]
 8007046:	e0c1      	b.n	80071cc <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	76bb      	strb	r3, [r7, #26]
 800704c:	e0be      	b.n	80071cc <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007056:	d16a      	bne.n	800712e <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007058:	7efb      	ldrb	r3, [r7, #27]
 800705a:	3b01      	subs	r3, #1
 800705c:	2b07      	cmp	r3, #7
 800705e:	d82d      	bhi.n	80070bc <UART_SetConfig+0x2cc>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <UART_SetConfig+0x278>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	08007089 	.word	0x08007089
 800706c:	08007091 	.word	0x08007091
 8007070:	080070bd 	.word	0x080070bd
 8007074:	08007097 	.word	0x08007097
 8007078:	080070bd 	.word	0x080070bd
 800707c:	080070bd 	.word	0x080070bd
 8007080:	080070bd 	.word	0x080070bd
 8007084:	0800709f 	.word	0x0800709f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007088:	f7fe fd58 	bl	8005b3c <HAL_RCC_GetPCLK2Freq>
 800708c:	6178      	str	r0, [r7, #20]
        break;
 800708e:	e01a      	b.n	80070c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007090:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <UART_SetConfig+0x2c4>)
 8007092:	617b      	str	r3, [r7, #20]
        break;
 8007094:	e017      	b.n	80070c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007096:	f7fe fcbb 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 800709a:	6178      	str	r0, [r7, #20]
        break;
 800709c:	e013      	b.n	80070c6 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800709e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a2:	617b      	str	r3, [r7, #20]
        break;
 80070a4:	e00f      	b.n	80070c6 <UART_SetConfig+0x2d6>
 80070a6:	bf00      	nop
 80070a8:	cfff69f3 	.word	0xcfff69f3
 80070ac:	40008000 	.word	0x40008000
 80070b0:	40013800 	.word	0x40013800
 80070b4:	00f42400 	.word	0x00f42400
 80070b8:	0800c304 	.word	0x0800c304
      default:
        pclk = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	76bb      	strb	r3, [r7, #26]
        break;
 80070c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d07f      	beq.n	80071cc <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	4a48      	ldr	r2, [pc, #288]	; (80071f4 <UART_SetConfig+0x404>)
 80070d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070d6:	461a      	mov	r2, r3
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	fbb3 f3f2 	udiv	r3, r3, r2
 80070de:	005a      	lsls	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	085b      	lsrs	r3, r3, #1
 80070e6:	441a      	add	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	d916      	bls.n	8007128 <UART_SetConfig+0x338>
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007100:	d212      	bcs.n	8007128 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	b29b      	uxth	r3, r3
 8007106:	f023 030f 	bic.w	r3, r3, #15
 800710a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	b29b      	uxth	r3, r3
 8007112:	f003 0307 	and.w	r3, r3, #7
 8007116:	b29a      	uxth	r2, r3
 8007118:	89fb      	ldrh	r3, [r7, #14]
 800711a:	4313      	orrs	r3, r2
 800711c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	89fa      	ldrh	r2, [r7, #14]
 8007124:	60da      	str	r2, [r3, #12]
 8007126:	e051      	b.n	80071cc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	76bb      	strb	r3, [r7, #26]
 800712c:	e04e      	b.n	80071cc <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800712e:	7efb      	ldrb	r3, [r7, #27]
 8007130:	3b01      	subs	r3, #1
 8007132:	2b07      	cmp	r3, #7
 8007134:	d821      	bhi.n	800717a <UART_SetConfig+0x38a>
 8007136:	a201      	add	r2, pc, #4	; (adr r2, 800713c <UART_SetConfig+0x34c>)
 8007138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713c:	0800715d 	.word	0x0800715d
 8007140:	08007165 	.word	0x08007165
 8007144:	0800717b 	.word	0x0800717b
 8007148:	0800716b 	.word	0x0800716b
 800714c:	0800717b 	.word	0x0800717b
 8007150:	0800717b 	.word	0x0800717b
 8007154:	0800717b 	.word	0x0800717b
 8007158:	08007173 	.word	0x08007173
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800715c:	f7fe fcee 	bl	8005b3c <HAL_RCC_GetPCLK2Freq>
 8007160:	6178      	str	r0, [r7, #20]
        break;
 8007162:	e00f      	b.n	8007184 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007164:	4b24      	ldr	r3, [pc, #144]	; (80071f8 <UART_SetConfig+0x408>)
 8007166:	617b      	str	r3, [r7, #20]
        break;
 8007168:	e00c      	b.n	8007184 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800716a:	f7fe fc51 	bl	8005a10 <HAL_RCC_GetSysClockFreq>
 800716e:	6178      	str	r0, [r7, #20]
        break;
 8007170:	e008      	b.n	8007184 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007176:	617b      	str	r3, [r7, #20]
        break;
 8007178:	e004      	b.n	8007184 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	76bb      	strb	r3, [r7, #26]
        break;
 8007182:	bf00      	nop
    }

    if (pclk != 0U)
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d020      	beq.n	80071cc <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718e:	4a19      	ldr	r2, [pc, #100]	; (80071f4 <UART_SetConfig+0x404>)
 8007190:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007194:	461a      	mov	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	fbb3 f2f2 	udiv	r2, r3, r2
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	085b      	lsrs	r3, r3, #1
 80071a2:	441a      	add	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	2b0f      	cmp	r3, #15
 80071b4:	d908      	bls.n	80071c8 <UART_SetConfig+0x3d8>
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071bc:	d204      	bcs.n	80071c8 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	60da      	str	r2, [r3, #12]
 80071c6:	e001      	b.n	80071cc <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80071e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bdb0      	pop	{r4, r5, r7, pc}
 80071f2:	bf00      	nop
 80071f4:	0800c304 	.word	0x0800c304
 80071f8:	00f42400 	.word	0x00f42400

080071fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00a      	beq.n	8007226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00a      	beq.n	8007248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d00a      	beq.n	800726a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	f003 0310 	and.w	r3, r3, #16
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00a      	beq.n	80072ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	f003 0320 	and.w	r3, r3, #32
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01a      	beq.n	8007312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072fa:	d10a      	bne.n	8007312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	430a      	orrs	r2, r1
 8007332:	605a      	str	r2, [r3, #4]
  }
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af02      	add	r7, sp, #8
 8007346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007350:	f7fc fb78 	bl	8003a44 <HAL_GetTick>
 8007354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b08      	cmp	r3, #8
 8007362:	d10e      	bne.n	8007382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f82f 	bl	80073d6 <UART_WaitOnFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e025      	b.n	80073ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b04      	cmp	r3, #4
 800738e:	d10e      	bne.n	80073ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f819 	bl	80073d6 <UART_WaitOnFlagUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d001      	beq.n	80073ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e00f      	b.n	80073ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2220      	movs	r2, #32
 80073b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073e6:	e062      	b.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d05e      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073f0:	f7fc fb28 	bl	8003a44 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d302      	bcc.n	8007406 <UART_WaitOnFlagUntilTimeout+0x30>
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d11d      	bne.n	8007442 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007414:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689a      	ldr	r2, [r3, #8]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0201 	bic.w	r2, r2, #1
 8007424:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2220      	movs	r2, #32
 800742a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e045      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b00      	cmp	r3, #0
 800744e:	d02e      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800745a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800745e:	d126      	bne.n	80074ae <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007468:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007478:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e00f      	b.n	80074ce <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	69da      	ldr	r2, [r3, #28]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4013      	ands	r3, r2
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	bf0c      	ite	eq
 80074be:	2301      	moveq	r3, #1
 80074c0:	2300      	movne	r3, #0
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d08d      	beq.n	80073e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b083      	sub	sp, #12
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80074ec:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80074fc:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007528:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6812      	ldr	r2, [r2, #0]
 8007534:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007538:	f023 0301 	bic.w	r3, r3, #1
 800753c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d107      	bne.n	8007556 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0210 	bic.w	r2, r2, #16
 8007554:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2220      	movs	r2, #32
 800755a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	671a      	str	r2, [r3, #112]	; 0x70
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007582:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0320 	and.w	r3, r3, #32
 800758e:	2b00      	cmp	r3, #0
 8007590:	d114      	bne.n	80075bc <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075a8:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075b8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075ba:	e002      	b.n	80075c2 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f7fa f907 	bl	80017d0 <HAL_UART_TxCpltCallback>
}
 80075c2:	bf00      	nop
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff fbe9 	bl	8006db0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075de:	bf00      	nop
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b086      	sub	sp, #24
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075fa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007602:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760e:	2b80      	cmp	r3, #128	; 0x80
 8007610:	d109      	bne.n	8007626 <UART_DMAError+0x40>
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	2b21      	cmp	r3, #33	; 0x21
 8007616:	d106      	bne.n	8007626 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2200      	movs	r2, #0
 800761c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007620:	6978      	ldr	r0, [r7, #20]
 8007622:	f7ff ff58 	bl	80074d6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007630:	2b40      	cmp	r3, #64	; 0x40
 8007632:	d109      	bne.n	8007648 <UART_DMAError+0x62>
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b22      	cmp	r3, #34	; 0x22
 8007638:	d106      	bne.n	8007648 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2200      	movs	r2, #0
 800763e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007642:	6978      	ldr	r0, [r7, #20]
 8007644:	f7ff ff65 	bl	8007512 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800764e:	f043 0210 	orr.w	r2, r3, #16
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007658:	6978      	ldr	r0, [r7, #20]
 800765a:	f7ff fbb3 	bl	8006dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800765e:	bf00      	nop
 8007660:	3718      	adds	r7, #24
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fb9d 	bl	8006dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800768a:	bf00      	nop
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7fa f889 	bl	80017d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076ce:	bf00      	nop
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80076f6:	bf00      	nop
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_UARTEx_DisableFifoMode+0x16>
 8007714:	2302      	movs	r3, #2
 8007716:	e027      	b.n	8007768 <HAL_UARTEx_DisableFifoMode+0x66>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2224      	movs	r2, #36	; 0x24
 8007724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f022 0201 	bic.w	r2, r2, #1
 800773e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68fa      	ldr	r2, [r7, #12]
 8007754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007784:	2b01      	cmp	r3, #1
 8007786:	d101      	bne.n	800778c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007788:	2302      	movs	r3, #2
 800778a:	e02d      	b.n	80077e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2224      	movs	r2, #36	; 0x24
 8007798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0201 	bic.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	683a      	ldr	r2, [r7, #0]
 80077c4:	430a      	orrs	r2, r1
 80077c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f84f 	bl	800786c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2220      	movs	r2, #32
 80077da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007800:	2b01      	cmp	r3, #1
 8007802:	d101      	bne.n	8007808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007804:	2302      	movs	r3, #2
 8007806:	e02d      	b.n	8007864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2224      	movs	r2, #36	; 0x24
 8007814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 0201 	bic.w	r2, r2, #1
 800782e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f811 	bl	800786c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007878:	2b00      	cmp	r3, #0
 800787a:	d108      	bne.n	800788e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800788c:	e031      	b.n	80078f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800788e:	2308      	movs	r3, #8
 8007890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007892:	2308      	movs	r3, #8
 8007894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	0e5b      	lsrs	r3, r3, #25
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	0f5b      	lsrs	r3, r3, #29
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	7b3a      	ldrb	r2, [r7, #12]
 80078ba:	4911      	ldr	r1, [pc, #68]	; (8007900 <UARTEx_SetNbDataToProcess+0x94>)
 80078bc:	5c8a      	ldrb	r2, [r1, r2]
 80078be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80078c2:	7b3a      	ldrb	r2, [r7, #12]
 80078c4:	490f      	ldr	r1, [pc, #60]	; (8007904 <UARTEx_SetNbDataToProcess+0x98>)
 80078c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80078c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
 80078d6:	7b7a      	ldrb	r2, [r7, #13]
 80078d8:	4909      	ldr	r1, [pc, #36]	; (8007900 <UARTEx_SetNbDataToProcess+0x94>)
 80078da:	5c8a      	ldrb	r2, [r1, r2]
 80078dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80078e0:	7b7a      	ldrb	r2, [r7, #13]
 80078e2:	4908      	ldr	r1, [pc, #32]	; (8007904 <UARTEx_SetNbDataToProcess+0x98>)
 80078e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80078e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80078f2:	bf00      	nop
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	0800c31c 	.word	0x0800c31c
 8007904:	0800c324 	.word	0x0800c324

08007908 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b088      	sub	sp, #32
 800790c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007912:	f107 0308 	add.w	r3, r7, #8
 8007916:	2218      	movs	r2, #24
 8007918:	2100      	movs	r1, #0
 800791a:	4618      	mov	r0, r3
 800791c:	f001 fab6 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007920:	233f      	movs	r3, #63	; 0x3f
 8007922:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007924:	2381      	movs	r3, #129	; 0x81
 8007926:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007928:	1dfb      	adds	r3, r7, #7
 800792a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800792c:	2301      	movs	r3, #1
 800792e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007930:	f107 0308 	add.w	r3, r7, #8
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f001 f96c 	bl	8008c14 <hci_send_req>
 800793c:	4603      	mov	r3, r0
 800793e:	2b00      	cmp	r3, #0
 8007940:	da01      	bge.n	8007946 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007942:	23ff      	movs	r3, #255	; 0xff
 8007944:	e000      	b.n	8007948 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007946:	79fb      	ldrb	r3, [r7, #7]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007950:	b5b0      	push	{r4, r5, r7, lr}
 8007952:	b0ce      	sub	sp, #312	; 0x138
 8007954:	af00      	add	r7, sp, #0
 8007956:	4605      	mov	r5, r0
 8007958:	460c      	mov	r4, r1
 800795a:	4610      	mov	r0, r2
 800795c:	4619      	mov	r1, r3
 800795e:	1dfb      	adds	r3, r7, #7
 8007960:	462a      	mov	r2, r5
 8007962:	701a      	strb	r2, [r3, #0]
 8007964:	1d3b      	adds	r3, r7, #4
 8007966:	4622      	mov	r2, r4
 8007968:	801a      	strh	r2, [r3, #0]
 800796a:	1cbb      	adds	r3, r7, #2
 800796c:	4602      	mov	r2, r0
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	1dbb      	adds	r3, r7, #6
 8007972:	460a      	mov	r2, r1
 8007974:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007976:	f107 0310 	add.w	r3, r7, #16
 800797a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800797e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007982:	3308      	adds	r3, #8
 8007984:	f107 0210 	add.w	r2, r7, #16
 8007988:	4413      	add	r3, r2
 800798a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800798e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007992:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007996:	4413      	add	r3, r2
 8007998:	3309      	adds	r3, #9
 800799a:	f107 0210 	add.w	r2, r7, #16
 800799e:	4413      	add	r3, r2
 80079a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079a4:	f107 030f 	add.w	r3, r7, #15
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80079b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079b6:	1dfa      	adds	r2, r7, #7
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079c0:	3301      	adds	r3, #1
 80079c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80079c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079ca:	1d3a      	adds	r2, r7, #4
 80079cc:	8812      	ldrh	r2, [r2, #0]
 80079ce:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80079d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079d6:	3302      	adds	r3, #2
 80079d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80079dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079e0:	1cba      	adds	r2, r7, #2
 80079e2:	8812      	ldrh	r2, [r2, #0]
 80079e4:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80079e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079ec:	3302      	adds	r3, #2
 80079ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80079f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079f6:	1dba      	adds	r2, r7, #6
 80079f8:	7812      	ldrb	r2, [r2, #0]
 80079fa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80079fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a00:	3301      	adds	r3, #1
 8007a02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007a06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a0a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007a0e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007a10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a14:	3301      	adds	r3, #1
 8007a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007a1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a1e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007a22:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a28:	3301      	adds	r3, #1
 8007a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a32:	3308      	adds	r3, #8
 8007a34:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007a38:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f001 fa15 	bl	8008e6c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007a42:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007a46:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007a50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a54:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a58:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a5e:	3301      	adds	r3, #1
 8007a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007a64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a68:	3301      	adds	r3, #1
 8007a6a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a6e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007a72:	4618      	mov	r0, r3
 8007a74:	f001 f9fa 	bl	8008e6c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007a78:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007a7c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a80:	4413      	add	r3, r2
 8007a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007a86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007a8e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007a90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a94:	3302      	adds	r3, #2
 8007a96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a9e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007aa2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007aa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007aae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ab2:	2218      	movs	r2, #24
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 f9e8 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007abc:	233f      	movs	r3, #63	; 0x3f
 8007abe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007ac2:	2383      	movs	r3, #131	; 0x83
 8007ac4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007ac8:	f107 0310 	add.w	r3, r7, #16
 8007acc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007ad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ad4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007ad8:	f107 030f 	add.w	r3, r7, #15
 8007adc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ae6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007aea:	2100      	movs	r1, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f891 	bl	8008c14 <hci_send_req>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da01      	bge.n	8007afc <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007af8:	23ff      	movs	r3, #255	; 0xff
 8007afa:	e002      	b.n	8007b02 <aci_gap_set_discoverable+0x1b2>
  return status;
 8007afc:	f107 030f 	add.w	r3, r7, #15
 8007b00:	781b      	ldrb	r3, [r3, #0]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bdb0      	pop	{r4, r5, r7, pc}

08007b0c <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b0cc      	sub	sp, #304	; 0x130
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4602      	mov	r2, r0
 8007b14:	1dfb      	adds	r3, r7, #7
 8007b16:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007b18:	f107 0310 	add.w	r3, r7, #16
 8007b1c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b20:	f107 030f 	add.w	r3, r7, #15
 8007b24:	2200      	movs	r2, #0
 8007b26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8007b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b32:	1dfa      	adds	r2, r7, #7
 8007b34:	7812      	ldrb	r2, [r2, #0]
 8007b36:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007b38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b46:	2218      	movs	r2, #24
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f001 f99e 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b50:	233f      	movs	r3, #63	; 0x3f
 8007b52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007b56:	2385      	movs	r3, #133	; 0x85
 8007b58:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b5c:	f107 0310 	add.w	r3, r7, #16
 8007b60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b6c:	f107 030f 	add.w	r3, r7, #15
 8007b70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b74:	2301      	movs	r3, #1
 8007b76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f001 f847 	bl	8008c14 <hci_send_req>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	da01      	bge.n	8007b90 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007b8c:	23ff      	movs	r3, #255	; 0xff
 8007b8e:	e002      	b.n	8007b96 <aci_gap_set_io_capability+0x8a>
  return status;
 8007b90:	f107 030f 	add.w	r3, r7, #15
 8007b94:	781b      	ldrb	r3, [r3, #0]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007ba0:	b5b0      	push	{r4, r5, r7, lr}
 8007ba2:	b0cc      	sub	sp, #304	; 0x130
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	460c      	mov	r4, r1
 8007baa:	4610      	mov	r0, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	1dfb      	adds	r3, r7, #7
 8007bb0:	462a      	mov	r2, r5
 8007bb2:	701a      	strb	r2, [r3, #0]
 8007bb4:	1dbb      	adds	r3, r7, #6
 8007bb6:	4622      	mov	r2, r4
 8007bb8:	701a      	strb	r2, [r3, #0]
 8007bba:	1d7b      	adds	r3, r7, #5
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	701a      	strb	r2, [r3, #0]
 8007bc0:	1d3b      	adds	r3, r7, #4
 8007bc2:	460a      	mov	r2, r1
 8007bc4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007bc6:	f107 0310 	add.w	r3, r7, #16
 8007bca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007bce:	f107 030f 	add.w	r3, r7, #15
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007be0:	1dfa      	adds	r2, r7, #7
 8007be2:	7812      	ldrb	r2, [r2, #0]
 8007be4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007be6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bea:	3301      	adds	r3, #1
 8007bec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8007bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf4:	1dba      	adds	r2, r7, #6
 8007bf6:	7812      	ldrb	r2, [r2, #0]
 8007bf8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007bfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bfe:	3301      	adds	r3, #1
 8007c00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c08:	1d7a      	adds	r2, r7, #5
 8007c0a:	7812      	ldrb	r2, [r2, #0]
 8007c0c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c12:	3301      	adds	r3, #1
 8007c14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1c:	1d3a      	adds	r2, r7, #4
 8007c1e:	7812      	ldrb	r2, [r2, #0]
 8007c20:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8007c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c26:	3301      	adds	r3, #1
 8007c28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c30:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007c34:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007c36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8007c40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c44:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007c48:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007c4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c4e:	3301      	adds	r3, #1
 8007c50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c58:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007c5c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c62:	3301      	adds	r3, #1
 8007c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c6c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007c70:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c78:	3304      	adds	r3, #4
 8007c7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c82:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007c86:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c96:	2218      	movs	r2, #24
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f001 f8f6 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ca0:	233f      	movs	r3, #63	; 0x3f
 8007ca2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007ca6:	2386      	movs	r3, #134	; 0x86
 8007ca8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cac:	f107 0310 	add.w	r3, r7, #16
 8007cb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007cbc:	f107 030f 	add.w	r3, r7, #15
 8007cc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 ff9f 	bl	8008c14 <hci_send_req>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da01      	bge.n	8007ce0 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007cdc:	23ff      	movs	r3, #255	; 0xff
 8007cde:	e002      	b.n	8007ce6 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007ce0:	f107 030f 	add.w	r3, r7, #15
 8007ce4:	781b      	ldrb	r3, [r3, #0]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bdb0      	pop	{r4, r5, r7, pc}

08007cf0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007cf0:	b590      	push	{r4, r7, lr}
 8007cf2:	b0cd      	sub	sp, #308	; 0x134
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	4608      	mov	r0, r1
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	463a      	mov	r2, r7
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	1dfb      	adds	r3, r7, #7
 8007d02:	4622      	mov	r2, r4
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	1dbb      	adds	r3, r7, #6
 8007d08:	4602      	mov	r2, r0
 8007d0a:	701a      	strb	r2, [r3, #0]
 8007d0c:	1d7b      	adds	r3, r7, #5
 8007d0e:	460a      	mov	r2, r1
 8007d10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8007d12:	f107 0310 	add.w	r3, r7, #16
 8007d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007d1a:	f107 0308 	add.w	r3, r7, #8
 8007d1e:	2207      	movs	r2, #7
 8007d20:	2100      	movs	r1, #0
 8007d22:	4618      	mov	r0, r3
 8007d24:	f001 f8b2 	bl	8008e8c <Osal_MemSet>
  int index_input = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8007d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d32:	1dfa      	adds	r2, r7, #7
 8007d34:	7812      	ldrb	r2, [r2, #0]
 8007d36:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d46:	1dba      	adds	r2, r7, #6
 8007d48:	7812      	ldrb	r2, [r2, #0]
 8007d4a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d50:	3301      	adds	r3, #1
 8007d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d5a:	1d7a      	adds	r2, r7, #5
 8007d5c:	7812      	ldrb	r2, [r2, #0]
 8007d5e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007d60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d64:	3301      	adds	r3, #1
 8007d66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d6e:	2218      	movs	r2, #24
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 f88a 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d78:	233f      	movs	r3, #63	; 0x3f
 8007d7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007d7e:	238a      	movs	r3, #138	; 0x8a
 8007d80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d84:	f107 0310 	add.w	r3, r7, #16
 8007d88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007d94:	f107 0308 	add.w	r3, r7, #8
 8007d98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007d9c:	2307      	movs	r3, #7
 8007d9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007da6:	2100      	movs	r1, #0
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 ff33 	bl	8008c14 <hci_send_req>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	da01      	bge.n	8007db8 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007db4:	23ff      	movs	r3, #255	; 0xff
 8007db6:	e021      	b.n	8007dfc <aci_gap_init+0x10c>
  if ( resp.Status )
 8007db8:	f107 0308 	add.w	r3, r7, #8
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d003      	beq.n	8007dca <aci_gap_init+0xda>
    return resp.Status;
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	e018      	b.n	8007dfc <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007dca:	f107 0308 	add.w	r3, r7, #8
 8007dce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	463b      	mov	r3, r7
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007dda:	f107 0308 	add.w	r3, r7, #8
 8007dde:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007de8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007dea:	f107 0308 	add.w	r3, r7, #8
 8007dee:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007df8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd90      	pop	{r4, r7, pc}

08007e06 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b0cc      	sub	sp, #304	; 0x130
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	463b      	mov	r3, r7
 8007e10:	6019      	str	r1, [r3, #0]
 8007e12:	1dfb      	adds	r3, r7, #7
 8007e14:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007e16:	f107 0310 	add.w	r3, r7, #16
 8007e1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007e1e:	f107 030f 	add.w	r3, r7, #15
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e30:	1dfa      	adds	r2, r7, #7
 8007e32:	7812      	ldrb	r2, [r2, #0]
 8007e34:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007e40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e44:	1c58      	adds	r0, r3, #1
 8007e46:	1dfb      	adds	r3, r7, #7
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	463b      	mov	r3, r7
 8007e4c:	6819      	ldr	r1, [r3, #0]
 8007e4e:	f001 f80d 	bl	8008e6c <Osal_MemCpy>
  index_input += AdvDataLen;
 8007e52:	1dfb      	adds	r3, r7, #7
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e64:	2218      	movs	r2, #24
 8007e66:	2100      	movs	r1, #0
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f001 f80f 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007e6e:	233f      	movs	r3, #63	; 0x3f
 8007e70:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007e74:	238e      	movs	r3, #142	; 0x8e
 8007e76:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e7a:	f107 0310 	add.w	r3, r7, #16
 8007e7e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007e8a:	f107 030f 	add.w	r3, r7, #15
 8007e8e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e92:	2301      	movs	r3, #1
 8007e94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e98:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 feb8 	bl	8008c14 <hci_send_req>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	da01      	bge.n	8007eae <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8007eaa:	23ff      	movs	r3, #255	; 0xff
 8007eac:	e002      	b.n	8007eb4 <aci_gap_update_adv_data+0xae>
  return status;
 8007eae:	f107 030f 	add.w	r3, r7, #15
 8007eb2:	781b      	ldrb	r3, [r3, #0]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b088      	sub	sp, #32
 8007ec2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ec8:	f107 0308 	add.w	r3, r7, #8
 8007ecc:	2218      	movs	r2, #24
 8007ece:	2100      	movs	r1, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 ffdb 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ed6:	233f      	movs	r3, #63	; 0x3f
 8007ed8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007eda:	2392      	movs	r3, #146	; 0x92
 8007edc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ede:	1dfb      	adds	r3, r7, #7
 8007ee0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ee6:	f107 0308 	add.w	r3, r7, #8
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fe91 	bl	8008c14 <hci_send_req>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	da01      	bge.n	8007efc <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ef8:	23ff      	movs	r3, #255	; 0xff
 8007efa:	e000      	b.n	8007efe <aci_gap_configure_whitelist+0x40>
  return status;
 8007efc:	79fb      	ldrb	r3, [r7, #7]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b0cc      	sub	sp, #304	; 0x130
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	1dbb      	adds	r3, r7, #6
 8007f10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8007f12:	f107 0310 	add.w	r3, r7, #16
 8007f16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f1a:	f107 030f 	add.w	r3, r7, #15
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f2c:	1dba      	adds	r2, r7, #6
 8007f2e:	8812      	ldrh	r2, [r2, #0]
 8007f30:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007f32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f36:	3302      	adds	r3, #2
 8007f38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f40:	2218      	movs	r2, #24
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 ffa1 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007f4a:	233f      	movs	r3, #63	; 0x3f
 8007f4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8007f50:	2395      	movs	r3, #149	; 0x95
 8007f52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f56:	f107 0310 	add.w	r3, r7, #16
 8007f5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f66:	f107 030f 	add.w	r3, r7, #15
 8007f6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f78:	2100      	movs	r1, #0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fe4a 	bl	8008c14 <hci_send_req>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da01      	bge.n	8007f8a <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 8007f86:	23ff      	movs	r3, #255	; 0xff
 8007f88:	e002      	b.n	8007f90 <aci_gap_allow_rebond+0x8a>
  return status;
 8007f8a:	f107 030f 	add.w	r3, r7, #15
 8007f8e:	781b      	ldrb	r3, [r3, #0]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b0cc      	sub	sp, #304	; 0x130
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	1dbb      	adds	r3, r7, #6
 8007fa4:	801a      	strh	r2, [r3, #0]
 8007fa6:	1d7b      	adds	r3, r7, #5
 8007fa8:	460a      	mov	r2, r1
 8007faa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007fac:	f107 0310 	add.w	r3, r7, #16
 8007fb0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007fb4:	f107 030f 	add.w	r3, r7, #15
 8007fb8:	2200      	movs	r2, #0
 8007fba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007fc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc6:	1dba      	adds	r2, r7, #6
 8007fc8:	8812      	ldrh	r2, [r2, #0]
 8007fca:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007fcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fd0:	3302      	adds	r3, #2
 8007fd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fda:	1d7a      	adds	r2, r7, #5
 8007fdc:	7812      	ldrb	r2, [r2, #0]
 8007fde:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fee:	2218      	movs	r2, #24
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 ff4a 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ff8:	233f      	movs	r3, #63	; 0x3f
 8007ffa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007ffe:	23a5      	movs	r3, #165	; 0xa5
 8008000:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008004:	f107 0310 	add.w	r3, r7, #16
 8008008:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800800c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008010:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008014:	f107 030f 	add.w	r3, r7, #15
 8008018:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800801c:	2301      	movs	r3, #1
 800801e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008022:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008026:	2100      	movs	r1, #0
 8008028:	4618      	mov	r0, r3
 800802a:	f000 fdf3 	bl	8008c14 <hci_send_req>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	da01      	bge.n	8008038 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008034:	23ff      	movs	r3, #255	; 0xff
 8008036:	e002      	b.n	800803e <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8008038:	f107 030f 	add.w	r3, r7, #15
 800803c:	781b      	ldrb	r3, [r3, #0]
}
 800803e:	4618      	mov	r0, r3
 8008040:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b088      	sub	sp, #32
 800804c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008052:	f107 0308 	add.w	r3, r7, #8
 8008056:	2218      	movs	r2, #24
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f000 ff16 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008060:	233f      	movs	r3, #63	; 0x3f
 8008062:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008064:	f240 1301 	movw	r3, #257	; 0x101
 8008068:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800806a:	1dfb      	adds	r3, r7, #7
 800806c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800806e:	2301      	movs	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	2100      	movs	r1, #0
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fdcb 	bl	8008c14 <hci_send_req>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	da01      	bge.n	8008088 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008084:	23ff      	movs	r3, #255	; 0xff
 8008086:	e000      	b.n	800808a <aci_gatt_init+0x42>
  return status;
 8008088:	79fb      	ldrb	r3, [r7, #7]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008092:	b590      	push	{r4, r7, lr}
 8008094:	b0cf      	sub	sp, #316	; 0x13c
 8008096:	af00      	add	r7, sp, #0
 8008098:	4604      	mov	r4, r0
 800809a:	4638      	mov	r0, r7
 800809c:	6001      	str	r1, [r0, #0]
 800809e:	4610      	mov	r0, r2
 80080a0:	4619      	mov	r1, r3
 80080a2:	1dfb      	adds	r3, r7, #7
 80080a4:	4622      	mov	r2, r4
 80080a6:	701a      	strb	r2, [r3, #0]
 80080a8:	1dbb      	adds	r3, r7, #6
 80080aa:	4602      	mov	r2, r0
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	1d7b      	adds	r3, r7, #5
 80080b0:	460a      	mov	r2, r1
 80080b2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80080b4:	f107 0310 	add.w	r3, r7, #16
 80080b8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80080bc:	1dfb      	adds	r3, r7, #7
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d007      	beq.n	80080d4 <aci_gatt_add_service+0x42>
 80080c4:	1dfb      	adds	r3, r7, #7
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d101      	bne.n	80080d0 <aci_gatt_add_service+0x3e>
 80080cc:	2311      	movs	r3, #17
 80080ce:	e002      	b.n	80080d6 <aci_gatt_add_service+0x44>
 80080d0:	2301      	movs	r3, #1
 80080d2:	e000      	b.n	80080d6 <aci_gatt_add_service+0x44>
 80080d4:	2303      	movs	r3, #3
 80080d6:	f107 0210 	add.w	r2, r7, #16
 80080da:	4413      	add	r3, r2
 80080dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	2203      	movs	r2, #3
 80080e6:	2100      	movs	r1, #0
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 fecf 	bl	8008e8c <Osal_MemSet>
  int index_input = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80080f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80080f8:	1dfa      	adds	r2, r7, #7
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80080fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008102:	3301      	adds	r3, #1
 8008104:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008108:	1dfb      	adds	r3, r7, #7
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d002      	beq.n	8008116 <aci_gatt_add_service+0x84>
 8008110:	2b02      	cmp	r3, #2
 8008112:	d004      	beq.n	800811e <aci_gatt_add_service+0x8c>
 8008114:	e007      	b.n	8008126 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8008116:	2302      	movs	r3, #2
 8008118:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800811c:	e005      	b.n	800812a <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800811e:	2310      	movs	r3, #16
 8008120:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008124:	e001      	b.n	800812a <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8008126:	2347      	movs	r3, #71	; 0x47
 8008128:	e05d      	b.n	80081e6 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800812a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800812e:	1c58      	adds	r0, r3, #1
 8008130:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008134:	463b      	mov	r3, r7
 8008136:	6819      	ldr	r1, [r3, #0]
 8008138:	f000 fe98 	bl	8008e6c <Osal_MemCpy>
    index_input += size;
 800813c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008140:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008144:	4413      	add	r3, r2
 8008146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800814a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800814e:	1dba      	adds	r2, r7, #6
 8008150:	7812      	ldrb	r2, [r2, #0]
 8008152:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008154:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008158:	3301      	adds	r3, #1
 800815a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800815e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008162:	1d7a      	adds	r2, r7, #5
 8008164:	7812      	ldrb	r2, [r2, #0]
 8008166:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008168:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800816c:	3301      	adds	r3, #1
 800816e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008172:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008176:	2218      	movs	r2, #24
 8008178:	2100      	movs	r1, #0
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fe86 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008180:	233f      	movs	r3, #63	; 0x3f
 8008182:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008186:	f44f 7381 	mov.w	r3, #258	; 0x102
 800818a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800818e:	f107 0310 	add.w	r3, r7, #16
 8008192:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008196:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800819a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800819e:	f107 030c 	add.w	r3, r7, #12
 80081a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80081a6:	2303      	movs	r3, #3
 80081a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081b0:	2100      	movs	r1, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f000 fd2e 	bl	8008c14 <hci_send_req>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	da01      	bge.n	80081c2 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80081be:	23ff      	movs	r3, #255	; 0xff
 80081c0:	e011      	b.n	80081e6 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80081c2:	f107 030c 	add.w	r3, r7, #12
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <aci_gatt_add_service+0x142>
    return resp.Status;
 80081cc:	f107 030c 	add.w	r3, r7, #12
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	e008      	b.n	80081e6 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80081d4:	f107 030c 	add.w	r3, r7, #12
 80081d8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80081dc:	b29a      	uxth	r2, r3
 80081de:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80081e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd90      	pop	{r4, r7, pc}

080081f0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b0d1      	sub	sp, #324	; 0x144
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	4604      	mov	r4, r0
 80081f8:	4608      	mov	r0, r1
 80081fa:	f107 0108 	add.w	r1, r7, #8
 80081fe:	600a      	str	r2, [r1, #0]
 8008200:	4619      	mov	r1, r3
 8008202:	f107 030e 	add.w	r3, r7, #14
 8008206:	4622      	mov	r2, r4
 8008208:	801a      	strh	r2, [r3, #0]
 800820a:	f107 030d 	add.w	r3, r7, #13
 800820e:	4602      	mov	r2, r0
 8008210:	701a      	strb	r2, [r3, #0]
 8008212:	1dbb      	adds	r3, r7, #6
 8008214:	460a      	mov	r2, r1
 8008216:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008218:	f107 0318 	add.w	r3, r7, #24
 800821c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008220:	f107 030d 	add.w	r3, r7, #13
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d008      	beq.n	800823c <aci_gatt_add_char+0x4c>
 800822a:	f107 030d 	add.w	r3, r7, #13
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b02      	cmp	r3, #2
 8008232:	d101      	bne.n	8008238 <aci_gatt_add_char+0x48>
 8008234:	2313      	movs	r3, #19
 8008236:	e002      	b.n	800823e <aci_gatt_add_char+0x4e>
 8008238:	2303      	movs	r3, #3
 800823a:	e000      	b.n	800823e <aci_gatt_add_char+0x4e>
 800823c:	2305      	movs	r3, #5
 800823e:	f107 0218 	add.w	r2, r7, #24
 8008242:	4413      	add	r3, r2
 8008244:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008248:	f107 0314 	add.w	r3, r7, #20
 800824c:	2203      	movs	r2, #3
 800824e:	2100      	movs	r1, #0
 8008250:	4618      	mov	r0, r3
 8008252:	f000 fe1b 	bl	8008e8c <Osal_MemSet>
  int index_input = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800825c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008260:	f107 020e 	add.w	r2, r7, #14
 8008264:	8812      	ldrh	r2, [r2, #0]
 8008266:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008268:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800826c:	3302      	adds	r3, #2
 800826e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008272:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008276:	f107 020d 	add.w	r2, r7, #13
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800827e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008282:	3301      	adds	r3, #1
 8008284:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008288:	f107 030d 	add.w	r3, r7, #13
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d002      	beq.n	8008298 <aci_gatt_add_char+0xa8>
 8008292:	2b02      	cmp	r3, #2
 8008294:	d004      	beq.n	80082a0 <aci_gatt_add_char+0xb0>
 8008296:	e007      	b.n	80082a8 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8008298:	2302      	movs	r3, #2
 800829a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800829e:	e005      	b.n	80082ac <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80082a0:	2310      	movs	r3, #16
 80082a2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80082a6:	e001      	b.n	80082ac <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80082a8:	2347      	movs	r3, #71	; 0x47
 80082aa:	e086      	b.n	80083ba <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80082ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80082b0:	1cd8      	adds	r0, r3, #3
 80082b2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	6819      	ldr	r1, [r3, #0]
 80082bc:	f000 fdd6 	bl	8008e6c <Osal_MemCpy>
    index_input += size;
 80082c0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80082c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80082c8:	4413      	add	r3, r2
 80082ca:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80082ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082d2:	1dba      	adds	r2, r7, #6
 80082d4:	8812      	ldrh	r2, [r2, #0]
 80082d6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80082d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082dc:	3302      	adds	r3, #2
 80082de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80082e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082e6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80082ea:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80082ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082f0:	3301      	adds	r3, #1
 80082f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80082f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80082fa:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80082fe:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008300:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008304:	3301      	adds	r3, #1
 8008306:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800830a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800830e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008312:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008314:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008318:	3301      	adds	r3, #1
 800831a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800831e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008322:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008326:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008328:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800832c:	3301      	adds	r3, #1
 800832e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008332:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008336:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800833a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800833c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008340:	3301      	adds	r3, #1
 8008342:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008346:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800834a:	2218      	movs	r2, #24
 800834c:	2100      	movs	r1, #0
 800834e:	4618      	mov	r0, r3
 8008350:	f000 fd9c 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008354:	233f      	movs	r3, #63	; 0x3f
 8008356:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800835a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800835e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008362:	f107 0318 	add.w	r3, r7, #24
 8008366:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800836a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800836e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8008372:	f107 0314 	add.w	r3, r7, #20
 8008376:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800837a:	2303      	movs	r3, #3
 800837c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008380:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008384:	2100      	movs	r1, #0
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fc44 	bl	8008c14 <hci_send_req>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	da01      	bge.n	8008396 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8008392:	23ff      	movs	r3, #255	; 0xff
 8008394:	e011      	b.n	80083ba <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8008396:	f107 0314 	add.w	r3, r7, #20
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d003      	beq.n	80083a8 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80083a0:	f107 0314 	add.w	r3, r7, #20
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	e008      	b.n	80083ba <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80083a8:	f107 0314 	add.w	r3, r7, #20
 80083ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80083b6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd90      	pop	{r4, r7, pc}

080083c4 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80083c4:	b5b0      	push	{r4, r5, r7, lr}
 80083c6:	b0cc      	sub	sp, #304	; 0x130
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4605      	mov	r5, r0
 80083cc:	460c      	mov	r4, r1
 80083ce:	4610      	mov	r0, r2
 80083d0:	4619      	mov	r1, r3
 80083d2:	1dbb      	adds	r3, r7, #6
 80083d4:	462a      	mov	r2, r5
 80083d6:	801a      	strh	r2, [r3, #0]
 80083d8:	1d3b      	adds	r3, r7, #4
 80083da:	4622      	mov	r2, r4
 80083dc:	801a      	strh	r2, [r3, #0]
 80083de:	1cfb      	adds	r3, r7, #3
 80083e0:	4602      	mov	r2, r0
 80083e2:	701a      	strb	r2, [r3, #0]
 80083e4:	1cbb      	adds	r3, r7, #2
 80083e6:	460a      	mov	r2, r1
 80083e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80083ea:	f107 0310 	add.w	r3, r7, #16
 80083ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80083f2:	f107 030f 	add.w	r3, r7, #15
 80083f6:	2200      	movs	r2, #0
 80083f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8008400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008404:	1dba      	adds	r2, r7, #6
 8008406:	8812      	ldrh	r2, [r2, #0]
 8008408:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800840a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800840e:	3302      	adds	r3, #2
 8008410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008418:	1d3a      	adds	r2, r7, #4
 800841a:	8812      	ldrh	r2, [r2, #0]
 800841c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800841e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008422:	3302      	adds	r3, #2
 8008424:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8008428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800842c:	1cfa      	adds	r2, r7, #3
 800842e:	7812      	ldrb	r2, [r2, #0]
 8008430:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008432:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008436:	3301      	adds	r3, #1
 8008438:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800843c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008440:	1cba      	adds	r2, r7, #2
 8008442:	7812      	ldrb	r2, [r2, #0]
 8008444:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800844a:	3301      	adds	r3, #1
 800844c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8008450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008454:	1d98      	adds	r0, r3, #6
 8008456:	1cbb      	adds	r3, r7, #2
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	461a      	mov	r2, r3
 800845c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8008460:	f000 fd04 	bl	8008e6c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8008464:	1cbb      	adds	r3, r7, #2
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800846c:	4413      	add	r3, r2
 800846e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008476:	2218      	movs	r2, #24
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f000 fd06 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008480:	233f      	movs	r3, #63	; 0x3f
 8008482:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008486:	f44f 7383 	mov.w	r3, #262	; 0x106
 800848a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800848e:	f107 0310 	add.w	r3, r7, #16
 8008492:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800849a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800849e:	f107 030f 	add.w	r3, r7, #15
 80084a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80084a6:	2301      	movs	r3, #1
 80084a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fbae 	bl	8008c14 <hci_send_req>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da01      	bge.n	80084c2 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80084be:	23ff      	movs	r3, #255	; 0xff
 80084c0:	e002      	b.n	80084c8 <aci_gatt_update_char_value+0x104>
  return status;
 80084c2:	f107 030f 	add.w	r3, r7, #15
 80084c6:	781b      	ldrb	r3, [r3, #0]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bdb0      	pop	{r4, r5, r7, pc}

080084d2 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b0cc      	sub	sp, #304	; 0x130
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	463b      	mov	r3, r7
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	1dfb      	adds	r3, r7, #7
 80084de:	4602      	mov	r2, r0
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	1dbb      	adds	r3, r7, #6
 80084e4:	460a      	mov	r2, r1
 80084e6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80084e8:	f107 0310 	add.w	r3, r7, #16
 80084ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80084f0:	f107 030f 	add.w	r3, r7, #15
 80084f4:	2200      	movs	r2, #0
 80084f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084f8:	2300      	movs	r3, #0
 80084fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80084fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008502:	1dfa      	adds	r2, r7, #7
 8008504:	7812      	ldrb	r2, [r2, #0]
 8008506:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008508:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800850c:	3301      	adds	r3, #1
 800850e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8008512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008516:	1dba      	adds	r2, r7, #6
 8008518:	7812      	ldrb	r2, [r2, #0]
 800851a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800851c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008520:	3301      	adds	r3, #1
 8008522:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8008526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800852a:	1c98      	adds	r0, r3, #2
 800852c:	1dbb      	adds	r3, r7, #6
 800852e:	781a      	ldrb	r2, [r3, #0]
 8008530:	463b      	mov	r3, r7
 8008532:	6819      	ldr	r1, [r3, #0]
 8008534:	f000 fc9a 	bl	8008e6c <Osal_MemCpy>
  index_input += Length;
 8008538:	1dbb      	adds	r3, r7, #6
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008540:	4413      	add	r3, r2
 8008542:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008546:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800854a:	2218      	movs	r2, #24
 800854c:	2100      	movs	r1, #0
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fc9c 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008554:	233f      	movs	r3, #63	; 0x3f
 8008556:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800855a:	230c      	movs	r3, #12
 800855c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008560:	f107 0310 	add.w	r3, r7, #16
 8008564:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008568:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800856c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008570:	f107 030f 	add.w	r3, r7, #15
 8008574:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008578:	2301      	movs	r3, #1
 800857a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800857e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008582:	2100      	movs	r1, #0
 8008584:	4618      	mov	r0, r3
 8008586:	f000 fb45 	bl	8008c14 <hci_send_req>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	da01      	bge.n	8008594 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8008590:	23ff      	movs	r3, #255	; 0xff
 8008592:	e002      	b.n	800859a <aci_hal_write_config_data+0xc8>
  return status;
 8008594:	f107 030f 	add.w	r3, r7, #15
 8008598:	781b      	ldrb	r3, [r3, #0]
}
 800859a:	4618      	mov	r0, r3
 800859c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b0cc      	sub	sp, #304	; 0x130
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4602      	mov	r2, r0
 80085ac:	1dfb      	adds	r3, r7, #7
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	1dbb      	adds	r3, r7, #6
 80085b2:	460a      	mov	r2, r1
 80085b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80085b6:	f107 0310 	add.w	r3, r7, #16
 80085ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80085be:	f107 030f 	add.w	r3, r7, #15
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80085cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d0:	1dfa      	adds	r2, r7, #7
 80085d2:	7812      	ldrb	r2, [r2, #0]
 80085d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80085d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085da:	3301      	adds	r3, #1
 80085dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80085e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085e4:	1dba      	adds	r2, r7, #6
 80085e6:	7812      	ldrb	r2, [r2, #0]
 80085e8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80085ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ee:	3301      	adds	r3, #1
 80085f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085f8:	2218      	movs	r2, #24
 80085fa:	2100      	movs	r1, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fc45 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008602:	233f      	movs	r3, #63	; 0x3f
 8008604:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008608:	230f      	movs	r3, #15
 800860a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800860e:	f107 0310 	add.w	r3, r7, #16
 8008612:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800861a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800861e:	f107 030f 	add.w	r3, r7, #15
 8008622:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008626:	2301      	movs	r3, #1
 8008628:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800862c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f000 faee 	bl	8008c14 <hci_send_req>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	da01      	bge.n	8008642 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800863e:	23ff      	movs	r3, #255	; 0xff
 8008640:	e002      	b.n	8008648 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8008642:	f107 030f 	add.w	r3, r7, #15
 8008646:	781b      	ldrb	r3, [r3, #0]
}
 8008648:	4618      	mov	r0, r3
 800864a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b0cc      	sub	sp, #304	; 0x130
 8008656:	af00      	add	r7, sp, #0
 8008658:	4602      	mov	r2, r0
 800865a:	1dbb      	adds	r3, r7, #6
 800865c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800865e:	f107 0310 	add.w	r3, r7, #16
 8008662:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008666:	f107 030f 	add.w	r3, r7, #15
 800866a:	2200      	movs	r2, #0
 800866c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8008674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008678:	1dba      	adds	r2, r7, #6
 800867a:	8812      	ldrh	r2, [r2, #0]
 800867c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800867e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008682:	3302      	adds	r3, #2
 8008684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800868c:	2218      	movs	r2, #24
 800868e:	2100      	movs	r1, #0
 8008690:	4618      	mov	r0, r3
 8008692:	f000 fbfb 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008696:	233f      	movs	r3, #63	; 0x3f
 8008698:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800869c:	2318      	movs	r3, #24
 800869e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80086a2:	f107 0310 	add.w	r3, r7, #16
 80086a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80086aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80086b2:	f107 030f 	add.w	r3, r7, #15
 80086b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 faa4 	bl	8008c14 <hci_send_req>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	da01      	bge.n	80086d6 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80086d2:	23ff      	movs	r3, #255	; 0xff
 80086d4:	e002      	b.n	80086dc <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 80086d6:	f107 030f 	add.w	r3, r7, #15
 80086da:	781b      	ldrb	r3, [r3, #0]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b088      	sub	sp, #32
 80086ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80086f0:	f107 0308 	add.w	r3, r7, #8
 80086f4:	2218      	movs	r2, #24
 80086f6:	2100      	movs	r1, #0
 80086f8:	4618      	mov	r0, r3
 80086fa:	f000 fbc7 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x03;
 80086fe:	2303      	movs	r3, #3
 8008700:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8008702:	2303      	movs	r3, #3
 8008704:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008706:	1dfb      	adds	r3, r7, #7
 8008708:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800870a:	2301      	movs	r3, #1
 800870c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800870e:	f107 0308 	add.w	r3, r7, #8
 8008712:	2100      	movs	r1, #0
 8008714:	4618      	mov	r0, r3
 8008716:	f000 fa7d 	bl	8008c14 <hci_send_req>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	da01      	bge.n	8008724 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008720:	23ff      	movs	r3, #255	; 0xff
 8008722:	e000      	b.n	8008726 <hci_reset+0x40>
  return status;
 8008724:	79fb      	ldrb	r3, [r7, #7]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3720      	adds	r7, #32
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b0ce      	sub	sp, #312	; 0x138
 8008732:	af00      	add	r7, sp, #0
 8008734:	f107 0308 	add.w	r3, r7, #8
 8008738:	6019      	str	r1, [r3, #0]
 800873a:	1d3b      	adds	r3, r7, #4
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	f107 030e 	add.w	r3, r7, #14
 8008742:	4602      	mov	r2, r0
 8008744:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8008746:	f107 0318 	add.w	r3, r7, #24
 800874a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800874e:	f107 0310 	add.w	r3, r7, #16
 8008752:	2205      	movs	r2, #5
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f000 fb98 	bl	8008e8c <Osal_MemSet>
  int index_input = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8008762:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008766:	f107 020e 	add.w	r2, r7, #14
 800876a:	8812      	ldrh	r2, [r2, #0]
 800876c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800876e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008772:	3302      	adds	r3, #2
 8008774:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008778:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800877c:	2218      	movs	r2, #24
 800877e:	2100      	movs	r1, #0
 8008780:	4618      	mov	r0, r3
 8008782:	f000 fb83 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x08;
 8008786:	2308      	movs	r3, #8
 8008788:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800878c:	2330      	movs	r3, #48	; 0x30
 800878e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8008792:	f107 0318 	add.w	r3, r7, #24
 8008796:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800879a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800879e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80087a2:	f107 0310 	add.w	r3, r7, #16
 80087a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80087aa:	2305      	movs	r3, #5
 80087ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80087b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 fa2c 	bl	8008c14 <hci_send_req>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	da01      	bge.n	80087c6 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80087c2:	23ff      	movs	r3, #255	; 0xff
 80087c4:	e016      	b.n	80087f4 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 80087c6:	f107 0310 	add.w	r3, r7, #16
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d003      	beq.n	80087d8 <hci_le_read_phy+0xaa>
    return resp.Status;
 80087d0:	f107 0310 	add.w	r3, r7, #16
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	e00d      	b.n	80087f4 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 80087d8:	f107 0310 	add.w	r3, r7, #16
 80087dc:	78da      	ldrb	r2, [r3, #3]
 80087de:	f107 0308 	add.w	r3, r7, #8
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80087e6:	f107 0310 	add.w	r3, r7, #16
 80087ea:	791a      	ldrb	r2, [r3, #4]
 80087ec:	1d3b      	adds	r3, r7, #4
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80087fe:	b590      	push	{r4, r7, lr}
 8008800:	b0cd      	sub	sp, #308	; 0x134
 8008802:	af00      	add	r7, sp, #0
 8008804:	4604      	mov	r4, r0
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	1dfb      	adds	r3, r7, #7
 800880c:	4622      	mov	r2, r4
 800880e:	701a      	strb	r2, [r3, #0]
 8008810:	1dbb      	adds	r3, r7, #6
 8008812:	4602      	mov	r2, r0
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	1d7b      	adds	r3, r7, #5
 8008818:	460a      	mov	r2, r1
 800881a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800881c:	f107 0310 	add.w	r3, r7, #16
 8008820:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008824:	f107 030f 	add.w	r3, r7, #15
 8008828:	2200      	movs	r2, #0
 800882a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800882c:	2300      	movs	r3, #0
 800882e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8008832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008836:	1dfa      	adds	r2, r7, #7
 8008838:	7812      	ldrb	r2, [r2, #0]
 800883a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800883c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008840:	3301      	adds	r3, #1
 8008842:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8008846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800884a:	1dba      	adds	r2, r7, #6
 800884c:	7812      	ldrb	r2, [r2, #0]
 800884e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008850:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008854:	3301      	adds	r3, #1
 8008856:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800885a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885e:	1d7a      	adds	r2, r7, #5
 8008860:	7812      	ldrb	r2, [r2, #0]
 8008862:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008864:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008868:	3301      	adds	r3, #1
 800886a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800886e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008872:	2218      	movs	r2, #24
 8008874:	2100      	movs	r1, #0
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fb08 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x08;
 800887c:	2308      	movs	r3, #8
 800887e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8008882:	2331      	movs	r3, #49	; 0x31
 8008884:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008888:	f107 0310 	add.w	r3, r7, #16
 800888c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008894:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008898:	f107 030f 	add.w	r3, r7, #15
 800889c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088a0:	2301      	movs	r3, #1
 80088a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088aa:	2100      	movs	r1, #0
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f9b1 	bl	8008c14 <hci_send_req>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da01      	bge.n	80088bc <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 80088b8:	23ff      	movs	r3, #255	; 0xff
 80088ba:	e002      	b.n	80088c2 <hci_le_set_default_phy+0xc4>
  return status;
 80088bc:	f107 030f 	add.w	r3, r7, #15
 80088c0:	781b      	ldrb	r3, [r3, #0]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd90      	pop	{r4, r7, pc}

080088cc <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 80088cc:	b5b0      	push	{r4, r5, r7, lr}
 80088ce:	b0cc      	sub	sp, #304	; 0x130
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4605      	mov	r5, r0
 80088d4:	460c      	mov	r4, r1
 80088d6:	4610      	mov	r0, r2
 80088d8:	4619      	mov	r1, r3
 80088da:	1dbb      	adds	r3, r7, #6
 80088dc:	462a      	mov	r2, r5
 80088de:	801a      	strh	r2, [r3, #0]
 80088e0:	1d3b      	adds	r3, r7, #4
 80088e2:	4622      	mov	r2, r4
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	1cbb      	adds	r3, r7, #2
 80088e8:	4602      	mov	r2, r0
 80088ea:	801a      	strh	r2, [r3, #0]
 80088ec:	463b      	mov	r3, r7
 80088ee:	460a      	mov	r2, r1
 80088f0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 80088f2:	f107 0310 	add.w	r3, r7, #16
 80088f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80088fa:	f107 030f 	add.w	r3, r7, #15
 80088fe:	2200      	movs	r2, #0
 8008900:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890c:	1dba      	adds	r2, r7, #6
 800890e:	8812      	ldrh	r2, [r2, #0]
 8008910:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008912:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008916:	3302      	adds	r3, #2
 8008918:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800891c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008920:	1d3a      	adds	r2, r7, #4
 8008922:	8812      	ldrh	r2, [r2, #0]
 8008924:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008926:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800892a:	3302      	adds	r3, #2
 800892c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8008930:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008934:	1cba      	adds	r2, r7, #2
 8008936:	8812      	ldrh	r2, [r2, #0]
 8008938:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800893a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800893e:	3302      	adds	r3, #2
 8008940:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8008944:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008948:	463a      	mov	r2, r7
 800894a:	8812      	ldrh	r2, [r2, #0]
 800894c:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800894e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008952:	3302      	adds	r3, #2
 8008954:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800895c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008960:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008962:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008966:	3302      	adds	r3, #2
 8008968:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800896c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008970:	2218      	movs	r2, #24
 8008972:	2100      	movs	r1, #0
 8008974:	4618      	mov	r0, r3
 8008976:	f000 fa89 	bl	8008e8c <Osal_MemSet>
  rq.ogf = 0x3f;
 800897a:	233f      	movs	r3, #63	; 0x3f
 800897c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8008980:	f240 1381 	movw	r3, #385	; 0x181
 8008984:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008988:	230f      	movs	r3, #15
 800898a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800898e:	f107 0310 	add.w	r3, r7, #16
 8008992:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008996:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800899a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800899e:	f107 030f 	add.w	r3, r7, #15
 80089a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089a6:	2301      	movs	r3, #1
 80089a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089b0:	2100      	movs	r1, #0
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 f92e 	bl	8008c14 <hci_send_req>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	da01      	bge.n	80089c2 <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 80089be:	23ff      	movs	r3, #255	; 0xff
 80089c0:	e002      	b.n	80089c8 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 80089c2:	f107 030f 	add.w	r3, r7, #15
 80089c6:	781b      	ldrb	r3, [r3, #0]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080089d4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089da:	f3ef 8310 	mrs	r3, PRIMASK
 80089de:	60fb      	str	r3, [r7, #12]
  return(result);
 80089e0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80089e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089e4:	b672      	cpsid	i
}
 80089e6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80089e8:	1cbb      	adds	r3, r7, #2
 80089ea:	4619      	mov	r1, r3
 80089ec:	4812      	ldr	r0, [pc, #72]	; (8008a38 <DbgTrace_TxCpltCallback+0x64>)
 80089ee:	f001 f82a 	bl	8009a46 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80089f2:	1cbb      	adds	r3, r7, #2
 80089f4:	4619      	mov	r1, r3
 80089f6:	4810      	ldr	r0, [pc, #64]	; (8008a38 <DbgTrace_TxCpltCallback+0x64>)
 80089f8:	f001 f919 	bl	8009c2e <CircularQueue_Sense>
 80089fc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00c      	beq.n	8008a1e <DbgTrace_TxCpltCallback+0x4a>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f383 8810 	msr	PRIMASK, r3
}
 8008a0e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8008a10:	887b      	ldrh	r3, [r7, #2]
 8008a12:	4a0a      	ldr	r2, [pc, #40]	; (8008a3c <DbgTrace_TxCpltCallback+0x68>)
 8008a14:	4619      	mov	r1, r3
 8008a16:	6938      	ldr	r0, [r7, #16]
 8008a18:	f7f7 feaf 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8008a1c:	e008      	b.n	8008a30 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8008a1e:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <DbgTrace_TxCpltCallback+0x6c>)
 8008a20:	2201      	movs	r2, #1
 8008a22:	701a      	strb	r2, [r3, #0]
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f383 8810 	msr	PRIMASK, r3
}
 8008a2e:	bf00      	nop
}
 8008a30:	bf00      	nop
 8008a32:	3718      	adds	r7, #24
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	2000024c 	.word	0x2000024c
 8008a3c:	080089d5 	.word	0x080089d5
 8008a40:	2000003d 	.word	0x2000003d

08008a44 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8008a4a:	f7f7 fe90 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8008a4e:	2302      	movs	r3, #2
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2300      	movs	r3, #0
 8008a54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a58:	4903      	ldr	r1, [pc, #12]	; (8008a68 <DbgTraceInit+0x24>)
 8008a5a:	4804      	ldr	r0, [pc, #16]	; (8008a6c <DbgTraceInit+0x28>)
 8008a5c:	f000 fd9a 	bl	8009594 <CircularQueue_Init>
#endif 
#endif
  return;
 8008a60:	bf00      	nop
}
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	2000026c 	.word	0x2000026c
 8008a6c:	2000024c 	.word	0x2000024c

08008a70 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 f805 	bl	8008a90 <DbgTraceWrite>
 8008a86:	4603      	mov	r3, r0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08a      	sub	sp, #40	; 0x28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8008aa6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8008aa8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab0:	d102      	bne.n	8008ab8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab6:	e037      	b.n	8008b28 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d006      	beq.n	8008acc <DbgTraceWrite+0x3c>
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d003      	beq.n	8008acc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8008ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8008aca:	e02d      	b.n	8008b28 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d02a      	beq.n	8008b28 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8008ad6:	b672      	cpsid	i
}
 8008ad8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	2301      	movs	r3, #1
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	4814      	ldr	r0, [pc, #80]	; (8008b34 <DbgTraceWrite+0xa4>)
 8008ae4:	f000 fd88 	bl	80095f8 <CircularQueue_Add>
 8008ae8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d015      	beq.n	8008b1c <DbgTraceWrite+0x8c>
 8008af0:	4b11      	ldr	r3, [pc, #68]	; (8008b38 <DbgTraceWrite+0xa8>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d010      	beq.n	8008b1c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8008afa:	4b0f      	ldr	r3, [pc, #60]	; (8008b38 <DbgTraceWrite+0xa8>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	701a      	strb	r2, [r3, #0]
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	f383 8810 	msr	PRIMASK, r3
}
 8008b0a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	4a0a      	ldr	r2, [pc, #40]	; (8008b3c <DbgTraceWrite+0xac>)
 8008b12:	4619      	mov	r1, r3
 8008b14:	69f8      	ldr	r0, [r7, #28]
 8008b16:	f7f7 fe30 	bl	800077a <DbgOutputTraces>
 8008b1a:	e005      	b.n	8008b28 <DbgTraceWrite+0x98>
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f383 8810 	msr	PRIMASK, r3
}
 8008b26:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8008b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3728      	adds	r7, #40	; 0x28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	2000024c 	.word	0x2000024c
 8008b38:	2000003d 	.word	0x2000003d
 8008b3c:	080089d5 	.word	0x080089d5

08008b40 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	4a08      	ldr	r2, [pc, #32]	; (8008b70 <hci_init+0x30>)
 8008b50:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008b52:	4a08      	ldr	r2, [pc, #32]	; (8008b74 <hci_init+0x34>)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008b58:	4806      	ldr	r0, [pc, #24]	; (8008b74 <hci_init+0x34>)
 8008b5a:	f000 f973 	bl	8008e44 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f8d4 	bl	8008d10 <TlInit>

  return;
 8008b68:	bf00      	nop
}
 8008b6a:	3708      	adds	r7, #8
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20001294 	.word	0x20001294
 8008b74:	2000126c 	.word	0x2000126c

08008b78 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008b7e:	4822      	ldr	r0, [pc, #136]	; (8008c08 <hci_user_evt_proc+0x90>)
 8008b80:	f000 fc5a 	bl	8009438 <LST_is_empty>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d12b      	bne.n	8008be2 <hci_user_evt_proc+0x6a>
 8008b8a:	4b20      	ldr	r3, [pc, #128]	; (8008c0c <hci_user_evt_proc+0x94>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d027      	beq.n	8008be2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008b92:	f107 030c 	add.w	r3, r7, #12
 8008b96:	4619      	mov	r1, r3
 8008b98:	481b      	ldr	r0, [pc, #108]	; (8008c08 <hci_user_evt_proc+0x90>)
 8008b9a:	f000 fcdc 	bl	8009556 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8008b9e:	4b1c      	ldr	r3, [pc, #112]	; (8008c10 <hci_user_evt_proc+0x98>)
 8008ba0:	69db      	ldr	r3, [r3, #28]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00c      	beq.n	8008bc0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8008baa:	2301      	movs	r3, #1
 8008bac:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008bae:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <hci_user_evt_proc+0x98>)
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	1d3a      	adds	r2, r7, #4
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008bb8:	793a      	ldrb	r2, [r7, #4]
 8008bba:	4b14      	ldr	r3, [pc, #80]	; (8008c0c <hci_user_evt_proc+0x94>)
 8008bbc:	701a      	strb	r2, [r3, #0]
 8008bbe:	e002      	b.n	8008bc6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008bc0:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <hci_user_evt_proc+0x94>)
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008bc6:	4b11      	ldr	r3, [pc, #68]	; (8008c0c <hci_user_evt_proc+0x94>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d004      	beq.n	8008bd8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f001 fb79 	bl	800a2c8 <TL_MM_EvtDone>
 8008bd6:	e004      	b.n	8008be2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	480a      	ldr	r0, [pc, #40]	; (8008c08 <hci_user_evt_proc+0x90>)
 8008bde:	f000 fc4d 	bl	800947c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008be2:	4809      	ldr	r0, [pc, #36]	; (8008c08 <hci_user_evt_proc+0x90>)
 8008be4:	f000 fc28 	bl	8009438 <LST_is_empty>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d107      	bne.n	8008bfe <hci_user_evt_proc+0x86>
 8008bee:	4b07      	ldr	r3, [pc, #28]	; (8008c0c <hci_user_evt_proc+0x94>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008bf6:	4804      	ldr	r0, [pc, #16]	; (8008c08 <hci_user_evt_proc+0x90>)
 8008bf8:	f7fa f95a 	bl	8002eb0 <hci_notify_asynch_evt>
  }


  return;
 8008bfc:	bf00      	nop
 8008bfe:	bf00      	nop
}
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	200001dc 	.word	0x200001dc
 8008c0c:	200001e8 	.word	0x200001e8
 8008c10:	2000126c 	.word	0x2000126c

08008c14 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b088      	sub	sp, #32
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008c20:	2000      	movs	r0, #0
 8008c22:	f000 f8cb 	bl	8008dbc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008c26:	2300      	movs	r3, #0
 8008c28:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	885b      	ldrh	r3, [r3, #2]
 8008c2e:	b21b      	sxth	r3, r3
 8008c30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c34:	b21a      	sxth	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	029b      	lsls	r3, r3, #10
 8008c3c:	b21b      	sxth	r3, r3
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	b21b      	sxth	r3, r3
 8008c42:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	b2d9      	uxtb	r1, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	8bbb      	ldrh	r3, [r7, #28]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 f88d 	bl	8008d70 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008c56:	e04e      	b.n	8008cf6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008c58:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008c5c:	f7fa f93f 	bl	8002ede <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008c60:	e043      	b.n	8008cea <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008c62:	f107 030c 	add.w	r3, r7, #12
 8008c66:	4619      	mov	r1, r3
 8008c68:	4828      	ldr	r0, [pc, #160]	; (8008d0c <hci_send_req+0xf8>)
 8008c6a:	f000 fc74 	bl	8009556 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	7a5b      	ldrb	r3, [r3, #9]
 8008c72:	2b0f      	cmp	r3, #15
 8008c74:	d114      	bne.n	8008ca0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	330b      	adds	r3, #11
 8008c7a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	885b      	ldrh	r3, [r3, #2]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	8bba      	ldrh	r2, [r7, #28]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d104      	bne.n	8008c92 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	7812      	ldrb	r2, [r2, #0]
 8008c90:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d027      	beq.n	8008cea <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	77fb      	strb	r3, [r7, #31]
 8008c9e:	e024      	b.n	8008cea <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	330b      	adds	r3, #11
 8008ca4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	8bba      	ldrh	r2, [r7, #28]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d114      	bne.n	8008cde <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	7a9b      	ldrb	r3, [r3, #10]
 8008cb8:	3b03      	subs	r3, #3
 8008cba:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	695a      	ldr	r2, [r3, #20]
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	bfa8      	it	ge
 8008cc6:	461a      	movge	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6918      	ldr	r0, [r3, #16]
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	1cd9      	adds	r1, r3, #3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f001 fe41 	bl	800a960 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008cea:	4808      	ldr	r0, [pc, #32]	; (8008d0c <hci_send_req+0xf8>)
 8008cec:	f000 fba4 	bl	8009438 <LST_is_empty>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d0b5      	beq.n	8008c62 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008cf6:	7ffb      	ldrb	r3, [r7, #31]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d0ad      	beq.n	8008c58 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008cfc:	2001      	movs	r0, #1
 8008cfe:	f000 f85d 	bl	8008dbc <NotifyCmdStatus>

  return 0;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3720      	adds	r7, #32
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	2000128c 	.word	0x2000128c

08008d10 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008d18:	480f      	ldr	r0, [pc, #60]	; (8008d58 <TlInit+0x48>)
 8008d1a:	f000 fb7d 	bl	8009418 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008d1e:	4a0f      	ldr	r2, [pc, #60]	; (8008d5c <TlInit+0x4c>)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008d24:	480e      	ldr	r0, [pc, #56]	; (8008d60 <TlInit+0x50>)
 8008d26:	f000 fb77 	bl	8009418 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008d2a:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <TlInit+0x54>)
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008d30:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <TlInit+0x58>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00a      	beq.n	8008d4e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <TlInit+0x5c>)
 8008d3e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <TlInit+0x58>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f107 0208 	add.w	r2, r7, #8
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4798      	blx	r3
  }

  return;
 8008d4c:	bf00      	nop
 8008d4e:	bf00      	nop
}
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	2000128c 	.word	0x2000128c
 8008d5c:	200001e4 	.word	0x200001e4
 8008d60:	200001dc 	.word	0x200001dc
 8008d64:	200001e8 	.word	0x200001e8
 8008d68:	2000126c 	.word	0x2000126c
 8008d6c:	08008dfd 	.word	0x08008dfd

08008d70 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	603a      	str	r2, [r7, #0]
 8008d7a:	80fb      	strh	r3, [r7, #6]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <SendCmd+0x44>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	88fa      	ldrh	r2, [r7, #6]
 8008d86:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008d8a:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <SendCmd+0x44>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	797a      	ldrb	r2, [r7, #5]
 8008d90:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008d92:	4b08      	ldr	r3, [pc, #32]	; (8008db4 <SendCmd+0x44>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	330c      	adds	r3, #12
 8008d98:	797a      	ldrb	r2, [r7, #5]
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f001 fddf 	bl	800a960 <memcpy>

  hciContext.io.Send(0,0);
 8008da2:	4b05      	ldr	r3, [pc, #20]	; (8008db8 <SendCmd+0x48>)
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	2100      	movs	r1, #0
 8008da8:	2000      	movs	r0, #0
 8008daa:	4798      	blx	r3

  return;
 8008dac:	bf00      	nop
}
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200001e4 	.word	0x200001e4
 8008db8:	2000126c 	.word	0x2000126c

08008dbc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d108      	bne.n	8008dde <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008dcc:	4b0a      	ldr	r3, [pc, #40]	; (8008df8 <NotifyCmdStatus+0x3c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00d      	beq.n	8008df0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008dd4:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <NotifyCmdStatus+0x3c>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2000      	movs	r0, #0
 8008dda:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008ddc:	e008      	b.n	8008df0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008dde:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <NotifyCmdStatus+0x3c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d004      	beq.n	8008df0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008de6:	4b04      	ldr	r3, [pc, #16]	; (8008df8 <NotifyCmdStatus+0x3c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2001      	movs	r0, #1
 8008dec:	4798      	blx	r3
  return;
 8008dee:	bf00      	nop
 8008df0:	bf00      	nop
}
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20001294 	.word	0x20001294

08008dfc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	7a5b      	ldrb	r3, [r3, #9]
 8008e08:	2b0f      	cmp	r3, #15
 8008e0a:	d003      	beq.n	8008e14 <TlEvtReceived+0x18>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	7a5b      	ldrb	r3, [r3, #9]
 8008e10:	2b0e      	cmp	r3, #14
 8008e12:	d107      	bne.n	8008e24 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	4809      	ldr	r0, [pc, #36]	; (8008e3c <TlEvtReceived+0x40>)
 8008e18:	f000 fb56 	bl	80094c8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f7fa f853 	bl	8002ec8 <hci_cmd_resp_release>
 8008e22:	e006      	b.n	8008e32 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008e24:	6879      	ldr	r1, [r7, #4]
 8008e26:	4806      	ldr	r0, [pc, #24]	; (8008e40 <TlEvtReceived+0x44>)
 8008e28:	f000 fb4e 	bl	80094c8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008e2c:	4804      	ldr	r0, [pc, #16]	; (8008e40 <TlEvtReceived+0x44>)
 8008e2e:	f7fa f83f 	bl	8002eb0 <hci_notify_asynch_evt>
  }

  return;
 8008e32:	bf00      	nop
}
 8008e34:	3708      	adds	r7, #8
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	2000128c 	.word	0x2000128c
 8008e40:	200001dc 	.word	0x200001dc

08008e44 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a05      	ldr	r2, [pc, #20]	; (8008e64 <hci_register_io_bus+0x20>)
 8008e50:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a04      	ldr	r2, [pc, #16]	; (8008e68 <hci_register_io_bus+0x24>)
 8008e56:	611a      	str	r2, [r3, #16]

  return;
 8008e58:	bf00      	nop
}
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	0800a041 	.word	0x0800a041
 8008e68:	0800a0a9 	.word	0x0800a0a9

08008e6c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	68b9      	ldr	r1, [r7, #8]
 8008e7c:	68f8      	ldr	r0, [r7, #12]
 8008e7e:	f001 fd6f 	bl	800a960 <memcpy>
 8008e82:	4603      	mov	r3, r0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	68b9      	ldr	r1, [r7, #8]
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f001 fd6d 	bl	800a97c <memset>
 8008ea2:	4603      	mov	r3, r0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3710      	adds	r7, #16
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008eb6:	4b0f      	ldr	r3, [pc, #60]	; (8008ef4 <OTP_Read+0x48>)
 8008eb8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008eba:	e002      	b.n	8008ec2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	3b08      	subs	r3, #8
 8008ec0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	3307      	adds	r3, #7
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	79fa      	ldrb	r2, [r7, #7]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d003      	beq.n	8008ed6 <OTP_Read+0x2a>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <OTP_Read+0x4c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d1f2      	bne.n	8008ebc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3307      	adds	r3, #7
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	79fa      	ldrb	r2, [r7, #7]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d001      	beq.n	8008ee6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	1fff73f8 	.word	0x1fff73f8
 8008ef8:	1fff7000 	.word	0x1fff7000

08008efc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8008f04:	2300      	movs	r3, #0
 8008f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2bff      	cmp	r3, #255	; 0xff
 8008f16:	d14f      	bne.n	8008fb8 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	3302      	adds	r3, #2
 8008f1c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	881b      	ldrh	r3, [r3, #0]
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	461a      	mov	r2, r3
 8008f26:	f640 4301 	movw	r3, #3073	; 0xc01
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d140      	bne.n	8008fb0 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	3302      	adds	r3, #2
 8008f32:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	885b      	ldrh	r3, [r3, #2]
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4b22      	ldr	r3, [pc, #136]	; (8008fc8 <PeerToPeer_Event_Handler+0xcc>)
 8008f3e:	889b      	ldrh	r3, [r3, #4]
 8008f40:	3302      	adds	r3, #2
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d118      	bne.n	8008f78 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8008f46:	2301      	movs	r3, #1
 8008f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	7a1b      	ldrb	r3, [r3, #8]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008f5c:	f107 0308 	add.w	r3, r7, #8
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7f9 ffff 	bl	8002f64 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8008f66:	e025      	b.n	8008fb4 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008f6c:	f107 0308 	add.w	r3, r7, #8
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f9 fff7 	bl	8002f64 <P2PS_STM_App_Notification>
        break;
 8008f76:	e01d      	b.n	8008fb4 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	885b      	ldrh	r3, [r3, #2]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	461a      	mov	r2, r3
 8008f80:	4b11      	ldr	r3, [pc, #68]	; (8008fc8 <PeerToPeer_Event_Handler+0xcc>)
 8008f82:	885b      	ldrh	r3, [r3, #2]
 8008f84:	3301      	adds	r3, #1
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d114      	bne.n	8008fb4 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8008f8a:	4810      	ldr	r0, [pc, #64]	; (8008fcc <PeerToPeer_Event_Handler+0xd0>)
 8008f8c:	f001 fd84 	bl	800aa98 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008f90:	2303      	movs	r3, #3
 8008f92:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	88db      	ldrh	r3, [r3, #6]
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8008fa4:	f107 0308 	add.w	r3, r7, #8
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7f9 ffdb 	bl	8002f64 <P2PS_STM_App_Notification>
        break;
 8008fae:	e001      	b.n	8008fb4 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 8008fb0:	bf00      	nop
 8008fb2:	e002      	b.n	8008fba <PeerToPeer_Event_Handler+0xbe>
        break;
 8008fb4:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008fb6:	e000      	b.n	8008fba <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 8008fb8:	bf00      	nop
  }

  return(return_value);
 8008fba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3728      	adds	r7, #40	; 0x28
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	200001ec 	.word	0x200001ec
 8008fcc:	0800c0e8 	.word	0x0800c0e8

08008fd0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	; 0x28
 8008fd4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8008fd6:	484a      	ldr	r0, [pc, #296]	; (8009100 <P2PS_STM_Init+0x130>)
 8008fd8:	f000 ff84 	bl	8009ee4 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008fdc:	238f      	movs	r3, #143	; 0x8f
 8008fde:	703b      	strb	r3, [r7, #0]
 8008fe0:	23e5      	movs	r3, #229	; 0xe5
 8008fe2:	707b      	strb	r3, [r7, #1]
 8008fe4:	23b3      	movs	r3, #179	; 0xb3
 8008fe6:	70bb      	strb	r3, [r7, #2]
 8008fe8:	23d5      	movs	r3, #213	; 0xd5
 8008fea:	70fb      	strb	r3, [r7, #3]
 8008fec:	232e      	movs	r3, #46	; 0x2e
 8008fee:	713b      	strb	r3, [r7, #4]
 8008ff0:	237f      	movs	r3, #127	; 0x7f
 8008ff2:	717b      	strb	r3, [r7, #5]
 8008ff4:	234a      	movs	r3, #74	; 0x4a
 8008ff6:	71bb      	strb	r3, [r7, #6]
 8008ff8:	2398      	movs	r3, #152	; 0x98
 8008ffa:	71fb      	strb	r3, [r7, #7]
 8008ffc:	232a      	movs	r3, #42	; 0x2a
 8008ffe:	723b      	strb	r3, [r7, #8]
 8009000:	2348      	movs	r3, #72	; 0x48
 8009002:	727b      	strb	r3, [r7, #9]
 8009004:	237a      	movs	r3, #122	; 0x7a
 8009006:	72bb      	strb	r3, [r7, #10]
 8009008:	23cc      	movs	r3, #204	; 0xcc
 800900a:	72fb      	strb	r3, [r7, #11]
 800900c:	2340      	movs	r3, #64	; 0x40
 800900e:	733b      	strb	r3, [r7, #12]
 8009010:	23fe      	movs	r3, #254	; 0xfe
 8009012:	737b      	strb	r3, [r7, #13]
 8009014:	2300      	movs	r3, #0
 8009016:	73bb      	strb	r3, [r7, #14]
 8009018:	2300      	movs	r3, #0
 800901a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800901c:	4639      	mov	r1, r7
 800901e:	4b39      	ldr	r3, [pc, #228]	; (8009104 <P2PS_STM_Init+0x134>)
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	2308      	movs	r3, #8
 8009024:	2201      	movs	r2, #1
 8009026:	2002      	movs	r0, #2
 8009028:	f7ff f833 	bl	8008092 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800902c:	2319      	movs	r3, #25
 800902e:	703b      	strb	r3, [r7, #0]
 8009030:	23ed      	movs	r3, #237	; 0xed
 8009032:	707b      	strb	r3, [r7, #1]
 8009034:	2382      	movs	r3, #130	; 0x82
 8009036:	70bb      	strb	r3, [r7, #2]
 8009038:	23ae      	movs	r3, #174	; 0xae
 800903a:	70fb      	strb	r3, [r7, #3]
 800903c:	23ed      	movs	r3, #237	; 0xed
 800903e:	713b      	strb	r3, [r7, #4]
 8009040:	2321      	movs	r3, #33	; 0x21
 8009042:	717b      	strb	r3, [r7, #5]
 8009044:	234c      	movs	r3, #76	; 0x4c
 8009046:	71bb      	strb	r3, [r7, #6]
 8009048:	239d      	movs	r3, #157	; 0x9d
 800904a:	71fb      	strb	r3, [r7, #7]
 800904c:	2341      	movs	r3, #65	; 0x41
 800904e:	723b      	strb	r3, [r7, #8]
 8009050:	2345      	movs	r3, #69	; 0x45
 8009052:	727b      	strb	r3, [r7, #9]
 8009054:	2322      	movs	r3, #34	; 0x22
 8009056:	72bb      	strb	r3, [r7, #10]
 8009058:	238e      	movs	r3, #142	; 0x8e
 800905a:	72fb      	strb	r3, [r7, #11]
 800905c:	2341      	movs	r3, #65	; 0x41
 800905e:	733b      	strb	r3, [r7, #12]
 8009060:	23fe      	movs	r3, #254	; 0xfe
 8009062:	737b      	strb	r3, [r7, #13]
 8009064:	2300      	movs	r3, #0
 8009066:	73bb      	strb	r3, [r7, #14]
 8009068:	2300      	movs	r3, #0
 800906a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800906c:	4b25      	ldr	r3, [pc, #148]	; (8009104 <P2PS_STM_Init+0x134>)
 800906e:	8818      	ldrh	r0, [r3, #0]
 8009070:	463a      	mov	r2, r7
 8009072:	4b25      	ldr	r3, [pc, #148]	; (8009108 <P2PS_STM_Init+0x138>)
 8009074:	9305      	str	r3, [sp, #20]
 8009076:	2301      	movs	r3, #1
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	230a      	movs	r3, #10
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	2301      	movs	r3, #1
 8009080:	9302      	str	r3, [sp, #8]
 8009082:	2300      	movs	r3, #0
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	2306      	movs	r3, #6
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	2302      	movs	r3, #2
 800908c:	2102      	movs	r1, #2
 800908e:	f7ff f8af 	bl	80081f0 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8009092:	2319      	movs	r3, #25
 8009094:	703b      	strb	r3, [r7, #0]
 8009096:	23ed      	movs	r3, #237	; 0xed
 8009098:	707b      	strb	r3, [r7, #1]
 800909a:	2382      	movs	r3, #130	; 0x82
 800909c:	70bb      	strb	r3, [r7, #2]
 800909e:	23ae      	movs	r3, #174	; 0xae
 80090a0:	70fb      	strb	r3, [r7, #3]
 80090a2:	23ed      	movs	r3, #237	; 0xed
 80090a4:	713b      	strb	r3, [r7, #4]
 80090a6:	2321      	movs	r3, #33	; 0x21
 80090a8:	717b      	strb	r3, [r7, #5]
 80090aa:	234c      	movs	r3, #76	; 0x4c
 80090ac:	71bb      	strb	r3, [r7, #6]
 80090ae:	239d      	movs	r3, #157	; 0x9d
 80090b0:	71fb      	strb	r3, [r7, #7]
 80090b2:	2341      	movs	r3, #65	; 0x41
 80090b4:	723b      	strb	r3, [r7, #8]
 80090b6:	2345      	movs	r3, #69	; 0x45
 80090b8:	727b      	strb	r3, [r7, #9]
 80090ba:	2322      	movs	r3, #34	; 0x22
 80090bc:	72bb      	strb	r3, [r7, #10]
 80090be:	238e      	movs	r3, #142	; 0x8e
 80090c0:	72fb      	strb	r3, [r7, #11]
 80090c2:	2342      	movs	r3, #66	; 0x42
 80090c4:	733b      	strb	r3, [r7, #12]
 80090c6:	23fe      	movs	r3, #254	; 0xfe
 80090c8:	737b      	strb	r3, [r7, #13]
 80090ca:	2300      	movs	r3, #0
 80090cc:	73bb      	strb	r3, [r7, #14]
 80090ce:	2300      	movs	r3, #0
 80090d0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80090d2:	4b0c      	ldr	r3, [pc, #48]	; (8009104 <P2PS_STM_Init+0x134>)
 80090d4:	8818      	ldrh	r0, [r3, #0]
 80090d6:	463a      	mov	r2, r7
 80090d8:	4b0c      	ldr	r3, [pc, #48]	; (800910c <P2PS_STM_Init+0x13c>)
 80090da:	9305      	str	r3, [sp, #20]
 80090dc:	2301      	movs	r3, #1
 80090de:	9304      	str	r3, [sp, #16]
 80090e0:	230a      	movs	r3, #10
 80090e2:	9303      	str	r3, [sp, #12]
 80090e4:	2301      	movs	r3, #1
 80090e6:	9302      	str	r3, [sp, #8]
 80090e8:	2300      	movs	r3, #0
 80090ea:	9301      	str	r3, [sp, #4]
 80090ec:	2310      	movs	r3, #16
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	2302      	movs	r3, #2
 80090f2:	2102      	movs	r1, #2
 80090f4:	f7ff f87c 	bl	80081f0 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80090f8:	bf00      	nop
}
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	08008efd 	.word	0x08008efd
 8009104:	200001ec 	.word	0x200001ec
 8009108:	200001ee 	.word	0x200001ee
 800910c:	200001f0 	.word	0x200001f0

08009110 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af02      	add	r7, sp, #8
 8009116:	4603      	mov	r3, r0
 8009118:	6039      	str	r1, [r7, #0]
 800911a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800911c:	2342      	movs	r3, #66	; 0x42
 800911e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8009120:	88fb      	ldrh	r3, [r7, #6]
 8009122:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8009126:	4293      	cmp	r3, r2
 8009128:	d10c      	bne.n	8009144 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800912a:	4b09      	ldr	r3, [pc, #36]	; (8009150 <P2PS_STM_App_Update_Char+0x40>)
 800912c:	8818      	ldrh	r0, [r3, #0]
 800912e:	4b08      	ldr	r3, [pc, #32]	; (8009150 <P2PS_STM_App_Update_Char+0x40>)
 8009130:	8899      	ldrh	r1, [r3, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	2302      	movs	r3, #2
 8009138:	2200      	movs	r2, #0
 800913a:	f7ff f943 	bl	80083c4 <aci_gatt_update_char_value>
 800913e:	4603      	mov	r3, r0
 8009140:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8009142:	e000      	b.n	8009146 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8009144:	bf00      	nop
  }

  return result;
 8009146:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	200001ec 	.word	0x200001ec

08009154 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800915c:	f107 030c 	add.w	r3, r7, #12
 8009160:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009168:	69fb      	ldr	r3, [r7, #28]
 800916a:	2124      	movs	r1, #36	; 0x24
 800916c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009170:	f000 f888 	bl	8009284 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	330b      	adds	r3, #11
 8009178:	78db      	ldrb	r3, [r3, #3]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3720      	adds	r7, #32
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b088      	sub	sp, #32
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800918a:	f107 030c 	add.w	r3, r7, #12
 800918e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	210f      	movs	r1, #15
 800919a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800919e:	f000 f871 	bl	8009284 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	330b      	adds	r3, #11
 80091a6:	78db      	ldrb	r3, [r3, #3]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3720      	adds	r7, #32
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <shci_init+0x30>)
 80091c0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80091c2:	4a08      	ldr	r2, [pc, #32]	; (80091e4 <shci_init+0x34>)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80091c8:	4806      	ldr	r0, [pc, #24]	; (80091e4 <shci_init+0x34>)
 80091ca:	f000 f911 	bl	80093f0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 f894 	bl	8009300 <TlInit>

  return;
 80091d8:	bf00      	nop
}
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	200012b8 	.word	0x200012b8
 80091e4:	20001298 	.word	0x20001298

080091e8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80091ee:	4822      	ldr	r0, [pc, #136]	; (8009278 <shci_user_evt_proc+0x90>)
 80091f0:	f000 f922 	bl	8009438 <LST_is_empty>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d12b      	bne.n	8009252 <shci_user_evt_proc+0x6a>
 80091fa:	4b20      	ldr	r3, [pc, #128]	; (800927c <shci_user_evt_proc+0x94>)
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d027      	beq.n	8009252 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009202:	f107 030c 	add.w	r3, r7, #12
 8009206:	4619      	mov	r1, r3
 8009208:	481b      	ldr	r0, [pc, #108]	; (8009278 <shci_user_evt_proc+0x90>)
 800920a:	f000 f9a4 	bl	8009556 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800920e:	4b1c      	ldr	r3, [pc, #112]	; (8009280 <shci_user_evt_proc+0x98>)
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00c      	beq.n	8009230 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800921a:	2301      	movs	r3, #1
 800921c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800921e:	4b18      	ldr	r3, [pc, #96]	; (8009280 <shci_user_evt_proc+0x98>)
 8009220:	69db      	ldr	r3, [r3, #28]
 8009222:	1d3a      	adds	r2, r7, #4
 8009224:	4610      	mov	r0, r2
 8009226:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009228:	793a      	ldrb	r2, [r7, #4]
 800922a:	4b14      	ldr	r3, [pc, #80]	; (800927c <shci_user_evt_proc+0x94>)
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	e002      	b.n	8009236 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009230:	4b12      	ldr	r3, [pc, #72]	; (800927c <shci_user_evt_proc+0x94>)
 8009232:	2201      	movs	r2, #1
 8009234:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009236:	4b11      	ldr	r3, [pc, #68]	; (800927c <shci_user_evt_proc+0x94>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	4618      	mov	r0, r3
 8009242:	f001 f841 	bl	800a2c8 <TL_MM_EvtDone>
 8009246:	e004      	b.n	8009252 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4619      	mov	r1, r3
 800924c:	480a      	ldr	r0, [pc, #40]	; (8009278 <shci_user_evt_proc+0x90>)
 800924e:	f000 f915 	bl	800947c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009252:	4809      	ldr	r0, [pc, #36]	; (8009278 <shci_user_evt_proc+0x90>)
 8009254:	f000 f8f0 	bl	8009438 <LST_is_empty>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d107      	bne.n	800926e <shci_user_evt_proc+0x86>
 800925e:	4b07      	ldr	r3, [pc, #28]	; (800927c <shci_user_evt_proc+0x94>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009266:	4804      	ldr	r0, [pc, #16]	; (8009278 <shci_user_evt_proc+0x90>)
 8009268:	f7f7 fb69 	bl	800093e <shci_notify_asynch_evt>
  }


  return;
 800926c:	bf00      	nop
 800926e:	bf00      	nop
}
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	20000200 	.word	0x20000200
 800927c:	20000210 	.word	0x20000210
 8009280:	20001298 	.word	0x20001298

08009284 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	60ba      	str	r2, [r7, #8]
 800928c:	607b      	str	r3, [r7, #4]
 800928e:	4603      	mov	r3, r0
 8009290:	81fb      	strh	r3, [r7, #14]
 8009292:	460b      	mov	r3, r1
 8009294:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009296:	2000      	movs	r0, #0
 8009298:	f000 f864 	bl	8009364 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800929c:	4b16      	ldr	r3, [pc, #88]	; (80092f8 <shci_send+0x74>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	89fa      	ldrh	r2, [r7, #14]
 80092a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <shci_send+0x74>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	7b7a      	ldrb	r2, [r7, #13]
 80092ac:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80092ae:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <shci_send+0x74>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330c      	adds	r3, #12
 80092b4:	7b7a      	ldrb	r2, [r7, #13]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f001 fb51 	bl	800a960 <memcpy>

  shciContext.io.Send(0,0);
 80092be:	4b0f      	ldr	r3, [pc, #60]	; (80092fc <shci_send+0x78>)
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	2100      	movs	r1, #0
 80092c4:	2000      	movs	r0, #0
 80092c6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80092c8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80092cc:	f7f7 fb4e 	bl	800096c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f103 0008 	add.w	r0, r3, #8
 80092d6:	4b08      	ldr	r3, [pc, #32]	; (80092f8 <shci_send+0x74>)
 80092d8:	6819      	ldr	r1, [r3, #0]
 80092da:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <shci_send+0x74>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	789b      	ldrb	r3, [r3, #2]
 80092e0:	3303      	adds	r3, #3
 80092e2:	461a      	mov	r2, r3
 80092e4:	f001 fb3c 	bl	800a960 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80092e8:	2001      	movs	r0, #1
 80092ea:	f000 f83b 	bl	8009364 <Cmd_SetStatus>

  return;
 80092ee:	bf00      	nop
}
 80092f0:	3710      	adds	r7, #16
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	2000020c 	.word	0x2000020c
 80092fc:	20001298 	.word	0x20001298

08009300 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009308:	4a10      	ldr	r2, [pc, #64]	; (800934c <TlInit+0x4c>)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800930e:	4810      	ldr	r0, [pc, #64]	; (8009350 <TlInit+0x50>)
 8009310:	f000 f882 	bl	8009418 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009314:	2001      	movs	r0, #1
 8009316:	f000 f825 	bl	8009364 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800931a:	4b0e      	ldr	r3, [pc, #56]	; (8009354 <TlInit+0x54>)
 800931c:	2201      	movs	r2, #1
 800931e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009320:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <TlInit+0x58>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00c      	beq.n	8009342 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <TlInit+0x5c>)
 800932e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009330:	4b0b      	ldr	r3, [pc, #44]	; (8009360 <TlInit+0x60>)
 8009332:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009334:	4b08      	ldr	r3, [pc, #32]	; (8009358 <TlInit+0x58>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f107 020c 	add.w	r2, r7, #12
 800933c:	4610      	mov	r0, r2
 800933e:	4798      	blx	r3
  }

  return;
 8009340:	bf00      	nop
 8009342:	bf00      	nop
}
 8009344:	3718      	adds	r7, #24
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	2000020c 	.word	0x2000020c
 8009350:	20000200 	.word	0x20000200
 8009354:	20000210 	.word	0x20000210
 8009358:	20001298 	.word	0x20001298
 800935c:	080093b5 	.word	0x080093b5
 8009360:	080093cd 	.word	0x080093cd

08009364 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10b      	bne.n	800938c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8009374:	4b0d      	ldr	r3, [pc, #52]	; (80093ac <Cmd_SetStatus+0x48>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d003      	beq.n	8009384 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800937c:	4b0b      	ldr	r3, [pc, #44]	; (80093ac <Cmd_SetStatus+0x48>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2000      	movs	r0, #0
 8009382:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8009384:	4b0a      	ldr	r3, [pc, #40]	; (80093b0 <Cmd_SetStatus+0x4c>)
 8009386:	2200      	movs	r2, #0
 8009388:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800938a:	e00b      	b.n	80093a4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800938c:	4b08      	ldr	r3, [pc, #32]	; (80093b0 <Cmd_SetStatus+0x4c>)
 800938e:	2201      	movs	r2, #1
 8009390:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8009392:	4b06      	ldr	r3, [pc, #24]	; (80093ac <Cmd_SetStatus+0x48>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d004      	beq.n	80093a4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800939a:	4b04      	ldr	r3, [pc, #16]	; (80093ac <Cmd_SetStatus+0x48>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2001      	movs	r0, #1
 80093a0:	4798      	blx	r3
  return;
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
}
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	200012b8 	.word	0x200012b8
 80093b0:	20000208 	.word	0x20000208

080093b4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80093bc:	2000      	movs	r0, #0
 80093be:	f7f7 faca 	bl	8000956 <shci_cmd_resp_release>

  return;
 80093c2:	bf00      	nop
}
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
	...

080093cc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4805      	ldr	r0, [pc, #20]	; (80093ec <TlUserEvtReceived+0x20>)
 80093d8:	f000 f876 	bl	80094c8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80093dc:	4803      	ldr	r0, [pc, #12]	; (80093ec <TlUserEvtReceived+0x20>)
 80093de:	f7f7 faae 	bl	800093e <shci_notify_asynch_evt>

  return;
 80093e2:	bf00      	nop
}
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	20000200 	.word	0x20000200

080093f0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b083      	sub	sp, #12
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a05      	ldr	r2, [pc, #20]	; (8009410 <shci_register_io_bus+0x20>)
 80093fc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a04      	ldr	r2, [pc, #16]	; (8009414 <shci_register_io_bus+0x24>)
 8009402:	611a      	str	r2, [r3, #16]

  return;
 8009404:	bf00      	nop
}
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	0800a155 	.word	0x0800a155
 8009414:	0800a1a9 	.word	0x0800a1a9

08009418 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	605a      	str	r2, [r3, #4]
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009440:	f3ef 8310 	mrs	r3, PRIMASK
 8009444:	60fb      	str	r3, [r7, #12]
  return(result);
 8009446:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009448:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800944a:	b672      	cpsid	i
}
 800944c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	429a      	cmp	r2, r3
 8009456:	d102      	bne.n	800945e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8009458:	2301      	movs	r3, #1
 800945a:	75fb      	strb	r3, [r7, #23]
 800945c:	e001      	b.n	8009462 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800945e:	2300      	movs	r3, #0
 8009460:	75fb      	strb	r3, [r7, #23]
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	f383 8810 	msr	PRIMASK, r3
}
 800946c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800946e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009470:	4618      	mov	r0, r3
 8009472:	371c      	adds	r7, #28
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009486:	f3ef 8310 	mrs	r3, PRIMASK
 800948a:	60fb      	str	r3, [r7, #12]
  return(result);
 800948c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800948e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009490:	b672      	cpsid	i
}
 8009492:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	683a      	ldr	r2, [r7, #0]
 80094a6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	683a      	ldr	r2, [r7, #0]
 80094ae:	605a      	str	r2, [r3, #4]
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f383 8810 	msr	PRIMASK, r3
}
 80094ba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80094bc:	bf00      	nop
 80094be:	371c      	adds	r7, #28
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b087      	sub	sp, #28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d2:	f3ef 8310 	mrs	r3, PRIMASK
 80094d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80094d8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80094da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094dc:	b672      	cpsid	i
}
 80094de:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685a      	ldr	r2, [r3, #4]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	683a      	ldr	r2, [r7, #0]
 80094f2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	601a      	str	r2, [r3, #0]
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f383 8810 	msr	PRIMASK, r3
}
 8009506:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009508:	bf00      	nop
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009514:	b480      	push	{r7}
 8009516:	b087      	sub	sp, #28
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800951c:	f3ef 8310 	mrs	r3, PRIMASK
 8009520:	60fb      	str	r3, [r7, #12]
  return(result);
 8009522:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009524:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009526:	b672      	cpsid	i
}
 8009528:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	6812      	ldr	r2, [r2, #0]
 8009532:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	6852      	ldr	r2, [r2, #4]
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f383 8810 	msr	PRIMASK, r3
}
 8009548:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800954a:	bf00      	nop
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b086      	sub	sp, #24
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009560:	f3ef 8310 	mrs	r3, PRIMASK
 8009564:	60fb      	str	r3, [r7, #12]
  return(result);
 8009566:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009568:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800956a:	b672      	cpsid	i
}
 800956c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff ffca 	bl	8009514 <LST_remove_node>
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	f383 8810 	msr	PRIMASK, r3
}
 800958a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800958c:	bf00      	nop
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	60b9      	str	r1, [r7, #8]
 800959e:	607a      	str	r2, [r7, #4]
 80095a0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2200      	movs	r2, #0
 80095b2:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	887a      	ldrh	r2, [r7, #2]
 80095ca:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	7e3a      	ldrb	r2, [r7, #24]
 80095d0:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 80095d2:	7e3b      	ldrb	r3, [r7, #24]
 80095d4:	f003 0302 	and.w	r3, r3, #2
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d006      	beq.n	80095ea <CircularQueue_Init+0x56>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	891b      	ldrh	r3, [r3, #8]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d002      	beq.n	80095ea <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 80095e4:	f04f 33ff 	mov.w	r3, #4294967295
 80095e8:	e000      	b.n	80095ec <CircularQueue_Init+0x58>
  }
  return 0;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08e      	sub	sp, #56	; 0x38
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	603b      	str	r3, [r7, #0]
 8009604:	4613      	mov	r3, r2
 8009606:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009608:	2300      	movs	r3, #0
 800960a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800960c:	2300      	movs	r3, #0
 800960e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009610:	2300      	movs	r3, #0
 8009612:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8009614:	2300      	movs	r3, #0
 8009616:	62bb      	str	r3, [r7, #40]	; 0x28
 8009618:	2300      	movs	r3, #0
 800961a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800961c:	2300      	movs	r3, #0
 800961e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009620:	2300      	movs	r3, #0
 8009622:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	891b      	ldrh	r3, [r3, #8]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <CircularQueue_Add+0x38>
 800962c:	2302      	movs	r3, #2
 800962e:	e000      	b.n	8009632 <CircularQueue_Add+0x3a>
 8009630:	2300      	movs	r3, #0
 8009632:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d02a      	beq.n	8009692 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	891b      	ldrh	r3, [r3, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d123      	bne.n	800968c <CircularQueue_Add+0x94>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	691b      	ldr	r3, [r3, #16]
 800964c:	4413      	add	r3, r2
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	b29a      	uxth	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6819      	ldr	r1, [r3, #0]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	1c58      	adds	r0, r3, #1
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	4298      	cmp	r0, r3
 8009662:	d306      	bcc.n	8009672 <CircularQueue_Add+0x7a>
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6918      	ldr	r0, [r3, #16]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	1ac3      	subs	r3, r0, r3
 800966e:	3301      	adds	r3, #1
 8009670:	e002      	b.n	8009678 <CircularQueue_Add+0x80>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	3301      	adds	r3, #1
 8009678:	440b      	add	r3, r1
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	b29b      	uxth	r3, r3
 800967e:	021b      	lsls	r3, r3, #8
 8009680:	b29b      	uxth	r3, r3
 8009682:	4413      	add	r3, r2
 8009684:	b29b      	uxth	r3, r3
 8009686:	3302      	adds	r3, #2
 8009688:	b29b      	uxth	r3, r3
 800968a:	e001      	b.n	8009690 <CircularQueue_Add+0x98>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	891b      	ldrh	r3, [r3, #8]
 8009690:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	891b      	ldrh	r3, [r3, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	891b      	ldrh	r3, [r3, #8]
 800969e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d307      	bcc.n	80096bc <CircularQueue_Add+0xc4>
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	685a      	ldr	r2, [r3, #4]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6919      	ldr	r1, [r3, #16]
 80096b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096b6:	440b      	add	r3, r1
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	e000      	b.n	80096be <CircularQueue_Add+0xc6>
 80096bc:	2300      	movs	r3, #0
 80096be:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80096c0:	88fa      	ldrh	r2, [r7, #6]
 80096c2:	7ffb      	ldrb	r3, [r7, #31]
 80096c4:	4413      	add	r3, r2
 80096c6:	461a      	mov	r2, r3
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	fb03 f302 	mul.w	r3, r3, r2
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d80b      	bhi.n	80096ec <CircularQueue_Add+0xf4>
 80096d4:	88fa      	ldrh	r2, [r7, #6]
 80096d6:	7ffb      	ldrb	r3, [r7, #31]
 80096d8:	4413      	add	r3, r2
 80096da:	461a      	mov	r2, r3
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	fbb3 f1f2 	udiv	r1, r3, r2
 80096e2:	fb02 f201 	mul.w	r2, r2, r1
 80096e6:	1a9b      	subs	r3, r3, r2
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	e000      	b.n	80096ee <CircularQueue_Add+0xf6>
 80096ec:	2300      	movs	r3, #0
 80096ee:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 80096f0:	7dfa      	ldrb	r2, [r7, #23]
 80096f2:	7ffb      	ldrb	r3, [r7, #31]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	bf8c      	ite	hi
 80096f8:	2301      	movhi	r3, #1
 80096fa:	2300      	movls	r3, #0
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009700:	7fbb      	ldrb	r3, [r7, #30]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d008      	beq.n	8009718 <CircularQueue_Add+0x120>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	7f1b      	ldrb	r3, [r3, #28]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <CircularQueue_Add+0x120>
 8009712:	7dfb      	ldrb	r3, [r7, #23]
 8009714:	b29b      	uxth	r3, r3
 8009716:	e000      	b.n	800971a <CircularQueue_Add+0x122>
 8009718:	8bbb      	ldrh	r3, [r7, #28]
 800971a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800971c:	7fbb      	ldrb	r3, [r7, #30]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d008      	beq.n	8009734 <CircularQueue_Add+0x13c>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	7f1b      	ldrb	r3, [r3, #28]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <CircularQueue_Add+0x13c>
 800972e:	7ffb      	ldrb	r3, [r7, #31]
 8009730:	b29b      	uxth	r3, r3
 8009732:	e000      	b.n	8009736 <CircularQueue_Add+0x13e>
 8009734:	8bbb      	ldrh	r3, [r7, #28]
 8009736:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009738:	88fb      	ldrh	r3, [r7, #6]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 817e 	beq.w	8009a3c <CircularQueue_Add+0x444>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	695a      	ldr	r2, [r3, #20]
 8009744:	88f9      	ldrh	r1, [r7, #6]
 8009746:	7ffb      	ldrb	r3, [r7, #31]
 8009748:	440b      	add	r3, r1
 800974a:	4619      	mov	r1, r3
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	fb03 f301 	mul.w	r3, r3, r1
 8009752:	441a      	add	r2, r3
 8009754:	8bbb      	ldrh	r3, [r7, #28]
 8009756:	441a      	add	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	429a      	cmp	r2, r3
 800975e:	f200 816d 	bhi.w	8009a3c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8009762:	2300      	movs	r3, #0
 8009764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009766:	e14a      	b.n	80099fe <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	691a      	ldr	r2, [r3, #16]
 800976c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800976e:	441a      	add	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	685b      	ldr	r3, [r3, #4]
 8009774:	429a      	cmp	r2, r3
 8009776:	d307      	bcc.n	8009788 <CircularQueue_Add+0x190>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	691a      	ldr	r2, [r3, #16]
 800977c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800977e:	441a      	add	r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	e003      	b.n	8009790 <CircularQueue_Add+0x198>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800978e:	4413      	add	r3, r2
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	891b      	ldrh	r3, [r3, #8]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d130      	bne.n	8009804 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681a      	ldr	r2, [r3, #0]
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	1c59      	adds	r1, r3, #1
 80097aa:	6339      	str	r1, [r7, #48]	; 0x30
 80097ac:	4413      	add	r3, r2
 80097ae:	88fa      	ldrh	r2, [r7, #6]
 80097b0:	b2d2      	uxtb	r2, r2
 80097b2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d304      	bcc.n	80097c8 <CircularQueue_Add+0x1d0>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	e000      	b.n	80097ca <CircularQueue_Add+0x1d2>
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80097cc:	88fb      	ldrh	r3, [r7, #6]
 80097ce:	0a1b      	lsrs	r3, r3, #8
 80097d0:	b298      	uxth	r0, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d8:	1c59      	adds	r1, r3, #1
 80097da:	6339      	str	r1, [r7, #48]	; 0x30
 80097dc:	4413      	add	r3, r2
 80097de:	b2c2      	uxtb	r2, r0
 80097e0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d304      	bcc.n	80097f6 <CircularQueue_Add+0x1fe>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	e000      	b.n	80097f8 <CircularQueue_Add+0x200>
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	1c9a      	adds	r2, r3, #2
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8009804:	88fa      	ldrh	r2, [r7, #6]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6859      	ldr	r1, [r3, #4]
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	1acb      	subs	r3, r1, r3
 800980e:	4293      	cmp	r3, r2
 8009810:	bf28      	it	cs
 8009812:	4613      	movcs	r3, r2
 8009814:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8009816:	88fb      	ldrh	r3, [r7, #6]
 8009818:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800981a:	429a      	cmp	r2, r3
 800981c:	d007      	beq.n	800982e <CircularQueue_Add+0x236>
 800981e:	88fb      	ldrh	r3, [r7, #6]
 8009820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009822:	429a      	cmp	r2, r3
 8009824:	d225      	bcs.n	8009872 <CircularQueue_Add+0x27a>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	7f1b      	ldrb	r3, [r3, #28]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d121      	bne.n	8009872 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009834:	18d0      	adds	r0, r2, r3
 8009836:	88fb      	ldrh	r3, [r7, #6]
 8009838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800983a:	fb02 f303 	mul.w	r3, r2, r3
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	4413      	add	r3, r2
 8009842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009844:	4619      	mov	r1, r3
 8009846:	f001 f88b 	bl	800a960 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	695a      	ldr	r2, [r3, #20]
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	441a      	add	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8009856:	2300      	movs	r3, #0
 8009858:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800985e:	88fa      	ldrh	r2, [r7, #6]
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8009866:	7ffb      	ldrb	r3, [r7, #31]
 8009868:	b29a      	uxth	r2, r3
 800986a:	88fb      	ldrh	r3, [r7, #6]
 800986c:	4413      	add	r3, r2
 800986e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009870:	e0a4      	b.n	80099bc <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80a1 	beq.w	80099bc <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	7f1b      	ldrb	r3, [r3, #28]
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	d03a      	beq.n	80098fc <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	891b      	ldrh	r3, [r3, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10d      	bne.n	80098aa <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009894:	3b02      	subs	r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	22ff      	movs	r2, #255	; 0xff
 800989a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	3b01      	subs	r3, #1
 80098a4:	4413      	add	r3, r2
 80098a6:	22ff      	movs	r2, #255	; 0xff
 80098a8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	695a      	ldr	r2, [r3, #20]
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	441a      	add	r2, r3
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80098be:	2300      	movs	r3, #0
 80098c0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	891b      	ldrh	r3, [r3, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d16f      	bne.n	80099aa <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	1c59      	adds	r1, r3, #1
 80098d2:	6339      	str	r1, [r7, #48]	; 0x30
 80098d4:	4413      	add	r3, r2
 80098d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098d8:	b2d2      	uxtb	r2, r2
 80098da:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80098dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098de:	0a18      	lsrs	r0, r3, #8
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	6339      	str	r1, [r7, #48]	; 0x30
 80098ea:	4413      	add	r3, r2
 80098ec:	b2c2      	uxtb	r2, r0
 80098ee:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	1c9a      	adds	r2, r3, #2
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	615a      	str	r2, [r3, #20]
 80098fa:	e056      	b.n	80099aa <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	7f1b      	ldrb	r3, [r3, #28]
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b00      	cmp	r3, #0
 8009906:	d050      	beq.n	80099aa <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	891b      	ldrh	r3, [r3, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d14a      	bne.n	80099a6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009916:	3b02      	subs	r3, #2
 8009918:	4413      	add	r3, r2
 800991a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800991c:	b2d2      	uxtb	r2, r2
 800991e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009922:	0a19      	lsrs	r1, r3, #8
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992a:	3b01      	subs	r3, #1
 800992c:	4413      	add	r3, r2
 800992e:	b2ca      	uxtb	r2, r1
 8009930:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	18d0      	adds	r0, r2, r3
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	4413      	add	r3, r2
 8009946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009948:	4619      	mov	r1, r3
 800994a:	f001 f809 	bl	800a960 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	695a      	ldr	r2, [r3, #20]
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	441a      	add	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800995a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800995e:	88fa      	ldrh	r2, [r7, #6]
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	1c5a      	adds	r2, r3, #1
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8009970:	2300      	movs	r3, #0
 8009972:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997a:	1c59      	adds	r1, r3, #1
 800997c:	6339      	str	r1, [r7, #48]	; 0x30
 800997e:	4413      	add	r3, r2
 8009980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009982:	b2d2      	uxtb	r2, r2
 8009984:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	0a18      	lsrs	r0, r3, #8
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	1c59      	adds	r1, r3, #1
 8009992:	6339      	str	r1, [r7, #48]	; 0x30
 8009994:	4413      	add	r3, r2
 8009996:	b2c2      	uxtb	r2, r0
 8009998:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	695b      	ldr	r3, [r3, #20]
 800999e:	1c9a      	adds	r2, r3, #2
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	615a      	str	r2, [r3, #20]
 80099a4:	e001      	b.n	80099aa <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	e049      	b.n	8009a3e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80099aa:	7ffb      	ldrb	r3, [r7, #31]
 80099ac:	b29a      	uxth	r2, r3
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	4413      	add	r3, r2
 80099b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2200      	movs	r2, #0
 80099ba:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d015      	beq.n	80099ee <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	18d0      	adds	r0, r2, r3
 80099ca:	88fb      	ldrh	r3, [r7, #6]
 80099cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ce:	fb02 f203 	mul.w	r2, r2, r3
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	4413      	add	r3, r2
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	4413      	add	r3, r2
 80099da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099dc:	4619      	mov	r1, r3
 80099de:	f000 ffbf 	bl	800a960 <memcpy>
        q->byteCount += NbBytesToCopy;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	695a      	ldr	r2, [r3, #20]
 80099e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e8:	441a      	add	r2, r3
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 80099f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fa:	3301      	adds	r3, #1
 80099fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	f4ff aeb0 	bcc.w	8009768 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6919      	ldr	r1, [r3, #16]
 8009a10:	7ffb      	ldrb	r3, [r7, #31]
 8009a12:	4419      	add	r1, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	4299      	cmp	r1, r3
 8009a1a:	d307      	bcc.n	8009a2c <CircularQueue_Add+0x434>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6919      	ldr	r1, [r3, #16]
 8009a20:	7ffb      	ldrb	r3, [r7, #31]
 8009a22:	4419      	add	r1, r3
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	1acb      	subs	r3, r1, r3
 8009a2a:	e003      	b.n	8009a34 <CircularQueue_Add+0x43c>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6919      	ldr	r1, [r3, #16]
 8009a30:	7ffb      	ldrb	r3, [r7, #31]
 8009a32:	440b      	add	r3, r1
 8009a34:	4413      	add	r3, r2
 8009a36:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	e000      	b.n	8009a3e <CircularQueue_Add+0x446>
    return NULL;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3738      	adds	r7, #56	; 0x38
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	891b      	ldrh	r3, [r3, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d101      	bne.n	8009a64 <CircularQueue_Remove+0x1e>
 8009a60:	2302      	movs	r3, #2
 8009a62:	e000      	b.n	8009a66 <CircularQueue_Remove+0x20>
 8009a64:	2300      	movs	r3, #0
 8009a66:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 80d4 	beq.w	8009c20 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	891b      	ldrh	r3, [r3, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d121      	bne.n	8009ac4 <CircularQueue_Remove+0x7e>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	4413      	add	r3, r2
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	b29a      	uxth	r2, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6819      	ldr	r1, [r3, #0]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	68db      	ldr	r3, [r3, #12]
 8009a96:	1c58      	adds	r0, r3, #1
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	4298      	cmp	r0, r3
 8009a9e:	d306      	bcc.n	8009aae <CircularQueue_Remove+0x68>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	68d8      	ldr	r0, [r3, #12]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	1ac3      	subs	r3, r0, r3
 8009aaa:	3301      	adds	r3, #1
 8009aac:	e002      	b.n	8009ab4 <CircularQueue_Remove+0x6e>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	440b      	add	r3, r1
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	021b      	lsls	r3, r3, #8
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	4413      	add	r3, r2
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	e001      	b.n	8009ac8 <CircularQueue_Remove+0x82>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	891b      	ldrh	r3, [r3, #8]
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	7f1b      	ldrb	r3, [r3, #28]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d059      	beq.n	8009b8c <CircularQueue_Remove+0x146>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	7f1b      	ldrb	r3, [r3, #28]
 8009adc:	f003 0302 	and.w	r3, r3, #2
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d153      	bne.n	8009b8c <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	881b      	ldrh	r3, [r3, #0]
 8009ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d103      	bne.n	8009af8 <CircularQueue_Remove+0xb2>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	891b      	ldrh	r3, [r3, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d012      	beq.n	8009b1e <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d943      	bls.n	8009b8c <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	891b      	ldrh	r3, [r3, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d03f      	beq.n	8009b8c <CircularQueue_Remove+0x146>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	8912      	ldrh	r2, [r2, #8]
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d236      	bcs.n	8009b8c <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	695a      	ldr	r2, [r3, #20]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	68d9      	ldr	r1, [r3, #12]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	1acb      	subs	r3, r1, r3
 8009b2c:	441a      	add	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	891b      	ldrh	r3, [r3, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d121      	bne.n	8009b84 <CircularQueue_Remove+0x13e>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	4413      	add	r3, r2
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6819      	ldr	r1, [r3, #0]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	1c58      	adds	r0, r3, #1
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	4298      	cmp	r0, r3
 8009b5e:	d306      	bcc.n	8009b6e <CircularQueue_Remove+0x128>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	68d8      	ldr	r0, [r3, #12]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	1ac3      	subs	r3, r0, r3
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	e002      	b.n	8009b74 <CircularQueue_Remove+0x12e>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	440b      	add	r3, r1
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	4413      	add	r3, r2
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	e001      	b.n	8009b88 <CircularQueue_Remove+0x142>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	891b      	ldrh	r3, [r3, #8]
 8009b88:	683a      	ldr	r2, [r7, #0]
 8009b8a:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68d9      	ldr	r1, [r3, #12]
 8009b94:	7afb      	ldrb	r3, [r7, #11]
 8009b96:	4419      	add	r1, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	4299      	cmp	r1, r3
 8009b9e:	d307      	bcc.n	8009bb0 <CircularQueue_Remove+0x16a>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	68d9      	ldr	r1, [r3, #12]
 8009ba4:	7afb      	ldrb	r3, [r7, #11]
 8009ba6:	4419      	add	r1, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	1acb      	subs	r3, r1, r3
 8009bae:	e003      	b.n	8009bb8 <CircularQueue_Remove+0x172>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68d9      	ldr	r1, [r3, #12]
 8009bb4:	7afb      	ldrb	r3, [r7, #11]
 8009bb6:	440b      	add	r3, r1
 8009bb8:	4413      	add	r3, r2
 8009bba:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	8812      	ldrh	r2, [r2, #0]
 8009bc4:	4611      	mov	r1, r2
 8009bc6:	7afa      	ldrb	r2, [r7, #11]
 8009bc8:	440a      	add	r2, r1
 8009bca:	1a9a      	subs	r2, r3, r2
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d01e      	beq.n	8009c16 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	683a      	ldr	r2, [r7, #0]
 8009bde:	8812      	ldrh	r2, [r2, #0]
 8009be0:	441a      	add	r2, r3
 8009be2:	7afb      	ldrb	r3, [r7, #11]
 8009be4:	441a      	add	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d30a      	bcc.n	8009c04 <CircularQueue_Remove+0x1be>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	8812      	ldrh	r2, [r2, #0]
 8009bf6:	441a      	add	r2, r3
 8009bf8:	7afb      	ldrb	r3, [r7, #11]
 8009bfa:	441a      	add	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	1ad3      	subs	r3, r2, r3
 8009c02:	e006      	b.n	8009c12 <CircularQueue_Remove+0x1cc>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	8812      	ldrh	r2, [r2, #0]
 8009c0c:	441a      	add	r2, r3
 8009c0e:	7afb      	ldrb	r3, [r7, #11]
 8009c10:	4413      	add	r3, r2
 8009c12:	687a      	ldr	r2, [r7, #4]
 8009c14:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	1e5a      	subs	r2, r3, #1
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 8009c20:	68fb      	ldr	r3, [r7, #12]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b087      	sub	sp, #28
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	6078      	str	r0, [r7, #4]
 8009c36:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	891b      	ldrh	r3, [r3, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <CircularQueue_Sense+0x1e>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e000      	b.n	8009c4e <CircularQueue_Sense+0x20>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2200      	movs	r2, #0
 8009c54:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 8093 	beq.w	8009d8a <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	891b      	ldrh	r3, [r3, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d121      	bne.n	8009cb6 <CircularQueue_Sense+0x88>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6819      	ldr	r1, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	1c58      	adds	r0, r3, #1
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	685b      	ldr	r3, [r3, #4]
 8009c8e:	4298      	cmp	r0, r3
 8009c90:	d306      	bcc.n	8009ca0 <CircularQueue_Sense+0x72>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	68d8      	ldr	r0, [r3, #12]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	1ac3      	subs	r3, r0, r3
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	e002      	b.n	8009ca6 <CircularQueue_Sense+0x78>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	440b      	add	r3, r1
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	4413      	add	r3, r2
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	e001      	b.n	8009cba <CircularQueue_Sense+0x8c>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	891b      	ldrh	r3, [r3, #8]
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	7f1b      	ldrb	r3, [r3, #28]
 8009cc2:	f003 0301 	and.w	r3, r3, #1
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d04a      	beq.n	8009d60 <CircularQueue_Sense+0x132>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7f1b      	ldrb	r3, [r3, #28]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d144      	bne.n	8009d60 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d103      	bne.n	8009cea <CircularQueue_Sense+0xbc>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	891b      	ldrh	r3, [r3, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d012      	beq.n	8009d10 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68da      	ldr	r2, [r3, #12]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d934      	bls.n	8009d60 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	891b      	ldrh	r3, [r3, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d030      	beq.n	8009d60 <CircularQueue_Sense+0x132>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	8912      	ldrh	r2, [r2, #8]
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d227      	bcs.n	8009d60 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009d10:	2300      	movs	r3, #0
 8009d12:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	891b      	ldrh	r3, [r3, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d11d      	bne.n	8009d58 <CircularQueue_Sense+0x12a>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	4413      	add	r3, r2
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6819      	ldr	r1, [r3, #0]
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	1c58      	adds	r0, r3, #1
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	4298      	cmp	r0, r3
 8009d36:	d305      	bcc.n	8009d44 <CircularQueue_Sense+0x116>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	6938      	ldr	r0, [r7, #16]
 8009d3e:	1ac3      	subs	r3, r0, r3
 8009d40:	3301      	adds	r3, #1
 8009d42:	e001      	b.n	8009d48 <CircularQueue_Sense+0x11a>
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	3301      	adds	r3, #1
 8009d48:	440b      	add	r3, r1
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	021b      	lsls	r3, r3, #8
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	4413      	add	r3, r2
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	e001      	b.n	8009d5c <CircularQueue_Sense+0x12e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	891b      	ldrh	r3, [r3, #8]
 8009d5c:	683a      	ldr	r2, [r7, #0]
 8009d5e:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	7bf9      	ldrb	r1, [r7, #15]
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	4419      	add	r1, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	4299      	cmp	r1, r3
 8009d70:	d306      	bcc.n	8009d80 <CircularQueue_Sense+0x152>
 8009d72:	7bf9      	ldrb	r1, [r7, #15]
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	4419      	add	r1, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	1acb      	subs	r3, r1, r3
 8009d7e:	e002      	b.n	8009d86 <CircularQueue_Sense+0x158>
 8009d80:	7bf9      	ldrb	r1, [r7, #15]
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	440b      	add	r3, r1
 8009d86:	4413      	add	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]
  }
  return x;
 8009d8a:	697b      	ldr	r3, [r7, #20]
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	371c      	adds	r7, #28
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	af00      	add	r7, sp, #0
  return;
 8009d9c:	bf00      	nop
}
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <BLS_Init>:

__weak void BLS_Init( void )
{
 8009da6:	b480      	push	{r7}
 8009da8:	af00      	add	r7, sp, #0
  return;
 8009daa:	bf00      	nop
}
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8009db4:	b480      	push	{r7}
 8009db6:	af00      	add	r7, sp, #0
  return;
 8009db8:	bf00      	nop
}
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc0:	4770      	bx	lr

08009dc2 <DIS_Init>:
__weak void DIS_Init( void )
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	af00      	add	r7, sp, #0
  return;
 8009dc6:	bf00      	nop
}
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0
  return;
 8009dd4:	bf00      	nop
}
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8009dde:	b480      	push	{r7}
 8009de0:	af00      	add	r7, sp, #0
  return;
 8009de2:	bf00      	nop
}
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HRS_Init>:
__weak void HRS_Init( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
  return;
 8009df0:	bf00      	nop
}
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr

08009dfa <HTS_Init>:
__weak void HTS_Init( void )
{
 8009dfa:	b480      	push	{r7}
 8009dfc:	af00      	add	r7, sp, #0
  return;
 8009dfe:	bf00      	nop
}
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <IAS_Init>:
__weak void IAS_Init( void )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	af00      	add	r7, sp, #0
  return;
 8009e0c:	bf00      	nop
}
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr

08009e16 <LLS_Init>:
__weak void LLS_Init( void )
{
 8009e16:	b480      	push	{r7}
 8009e18:	af00      	add	r7, sp, #0
  return;
 8009e1a:	bf00      	nop
}
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <TPS_Init>:
__weak void TPS_Init( void )
{
 8009e24:	b480      	push	{r7}
 8009e26:	af00      	add	r7, sp, #0
  return;
 8009e28:	bf00      	nop
}
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8009e32:	b480      	push	{r7}
 8009e34:	af00      	add	r7, sp, #0
  return;
 8009e36:	bf00      	nop
}
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8009e40:	b480      	push	{r7}
 8009e42:	af00      	add	r7, sp, #0
  return;
 8009e44:	bf00      	nop
}
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <MESH_Init>:
__weak void MESH_Init( void )
{
 8009e4e:	b480      	push	{r7}
 8009e50:	af00      	add	r7, sp, #0
  return;
 8009e52:	bf00      	nop
}
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	af00      	add	r7, sp, #0
  return;
 8009e60:	bf00      	nop
}
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	af00      	add	r7, sp, #0
  return;
 8009e6e:	bf00      	nop
}
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009e7c:	4b04      	ldr	r3, [pc, #16]	; (8009e90 <SVCCTL_Init+0x18>)
 8009e7e:	2200      	movs	r2, #0
 8009e80:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009e82:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <SVCCTL_Init+0x1c>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009e88:	f000 f806 	bl	8009e98 <SVCCTL_SvcInit>

  return;
 8009e8c:	bf00      	nop
}
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	200001f4 	.word	0x200001f4
 8009e94:	200001fc 	.word	0x200001fc

08009e98 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0
  BAS_Init();
 8009e9c:	f7ff ff7c 	bl	8009d98 <BAS_Init>

  BLS_Init();
 8009ea0:	f7ff ff81 	bl	8009da6 <BLS_Init>

  CRS_STM_Init();
 8009ea4:	f7ff ff86 	bl	8009db4 <CRS_STM_Init>

  DIS_Init();
 8009ea8:	f7ff ff8b 	bl	8009dc2 <DIS_Init>

  EDS_STM_Init();
 8009eac:	f7ff ff90 	bl	8009dd0 <EDS_STM_Init>

  HIDS_Init();
 8009eb0:	f7ff ff95 	bl	8009dde <HIDS_Init>

  HRS_Init();
 8009eb4:	f7ff ff9a 	bl	8009dec <HRS_Init>

  HTS_Init();
 8009eb8:	f7ff ff9f 	bl	8009dfa <HTS_Init>

  IAS_Init();
 8009ebc:	f7ff ffa4 	bl	8009e08 <IAS_Init>

  LLS_Init();
 8009ec0:	f7ff ffa9 	bl	8009e16 <LLS_Init>

  TPS_Init();
 8009ec4:	f7ff ffae 	bl	8009e24 <TPS_Init>

  MOTENV_STM_Init();
 8009ec8:	f7ff ffb3 	bl	8009e32 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009ecc:	f7ff f880 	bl	8008fd0 <P2PS_STM_Init>

  OTAS_STM_Init();
 8009ed0:	f7ff ffb6 	bl	8009e40 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009ed4:	f7ff ffc2 	bl	8009e5c <BVOPUS_STM_Init>

  MESH_Init();
 8009ed8:	f7ff ffb9 	bl	8009e4e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009edc:	f7ff ffc5 	bl	8009e6a <SVCCTL_InitCustomSvc>
  
  return;
 8009ee0:	bf00      	nop
}
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009eec:	4b09      	ldr	r3, [pc, #36]	; (8009f14 <SVCCTL_RegisterSvcHandler+0x30>)
 8009eee:	791b      	ldrb	r3, [r3, #4]
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4a08      	ldr	r2, [pc, #32]	; (8009f14 <SVCCTL_RegisterSvcHandler+0x30>)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009efa:	4b06      	ldr	r3, [pc, #24]	; (8009f14 <SVCCTL_RegisterSvcHandler+0x30>)
 8009efc:	791b      	ldrb	r3, [r3, #4]
 8009efe:	3301      	adds	r3, #1
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <SVCCTL_RegisterSvcHandler+0x30>)
 8009f04:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009f06:	bf00      	nop
}
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	200001f4 	.word	0x200001f4

08009f18 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3301      	adds	r3, #1
 8009f24:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009f26:	2300      	movs	r3, #0
 8009f28:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2bff      	cmp	r3, #255	; 0xff
 8009f30:	d125      	bne.n	8009f7e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	3302      	adds	r3, #2
 8009f36:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	881b      	ldrh	r3, [r3, #0]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f46:	d118      	bne.n	8009f7a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	757b      	strb	r3, [r7, #21]
 8009f4c:	e00d      	b.n	8009f6a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009f4e:	7d7b      	ldrb	r3, [r7, #21]
 8009f50:	4a1a      	ldr	r2, [pc, #104]	; (8009fbc <SVCCTL_UserEvtRx+0xa4>)
 8009f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	4798      	blx	r3
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d108      	bne.n	8009f76 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009f64:	7d7b      	ldrb	r3, [r7, #21]
 8009f66:	3301      	adds	r3, #1
 8009f68:	757b      	strb	r3, [r7, #21]
 8009f6a:	4b14      	ldr	r3, [pc, #80]	; (8009fbc <SVCCTL_UserEvtRx+0xa4>)
 8009f6c:	791b      	ldrb	r3, [r3, #4]
 8009f6e:	7d7a      	ldrb	r2, [r7, #21]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d3ec      	bcc.n	8009f4e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009f74:	e002      	b.n	8009f7c <SVCCTL_UserEvtRx+0x64>
              break;
 8009f76:	bf00      	nop
          break;
 8009f78:	e000      	b.n	8009f7c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009f7a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009f7c:	e000      	b.n	8009f80 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009f7e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d00f      	beq.n	8009fa6 <SVCCTL_UserEvtRx+0x8e>
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	dc10      	bgt.n	8009fac <SVCCTL_UserEvtRx+0x94>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d002      	beq.n	8009f94 <SVCCTL_UserEvtRx+0x7c>
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d006      	beq.n	8009fa0 <SVCCTL_UserEvtRx+0x88>
 8009f92:	e00b      	b.n	8009fac <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7f8 fb4f 	bl	8002638 <SVCCTL_App_Notification>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	75bb      	strb	r3, [r7, #22]
      break;
 8009f9e:	e008      	b.n	8009fb2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	75bb      	strb	r3, [r7, #22]
      break;
 8009fa4:	e005      	b.n	8009fb2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	75bb      	strb	r3, [r7, #22]
      break;
 8009faa:	e002      	b.n	8009fb2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009fac:	2301      	movs	r3, #1
 8009fae:	75bb      	strb	r3, [r7, #22]
      break;
 8009fb0:	bf00      	nop
  }

  return (return_status);
 8009fb2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	200001f4 	.word	0x200001f4

08009fc0 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009fc4:	f7f9 fa58 	bl	8003478 <HW_IPCC_Enable>

  return;
 8009fc8:	bf00      	nop
}
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <TL_Init>:


void TL_Init( void )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009fd0:	4b10      	ldr	r3, [pc, #64]	; (800a014 <TL_Init+0x48>)
 8009fd2:	4a11      	ldr	r2, [pc, #68]	; (800a018 <TL_Init+0x4c>)
 8009fd4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009fd6:	4b0f      	ldr	r3, [pc, #60]	; (800a014 <TL_Init+0x48>)
 8009fd8:	4a10      	ldr	r2, [pc, #64]	; (800a01c <TL_Init+0x50>)
 8009fda:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009fdc:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <TL_Init+0x48>)
 8009fde:	4a10      	ldr	r2, [pc, #64]	; (800a020 <TL_Init+0x54>)
 8009fe0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009fe2:	4b0c      	ldr	r3, [pc, #48]	; (800a014 <TL_Init+0x48>)
 8009fe4:	4a0f      	ldr	r2, [pc, #60]	; (800a024 <TL_Init+0x58>)
 8009fe6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <TL_Init+0x48>)
 8009fea:	4a0f      	ldr	r2, [pc, #60]	; (800a028 <TL_Init+0x5c>)
 8009fec:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009fee:	4b09      	ldr	r3, [pc, #36]	; (800a014 <TL_Init+0x48>)
 8009ff0:	4a0e      	ldr	r2, [pc, #56]	; (800a02c <TL_Init+0x60>)
 8009ff2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <TL_Init+0x48>)
 8009ff6:	4a0e      	ldr	r2, [pc, #56]	; (800a030 <TL_Init+0x64>)
 8009ff8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009ffa:	4b06      	ldr	r3, [pc, #24]	; (800a014 <TL_Init+0x48>)
 8009ffc:	4a0d      	ldr	r2, [pc, #52]	; (800a034 <TL_Init+0x68>)
 8009ffe:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a000:	4b04      	ldr	r3, [pc, #16]	; (800a014 <TL_Init+0x48>)
 800a002:	4a0d      	ldr	r2, [pc, #52]	; (800a038 <TL_Init+0x6c>)
 800a004:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a006:	4b03      	ldr	r3, [pc, #12]	; (800a014 <TL_Init+0x48>)
 800a008:	4a0c      	ldr	r2, [pc, #48]	; (800a03c <TL_Init+0x70>)
 800a00a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a00c:	f7f9 fa48 	bl	80034a0 <HW_IPCC_Init>

  return;
 800a010:	bf00      	nop
}
 800a012:	bd80      	pop	{r7, pc}
 800a014:	20030000 	.word	0x20030000
 800a018:	20030134 	.word	0x20030134
 800a01c:	20030154 	.word	0x20030154
 800a020:	20030164 	.word	0x20030164
 800a024:	20030170 	.word	0x20030170
 800a028:	20030178 	.word	0x20030178
 800a02c:	20030180 	.word	0x20030180
 800a030:	20030188 	.word	0x20030188
 800a034:	200301a4 	.word	0x200301a4
 800a038:	200301a8 	.word	0x200301a8
 800a03c:	200301b4 	.word	0x200301b4

0800a040 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a04c:	4811      	ldr	r0, [pc, #68]	; (800a094 <TL_BLE_Init+0x54>)
 800a04e:	f7ff f9e3 	bl	8009418 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a052:	4b11      	ldr	r3, [pc, #68]	; (800a098 <TL_BLE_Init+0x58>)
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	68da      	ldr	r2, [r3, #12]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	4a0c      	ldr	r2, [pc, #48]	; (800a09c <TL_BLE_Init+0x5c>)
 800a06c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	4a08      	ldr	r2, [pc, #32]	; (800a094 <TL_BLE_Init+0x54>)
 800a072:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a074:	f7f9 fa2a 	bl	80034cc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a08      	ldr	r2, [pc, #32]	; (800a0a0 <TL_BLE_Init+0x60>)
 800a07e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	4a07      	ldr	r2, [pc, #28]	; (800a0a4 <TL_BLE_Init+0x64>)
 800a086:	6013      	str	r3, [r2, #0]

  return 0;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	200301d0 	.word	0x200301d0
 800a098:	20030000 	.word	0x20030000
 800a09c:	20030a48 	.word	0x20030a48
 800a0a0:	200012c4 	.word	0x200012c4
 800a0a4:	200012c8 	.word	0x200012c8

0800a0a8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a0b4:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <TL_BLE_SendCmd+0x34>)
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a0be:	4b07      	ldr	r3, [pc, #28]	; (800a0dc <TL_BLE_SendCmd+0x34>)
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	f000 f96c 	bl	800a3a4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a0cc:	f7f9 fa08 	bl	80034e0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20030000 	.word	0x20030000

0800a0e0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a0e6:	e01c      	b.n	800a122 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a0e8:	1d3b      	adds	r3, r7, #4
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4812      	ldr	r0, [pc, #72]	; (800a138 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a0ee:	f7ff fa32 	bl	8009556 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	7a5b      	ldrb	r3, [r3, #9]
 800a0f6:	2b0f      	cmp	r3, #15
 800a0f8:	d003      	beq.n	800a102 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	7a5b      	ldrb	r3, [r3, #9]
 800a0fe:	2b0e      	cmp	r3, #14
 800a100:	d105      	bne.n	800a10e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	4619      	mov	r1, r3
 800a106:	2002      	movs	r0, #2
 800a108:	f000 f94c 	bl	800a3a4 <OutputDbgTrace>
 800a10c:	e004      	b.n	800a118 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	4619      	mov	r1, r3
 800a112:	2003      	movs	r0, #3
 800a114:	f000 f946 	bl	800a3a4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a118:	4b08      	ldr	r3, [pc, #32]	; (800a13c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	4610      	mov	r0, r2
 800a120:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a122:	4805      	ldr	r0, [pc, #20]	; (800a138 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a124:	f7ff f988 	bl	8009438 <LST_is_empty>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0dc      	beq.n	800a0e8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a12e:	bf00      	nop
}
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
 800a136:	bf00      	nop
 800a138:	200301d0 	.word	0x200301d0
 800a13c:	200012c4 	.word	0x200012c4

0800a140 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a144:	4b02      	ldr	r3, [pc, #8]	; (800a150 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4798      	blx	r3

  return;
 800a14a:	bf00      	nop
}
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	200012c8 	.word	0x200012c8

0800a154 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a160:	480d      	ldr	r0, [pc, #52]	; (800a198 <TL_SYS_Init+0x44>)
 800a162:	f7ff f959 	bl	8009418 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a166:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <TL_SYS_Init+0x48>)
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4a08      	ldr	r2, [pc, #32]	; (800a198 <TL_SYS_Init+0x44>)
 800a178:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a17a:	f7f9 f9d3 	bl	8003524 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a07      	ldr	r2, [pc, #28]	; (800a1a0 <TL_SYS_Init+0x4c>)
 800a184:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	4a06      	ldr	r2, [pc, #24]	; (800a1a4 <TL_SYS_Init+0x50>)
 800a18c:	6013      	str	r3, [r2, #0]

  return 0;
 800a18e:	2300      	movs	r3, #0
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	200301d8 	.word	0x200301d8
 800a19c:	20030000 	.word	0x20030000
 800a1a0:	200012cc 	.word	0x200012cc
 800a1a4:	200012d0 	.word	0x200012d0

0800a1a8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b082      	sub	sp, #8
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a1b4:	4b09      	ldr	r3, [pc, #36]	; (800a1dc <TL_SYS_SendCmd+0x34>)
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2210      	movs	r2, #16
 800a1bc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a1be:	4b07      	ldr	r3, [pc, #28]	; (800a1dc <TL_SYS_SendCmd+0x34>)
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	2004      	movs	r0, #4
 800a1c8:	f000 f8ec 	bl	800a3a4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a1cc:	f7f9 f9b4 	bl	8003538 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a1d0:	2300      	movs	r3, #0
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3708      	adds	r7, #8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20030000 	.word	0x20030000

0800a1e0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a1e4:	4b07      	ldr	r3, [pc, #28]	; (800a204 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	2005      	movs	r0, #5
 800a1ee:	f000 f8d9 	bl	800a3a4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a1f2:	4b05      	ldr	r3, [pc, #20]	; (800a208 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a03      	ldr	r2, [pc, #12]	; (800a204 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a1f8:	68d2      	ldr	r2, [r2, #12]
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	4610      	mov	r0, r2
 800a1fe:	4798      	blx	r3

  return;
 800a200:	bf00      	nop
}
 800a202:	bd80      	pop	{r7, pc}
 800a204:	20030000 	.word	0x20030000
 800a208:	200012cc 	.word	0x200012cc

0800a20c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a212:	e00e      	b.n	800a232 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a214:	1d3b      	adds	r3, r7, #4
 800a216:	4619      	mov	r1, r3
 800a218:	480b      	ldr	r0, [pc, #44]	; (800a248 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a21a:	f7ff f99c 	bl	8009556 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4619      	mov	r1, r3
 800a222:	2006      	movs	r0, #6
 800a224:	f000 f8be 	bl	800a3a4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a228:	4b08      	ldr	r3, [pc, #32]	; (800a24c <HW_IPCC_SYS_EvtNot+0x40>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	4610      	mov	r0, r2
 800a230:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a232:	4805      	ldr	r0, [pc, #20]	; (800a248 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a234:	f7ff f900 	bl	8009438 <LST_is_empty>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0ea      	beq.n	800a214 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a23e:	bf00      	nop
}
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	200301d8 	.word	0x200301d8
 800a24c:	200012d0 	.word	0x200012d0

0800a250 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a258:	4817      	ldr	r0, [pc, #92]	; (800a2b8 <TL_MM_Init+0x68>)
 800a25a:	f7ff f8dd 	bl	8009418 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a25e:	4817      	ldr	r0, [pc, #92]	; (800a2bc <TL_MM_Init+0x6c>)
 800a260:	f7ff f8da 	bl	8009418 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a264:	4b16      	ldr	r3, [pc, #88]	; (800a2c0 <TL_MM_Init+0x70>)
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	4a16      	ldr	r2, [pc, #88]	; (800a2c4 <TL_MM_Init+0x74>)
 800a26a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a26c:	4b15      	ldr	r3, [pc, #84]	; (800a2c4 <TL_MM_Init+0x74>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	6892      	ldr	r2, [r2, #8]
 800a274:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a276:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <TL_MM_Init+0x74>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	68d2      	ldr	r2, [r2, #12]
 800a27e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a280:	4b10      	ldr	r3, [pc, #64]	; (800a2c4 <TL_MM_Init+0x74>)
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a0c      	ldr	r2, [pc, #48]	; (800a2b8 <TL_MM_Init+0x68>)
 800a286:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a288:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <TL_MM_Init+0x74>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	6812      	ldr	r2, [r2, #0]
 800a290:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a292:	4b0c      	ldr	r3, [pc, #48]	; (800a2c4 <TL_MM_Init+0x74>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	6852      	ldr	r2, [r2, #4]
 800a29a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <TL_MM_Init+0x74>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6912      	ldr	r2, [r2, #16]
 800a2a4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a2a6:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <TL_MM_Init+0x74>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	6952      	ldr	r2, [r2, #20]
 800a2ae:	619a      	str	r2, [r3, #24]

  return;
 800a2b0:	bf00      	nop
}
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	200301c0 	.word	0x200301c0
 800a2bc:	200012bc 	.word	0x200012bc
 800a2c0:	20030000 	.word	0x20030000
 800a2c4:	200012d4 	.word	0x200012d4

0800a2c8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a2d0:	6879      	ldr	r1, [r7, #4]
 800a2d2:	4807      	ldr	r0, [pc, #28]	; (800a2f0 <TL_MM_EvtDone+0x28>)
 800a2d4:	f7ff f8f8 	bl	80094c8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a2d8:	6879      	ldr	r1, [r7, #4]
 800a2da:	2000      	movs	r0, #0
 800a2dc:	f000 f862 	bl	800a3a4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a2e0:	4804      	ldr	r0, [pc, #16]	; (800a2f4 <TL_MM_EvtDone+0x2c>)
 800a2e2:	f7f9 f94f 	bl	8003584 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a2e6:	bf00      	nop
}
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200012bc 	.word	0x200012bc
 800a2f4:	0800a2f9 	.word	0x0800a2f9

0800a2f8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a2fe:	e00c      	b.n	800a31a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a300:	1d3b      	adds	r3, r7, #4
 800a302:	4619      	mov	r1, r3
 800a304:	480a      	ldr	r0, [pc, #40]	; (800a330 <SendFreeBuf+0x38>)
 800a306:	f7ff f926 	bl	8009556 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a30a:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <SendFreeBuf+0x3c>)
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	4611      	mov	r1, r2
 800a314:	4618      	mov	r0, r3
 800a316:	f7ff f8d7 	bl	80094c8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a31a:	4805      	ldr	r0, [pc, #20]	; (800a330 <SendFreeBuf+0x38>)
 800a31c:	f7ff f88c 	bl	8009438 <LST_is_empty>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0ec      	beq.n	800a300 <SendFreeBuf+0x8>
  }

  return;
 800a326:	bf00      	nop
}
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	200012bc 	.word	0x200012bc
 800a334:	20030000 	.word	0x20030000

0800a338 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a33c:	4805      	ldr	r0, [pc, #20]	; (800a354 <TL_TRACES_Init+0x1c>)
 800a33e:	f7ff f86b 	bl	8009418 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a342:	4b05      	ldr	r3, [pc, #20]	; (800a358 <TL_TRACES_Init+0x20>)
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	4a03      	ldr	r2, [pc, #12]	; (800a354 <TL_TRACES_Init+0x1c>)
 800a348:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a34a:	f7f9 f951 	bl	80035f0 <HW_IPCC_TRACES_Init>

  return;
 800a34e:	bf00      	nop
}
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	200301c8 	.word	0x200301c8
 800a358:	20030000 	.word	0x20030000

0800a35c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a362:	e008      	b.n	800a376 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a364:	1d3b      	adds	r3, r7, #4
 800a366:	4619      	mov	r1, r3
 800a368:	4808      	ldr	r0, [pc, #32]	; (800a38c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a36a:	f7ff f8f4 	bl	8009556 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	4618      	mov	r0, r3
 800a372:	f000 f80d 	bl	800a390 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <HW_IPCC_TRACES_EvtNot+0x30>)
 800a378:	f7ff f85e 	bl	8009438 <LST_is_empty>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0f0      	beq.n	800a364 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a382:	bf00      	nop
}
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	200301c8 	.word	0x200301c8

0800a390 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b085      	sub	sp, #20
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	6039      	str	r1, [r7, #0]
 800a3ae:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
 800a3b2:	2b06      	cmp	r3, #6
 800a3b4:	d845      	bhi.n	800a442 <OutputDbgTrace+0x9e>
 800a3b6:	a201      	add	r2, pc, #4	; (adr r2, 800a3bc <OutputDbgTrace+0x18>)
 800a3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3bc:	0800a3d9 	.word	0x0800a3d9
 800a3c0:	0800a3fd 	.word	0x0800a3fd
 800a3c4:	0800a403 	.word	0x0800a403
 800a3c8:	0800a417 	.word	0x0800a417
 800a3cc:	0800a423 	.word	0x0800a423
 800a3d0:	0800a429 	.word	0x0800a429
 800a3d4:	0800a437 	.word	0x0800a437
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	7a5b      	ldrb	r3, [r3, #9]
 800a3e0:	2bff      	cmp	r3, #255	; 0xff
 800a3e2:	d005      	beq.n	800a3f0 <OutputDbgTrace+0x4c>
 800a3e4:	2bff      	cmp	r3, #255	; 0xff
 800a3e6:	dc05      	bgt.n	800a3f4 <OutputDbgTrace+0x50>
 800a3e8:	2b0e      	cmp	r3, #14
 800a3ea:	d005      	beq.n	800a3f8 <OutputDbgTrace+0x54>
 800a3ec:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a3ee:	e001      	b.n	800a3f4 <OutputDbgTrace+0x50>
          break;
 800a3f0:	bf00      	nop
 800a3f2:	e027      	b.n	800a444 <OutputDbgTrace+0xa0>
          break;
 800a3f4:	bf00      	nop
 800a3f6:	e025      	b.n	800a444 <OutputDbgTrace+0xa0>
          break;
 800a3f8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a3fa:	e023      	b.n	800a444 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a400:	e020      	b.n	800a444 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	7a5b      	ldrb	r3, [r3, #9]
 800a40a:	2b0e      	cmp	r3, #14
 800a40c:	d001      	beq.n	800a412 <OutputDbgTrace+0x6e>
 800a40e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a410:	e000      	b.n	800a414 <OutputDbgTrace+0x70>
          break;
 800a412:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a414:	e016      	b.n	800a444 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	7a5b      	ldrb	r3, [r3, #9]
 800a41e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a420:	e010      	b.n	800a444 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a426:	e00d      	b.n	800a444 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	7a5b      	ldrb	r3, [r3, #9]
 800a430:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a432:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a434:	e006      	b.n	800a444 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	7a5b      	ldrb	r3, [r3, #9]
 800a43e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a440:	e000      	b.n	800a444 <OutputDbgTrace+0xa0>

    default:
      break;
 800a442:	bf00      	nop
  }

  return;
 800a444:	bf00      	nop
}
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a454:	4b05      	ldr	r3, [pc, #20]	; (800a46c <UTIL_LPM_Init+0x1c>)
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a45a:	4b05      	ldr	r3, [pc, #20]	; (800a470 <UTIL_LPM_Init+0x20>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a460:	bf00      	nop
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	200012d8 	.word	0x200012d8
 800a470:	200012dc 	.word	0x200012dc

0800a474 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a480:	f3ef 8310 	mrs	r3, PRIMASK
 800a484:	613b      	str	r3, [r7, #16]
  return(result);
 800a486:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a488:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a48a:	b672      	cpsid	i
}
 800a48c:	bf00      	nop
  
  switch(state)
 800a48e:	78fb      	ldrb	r3, [r7, #3]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d008      	beq.n	800a4a6 <UTIL_LPM_SetOffMode+0x32>
 800a494:	2b01      	cmp	r3, #1
 800a496:	d10e      	bne.n	800a4b6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a498:	4b0d      	ldr	r3, [pc, #52]	; (800a4d0 <UTIL_LPM_SetOffMode+0x5c>)
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	4a0b      	ldr	r2, [pc, #44]	; (800a4d0 <UTIL_LPM_SetOffMode+0x5c>)
 800a4a2:	6013      	str	r3, [r2, #0]
      break;
 800a4a4:	e008      	b.n	800a4b8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	43da      	mvns	r2, r3
 800a4aa:	4b09      	ldr	r3, [pc, #36]	; (800a4d0 <UTIL_LPM_SetOffMode+0x5c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	4a07      	ldr	r2, [pc, #28]	; (800a4d0 <UTIL_LPM_SetOffMode+0x5c>)
 800a4b2:	6013      	str	r3, [r2, #0]
      break;
 800a4b4:	e000      	b.n	800a4b8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a4b6:	bf00      	nop
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f383 8810 	msr	PRIMASK, r3
}
 800a4c2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a4c4:	bf00      	nop
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	200012dc 	.word	0x200012dc

0800a4d4 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b08c      	sub	sp, #48	; 0x30
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a4dc:	4b67      	ldr	r3, [pc, #412]	; (800a67c <UTIL_SEQ_Run+0x1a8>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a4e2:	4b66      	ldr	r3, [pc, #408]	; (800a67c <UTIL_SEQ_Run+0x1a8>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	4a64      	ldr	r2, [pc, #400]	; (800a67c <UTIL_SEQ_Run+0x1a8>)
 800a4ec:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a4ee:	e083      	b.n	800a5f8 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a4f4:	e002      	b.n	800a4fc <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a4fc:	4a60      	ldr	r2, [pc, #384]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a504:	4b5f      	ldr	r3, [pc, #380]	; (800a684 <UTIL_SEQ_Run+0x1b0>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	401a      	ands	r2, r3
 800a50a:	4b5c      	ldr	r3, [pc, #368]	; (800a67c <UTIL_SEQ_Run+0x1a8>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4013      	ands	r3, r2
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0f0      	beq.n	800a4f6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a514:	4a5a      	ldr	r2, [pc, #360]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a518:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a51c:	4b59      	ldr	r3, [pc, #356]	; (800a684 <UTIL_SEQ_Run+0x1b0>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	401a      	ands	r2, r3
 800a522:	4b56      	ldr	r3, [pc, #344]	; (800a67c <UTIL_SEQ_Run+0x1a8>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4013      	ands	r3, r2
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a52a:	4a55      	ldr	r2, [pc, #340]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	4413      	add	r3, r2
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a536:	4013      	ands	r3, r2
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d106      	bne.n	800a54a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a53c:	4a50      	ldr	r2, [pc, #320]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a540:	00db      	lsls	r3, r3, #3
 800a542:	4413      	add	r3, r2
 800a544:	f04f 32ff 	mov.w	r2, #4294967295
 800a548:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a54a:	4a4d      	ldr	r2, [pc, #308]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	4413      	add	r3, r2
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a556:	4013      	ands	r3, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 f99d 	bl	800a898 <SEQ_BitPosition>
 800a55e:	4603      	mov	r3, r0
 800a560:	461a      	mov	r2, r3
 800a562:	4b49      	ldr	r3, [pc, #292]	; (800a688 <UTIL_SEQ_Run+0x1b4>)
 800a564:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a566:	4a46      	ldr	r2, [pc, #280]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	00db      	lsls	r3, r3, #3
 800a56c:	4413      	add	r3, r2
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	4b45      	ldr	r3, [pc, #276]	; (800a688 <UTIL_SEQ_Run+0x1b4>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2101      	movs	r1, #1
 800a576:	fa01 f303 	lsl.w	r3, r1, r3
 800a57a:	43db      	mvns	r3, r3
 800a57c:	401a      	ands	r2, r3
 800a57e:	4940      	ldr	r1, [pc, #256]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a582:	00db      	lsls	r3, r3, #3
 800a584:	440b      	add	r3, r1
 800a586:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a588:	f3ef 8310 	mrs	r3, PRIMASK
 800a58c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a58e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a590:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a592:	b672      	cpsid	i
}
 800a594:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a596:	4b3c      	ldr	r3, [pc, #240]	; (800a688 <UTIL_SEQ_Run+0x1b4>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2201      	movs	r2, #1
 800a59c:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a0:	43da      	mvns	r2, r3
 800a5a2:	4b3a      	ldr	r3, [pc, #232]	; (800a68c <UTIL_SEQ_Run+0x1b8>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	4a38      	ldr	r2, [pc, #224]	; (800a68c <UTIL_SEQ_Run+0x1b8>)
 800a5aa:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5b0:	e013      	b.n	800a5da <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a5b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	4a32      	ldr	r2, [pc, #200]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a5b8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a5bc:	4b32      	ldr	r3, [pc, #200]	; (800a688 <UTIL_SEQ_Run+0x1b4>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c6:	43da      	mvns	r2, r3
 800a5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	400a      	ands	r2, r1
 800a5ce:	492c      	ldr	r1, [pc, #176]	; (800a680 <UTIL_SEQ_Run+0x1ac>)
 800a5d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1e8      	bne.n	800a5b2 <UTIL_SEQ_Run+0xde>
 800a5e0:	6a3b      	ldr	r3, [r7, #32]
 800a5e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f383 8810 	msr	PRIMASK, r3
}
 800a5ea:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a5ec:	4b26      	ldr	r3, [pc, #152]	; (800a688 <UTIL_SEQ_Run+0x1b4>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a27      	ldr	r2, [pc, #156]	; (800a690 <UTIL_SEQ_Run+0x1bc>)
 800a5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5f6:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a5f8:	4b24      	ldr	r3, [pc, #144]	; (800a68c <UTIL_SEQ_Run+0x1b8>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	4b21      	ldr	r3, [pc, #132]	; (800a684 <UTIL_SEQ_Run+0x1b0>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	401a      	ands	r2, r3
 800a602:	4b1e      	ldr	r3, [pc, #120]	; (800a67c <UTIL_SEQ_Run+0x1a8>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4013      	ands	r3, r2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d007      	beq.n	800a61c <UTIL_SEQ_Run+0x148>
 800a60c:	4b21      	ldr	r3, [pc, #132]	; (800a694 <UTIL_SEQ_Run+0x1c0>)
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	4b21      	ldr	r3, [pc, #132]	; (800a698 <UTIL_SEQ_Run+0x1c4>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4013      	ands	r3, r2
 800a616:	2b00      	cmp	r3, #0
 800a618:	f43f af6a 	beq.w	800a4f0 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a61c:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <UTIL_SEQ_Run+0x1b4>)
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a624:	f000 f92a 	bl	800a87c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a628:	f3ef 8310 	mrs	r3, PRIMASK
 800a62c:	613b      	str	r3, [r7, #16]
  return(result);
 800a62e:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a630:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a632:	b672      	cpsid	i
}
 800a634:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a636:	4b15      	ldr	r3, [pc, #84]	; (800a68c <UTIL_SEQ_Run+0x1b8>)
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	4b12      	ldr	r3, [pc, #72]	; (800a684 <UTIL_SEQ_Run+0x1b0>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	401a      	ands	r2, r3
 800a640:	4b0e      	ldr	r3, [pc, #56]	; (800a67c <UTIL_SEQ_Run+0x1a8>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4013      	ands	r3, r2
 800a646:	2b00      	cmp	r3, #0
 800a648:	d108      	bne.n	800a65c <UTIL_SEQ_Run+0x188>
 800a64a:	4b12      	ldr	r3, [pc, #72]	; (800a694 <UTIL_SEQ_Run+0x1c0>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b12      	ldr	r3, [pc, #72]	; (800a698 <UTIL_SEQ_Run+0x1c4>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4013      	ands	r3, r2
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800a658:	f7f6 f95d 	bl	8000916 <UTIL_SEQ_Idle>
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	f383 8810 	msr	PRIMASK, r3
}
 800a666:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a668:	f000 f90f 	bl	800a88a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a66c:	4a03      	ldr	r2, [pc, #12]	; (800a67c <UTIL_SEQ_Run+0x1a8>)
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	6013      	str	r3, [r2, #0]

  return;
 800a672:	bf00      	nop
}
 800a674:	3730      	adds	r7, #48	; 0x30
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20000044 	.word	0x20000044
 800a680:	20001370 	.word	0x20001370
 800a684:	20000040 	.word	0x20000040
 800a688:	200012ec 	.word	0x200012ec
 800a68c:	200012e0 	.word	0x200012e0
 800a690:	200012f0 	.word	0x200012f0
 800a694:	200012e4 	.word	0x200012e4
 800a698:	200012e8 	.word	0x200012e8

0800a69c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b088      	sub	sp, #32
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ac:	617b      	str	r3, [r7, #20]
  return(result);
 800a6ae:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a6b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6b2:	b672      	cpsid	i
}
 800a6b4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a6b6:	68f8      	ldr	r0, [r7, #12]
 800a6b8:	f000 f8ee 	bl	800a898 <SEQ_BitPosition>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4a06      	ldr	r2, [pc, #24]	; (800a6dc <UTIL_SEQ_RegTask+0x40>)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	f383 8810 	msr	PRIMASK, r3
}
 800a6d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a6d4:	bf00      	nop
}
 800a6d6:	3720      	adds	r7, #32
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	200012f0 	.word	0x200012f0

0800a6e0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ee:	60fb      	str	r3, [r7, #12]
  return(result);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a6f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6f4:	b672      	cpsid	i
}
 800a6f6:	bf00      	nop

  TaskSet |= TaskId_bm;
 800a6f8:	4b0d      	ldr	r3, [pc, #52]	; (800a730 <UTIL_SEQ_SetTask+0x50>)
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	4a0b      	ldr	r2, [pc, #44]	; (800a730 <UTIL_SEQ_SetTask+0x50>)
 800a702:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a704:	4a0b      	ldr	r2, [pc, #44]	; (800a734 <UTIL_SEQ_SetTask+0x54>)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	431a      	orrs	r2, r3
 800a710:	4908      	ldr	r1, [pc, #32]	; (800a734 <UTIL_SEQ_SetTask+0x54>)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f383 8810 	msr	PRIMASK, r3
}
 800a722:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a724:	bf00      	nop
}
 800a726:	371c      	adds	r7, #28
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr
 800a730:	200012e0 	.word	0x200012e0
 800a734:	20001370 	.word	0x20001370

0800a738 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a738:	b480      	push	{r7}
 800a73a:	b087      	sub	sp, #28
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a740:	f3ef 8310 	mrs	r3, PRIMASK
 800a744:	60fb      	str	r3, [r7, #12]
  return(result);
 800a746:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a748:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a74a:	b672      	cpsid	i
}
 800a74c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	43da      	mvns	r2, r3
 800a752:	4b08      	ldr	r3, [pc, #32]	; (800a774 <UTIL_SEQ_PauseTask+0x3c>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	4013      	ands	r3, r2
 800a758:	4a06      	ldr	r2, [pc, #24]	; (800a774 <UTIL_SEQ_PauseTask+0x3c>)
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	f383 8810 	msr	PRIMASK, r3
}
 800a766:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a768:	bf00      	nop
}
 800a76a:	371c      	adds	r7, #28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	20000040 	.word	0x20000040

0800a778 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a780:	f3ef 8310 	mrs	r3, PRIMASK
 800a784:	60fb      	str	r3, [r7, #12]
  return(result);
 800a786:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a788:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a78a:	b672      	cpsid	i
}
 800a78c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800a78e:	4b09      	ldr	r3, [pc, #36]	; (800a7b4 <UTIL_SEQ_ResumeTask+0x3c>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4313      	orrs	r3, r2
 800a796:	4a07      	ldr	r2, [pc, #28]	; (800a7b4 <UTIL_SEQ_ResumeTask+0x3c>)
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	f383 8810 	msr	PRIMASK, r3
}
 800a7a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a7a6:	bf00      	nop
}
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	20000040 	.word	0x20000040

0800a7b8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b087      	sub	sp, #28
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7c0:	f3ef 8310 	mrs	r3, PRIMASK
 800a7c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a7c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7ca:	b672      	cpsid	i
}
 800a7cc:	bf00      	nop

  EvtSet |= EvtId_bm;
 800a7ce:	4b09      	ldr	r3, [pc, #36]	; (800a7f4 <UTIL_SEQ_SetEvt+0x3c>)
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	4a07      	ldr	r2, [pc, #28]	; (800a7f4 <UTIL_SEQ_SetEvt+0x3c>)
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	f383 8810 	msr	PRIMASK, r3
}
 800a7e4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a7e6:	bf00      	nop
}
 800a7e8:	371c      	adds	r7, #28
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	200012e4 	.word	0x200012e4

0800a7f8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a800:	4b1b      	ldr	r3, [pc, #108]	; (800a870 <UTIL_SEQ_WaitEvt+0x78>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a806:	4b1a      	ldr	r3, [pc, #104]	; (800a870 <UTIL_SEQ_WaitEvt+0x78>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80e:	d102      	bne.n	800a816 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800a810:	2300      	movs	r3, #0
 800a812:	617b      	str	r3, [r7, #20]
 800a814:	e005      	b.n	800a822 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800a816:	4b16      	ldr	r3, [pc, #88]	; (800a870 <UTIL_SEQ_WaitEvt+0x78>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2201      	movs	r2, #1
 800a81c:	fa02 f303 	lsl.w	r3, r2, r3
 800a820:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a822:	4b14      	ldr	r3, [pc, #80]	; (800a874 <UTIL_SEQ_WaitEvt+0x7c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800a828:	4a12      	ldr	r2, [pc, #72]	; (800a874 <UTIL_SEQ_WaitEvt+0x7c>)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800a82e:	e005      	b.n	800a83c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800a830:	4b10      	ldr	r3, [pc, #64]	; (800a874 <UTIL_SEQ_WaitEvt+0x7c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4619      	mov	r1, r3
 800a836:	6978      	ldr	r0, [r7, #20]
 800a838:	f7f6 f874 	bl	8000924 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800a83c:	4b0e      	ldr	r3, [pc, #56]	; (800a878 <UTIL_SEQ_WaitEvt+0x80>)
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <UTIL_SEQ_WaitEvt+0x7c>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4013      	ands	r3, r2
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0f2      	beq.n	800a830 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a84a:	4a09      	ldr	r2, [pc, #36]	; (800a870 <UTIL_SEQ_WaitEvt+0x78>)
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800a850:	4b08      	ldr	r3, [pc, #32]	; (800a874 <UTIL_SEQ_WaitEvt+0x7c>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	43da      	mvns	r2, r3
 800a856:	4b08      	ldr	r3, [pc, #32]	; (800a878 <UTIL_SEQ_WaitEvt+0x80>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4013      	ands	r3, r2
 800a85c:	4a06      	ldr	r2, [pc, #24]	; (800a878 <UTIL_SEQ_WaitEvt+0x80>)
 800a85e:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800a860:	4a04      	ldr	r2, [pc, #16]	; (800a874 <UTIL_SEQ_WaitEvt+0x7c>)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6013      	str	r3, [r2, #0]

  return;
 800a866:	bf00      	nop
}
 800a868:	3718      	adds	r7, #24
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}
 800a86e:	bf00      	nop
 800a870:	200012ec 	.word	0x200012ec
 800a874:	200012e8 	.word	0x200012e8
 800a878:	200012e4 	.word	0x200012e4

0800a87c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a880:	bf00      	nop
}
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a88a:	b480      	push	{r7}
 800a88c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a88e:	bf00      	nop
}
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	0c1b      	lsrs	r3, r3, #16
 800a8a8:	041b      	lsls	r3, r3, #16
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d104      	bne.n	800a8b8 <SEQ_BitPosition+0x20>
 800a8ae:	2310      	movs	r3, #16
 800a8b0:	73fb      	strb	r3, [r7, #15]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	041b      	lsls	r3, r3, #16
 800a8b6:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d105      	bne.n	800a8ce <SEQ_BitPosition+0x36>
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	3308      	adds	r3, #8
 800a8c6:	73fb      	strb	r3, [r7, #15]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	021b      	lsls	r3, r3, #8
 800a8cc:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d105      	bne.n	800a8e4 <SEQ_BitPosition+0x4c>
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	73fb      	strb	r3, [r7, #15]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	011b      	lsls	r3, r3, #4
 800a8e2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	0f1b      	lsrs	r3, r3, #28
 800a8e8:	4a07      	ldr	r2, [pc, #28]	; (800a908 <SEQ_BitPosition+0x70>)
 800a8ea:	5cd2      	ldrb	r2, [r2, r3]
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a8f2:	7bfb      	ldrb	r3, [r7, #15]
 800a8f4:	f1c3 031f 	rsb	r3, r3, #31
 800a8f8:	b2db      	uxtb	r3, r3
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	0800c32c 	.word	0x0800c32c

0800a90c <__errno>:
 800a90c:	4b01      	ldr	r3, [pc, #4]	; (800a914 <__errno+0x8>)
 800a90e:	6818      	ldr	r0, [r3, #0]
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	20000048 	.word	0x20000048

0800a918 <__libc_init_array>:
 800a918:	b570      	push	{r4, r5, r6, lr}
 800a91a:	4d0d      	ldr	r5, [pc, #52]	; (800a950 <__libc_init_array+0x38>)
 800a91c:	4c0d      	ldr	r4, [pc, #52]	; (800a954 <__libc_init_array+0x3c>)
 800a91e:	1b64      	subs	r4, r4, r5
 800a920:	10a4      	asrs	r4, r4, #2
 800a922:	2600      	movs	r6, #0
 800a924:	42a6      	cmp	r6, r4
 800a926:	d109      	bne.n	800a93c <__libc_init_array+0x24>
 800a928:	4d0b      	ldr	r5, [pc, #44]	; (800a958 <__libc_init_array+0x40>)
 800a92a:	4c0c      	ldr	r4, [pc, #48]	; (800a95c <__libc_init_array+0x44>)
 800a92c:	f000 fffa 	bl	800b924 <_init>
 800a930:	1b64      	subs	r4, r4, r5
 800a932:	10a4      	asrs	r4, r4, #2
 800a934:	2600      	movs	r6, #0
 800a936:	42a6      	cmp	r6, r4
 800a938:	d105      	bne.n	800a946 <__libc_init_array+0x2e>
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a940:	4798      	blx	r3
 800a942:	3601      	adds	r6, #1
 800a944:	e7ee      	b.n	800a924 <__libc_init_array+0xc>
 800a946:	f855 3b04 	ldr.w	r3, [r5], #4
 800a94a:	4798      	blx	r3
 800a94c:	3601      	adds	r6, #1
 800a94e:	e7f2      	b.n	800a936 <__libc_init_array+0x1e>
 800a950:	0800c3dc 	.word	0x0800c3dc
 800a954:	0800c3dc 	.word	0x0800c3dc
 800a958:	0800c3dc 	.word	0x0800c3dc
 800a95c:	0800c3e0 	.word	0x0800c3e0

0800a960 <memcpy>:
 800a960:	440a      	add	r2, r1
 800a962:	4291      	cmp	r1, r2
 800a964:	f100 33ff 	add.w	r3, r0, #4294967295
 800a968:	d100      	bne.n	800a96c <memcpy+0xc>
 800a96a:	4770      	bx	lr
 800a96c:	b510      	push	{r4, lr}
 800a96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a972:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a976:	4291      	cmp	r1, r2
 800a978:	d1f9      	bne.n	800a96e <memcpy+0xe>
 800a97a:	bd10      	pop	{r4, pc}

0800a97c <memset>:
 800a97c:	4402      	add	r2, r0
 800a97e:	4603      	mov	r3, r0
 800a980:	4293      	cmp	r3, r2
 800a982:	d100      	bne.n	800a986 <memset+0xa>
 800a984:	4770      	bx	lr
 800a986:	f803 1b01 	strb.w	r1, [r3], #1
 800a98a:	e7f9      	b.n	800a980 <memset+0x4>

0800a98c <iprintf>:
 800a98c:	b40f      	push	{r0, r1, r2, r3}
 800a98e:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <iprintf+0x2c>)
 800a990:	b513      	push	{r0, r1, r4, lr}
 800a992:	681c      	ldr	r4, [r3, #0]
 800a994:	b124      	cbz	r4, 800a9a0 <iprintf+0x14>
 800a996:	69a3      	ldr	r3, [r4, #24]
 800a998:	b913      	cbnz	r3, 800a9a0 <iprintf+0x14>
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 fa5e 	bl	800ae5c <__sinit>
 800a9a0:	ab05      	add	r3, sp, #20
 800a9a2:	9a04      	ldr	r2, [sp, #16]
 800a9a4:	68a1      	ldr	r1, [r4, #8]
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 fc2f 	bl	800b20c <_vfiprintf_r>
 800a9ae:	b002      	add	sp, #8
 800a9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b4:	b004      	add	sp, #16
 800a9b6:	4770      	bx	lr
 800a9b8:	20000048 	.word	0x20000048

0800a9bc <_puts_r>:
 800a9bc:	b570      	push	{r4, r5, r6, lr}
 800a9be:	460e      	mov	r6, r1
 800a9c0:	4605      	mov	r5, r0
 800a9c2:	b118      	cbz	r0, 800a9cc <_puts_r+0x10>
 800a9c4:	6983      	ldr	r3, [r0, #24]
 800a9c6:	b90b      	cbnz	r3, 800a9cc <_puts_r+0x10>
 800a9c8:	f000 fa48 	bl	800ae5c <__sinit>
 800a9cc:	69ab      	ldr	r3, [r5, #24]
 800a9ce:	68ac      	ldr	r4, [r5, #8]
 800a9d0:	b913      	cbnz	r3, 800a9d8 <_puts_r+0x1c>
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f000 fa42 	bl	800ae5c <__sinit>
 800a9d8:	4b2c      	ldr	r3, [pc, #176]	; (800aa8c <_puts_r+0xd0>)
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	d120      	bne.n	800aa20 <_puts_r+0x64>
 800a9de:	686c      	ldr	r4, [r5, #4]
 800a9e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9e2:	07db      	lsls	r3, r3, #31
 800a9e4:	d405      	bmi.n	800a9f2 <_puts_r+0x36>
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	0598      	lsls	r0, r3, #22
 800a9ea:	d402      	bmi.n	800a9f2 <_puts_r+0x36>
 800a9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ee:	f000 fad3 	bl	800af98 <__retarget_lock_acquire_recursive>
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	0719      	lsls	r1, r3, #28
 800a9f6:	d51d      	bpl.n	800aa34 <_puts_r+0x78>
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	b1db      	cbz	r3, 800aa34 <_puts_r+0x78>
 800a9fc:	3e01      	subs	r6, #1
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa04:	3b01      	subs	r3, #1
 800aa06:	60a3      	str	r3, [r4, #8]
 800aa08:	bb39      	cbnz	r1, 800aa5a <_puts_r+0x9e>
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	da38      	bge.n	800aa80 <_puts_r+0xc4>
 800aa0e:	4622      	mov	r2, r4
 800aa10:	210a      	movs	r1, #10
 800aa12:	4628      	mov	r0, r5
 800aa14:	f000 f848 	bl	800aaa8 <__swbuf_r>
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d011      	beq.n	800aa40 <_puts_r+0x84>
 800aa1c:	250a      	movs	r5, #10
 800aa1e:	e011      	b.n	800aa44 <_puts_r+0x88>
 800aa20:	4b1b      	ldr	r3, [pc, #108]	; (800aa90 <_puts_r+0xd4>)
 800aa22:	429c      	cmp	r4, r3
 800aa24:	d101      	bne.n	800aa2a <_puts_r+0x6e>
 800aa26:	68ac      	ldr	r4, [r5, #8]
 800aa28:	e7da      	b.n	800a9e0 <_puts_r+0x24>
 800aa2a:	4b1a      	ldr	r3, [pc, #104]	; (800aa94 <_puts_r+0xd8>)
 800aa2c:	429c      	cmp	r4, r3
 800aa2e:	bf08      	it	eq
 800aa30:	68ec      	ldreq	r4, [r5, #12]
 800aa32:	e7d5      	b.n	800a9e0 <_puts_r+0x24>
 800aa34:	4621      	mov	r1, r4
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 f888 	bl	800ab4c <__swsetup_r>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d0dd      	beq.n	800a9fc <_puts_r+0x40>
 800aa40:	f04f 35ff 	mov.w	r5, #4294967295
 800aa44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa46:	07da      	lsls	r2, r3, #31
 800aa48:	d405      	bmi.n	800aa56 <_puts_r+0x9a>
 800aa4a:	89a3      	ldrh	r3, [r4, #12]
 800aa4c:	059b      	lsls	r3, r3, #22
 800aa4e:	d402      	bmi.n	800aa56 <_puts_r+0x9a>
 800aa50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa52:	f000 faa2 	bl	800af9a <__retarget_lock_release_recursive>
 800aa56:	4628      	mov	r0, r5
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	da04      	bge.n	800aa68 <_puts_r+0xac>
 800aa5e:	69a2      	ldr	r2, [r4, #24]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	dc06      	bgt.n	800aa72 <_puts_r+0xb6>
 800aa64:	290a      	cmp	r1, #10
 800aa66:	d004      	beq.n	800aa72 <_puts_r+0xb6>
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	6022      	str	r2, [r4, #0]
 800aa6e:	7019      	strb	r1, [r3, #0]
 800aa70:	e7c5      	b.n	800a9fe <_puts_r+0x42>
 800aa72:	4622      	mov	r2, r4
 800aa74:	4628      	mov	r0, r5
 800aa76:	f000 f817 	bl	800aaa8 <__swbuf_r>
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	d1bf      	bne.n	800a9fe <_puts_r+0x42>
 800aa7e:	e7df      	b.n	800aa40 <_puts_r+0x84>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	250a      	movs	r5, #10
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	6022      	str	r2, [r4, #0]
 800aa88:	701d      	strb	r5, [r3, #0]
 800aa8a:	e7db      	b.n	800aa44 <_puts_r+0x88>
 800aa8c:	0800c360 	.word	0x0800c360
 800aa90:	0800c380 	.word	0x0800c380
 800aa94:	0800c340 	.word	0x0800c340

0800aa98 <puts>:
 800aa98:	4b02      	ldr	r3, [pc, #8]	; (800aaa4 <puts+0xc>)
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	6818      	ldr	r0, [r3, #0]
 800aa9e:	f7ff bf8d 	b.w	800a9bc <_puts_r>
 800aaa2:	bf00      	nop
 800aaa4:	20000048 	.word	0x20000048

0800aaa8 <__swbuf_r>:
 800aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaaa:	460e      	mov	r6, r1
 800aaac:	4614      	mov	r4, r2
 800aaae:	4605      	mov	r5, r0
 800aab0:	b118      	cbz	r0, 800aaba <__swbuf_r+0x12>
 800aab2:	6983      	ldr	r3, [r0, #24]
 800aab4:	b90b      	cbnz	r3, 800aaba <__swbuf_r+0x12>
 800aab6:	f000 f9d1 	bl	800ae5c <__sinit>
 800aaba:	4b21      	ldr	r3, [pc, #132]	; (800ab40 <__swbuf_r+0x98>)
 800aabc:	429c      	cmp	r4, r3
 800aabe:	d12b      	bne.n	800ab18 <__swbuf_r+0x70>
 800aac0:	686c      	ldr	r4, [r5, #4]
 800aac2:	69a3      	ldr	r3, [r4, #24]
 800aac4:	60a3      	str	r3, [r4, #8]
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	071a      	lsls	r2, r3, #28
 800aaca:	d52f      	bpl.n	800ab2c <__swbuf_r+0x84>
 800aacc:	6923      	ldr	r3, [r4, #16]
 800aace:	b36b      	cbz	r3, 800ab2c <__swbuf_r+0x84>
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	6820      	ldr	r0, [r4, #0]
 800aad4:	1ac0      	subs	r0, r0, r3
 800aad6:	6963      	ldr	r3, [r4, #20]
 800aad8:	b2f6      	uxtb	r6, r6
 800aada:	4283      	cmp	r3, r0
 800aadc:	4637      	mov	r7, r6
 800aade:	dc04      	bgt.n	800aaea <__swbuf_r+0x42>
 800aae0:	4621      	mov	r1, r4
 800aae2:	4628      	mov	r0, r5
 800aae4:	f000 f926 	bl	800ad34 <_fflush_r>
 800aae8:	bb30      	cbnz	r0, 800ab38 <__swbuf_r+0x90>
 800aaea:	68a3      	ldr	r3, [r4, #8]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	60a3      	str	r3, [r4, #8]
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	6022      	str	r2, [r4, #0]
 800aaf6:	701e      	strb	r6, [r3, #0]
 800aaf8:	6963      	ldr	r3, [r4, #20]
 800aafa:	3001      	adds	r0, #1
 800aafc:	4283      	cmp	r3, r0
 800aafe:	d004      	beq.n	800ab0a <__swbuf_r+0x62>
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	07db      	lsls	r3, r3, #31
 800ab04:	d506      	bpl.n	800ab14 <__swbuf_r+0x6c>
 800ab06:	2e0a      	cmp	r6, #10
 800ab08:	d104      	bne.n	800ab14 <__swbuf_r+0x6c>
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f000 f911 	bl	800ad34 <_fflush_r>
 800ab12:	b988      	cbnz	r0, 800ab38 <__swbuf_r+0x90>
 800ab14:	4638      	mov	r0, r7
 800ab16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab18:	4b0a      	ldr	r3, [pc, #40]	; (800ab44 <__swbuf_r+0x9c>)
 800ab1a:	429c      	cmp	r4, r3
 800ab1c:	d101      	bne.n	800ab22 <__swbuf_r+0x7a>
 800ab1e:	68ac      	ldr	r4, [r5, #8]
 800ab20:	e7cf      	b.n	800aac2 <__swbuf_r+0x1a>
 800ab22:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <__swbuf_r+0xa0>)
 800ab24:	429c      	cmp	r4, r3
 800ab26:	bf08      	it	eq
 800ab28:	68ec      	ldreq	r4, [r5, #12]
 800ab2a:	e7ca      	b.n	800aac2 <__swbuf_r+0x1a>
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f000 f80c 	bl	800ab4c <__swsetup_r>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d0cb      	beq.n	800aad0 <__swbuf_r+0x28>
 800ab38:	f04f 37ff 	mov.w	r7, #4294967295
 800ab3c:	e7ea      	b.n	800ab14 <__swbuf_r+0x6c>
 800ab3e:	bf00      	nop
 800ab40:	0800c360 	.word	0x0800c360
 800ab44:	0800c380 	.word	0x0800c380
 800ab48:	0800c340 	.word	0x0800c340

0800ab4c <__swsetup_r>:
 800ab4c:	4b32      	ldr	r3, [pc, #200]	; (800ac18 <__swsetup_r+0xcc>)
 800ab4e:	b570      	push	{r4, r5, r6, lr}
 800ab50:	681d      	ldr	r5, [r3, #0]
 800ab52:	4606      	mov	r6, r0
 800ab54:	460c      	mov	r4, r1
 800ab56:	b125      	cbz	r5, 800ab62 <__swsetup_r+0x16>
 800ab58:	69ab      	ldr	r3, [r5, #24]
 800ab5a:	b913      	cbnz	r3, 800ab62 <__swsetup_r+0x16>
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	f000 f97d 	bl	800ae5c <__sinit>
 800ab62:	4b2e      	ldr	r3, [pc, #184]	; (800ac1c <__swsetup_r+0xd0>)
 800ab64:	429c      	cmp	r4, r3
 800ab66:	d10f      	bne.n	800ab88 <__swsetup_r+0x3c>
 800ab68:	686c      	ldr	r4, [r5, #4]
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab70:	0719      	lsls	r1, r3, #28
 800ab72:	d42c      	bmi.n	800abce <__swsetup_r+0x82>
 800ab74:	06dd      	lsls	r5, r3, #27
 800ab76:	d411      	bmi.n	800ab9c <__swsetup_r+0x50>
 800ab78:	2309      	movs	r3, #9
 800ab7a:	6033      	str	r3, [r6, #0]
 800ab7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	f04f 30ff 	mov.w	r0, #4294967295
 800ab86:	e03e      	b.n	800ac06 <__swsetup_r+0xba>
 800ab88:	4b25      	ldr	r3, [pc, #148]	; (800ac20 <__swsetup_r+0xd4>)
 800ab8a:	429c      	cmp	r4, r3
 800ab8c:	d101      	bne.n	800ab92 <__swsetup_r+0x46>
 800ab8e:	68ac      	ldr	r4, [r5, #8]
 800ab90:	e7eb      	b.n	800ab6a <__swsetup_r+0x1e>
 800ab92:	4b24      	ldr	r3, [pc, #144]	; (800ac24 <__swsetup_r+0xd8>)
 800ab94:	429c      	cmp	r4, r3
 800ab96:	bf08      	it	eq
 800ab98:	68ec      	ldreq	r4, [r5, #12]
 800ab9a:	e7e6      	b.n	800ab6a <__swsetup_r+0x1e>
 800ab9c:	0758      	lsls	r0, r3, #29
 800ab9e:	d512      	bpl.n	800abc6 <__swsetup_r+0x7a>
 800aba0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aba2:	b141      	cbz	r1, 800abb6 <__swsetup_r+0x6a>
 800aba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aba8:	4299      	cmp	r1, r3
 800abaa:	d002      	beq.n	800abb2 <__swsetup_r+0x66>
 800abac:	4630      	mov	r0, r6
 800abae:	f000 fa59 	bl	800b064 <_free_r>
 800abb2:	2300      	movs	r3, #0
 800abb4:	6363      	str	r3, [r4, #52]	; 0x34
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abbc:	81a3      	strh	r3, [r4, #12]
 800abbe:	2300      	movs	r3, #0
 800abc0:	6063      	str	r3, [r4, #4]
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	6023      	str	r3, [r4, #0]
 800abc6:	89a3      	ldrh	r3, [r4, #12]
 800abc8:	f043 0308 	orr.w	r3, r3, #8
 800abcc:	81a3      	strh	r3, [r4, #12]
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	b94b      	cbnz	r3, 800abe6 <__swsetup_r+0x9a>
 800abd2:	89a3      	ldrh	r3, [r4, #12]
 800abd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abdc:	d003      	beq.n	800abe6 <__swsetup_r+0x9a>
 800abde:	4621      	mov	r1, r4
 800abe0:	4630      	mov	r0, r6
 800abe2:	f000 f9ff 	bl	800afe4 <__smakebuf_r>
 800abe6:	89a0      	ldrh	r0, [r4, #12]
 800abe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abec:	f010 0301 	ands.w	r3, r0, #1
 800abf0:	d00a      	beq.n	800ac08 <__swsetup_r+0xbc>
 800abf2:	2300      	movs	r3, #0
 800abf4:	60a3      	str	r3, [r4, #8]
 800abf6:	6963      	ldr	r3, [r4, #20]
 800abf8:	425b      	negs	r3, r3
 800abfa:	61a3      	str	r3, [r4, #24]
 800abfc:	6923      	ldr	r3, [r4, #16]
 800abfe:	b943      	cbnz	r3, 800ac12 <__swsetup_r+0xc6>
 800ac00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac04:	d1ba      	bne.n	800ab7c <__swsetup_r+0x30>
 800ac06:	bd70      	pop	{r4, r5, r6, pc}
 800ac08:	0781      	lsls	r1, r0, #30
 800ac0a:	bf58      	it	pl
 800ac0c:	6963      	ldrpl	r3, [r4, #20]
 800ac0e:	60a3      	str	r3, [r4, #8]
 800ac10:	e7f4      	b.n	800abfc <__swsetup_r+0xb0>
 800ac12:	2000      	movs	r0, #0
 800ac14:	e7f7      	b.n	800ac06 <__swsetup_r+0xba>
 800ac16:	bf00      	nop
 800ac18:	20000048 	.word	0x20000048
 800ac1c:	0800c360 	.word	0x0800c360
 800ac20:	0800c380 	.word	0x0800c380
 800ac24:	0800c340 	.word	0x0800c340

0800ac28 <__sflush_r>:
 800ac28:	898a      	ldrh	r2, [r1, #12]
 800ac2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac2e:	4605      	mov	r5, r0
 800ac30:	0710      	lsls	r0, r2, #28
 800ac32:	460c      	mov	r4, r1
 800ac34:	d458      	bmi.n	800ace8 <__sflush_r+0xc0>
 800ac36:	684b      	ldr	r3, [r1, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	dc05      	bgt.n	800ac48 <__sflush_r+0x20>
 800ac3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	dc02      	bgt.n	800ac48 <__sflush_r+0x20>
 800ac42:	2000      	movs	r0, #0
 800ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac4a:	2e00      	cmp	r6, #0
 800ac4c:	d0f9      	beq.n	800ac42 <__sflush_r+0x1a>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac54:	682f      	ldr	r7, [r5, #0]
 800ac56:	602b      	str	r3, [r5, #0]
 800ac58:	d032      	beq.n	800acc0 <__sflush_r+0x98>
 800ac5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	075a      	lsls	r2, r3, #29
 800ac60:	d505      	bpl.n	800ac6e <__sflush_r+0x46>
 800ac62:	6863      	ldr	r3, [r4, #4]
 800ac64:	1ac0      	subs	r0, r0, r3
 800ac66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac68:	b10b      	cbz	r3, 800ac6e <__sflush_r+0x46>
 800ac6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac6c:	1ac0      	subs	r0, r0, r3
 800ac6e:	2300      	movs	r3, #0
 800ac70:	4602      	mov	r2, r0
 800ac72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac74:	6a21      	ldr	r1, [r4, #32]
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b0      	blx	r6
 800ac7a:	1c43      	adds	r3, r0, #1
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	d106      	bne.n	800ac8e <__sflush_r+0x66>
 800ac80:	6829      	ldr	r1, [r5, #0]
 800ac82:	291d      	cmp	r1, #29
 800ac84:	d82c      	bhi.n	800ace0 <__sflush_r+0xb8>
 800ac86:	4a2a      	ldr	r2, [pc, #168]	; (800ad30 <__sflush_r+0x108>)
 800ac88:	40ca      	lsrs	r2, r1
 800ac8a:	07d6      	lsls	r6, r2, #31
 800ac8c:	d528      	bpl.n	800ace0 <__sflush_r+0xb8>
 800ac8e:	2200      	movs	r2, #0
 800ac90:	6062      	str	r2, [r4, #4]
 800ac92:	04d9      	lsls	r1, r3, #19
 800ac94:	6922      	ldr	r2, [r4, #16]
 800ac96:	6022      	str	r2, [r4, #0]
 800ac98:	d504      	bpl.n	800aca4 <__sflush_r+0x7c>
 800ac9a:	1c42      	adds	r2, r0, #1
 800ac9c:	d101      	bne.n	800aca2 <__sflush_r+0x7a>
 800ac9e:	682b      	ldr	r3, [r5, #0]
 800aca0:	b903      	cbnz	r3, 800aca4 <__sflush_r+0x7c>
 800aca2:	6560      	str	r0, [r4, #84]	; 0x54
 800aca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aca6:	602f      	str	r7, [r5, #0]
 800aca8:	2900      	cmp	r1, #0
 800acaa:	d0ca      	beq.n	800ac42 <__sflush_r+0x1a>
 800acac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acb0:	4299      	cmp	r1, r3
 800acb2:	d002      	beq.n	800acba <__sflush_r+0x92>
 800acb4:	4628      	mov	r0, r5
 800acb6:	f000 f9d5 	bl	800b064 <_free_r>
 800acba:	2000      	movs	r0, #0
 800acbc:	6360      	str	r0, [r4, #52]	; 0x34
 800acbe:	e7c1      	b.n	800ac44 <__sflush_r+0x1c>
 800acc0:	6a21      	ldr	r1, [r4, #32]
 800acc2:	2301      	movs	r3, #1
 800acc4:	4628      	mov	r0, r5
 800acc6:	47b0      	blx	r6
 800acc8:	1c41      	adds	r1, r0, #1
 800acca:	d1c7      	bne.n	800ac5c <__sflush_r+0x34>
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0c4      	beq.n	800ac5c <__sflush_r+0x34>
 800acd2:	2b1d      	cmp	r3, #29
 800acd4:	d001      	beq.n	800acda <__sflush_r+0xb2>
 800acd6:	2b16      	cmp	r3, #22
 800acd8:	d101      	bne.n	800acde <__sflush_r+0xb6>
 800acda:	602f      	str	r7, [r5, #0]
 800acdc:	e7b1      	b.n	800ac42 <__sflush_r+0x1a>
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	e7ad      	b.n	800ac44 <__sflush_r+0x1c>
 800ace8:	690f      	ldr	r7, [r1, #16]
 800acea:	2f00      	cmp	r7, #0
 800acec:	d0a9      	beq.n	800ac42 <__sflush_r+0x1a>
 800acee:	0793      	lsls	r3, r2, #30
 800acf0:	680e      	ldr	r6, [r1, #0]
 800acf2:	bf08      	it	eq
 800acf4:	694b      	ldreq	r3, [r1, #20]
 800acf6:	600f      	str	r7, [r1, #0]
 800acf8:	bf18      	it	ne
 800acfa:	2300      	movne	r3, #0
 800acfc:	eba6 0807 	sub.w	r8, r6, r7
 800ad00:	608b      	str	r3, [r1, #8]
 800ad02:	f1b8 0f00 	cmp.w	r8, #0
 800ad06:	dd9c      	ble.n	800ac42 <__sflush_r+0x1a>
 800ad08:	6a21      	ldr	r1, [r4, #32]
 800ad0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad0c:	4643      	mov	r3, r8
 800ad0e:	463a      	mov	r2, r7
 800ad10:	4628      	mov	r0, r5
 800ad12:	47b0      	blx	r6
 800ad14:	2800      	cmp	r0, #0
 800ad16:	dc06      	bgt.n	800ad26 <__sflush_r+0xfe>
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad1e:	81a3      	strh	r3, [r4, #12]
 800ad20:	f04f 30ff 	mov.w	r0, #4294967295
 800ad24:	e78e      	b.n	800ac44 <__sflush_r+0x1c>
 800ad26:	4407      	add	r7, r0
 800ad28:	eba8 0800 	sub.w	r8, r8, r0
 800ad2c:	e7e9      	b.n	800ad02 <__sflush_r+0xda>
 800ad2e:	bf00      	nop
 800ad30:	20400001 	.word	0x20400001

0800ad34 <_fflush_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	690b      	ldr	r3, [r1, #16]
 800ad38:	4605      	mov	r5, r0
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	b913      	cbnz	r3, 800ad44 <_fflush_r+0x10>
 800ad3e:	2500      	movs	r5, #0
 800ad40:	4628      	mov	r0, r5
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	b118      	cbz	r0, 800ad4e <_fflush_r+0x1a>
 800ad46:	6983      	ldr	r3, [r0, #24]
 800ad48:	b90b      	cbnz	r3, 800ad4e <_fflush_r+0x1a>
 800ad4a:	f000 f887 	bl	800ae5c <__sinit>
 800ad4e:	4b14      	ldr	r3, [pc, #80]	; (800ada0 <_fflush_r+0x6c>)
 800ad50:	429c      	cmp	r4, r3
 800ad52:	d11b      	bne.n	800ad8c <_fflush_r+0x58>
 800ad54:	686c      	ldr	r4, [r5, #4]
 800ad56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d0ef      	beq.n	800ad3e <_fflush_r+0xa>
 800ad5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad60:	07d0      	lsls	r0, r2, #31
 800ad62:	d404      	bmi.n	800ad6e <_fflush_r+0x3a>
 800ad64:	0599      	lsls	r1, r3, #22
 800ad66:	d402      	bmi.n	800ad6e <_fflush_r+0x3a>
 800ad68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad6a:	f000 f915 	bl	800af98 <__retarget_lock_acquire_recursive>
 800ad6e:	4628      	mov	r0, r5
 800ad70:	4621      	mov	r1, r4
 800ad72:	f7ff ff59 	bl	800ac28 <__sflush_r>
 800ad76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad78:	07da      	lsls	r2, r3, #31
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	d4e0      	bmi.n	800ad40 <_fflush_r+0xc>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	059b      	lsls	r3, r3, #22
 800ad82:	d4dd      	bmi.n	800ad40 <_fflush_r+0xc>
 800ad84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad86:	f000 f908 	bl	800af9a <__retarget_lock_release_recursive>
 800ad8a:	e7d9      	b.n	800ad40 <_fflush_r+0xc>
 800ad8c:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <_fflush_r+0x70>)
 800ad8e:	429c      	cmp	r4, r3
 800ad90:	d101      	bne.n	800ad96 <_fflush_r+0x62>
 800ad92:	68ac      	ldr	r4, [r5, #8]
 800ad94:	e7df      	b.n	800ad56 <_fflush_r+0x22>
 800ad96:	4b04      	ldr	r3, [pc, #16]	; (800ada8 <_fflush_r+0x74>)
 800ad98:	429c      	cmp	r4, r3
 800ad9a:	bf08      	it	eq
 800ad9c:	68ec      	ldreq	r4, [r5, #12]
 800ad9e:	e7da      	b.n	800ad56 <_fflush_r+0x22>
 800ada0:	0800c360 	.word	0x0800c360
 800ada4:	0800c380 	.word	0x0800c380
 800ada8:	0800c340 	.word	0x0800c340

0800adac <std>:
 800adac:	2300      	movs	r3, #0
 800adae:	b510      	push	{r4, lr}
 800adb0:	4604      	mov	r4, r0
 800adb2:	e9c0 3300 	strd	r3, r3, [r0]
 800adb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800adba:	6083      	str	r3, [r0, #8]
 800adbc:	8181      	strh	r1, [r0, #12]
 800adbe:	6643      	str	r3, [r0, #100]	; 0x64
 800adc0:	81c2      	strh	r2, [r0, #14]
 800adc2:	6183      	str	r3, [r0, #24]
 800adc4:	4619      	mov	r1, r3
 800adc6:	2208      	movs	r2, #8
 800adc8:	305c      	adds	r0, #92	; 0x5c
 800adca:	f7ff fdd7 	bl	800a97c <memset>
 800adce:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <std+0x38>)
 800add0:	6263      	str	r3, [r4, #36]	; 0x24
 800add2:	4b05      	ldr	r3, [pc, #20]	; (800ade8 <std+0x3c>)
 800add4:	62a3      	str	r3, [r4, #40]	; 0x28
 800add6:	4b05      	ldr	r3, [pc, #20]	; (800adec <std+0x40>)
 800add8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800adda:	4b05      	ldr	r3, [pc, #20]	; (800adf0 <std+0x44>)
 800addc:	6224      	str	r4, [r4, #32]
 800adde:	6323      	str	r3, [r4, #48]	; 0x30
 800ade0:	bd10      	pop	{r4, pc}
 800ade2:	bf00      	nop
 800ade4:	0800b7b5 	.word	0x0800b7b5
 800ade8:	0800b7d7 	.word	0x0800b7d7
 800adec:	0800b80f 	.word	0x0800b80f
 800adf0:	0800b833 	.word	0x0800b833

0800adf4 <_cleanup_r>:
 800adf4:	4901      	ldr	r1, [pc, #4]	; (800adfc <_cleanup_r+0x8>)
 800adf6:	f000 b8af 	b.w	800af58 <_fwalk_reent>
 800adfa:	bf00      	nop
 800adfc:	0800ad35 	.word	0x0800ad35

0800ae00 <__sfmoreglue>:
 800ae00:	b570      	push	{r4, r5, r6, lr}
 800ae02:	1e4a      	subs	r2, r1, #1
 800ae04:	2568      	movs	r5, #104	; 0x68
 800ae06:	4355      	muls	r5, r2
 800ae08:	460e      	mov	r6, r1
 800ae0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae0e:	f000 f979 	bl	800b104 <_malloc_r>
 800ae12:	4604      	mov	r4, r0
 800ae14:	b140      	cbz	r0, 800ae28 <__sfmoreglue+0x28>
 800ae16:	2100      	movs	r1, #0
 800ae18:	e9c0 1600 	strd	r1, r6, [r0]
 800ae1c:	300c      	adds	r0, #12
 800ae1e:	60a0      	str	r0, [r4, #8]
 800ae20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ae24:	f7ff fdaa 	bl	800a97c <memset>
 800ae28:	4620      	mov	r0, r4
 800ae2a:	bd70      	pop	{r4, r5, r6, pc}

0800ae2c <__sfp_lock_acquire>:
 800ae2c:	4801      	ldr	r0, [pc, #4]	; (800ae34 <__sfp_lock_acquire+0x8>)
 800ae2e:	f000 b8b3 	b.w	800af98 <__retarget_lock_acquire_recursive>
 800ae32:	bf00      	nop
 800ae34:	200015ec 	.word	0x200015ec

0800ae38 <__sfp_lock_release>:
 800ae38:	4801      	ldr	r0, [pc, #4]	; (800ae40 <__sfp_lock_release+0x8>)
 800ae3a:	f000 b8ae 	b.w	800af9a <__retarget_lock_release_recursive>
 800ae3e:	bf00      	nop
 800ae40:	200015ec 	.word	0x200015ec

0800ae44 <__sinit_lock_acquire>:
 800ae44:	4801      	ldr	r0, [pc, #4]	; (800ae4c <__sinit_lock_acquire+0x8>)
 800ae46:	f000 b8a7 	b.w	800af98 <__retarget_lock_acquire_recursive>
 800ae4a:	bf00      	nop
 800ae4c:	200015e7 	.word	0x200015e7

0800ae50 <__sinit_lock_release>:
 800ae50:	4801      	ldr	r0, [pc, #4]	; (800ae58 <__sinit_lock_release+0x8>)
 800ae52:	f000 b8a2 	b.w	800af9a <__retarget_lock_release_recursive>
 800ae56:	bf00      	nop
 800ae58:	200015e7 	.word	0x200015e7

0800ae5c <__sinit>:
 800ae5c:	b510      	push	{r4, lr}
 800ae5e:	4604      	mov	r4, r0
 800ae60:	f7ff fff0 	bl	800ae44 <__sinit_lock_acquire>
 800ae64:	69a3      	ldr	r3, [r4, #24]
 800ae66:	b11b      	cbz	r3, 800ae70 <__sinit+0x14>
 800ae68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae6c:	f7ff bff0 	b.w	800ae50 <__sinit_lock_release>
 800ae70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae74:	6523      	str	r3, [r4, #80]	; 0x50
 800ae76:	4b13      	ldr	r3, [pc, #76]	; (800aec4 <__sinit+0x68>)
 800ae78:	4a13      	ldr	r2, [pc, #76]	; (800aec8 <__sinit+0x6c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	bf04      	itt	eq
 800ae82:	2301      	moveq	r3, #1
 800ae84:	61a3      	streq	r3, [r4, #24]
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 f820 	bl	800aecc <__sfp>
 800ae8c:	6060      	str	r0, [r4, #4]
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f000 f81c 	bl	800aecc <__sfp>
 800ae94:	60a0      	str	r0, [r4, #8]
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 f818 	bl	800aecc <__sfp>
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	60e0      	str	r0, [r4, #12]
 800aea0:	2104      	movs	r1, #4
 800aea2:	6860      	ldr	r0, [r4, #4]
 800aea4:	f7ff ff82 	bl	800adac <std>
 800aea8:	68a0      	ldr	r0, [r4, #8]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	2109      	movs	r1, #9
 800aeae:	f7ff ff7d 	bl	800adac <std>
 800aeb2:	68e0      	ldr	r0, [r4, #12]
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	2112      	movs	r1, #18
 800aeb8:	f7ff ff78 	bl	800adac <std>
 800aebc:	2301      	movs	r3, #1
 800aebe:	61a3      	str	r3, [r4, #24]
 800aec0:	e7d2      	b.n	800ae68 <__sinit+0xc>
 800aec2:	bf00      	nop
 800aec4:	0800c33c 	.word	0x0800c33c
 800aec8:	0800adf5 	.word	0x0800adf5

0800aecc <__sfp>:
 800aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aece:	4607      	mov	r7, r0
 800aed0:	f7ff ffac 	bl	800ae2c <__sfp_lock_acquire>
 800aed4:	4b1e      	ldr	r3, [pc, #120]	; (800af50 <__sfp+0x84>)
 800aed6:	681e      	ldr	r6, [r3, #0]
 800aed8:	69b3      	ldr	r3, [r6, #24]
 800aeda:	b913      	cbnz	r3, 800aee2 <__sfp+0x16>
 800aedc:	4630      	mov	r0, r6
 800aede:	f7ff ffbd 	bl	800ae5c <__sinit>
 800aee2:	3648      	adds	r6, #72	; 0x48
 800aee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aee8:	3b01      	subs	r3, #1
 800aeea:	d503      	bpl.n	800aef4 <__sfp+0x28>
 800aeec:	6833      	ldr	r3, [r6, #0]
 800aeee:	b30b      	cbz	r3, 800af34 <__sfp+0x68>
 800aef0:	6836      	ldr	r6, [r6, #0]
 800aef2:	e7f7      	b.n	800aee4 <__sfp+0x18>
 800aef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aef8:	b9d5      	cbnz	r5, 800af30 <__sfp+0x64>
 800aefa:	4b16      	ldr	r3, [pc, #88]	; (800af54 <__sfp+0x88>)
 800aefc:	60e3      	str	r3, [r4, #12]
 800aefe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af02:	6665      	str	r5, [r4, #100]	; 0x64
 800af04:	f000 f847 	bl	800af96 <__retarget_lock_init_recursive>
 800af08:	f7ff ff96 	bl	800ae38 <__sfp_lock_release>
 800af0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af14:	6025      	str	r5, [r4, #0]
 800af16:	61a5      	str	r5, [r4, #24]
 800af18:	2208      	movs	r2, #8
 800af1a:	4629      	mov	r1, r5
 800af1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800af20:	f7ff fd2c 	bl	800a97c <memset>
 800af24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800af28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800af2c:	4620      	mov	r0, r4
 800af2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af30:	3468      	adds	r4, #104	; 0x68
 800af32:	e7d9      	b.n	800aee8 <__sfp+0x1c>
 800af34:	2104      	movs	r1, #4
 800af36:	4638      	mov	r0, r7
 800af38:	f7ff ff62 	bl	800ae00 <__sfmoreglue>
 800af3c:	4604      	mov	r4, r0
 800af3e:	6030      	str	r0, [r6, #0]
 800af40:	2800      	cmp	r0, #0
 800af42:	d1d5      	bne.n	800aef0 <__sfp+0x24>
 800af44:	f7ff ff78 	bl	800ae38 <__sfp_lock_release>
 800af48:	230c      	movs	r3, #12
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	e7ee      	b.n	800af2c <__sfp+0x60>
 800af4e:	bf00      	nop
 800af50:	0800c33c 	.word	0x0800c33c
 800af54:	ffff0001 	.word	0xffff0001

0800af58 <_fwalk_reent>:
 800af58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af5c:	4606      	mov	r6, r0
 800af5e:	4688      	mov	r8, r1
 800af60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af64:	2700      	movs	r7, #0
 800af66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af6a:	f1b9 0901 	subs.w	r9, r9, #1
 800af6e:	d505      	bpl.n	800af7c <_fwalk_reent+0x24>
 800af70:	6824      	ldr	r4, [r4, #0]
 800af72:	2c00      	cmp	r4, #0
 800af74:	d1f7      	bne.n	800af66 <_fwalk_reent+0xe>
 800af76:	4638      	mov	r0, r7
 800af78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7c:	89ab      	ldrh	r3, [r5, #12]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d907      	bls.n	800af92 <_fwalk_reent+0x3a>
 800af82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af86:	3301      	adds	r3, #1
 800af88:	d003      	beq.n	800af92 <_fwalk_reent+0x3a>
 800af8a:	4629      	mov	r1, r5
 800af8c:	4630      	mov	r0, r6
 800af8e:	47c0      	blx	r8
 800af90:	4307      	orrs	r7, r0
 800af92:	3568      	adds	r5, #104	; 0x68
 800af94:	e7e9      	b.n	800af6a <_fwalk_reent+0x12>

0800af96 <__retarget_lock_init_recursive>:
 800af96:	4770      	bx	lr

0800af98 <__retarget_lock_acquire_recursive>:
 800af98:	4770      	bx	lr

0800af9a <__retarget_lock_release_recursive>:
 800af9a:	4770      	bx	lr

0800af9c <__swhatbuf_r>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	460e      	mov	r6, r1
 800afa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa4:	2900      	cmp	r1, #0
 800afa6:	b096      	sub	sp, #88	; 0x58
 800afa8:	4614      	mov	r4, r2
 800afaa:	461d      	mov	r5, r3
 800afac:	da07      	bge.n	800afbe <__swhatbuf_r+0x22>
 800afae:	2300      	movs	r3, #0
 800afb0:	602b      	str	r3, [r5, #0]
 800afb2:	89b3      	ldrh	r3, [r6, #12]
 800afb4:	061a      	lsls	r2, r3, #24
 800afb6:	d410      	bmi.n	800afda <__swhatbuf_r+0x3e>
 800afb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afbc:	e00e      	b.n	800afdc <__swhatbuf_r+0x40>
 800afbe:	466a      	mov	r2, sp
 800afc0:	f000 fc5e 	bl	800b880 <_fstat_r>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	dbf2      	blt.n	800afae <__swhatbuf_r+0x12>
 800afc8:	9a01      	ldr	r2, [sp, #4]
 800afca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800afce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800afd2:	425a      	negs	r2, r3
 800afd4:	415a      	adcs	r2, r3
 800afd6:	602a      	str	r2, [r5, #0]
 800afd8:	e7ee      	b.n	800afb8 <__swhatbuf_r+0x1c>
 800afda:	2340      	movs	r3, #64	; 0x40
 800afdc:	2000      	movs	r0, #0
 800afde:	6023      	str	r3, [r4, #0]
 800afe0:	b016      	add	sp, #88	; 0x58
 800afe2:	bd70      	pop	{r4, r5, r6, pc}

0800afe4 <__smakebuf_r>:
 800afe4:	898b      	ldrh	r3, [r1, #12]
 800afe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afe8:	079d      	lsls	r5, r3, #30
 800afea:	4606      	mov	r6, r0
 800afec:	460c      	mov	r4, r1
 800afee:	d507      	bpl.n	800b000 <__smakebuf_r+0x1c>
 800aff0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	6123      	str	r3, [r4, #16]
 800aff8:	2301      	movs	r3, #1
 800affa:	6163      	str	r3, [r4, #20]
 800affc:	b002      	add	sp, #8
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	ab01      	add	r3, sp, #4
 800b002:	466a      	mov	r2, sp
 800b004:	f7ff ffca 	bl	800af9c <__swhatbuf_r>
 800b008:	9900      	ldr	r1, [sp, #0]
 800b00a:	4605      	mov	r5, r0
 800b00c:	4630      	mov	r0, r6
 800b00e:	f000 f879 	bl	800b104 <_malloc_r>
 800b012:	b948      	cbnz	r0, 800b028 <__smakebuf_r+0x44>
 800b014:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b018:	059a      	lsls	r2, r3, #22
 800b01a:	d4ef      	bmi.n	800affc <__smakebuf_r+0x18>
 800b01c:	f023 0303 	bic.w	r3, r3, #3
 800b020:	f043 0302 	orr.w	r3, r3, #2
 800b024:	81a3      	strh	r3, [r4, #12]
 800b026:	e7e3      	b.n	800aff0 <__smakebuf_r+0xc>
 800b028:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <__smakebuf_r+0x7c>)
 800b02a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b02c:	89a3      	ldrh	r3, [r4, #12]
 800b02e:	6020      	str	r0, [r4, #0]
 800b030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b034:	81a3      	strh	r3, [r4, #12]
 800b036:	9b00      	ldr	r3, [sp, #0]
 800b038:	6163      	str	r3, [r4, #20]
 800b03a:	9b01      	ldr	r3, [sp, #4]
 800b03c:	6120      	str	r0, [r4, #16]
 800b03e:	b15b      	cbz	r3, 800b058 <__smakebuf_r+0x74>
 800b040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b044:	4630      	mov	r0, r6
 800b046:	f000 fc2d 	bl	800b8a4 <_isatty_r>
 800b04a:	b128      	cbz	r0, 800b058 <__smakebuf_r+0x74>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f023 0303 	bic.w	r3, r3, #3
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	89a0      	ldrh	r0, [r4, #12]
 800b05a:	4305      	orrs	r5, r0
 800b05c:	81a5      	strh	r5, [r4, #12]
 800b05e:	e7cd      	b.n	800affc <__smakebuf_r+0x18>
 800b060:	0800adf5 	.word	0x0800adf5

0800b064 <_free_r>:
 800b064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b066:	2900      	cmp	r1, #0
 800b068:	d048      	beq.n	800b0fc <_free_r+0x98>
 800b06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b06e:	9001      	str	r0, [sp, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	f1a1 0404 	sub.w	r4, r1, #4
 800b076:	bfb8      	it	lt
 800b078:	18e4      	addlt	r4, r4, r3
 800b07a:	f000 fc35 	bl	800b8e8 <__malloc_lock>
 800b07e:	4a20      	ldr	r2, [pc, #128]	; (800b100 <_free_r+0x9c>)
 800b080:	9801      	ldr	r0, [sp, #4]
 800b082:	6813      	ldr	r3, [r2, #0]
 800b084:	4615      	mov	r5, r2
 800b086:	b933      	cbnz	r3, 800b096 <_free_r+0x32>
 800b088:	6063      	str	r3, [r4, #4]
 800b08a:	6014      	str	r4, [r2, #0]
 800b08c:	b003      	add	sp, #12
 800b08e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b092:	f000 bc2f 	b.w	800b8f4 <__malloc_unlock>
 800b096:	42a3      	cmp	r3, r4
 800b098:	d90b      	bls.n	800b0b2 <_free_r+0x4e>
 800b09a:	6821      	ldr	r1, [r4, #0]
 800b09c:	1862      	adds	r2, r4, r1
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	bf04      	itt	eq
 800b0a2:	681a      	ldreq	r2, [r3, #0]
 800b0a4:	685b      	ldreq	r3, [r3, #4]
 800b0a6:	6063      	str	r3, [r4, #4]
 800b0a8:	bf04      	itt	eq
 800b0aa:	1852      	addeq	r2, r2, r1
 800b0ac:	6022      	streq	r2, [r4, #0]
 800b0ae:	602c      	str	r4, [r5, #0]
 800b0b0:	e7ec      	b.n	800b08c <_free_r+0x28>
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	685b      	ldr	r3, [r3, #4]
 800b0b6:	b10b      	cbz	r3, 800b0bc <_free_r+0x58>
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	d9fa      	bls.n	800b0b2 <_free_r+0x4e>
 800b0bc:	6811      	ldr	r1, [r2, #0]
 800b0be:	1855      	adds	r5, r2, r1
 800b0c0:	42a5      	cmp	r5, r4
 800b0c2:	d10b      	bne.n	800b0dc <_free_r+0x78>
 800b0c4:	6824      	ldr	r4, [r4, #0]
 800b0c6:	4421      	add	r1, r4
 800b0c8:	1854      	adds	r4, r2, r1
 800b0ca:	42a3      	cmp	r3, r4
 800b0cc:	6011      	str	r1, [r2, #0]
 800b0ce:	d1dd      	bne.n	800b08c <_free_r+0x28>
 800b0d0:	681c      	ldr	r4, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	6053      	str	r3, [r2, #4]
 800b0d6:	4421      	add	r1, r4
 800b0d8:	6011      	str	r1, [r2, #0]
 800b0da:	e7d7      	b.n	800b08c <_free_r+0x28>
 800b0dc:	d902      	bls.n	800b0e4 <_free_r+0x80>
 800b0de:	230c      	movs	r3, #12
 800b0e0:	6003      	str	r3, [r0, #0]
 800b0e2:	e7d3      	b.n	800b08c <_free_r+0x28>
 800b0e4:	6825      	ldr	r5, [r4, #0]
 800b0e6:	1961      	adds	r1, r4, r5
 800b0e8:	428b      	cmp	r3, r1
 800b0ea:	bf04      	itt	eq
 800b0ec:	6819      	ldreq	r1, [r3, #0]
 800b0ee:	685b      	ldreq	r3, [r3, #4]
 800b0f0:	6063      	str	r3, [r4, #4]
 800b0f2:	bf04      	itt	eq
 800b0f4:	1949      	addeq	r1, r1, r5
 800b0f6:	6021      	streq	r1, [r4, #0]
 800b0f8:	6054      	str	r4, [r2, #4]
 800b0fa:	e7c7      	b.n	800b08c <_free_r+0x28>
 800b0fc:	b003      	add	sp, #12
 800b0fe:	bd30      	pop	{r4, r5, pc}
 800b100:	20001380 	.word	0x20001380

0800b104 <_malloc_r>:
 800b104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b106:	1ccd      	adds	r5, r1, #3
 800b108:	f025 0503 	bic.w	r5, r5, #3
 800b10c:	3508      	adds	r5, #8
 800b10e:	2d0c      	cmp	r5, #12
 800b110:	bf38      	it	cc
 800b112:	250c      	movcc	r5, #12
 800b114:	2d00      	cmp	r5, #0
 800b116:	4606      	mov	r6, r0
 800b118:	db01      	blt.n	800b11e <_malloc_r+0x1a>
 800b11a:	42a9      	cmp	r1, r5
 800b11c:	d903      	bls.n	800b126 <_malloc_r+0x22>
 800b11e:	230c      	movs	r3, #12
 800b120:	6033      	str	r3, [r6, #0]
 800b122:	2000      	movs	r0, #0
 800b124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b126:	f000 fbdf 	bl	800b8e8 <__malloc_lock>
 800b12a:	4921      	ldr	r1, [pc, #132]	; (800b1b0 <_malloc_r+0xac>)
 800b12c:	680a      	ldr	r2, [r1, #0]
 800b12e:	4614      	mov	r4, r2
 800b130:	b99c      	cbnz	r4, 800b15a <_malloc_r+0x56>
 800b132:	4f20      	ldr	r7, [pc, #128]	; (800b1b4 <_malloc_r+0xb0>)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	b923      	cbnz	r3, 800b142 <_malloc_r+0x3e>
 800b138:	4621      	mov	r1, r4
 800b13a:	4630      	mov	r0, r6
 800b13c:	f000 fb2a 	bl	800b794 <_sbrk_r>
 800b140:	6038      	str	r0, [r7, #0]
 800b142:	4629      	mov	r1, r5
 800b144:	4630      	mov	r0, r6
 800b146:	f000 fb25 	bl	800b794 <_sbrk_r>
 800b14a:	1c43      	adds	r3, r0, #1
 800b14c:	d123      	bne.n	800b196 <_malloc_r+0x92>
 800b14e:	230c      	movs	r3, #12
 800b150:	6033      	str	r3, [r6, #0]
 800b152:	4630      	mov	r0, r6
 800b154:	f000 fbce 	bl	800b8f4 <__malloc_unlock>
 800b158:	e7e3      	b.n	800b122 <_malloc_r+0x1e>
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	1b5b      	subs	r3, r3, r5
 800b15e:	d417      	bmi.n	800b190 <_malloc_r+0x8c>
 800b160:	2b0b      	cmp	r3, #11
 800b162:	d903      	bls.n	800b16c <_malloc_r+0x68>
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	441c      	add	r4, r3
 800b168:	6025      	str	r5, [r4, #0]
 800b16a:	e004      	b.n	800b176 <_malloc_r+0x72>
 800b16c:	6863      	ldr	r3, [r4, #4]
 800b16e:	42a2      	cmp	r2, r4
 800b170:	bf0c      	ite	eq
 800b172:	600b      	streq	r3, [r1, #0]
 800b174:	6053      	strne	r3, [r2, #4]
 800b176:	4630      	mov	r0, r6
 800b178:	f000 fbbc 	bl	800b8f4 <__malloc_unlock>
 800b17c:	f104 000b 	add.w	r0, r4, #11
 800b180:	1d23      	adds	r3, r4, #4
 800b182:	f020 0007 	bic.w	r0, r0, #7
 800b186:	1ac2      	subs	r2, r0, r3
 800b188:	d0cc      	beq.n	800b124 <_malloc_r+0x20>
 800b18a:	1a1b      	subs	r3, r3, r0
 800b18c:	50a3      	str	r3, [r4, r2]
 800b18e:	e7c9      	b.n	800b124 <_malloc_r+0x20>
 800b190:	4622      	mov	r2, r4
 800b192:	6864      	ldr	r4, [r4, #4]
 800b194:	e7cc      	b.n	800b130 <_malloc_r+0x2c>
 800b196:	1cc4      	adds	r4, r0, #3
 800b198:	f024 0403 	bic.w	r4, r4, #3
 800b19c:	42a0      	cmp	r0, r4
 800b19e:	d0e3      	beq.n	800b168 <_malloc_r+0x64>
 800b1a0:	1a21      	subs	r1, r4, r0
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 faf6 	bl	800b794 <_sbrk_r>
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	d1dd      	bne.n	800b168 <_malloc_r+0x64>
 800b1ac:	e7cf      	b.n	800b14e <_malloc_r+0x4a>
 800b1ae:	bf00      	nop
 800b1b0:	20001380 	.word	0x20001380
 800b1b4:	20001384 	.word	0x20001384

0800b1b8 <__sfputc_r>:
 800b1b8:	6893      	ldr	r3, [r2, #8]
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	b410      	push	{r4}
 800b1c0:	6093      	str	r3, [r2, #8]
 800b1c2:	da08      	bge.n	800b1d6 <__sfputc_r+0x1e>
 800b1c4:	6994      	ldr	r4, [r2, #24]
 800b1c6:	42a3      	cmp	r3, r4
 800b1c8:	db01      	blt.n	800b1ce <__sfputc_r+0x16>
 800b1ca:	290a      	cmp	r1, #10
 800b1cc:	d103      	bne.n	800b1d6 <__sfputc_r+0x1e>
 800b1ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1d2:	f7ff bc69 	b.w	800aaa8 <__swbuf_r>
 800b1d6:	6813      	ldr	r3, [r2, #0]
 800b1d8:	1c58      	adds	r0, r3, #1
 800b1da:	6010      	str	r0, [r2, #0]
 800b1dc:	7019      	strb	r1, [r3, #0]
 800b1de:	4608      	mov	r0, r1
 800b1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <__sfputs_r>:
 800b1e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1e8:	4606      	mov	r6, r0
 800b1ea:	460f      	mov	r7, r1
 800b1ec:	4614      	mov	r4, r2
 800b1ee:	18d5      	adds	r5, r2, r3
 800b1f0:	42ac      	cmp	r4, r5
 800b1f2:	d101      	bne.n	800b1f8 <__sfputs_r+0x12>
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	e007      	b.n	800b208 <__sfputs_r+0x22>
 800b1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1fc:	463a      	mov	r2, r7
 800b1fe:	4630      	mov	r0, r6
 800b200:	f7ff ffda 	bl	800b1b8 <__sfputc_r>
 800b204:	1c43      	adds	r3, r0, #1
 800b206:	d1f3      	bne.n	800b1f0 <__sfputs_r+0xa>
 800b208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b20c <_vfiprintf_r>:
 800b20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b210:	460d      	mov	r5, r1
 800b212:	b09d      	sub	sp, #116	; 0x74
 800b214:	4614      	mov	r4, r2
 800b216:	4698      	mov	r8, r3
 800b218:	4606      	mov	r6, r0
 800b21a:	b118      	cbz	r0, 800b224 <_vfiprintf_r+0x18>
 800b21c:	6983      	ldr	r3, [r0, #24]
 800b21e:	b90b      	cbnz	r3, 800b224 <_vfiprintf_r+0x18>
 800b220:	f7ff fe1c 	bl	800ae5c <__sinit>
 800b224:	4b89      	ldr	r3, [pc, #548]	; (800b44c <_vfiprintf_r+0x240>)
 800b226:	429d      	cmp	r5, r3
 800b228:	d11b      	bne.n	800b262 <_vfiprintf_r+0x56>
 800b22a:	6875      	ldr	r5, [r6, #4]
 800b22c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b22e:	07d9      	lsls	r1, r3, #31
 800b230:	d405      	bmi.n	800b23e <_vfiprintf_r+0x32>
 800b232:	89ab      	ldrh	r3, [r5, #12]
 800b234:	059a      	lsls	r2, r3, #22
 800b236:	d402      	bmi.n	800b23e <_vfiprintf_r+0x32>
 800b238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b23a:	f7ff fead 	bl	800af98 <__retarget_lock_acquire_recursive>
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	071b      	lsls	r3, r3, #28
 800b242:	d501      	bpl.n	800b248 <_vfiprintf_r+0x3c>
 800b244:	692b      	ldr	r3, [r5, #16]
 800b246:	b9eb      	cbnz	r3, 800b284 <_vfiprintf_r+0x78>
 800b248:	4629      	mov	r1, r5
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7ff fc7e 	bl	800ab4c <__swsetup_r>
 800b250:	b1c0      	cbz	r0, 800b284 <_vfiprintf_r+0x78>
 800b252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b254:	07dc      	lsls	r4, r3, #31
 800b256:	d50e      	bpl.n	800b276 <_vfiprintf_r+0x6a>
 800b258:	f04f 30ff 	mov.w	r0, #4294967295
 800b25c:	b01d      	add	sp, #116	; 0x74
 800b25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b262:	4b7b      	ldr	r3, [pc, #492]	; (800b450 <_vfiprintf_r+0x244>)
 800b264:	429d      	cmp	r5, r3
 800b266:	d101      	bne.n	800b26c <_vfiprintf_r+0x60>
 800b268:	68b5      	ldr	r5, [r6, #8]
 800b26a:	e7df      	b.n	800b22c <_vfiprintf_r+0x20>
 800b26c:	4b79      	ldr	r3, [pc, #484]	; (800b454 <_vfiprintf_r+0x248>)
 800b26e:	429d      	cmp	r5, r3
 800b270:	bf08      	it	eq
 800b272:	68f5      	ldreq	r5, [r6, #12]
 800b274:	e7da      	b.n	800b22c <_vfiprintf_r+0x20>
 800b276:	89ab      	ldrh	r3, [r5, #12]
 800b278:	0598      	lsls	r0, r3, #22
 800b27a:	d4ed      	bmi.n	800b258 <_vfiprintf_r+0x4c>
 800b27c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b27e:	f7ff fe8c 	bl	800af9a <__retarget_lock_release_recursive>
 800b282:	e7e9      	b.n	800b258 <_vfiprintf_r+0x4c>
 800b284:	2300      	movs	r3, #0
 800b286:	9309      	str	r3, [sp, #36]	; 0x24
 800b288:	2320      	movs	r3, #32
 800b28a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b28e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b292:	2330      	movs	r3, #48	; 0x30
 800b294:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b458 <_vfiprintf_r+0x24c>
 800b298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b29c:	f04f 0901 	mov.w	r9, #1
 800b2a0:	4623      	mov	r3, r4
 800b2a2:	469a      	mov	sl, r3
 800b2a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a8:	b10a      	cbz	r2, 800b2ae <_vfiprintf_r+0xa2>
 800b2aa:	2a25      	cmp	r2, #37	; 0x25
 800b2ac:	d1f9      	bne.n	800b2a2 <_vfiprintf_r+0x96>
 800b2ae:	ebba 0b04 	subs.w	fp, sl, r4
 800b2b2:	d00b      	beq.n	800b2cc <_vfiprintf_r+0xc0>
 800b2b4:	465b      	mov	r3, fp
 800b2b6:	4622      	mov	r2, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	f7ff ff93 	bl	800b1e6 <__sfputs_r>
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	f000 80aa 	beq.w	800b41a <_vfiprintf_r+0x20e>
 800b2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c8:	445a      	add	r2, fp
 800b2ca:	9209      	str	r2, [sp, #36]	; 0x24
 800b2cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f000 80a2 	beq.w	800b41a <_vfiprintf_r+0x20e>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2e0:	f10a 0a01 	add.w	sl, sl, #1
 800b2e4:	9304      	str	r3, [sp, #16]
 800b2e6:	9307      	str	r3, [sp, #28]
 800b2e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2ec:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ee:	4654      	mov	r4, sl
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f6:	4858      	ldr	r0, [pc, #352]	; (800b458 <_vfiprintf_r+0x24c>)
 800b2f8:	f7f4 ff4a 	bl	8000190 <memchr>
 800b2fc:	9a04      	ldr	r2, [sp, #16]
 800b2fe:	b9d8      	cbnz	r0, 800b338 <_vfiprintf_r+0x12c>
 800b300:	06d1      	lsls	r1, r2, #27
 800b302:	bf44      	itt	mi
 800b304:	2320      	movmi	r3, #32
 800b306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b30a:	0713      	lsls	r3, r2, #28
 800b30c:	bf44      	itt	mi
 800b30e:	232b      	movmi	r3, #43	; 0x2b
 800b310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b314:	f89a 3000 	ldrb.w	r3, [sl]
 800b318:	2b2a      	cmp	r3, #42	; 0x2a
 800b31a:	d015      	beq.n	800b348 <_vfiprintf_r+0x13c>
 800b31c:	9a07      	ldr	r2, [sp, #28]
 800b31e:	4654      	mov	r4, sl
 800b320:	2000      	movs	r0, #0
 800b322:	f04f 0c0a 	mov.w	ip, #10
 800b326:	4621      	mov	r1, r4
 800b328:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b32c:	3b30      	subs	r3, #48	; 0x30
 800b32e:	2b09      	cmp	r3, #9
 800b330:	d94e      	bls.n	800b3d0 <_vfiprintf_r+0x1c4>
 800b332:	b1b0      	cbz	r0, 800b362 <_vfiprintf_r+0x156>
 800b334:	9207      	str	r2, [sp, #28]
 800b336:	e014      	b.n	800b362 <_vfiprintf_r+0x156>
 800b338:	eba0 0308 	sub.w	r3, r0, r8
 800b33c:	fa09 f303 	lsl.w	r3, r9, r3
 800b340:	4313      	orrs	r3, r2
 800b342:	9304      	str	r3, [sp, #16]
 800b344:	46a2      	mov	sl, r4
 800b346:	e7d2      	b.n	800b2ee <_vfiprintf_r+0xe2>
 800b348:	9b03      	ldr	r3, [sp, #12]
 800b34a:	1d19      	adds	r1, r3, #4
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	9103      	str	r1, [sp, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	bfbb      	ittet	lt
 800b354:	425b      	neglt	r3, r3
 800b356:	f042 0202 	orrlt.w	r2, r2, #2
 800b35a:	9307      	strge	r3, [sp, #28]
 800b35c:	9307      	strlt	r3, [sp, #28]
 800b35e:	bfb8      	it	lt
 800b360:	9204      	strlt	r2, [sp, #16]
 800b362:	7823      	ldrb	r3, [r4, #0]
 800b364:	2b2e      	cmp	r3, #46	; 0x2e
 800b366:	d10c      	bne.n	800b382 <_vfiprintf_r+0x176>
 800b368:	7863      	ldrb	r3, [r4, #1]
 800b36a:	2b2a      	cmp	r3, #42	; 0x2a
 800b36c:	d135      	bne.n	800b3da <_vfiprintf_r+0x1ce>
 800b36e:	9b03      	ldr	r3, [sp, #12]
 800b370:	1d1a      	adds	r2, r3, #4
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	9203      	str	r2, [sp, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	bfb8      	it	lt
 800b37a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b37e:	3402      	adds	r4, #2
 800b380:	9305      	str	r3, [sp, #20]
 800b382:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b468 <_vfiprintf_r+0x25c>
 800b386:	7821      	ldrb	r1, [r4, #0]
 800b388:	2203      	movs	r2, #3
 800b38a:	4650      	mov	r0, sl
 800b38c:	f7f4 ff00 	bl	8000190 <memchr>
 800b390:	b140      	cbz	r0, 800b3a4 <_vfiprintf_r+0x198>
 800b392:	2340      	movs	r3, #64	; 0x40
 800b394:	eba0 000a 	sub.w	r0, r0, sl
 800b398:	fa03 f000 	lsl.w	r0, r3, r0
 800b39c:	9b04      	ldr	r3, [sp, #16]
 800b39e:	4303      	orrs	r3, r0
 800b3a0:	3401      	adds	r4, #1
 800b3a2:	9304      	str	r3, [sp, #16]
 800b3a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a8:	482c      	ldr	r0, [pc, #176]	; (800b45c <_vfiprintf_r+0x250>)
 800b3aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ae:	2206      	movs	r2, #6
 800b3b0:	f7f4 feee 	bl	8000190 <memchr>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	d03f      	beq.n	800b438 <_vfiprintf_r+0x22c>
 800b3b8:	4b29      	ldr	r3, [pc, #164]	; (800b460 <_vfiprintf_r+0x254>)
 800b3ba:	bb1b      	cbnz	r3, 800b404 <_vfiprintf_r+0x1f8>
 800b3bc:	9b03      	ldr	r3, [sp, #12]
 800b3be:	3307      	adds	r3, #7
 800b3c0:	f023 0307 	bic.w	r3, r3, #7
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	9303      	str	r3, [sp, #12]
 800b3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ca:	443b      	add	r3, r7
 800b3cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3ce:	e767      	b.n	800b2a0 <_vfiprintf_r+0x94>
 800b3d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	e7a5      	b.n	800b326 <_vfiprintf_r+0x11a>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	3401      	adds	r4, #1
 800b3de:	9305      	str	r3, [sp, #20]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	f04f 0c0a 	mov.w	ip, #10
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3ec:	3a30      	subs	r2, #48	; 0x30
 800b3ee:	2a09      	cmp	r2, #9
 800b3f0:	d903      	bls.n	800b3fa <_vfiprintf_r+0x1ee>
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d0c5      	beq.n	800b382 <_vfiprintf_r+0x176>
 800b3f6:	9105      	str	r1, [sp, #20]
 800b3f8:	e7c3      	b.n	800b382 <_vfiprintf_r+0x176>
 800b3fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3fe:	4604      	mov	r4, r0
 800b400:	2301      	movs	r3, #1
 800b402:	e7f0      	b.n	800b3e6 <_vfiprintf_r+0x1da>
 800b404:	ab03      	add	r3, sp, #12
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	462a      	mov	r2, r5
 800b40a:	4b16      	ldr	r3, [pc, #88]	; (800b464 <_vfiprintf_r+0x258>)
 800b40c:	a904      	add	r1, sp, #16
 800b40e:	4630      	mov	r0, r6
 800b410:	f3af 8000 	nop.w
 800b414:	4607      	mov	r7, r0
 800b416:	1c78      	adds	r0, r7, #1
 800b418:	d1d6      	bne.n	800b3c8 <_vfiprintf_r+0x1bc>
 800b41a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b41c:	07d9      	lsls	r1, r3, #31
 800b41e:	d405      	bmi.n	800b42c <_vfiprintf_r+0x220>
 800b420:	89ab      	ldrh	r3, [r5, #12]
 800b422:	059a      	lsls	r2, r3, #22
 800b424:	d402      	bmi.n	800b42c <_vfiprintf_r+0x220>
 800b426:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b428:	f7ff fdb7 	bl	800af9a <__retarget_lock_release_recursive>
 800b42c:	89ab      	ldrh	r3, [r5, #12]
 800b42e:	065b      	lsls	r3, r3, #25
 800b430:	f53f af12 	bmi.w	800b258 <_vfiprintf_r+0x4c>
 800b434:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b436:	e711      	b.n	800b25c <_vfiprintf_r+0x50>
 800b438:	ab03      	add	r3, sp, #12
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	462a      	mov	r2, r5
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <_vfiprintf_r+0x258>)
 800b440:	a904      	add	r1, sp, #16
 800b442:	4630      	mov	r0, r6
 800b444:	f000 f880 	bl	800b548 <_printf_i>
 800b448:	e7e4      	b.n	800b414 <_vfiprintf_r+0x208>
 800b44a:	bf00      	nop
 800b44c:	0800c360 	.word	0x0800c360
 800b450:	0800c380 	.word	0x0800c380
 800b454:	0800c340 	.word	0x0800c340
 800b458:	0800c3a0 	.word	0x0800c3a0
 800b45c:	0800c3aa 	.word	0x0800c3aa
 800b460:	00000000 	.word	0x00000000
 800b464:	0800b1e7 	.word	0x0800b1e7
 800b468:	0800c3a6 	.word	0x0800c3a6

0800b46c <_printf_common>:
 800b46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b470:	4616      	mov	r6, r2
 800b472:	4699      	mov	r9, r3
 800b474:	688a      	ldr	r2, [r1, #8]
 800b476:	690b      	ldr	r3, [r1, #16]
 800b478:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b47c:	4293      	cmp	r3, r2
 800b47e:	bfb8      	it	lt
 800b480:	4613      	movlt	r3, r2
 800b482:	6033      	str	r3, [r6, #0]
 800b484:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b488:	4607      	mov	r7, r0
 800b48a:	460c      	mov	r4, r1
 800b48c:	b10a      	cbz	r2, 800b492 <_printf_common+0x26>
 800b48e:	3301      	adds	r3, #1
 800b490:	6033      	str	r3, [r6, #0]
 800b492:	6823      	ldr	r3, [r4, #0]
 800b494:	0699      	lsls	r1, r3, #26
 800b496:	bf42      	ittt	mi
 800b498:	6833      	ldrmi	r3, [r6, #0]
 800b49a:	3302      	addmi	r3, #2
 800b49c:	6033      	strmi	r3, [r6, #0]
 800b49e:	6825      	ldr	r5, [r4, #0]
 800b4a0:	f015 0506 	ands.w	r5, r5, #6
 800b4a4:	d106      	bne.n	800b4b4 <_printf_common+0x48>
 800b4a6:	f104 0a19 	add.w	sl, r4, #25
 800b4aa:	68e3      	ldr	r3, [r4, #12]
 800b4ac:	6832      	ldr	r2, [r6, #0]
 800b4ae:	1a9b      	subs	r3, r3, r2
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dc26      	bgt.n	800b502 <_printf_common+0x96>
 800b4b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4b8:	1e13      	subs	r3, r2, #0
 800b4ba:	6822      	ldr	r2, [r4, #0]
 800b4bc:	bf18      	it	ne
 800b4be:	2301      	movne	r3, #1
 800b4c0:	0692      	lsls	r2, r2, #26
 800b4c2:	d42b      	bmi.n	800b51c <_printf_common+0xb0>
 800b4c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	4638      	mov	r0, r7
 800b4cc:	47c0      	blx	r8
 800b4ce:	3001      	adds	r0, #1
 800b4d0:	d01e      	beq.n	800b510 <_printf_common+0xa4>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	68e5      	ldr	r5, [r4, #12]
 800b4d6:	6832      	ldr	r2, [r6, #0]
 800b4d8:	f003 0306 	and.w	r3, r3, #6
 800b4dc:	2b04      	cmp	r3, #4
 800b4de:	bf08      	it	eq
 800b4e0:	1aad      	subeq	r5, r5, r2
 800b4e2:	68a3      	ldr	r3, [r4, #8]
 800b4e4:	6922      	ldr	r2, [r4, #16]
 800b4e6:	bf0c      	ite	eq
 800b4e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4ec:	2500      	movne	r5, #0
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	bfc4      	itt	gt
 800b4f2:	1a9b      	subgt	r3, r3, r2
 800b4f4:	18ed      	addgt	r5, r5, r3
 800b4f6:	2600      	movs	r6, #0
 800b4f8:	341a      	adds	r4, #26
 800b4fa:	42b5      	cmp	r5, r6
 800b4fc:	d11a      	bne.n	800b534 <_printf_common+0xc8>
 800b4fe:	2000      	movs	r0, #0
 800b500:	e008      	b.n	800b514 <_printf_common+0xa8>
 800b502:	2301      	movs	r3, #1
 800b504:	4652      	mov	r2, sl
 800b506:	4649      	mov	r1, r9
 800b508:	4638      	mov	r0, r7
 800b50a:	47c0      	blx	r8
 800b50c:	3001      	adds	r0, #1
 800b50e:	d103      	bne.n	800b518 <_printf_common+0xac>
 800b510:	f04f 30ff 	mov.w	r0, #4294967295
 800b514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b518:	3501      	adds	r5, #1
 800b51a:	e7c6      	b.n	800b4aa <_printf_common+0x3e>
 800b51c:	18e1      	adds	r1, r4, r3
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	2030      	movs	r0, #48	; 0x30
 800b522:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b526:	4422      	add	r2, r4
 800b528:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b52c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b530:	3302      	adds	r3, #2
 800b532:	e7c7      	b.n	800b4c4 <_printf_common+0x58>
 800b534:	2301      	movs	r3, #1
 800b536:	4622      	mov	r2, r4
 800b538:	4649      	mov	r1, r9
 800b53a:	4638      	mov	r0, r7
 800b53c:	47c0      	blx	r8
 800b53e:	3001      	adds	r0, #1
 800b540:	d0e6      	beq.n	800b510 <_printf_common+0xa4>
 800b542:	3601      	adds	r6, #1
 800b544:	e7d9      	b.n	800b4fa <_printf_common+0x8e>
	...

0800b548 <_printf_i>:
 800b548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b54c:	460c      	mov	r4, r1
 800b54e:	4691      	mov	r9, r2
 800b550:	7e27      	ldrb	r7, [r4, #24]
 800b552:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b554:	2f78      	cmp	r7, #120	; 0x78
 800b556:	4680      	mov	r8, r0
 800b558:	469a      	mov	sl, r3
 800b55a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b55e:	d807      	bhi.n	800b570 <_printf_i+0x28>
 800b560:	2f62      	cmp	r7, #98	; 0x62
 800b562:	d80a      	bhi.n	800b57a <_printf_i+0x32>
 800b564:	2f00      	cmp	r7, #0
 800b566:	f000 80d8 	beq.w	800b71a <_printf_i+0x1d2>
 800b56a:	2f58      	cmp	r7, #88	; 0x58
 800b56c:	f000 80a3 	beq.w	800b6b6 <_printf_i+0x16e>
 800b570:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b578:	e03a      	b.n	800b5f0 <_printf_i+0xa8>
 800b57a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b57e:	2b15      	cmp	r3, #21
 800b580:	d8f6      	bhi.n	800b570 <_printf_i+0x28>
 800b582:	a001      	add	r0, pc, #4	; (adr r0, 800b588 <_printf_i+0x40>)
 800b584:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b588:	0800b5e1 	.word	0x0800b5e1
 800b58c:	0800b5f5 	.word	0x0800b5f5
 800b590:	0800b571 	.word	0x0800b571
 800b594:	0800b571 	.word	0x0800b571
 800b598:	0800b571 	.word	0x0800b571
 800b59c:	0800b571 	.word	0x0800b571
 800b5a0:	0800b5f5 	.word	0x0800b5f5
 800b5a4:	0800b571 	.word	0x0800b571
 800b5a8:	0800b571 	.word	0x0800b571
 800b5ac:	0800b571 	.word	0x0800b571
 800b5b0:	0800b571 	.word	0x0800b571
 800b5b4:	0800b701 	.word	0x0800b701
 800b5b8:	0800b625 	.word	0x0800b625
 800b5bc:	0800b6e3 	.word	0x0800b6e3
 800b5c0:	0800b571 	.word	0x0800b571
 800b5c4:	0800b571 	.word	0x0800b571
 800b5c8:	0800b723 	.word	0x0800b723
 800b5cc:	0800b571 	.word	0x0800b571
 800b5d0:	0800b625 	.word	0x0800b625
 800b5d4:	0800b571 	.word	0x0800b571
 800b5d8:	0800b571 	.word	0x0800b571
 800b5dc:	0800b6eb 	.word	0x0800b6eb
 800b5e0:	680b      	ldr	r3, [r1, #0]
 800b5e2:	1d1a      	adds	r2, r3, #4
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	600a      	str	r2, [r1, #0]
 800b5e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b5ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e0a3      	b.n	800b73c <_printf_i+0x1f4>
 800b5f4:	6825      	ldr	r5, [r4, #0]
 800b5f6:	6808      	ldr	r0, [r1, #0]
 800b5f8:	062e      	lsls	r6, r5, #24
 800b5fa:	f100 0304 	add.w	r3, r0, #4
 800b5fe:	d50a      	bpl.n	800b616 <_printf_i+0xce>
 800b600:	6805      	ldr	r5, [r0, #0]
 800b602:	600b      	str	r3, [r1, #0]
 800b604:	2d00      	cmp	r5, #0
 800b606:	da03      	bge.n	800b610 <_printf_i+0xc8>
 800b608:	232d      	movs	r3, #45	; 0x2d
 800b60a:	426d      	negs	r5, r5
 800b60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b610:	485e      	ldr	r0, [pc, #376]	; (800b78c <_printf_i+0x244>)
 800b612:	230a      	movs	r3, #10
 800b614:	e019      	b.n	800b64a <_printf_i+0x102>
 800b616:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b61a:	6805      	ldr	r5, [r0, #0]
 800b61c:	600b      	str	r3, [r1, #0]
 800b61e:	bf18      	it	ne
 800b620:	b22d      	sxthne	r5, r5
 800b622:	e7ef      	b.n	800b604 <_printf_i+0xbc>
 800b624:	680b      	ldr	r3, [r1, #0]
 800b626:	6825      	ldr	r5, [r4, #0]
 800b628:	1d18      	adds	r0, r3, #4
 800b62a:	6008      	str	r0, [r1, #0]
 800b62c:	0628      	lsls	r0, r5, #24
 800b62e:	d501      	bpl.n	800b634 <_printf_i+0xec>
 800b630:	681d      	ldr	r5, [r3, #0]
 800b632:	e002      	b.n	800b63a <_printf_i+0xf2>
 800b634:	0669      	lsls	r1, r5, #25
 800b636:	d5fb      	bpl.n	800b630 <_printf_i+0xe8>
 800b638:	881d      	ldrh	r5, [r3, #0]
 800b63a:	4854      	ldr	r0, [pc, #336]	; (800b78c <_printf_i+0x244>)
 800b63c:	2f6f      	cmp	r7, #111	; 0x6f
 800b63e:	bf0c      	ite	eq
 800b640:	2308      	moveq	r3, #8
 800b642:	230a      	movne	r3, #10
 800b644:	2100      	movs	r1, #0
 800b646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b64a:	6866      	ldr	r6, [r4, #4]
 800b64c:	60a6      	str	r6, [r4, #8]
 800b64e:	2e00      	cmp	r6, #0
 800b650:	bfa2      	ittt	ge
 800b652:	6821      	ldrge	r1, [r4, #0]
 800b654:	f021 0104 	bicge.w	r1, r1, #4
 800b658:	6021      	strge	r1, [r4, #0]
 800b65a:	b90d      	cbnz	r5, 800b660 <_printf_i+0x118>
 800b65c:	2e00      	cmp	r6, #0
 800b65e:	d04d      	beq.n	800b6fc <_printf_i+0x1b4>
 800b660:	4616      	mov	r6, r2
 800b662:	fbb5 f1f3 	udiv	r1, r5, r3
 800b666:	fb03 5711 	mls	r7, r3, r1, r5
 800b66a:	5dc7      	ldrb	r7, [r0, r7]
 800b66c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b670:	462f      	mov	r7, r5
 800b672:	42bb      	cmp	r3, r7
 800b674:	460d      	mov	r5, r1
 800b676:	d9f4      	bls.n	800b662 <_printf_i+0x11a>
 800b678:	2b08      	cmp	r3, #8
 800b67a:	d10b      	bne.n	800b694 <_printf_i+0x14c>
 800b67c:	6823      	ldr	r3, [r4, #0]
 800b67e:	07df      	lsls	r7, r3, #31
 800b680:	d508      	bpl.n	800b694 <_printf_i+0x14c>
 800b682:	6923      	ldr	r3, [r4, #16]
 800b684:	6861      	ldr	r1, [r4, #4]
 800b686:	4299      	cmp	r1, r3
 800b688:	bfde      	ittt	le
 800b68a:	2330      	movle	r3, #48	; 0x30
 800b68c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b690:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b694:	1b92      	subs	r2, r2, r6
 800b696:	6122      	str	r2, [r4, #16]
 800b698:	f8cd a000 	str.w	sl, [sp]
 800b69c:	464b      	mov	r3, r9
 800b69e:	aa03      	add	r2, sp, #12
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	4640      	mov	r0, r8
 800b6a4:	f7ff fee2 	bl	800b46c <_printf_common>
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d14c      	bne.n	800b746 <_printf_i+0x1fe>
 800b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b0:	b004      	add	sp, #16
 800b6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b6:	4835      	ldr	r0, [pc, #212]	; (800b78c <_printf_i+0x244>)
 800b6b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	680e      	ldr	r6, [r1, #0]
 800b6c0:	061f      	lsls	r7, r3, #24
 800b6c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800b6c6:	600e      	str	r6, [r1, #0]
 800b6c8:	d514      	bpl.n	800b6f4 <_printf_i+0x1ac>
 800b6ca:	07d9      	lsls	r1, r3, #31
 800b6cc:	bf44      	itt	mi
 800b6ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b6d2:	6023      	strmi	r3, [r4, #0]
 800b6d4:	b91d      	cbnz	r5, 800b6de <_printf_i+0x196>
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	f023 0320 	bic.w	r3, r3, #32
 800b6dc:	6023      	str	r3, [r4, #0]
 800b6de:	2310      	movs	r3, #16
 800b6e0:	e7b0      	b.n	800b644 <_printf_i+0xfc>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	f043 0320 	orr.w	r3, r3, #32
 800b6e8:	6023      	str	r3, [r4, #0]
 800b6ea:	2378      	movs	r3, #120	; 0x78
 800b6ec:	4828      	ldr	r0, [pc, #160]	; (800b790 <_printf_i+0x248>)
 800b6ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b6f2:	e7e3      	b.n	800b6bc <_printf_i+0x174>
 800b6f4:	065e      	lsls	r6, r3, #25
 800b6f6:	bf48      	it	mi
 800b6f8:	b2ad      	uxthmi	r5, r5
 800b6fa:	e7e6      	b.n	800b6ca <_printf_i+0x182>
 800b6fc:	4616      	mov	r6, r2
 800b6fe:	e7bb      	b.n	800b678 <_printf_i+0x130>
 800b700:	680b      	ldr	r3, [r1, #0]
 800b702:	6826      	ldr	r6, [r4, #0]
 800b704:	6960      	ldr	r0, [r4, #20]
 800b706:	1d1d      	adds	r5, r3, #4
 800b708:	600d      	str	r5, [r1, #0]
 800b70a:	0635      	lsls	r5, r6, #24
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	d501      	bpl.n	800b714 <_printf_i+0x1cc>
 800b710:	6018      	str	r0, [r3, #0]
 800b712:	e002      	b.n	800b71a <_printf_i+0x1d2>
 800b714:	0671      	lsls	r1, r6, #25
 800b716:	d5fb      	bpl.n	800b710 <_printf_i+0x1c8>
 800b718:	8018      	strh	r0, [r3, #0]
 800b71a:	2300      	movs	r3, #0
 800b71c:	6123      	str	r3, [r4, #16]
 800b71e:	4616      	mov	r6, r2
 800b720:	e7ba      	b.n	800b698 <_printf_i+0x150>
 800b722:	680b      	ldr	r3, [r1, #0]
 800b724:	1d1a      	adds	r2, r3, #4
 800b726:	600a      	str	r2, [r1, #0]
 800b728:	681e      	ldr	r6, [r3, #0]
 800b72a:	6862      	ldr	r2, [r4, #4]
 800b72c:	2100      	movs	r1, #0
 800b72e:	4630      	mov	r0, r6
 800b730:	f7f4 fd2e 	bl	8000190 <memchr>
 800b734:	b108      	cbz	r0, 800b73a <_printf_i+0x1f2>
 800b736:	1b80      	subs	r0, r0, r6
 800b738:	6060      	str	r0, [r4, #4]
 800b73a:	6863      	ldr	r3, [r4, #4]
 800b73c:	6123      	str	r3, [r4, #16]
 800b73e:	2300      	movs	r3, #0
 800b740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b744:	e7a8      	b.n	800b698 <_printf_i+0x150>
 800b746:	6923      	ldr	r3, [r4, #16]
 800b748:	4632      	mov	r2, r6
 800b74a:	4649      	mov	r1, r9
 800b74c:	4640      	mov	r0, r8
 800b74e:	47d0      	blx	sl
 800b750:	3001      	adds	r0, #1
 800b752:	d0ab      	beq.n	800b6ac <_printf_i+0x164>
 800b754:	6823      	ldr	r3, [r4, #0]
 800b756:	079b      	lsls	r3, r3, #30
 800b758:	d413      	bmi.n	800b782 <_printf_i+0x23a>
 800b75a:	68e0      	ldr	r0, [r4, #12]
 800b75c:	9b03      	ldr	r3, [sp, #12]
 800b75e:	4298      	cmp	r0, r3
 800b760:	bfb8      	it	lt
 800b762:	4618      	movlt	r0, r3
 800b764:	e7a4      	b.n	800b6b0 <_printf_i+0x168>
 800b766:	2301      	movs	r3, #1
 800b768:	4632      	mov	r2, r6
 800b76a:	4649      	mov	r1, r9
 800b76c:	4640      	mov	r0, r8
 800b76e:	47d0      	blx	sl
 800b770:	3001      	adds	r0, #1
 800b772:	d09b      	beq.n	800b6ac <_printf_i+0x164>
 800b774:	3501      	adds	r5, #1
 800b776:	68e3      	ldr	r3, [r4, #12]
 800b778:	9903      	ldr	r1, [sp, #12]
 800b77a:	1a5b      	subs	r3, r3, r1
 800b77c:	42ab      	cmp	r3, r5
 800b77e:	dcf2      	bgt.n	800b766 <_printf_i+0x21e>
 800b780:	e7eb      	b.n	800b75a <_printf_i+0x212>
 800b782:	2500      	movs	r5, #0
 800b784:	f104 0619 	add.w	r6, r4, #25
 800b788:	e7f5      	b.n	800b776 <_printf_i+0x22e>
 800b78a:	bf00      	nop
 800b78c:	0800c3b1 	.word	0x0800c3b1
 800b790:	0800c3c2 	.word	0x0800c3c2

0800b794 <_sbrk_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4d06      	ldr	r5, [pc, #24]	; (800b7b0 <_sbrk_r+0x1c>)
 800b798:	2300      	movs	r3, #0
 800b79a:	4604      	mov	r4, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	f7f6 fe74 	bl	800248c <_sbrk>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_sbrk_r+0x1a>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_sbrk_r+0x1a>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	200015f0 	.word	0x200015f0

0800b7b4 <__sread>:
 800b7b4:	b510      	push	{r4, lr}
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7bc:	f000 f8a0 	bl	800b900 <_read_r>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	bfab      	itete	ge
 800b7c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7c6:	89a3      	ldrhlt	r3, [r4, #12]
 800b7c8:	181b      	addge	r3, r3, r0
 800b7ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7ce:	bfac      	ite	ge
 800b7d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800b7d2:	81a3      	strhlt	r3, [r4, #12]
 800b7d4:	bd10      	pop	{r4, pc}

0800b7d6 <__swrite>:
 800b7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7da:	461f      	mov	r7, r3
 800b7dc:	898b      	ldrh	r3, [r1, #12]
 800b7de:	05db      	lsls	r3, r3, #23
 800b7e0:	4605      	mov	r5, r0
 800b7e2:	460c      	mov	r4, r1
 800b7e4:	4616      	mov	r6, r2
 800b7e6:	d505      	bpl.n	800b7f4 <__swrite+0x1e>
 800b7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f000 f868 	bl	800b8c4 <_lseek_r>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7fe:	81a3      	strh	r3, [r4, #12]
 800b800:	4632      	mov	r2, r6
 800b802:	463b      	mov	r3, r7
 800b804:	4628      	mov	r0, r5
 800b806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b80a:	f000 b817 	b.w	800b83c <_write_r>

0800b80e <__sseek>:
 800b80e:	b510      	push	{r4, lr}
 800b810:	460c      	mov	r4, r1
 800b812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b816:	f000 f855 	bl	800b8c4 <_lseek_r>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	89a3      	ldrh	r3, [r4, #12]
 800b81e:	bf15      	itete	ne
 800b820:	6560      	strne	r0, [r4, #84]	; 0x54
 800b822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b82a:	81a3      	strheq	r3, [r4, #12]
 800b82c:	bf18      	it	ne
 800b82e:	81a3      	strhne	r3, [r4, #12]
 800b830:	bd10      	pop	{r4, pc}

0800b832 <__sclose>:
 800b832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b836:	f000 b813 	b.w	800b860 <_close_r>
	...

0800b83c <_write_r>:
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4d07      	ldr	r5, [pc, #28]	; (800b85c <_write_r+0x20>)
 800b840:	4604      	mov	r4, r0
 800b842:	4608      	mov	r0, r1
 800b844:	4611      	mov	r1, r2
 800b846:	2200      	movs	r2, #0
 800b848:	602a      	str	r2, [r5, #0]
 800b84a:	461a      	mov	r2, r3
 800b84c:	f7fd f910 	bl	8008a70 <_write>
 800b850:	1c43      	adds	r3, r0, #1
 800b852:	d102      	bne.n	800b85a <_write_r+0x1e>
 800b854:	682b      	ldr	r3, [r5, #0]
 800b856:	b103      	cbz	r3, 800b85a <_write_r+0x1e>
 800b858:	6023      	str	r3, [r4, #0]
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	200015f0 	.word	0x200015f0

0800b860 <_close_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4d06      	ldr	r5, [pc, #24]	; (800b87c <_close_r+0x1c>)
 800b864:	2300      	movs	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	f7f6 fdd9 	bl	8002422 <_close>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_close_r+0x1a>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_close_r+0x1a>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	200015f0 	.word	0x200015f0

0800b880 <_fstat_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d07      	ldr	r5, [pc, #28]	; (800b8a0 <_fstat_r+0x20>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	602b      	str	r3, [r5, #0]
 800b88e:	f7f6 fdd4 	bl	800243a <_fstat>
 800b892:	1c43      	adds	r3, r0, #1
 800b894:	d102      	bne.n	800b89c <_fstat_r+0x1c>
 800b896:	682b      	ldr	r3, [r5, #0]
 800b898:	b103      	cbz	r3, 800b89c <_fstat_r+0x1c>
 800b89a:	6023      	str	r3, [r4, #0]
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
 800b89e:	bf00      	nop
 800b8a0:	200015f0 	.word	0x200015f0

0800b8a4 <_isatty_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_isatty_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7f6 fdd3 	bl	800245a <_isatty>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_isatty_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_isatty_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	200015f0 	.word	0x200015f0

0800b8c4 <_lseek_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	; (800b8e4 <_lseek_r+0x20>)
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	602a      	str	r2, [r5, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f7f6 fdcc 	bl	8002470 <_lseek>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_lseek_r+0x1e>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_lseek_r+0x1e>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	200015f0 	.word	0x200015f0

0800b8e8 <__malloc_lock>:
 800b8e8:	4801      	ldr	r0, [pc, #4]	; (800b8f0 <__malloc_lock+0x8>)
 800b8ea:	f7ff bb55 	b.w	800af98 <__retarget_lock_acquire_recursive>
 800b8ee:	bf00      	nop
 800b8f0:	200015e8 	.word	0x200015e8

0800b8f4 <__malloc_unlock>:
 800b8f4:	4801      	ldr	r0, [pc, #4]	; (800b8fc <__malloc_unlock+0x8>)
 800b8f6:	f7ff bb50 	b.w	800af9a <__retarget_lock_release_recursive>
 800b8fa:	bf00      	nop
 800b8fc:	200015e8 	.word	0x200015e8

0800b900 <_read_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d07      	ldr	r5, [pc, #28]	; (800b920 <_read_r+0x20>)
 800b904:	4604      	mov	r4, r0
 800b906:	4608      	mov	r0, r1
 800b908:	4611      	mov	r1, r2
 800b90a:	2200      	movs	r2, #0
 800b90c:	602a      	str	r2, [r5, #0]
 800b90e:	461a      	mov	r2, r3
 800b910:	f7f6 fd6a 	bl	80023e8 <_read>
 800b914:	1c43      	adds	r3, r0, #1
 800b916:	d102      	bne.n	800b91e <_read_r+0x1e>
 800b918:	682b      	ldr	r3, [r5, #0]
 800b91a:	b103      	cbz	r3, 800b91e <_read_r+0x1e>
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	bd38      	pop	{r3, r4, r5, pc}
 800b920:	200015f0 	.word	0x200015f0

0800b924 <_init>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	bf00      	nop
 800b928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b92a:	bc08      	pop	{r3}
 800b92c:	469e      	mov	lr, r3
 800b92e:	4770      	bx	lr

0800b930 <_fini>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	bf00      	nop
 800b934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b936:	bc08      	pop	{r3}
 800b938:	469e      	mov	lr, r3
 800b93a:	4770      	bx	lr
