
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac74  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800adb4  0800adb4  0001adb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b2bc  0800b2bc  0001b2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b2c0  0800b2c0  0001b2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000118  20000008  0800b2c4  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000120  0800b3dc  00020120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 00000096  200001bc  0800b475  000201bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  20000254  0800b50b  00020254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000294  0800b548  00020294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004b8  200002a8  0800b559  000202a8  2**3
                  ALLOC
 11 ._user_heap_stack 00001400  20000760  0800b559  00020760  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   00040e6f  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007671  00000000  00000000  00061144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002ae0  00000000  00000000  000687b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002808  00000000  00000000  0006b298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002e1b4  00000000  00000000  0006daa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002eaf6  00000000  00000000  0009bc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000faff5  00000000  00000000  000ca74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001c573f  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ba74  00000000  00000000  001c5794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002a8 	.word	0x200002a8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ad9c 	.word	0x0800ad9c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002ac 	.word	0x200002ac
 800017c:	0800ad9c 	.word	0x0800ad9c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <strcmp>:
 8000190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000198:	2a01      	cmp	r2, #1
 800019a:	bf28      	it	cs
 800019c:	429a      	cmpcs	r2, r3
 800019e:	d0f7      	beq.n	8000190 <strcmp>
 80001a0:	1ad0      	subs	r0, r2, r3
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800025c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4313      	orrs	r3, r2
 8000266:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800026c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4013      	ands	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000274:	68fb      	ldr	r3, [r7, #12]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000282:	b480      	push	{r7}
 8000284:	b083      	sub	sp, #12
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800028a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800028e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	43db      	mvns	r3, r3
 8000294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000298:	4013      	ands	r3, r2
 800029a:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80002b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002b4:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80002b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4313      	orrs	r3, r2
 80002c0:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4013      	ands	r3, r2
 80002d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002d2:	68fb      	ldr	r3, [r7, #12]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 80002f8:	2303      	movs	r3, #3
 80002fa:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 80002fc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000300:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	2001      	movs	r0, #1
 8000304:	f7ff ffa4 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	4619      	mov	r1, r3
 800030c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000310:	f003 fd74 	bl	8003dfc <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000314:	2001      	movs	r0, #1
 8000316:	f7ff ffb4 	bl	8000282 <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 800031a:	2318      	movs	r3, #24
 800031c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	2002      	movs	r0, #2
 8000320:	f7ff ff96 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4619      	mov	r1, r3
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <APPD_Init+0x70>)
 800032a:	f003 fd67 	bl	8003dfc <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800032e:	2002      	movs	r0, #2
 8000330:	f7ff ffa7 	bl	8000282 <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000334:	f003 fa4a 	bl	80037cc <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000338:	f003 fa4e 	bl	80037d8 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800033c:	f003 fa52 	bl	80037e4 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000340:	f000 f824 	bl	800038c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000344:	f000 f8c6 	bl	80004d4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000348:	bf00      	nop
}
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	48000400 	.word	0x48000400

08000354 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <APPD_EnableCPU2+0x34>)
 800035c:	1d3c      	adds	r4, r7, #4
 800035e:	461d      	mov	r5, r3
 8000360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000368:	c403      	stmia	r4!, {r0, r1}
 800036a:	8022      	strh	r2, [r4, #0]
 800036c:	3402      	adds	r4, #2
 800036e:	0c13      	lsrs	r3, r2, #16
 8000370:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000372:	f008 feb1 	bl	80090d8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f008 f9d4 	bl	8008726 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800037e:	bf00      	nop
}
 8000380:	3720      	adds	r7, #32
 8000382:	46bd      	mov	sp, r7
 8000384:	bdb0      	pop	{r4, r5, r7, pc}
 8000386:	bf00      	nop
 8000388:	0800adb4 	.word	0x0800adb4

0800038c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	77fb      	strb	r3, [r7, #31]
 80003b0:	e038      	b.n	8000424 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80003b2:	7ffb      	ldrb	r3, [r7, #31]
 80003b4:	4a44      	ldr	r2, [pc, #272]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	4413      	add	r3, r2
 80003ba:	799b      	ldrb	r3, [r3, #6]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d02b      	beq.n	8000418 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80003c0:	7ffb      	ldrb	r3, [r7, #31]
 80003c2:	4a41      	ldr	r2, [pc, #260]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003c8:	4a40      	ldr	r2, [pc, #256]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d01b      	beq.n	8000406 <APPD_SetCPU2GpioConfig+0x7a>
 80003ce:	4a3f      	ldr	r2, [pc, #252]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d823      	bhi.n	800041c <APPD_SetCPU2GpioConfig+0x90>
 80003d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003d8:	d003      	beq.n	80003e2 <APPD_SetCPU2GpioConfig+0x56>
 80003da:	4a3d      	ldr	r2, [pc, #244]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d009      	beq.n	80003f4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80003e0:	e01c      	b.n	800041c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80003e2:	7ffb      	ldrb	r3, [r7, #31]
 80003e4:	4a38      	ldr	r2, [pc, #224]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	4413      	add	r3, r2
 80003ea:	889a      	ldrh	r2, [r3, #4]
 80003ec:	8bbb      	ldrh	r3, [r7, #28]
 80003ee:	4313      	orrs	r3, r2
 80003f0:	83bb      	strh	r3, [r7, #28]
          break;
 80003f2:	e014      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80003f4:	7ffb      	ldrb	r3, [r7, #31]
 80003f6:	4a34      	ldr	r2, [pc, #208]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4413      	add	r3, r2
 80003fc:	889a      	ldrh	r2, [r3, #4]
 80003fe:	8b7b      	ldrh	r3, [r7, #26]
 8000400:	4313      	orrs	r3, r2
 8000402:	837b      	strh	r3, [r7, #26]
          break;
 8000404:	e00b      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000406:	7ffb      	ldrb	r3, [r7, #31]
 8000408:	4a2f      	ldr	r2, [pc, #188]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	4413      	add	r3, r2
 800040e:	889a      	ldrh	r2, [r3, #4]
 8000410:	8b3b      	ldrh	r3, [r7, #24]
 8000412:	4313      	orrs	r3, r2
 8000414:	833b      	strh	r3, [r7, #24]
          break;
 8000416:	e002      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000418:	bf00      	nop
 800041a:	e000      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800041c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800041e:	7ffb      	ldrb	r3, [r7, #31]
 8000420:	3301      	adds	r3, #1
 8000422:	77fb      	strb	r3, [r7, #31]
 8000424:	7ffb      	ldrb	r3, [r7, #31]
 8000426:	2b21      	cmp	r3, #33	; 0x21
 8000428:	d9c3      	bls.n	80003b2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000432:	2303      	movs	r3, #3
 8000434:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000436:	8bbb      	ldrh	r3, [r7, #28]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d014      	beq.n	8000466 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800043c:	8bbb      	ldrh	r3, [r7, #28]
 800043e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	2001      	movs	r0, #1
 8000442:	f7ff ff05 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff ff2e 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f003 fcd2 	bl	8003dfc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000458:	8bbb      	ldrh	r3, [r7, #28]
 800045a:	2200      	movs	r2, #0
 800045c:	4619      	mov	r1, r3
 800045e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000462:	f003 fe3b 	bl	80040dc <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000466:	8b7b      	ldrh	r3, [r7, #26]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800046c:	8b7b      	ldrh	r3, [r7, #26]
 800046e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	2002      	movs	r0, #2
 8000472:	f7ff feed 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000476:	2002      	movs	r0, #2
 8000478:	f7ff ff16 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 8000482:	f003 fcbb 	bl	8003dfc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000486:	8b7b      	ldrh	r3, [r7, #26]
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	4810      	ldr	r0, [pc, #64]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 800048e:	f003 fe25 	bl	80040dc <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000492:	8b3b      	ldrh	r3, [r7, #24]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d013      	beq.n	80004c0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000498:	8b3b      	ldrh	r3, [r7, #24]
 800049a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800049c:	2004      	movs	r0, #4
 800049e:	f7ff fed7 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80004a2:	2004      	movs	r0, #4
 80004a4:	f7ff ff00 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80004ae:	f003 fca5 	bl	8003dfc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80004b2:	8b3b      	ldrh	r3, [r7, #24]
 80004b4:	2200      	movs	r2, #0
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80004ba:	f003 fe0f 	bl	80040dc <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
}
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	0800ae40 	.word	0x0800ae40
 80004cc:	48000800 	.word	0x48000800
 80004d0:	48000400 	.word	0x48000400

080004d4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80004d8:	bf00      	nop
}
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <LL_C2_PWR_SetPowerMode+0x28>)
 80004ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004f2:	f023 0207 	bic.w	r2, r3, #7
 80004f6:	4905      	ldr	r1, [pc, #20]	; (800050c <LL_C2_PWR_SetPowerMode+0x28>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	58000400 	.word	0x58000400

08000510 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	608b      	str	r3, [r1, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800053c:	f000 f814 	bl	8000568 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000540:	4908      	ldr	r1, [pc, #32]	; (8000564 <APPE_Init+0x2c>)
 8000542:	2000      	movs	r0, #0
 8000544:	f000 fd38 	bl	8000fb8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000548:	f7ff feca 	bl	80002e0 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800054c:	2101      	movs	r1, #1
 800054e:	2001      	movs	r0, #1
 8000550:	f008 fe60 	bl	8009214 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000554:	f000 f867 	bl	8000626 <Led_Init>

  Button_Init();
 8000558:	f000 f875 	bl	8000646 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800055c:	f000 f812 	bl	8000584 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000560:	bf00      	nop
}
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000638 	.word	0x20000638

08000568 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800056c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000570:	f7ff ffce 	bl	8000510 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000574:	f008 fe3c 	bl	80091f0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000578:	2004      	movs	r0, #4
 800057a:	f7ff ffb3 	bl	80004e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800057e:	bf00      	nop
}
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800058a:	f008 fbef 	bl	8008d6c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <appe_Tl_Init+0x50>)
 8000590:	2100      	movs	r1, #0
 8000592:	2020      	movs	r0, #32
 8000594:	f008 ff88 	bl	80094a8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <appe_Tl_Init+0x54>)
 800059a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <appe_Tl_Init+0x58>)
 800059e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <appe_Tl_Init+0x5c>)
 80005a6:	f008 f8d5 	bl	8008754 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <appe_Tl_Init+0x60>)
 80005ac:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <appe_Tl_Init+0x64>)
 80005b0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <appe_Tl_Init+0x68>)
 80005b4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005b6:	f240 533c 	movw	r3, #1340	; 0x53c
 80005ba:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	4618      	mov	r0, r3
 80005c2:	f008 fd15 	bl	8008ff0 <TL_MM_Init>

  TL_Enable();
 80005c6:	f008 fbcb 	bl	8008d60 <TL_Enable>

  return;
 80005ca:	bf00      	nop
}
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800878d 	.word	0x0800878d
 80005d8:	20030724 	.word	0x20030724
 80005dc:	080005f1 	.word	0x080005f1
 80005e0:	08000607 	.word	0x08000607
 80005e4:	2003093c 	.word	0x2003093c
 80005e8:	20030830 	.word	0x20030830
 80005ec:	200301e8 	.word	0x200301e8

080005f0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80005fa:	bf00      	nop
}
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800060e:	f7ff fea1 	bl	8000354 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000612:	f001 ff01 	bl	8002418 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000616:	2100      	movs	r1, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f008 fdfb 	bl	8009214 <UTIL_LPM_SetOffMode>
  return;
 800061e:	bf00      	nop
}
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800062a:	2000      	movs	r0, #0
 800062c:	f002 fe9c 	bl	8003368 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000630:	2001      	movs	r0, #1
 8000632:	f002 fe99 	bl	8003368 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000636:	2002      	movs	r0, #2
 8000638:	f002 fe96 	bl	8003368 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 800063c:	2001      	movs	r0, #1
 800063e:	f002 fecd 	bl	80033dc <BSP_LED_On>
#endif

  return;
 8000642:	bf00      	nop
}
 8000644:	bd80      	pop	{r7, pc}

08000646 <Button_Init>:

static void Button_Init( void )
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800064a:	2101      	movs	r1, #1
 800064c:	2000      	movs	r0, #0
 800064e:	f002 ff13 	bl	8003478 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000652:	2101      	movs	r1, #1
 8000654:	2001      	movs	r0, #1
 8000656:	f002 ff0f 	bl	8003478 <BSP_PB_Init>
#endif

  return;
 800065a:	bf00      	nop
}
 800065c:	bd80      	pop	{r7, pc}

0800065e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000662:	f008 fe07 	bl	8009274 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000666:	bf00      	nop
}
 8000668:	bd80      	pop	{r7, pc}

0800066a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f008 fe32 	bl	80092e0 <UTIL_SEQ_Run>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800068c:	2100      	movs	r1, #0
 800068e:	2020      	movs	r0, #32
 8000690:	f008 ff2c 	bl	80094ec <UTIL_SEQ_SetTask>
  return;
 8000694:	bf00      	nop
}
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006a4:	2002      	movs	r0, #2
 80006a6:	f008 ff8d 	bl	80095c4 <UTIL_SEQ_SetEvt>
  return;
 80006aa:	bf00      	nop
}
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006ba:	2002      	movs	r0, #2
 80006bc:	f008 ffa2 	bl	8009604 <UTIL_SEQ_WaitEvt>
  return;
 80006c0:	bf00      	nop
}
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d135      	bne.n	8000744 <HAL_GPIO_EXTI_Callback+0x7c>
//    case BUTTON_SW1_PIN:
//     APP_BLE_Key_Button1_Action();
//      break;

    case BUTTON_SW2_PIN:
    	APP_BLE_Key_Button2_Action();
 80006d8:	f002 f806 	bl	80026e8 <APP_BLE_Key_Button2_Action>
    	//BSP_LED_Toggle(LED1);
    	BSP_LED_Toggle(LED_GREEN_BR);
 80006dc:	2003      	movs	r0, #3
 80006de:	f002 feb1 	bl	8003444 <BSP_LED_Toggle>

    	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80006e2:	2200      	movs	r2, #0
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <HAL_GPIO_EXTI_Callback+0x88>)
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <HAL_GPIO_EXTI_Callback+0x8c>)
 80006e8:	f005 fe06 	bl	80062f8 <HAL_RTC_GetTime>
    	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80006ec:	2200      	movs	r2, #0
 80006ee:	491a      	ldr	r1, [pc, #104]	; (8000758 <HAL_GPIO_EXTI_Callback+0x90>)
 80006f0:	4818      	ldr	r0, [pc, #96]	; (8000754 <HAL_GPIO_EXTI_Callback+0x8c>)
 80006f2:	f005 ff0b 	bl	800650c <HAL_RTC_GetDate>

    	currTime.tm_year = currentDate.Year + 100;  // In fact: 2000 + 18 - 1900
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_GPIO_EXTI_Callback+0x90>)
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	3364      	adds	r3, #100	; 0x64
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 80006fe:	6153      	str	r3, [r2, #20]
    	currTime.tm_mday = currentDate.Date;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_GPIO_EXTI_Callback+0x90>)
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	461a      	mov	r2, r3
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000708:	60da      	str	r2, [r3, #12]
    	currTime.tm_mon  = currentDate.Month - 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_GPIO_EXTI_Callback+0x90>)
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000712:	6113      	str	r3, [r2, #16]

    	currTime.tm_hour = currentTime.Hours;
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_GPIO_EXTI_Callback+0x88>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 800071c:	609a      	str	r2, [r3, #8]
    	currTime.tm_min  = currentTime.Minutes;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_GPIO_EXTI_Callback+0x88>)
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	461a      	mov	r2, r3
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000726:	605a      	str	r2, [r3, #4]
    	currTime.tm_sec  = currentTime.Seconds;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_GPIO_EXTI_Callback+0x88>)
 800072a:	789b      	ldrb	r3, [r3, #2]
 800072c:	461a      	mov	r2, r3
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000730:	601a      	str	r2, [r3, #0]

    	timestamp = mktime(&currTime);
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000734:	f009 f908 	bl	8009948 <mktime>
 8000738:	4602      	mov	r2, r0
 800073a:	460b      	mov	r3, r1
 800073c:	4908      	ldr	r1, [pc, #32]	; (8000760 <HAL_GPIO_EXTI_Callback+0x98>)
 800073e:	e9c1 2300 	strd	r2, r3, [r1]
    	break;
 8000742:	e000      	b.n	8000746 <HAL_GPIO_EXTI_Callback+0x7e>
//    case BUTTON_SW3_PIN:
//      APP_BLE_Key_Button3_Action();
//      break;

    default:
      break;
 8000744:	bf00      	nop

  }
  return;
 8000746:	bf00      	nop
}
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000434 	.word	0x20000434
 8000754:	20000638 	.word	0x20000638
 8000758:	20000430 	.word	0x20000430
 800075c:	20000448 	.word	0x20000448
 8000760:	20000428 	.word	0x20000428

08000764 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <LL_EXTI_EnableIT_0_31+0x24>)
 800076e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000772:	4905      	ldr	r1, [pc, #20]	; (8000788 <LL_EXTI_EnableIT_0_31+0x24>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4313      	orrs	r3, r2
 8000778:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	58000800 	.word	0x58000800

0800078c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4904      	ldr	r1, [pc, #16]	; (80007ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4313      	orrs	r3, r2
 800079e:	600b      	str	r3, [r1, #0]

}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	58000800 	.word	0x58000800

080007b0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <ReadRtcSsrValue+0x3c>)
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <ReadRtcSsrValue+0x3c>)
 80007c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80007c6:	e005      	b.n	80007d4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <ReadRtcSsrValue+0x3c>)
 80007ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d1f5      	bne.n	80007c8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80007dc:	683b      	ldr	r3, [r7, #0]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40002800 	.word	0x40002800

080007f0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000800:	79ba      	ldrb	r2, [r7, #6]
 8000802:	491d      	ldr	r1, [pc, #116]	; (8000878 <LinkTimerAfter+0x88>)
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	440b      	add	r3, r1
 800080e:	3315      	adds	r3, #21
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b06      	cmp	r3, #6
 8000818:	d009      	beq.n	800082e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800081a:	7bfa      	ldrb	r2, [r7, #15]
 800081c:	4916      	ldr	r1, [pc, #88]	; (8000878 <LinkTimerAfter+0x88>)
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3314      	adds	r3, #20
 800082a:	79fa      	ldrb	r2, [r7, #7]
 800082c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4911      	ldr	r1, [pc, #68]	; (8000878 <LinkTimerAfter+0x88>)
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3315      	adds	r3, #21
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <LinkTimerAfter+0x88>)
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3314      	adds	r3, #20
 8000852:	79ba      	ldrb	r2, [r7, #6]
 8000854:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	4907      	ldr	r1, [pc, #28]	; (8000878 <LinkTimerAfter+0x88>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3315      	adds	r3, #21
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	701a      	strb	r2, [r3, #0]

  return;
 800086a:	bf00      	nop
}
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000120 	.word	0x20000120

0800087c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	4613      	mov	r3, r2
 800088a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <LinkTimerBefore+0xb8>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	79ba      	ldrb	r2, [r7, #6]
 8000894:	429a      	cmp	r2, r3
 8000896:	d032      	beq.n	80008fe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000898:	79ba      	ldrb	r2, [r7, #6]
 800089a:	4927      	ldr	r1, [pc, #156]	; (8000938 <LinkTimerBefore+0xbc>)
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	440b      	add	r3, r1
 80008a6:	3314      	adds	r3, #20
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80008ac:	7bfa      	ldrb	r2, [r7, #15]
 80008ae:	4922      	ldr	r1, [pc, #136]	; (8000938 <LinkTimerBefore+0xbc>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	440b      	add	r3, r1
 80008ba:	3315      	adds	r3, #21
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	491d      	ldr	r1, [pc, #116]	; (8000938 <LinkTimerBefore+0xbc>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	3315      	adds	r3, #21
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	4918      	ldr	r1, [pc, #96]	; (8000938 <LinkTimerBefore+0xbc>)
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	440b      	add	r3, r1
 80008e2:	3314      	adds	r3, #20
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80008e8:	79ba      	ldrb	r2, [r7, #6]
 80008ea:	4913      	ldr	r1, [pc, #76]	; (8000938 <LinkTimerBefore+0xbc>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	440b      	add	r3, r1
 80008f6:	3314      	adds	r3, #20
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80008fc:	e014      	b.n	8000928 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	490d      	ldr	r1, [pc, #52]	; (8000938 <LinkTimerBefore+0xbc>)
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	440b      	add	r3, r1
 800090c:	3315      	adds	r3, #21
 800090e:	79ba      	ldrb	r2, [r7, #6]
 8000910:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	4908      	ldr	r1, [pc, #32]	; (8000938 <LinkTimerBefore+0xbc>)
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	440b      	add	r3, r1
 8000920:	3314      	adds	r3, #20
 8000922:	79fa      	ldrb	r2, [r7, #7]
 8000924:	701a      	strb	r2, [r3, #0]
  return;
 8000926:	bf00      	nop
}
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	200001b0 	.word	0x200001b0
 8000938:	20000120 	.word	0x20000120

0800093c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000946:	4b4e      	ldr	r3, [pc, #312]	; (8000a80 <linkTimer+0x144>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b06      	cmp	r3, #6
 800094e:	d118      	bne.n	8000982 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000950:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <linkTimer+0x144>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <linkTimer+0x148>)
 8000958:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800095a:	4a49      	ldr	r2, [pc, #292]	; (8000a80 <linkTimer+0x144>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	4949      	ldr	r1, [pc, #292]	; (8000a88 <linkTimer+0x14c>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3315      	adds	r3, #21
 8000970:	2206      	movs	r2, #6
 8000972:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000974:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <linkTimer+0x150>)
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	81fb      	strh	r3, [r7, #14]
 8000980:	e078      	b.n	8000a74 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000982:	f000 f909 	bl	8000b98 <ReturnTimeElapsed>
 8000986:	4603      	mov	r3, r0
 8000988:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	493e      	ldr	r1, [pc, #248]	; (8000a88 <linkTimer+0x14c>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3308      	adds	r3, #8
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	4419      	add	r1, r3
 80009a2:	4839      	ldr	r0, [pc, #228]	; (8000a88 <linkTimer+0x14c>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4403      	add	r3, r0
 80009ae:	3308      	adds	r3, #8
 80009b0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	4934      	ldr	r1, [pc, #208]	; (8000a88 <linkTimer+0x14c>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3308      	adds	r3, #8
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <linkTimer+0x144>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	4a2e      	ldr	r2, [pc, #184]	; (8000a88 <linkTimer+0x14c>)
 80009d0:	460b      	mov	r3, r1
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	440b      	add	r3, r1
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	3308      	adds	r3, #8
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d337      	bcc.n	8000a54 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <linkTimer+0x144>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80009ea:	7b7a      	ldrb	r2, [r7, #13]
 80009ec:	4926      	ldr	r1, [pc, #152]	; (8000a88 <linkTimer+0x14c>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3315      	adds	r3, #21
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80009fe:	e013      	b.n	8000a28 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a00:	7b7a      	ldrb	r2, [r7, #13]
 8000a02:	4921      	ldr	r1, [pc, #132]	; (8000a88 <linkTimer+0x14c>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3315      	adds	r3, #21
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a14:	7b7a      	ldrb	r2, [r7, #13]
 8000a16:	491c      	ldr	r1, [pc, #112]	; (8000a88 <linkTimer+0x14c>)
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	440b      	add	r3, r1
 8000a22:	3315      	adds	r3, #21
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a28:	7b3b      	ldrb	r3, [r7, #12]
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d00b      	beq.n	8000a46 <linkTimer+0x10a>
 8000a2e:	7b3a      	ldrb	r2, [r7, #12]
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <linkTimer+0x14c>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3308      	adds	r3, #8
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d2dc      	bcs.n	8000a00 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000a46:	7b7a      	ldrb	r2, [r7, #13]
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fecf 	bl	80007f0 <LinkTimerAfter>
 8000a52:	e00f      	b.n	8000a74 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <linkTimer+0x144>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff0c 	bl	800087c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <linkTimer+0x144>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <linkTimer+0x148>)
 8000a6c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <linkTimer+0x144>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001b0 	.word	0x200001b0
 8000a84:	200001b1 	.word	0x200001b1
 8000a88:	20000120 	.word	0x20000120
 8000a8c:	200001b4 	.word	0x200001b4

08000a90 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	460a      	mov	r2, r1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000aa0:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <UnlinkTimer+0xf8>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d111      	bne.n	8000ad0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <UnlinkTimer+0xf8>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <UnlinkTimer+0xfc>)
 8000ab4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	4935      	ldr	r1, [pc, #212]	; (8000b90 <UnlinkTimer+0x100>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3315      	adds	r3, #21
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <UnlinkTimer+0xf8>)
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e03e      	b.n	8000b4e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000ad0:	79fa      	ldrb	r2, [r7, #7]
 8000ad2:	492f      	ldr	r1, [pc, #188]	; (8000b90 <UnlinkTimer+0x100>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	440b      	add	r3, r1
 8000ade:	3314      	adds	r3, #20
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000ae4:	79fa      	ldrb	r2, [r7, #7]
 8000ae6:	492a      	ldr	r1, [pc, #168]	; (8000b90 <UnlinkTimer+0x100>)
 8000ae8:	4613      	mov	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	440b      	add	r3, r1
 8000af2:	3315      	adds	r3, #21
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000af8:	79f9      	ldrb	r1, [r7, #7]
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	4824      	ldr	r0, [pc, #144]	; (8000b90 <UnlinkTimer+0x100>)
 8000afe:	460b      	mov	r3, r1
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	440b      	add	r3, r1
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4403      	add	r3, r0
 8000b08:	3315      	adds	r3, #21
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2d8      	uxtb	r0, r3
 8000b0e:	4920      	ldr	r1, [pc, #128]	; (8000b90 <UnlinkTimer+0x100>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	3315      	adds	r3, #21
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d013      	beq.n	8000b4e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b26:	79f9      	ldrb	r1, [r7, #7]
 8000b28:	7bba      	ldrb	r2, [r7, #14]
 8000b2a:	4819      	ldr	r0, [pc, #100]	; (8000b90 <UnlinkTimer+0x100>)
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	440b      	add	r3, r1
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	4403      	add	r3, r0
 8000b36:	3314      	adds	r3, #20
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2d8      	uxtb	r0, r3
 8000b3c:	4914      	ldr	r1, [pc, #80]	; (8000b90 <UnlinkTimer+0x100>)
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	440b      	add	r3, r1
 8000b48:	3314      	adds	r3, #20
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	490f      	ldr	r1, [pc, #60]	; (8000b90 <UnlinkTimer+0x100>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	440b      	add	r3, r1
 8000b5c:	330c      	adds	r3, #12
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <UnlinkTimer+0xf8>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b06      	cmp	r3, #6
 8000b6a:	d107      	bne.n	8000b7c <UnlinkTimer+0xec>
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d104      	bne.n	8000b7c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <UnlinkTimer+0x104>)
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	601a      	str	r2, [r3, #0]
  }

  return;
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
}
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	200001b0 	.word	0x200001b0
 8000b8c:	200001b1 	.word	0x200001b1
 8000b90:	20000120 	.word	0x20000120
 8000b94:	200001b4 	.word	0x200001b4

08000b98 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <ReturnTimeElapsed+0x70>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d026      	beq.n	8000bf6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ba8:	f7ff fe02 	bl	80007b0 <ReadRtcSsrValue>
 8000bac:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <ReturnTimeElapsed+0x70>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d805      	bhi.n	8000bc4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <ReturnTimeElapsed+0x70>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e00a      	b.n	8000bda <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <ReturnTimeElapsed+0x74>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <ReturnTimeElapsed+0x70>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <ReturnTimeElapsed+0x78>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	fb02 f303 	mul.w	r3, r2, r3
 8000be6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <ReturnTimeElapsed+0x7c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	40d3      	lsrs	r3, r2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	e001      	b.n	8000bfa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	b29b      	uxth	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001b4 	.word	0x200001b4
 8000c0c:	200002ca 	.word	0x200002ca
 8000c10:	200002c9 	.word	0x200002c9
 8000c14:	200002c8 	.word	0x200002c8

08000c18 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d108      	bne.n	8000c3a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c28:	f7ff fdc2 	bl	80007b0 <ReadRtcSsrValue>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a24      	ldr	r2, [pc, #144]	; (8000cc0 <RestartWakeupCounter+0xa8>)
 8000c30:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f002 ff59 	bl	8003aea <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000c38:	e03e      	b.n	8000cb8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d803      	bhi.n	8000c48 <RestartWakeupCounter+0x30>
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <RestartWakeupCounter+0xac>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d002      	beq.n	8000c4e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000c4e:	bf00      	nop
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f7      	beq.n	8000c50 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c74:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <RestartWakeupCounter+0xb4>)
 8000c78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c7c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f002 ff41 	bl	8003b06 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <RestartWakeupCounter+0xb8>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	0c1b      	lsrs	r3, r3, #16
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	88fa      	ldrh	r2, [r7, #6]
 8000c8e:	4910      	ldr	r1, [pc, #64]	; (8000cd0 <RestartWakeupCounter+0xb8>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c94:	f7ff fd8c 	bl	80007b0 <ReadRtcSsrValue>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <RestartWakeupCounter+0xa8>)
 8000c9c:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cb0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000cb2:	f3af 8000 	nop.w
  return ;
 8000cb6:	bf00      	nop
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001b4 	.word	0x200001b4
 8000cc4:	200002c8 	.word	0x200002c8
 8000cc8:	200002c4 	.word	0x200002c4
 8000ccc:	58000800 	.word	0x58000800
 8000cd0:	40002800 	.word	0x40002800

08000cd4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <RescheduleTimerList+0x124>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce6:	d108      	bne.n	8000cfa <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000ce8:	bf00      	nop
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <RescheduleTimerList+0x128>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f7      	bne.n	8000cea <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000cfa:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <RescheduleTimerList+0x128>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <RescheduleTimerList+0x128>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d0c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d0e:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <RescheduleTimerList+0x12c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	493b      	ldr	r1, [pc, #236]	; (8000e04 <RescheduleTimerList+0x130>)
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	440b      	add	r3, r1
 8000d22:	3308      	adds	r3, #8
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000d28:	f7ff ff36 	bl	8000b98 <ReturnTimeElapsed>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d205      	bcs.n	8000d44 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <RescheduleTimerList+0x134>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e04d      	b.n	8000de0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <RescheduleTimerList+0x138>)
 8000d48:	8812      	ldrh	r2, [r2, #0]
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d906      	bls.n	8000d64 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <RescheduleTimerList+0x138>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <RescheduleTimerList+0x134>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e03d      	b.n	8000de0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <RescheduleTimerList+0x134>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d74:	e034      	b.n	8000de0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	4922      	ldr	r1, [pc, #136]	; (8000e04 <RescheduleTimerList+0x130>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	440b      	add	r3, r1
 8000d84:	3308      	adds	r3, #8
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d20a      	bcs.n	8000da4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	491c      	ldr	r1, [pc, #112]	; (8000e04 <RescheduleTimerList+0x130>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3308      	adds	r3, #8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e013      	b.n	8000dcc <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	4917      	ldr	r1, [pc, #92]	; (8000e04 <RescheduleTimerList+0x130>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	3308      	adds	r3, #8
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <RescheduleTimerList+0x130>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4403      	add	r3, r0
 8000dc8:	3308      	adds	r3, #8
 8000dca:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <RescheduleTimerList+0x130>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	3315      	adds	r3, #21
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d1c7      	bne.n	8000d76 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000de6:	89bb      	ldrh	r3, [r7, #12]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff15 	bl	8000c18 <RestartWakeupCounter>

  return ;
 8000dee:	bf00      	nop
}
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40002800 	.word	0x40002800
 8000dfc:	200002c4 	.word	0x200002c4
 8000e00:	200001b0 	.word	0x200001b0
 8000e04:	20000120 	.word	0x20000120
 8000e08:	200001b8 	.word	0x200001b8
 8000e0c:	200002cc 	.word	0x200002cc

08000e10 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e16:	f3ef 8310 	mrs	r3, PRIMASK
 8000e1a:	617b      	str	r3, [r7, #20]
  return(result);
 8000e1c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e24:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	22ca      	movs	r2, #202	; 0xca
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e2e:	4b5d      	ldr	r3, [pc, #372]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2253      	movs	r2, #83	; 0x53
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000e38:	4b5a      	ldr	r3, [pc, #360]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e4a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000e4c:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000e54:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e58:	4954      	ldr	r1, [pc, #336]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	440b      	add	r3, r1
 8000e64:	330c      	adds	r3, #12
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d172      	bne.n	8000f54 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000e6e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e72:	494e      	ldr	r1, [pc, #312]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000e82:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e86:	4949      	ldr	r1, [pc, #292]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	3310      	adds	r3, #16
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d050      	beq.n	8000f44 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000ea2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ea6:	4941      	ldr	r1, [pc, #260]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	330d      	adds	r3, #13
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d126      	bne.n	8000f0a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fde4 	bl	8000a90 <UnlinkTimer>
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	f383 8810 	msr	PRIMASK, r3
}
 8000ed2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000ed4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ed8:	4934      	ldr	r1, [pc, #208]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fa4e 	bl	8001390 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	22ca      	movs	r2, #202	; 0xca
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2253      	movs	r2, #83	; 0x53
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
 8000f08:	e014      	b.n	8000f34 <HW_TS_RTC_Wakeup_Handler+0x124>
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f383 8810 	msr	PRIMASK, r3
}
 8000f14:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f9ac 	bl	8001278 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	22ca      	movs	r2, #202	; 0xca
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2253      	movs	r2, #83	; 0x53
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	69b8      	ldr	r0, [r7, #24]
 8000f3e:	f000 faaf 	bl	80014a0 <HW_TS_RTC_Int_AppNot>
 8000f42:	e025      	b.n	8000f90 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000f44:	f7ff fec6 	bl	8000cd4 <RescheduleTimerList>
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f383 8810 	msr	PRIMASK, r3
}
 8000f52:	e01d      	b.n	8000f90 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f54:	bf00      	nop
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f7      	beq.n	8000f56 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f7a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000f7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f383 8810 	msr	PRIMASK, r3
}
 8000f8e:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	22ff      	movs	r2, #255	; 0xff
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000f9a:	bf00      	nop
}
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200002c4 	.word	0x200002c4
 8000fa8:	200001b0 	.word	0x200001b0
 8000fac:	20000120 	.word	0x20000120
 8000fb0:	200001b8 	.word	0x200001b8
 8000fb4:	58000800 	.word	0x58000800

08000fb8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000fc4:	4a64      	ldr	r2, [pc, #400]	; (8001158 <HW_TS_Init+0x1a0>)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fca:	4b63      	ldr	r3, [pc, #396]	; (8001158 <HW_TS_Init+0x1a0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	22ca      	movs	r2, #202	; 0xca
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd4:	4b60      	ldr	r3, [pc, #384]	; (8001158 <HW_TS_Init+0x1a0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2253      	movs	r2, #83	; 0x53
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <HW_TS_Init+0x1a4>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	; (800115c <HW_TS_Init+0x1a4>)
 8000fe4:	f043 0320 	orr.w	r3, r3, #32
 8000fe8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000fea:	4b5c      	ldr	r3, [pc, #368]	; (800115c <HW_TS_Init+0x1a4>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f1c3 0304 	rsb	r3, r3, #4
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HW_TS_Init+0x1a8>)
 8000ffe:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001000:	4b56      	ldr	r3, [pc, #344]	; (800115c <HW_TS_Init+0x1a4>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001008:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800100c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	fa92 f2a2 	rbit	r2, r2
 8001014:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	2a00      	cmp	r2, #0
 800101e:	d101      	bne.n	8001024 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001020:	2220      	movs	r2, #32
 8001022:	e003      	b.n	800102c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	fab2 f282 	clz	r2, r2
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	40d3      	lsrs	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <HW_TS_Init+0x1ac>)
 8001036:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001038:	4b48      	ldr	r3, [pc, #288]	; (800115c <HW_TS_Init+0x1a4>)
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	b29b      	uxth	r3, r3
 800103e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001042:	b29b      	uxth	r3, r3
 8001044:	3301      	adds	r3, #1
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <HW_TS_Init+0x1b0>)
 800104a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HW_TS_Init+0x1b0>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	4a44      	ldr	r2, [pc, #272]	; (8001164 <HW_TS_Init+0x1ac>)
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800105e:	4a40      	ldr	r2, [pc, #256]	; (8001160 <HW_TS_Init+0x1a8>)
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	40d3      	lsrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800106c:	4293      	cmp	r3, r2
 800106e:	d904      	bls.n	800107a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <HW_TS_Init+0x1b4>)
 8001072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001076:	801a      	strh	r2, [r3, #0]
 8001078:	e003      	b.n	8001082 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HW_TS_Init+0x1b4>)
 8001080:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001082:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001086:	f7ff fb81 	bl	800078c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800108a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800108e:	f7ff fb69 	bl	8000764 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d143      	bne.n	8001120 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HW_TS_Init+0x1b8>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <HW_TS_Init+0x1bc>)
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	77fb      	strb	r3, [r7, #31]
 80010aa:	e00c      	b.n	80010c6 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80010ac:	7ffa      	ldrb	r2, [r7, #31]
 80010ae:	4932      	ldr	r1, [pc, #200]	; (8001178 <HW_TS_Init+0x1c0>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	330c      	adds	r3, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	3301      	adds	r3, #1
 80010c4:	77fb      	strb	r3, [r7, #31]
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d9ef      	bls.n	80010ac <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HW_TS_Init+0x1c4>)
 80010ce:	2206      	movs	r2, #6
 80010d0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HW_TS_Init+0x1a0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HW_TS_Init+0x1a0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HW_TS_Init+0x1a0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HW_TS_Init+0x1a0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010fa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HW_TS_Init+0x1c8>)
 80010fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001102:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001104:	2003      	movs	r0, #3
 8001106:	f002 fcfe 	bl	8003b06 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HW_TS_Init+0x1a0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HW_TS_Init+0x1a0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	e00a      	b.n	8001136 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HW_TS_Init+0x1a0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001130:	2003      	movs	r0, #3
 8001132:	f002 fcda 	bl	8003aea <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HW_TS_Init+0x1a0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001140:	2200      	movs	r2, #0
 8001142:	2103      	movs	r1, #3
 8001144:	2003      	movs	r0, #3
 8001146:	f002 fc8e 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800114a:	2003      	movs	r0, #3
 800114c:	f002 fca5 	bl	8003a9a <HAL_NVIC_EnableIRQ>

  return;
 8001150:	bf00      	nop
}
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200002c4 	.word	0x200002c4
 800115c:	40002800 	.word	0x40002800
 8001160:	200002c8 	.word	0x200002c8
 8001164:	200002c9 	.word	0x200002c9
 8001168:	200002ca 	.word	0x200002ca
 800116c:	200002cc 	.word	0x200002cc
 8001170:	200001b8 	.word	0x200001b8
 8001174:	200001b4 	.word	0x200001b4
 8001178:	20000120 	.word	0x20000120
 800117c:	200001b0 	.word	0x200001b0
 8001180:	58000800 	.word	0x58000800

08001184 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001184:	b480      	push	{r7}
 8001186:	b08b      	sub	sp, #44	; 0x2c
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800119a:	f3ef 8310 	mrs	r3, PRIMASK
 800119e:	61fb      	str	r3, [r7, #28]
  return(result);
 80011a0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011a8:	e004      	b.n	80011b4 <HW_TS_Create+0x30>
  {
    loop++;
 80011aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ae:	3301      	adds	r3, #1
 80011b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d80c      	bhi.n	80011d6 <HW_TS_Create+0x52>
 80011bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011c0:	492c      	ldr	r1, [pc, #176]	; (8001274 <HW_TS_Create+0xf0>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	330c      	adds	r3, #12
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e9      	bne.n	80011aa <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d038      	beq.n	8001250 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80011de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011e2:	4924      	ldr	r1, [pc, #144]	; (8001274 <HW_TS_Create+0xf0>)
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	330c      	adds	r3, #12
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f383 8810 	msr	PRIMASK, r3
}
 80011fe:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001200:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001204:	491b      	ldr	r1, [pc, #108]	; (8001274 <HW_TS_Create+0xf0>)
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3310      	adds	r3, #16
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001216:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800121a:	4916      	ldr	r1, [pc, #88]	; (8001274 <HW_TS_Create+0xf0>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	330d      	adds	r3, #13
 8001228:	79fa      	ldrb	r2, [r7, #7]
 800122a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800122c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001230:	4910      	ldr	r1, [pc, #64]	; (8001274 <HW_TS_Create+0xf0>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001246:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800124e:	e008      	b.n	8001262 <HW_TS_Create+0xde>
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f383 8810 	msr	PRIMASK, r3
}
 800125a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800125c:	2301      	movs	r3, #1
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001266:	4618      	mov	r0, r3
 8001268:	372c      	adds	r7, #44	; 0x2c
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000120 	.word	0x20000120

08001278 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001282:	f3ef 8310 	mrs	r3, PRIMASK
 8001286:	60fb      	str	r3, [r7, #12]
  return(result);
 8001288:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800128a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001290:	2003      	movs	r0, #3
 8001292:	f002 fc10 	bl	8003ab6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HW_TS_Stop+0x100>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	22ca      	movs	r2, #202	; 0xca
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <HW_TS_Stop+0x100>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2253      	movs	r2, #83	; 0x53
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	4933      	ldr	r1, [pc, #204]	; (800137c <HW_TS_Stop+0x104>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	330c      	adds	r3, #12
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d148      	bne.n	8001354 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fbe2 	bl	8000a90 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HW_TS_Stop+0x108>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012d2:	7cfb      	ldrb	r3, [r7, #19]
 80012d4:	2b06      	cmp	r3, #6
 80012d6:	d135      	bne.n	8001344 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HW_TS_Stop+0x10c>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e4:	d108      	bne.n	80012f8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80012e6:	bf00      	nop
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HW_TS_Stop+0x100>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f7      	bne.n	80012e8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HW_TS_Stop+0x100>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HW_TS_Stop+0x100>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800130c:	bf00      	nop
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HW_TS_Stop+0x100>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f7      	beq.n	800130e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HW_TS_Stop+0x100>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HW_TS_Stop+0x100>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001332:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HW_TS_Stop+0x110>)
 8001336:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800133a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800133c:	2003      	movs	r0, #3
 800133e:	f002 fbe2 	bl	8003b06 <HAL_NVIC_ClearPendingIRQ>
 8001342:	e007      	b.n	8001354 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <HW_TS_Stop+0x114>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	7cfa      	ldrb	r2, [r7, #19]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001350:	f7ff fcc0 	bl	8000cd4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HW_TS_Stop+0x100>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800135e:	2003      	movs	r0, #3
 8001360:	f002 fb9b 	bl	8003a9a <HAL_NVIC_EnableIRQ>
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f383 8810 	msr	PRIMASK, r3
}
 800136e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001370:	bf00      	nop
}
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200002c4 	.word	0x200002c4
 800137c:	20000120 	.word	0x20000120
 8001380:	200001b0 	.word	0x200001b0
 8001384:	40002800 	.word	0x40002800
 8001388:	58000800 	.word	0x58000800
 800138c:	200001b1 	.word	0x200001b1

08001390 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	493c      	ldr	r1, [pc, #240]	; (8001490 <HW_TS_Start+0x100>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	330c      	adds	r3, #12
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d103      	bne.n	80013bc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff5e 	bl	8001278 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013bc:	f3ef 8310 	mrs	r3, PRIMASK
 80013c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80013c2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013c6:	b672      	cpsid	i
}
 80013c8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013ca:	2003      	movs	r0, #3
 80013cc:	f002 fb73 	bl	8003ab6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HW_TS_Start+0x104>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	22ca      	movs	r2, #202	; 0xca
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HW_TS_Start+0x104>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2253      	movs	r2, #83	; 0x53
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	492a      	ldr	r1, [pc, #168]	; (8001490 <HW_TS_Start+0x100>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	330c      	adds	r3, #12
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	4925      	ldr	r1, [pc, #148]	; (8001490 <HW_TS_Start+0x100>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3308      	adds	r3, #8
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	4920      	ldr	r1, [pc, #128]	; (8001490 <HW_TS_Start+0x100>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3304      	adds	r3, #4
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fa8a 	bl	800093c <linkTimer>
 8001428:	4603      	mov	r3, r0
 800142a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HW_TS_Start+0x108>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HW_TS_Start+0x10c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	7c7a      	ldrb	r2, [r7, #17]
 800143a:	429a      	cmp	r2, r3
 800143c:	d002      	beq.n	8001444 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800143e:	f7ff fc49 	bl	8000cd4 <RescheduleTimerList>
 8001442:	e013      	b.n	800146c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	4912      	ldr	r1, [pc, #72]	; (8001490 <HW_TS_Start+0x100>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3308      	adds	r3, #8
 8001454:	6819      	ldr	r1, [r3, #0]
 8001456:	8a7b      	ldrh	r3, [r7, #18]
 8001458:	79fa      	ldrb	r2, [r7, #7]
 800145a:	1ac9      	subs	r1, r1, r3
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <HW_TS_Start+0x100>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4403      	add	r3, r0
 8001468:	3308      	adds	r3, #8
 800146a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HW_TS_Start+0x104>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001476:	2003      	movs	r0, #3
 8001478:	f002 fb0f 	bl	8003a9a <HAL_NVIC_EnableIRQ>
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f383 8810 	msr	PRIMASK, r3
}
 8001486:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001488:	bf00      	nop
}
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000120 	.word	0x20000120
 8001494:	200002c4 	.word	0x200002c4
 8001498:	200001b0 	.word	0x200001b0
 800149c:	200001b1 	.word	0x200001b1

080014a0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	460b      	mov	r3, r1
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4798      	blx	r3

  return;
 80014b2:	bf00      	nop
}
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_UART_TxCpltCallback+0x4c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00a      	beq.n	80014e4 <HAL_UART_TxCpltCallback+0x28>
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_UART_TxCpltCallback+0x50>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d10f      	bne.n	80014f4 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_UART_TxCpltCallback+0x54>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00d      	beq.n	80014f8 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_UART_TxCpltCallback+0x54>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4798      	blx	r3
            }
            break;
 80014e2:	e009      	b.n	80014f8 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_UART_TxCpltCallback+0x58>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_UART_TxCpltCallback+0x58>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4798      	blx	r3
            }
            break;
 80014f2:	e003      	b.n	80014fc <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80014f4:	bf00      	nop
 80014f6:	e002      	b.n	80014fe <HAL_UART_TxCpltCallback+0x42>
            break;
 80014f8:	bf00      	nop
 80014fa:	e000      	b.n	80014fe <HAL_UART_TxCpltCallback+0x42>
            break;
 80014fc:	bf00      	nop
    }

    return;
 80014fe:	bf00      	nop
}
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40008000 	.word	0x40008000
 800150c:	40013800 	.word	0x40013800
 8001510:	20000478 	.word	0x20000478
 8001514:	2000046c 	.word	0x2000046c

08001518 <LL_PWR_SMPS_Enable>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <LL_PWR_SMPS_Enable+0x1c>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <LL_PWR_SMPS_Enable+0x1c>)
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	61d3      	str	r3, [r2, #28]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	58000400 	.word	0x58000400

08001538 <LL_PWR_SMPS_SetStartupCurrent>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001548:	4904      	ldr	r1, [pc, #16]	; (800155c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4313      	orrs	r3, r2
 800154e:	61cb      	str	r3, [r1, #28]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	58000400 	.word	0x58000400

08001560 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f023 020f 	bic.w	r2, r3, #15
 8001582:	4913      	ldr	r1, [pc, #76]	; (80015d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	61cb      	str	r3, [r1, #28]
}
 800158a:	e019      	b.n	80015c0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3b06      	subs	r3, #6
 8001590:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4413      	add	r3, r2
 8001598:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	da02      	bge.n	80015a6 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e004      	b.n	80015b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	dd01      	ble.n	80015b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80015ac:	230f      	movs	r3, #15
 80015ae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f023 020f 	bic.w	r2, r3, #15
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	4905      	ldr	r1, [pc, #20]	; (80015d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	61cb      	str	r3, [r1, #28]
}
 80015c0:	bf00      	nop
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	1fff7558 	.word	0x1fff7558
 80015d0:	58000400 	.word	0x58000400

080015d4 <LL_EXTI_DisableIT_0_31>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <LL_EXTI_DisableIT_0_31+0x28>)
 80015de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4905      	ldr	r1, [pc, #20]	; (80015fc <LL_EXTI_DisableIT_0_31+0x28>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	58000800 	.word	0x58000800

08001600 <LL_EXTI_DisableIT_32_63>:
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <LL_EXTI_DisableIT_32_63+0x28>)
 800160a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	43db      	mvns	r3, r3
 8001612:	4905      	ldr	r1, [pc, #20]	; (8001628 <LL_EXTI_DisableIT_32_63+0x28>)
 8001614:	4013      	ands	r3, r2
 8001616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	58000800 	.word	0x58000800

0800162c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001638:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800163a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800163e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001646:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001652:	4313      	orrs	r3, r2
 8001654:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	cafecafe 	.word	0xcafecafe

08001668 <LL_RCC_LSE_SetDriveCapability>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001678:	f023 0218 	bic.w	r2, r3, #24
 800167c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4313      	orrs	r3, r2
 8001684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_AHB1_GRP1_EnableClock>:
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_AHB2_GRP1_EnableClock>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <LL_LPM_EnableSleep+0x1c>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <LL_LPM_EnableSleep+0x1c>)
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	6113      	str	r3, [r2, #16]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	22ff      	movs	r2, #255	; 0xff
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	22ca      	movs	r2, #202	; 0xca
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2253      	movs	r2, #83	; 0x53
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 0207 	bic.w	r2, r3, #7
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <main+0x58>)
 80017a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017a6:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a8:	f001 ff5e 	bl	8003668 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80017ac:	f000 fa21 	bl	8001bf2 <Reset_Device>
  Config_HSE();
 80017b0:	f000 fa0b 	bl	8001bca <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b4:	f000 f820 	bl	80017f8 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80017b8:	f000 f8a6 	bl	8001908 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80017bc:	f000 f9fe 	bl	8001bbc <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80017c0:	f000 fa1e 	bl	8001c00 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c4:	f000 f99c 	bl	8001b00 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c8:	f000 f97c 	bl	8001ac4 <MX_DMA_Init>
  MX_RF_Init();
 80017cc:	f000 f8b0 	bl	8001930 <MX_RF_Init>
  MX_RTC_Init();
 80017d0:	f000 f8b6 	bl	8001940 <MX_RTC_Init>
  MX_SPI1_Init();
 80017d4:	f000 f938 	bl	8001a48 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* -1- Initialize LEDs */
    BSP_LED_Init(LED_GREEN_BR);
 80017d8:	2003      	movs	r0, #3
 80017da:	f001 fdc5 	bl	8003368 <BSP_LED_Init>
    BSP_LED_Init(LED_RED);
 80017de:	2002      	movs	r0, #2
 80017e0:	f001 fdc2 	bl	8003368 <BSP_LED_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80017e4:	f7fe fea8 	bl	8000538 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f007 fd78 	bl	80092e0 <UTIL_SEQ_Run>
 80017f0:	e7fa      	b.n	80017e8 <main+0x4c>
 80017f2:	bf00      	nop
 80017f4:	58004000 	.word	0x58004000

080017f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0ae      	sub	sp, #184	; 0xb8
 80017fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001802:	2248      	movs	r2, #72	; 0x48
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f007 ffbe 	bl	8009788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2250      	movs	r2, #80	; 0x50
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f007 ffae 	bl	8009788 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800182c:	f002 fdd6 	bl	80043dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ff19 	bl	8001668 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <SystemClock_Config+0x10c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <SystemClock_Config+0x10c>)
 8001840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <SystemClock_Config+0x10c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001852:	2307      	movs	r3, #7
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800185c:	2301      	movs	r3, #1
 800185e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001864:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001872:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001876:	4618      	mov	r0, r3
 8001878:	f003 f97e 	bl	8004b78 <HAL_RCC_OscConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001882:	f000 f9ee 	bl	8001c62 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001886:	236f      	movs	r3, #111	; 0x6f
 8001888:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800188a:	2302      	movs	r3, #2
 800188c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fcf1 	bl	8005290 <HAL_RCC_ClockConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018b4:	f000 f9d5 	bl	8001c62 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80018b8:	f643 0303 	movw	r3, #14339	; 0x3803
 80018bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80018cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018d0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80018d2:	2302      	movs	r3, #2
 80018d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018d6:	2310      	movs	r3, #16
 80018d8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4618      	mov	r0, r3
 80018de:	f004 f8ec 	bl	8005aba <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80018e8:	f000 f9bb 	bl	8001c62 <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff fe23 	bl	8001538 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80018f2:	2004      	movs	r0, #4
 80018f4:	f7ff fe34 	bl	8001560 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80018f8:	f7ff fe0e 	bl	8001518 <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 80018fc:	bf00      	nop
 80018fe:	37b8      	adds	r7, #184	; 0xb8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	58000400 	.word	0x58000400

08001908 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_IPCC_Init+0x20>)
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <MX_IPCC_Init+0x24>)
 8001910:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_IPCC_Init+0x20>)
 8001914:	f002 fc50 	bl	80041b8 <HAL_IPCC_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800191e:	f000 f9a0 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	2000047c 	.word	0x2000047c
 800192c:	58000c00 	.word	0x58000c00

08001930 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <MX_RTC_Init+0x100>)
 800195a:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <MX_RTC_Init+0x104>)
 800195c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800195e:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <MX_RTC_Init+0x100>)
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001964:	4b36      	ldr	r3, [pc, #216]	; (8001a40 <MX_RTC_Init+0x100>)
 8001966:	227f      	movs	r2, #127	; 0x7f
 8001968:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800196a:	4b35      	ldr	r3, [pc, #212]	; (8001a40 <MX_RTC_Init+0x100>)
 800196c:	22ff      	movs	r2, #255	; 0xff
 800196e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001970:	4b33      	ldr	r3, [pc, #204]	; (8001a40 <MX_RTC_Init+0x100>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <MX_RTC_Init+0x100>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <MX_RTC_Init+0x100>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <MX_RTC_Init+0x100>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001988:	482d      	ldr	r0, [pc, #180]	; (8001a40 <MX_RTC_Init+0x100>)
 800198a:	f004 fb1d 	bl	8005fc8 <HAL_RTC_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001994:	f000 f965 	bl	8001c62 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  /* Set Date and Time (if not already done before)*/
  	/* Read the Back Up Register 0 Data */
  	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2)
 8001998:	2100      	movs	r1, #0
 800199a:	4829      	ldr	r0, [pc, #164]	; (8001a40 <MX_RTC_Init+0x100>)
 800199c:	f004 ff7e 	bl	800689c <HAL_RTCEx_BKUPRead>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d039      	beq.n	8001a1e <MX_RTC_Init+0xde>
  	{
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 80019aa:	2319      	movs	r3, #25
 80019ac:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x27;
 80019ae:	2327      	movs	r3, #39	; 0x27
 80019b0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x20;
 80019b2:	2320      	movs	r3, #32
 80019b4:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2201      	movs	r2, #1
 80019c6:	4619      	mov	r1, r3
 80019c8:	481d      	ldr	r0, [pc, #116]	; (8001a40 <MX_RTC_Init+0x100>)
 80019ca:	f004 fbd1 	bl	8006170 <HAL_RTC_SetTime>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80019d4:	f000 f945 	bl	8001c62 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019d8:	2301      	movs	r3, #1
 80019da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80019dc:	2305      	movs	r3, #5
 80019de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x24;
 80019e0:	2324      	movs	r3, #36	; 0x24
 80019e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80019e4:	2321      	movs	r3, #33	; 0x21
 80019e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	2201      	movs	r2, #1
 80019ec:	4619      	mov	r1, r3
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <MX_RTC_Init+0x100>)
 80019f0:	f004 fcde 	bl	80063b0 <HAL_RTC_SetDate>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 80019fa:	f000 f932 	bl	8001c62 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	480f      	ldr	r0, [pc, #60]	; (8001a40 <MX_RTC_Init+0x100>)
 8001a04:	f004 fe8d 	bl	8006722 <HAL_RTCEx_SetWakeUpTimer>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_RTC_Init+0xd2>
  {
    Error_Handler();
 8001a0e:	f000 f928 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Writes a data in a RTC Backup data Register0 */
  		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001a12:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001a16:	2100      	movs	r1, #0
 8001a18:	4809      	ldr	r0, [pc, #36]	; (8001a40 <MX_RTC_Init+0x100>)
 8001a1a:	f004 ff27 	bl	800686c <HAL_RTCEx_BKUPWrite>
  	}

  	/* Clear source Reset Flag */
  	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001a1e:	f7ff fe39 	bl	8001694 <LL_RCC_ClearResetFlags>
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001a22:	4808      	ldr	r0, [pc, #32]	; (8001a44 <MX_RTC_Init+0x104>)
 8001a24:	f7ff fe97 	bl	8001756 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4806      	ldr	r0, [pc, #24]	; (8001a44 <MX_RTC_Init+0x104>)
 8001a2c:	f7ff fea3 	bl	8001776 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <MX_RTC_Init+0x104>)
 8001a32:	f7ff fe83 	bl	800173c <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000638 	.word	0x20000638
 8001a44:	40002800 	.word	0x40002800

08001a48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a4c:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <MX_SPI1_Init+0x78>)
 8001a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a76:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a96:	2207      	movs	r2, #7
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_SPI1_Init+0x74>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_SPI1_Init+0x74>)
 8001aa2:	2208      	movs	r2, #8
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_SPI1_Init+0x74>)
 8001aa8:	f004 ff4e 	bl	8006948 <HAL_SPI_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ab2:	f000 f8d6 	bl	8001c62 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200006e0 	.word	0x200006e0
 8001ac0:	40013000 	.word	0x40013000

08001ac4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ac8:	2004      	movs	r0, #4
 8001aca:	f7ff fdf4 	bl	80016b6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f7ff fdf1 	bl	80016b6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f7ff fdee 	bl	80016b6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	210f      	movs	r1, #15
 8001ade:	200e      	movs	r0, #14
 8001ae0:	f001 ffc1 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001ae4:	200e      	movs	r0, #14
 8001ae6:	f001 ffd8 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	210f      	movs	r1, #15
 8001aee:	203a      	movs	r0, #58	; 0x3a
 8001af0:	f001 ffb9 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001af4:	203a      	movs	r0, #58	; 0x3a
 8001af6:	f001 ffd0 	bl	8003a9a <HAL_NVIC_EnableIRQ>

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b14:	2004      	movs	r0, #4
 8001b16:	f7ff fde7 	bl	80016e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff fde4 	bl	80016e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	2002      	movs	r0, #2
 8001b22:	f7ff fde1 	bl	80016e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b26:	2008      	movs	r0, #8
 8001b28:	f7ff fdde 	bl	80016e8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f247 0123 	movw	r1, #28707	; 0x7023
 8001b32:	481e      	ldr	r0, [pc, #120]	; (8001bac <MX_GPIO_Init+0xac>)
 8001b34:	f002 fad2 	bl	80040dc <HAL_GPIO_WritePin>
                          |LED2_BR_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_SW1_Pin SW1_BR_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin|SW1_BR_Pin;
 8001b38:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <MX_GPIO_Init+0xb0>)
 8001b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481a      	ldr	r0, [pc, #104]	; (8001bb4 <MX_GPIO_Init+0xb4>)
 8001b4c:	f002 f956 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED3_BR_Pin LED1_BR_Pin
                           LED2_BR_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001b50:	f247 0323 	movw	r3, #28707	; 0x7023
 8001b54:	607b      	str	r3, [r7, #4]
                          |LED2_BR_Pin|LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4811      	ldr	r0, [pc, #68]	; (8001bac <MX_GPIO_Init+0xac>)
 8001b68:	f002 f948 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <MX_GPIO_Init+0xb0>)
 8001b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	480e      	ldr	r0, [pc, #56]	; (8001bb8 <MX_GPIO_Init+0xb8>)
 8001b7e:	f002 f93d 	bl	8003dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b82:	2200      	movs	r2, #0
 8001b84:	2100      	movs	r1, #0
 8001b86:	2006      	movs	r0, #6
 8001b88:	f001 ff6d 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b8c:	2006      	movs	r0, #6
 8001b8e:	f001 ff84 	bl	8003a9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	200a      	movs	r0, #10
 8001b98:	f001 ff65 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b9c:	200a      	movs	r0, #10
 8001b9e:	f001 ff7c 	bl	8003a9a <HAL_NVIC_EnableIRQ>

}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	48000400 	.word	0x48000400
 8001bb0:	10110000 	.word	0x10110000
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	48000c00 	.word	0x48000c00

08001bbc <PeriphClock_Config>:
  * @param  None
  * @retval None
  */

void PeriphClock_Config(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001bc0:	bf00      	nop
}
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f006 fc43 	bl	800845c <OTP_Read>
 8001bd6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	799b      	ldrb	r3, [r3, #6]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fd22 	bl	800162c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
}  
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <Reset_Device>:


static void Reset_Device( void )
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
	Reset_BackupDomain();

	Reset_IPCC();
#endif

	return;
 8001bf6:	bf00      	nop
}
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <Init_Exti>:
//
//	return;
//}

static void Init_Exti( void )
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff fce4 	bl	80015d4 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001c0c:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001c10:	f7ff fcf6 	bl	8001600 <LL_EXTI_DisableIT_32_63>

  return;
 8001c14:	bf00      	nop
}
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c20:	f001 fd90 	bl	8003744 <HAL_GetTick>
 8001c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c30:	d00a      	beq.n	8001c48 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001c32:	f001 fd9f 	bl	8003774 <HAL_GetTickFreq>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461a      	mov	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c40:	e002      	b.n	8001c48 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001c42:	f7ff fd6b 	bl	800171c <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001c46:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001c48:	f001 fd7c 	bl	8003744 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d8f4      	bhi.n	8001c42 <HAL_Delay+0x2a>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_PWR_SetPowerMode>:
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <LL_PWR_SetPowerMode+0x24>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 0207 	bic.w	r2, r3, #7
 8001c80:	4904      	ldr	r1, [pc, #16]	; (8001c94 <LL_PWR_SetPowerMode+0x24>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	58000400 	.word	0x58000400

08001c98 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <LL_PWR_ClearFlag_WU+0x14>)
 8001c9e:	221f      	movs	r2, #31
 8001ca0:	619a      	str	r2, [r3, #24]
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	58000400 	.word	0x58000400

08001cb0 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cc2:	d101      	bne.n	8001cc8 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	58000400 	.word	0x58000400

08001cd8 <LL_RCC_HSE_Enable>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_RCC_HSE_IsReady>:
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001cfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d08:	d101      	bne.n	8001d0e <LL_RCC_HSE_IsReady+0x18>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_RCC_HSE_IsReady+0x1a>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_RCC_HSI_Enable>:
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_RCC_HSI_IsReady>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d4a:	d101      	bne.n	8001d50 <LL_RCC_HSI_IsReady+0x18>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <LL_RCC_HSI_IsReady+0x1a>
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_RCC_SetSysClkSource>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	f023 0203 	bic.w	r2, r3, #3
 8001d6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	608b      	str	r3, [r1, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_RCC_GetSysClkSource>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_RCC_SetSMPSClockSource>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001da4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_LPM_EnableSleep>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <LL_LPM_EnableSleep+0x1c>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <LL_LPM_EnableSleep+0x1c>)
 8001dce:	f023 0304 	bic.w	r3, r3, #4
 8001dd2:	6113      	str	r3, [r2, #16]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <LL_LPM_EnableDeepSleep+0x1c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <LL_LPM_EnableDeepSleep+0x1c>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6113      	str	r3, [r2, #16]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	3220      	adds	r2, #32
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <LL_HSEM_1StepLock+0x2c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d001      	beq.n	8001e22 <LL_HSEM_1StepLock+0x1e>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <LL_HSEM_1StepLock+0x20>
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	80000400 	.word	0x80000400

08001e34 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	68ba      	ldr	r2, [r7, #8]
 8001e4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0

  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001e5e:	f001 fc95 	bl	800378c <HAL_SuspendTick>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU( );
 8001e62:	f7ff ff19 	bl	8001c98 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 8001e66:	2003      	movs	r0, #3
 8001e68:	f7ff ff02 	bl	8001c70 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001e6c:	f7ff ffba 	bl	8001de4 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI( );
 8001e70:	bf30      	wfi
/* USER CODE END PWR_EnterOffMode */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

  HAL_ResumeTick();
 8001e7a:	f001 fc97 	bl	80037ac <HAL_ResumeTick>

/* USER CODE END PWR_ExitOffMode */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode ( this will abort the Stop Mode entry ).
   */
  HAL_SuspendTick();
 8001e88:	f001 fc80 	bl	800378c <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001e8c:	bf00      	nop
 8001e8e:	2103      	movs	r1, #3
 8001e90:	4814      	ldr	r0, [pc, #80]	; (8001ee4 <PWR_EnterStopMode+0x60>)
 8001e92:	f7ff ffb7 	bl	8001e04 <LL_HSEM_1StepLock>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1f8      	bne.n	8001e8e <PWR_EnterStopMode+0xa>

  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 8001e9c:	2104      	movs	r1, #4
 8001e9e:	4811      	ldr	r0, [pc, #68]	; (8001ee4 <PWR_EnterStopMode+0x60>)
 8001ea0:	f7ff ffb0 	bl	8001e04 <LL_HSEM_1StepLock>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10c      	bne.n	8001ec4 <PWR_EnterStopMode+0x40>
  {
    if( LL_PWR_IsActiveFlag_C2DS( ) )
 8001eaa:	f7ff ff01 	bl	8001cb0 <LL_PWR_IsActiveFlag_C2DS>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d009      	beq.n	8001ec8 <PWR_EnterStopMode+0x44>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2104      	movs	r1, #4
 8001eb8:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <PWR_EnterStopMode+0x60>)
 8001eba:	f7ff ffbb 	bl	8001e34 <LL_HSEM_ReleaseLock>

      /**
       * The switch on HSI before entering Stop Mode is required 
       */
      Switch_On_HSI( );
 8001ebe:	f000 f852 	bl	8001f66 <Switch_On_HSI>
 8001ec2:	e001      	b.n	8001ec8 <PWR_EnterStopMode+0x44>
  else
  {
    /**
     * The switch on HSI before entering Stop Mode is required 
     */
    Switch_On_HSI( );
 8001ec4:	f000 f84f 	bl	8001f66 <Switch_On_HSI>
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001ec8:	2200      	movs	r2, #0
 8001eca:	2103      	movs	r1, #3
 8001ecc:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <PWR_EnterStopMode+0x60>)
 8001ece:	f7ff ffb1 	bl	8001e34 <LL_HSEM_ReleaseLock>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode( LL_PWR_MODE_STOP2 );
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f7ff fecc 	bl	8001c70 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001ed8:	f7ff ff84 	bl	8001de4 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 8001edc:	bf30      	wfi
/* USER CODE END PWR_EnterStopMode */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	58001400 	.word	0x58001400

08001ee8 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001eec:	2200      	movs	r2, #0
 8001eee:	2104      	movs	r1, #4
 8001ef0:	4814      	ldr	r0, [pc, #80]	; (8001f44 <PWR_ExitStopMode+0x5c>)
 8001ef2:	f7ff ff9f 	bl	8001e34 <LL_HSEM_ReleaseLock>

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001ef6:	bf00      	nop
 8001ef8:	2103      	movs	r1, #3
 8001efa:	4812      	ldr	r0, [pc, #72]	; (8001f44 <PWR_ExitStopMode+0x5c>)
 8001efc:	f7ff ff82 	bl	8001e04 <LL_HSEM_1StepLock>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f8      	bne.n	8001ef8 <PWR_ExitStopMode+0x10>

  if(LL_RCC_GetSysClkSource( ) == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001f06:	f7ff ff3d 	bl	8001d84 <LL_RCC_GetSysClkSource>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d110      	bne.n	8001f32 <PWR_ExitStopMode+0x4a>
  {
    LL_RCC_HSE_Enable( );
 8001f10:	f7ff fee2 	bl	8001cd8 <LL_RCC_HSE_Enable>
    while(!LL_RCC_HSE_IsReady( ));
 8001f14:	bf00      	nop
 8001f16:	f7ff feee 	bl	8001cf6 <LL_RCC_HSE_IsReady>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0fa      	beq.n	8001f16 <PWR_ExitStopMode+0x2e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001f20:	2002      	movs	r0, #2
 8001f22:	f7ff ff1b 	bl	8001d5c <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001f26:	bf00      	nop
 8001f28:	f7ff ff2c 	bl	8001d84 <LL_RCC_GetSysClkSource>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d1fa      	bne.n	8001f28 <PWR_ExitStopMode+0x40>
     * there is nothing to do here
     */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001f32:	2200      	movs	r2, #0
 8001f34:	2103      	movs	r1, #3
 8001f36:	4803      	ldr	r0, [pc, #12]	; (8001f44 <PWR_ExitStopMode+0x5c>)
 8001f38:	f7ff ff7c 	bl	8001e34 <LL_HSEM_ReleaseLock>

  HAL_ResumeTick();
 8001f3c:	f001 fc36 	bl	80037ac <HAL_ResumeTick>

/* USER CODE END PWR_ExitStopMode */
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	58001400 	.word	0x58001400

08001f48 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

  HAL_SuspendTick();
 8001f4c:	f001 fc1e 	bl	800378c <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001f50:	f7ff ff38 	bl	8001dc4 <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI( );
 8001f54:	bf30      	wfi
/* USER CODE END PWR_EnterSleepMode */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

  HAL_ResumeTick();
 8001f5e:	f001 fc25 	bl	80037ac <HAL_ResumeTick>

/* USER CODE END PWR_ExitSleepMode */
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8001f6a:	f7ff fed6 	bl	8001d1a <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 8001f6e:	bf00      	nop
 8001f70:	f7ff fee2 	bl	8001d38 <LL_RCC_HSI_IsReady>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0fa      	beq.n	8001f70 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f7ff feee 	bl	8001d5c <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff ff0b 	bl	8001d9c <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001f86:	bf00      	nop
 8001f88:	f7ff fefc 	bl	8001d84 <LL_RCC_GetSysClkSource>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d1fa      	bne.n	8001f88 <Switch_On_HSI+0x22>
}
 8001f92:	bf00      	nop
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <LL_RCC_SetRTCClockSource>:
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <LL_RCC_EnableRTC>:
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_RCC_DisableRTC>:
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_AHB2_GRP1_EnableClock>:
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002014:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4313      	orrs	r3, r2
 800201e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800202c:	68fb      	ldr	r3, [r7, #12]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <LL_AHB3_GRP1_EnableClock>:
{
 800203a:	b480      	push	{r7}
 800203c:	b085      	sub	sp, #20
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002046:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002056:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4013      	ands	r3, r2
 800205c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_APB1_GRP1_EnableClock>:
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800207a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4313      	orrs	r3, r2
 8002082:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002088:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002090:	68fb      	ldr	r3, [r7, #12]
}
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_APB1_GRP1_DisableClock>:
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b4:	4013      	ands	r3, r2
 80020b6:	658b      	str	r3, [r1, #88]	; 0x58
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_APB2_GRP1_EnableClock>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4013      	ands	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020e8:	68fb      	ldr	r3, [r7, #12]
}
 80020ea:	bf00      	nop
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002104:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002108:	f7ff ff97 	bl	800203a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	202b      	movs	r0, #43	; 0x2b
 8002112:	f001 fca8 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8002116:	202b      	movs	r0, #43	; 0x2b
 8002118:	f001 fcbf 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	2100      	movs	r1, #0
 8002120:	202e      	movs	r0, #46	; 0x2e
 8002122:	f001 fca0 	bl	8003a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002126:	202e      	movs	r0, #46	; 0x2e
 8002128:	f001 fcb7 	bl	8003a9a <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800212c:	2300      	movs	r3, #0
 800212e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002134:	463b      	mov	r3, r7
 8002136:	4618      	mov	r0, r3
 8002138:	f002 f960 	bl	80043fc <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800213c:	f002 f9a0 	bl	8004480 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a0d      	ldr	r2, [pc, #52]	; (800218c <HAL_IPCC_MspInit+0x44>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d113      	bne.n	8002182 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800215a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800215e:	f7ff ff6c 	bl	800203a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	202c      	movs	r0, #44	; 0x2c
 8002168:	f001 fc7d 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800216c:	202c      	movs	r0, #44	; 0x2c
 800216e:	f001 fc94 	bl	8003a9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	202d      	movs	r0, #45	; 0x2d
 8002178:	f001 fc75 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800217c:	202d      	movs	r0, #45	; 0x2d
 800217e:	f001 fc8c 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	58000c00 	.word	0x58000c00

08002190 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_RTC_MspInit+0x3c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d110      	bne.n	80021c4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80021a2:	f002 f91b 	bl	80043dc <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 80021a6:	f002 f919 	bl	80043dc <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80021aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021ae:	f7ff fef3 	bl	8001f98 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021b2:	f7ff ff07 	bl	8001fc4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ba:	f7ff ff57 	bl	800206c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f004 fb82 	bl	80068c8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40002800 	.word	0x40002800

080021d0 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <HAL_RTC_MspDeInit+0x28>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d105      	bne.n	80021ee <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80021e2:	f7ff ff00 	bl	8001fe6 <LL_RCC_DisableRTC>
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 80021e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021ea:	f7ff ff58 	bl	800209e <LL_APB1_GRP1_DisableClock>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40002800 	.word	0x40002800

080021fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <HAL_SPI_MspInit+0x5c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d117      	bne.n	800224e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800221e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002222:	f7ff ff4f 	bl	80020c4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2001      	movs	r0, #1
 8002228:	f7ff feee 	bl	8002008 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800222c:	23f0      	movs	r3, #240	; 0xf0
 800222e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002230:	2302      	movs	r3, #2
 8002232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	2300      	movs	r3, #0
 800223a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800223c:	2305      	movs	r3, #5
 800223e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	4619      	mov	r1, r3
 8002246:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800224a:	f001 fdd7 	bl	8003dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40013000 	.word	0x40013000

0800225c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <HardFault_Handler+0x4>

08002270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <MemManage_Handler+0x4>

08002276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <UsageFault_Handler+0x4>

08002282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b0:	f001 fa34 	bl	800371c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022bc:	2001      	movs	r0, #1
 80022be:	f001 ff3f 	bl	8004140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80022ca:	2010      	movs	r0, #16
 80022cc:	f001 ff38 	bl	8004140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <DMA1_Channel4_IRQHandler+0x10>)
 80022da:	f001 fce0 	bl	8003c9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000680 	.word	0x20000680

080022e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022ec:	4802      	ldr	r0, [pc, #8]	; (80022f8 <USART1_IRQHandler+0x10>)
 80022ee:	f004 fbcf 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200005a8 	.word	0x200005a8

080022fc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002300:	4802      	ldr	r0, [pc, #8]	; (800230c <LPUART1_IRQHandler+0x10>)
 8002302:	f004 fbc5 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200004b8 	.word	0x200004b8

08002310 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002322:	f000 fe7d 	bl	8003020 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}

0800232a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800232e:	f000 feaf 	bl	8003090 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}

08002336 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800233a:	f001 ff19 	bl	8004170 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002348:	4802      	ldr	r0, [pc, #8]	; (8002354 <DMA2_Channel4_IRQHandler+0x10>)
 800234a:	f001 fca8 	bl	8003c9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000548 	.word	0x20000548

08002358 <RTC_WKUP_IRQHandler>:
//{
//  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
//}

void RTC_WKUP_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800235c:	f7fe fd58 	bl	8000e10 <HW_TS_RTC_Wakeup_Handler>
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f007 f9c0 	bl	8009718 <__errno>
 8002398:	4603      	mov	r3, r0
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20030000 	.word	0x20030000
 80023c4:	00001000 	.word	0x00001000
 80023c8:	200002d4 	.word	0x200002d4
 80023cc:	20000760 	.word	0x20000760

080023d0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <LL_FLASH_GetUDN+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	1fff7580 	.word	0x1fff7580

080023e8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80023ec:	4b03      	ldr	r3, [pc, #12]	; (80023fc <LL_FLASH_GetDeviceID+0x14>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	1fff7584 	.word	0x1fff7584

08002400 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8002404:	4b03      	ldr	r3, [pc, #12]	; (8002414 <LL_FLASH_GetSTCompanyID+0x14>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0a1b      	lsrs	r3, r3, #8
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	1fff7584 	.word	0x1fff7584

08002418 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b08c      	sub	sp, #48	; 0x30
 800241c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <APP_BLE_Init+0xc4>)
 8002420:	463c      	mov	r4, r7
 8002422:	461d      	mov	r5, r3
 8002424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800242c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002430:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8002434:	f000 f964 	bl	8002700 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002438:	2101      	movs	r1, #1
 800243a:	2002      	movs	r0, #2
 800243c:	f006 feea 	bl	8009214 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002440:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <APP_BLE_Init+0xc8>)
 8002442:	2100      	movs	r1, #0
 8002444:	2008      	movs	r0, #8
 8002446:	f007 f82f 	bl	80094a8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800244a:	463b      	mov	r3, r7
 800244c:	4618      	mov	r0, r3
 800244e:	f006 f953 	bl	80086f8 <SHCI_C2_BLE_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8002458:	f7ff fc03 	bl	8001c62 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800245c:	f000 f966 	bl	800272c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002460:	f006 fbda 	bl	8008c18 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002464:	4b1f      	ldr	r3, [pc, #124]	; (80024e4 <APP_BLE_Init+0xcc>)
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800246c:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <APP_BLE_Init+0xcc>)
 800246e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002472:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8002474:	4a1c      	ldr	r2, [pc, #112]	; (80024e8 <APP_BLE_Init+0xd0>)
 8002476:	2100      	movs	r1, #0
 8002478:	2001      	movs	r0, #1
 800247a:	f007 f815 	bl	80094a8 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800247e:	4a1b      	ldr	r2, [pc, #108]	; (80024ec <APP_BLE_Init+0xd4>)
 8002480:	2100      	movs	r1, #0
 8002482:	2004      	movs	r0, #4
 8002484:	f007 f810 	bl	80094a8 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8002488:	2006      	movs	r0, #6
 800248a:	f005 fc70 	bl	8007d6e <aci_hal_set_radio_activity_mask>
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 800248e:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <APP_BLE_Init+0xd8>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8002494:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <APP_BLE_Init+0xdc>)
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800249a:	f000 fc29 	bl	8002cf0 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <APP_BLE_Init+0xe0>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	4916      	ldr	r1, [pc, #88]	; (80024fc <APP_BLE_Init+0xe4>)
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fe6d 	bl	8001184 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <APP_BLE_Init+0xe8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	4915      	ldr	r1, [pc, #84]	; (8002504 <APP_BLE_Init+0xec>)
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fe67 	bl	8001184 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <APP_BLE_Init+0xcc>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <APP_BLE_Init+0xcc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <APP_BLE_Init+0xf0>)
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80024c8:	4b10      	ldr	r3, [pc, #64]	; (800250c <APP_BLE_Init+0xf4>)
 80024ca:	22a0      	movs	r2, #160	; 0xa0
 80024cc:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80024ce:	2001      	movs	r0, #1
 80024d0:	f000 f9ee 	bl	80028b0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80024d4:	bf00      	nop
}
 80024d6:	3730      	adds	r7, #48	; 0x30
 80024d8:	46bd      	mov	sp, r7
 80024da:	bdb0      	pop	{r4, r5, r7, pc}
 80024dc:	0800add0 	.word	0x0800add0
 80024e0:	08008129 	.word	0x08008129
 80024e4:	200001bc 	.word	0x200001bc
 80024e8:	08002a19 	.word	0x08002a19
 80024ec:	08002b1d 	.word	0x08002b1d
 80024f0:	20000749 	.word	0x20000749
 80024f4:	20000748 	.word	0x20000748
 80024f8:	08002a51 	.word	0x08002a51
 80024fc:	2000023d 	.word	0x2000023d
 8002500:	08002a61 	.word	0x08002a61
 8002504:	2000023e 	.word	0x2000023e
 8002508:	20000240 	.word	0x20000240
 800250c:	20000242 	.word	0x20000242

08002510 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08c      	sub	sp, #48	; 0x30
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002518:	2342      	movs	r3, #66	; 0x42
 800251a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3301      	adds	r3, #1
 8002522:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8002524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2bff      	cmp	r3, #255	; 0xff
 800252a:	d078      	beq.n	800261e <SVCCTL_App_Notification+0x10e>
 800252c:	2bff      	cmp	r3, #255	; 0xff
 800252e:	f300 80cd 	bgt.w	80026cc <SVCCTL_App_Notification+0x1bc>
 8002532:	2b05      	cmp	r3, #5
 8002534:	d002      	beq.n	800253c <SVCCTL_App_Notification+0x2c>
 8002536:	2b3e      	cmp	r3, #62	; 0x3e
 8002538:	d020      	beq.n	800257c <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800253a:	e0c7      	b.n	80026cc <SVCCTL_App_Notification+0x1bc>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800253c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253e:	3302      	adds	r3, #2
 8002540:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002548:	b29a      	uxth	r2, r3
 800254a:	4b64      	ldr	r3, [pc, #400]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 800254c:	8adb      	ldrh	r3, [r3, #22]
 800254e:	429a      	cmp	r2, r3
 8002550:	d106      	bne.n	8002560 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002552:	4b62      	ldr	r3, [pc, #392]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 8002554:	2200      	movs	r2, #0
 8002556:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002558:	4b60      	ldr	r3, [pc, #384]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8002560:	2001      	movs	r0, #1
 8002562:	f000 f9a5 	bl	80028b0 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002566:	4b5e      	ldr	r3, [pc, #376]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800256c:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 800256e:	8ada      	ldrh	r2, [r3, #22]
 8002570:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 8002572:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8002574:	485a      	ldr	r0, [pc, #360]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 8002576:	f000 fba7 	bl	8002cc8 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800257a:	e0aa      	b.n	80026d2 <SVCCTL_App_Notification+0x1c2>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800257c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257e:	3302      	adds	r3, #2
 8002580:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d005      	beq.n	8002596 <SVCCTL_App_Notification+0x86>
 800258a:	2b0c      	cmp	r3, #12
 800258c:	dc45      	bgt.n	800261a <SVCCTL_App_Notification+0x10a>
 800258e:	2b01      	cmp	r3, #1
 8002590:	d011      	beq.n	80025b6 <SVCCTL_App_Notification+0xa6>
 8002592:	2b03      	cmp	r3, #3
          break;
 8002594:	e041      	b.n	800261a <SVCCTL_App_Notification+0x10a>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800259c:	4b4f      	ldr	r3, [pc, #316]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 800259e:	8adb      	ldrh	r3, [r3, #22]
 80025a0:	f107 020e 	add.w	r2, r7, #14
 80025a4:	f107 010f 	add.w	r1, r7, #15
 80025a8:	4618      	mov	r0, r3
 80025aa:	f005 fc4e 	bl	8007e4a <hci_le_read_phy>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 80025b4:	e032      	b.n	800261c <SVCCTL_App_Notification+0x10c>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80025bc:	4b47      	ldr	r3, [pc, #284]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 80025be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fe fe58 	bl	8001278 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80025c8:	4b44      	ldr	r3, [pc, #272]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 80025ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d104      	bne.n	80025dc <SVCCTL_App_Notification+0xcc>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80025d2:	4b42      	ldr	r3, [pc, #264]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 80025d4:	2206      	movs	r2, #6
 80025d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80025da:	e003      	b.n	80025e4 <SVCCTL_App_Notification+0xd4>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80025dc:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 80025de:	2205      	movs	r2, #5
 80025e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	4b3b      	ldr	r3, [pc, #236]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 80025ee:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80025f0:	4b3b      	ldr	r3, [pc, #236]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 80025f8:	8ada      	ldrh	r2, [r3, #22]
 80025fa:	4b39      	ldr	r3, [pc, #228]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 80025fc:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80025fe:	4838      	ldr	r0, [pc, #224]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 8002600:	f000 fb62 	bl	8002cc8 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002604:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 800260c:	8ada      	ldrh	r2, [r3, #22]
 800260e:	4b34      	ldr	r3, [pc, #208]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 8002610:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8002612:	4833      	ldr	r0, [pc, #204]	; (80026e0 <SVCCTL_App_Notification+0x1d0>)
 8002614:	f000 fb58 	bl	8002cc8 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002618:	e000      	b.n	800261c <SVCCTL_App_Notification+0x10c>
          break;
 800261a:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800261c:	e059      	b.n	80026d2 <SVCCTL_App_Notification+0x1c2>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	3302      	adds	r3, #2
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800262e:	d03c      	beq.n	80026aa <SVCCTL_App_Notification+0x19a>
 8002630:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002634:	dc4c      	bgt.n	80026d0 <SVCCTL_App_Notification+0x1c0>
 8002636:	2b04      	cmp	r3, #4
 8002638:	d03b      	beq.n	80026b2 <SVCCTL_App_Notification+0x1a2>
 800263a:	2b04      	cmp	r3, #4
 800263c:	db48      	blt.n	80026d0 <SVCCTL_App_Notification+0x1c0>
 800263e:	f240 420a 	movw	r2, #1034	; 0x40a
 8002642:	4293      	cmp	r3, r2
 8002644:	dc44      	bgt.n	80026d0 <SVCCTL_App_Notification+0x1c0>
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264a:	db41      	blt.n	80026d0 <SVCCTL_App_Notification+0x1c0>
 800264c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002650:	2b0a      	cmp	r3, #10
 8002652:	d83d      	bhi.n	80026d0 <SVCCTL_App_Notification+0x1c0>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <SVCCTL_App_Notification+0x14c>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	080026c9 	.word	0x080026c9
 8002660:	080026a3 	.word	0x080026a3
 8002664:	080026c9 	.word	0x080026c9
 8002668:	080026c9 	.word	0x080026c9
 800266c:	080026c9 	.word	0x080026c9
 8002670:	08002689 	.word	0x08002689
 8002674:	080026d1 	.word	0x080026d1
 8002678:	080026c9 	.word	0x080026c9
 800267c:	080026c9 	.word	0x080026c9
 8002680:	08002695 	.word	0x08002695
 8002684:	080026c9 	.word	0x080026c9
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 800268a:	8adb      	ldrh	r3, [r3, #22]
 800268c:	4618      	mov	r0, r3
 800268e:	f004 ffc8 	bl	8007622 <aci_gap_allow_rebond>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8002692:	e01a      	b.n	80026ca <SVCCTL_App_Notification+0x1ba>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 8002696:	8adb      	ldrh	r3, [r3, #22]
 8002698:	2101      	movs	r1, #1
 800269a:	4618      	mov	r0, r3
 800269c:	f005 f80b 	bl	80076b6 <aci_gap_numeric_comparison_value_confirm_yesno>
      break;
 80026a0:	e013      	b.n	80026ca <SVCCTL_App_Notification+0x1ba>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	3302      	adds	r3, #2
 80026a6:	623b      	str	r3, [r7, #32]
           break;    
 80026a8:	e00f      	b.n	80026ca <SVCCTL_App_Notification+0x1ba>
          mutex = 1;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <SVCCTL_App_Notification+0x1d4>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
      break;
 80026b0:	e00b      	b.n	80026ca <SVCCTL_App_Notification+0x1ba>
          BSP_LED_On(LED_GREEN);
 80026b2:	2001      	movs	r0, #1
 80026b4:	f000 fe92 	bl	80033dc <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <SVCCTL_App_Notification+0x1cc>)
 80026ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026be:	210a      	movs	r1, #10
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fe fe65 	bl	8001390 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80026c6:	e000      	b.n	80026ca <SVCCTL_App_Notification+0x1ba>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 80026c8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80026ca:	e001      	b.n	80026d0 <SVCCTL_App_Notification+0x1c0>
      break;
 80026cc:	bf00      	nop
 80026ce:	e000      	b.n	80026d2 <SVCCTL_App_Notification+0x1c2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80026d0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3730      	adds	r7, #48	; 0x30
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	200001bc 	.word	0x200001bc
 80026e0:	20000744 	.word	0x20000744
 80026e4:	20000748 	.word	0x20000748

080026e8 <APP_BLE_Key_Button2_Action>:
{
  P2PS_APP_SW1_Button_Action();
}

void APP_BLE_Key_Button2_Action(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 80026ec:	2100      	movs	r1, #0
 80026ee:	2010      	movs	r0, #16
 80026f0:	f006 fefc 	bl	80094ec <UTIL_SEQ_SetTask>
	Adv_Request(APP_BLE_FAST_ADV);
 80026f4:	2001      	movs	r0, #1
 80026f6:	f000 f8db 	bl	80028b0 <Adv_Request>
	return;
 80026fa:	bf00      	nop
}
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <Ble_Tl_Init+0x20>)
 8002708:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <Ble_Tl_Init+0x24>)
 800270c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800270e:	463b      	mov	r3, r7
 8002710:	4619      	mov	r1, r3
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <Ble_Tl_Init+0x28>)
 8002714:	f005 fcec 	bl	80080f0 <hci_init>

  return;
 8002718:	bf00      	nop
}
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20030028 	.word	0x20030028
 8002724:	08002bc5 	.word	0x08002bc5
 8002728:	08002b8d 	.word	0x08002b8d

0800272c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	b08f      	sub	sp, #60	; 0x3c
 8002730:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8002732:	2300      	movs	r3, #0
 8002734:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8002736:	f005 fb64 	bl	8007e02 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800273a:	f000 f929 	bl	8002990 <BleGetBdAddress>
 800273e:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	2106      	movs	r1, #6
 8002744:	2000      	movs	r0, #0
 8002746:	f005 fa52 	bl	8007bee <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	795a      	ldrb	r2, [r3, #5]
 800274e:	4b52      	ldr	r3, [pc, #328]	; (8002898 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002750:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	791a      	ldrb	r2, [r3, #4]
 8002756:	4b50      	ldr	r3, [pc, #320]	; (8002898 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002758:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	78da      	ldrb	r2, [r3, #3]
 800275e:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002760:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	789a      	ldrb	r2, [r3, #2]
 8002766:	4b4c      	ldr	r3, [pc, #304]	; (8002898 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002768:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	785a      	ldrb	r2, [r3, #1]
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002770:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	4b48      	ldr	r3, [pc, #288]	; (8002898 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002778:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800277a:	f64e 536e 	movw	r3, #60782	; 0xed6e
 800277e:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8002780:	f7ff fe26 	bl	80023d0 <LL_FLASH_GetUDN>
 8002784:	4603      	mov	r3, r0
 8002786:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	461a      	mov	r2, r3
 800278c:	2106      	movs	r1, #6
 800278e:	202e      	movs	r0, #46	; 0x2e
 8002790:	f005 fa2d 	bl	8007bee <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002794:	4a41      	ldr	r2, [pc, #260]	; (800289c <Ble_Hci_Gap_Gatt_Init+0x170>)
 8002796:	2110      	movs	r1, #16
 8002798:	2018      	movs	r0, #24
 800279a:	f005 fa28 	bl	8007bee <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800279e:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <Ble_Hci_Gap_Gatt_Init+0x174>)
 80027a0:	2110      	movs	r1, #16
 80027a2:	2008      	movs	r0, #8
 80027a4:	f005 fa23 	bl	8007bee <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80027a8:	2118      	movs	r1, #24
 80027aa:	2001      	movs	r0, #1
 80027ac:	f005 fa88 	bl	8007cc0 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80027b0:	f004 ffd8 	bl	8007764 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80027b4:	2300      	movs	r3, #0
 80027b6:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80027b8:	7efb      	ldrb	r3, [r7, #27]
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80027c0:	7efb      	ldrb	r3, [r7, #27]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01e      	beq.n	8002804 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "BREATHE";
 80027c6:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80027c8:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 80027ca:	f107 0212 	add.w	r2, r7, #18
 80027ce:	7ef8      	ldrb	r0, [r7, #27]
 80027d0:	f107 030e 	add.w	r3, r7, #14
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	f107 0310 	add.w	r3, r7, #16
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	2207      	movs	r2, #7
 80027e0:	2100      	movs	r1, #0
 80027e2:	f004 fe13 	bl	800740c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80027e6:	8a7c      	ldrh	r4, [r7, #18]
 80027e8:	8a3d      	ldrh	r5, [r7, #16]
 80027ea:	6978      	ldr	r0, [r7, #20]
 80027ec:	f7fd fcc8 	bl	8000180 <strlen>
 80027f0:	4603      	mov	r3, r0
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	4613      	mov	r3, r2
 80027fa:	2200      	movs	r2, #0
 80027fc:	4629      	mov	r1, r5
 80027fe:	4620      	mov	r0, r4
 8002800:	f005 f96e 	bl	8007ae0 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002804:	8a78      	ldrh	r0, [r7, #18]
 8002806:	89f9      	ldrh	r1, [r7, #14]
 8002808:	463b      	mov	r3, r7
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2302      	movs	r3, #2
 800280e:	2200      	movs	r2, #0
 8002810:	f005 f966 	bl	8007ae0 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002814:	2202      	movs	r2, #2
 8002816:	2102      	movs	r1, #2
 8002818:	2000      	movs	r0, #0
 800281a:	f005 fb7e 	bl	8007f1a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002824:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f004 fcfd 	bl	8007228 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002830:	2201      	movs	r2, #1
 8002832:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002836:	2208      	movs	r2, #8
 8002838:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800283a:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800283c:	2210      	movs	r2, #16
 800283e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002842:	2200      	movs	r2, #0
 8002844:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002848:	4a18      	ldr	r2, [pc, #96]	; (80028ac <Ble_Hci_Gap_Gatt_Init+0x180>)
 800284a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800284c:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800284e:	2201      	movs	r2, #1
 8002850:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002854:	789c      	ldrb	r4, [r3, #2]
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002858:	785d      	ldrb	r5, [r3, #1]
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800285c:	791b      	ldrb	r3, [r3, #4]
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002860:	7952      	ldrb	r2, [r2, #5]
 8002862:	4911      	ldr	r1, [pc, #68]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002864:	78c9      	ldrb	r1, [r1, #3]
 8002866:	4810      	ldr	r0, [pc, #64]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002868:	6880      	ldr	r0, [r0, #8]
 800286a:	2600      	movs	r6, #0
 800286c:	9604      	str	r6, [sp, #16]
 800286e:	9003      	str	r0, [sp, #12]
 8002870:	9102      	str	r1, [sp, #8]
 8002872:	9201      	str	r2, [sp, #4]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	2201      	movs	r2, #1
 800287a:	4629      	mov	r1, r5
 800287c:	4620      	mov	r0, r4
 800287e:	f004 fd1d 	bl	80072bc <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002884:	789b      	ldrb	r3, [r3, #2]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 800288a:	f004 fea6 	bl	80075da <aci_gap_configure_whitelist>
   }
}
 800288e:	bf00      	nop
 8002890:	3724      	adds	r7, #36	; 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	bf00      	nop
 8002898:	20000014 	.word	0x20000014
 800289c:	0800af70 	.word	0x0800af70
 80028a0:	0800af80 	.word	0x0800af80
 80028a4:	0800ae00 	.word	0x0800ae00
 80028a8:	200001bc 	.word	0x200001bc
 80028ac:	0001b207 	.word	0x0001b207

080028b0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af08      	add	r7, sp, #32
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80028ba:	2342      	movs	r3, #66	; 0x42
 80028bc:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80028be:	79fb      	ldrb	r3, [r7, #7]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d106      	bne.n	80028d2 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80028c4:	4b2b      	ldr	r3, [pc, #172]	; (8002974 <Adv_Request+0xc4>)
 80028c6:	881b      	ldrh	r3, [r3, #0]
 80028c8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <Adv_Request+0xc8>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	81bb      	strh	r3, [r7, #12]
 80028d0:	e005      	b.n	80028de <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80028d2:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80028d6:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80028d8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80028dc:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80028de:	4b27      	ldr	r3, [pc, #156]	; (800297c <Adv_Request+0xcc>)
 80028e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7fe fcc7 	bl	8001278 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d10d      	bne.n	800290c <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80028f0:	4b22      	ldr	r3, [pc, #136]	; (800297c <Adv_Request+0xcc>)
 80028f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d004      	beq.n	8002904 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80028fa:	4b20      	ldr	r3, [pc, #128]	; (800297c <Adv_Request+0xcc>)
 80028fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002900:	2b02      	cmp	r3, #2
 8002902:	d103      	bne.n	800290c <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8002904:	f004 fb8e 	bl	8007024 <aci_gap_set_non_discoverable>
 8002908:	4603      	mov	r3, r0
 800290a:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800290c:	4a1b      	ldr	r2, [pc, #108]	; (800297c <Adv_Request+0xcc>)
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <Adv_Request+0xcc>)
 8002916:	7e1b      	ldrb	r3, [r3, #24]
 8002918:	89ba      	ldrh	r2, [r7, #12]
 800291a:	89f9      	ldrh	r1, [r7, #14]
 800291c:	2000      	movs	r0, #0
 800291e:	9006      	str	r0, [sp, #24]
 8002920:	2000      	movs	r0, #0
 8002922:	9005      	str	r0, [sp, #20]
 8002924:	4816      	ldr	r0, [pc, #88]	; (8002980 <Adv_Request+0xd0>)
 8002926:	9004      	str	r0, [sp, #16]
 8002928:	9303      	str	r3, [sp, #12]
 800292a:	4b16      	ldr	r3, [pc, #88]	; (8002984 <Adv_Request+0xd4>)
 800292c:	9302      	str	r3, [sp, #8]
 800292e:	2308      	movs	r3, #8
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2300      	movs	r3, #0
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2300      	movs	r3, #0
 8002938:	2000      	movs	r0, #0
 800293a:	f004 fb97 	bl	800706c <aci_gap_set_discoverable>
 800293e:	4603      	mov	r3, r0
 8002940:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8002942:	4911      	ldr	r1, [pc, #68]	; (8002988 <Adv_Request+0xd8>)
 8002944:	200e      	movs	r0, #14
 8002946:	f004 fdec 	bl	8007522 <aci_gap_update_adv_data>
 800294a:	4603      	mov	r3, r0
 800294c:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800294e:	7afb      	ldrb	r3, [r7, #11]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d107      	bne.n	800296a <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <Adv_Request+0xcc>)
 800295c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002960:	490a      	ldr	r1, [pc, #40]	; (800298c <Adv_Request+0xdc>)
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe fd14 	bl	8001390 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8002968:	bf00      	nop
 800296a:	bf00      	nop
}
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000240 	.word	0x20000240
 8002978:	20000242 	.word	0x20000242
 800297c:	200001bc 	.word	0x200001bc
 8002980:	200001d5 	.word	0x200001d5
 8002984:	0800af90 	.word	0x0800af90
 8002988:	20000014 	.word	0x20000014
 800298c:	0001e046 	.word	0x0001e046

08002990 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002996:	f7ff fd1b 	bl	80023d0 <LL_FLASH_GetUDN>
 800299a:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a2:	d023      	beq.n	80029ec <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80029a4:	f7ff fd2c 	bl	8002400 <LL_FLASH_GetSTCompanyID>
 80029a8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80029aa:	f7ff fd1d 	bl	80023e8 <LL_FLASH_GetDeviceID>
 80029ae:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <BleGetBdAddress+0x80>)
 80029b6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <BleGetBdAddress+0x80>)
 80029c0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b12      	ldr	r3, [pc, #72]	; (8002a10 <BleGetBdAddress+0x80>)
 80029c8:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <BleGetBdAddress+0x80>)
 80029d0:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	4b0d      	ldr	r3, [pc, #52]	; (8002a10 <BleGetBdAddress+0x80>)
 80029da:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	0c1b      	lsrs	r3, r3, #16
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <BleGetBdAddress+0x80>)
 80029e4:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <BleGetBdAddress+0x80>)
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	e00b      	b.n	8002a04 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f005 fd35 	bl	800845c <OTP_Read>
 80029f2:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	e001      	b.n	8002a04 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <BleGetBdAddress+0x84>)
 8002a02:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002a04:	697b      	ldr	r3, [r7, #20]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200002d8 	.word	0x200002d8
 8002a14:	0800af68 	.word	0x0800af68

08002a18 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f000 fcf6 	bl	8003410 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <Adv_Cancel+0x34>)
 8002a26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a2a:	2b05      	cmp	r3, #5
 8002a2c:	d00a      	beq.n	8002a44 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8002a32:	f004 faf7 	bl	8007024 <aci_gap_set_non_discoverable>
 8002a36:	4603      	mov	r3, r0
 8002a38:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002a3a:	4b04      	ldr	r3, [pc, #16]	; (8002a4c <Adv_Cancel+0x34>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
}
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200001bc 	.word	0x200001bc

08002a50 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8002a54:	2100      	movs	r1, #0
 8002a56:	2001      	movs	r0, #1
 8002a58:	f006 fd48 	bl	80094ec <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8002a5c:	bf00      	nop
}
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8002a64:	2001      	movs	r0, #1
 8002a66:	f000 fcd3 	bl	8003410 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 8002a6a:	bf00      	nop
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	4603      	mov	r3, r0
 8002a78:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) {
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d13f      	bne.n	8002b02 <BLE_SVC_L2CAP_Conn_Update+0x92>
    mutex = 0;
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8002a88:	4b21      	ldr	r3, [pc, #132]	; (8002b10 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	bfb8      	it	lt
 8002a96:	425b      	neglt	r3, r3
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b1d      	ldr	r3, [pc, #116]	; (8002b10 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002a9c:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 8002a9e:	4b1c      	ldr	r3, [pc, #112]	; (8002b10 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	4a1c      	ldr	r2, [pc, #112]	; (8002b14 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	ed93 7a00 	vldr	s14, [r3]
 8002aac:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab8:	ee17 3a90 	vmov	r3, s15
 8002abc:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	ed93 7a00 	vldr	s14, [r3]
 8002acc:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002ad0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ad8:	ee17 3a90 	vmov	r3, s15
 8002adc:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8002ae2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002ae6:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <BLE_SVC_L2CAP_Conn_Update+0xa8>)
 8002aea:	8ad8      	ldrh	r0, [r3, #22]
 8002aec:	8a7c      	ldrh	r4, [r7, #18]
 8002aee:	8aba      	ldrh	r2, [r7, #20]
 8002af0:	8af9      	ldrh	r1, [r7, #22]
 8002af2:	8a3b      	ldrh	r3, [r7, #16]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4623      	mov	r3, r4
 8002af8:	f005 fa76 	bl	8007fe8 <aci_l2cap_connection_parameter_update_req>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
}
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd90      	pop	{r4, r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000748 	.word	0x20000748
 8002b10:	20000749 	.word	0x20000749
 8002b14:	2000000c 	.word	0x2000000c
 8002b18:	200001bc 	.word	0x200001bc

08002b1c <Connection_Interval_Update_Req>:
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
static void Connection_Interval_Update_Req( void )
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8002b20:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <Connection_Interval_Update_Req+0x28>)
 8002b22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d00a      	beq.n	8002b40 <Connection_Interval_Update_Req+0x24>
 8002b2a:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <Connection_Interval_Update_Req+0x28>)
 8002b2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <Connection_Interval_Update_Req+0x28>)
 8002b36:	8adb      	ldrh	r3, [r3, #22]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff99 	bl	8002a70 <BLE_SVC_L2CAP_Conn_Update>
  }
  return;
 8002b3e:	bf00      	nop
 8002b40:	bf00      	nop
}
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	200001bc 	.word	0x200001bc

08002b48 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002b50:	2100      	movs	r1, #0
 8002b52:	2008      	movs	r0, #8
 8002b54:	f006 fcca 	bl	80094ec <UTIL_SEQ_SetTask>
  return;
 8002b58:	bf00      	nop
}
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f006 fd2b 	bl	80095c4 <UTIL_SEQ_SetEvt>
  return;
 8002b6e:	bf00      	nop
}
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f006 fd40 	bl	8009604 <UTIL_SEQ_WaitEvt>
  return;
 8002b84:	bf00      	nop
}
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f006 f88a 	bl	8008cb8 <SVCCTL_UserEvtRx>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002bb4:	e002      	b.n	8002bbc <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <BLE_StatusNot+0x16>
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d006      	beq.n	8002be6 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002bd8:	e00b      	b.n	8002bf2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002bda:	231f      	movs	r3, #31
 8002bdc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f006 fcb0 	bl	8009544 <UTIL_SEQ_PauseTask>
      break;
 8002be4:	e005      	b.n	8002bf2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002be6:	231f      	movs	r3, #31
 8002be8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f006 fcca 	bl	8009584 <UTIL_SEQ_ResumeTask>
      break;
 8002bf0:	bf00      	nop
  }
  return;
 8002bf2:	bf00      	nop
}
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <P2PS_STM_App_Notification>:
static void P2PS_TimeChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d019      	beq.n	8002c40 <P2PS_STM_App_Notification+0x44>
 8002c0c:	2b03      	cmp	r3, #3
 8002c0e:	dc52      	bgt.n	8002cb6 <P2PS_STM_App_Notification+0xba>
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <P2PS_STM_App_Notification+0x1e>
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d00a      	beq.n	8002c2e <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8002c18:	e04d      	b.n	8002cb6 <P2PS_STM_App_Notification+0xba>
      P2P_Server_App_Context.Notification_Status = 1;
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	; (8002cc4 <P2PS_STM_App_Notification+0xc8>)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	701a      	strb	r2, [r3, #0]
      HW_TS_Start(P2P_Server_App_Context.Update_timer_Id, TIME_CHANGE_PERIOD);
 8002c20:	4b28      	ldr	r3, [pc, #160]	; (8002cc4 <P2PS_STM_App_Notification+0xc8>)
 8002c22:	7b1b      	ldrb	r3, [r3, #12]
 8002c24:	21cc      	movs	r1, #204	; 0xcc
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe fbb2 	bl	8001390 <HW_TS_Start>
      break;
 8002c2c:	e046      	b.n	8002cbc <P2PS_STM_App_Notification+0xc0>
      P2P_Server_App_Context.Notification_Status = 0;
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <P2PS_STM_App_Notification+0xc8>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(P2P_Server_App_Context.Update_timer_Id);
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <P2PS_STM_App_Notification+0xc8>)
 8002c36:	7b1b      	ldrb	r3, [r3, #12]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fe fb1d 	bl	8001278 <HW_TS_Stop>
      break;
 8002c3e:	e03d      	b.n	8002cbc <P2PS_STM_App_Notification+0xc0>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d117      	bne.n	8002c7a <P2PS_STM_App_Notification+0x7e>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <P2PS_STM_App_Notification+0x66>
          BSP_LED_On(LED_BLUE);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f000 fbc0 	bl	80033dc <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <P2PS_STM_App_Notification+0xc8>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	3301      	adds	r3, #1
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d105      	bne.n	8002c7a <P2PS_STM_App_Notification+0x7e>
          BSP_LED_Off(LED_BLUE);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f000 fbce 	bl	8003410 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002c74:	4b13      	ldr	r3, [pc, #76]	; (8002cc4 <P2PS_STM_App_Notification+0xc8>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d11a      	bne.n	8002cba <P2PS_STM_App_Notification+0xbe>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <P2PS_STM_App_Notification+0xa0>
          BSP_LED_On(LED_BLUE);
 8002c90:	2000      	movs	r0, #0
 8002c92:	f000 fba3 	bl	80033dc <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <P2PS_STM_App_Notification+0xc8>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d108      	bne.n	8002cba <P2PS_STM_App_Notification+0xbe>
          BSP_LED_Off(LED_BLUE);
 8002ca8:	2000      	movs	r0, #0
 8002caa:	f000 fbb1 	bl	8003410 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <P2PS_STM_App_Notification+0xc8>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	709a      	strb	r2, [r3, #2]
      break;
 8002cb4:	e001      	b.n	8002cba <P2PS_STM_App_Notification+0xbe>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <P2PS_STM_App_Notification+0xc0>
      break;
 8002cba:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8002cbc:	bf00      	nop
}
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	20000244 	.word	0x20000244

08002cc8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <P2PS_APP_Notification+0x1c>
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d000      	beq.n	8002cde <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8002cdc:	e003      	b.n	8002ce6 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8002cde:	f000 f825 	bl	8002d2c <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8002ce2:	e000      	b.n	8002ce6 <P2PS_APP_Notification+0x1e>
    break;
 8002ce4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8002ce6:	bf00      	nop
}
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  UTIL_SEQ_RegTask( 1<< CFG_MY_TASK_NOTIFY_TIME, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8002cf4:	4a09      	ldr	r2, [pc, #36]	; (8002d1c <P2PS_APP_Init+0x2c>)
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	2010      	movs	r0, #16
 8002cfa:	f006 fbd5 	bl	80094a8 <UTIL_SEQ_RegTask>

  /* Create timer to change the time and update charecteristic */
      HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <P2PS_APP_Init+0x30>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <P2PS_APP_Init+0x34>)
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7fe fa3d 	bl	8001184 <HW_TS_Create>
  			P2PS_TimeChange_Timer_Callback);

    /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8002d0a:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <P2PS_APP_Init+0x38>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8002d10:	f000 f80c 	bl	8002d2c <P2PS_APP_LED_BUTTON_context_Init>
  P2PS_APP_context_Init();
 8002d14:	f000 f820 	bl	8002d58 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8002d18:	bf00      	nop
}
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	08002d89 	.word	0x08002d89
 8002d20:	08002d79 	.word	0x08002d79
 8002d24:	20000250 	.word	0x20000250
 8002d28:	20000244 	.word	0x20000244

08002d2c <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f000 fb6d 	bl	8003410 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8002d42:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	721a      	strb	r2, [r3, #8]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8002d48:	4b02      	ldr	r3, [pc, #8]	; (8002d54 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	725a      	strb	r2, [r3, #9]
#endif
}
 8002d4e:	bf00      	nop
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000244 	.word	0x20000244

08002d58 <P2PS_APP_context_Init>:
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/

static void P2PS_APP_context_Init(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.TimeControl.TimeStamp = 0xF2;
 8002d5c:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <P2PS_APP_context_Init+0x1c>)
 8002d5e:	22f2      	movs	r2, #242	; 0xf2
 8002d60:	809a      	strh	r2, [r3, #4]
	P2P_Server_App_Context.TimeControl.Value = 0x1A;
 8002d62:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <P2PS_APP_context_Init+0x1c>)
 8002d64:	221a      	movs	r2, #26
 8002d66:	80da      	strh	r2, [r3, #6]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000244 	.word	0x20000244

08002d78 <P2PS_TimeChange_Timer_Callback>:

static void P2PS_TimeChange_Timer_Callback(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	2010      	movs	r0, #16
 8002d80:	f006 fbb4 	bl	80094ec <UTIL_SEQ_SetTask>
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <P2PS_Send_Notification>:

void P2PS_Send_Notification(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 
	uint8_t value[4];

		value[0] = (uint8_t)(timestamp >> 24);
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <P2PS_Send_Notification+0x7c>)
 8002d90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	0e02      	lsrs	r2, r0, #24
 8002d9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002da2:	160b      	asrs	r3, r1, #24
 8002da4:	b2d3      	uxtb	r3, r2
 8002da6:	713b      	strb	r3, [r7, #4]
		value[1] = (uint8_t)(timestamp >> 16);
 8002da8:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <P2PS_Send_Notification+0x7c>)
 8002daa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	0c02      	lsrs	r2, r0, #16
 8002db8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dbc:	140b      	asrs	r3, r1, #16
 8002dbe:	b2d3      	uxtb	r3, r2
 8002dc0:	717b      	strb	r3, [r7, #5]
		value[2] = (uint8_t)(timestamp >> 8);
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <P2PS_Send_Notification+0x7c>)
 8002dc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	0a02      	lsrs	r2, r0, #8
 8002dd2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002dd6:	120b      	asrs	r3, r1, #8
 8002dd8:	b2d3      	uxtb	r3, r2
 8002dda:	71bb      	strb	r3, [r7, #6]
		value[3] = (uint8_t)(timestamp);
 8002ddc:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <P2PS_Send_Notification+0x7c>)
 8002dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de2:	b2d3      	uxtb	r3, r2
 8002de4:	71fb      	strb	r3, [r7, #7]


	   if(P2P_Server_App_Context.Notification_Status){
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <P2PS_Send_Notification+0x80>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <P2PS_Send_Notification+0x74>
	    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
	    APP_DBG_MSG(" \n\r");
	    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&value);
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8002df6:	f005 fc5d 	bl	80086b4 <P2PS_STM_App_Update_Char>

	   } else {
	    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
	   }

	  return;
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
}
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000428 	.word	0x20000428
 8002e08:	20000244 	.word	0x20000244

08002e0c <LL_PWR_EnableBootC2>:
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002e10:	4b05      	ldr	r3, [pc, #20]	; (8002e28 <LL_PWR_EnableBootC2+0x1c>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a04      	ldr	r2, [pc, #16]	; (8002e28 <LL_PWR_EnableBootC2+0x1c>)
 8002e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e1a:	60d3      	str	r3, [r2, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	58000400 	.word	0x58000400

08002e2c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002e34:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002e36:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002e3a:	4905      	ldr	r1, [pc, #20]	; (8002e50 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	58000800 	.word	0x58000800

08002e54 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	4904      	ldr	r1, [pc, #16]	; (8002e74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	620b      	str	r3, [r1, #32]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	58000800 	.word	0x58000800

08002e78 <LL_AHB3_GRP1_EnableClock>:
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	601a      	str	r2, [r3, #0]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f043 0201 	orr.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	601a      	str	r2, [r3, #0]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
 8002f2a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	605a      	str	r2, [r3, #4]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	041b      	lsls	r3, r3, #16
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	605a      	str	r2, [r3, #4]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	401a      	ands	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	605a      	str	r2, [r3, #4]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	609a      	str	r2, [r3, #8]
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	041a      	lsls	r2, r3, #16
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d101      	bne.n	8002fe6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e000      	b.n	8002fe8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	4013      	ands	r3, r2
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d101      	bne.n	8003010 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003024:	2102      	movs	r1, #2
 8003026:	4819      	ldr	r0, [pc, #100]	; (800308c <HW_IPCC_Rx_Handler+0x6c>)
 8003028:	f7ff ffe4 	bl	8002ff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HW_IPCC_Rx_Handler+0x26>
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <HW_IPCC_Rx_Handler+0x6c>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	43db      	mvns	r3, r3
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003040:	f000 f8ea 	bl	8003218 <HW_IPCC_SYS_EvtHandler>
 8003044:	e01f      	b.n	8003086 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003046:	2101      	movs	r1, #1
 8003048:	4810      	ldr	r0, [pc, #64]	; (800308c <HW_IPCC_Rx_Handler+0x6c>)
 800304a:	f7ff ffd3 	bl	8002ff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d008      	beq.n	8003066 <HW_IPCC_Rx_Handler+0x46>
 8003054:	4b0d      	ldr	r3, [pc, #52]	; (800308c <HW_IPCC_Rx_Handler+0x6c>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	d102      	bne.n	8003066 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003060:	f000 f89e 	bl	80031a0 <HW_IPCC_BLE_EvtHandler>
 8003064:	e00f      	b.n	8003086 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003066:	2108      	movs	r1, #8
 8003068:	4808      	ldr	r0, [pc, #32]	; (800308c <HW_IPCC_Rx_Handler+0x6c>)
 800306a:	f7ff ffc3 	bl	8002ff4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <HW_IPCC_Rx_Handler+0x68>
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <HW_IPCC_Rx_Handler+0x6c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	43db      	mvns	r3, r3
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003082:	f000 f915 	bl	80032b0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003086:	bf00      	nop
 8003088:	bf00      	nop
}
 800308a:	bd80      	pop	{r7, pc}
 800308c:	58000c00 	.word	0x58000c00

08003090 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003094:	2102      	movs	r1, #2
 8003096:	4822      	ldr	r0, [pc, #136]	; (8003120 <HW_IPCC_Tx_Handler+0x90>)
 8003098:	f7ff ff97 	bl	8002fca <LL_C1_IPCC_IsActiveFlag_CHx>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HW_IPCC_Tx_Handler+0x26>
 80030a2:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HW_IPCC_Tx_Handler+0x90>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	43db      	mvns	r3, r3
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d002      	beq.n	80030b6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80030b0:	f000 f8a6 	bl	8003200 <HW_IPCC_SYS_CmdEvtHandler>
 80030b4:	e031      	b.n	800311a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80030b6:	2102      	movs	r1, #2
 80030b8:	4819      	ldr	r0, [pc, #100]	; (8003120 <HW_IPCC_Tx_Handler+0x90>)
 80030ba:	f7ff ff86 	bl	8002fca <LL_C1_IPCC_IsActiveFlag_CHx>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HW_IPCC_Tx_Handler+0x48>
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <HW_IPCC_Tx_Handler+0x90>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80030d2:	f000 f895 	bl	8003200 <HW_IPCC_SYS_CmdEvtHandler>
 80030d6:	e020      	b.n	800311a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80030d8:	2108      	movs	r1, #8
 80030da:	4811      	ldr	r0, [pc, #68]	; (8003120 <HW_IPCC_Tx_Handler+0x90>)
 80030dc:	f7ff ff75 	bl	8002fca <LL_C1_IPCC_IsActiveFlag_CHx>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HW_IPCC_Tx_Handler+0x6a>
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HW_IPCC_Tx_Handler+0x90>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	43db      	mvns	r3, r3
 80030ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d002      	beq.n	80030fa <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 80030f4:	f000 f8be 	bl	8003274 <HW_IPCC_MM_FreeBufHandler>
 80030f8:	e00f      	b.n	800311a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80030fa:	2120      	movs	r1, #32
 80030fc:	4808      	ldr	r0, [pc, #32]	; (8003120 <HW_IPCC_Tx_Handler+0x90>)
 80030fe:	f7ff ff64 	bl	8002fca <LL_C1_IPCC_IsActiveFlag_CHx>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HW_IPCC_Tx_Handler+0x8c>
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HW_IPCC_Tx_Handler+0x90>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	43db      	mvns	r3, r3
 800310e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003116:	f000 f84f 	bl	80031b8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800311a:	bf00      	nop
 800311c:	bf00      	nop
}
 800311e:	bd80      	pop	{r7, pc}
 8003120:	58000c00 	.word	0x58000c00

08003124 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003128:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800312c:	f7ff febd 	bl	8002eaa <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003130:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003134:	f7ff fe7a 	bl	8002e2c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003138:	f44f 7000 	mov.w	r0, #512	; 0x200
 800313c:	f7ff fe8a 	bl	8002e54 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003140:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003142:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003144:	f7ff fe62 	bl	8002e0c <LL_PWR_EnableBootC2>

  return;
 8003148:	bf00      	nop
}
 800314a:	bd80      	pop	{r7, pc}

0800314c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003150:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003154:	f7ff fe90 	bl	8002e78 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003158:	4806      	ldr	r0, [pc, #24]	; (8003174 <HW_IPCC_Init+0x28>)
 800315a:	f7ff fed2 	bl	8002f02 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800315e:	4805      	ldr	r0, [pc, #20]	; (8003174 <HW_IPCC_Init+0x28>)
 8003160:	f7ff febf 	bl	8002ee2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003164:	202c      	movs	r0, #44	; 0x2c
 8003166:	f000 fc98 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800316a:	202d      	movs	r0, #45	; 0x2d
 800316c:	f000 fc95 	bl	8003a9a <HAL_NVIC_EnableIRQ>

  return;
 8003170:	bf00      	nop
}
 8003172:	bd80      	pop	{r7, pc}
 8003174:	58000c00 	.word	0x58000c00

08003178 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800317c:	2101      	movs	r1, #1
 800317e:	4802      	ldr	r0, [pc, #8]	; (8003188 <HW_IPCC_BLE_Init+0x10>)
 8003180:	f7ff fef4 	bl	8002f6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003184:	bf00      	nop
}
 8003186:	bd80      	pop	{r7, pc}
 8003188:	58000c00 	.word	0x58000c00

0800318c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003190:	2101      	movs	r1, #1
 8003192:	4802      	ldr	r0, [pc, #8]	; (800319c <HW_IPCC_BLE_SendCmd+0x10>)
 8003194:	f7ff ff0a 	bl	8002fac <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003198:	bf00      	nop
}
 800319a:	bd80      	pop	{r7, pc}
 800319c:	58000c00 	.word	0x58000c00

080031a0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80031a4:	f005 fe6c 	bl	8008e80 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80031a8:	2101      	movs	r1, #1
 80031aa:	4802      	ldr	r0, [pc, #8]	; (80031b4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80031ac:	f7ff fef0 	bl	8002f90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80031b0:	bf00      	nop
}
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	58000c00 	.word	0x58000c00

080031b8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80031bc:	2120      	movs	r1, #32
 80031be:	4803      	ldr	r0, [pc, #12]	; (80031cc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80031c0:	f7ff fec2 	bl	8002f48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80031c4:	f005 fe8c 	bl	8008ee0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80031c8:	bf00      	nop
}
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	58000c00 	.word	0x58000c00

080031d0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80031d4:	2102      	movs	r1, #2
 80031d6:	4802      	ldr	r0, [pc, #8]	; (80031e0 <HW_IPCC_SYS_Init+0x10>)
 80031d8:	f7ff fec8 	bl	8002f6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80031dc:	bf00      	nop
}
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58000c00 	.word	0x58000c00

080031e4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80031e8:	2102      	movs	r1, #2
 80031ea:	4804      	ldr	r0, [pc, #16]	; (80031fc <HW_IPCC_SYS_SendCmd+0x18>)
 80031ec:	f7ff fede 	bl	8002fac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80031f0:	2102      	movs	r1, #2
 80031f2:	4802      	ldr	r0, [pc, #8]	; (80031fc <HW_IPCC_SYS_SendCmd+0x18>)
 80031f4:	f7ff fe95 	bl	8002f22 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80031f8:	bf00      	nop
}
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	58000c00 	.word	0x58000c00

08003200 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003204:	2102      	movs	r1, #2
 8003206:	4803      	ldr	r0, [pc, #12]	; (8003214 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003208:	f7ff fe9e 	bl	8002f48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800320c:	f005 feb8 	bl	8008f80 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003210:	bf00      	nop
}
 8003212:	bd80      	pop	{r7, pc}
 8003214:	58000c00 	.word	0x58000c00

08003218 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800321c:	f005 fec6 	bl	8008fac <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003220:	2102      	movs	r1, #2
 8003222:	4802      	ldr	r0, [pc, #8]	; (800322c <HW_IPCC_SYS_EvtHandler+0x14>)
 8003224:	f7ff feb4 	bl	8002f90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003228:	bf00      	nop
}
 800322a:	bd80      	pop	{r7, pc}
 800322c:	58000c00 	.word	0x58000c00

08003230 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003238:	2108      	movs	r1, #8
 800323a:	480c      	ldr	r0, [pc, #48]	; (800326c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800323c:	f7ff fec5 	bl	8002fca <LL_C1_IPCC_IsActiveFlag_CHx>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d007      	beq.n	8003256 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800324c:	2108      	movs	r1, #8
 800324e:	4807      	ldr	r0, [pc, #28]	; (800326c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003250:	f7ff fe67 	bl	8002f22 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003254:	e006      	b.n	8003264 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800325a:	2108      	movs	r1, #8
 800325c:	4803      	ldr	r0, [pc, #12]	; (800326c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800325e:	f7ff fea5 	bl	8002fac <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003262:	bf00      	nop
}
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	58000c00 	.word	0x58000c00
 8003270:	200002e0 	.word	0x200002e0

08003274 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003278:	2108      	movs	r1, #8
 800327a:	4806      	ldr	r0, [pc, #24]	; (8003294 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800327c:	f7ff fe64 	bl	8002f48 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003280:	4b05      	ldr	r3, [pc, #20]	; (8003298 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003286:	2108      	movs	r1, #8
 8003288:	4802      	ldr	r0, [pc, #8]	; (8003294 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800328a:	f7ff fe8f 	bl	8002fac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800328e:	bf00      	nop
}
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	58000c00 	.word	0x58000c00
 8003298:	200002e0 	.word	0x200002e0

0800329c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80032a0:	2108      	movs	r1, #8
 80032a2:	4802      	ldr	r0, [pc, #8]	; (80032ac <HW_IPCC_TRACES_Init+0x10>)
 80032a4:	f7ff fe62 	bl	8002f6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80032a8:	bf00      	nop
}
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	58000c00 	.word	0x58000c00

080032b0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80032b4:	f005 ff22 	bl	80090fc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80032b8:	2108      	movs	r1, #8
 80032ba:	4802      	ldr	r0, [pc, #8]	; (80032c4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80032bc:	f7ff fe68 	bl	8002f90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80032c0:	bf00      	nop
}
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	58000c00 	.word	0x58000c00

080032c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80032c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032cc:	3304      	adds	r3, #4

080032ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80032d2:	d3f9      	bcc.n	80032c8 <CopyDataInit>
  bx lr
 80032d4:	4770      	bx	lr

080032d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80032d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80032d8:	3004      	adds	r0, #4

080032da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80032da:	4288      	cmp	r0, r1
  bcc FillZerobss
 80032dc:	d3fb      	bcc.n	80032d6 <FillZerobss>
  bx lr
 80032de:	4770      	bx	lr

080032e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032e0:	480c      	ldr	r0, [pc, #48]	; (8003314 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80032e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80032e4:	480c      	ldr	r0, [pc, #48]	; (8003318 <LoopForever+0x8>)
 80032e6:	490d      	ldr	r1, [pc, #52]	; (800331c <LoopForever+0xc>)
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <LoopForever+0x10>)
 80032ea:	2300      	movs	r3, #0
 80032ec:	f7ff ffef 	bl	80032ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80032f0:	480c      	ldr	r0, [pc, #48]	; (8003324 <LoopForever+0x14>)
 80032f2:	490d      	ldr	r1, [pc, #52]	; (8003328 <LoopForever+0x18>)
 80032f4:	2300      	movs	r3, #0
 80032f6:	f7ff fff0 	bl	80032da <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80032fa:	480c      	ldr	r0, [pc, #48]	; (800332c <LoopForever+0x1c>)
 80032fc:	490c      	ldr	r1, [pc, #48]	; (8003330 <LoopForever+0x20>)
 80032fe:	2300      	movs	r3, #0
 8003300:	f7ff ffeb 	bl	80032da <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003304:	f000 f92a 	bl	800355c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003308:	f006 fa0c 	bl	8009724 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800330c:	f7fe fa46 	bl	800179c <main>

08003310 <LoopForever>:

LoopForever:
  b LoopForever
 8003310:	e7fe      	b.n	8003310 <LoopForever>
 8003312:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003314:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003318:	20000008 	.word	0x20000008
 800331c:	20000120 	.word	0x20000120
 8003320:	0800b2c4 	.word	0x0800b2c4
  INIT_BSS _sbss, _ebss
 8003324:	200002a8 	.word	0x200002a8
 8003328:	20000760 	.word	0x20000760
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800332c:	200301e0 	.word	0x200301e0
 8003330:	20030a57 	.word	0x20030a57

08003334 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003334:	e7fe      	b.n	8003334 <ADC1_IRQHandler>

08003336 <LL_AHB2_GRP1_EnableClock>:
{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4313      	orrs	r3, r2
 800334c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4013      	ands	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800335a:	68fb      	ldr	r3, [r7, #12]
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003372:	f107 030c 	add.w	r3, r7, #12
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	605a      	str	r2, [r3, #4]
 800337c:	609a      	str	r2, [r3, #8]
 800337e:	60da      	str	r2, [r3, #12]
 8003380:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003382:	2002      	movs	r0, #2
 8003384:	f7ff ffd7 	bl	8003336 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	4a12      	ldr	r2, [pc, #72]	; (80033d4 <BSP_LED_Init+0x6c>)
 800338c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003390:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
 8003394:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800339a:	2302      	movs	r3, #2
 800339c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800339e:	79fb      	ldrb	r3, [r7, #7]
 80033a0:	4a0d      	ldr	r2, [pc, #52]	; (80033d8 <BSP_LED_Init+0x70>)
 80033a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a6:	f107 020c 	add.w	r2, r7, #12
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fd25 	bl	8003dfc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	4a08      	ldr	r2, [pc, #32]	; (80033d8 <BSP_LED_Init+0x70>)
 80033b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	4a05      	ldr	r2, [pc, #20]	; (80033d4 <BSP_LED_Init+0x6c>)
 80033be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c2:	2200      	movs	r2, #0
 80033c4:	4619      	mov	r1, r3
 80033c6:	f000 fe89 	bl	80040dc <HAL_GPIO_WritePin>
}
 80033ca:	bf00      	nop
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	0800af98 	.word	0x0800af98
 80033d8:	20000024 	.word	0x20000024

080033dc <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <BSP_LED_On+0x2c>)
 80033ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	4a06      	ldr	r2, [pc, #24]	; (800340c <BSP_LED_On+0x30>)
 80033f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f6:	2201      	movs	r2, #1
 80033f8:	4619      	mov	r1, r3
 80033fa:	f000 fe6f 	bl	80040dc <HAL_GPIO_WritePin>
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000024 	.word	0x20000024
 800340c:	0800af98 	.word	0x0800af98

08003410 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <BSP_LED_Off+0x2c>)
 800341e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	4a06      	ldr	r2, [pc, #24]	; (8003440 <BSP_LED_Off+0x30>)
 8003426:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800342a:	2200      	movs	r2, #0
 800342c:	4619      	mov	r1, r3
 800342e:	f000 fe55 	bl	80040dc <HAL_GPIO_WritePin>
}
 8003432:	bf00      	nop
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000024 	.word	0x20000024
 8003440:	0800af98 	.word	0x0800af98

08003444 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800344e:	79fb      	ldrb	r3, [r7, #7]
 8003450:	4a07      	ldr	r2, [pc, #28]	; (8003470 <BSP_LED_Toggle+0x2c>)
 8003452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	4906      	ldr	r1, [pc, #24]	; (8003474 <BSP_LED_Toggle+0x30>)
 800345a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f000 fe53 	bl	800410c <HAL_GPIO_TogglePin>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000024 	.word	0x20000024
 8003474:	0800af98 	.word	0x0800af98

08003478 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	460a      	mov	r2, r1
 8003482:	71fb      	strb	r3, [r7, #7]
 8003484:	4613      	mov	r3, r2
 8003486:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003498:	79fb      	ldrb	r3, [r7, #7]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <BSP_PB_Init+0x2e>
 800349e:	2004      	movs	r0, #4
 80034a0:	f7ff ff49 	bl	8003336 <LL_AHB2_GRP1_EnableClock>
 80034a4:	e00c      	b.n	80034c0 <BSP_PB_Init+0x48>
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d103      	bne.n	80034b4 <BSP_PB_Init+0x3c>
 80034ac:	2008      	movs	r0, #8
 80034ae:	f7ff ff42 	bl	8003336 <LL_AHB2_GRP1_EnableClock>
 80034b2:	e005      	b.n	80034c0 <BSP_PB_Init+0x48>
 80034b4:	79fb      	ldrb	r3, [r7, #7]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d102      	bne.n	80034c0 <BSP_PB_Init+0x48>
 80034ba:	2008      	movs	r0, #8
 80034bc:	f7ff ff3b 	bl	8003336 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80034c0:	79bb      	ldrb	r3, [r7, #6]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d117      	bne.n	80034f6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	4a20      	ldr	r2, [pc, #128]	; (800354c <BSP_PB_Init+0xd4>)
 80034ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ce:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80034d4:	2301      	movs	r3, #1
 80034d6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034d8:	2302      	movs	r3, #2
 80034da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	4a1c      	ldr	r2, [pc, #112]	; (8003550 <BSP_PB_Init+0xd8>)
 80034e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e4:	f107 020c 	add.w	r2, r7, #12
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 fc86 	bl	8003dfc <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f7fe fb91 	bl	8001c18 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80034f6:	79bb      	ldrb	r3, [r7, #6]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d122      	bne.n	8003542 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	4a13      	ldr	r2, [pc, #76]	; (800354c <BSP_PB_Init+0xd4>)
 8003500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003504:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003506:	2301      	movs	r3, #1
 8003508:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <BSP_PB_Init+0xdc>)
 800350c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <BSP_PB_Init+0xd8>)
 8003512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003516:	f107 020c 	add.w	r2, r7, #12
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fc6d 	bl	8003dfc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <BSP_PB_Init+0xe0>)
 8003526:	5cd3      	ldrb	r3, [r2, r3]
 8003528:	b25b      	sxtb	r3, r3
 800352a:	2200      	movs	r2, #0
 800352c:	210f      	movs	r1, #15
 800352e:	4618      	mov	r0, r3
 8003530:	f000 fa99 	bl	8003a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	4a08      	ldr	r2, [pc, #32]	; (8003558 <BSP_PB_Init+0xe0>)
 8003538:	5cd3      	ldrb	r3, [r2, r3]
 800353a:	b25b      	sxtb	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	f000 faac 	bl	8003a9a <HAL_NVIC_EnableIRQ>
  }
}
 8003542:	bf00      	nop
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	0800afa4 	.word	0x0800afa4
 8003550:	2000003c 	.word	0x2000003c
 8003554:	10210000 	.word	0x10210000
 8003558:	0800afac 	.word	0x0800afac

0800355c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003560:	4b26      	ldr	r3, [pc, #152]	; (80035fc <SystemInit+0xa0>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003566:	4b25      	ldr	r3, [pc, #148]	; (80035fc <SystemInit+0xa0>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	4a23      	ldr	r2, [pc, #140]	; (80035fc <SystemInit+0xa0>)
 800356e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003572:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800358e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800359a:	4b19      	ldr	r3, [pc, #100]	; (8003600 <SystemInit+0xa4>)
 800359c:	4013      	ands	r3, r2
 800359e:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80035a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ac:	f023 0305 	bic.w	r3, r3, #5
 80035b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80035b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c0:	f023 0301 	bic.w	r3, r3, #1
 80035c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80035c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035cc:	4a0d      	ldr	r2, [pc, #52]	; (8003604 <SystemInit+0xa8>)
 80035ce:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	4a0b      	ldr	r2, [pc, #44]	; (8003604 <SystemInit+0xa8>)
 80035d6:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ec:	2200      	movs	r2, #0
 80035ee:	619a      	str	r2, [r3, #24]
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	e000ed00 	.word	0xe000ed00
 8003600:	faf6fefb 	.word	0xfaf6fefb
 8003604:	22041000 	.word	0x22041000

08003608 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	6053      	str	r3, [r2, #4]
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	e0042000 	.word	0xe0042000

08003628 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800362c:	4b05      	ldr	r3, [pc, #20]	; (8003644 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a04      	ldr	r2, [pc, #16]	; (8003644 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8003632:	f023 0302 	bic.w	r3, r3, #2
 8003636:	6053      	str	r3, [r2, #4]
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e0042000 	.word	0xe0042000

08003648 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8003652:	f023 0304 	bic.w	r3, r3, #4
 8003656:	6053      	str	r3, [r2, #4]
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	e0042000 	.word	0xe0042000

08003668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_Init+0x3c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a0b      	ldr	r2, [pc, #44]	; (80036a4 <HAL_Init+0x3c>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800367e:	2003      	movs	r0, #3
 8003680:	f000 f9e6 	bl	8003a50 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003684:	2000      	movs	r0, #0
 8003686:	f000 f80f 	bl	80036a8 <HAL_InitTick>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	71fb      	strb	r3, [r7, #7]
 8003694:	e001      	b.n	800369a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003696:	f7fe fd2e 	bl	80020f6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800369a:	79fb      	ldrb	r3, [r7, #7]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	58004000 	.word	0x58004000

080036a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80036b4:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_InitTick+0x6c>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d024      	beq.n	8003706 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036bc:	f001 ff94 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b14      	ldr	r3, [pc, #80]	; (8003714 <HAL_InitTick+0x6c>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	4619      	mov	r1, r3
 80036c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80036d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f9fc 	bl	8003ad2 <HAL_SYSTICK_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10f      	bne.n	8003700 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	d809      	bhi.n	80036fa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036e6:	2200      	movs	r2, #0
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	f04f 30ff 	mov.w	r0, #4294967295
 80036ee:	f000 f9ba 	bl	8003a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <HAL_InitTick+0x70>)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e007      	b.n	800370a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e004      	b.n	800370a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e001      	b.n	800370a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000050 	.word	0x20000050
 8003718:	2000004c 	.word	0x2000004c

0800371c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_IncTick+0x20>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_IncTick+0x24>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4413      	add	r3, r2
 800372c:	4a04      	ldr	r2, [pc, #16]	; (8003740 <HAL_IncTick+0x24>)
 800372e:	6013      	str	r3, [r2, #0]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	20000050 	.word	0x20000050
 8003740:	2000074c 	.word	0x2000074c

08003744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return uwTick;
 8003748:	4b03      	ldr	r3, [pc, #12]	; (8003758 <HAL_GetTick+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	2000074c 	.word	0x2000074c

0800375c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_GetTickPrio+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	2000004c 	.word	0x2000004c

08003774 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_GetTickFreq+0x14>)
 800377a:	781b      	ldrb	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000050 	.word	0x20000050

0800378c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_SuspendTick+0x1c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <HAL_SuspendTick+0x1c>)
 8003796:	f023 0302 	bic.w	r3, r3, #2
 800379a:	6013      	str	r3, [r2, #0]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000e010 	.word	0xe000e010

080037ac <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80037b0:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_ResumeTick+0x1c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a04      	ldr	r2, [pc, #16]	; (80037c8 <HAL_ResumeTick+0x1c>)
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	bf00      	nop
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	e000e010 	.word	0xe000e010

080037cc <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80037d0:	f7ff ff1a 	bl	8003608 <LL_DBGMCU_DisableDBGSleepMode>
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80037dc:	f7ff ff24 	bl	8003628 <LL_DBGMCU_DisableDBGStopMode>
}
 80037e0:	bf00      	nop
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80037e8:	f7ff ff2e 	bl	8003648 <LL_DBGMCU_DisableDBGStandbyMode>
}
 80037ec:	bf00      	nop
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800380c:	4013      	ands	r3, r2
 800380e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800381c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003822:	4a04      	ldr	r2, [pc, #16]	; (8003834 <__NVIC_SetPriorityGrouping+0x44>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	60d3      	str	r3, [r2, #12]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <__NVIC_GetPriorityGrouping+0x18>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	0a1b      	lsrs	r3, r3, #8
 8003842:	f003 0307 	and.w	r3, r3, #7
}
 8003846:	4618      	mov	r0, r3
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	e000ed00 	.word	0xe000ed00

08003854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db0b      	blt.n	800387e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	4907      	ldr	r1, [pc, #28]	; (800388c <__NVIC_EnableIRQ+0x38>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2001      	movs	r0, #1
 8003876:	fa00 f202 	lsl.w	r2, r0, r2
 800387a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	e000e100 	.word	0xe000e100

08003890 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800389a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	db12      	blt.n	80038c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	490a      	ldr	r1, [pc, #40]	; (80038d4 <__NVIC_DisableIRQ+0x44>)
 80038aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	2001      	movs	r0, #1
 80038b2:	fa00 f202 	lsl.w	r2, r0, r2
 80038b6:	3320      	adds	r3, #32
 80038b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038bc:	f3bf 8f4f 	dsb	sy
}
 80038c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038c2:	f3bf 8f6f 	isb	sy
}
 80038c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000e100 	.word	0xe000e100

080038d8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	db0c      	blt.n	8003904 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4907      	ldr	r1, [pc, #28]	; (8003910 <__NVIC_SetPendingIRQ+0x38>)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2001      	movs	r0, #1
 80038fa:	fa00 f202 	lsl.w	r2, r0, r2
 80038fe:	3340      	adds	r3, #64	; 0x40
 8003900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100

08003914 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	2b00      	cmp	r3, #0
 8003924:	db0c      	blt.n	8003940 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f003 021f 	and.w	r2, r3, #31
 800392c:	4907      	ldr	r1, [pc, #28]	; (800394c <__NVIC_ClearPendingIRQ+0x38>)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2001      	movs	r0, #1
 8003936:	fa00 f202 	lsl.w	r2, r0, r2
 800393a:	3360      	adds	r3, #96	; 0x60
 800393c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003940:	bf00      	nop
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000e100 	.word	0xe000e100

08003950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	6039      	str	r1, [r7, #0]
 800395a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003960:	2b00      	cmp	r3, #0
 8003962:	db0a      	blt.n	800397a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	b2da      	uxtb	r2, r3
 8003968:	490c      	ldr	r1, [pc, #48]	; (800399c <__NVIC_SetPriority+0x4c>)
 800396a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	440b      	add	r3, r1
 8003974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003978:	e00a      	b.n	8003990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	4908      	ldr	r1, [pc, #32]	; (80039a0 <__NVIC_SetPriority+0x50>)
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	3b04      	subs	r3, #4
 8003988:	0112      	lsls	r2, r2, #4
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	440b      	add	r3, r1
 800398e:	761a      	strb	r2, [r3, #24]
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000e100 	.word	0xe000e100
 80039a0:	e000ed00 	.word	0xe000ed00

080039a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b089      	sub	sp, #36	; 0x24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	f1c3 0307 	rsb	r3, r3, #7
 80039be:	2b04      	cmp	r3, #4
 80039c0:	bf28      	it	cs
 80039c2:	2304      	movcs	r3, #4
 80039c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3304      	adds	r3, #4
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d902      	bls.n	80039d4 <NVIC_EncodePriority+0x30>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3b03      	subs	r3, #3
 80039d2:	e000      	b.n	80039d6 <NVIC_EncodePriority+0x32>
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	f04f 32ff 	mov.w	r2, #4294967295
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43da      	mvns	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	401a      	ands	r2, r3
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039ec:	f04f 31ff 	mov.w	r1, #4294967295
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	fa01 f303 	lsl.w	r3, r1, r3
 80039f6:	43d9      	mvns	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039fc:	4313      	orrs	r3, r2
         );
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3724      	adds	r7, #36	; 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
	...

08003a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a1c:	d301      	bcc.n	8003a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00f      	b.n	8003a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <SysTick_Config+0x40>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a2a:	210f      	movs	r1, #15
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a30:	f7ff ff8e 	bl	8003950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <SysTick_Config+0x40>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a3a:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <SysTick_Config+0x40>)
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	e000e010 	.word	0xe000e010

08003a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff fec9 	bl	80037f0 <__NVIC_SetPriorityGrouping>
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b086      	sub	sp, #24
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	607a      	str	r2, [r7, #4]
 8003a72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a74:	f7ff fee0 	bl	8003838 <__NVIC_GetPriorityGrouping>
 8003a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	68b9      	ldr	r1, [r7, #8]
 8003a7e:	6978      	ldr	r0, [r7, #20]
 8003a80:	f7ff ff90 	bl	80039a4 <NVIC_EncodePriority>
 8003a84:	4602      	mov	r2, r0
 8003a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a8a:	4611      	mov	r1, r2
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff ff5f 	bl	8003950 <__NVIC_SetPriority>
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fed3 	bl	8003854 <__NVIC_EnableIRQ>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fee3 	bl	8003890 <__NVIC_DisableIRQ>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff ff96 	bl	8003a0c <SysTick_Config>
 8003ae0:	4603      	mov	r3, r0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	4603      	mov	r3, r0
 8003af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff feed 	bl	80038d8 <__NVIC_SetPendingIRQ>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff fefd 	bl	8003914 <__NVIC_ClearPendingIRQ>
}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e04f      	b.n	8003bd4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d008      	beq.n	8003b52 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2204      	movs	r2, #4
 8003b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e040      	b.n	8003bd4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 020e 	bic.w	r2, r2, #14
 8003b60:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0201 	bic.w	r2, r2, #1
 8003b80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	f003 021c 	and.w	r2, r3, #28
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	2101      	movs	r1, #1
 8003b90:	fa01 f202 	lsl.w	r2, r1, r2
 8003b94:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b9e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00c      	beq.n	8003bc2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bc0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d005      	beq.n	8003c04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e047      	b.n	8003c94 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 020e 	bic.w	r2, r2, #14
 8003c12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	f003 021c 	and.w	r2, r3, #28
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00c      	beq.n	8003c74 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	4798      	blx	r3
    }
  }
  return status;
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b084      	sub	sp, #16
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 031c 	and.w	r3, r3, #28
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d026      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x7a>
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d021      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d107      	bne.n	8003cf2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0204 	bic.w	r2, r2, #4
 8003cf0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	f003 021c 	and.w	r2, r3, #28
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2104      	movs	r1, #4
 8003d00:	fa01 f202 	lsl.w	r2, r1, r2
 8003d04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d071      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d16:	e06c      	b.n	8003df2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f003 031c 	and.w	r3, r3, #28
 8003d20:	2202      	movs	r2, #2
 8003d22:	409a      	lsls	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d02e      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xec>
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d029      	beq.n	8003d8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 020a 	bic.w	r2, r2, #10
 8003d52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f003 021c 	and.w	r2, r3, #28
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d68:	2102      	movs	r1, #2
 8003d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d038      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d88:	e033      	b.n	8003df2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f003 031c 	and.w	r3, r3, #28
 8003d92:	2208      	movs	r2, #8
 8003d94:	409a      	lsls	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d02a      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x156>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	f003 0308 	and.w	r3, r3, #8
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d025      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 020e 	bic.w	r2, r2, #14
 8003db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	f003 021c 	and.w	r2, r3, #28
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
}
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e0a:	e14c      	b.n	80040a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2101      	movs	r1, #1
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	4013      	ands	r3, r2
 8003e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 813e 	beq.w	80040a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d00b      	beq.n	8003e44 <HAL_GPIO_Init+0x48>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d007      	beq.n	8003e44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e38:	2b11      	cmp	r3, #17
 8003e3a:	d003      	beq.n	8003e44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b12      	cmp	r3, #18
 8003e42:	d130      	bne.n	8003ea6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	2203      	movs	r2, #3
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43db      	mvns	r3, r3
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4013      	ands	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	fa02 f303 	lsl.w	r3, r2, r3
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43db      	mvns	r3, r3
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4013      	ands	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0201 	and.w	r2, r3, #1
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	2203      	movs	r2, #3
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d003      	beq.n	8003ee6 <HAL_GPIO_Init+0xea>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b12      	cmp	r3, #18
 8003ee4:	d123      	bne.n	8003f2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	08da      	lsrs	r2, r3, #3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3208      	adds	r2, #8
 8003eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	f003 0307 	and.w	r3, r3, #7
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	08da      	lsrs	r2, r3, #3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3208      	adds	r2, #8
 8003f28:	6939      	ldr	r1, [r7, #16]
 8003f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	2203      	movs	r2, #3
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43db      	mvns	r3, r3
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4013      	ands	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0203 	and.w	r2, r3, #3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8098 	beq.w	80040a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f70:	4a54      	ldr	r2, [pc, #336]	; (80040c4 <HAL_GPIO_Init+0x2c8>)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	089b      	lsrs	r3, r3, #2
 8003f76:	3302      	adds	r3, #2
 8003f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0303 	and.w	r3, r3, #3
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4013      	ands	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f9a:	d019      	beq.n	8003fd0 <HAL_GPIO_Init+0x1d4>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a4a      	ldr	r2, [pc, #296]	; (80040c8 <HAL_GPIO_Init+0x2cc>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_GPIO_Init+0x1d0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a49      	ldr	r2, [pc, #292]	; (80040cc <HAL_GPIO_Init+0x2d0>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00d      	beq.n	8003fc8 <HAL_GPIO_Init+0x1cc>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a48      	ldr	r2, [pc, #288]	; (80040d0 <HAL_GPIO_Init+0x2d4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <HAL_GPIO_Init+0x1c8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a47      	ldr	r2, [pc, #284]	; (80040d4 <HAL_GPIO_Init+0x2d8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_GPIO_Init+0x1c4>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	e008      	b.n	8003fd2 <HAL_GPIO_Init+0x1d6>
 8003fc0:	2307      	movs	r3, #7
 8003fc2:	e006      	b.n	8003fd2 <HAL_GPIO_Init+0x1d6>
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e004      	b.n	8003fd2 <HAL_GPIO_Init+0x1d6>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e002      	b.n	8003fd2 <HAL_GPIO_Init+0x1d6>
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_GPIO_Init+0x1d6>
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	f002 0203 	and.w	r2, r2, #3
 8003fd8:	0092      	lsls	r2, r2, #2
 8003fda:	4093      	lsls	r3, r2
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fe2:	4938      	ldr	r1, [pc, #224]	; (80040c4 <HAL_GPIO_Init+0x2c8>)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	3302      	adds	r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ff0:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <HAL_GPIO_Init+0x2dc>)
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4013      	ands	r3, r2
 8004000:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004016:	4a30      	ldr	r2, [pc, #192]	; (80040d8 <HAL_GPIO_Init+0x2dc>)
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800401e:	4b2e      	ldr	r3, [pc, #184]	; (80040d8 <HAL_GPIO_Init+0x2dc>)
 8004020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004024:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d003      	beq.n	8004044 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	4313      	orrs	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004044:	4a24      	ldr	r2, [pc, #144]	; (80040d8 <HAL_GPIO_Init+0x2dc>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800404c:	4b22      	ldr	r3, [pc, #136]	; (80040d8 <HAL_GPIO_Init+0x2dc>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <HAL_GPIO_Init+0x2dc>)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004076:	4b18      	ldr	r3, [pc, #96]	; (80040d8 <HAL_GPIO_Init+0x2dc>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800409a:	4a0f      	ldr	r2, [pc, #60]	; (80040d8 <HAL_GPIO_Init+0x2dc>)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3301      	adds	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f47f aeab 	bne.w	8003e0c <HAL_GPIO_Init+0x10>
  }
}
 80040b6:	bf00      	nop
 80040b8:	bf00      	nop
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	40010000 	.word	0x40010000
 80040c8:	48000400 	.word	0x48000400
 80040cc:	48000800 	.word	0x48000800
 80040d0:	48000c00 	.word	0x48000c00
 80040d4:	48001000 	.word	0x48001000
 80040d8:	58000800 	.word	0x58000800

080040dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]
 80040e8:	4613      	mov	r3, r2
 80040ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040ec:	787b      	ldrb	r3, [r7, #1]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040f2:	887a      	ldrh	r2, [r7, #2]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040f8:	e002      	b.n	8004100 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800411e:	887a      	ldrh	r2, [r7, #2]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4013      	ands	r3, r2
 8004124:	041a      	lsls	r2, r3, #16
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	43d9      	mvns	r1, r3
 800412a:	887b      	ldrh	r3, [r7, #2]
 800412c:	400b      	ands	r3, r1
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	619a      	str	r2, [r3, #24]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800414a:	4b08      	ldr	r3, [pc, #32]	; (800416c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	4013      	ands	r3, r2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d006      	beq.n	8004164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004158:	88fb      	ldrh	r3, [r7, #6]
 800415a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800415c:	88fb      	ldrh	r3, [r7, #6]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fc fab2 	bl	80006c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	58000800 	.word	0x58000800

08004170 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_HSEM_IRQHandler+0x30>)
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <HAL_HSEM_IRQHandler+0x30>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	43db      	mvns	r3, r3
 8004184:	4906      	ldr	r1, [pc, #24]	; (80041a0 <HAL_HSEM_IRQHandler+0x30>)
 8004186:	4013      	ands	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800418a:	4a05      	ldr	r2, [pc, #20]	; (80041a0 <HAL_HSEM_IRQHandler+0x30>)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f807 	bl	80041a4 <HAL_HSEM_FreeCallback>
}
 8004196:	bf00      	nop
 8004198:	3708      	adds	r7, #8
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	58001500 	.word	0x58001500

080041a4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01e      	beq.n	8004208 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_IPCC_Init+0x60>)
 80041cc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fd ffb4 	bl	8002148 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80041e0:	68b8      	ldr	r0, [r7, #8]
 80041e2:	f000 f85b 	bl	800429c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f82c 	bl	8004250 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004206:	e001      	b.n	800420c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800420c:	7bfb      	ldrb	r3, [r7, #15]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	58000c00 	.word	0x58000c00

0800421c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	4613      	mov	r3, r2
 8004228:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004236:	b480      	push	{r7}
 8004238:	b085      	sub	sp, #20
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	4613      	mov	r3, r2
 8004242:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e00f      	b.n	800427e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <IPCC_SetDefaultCallbacks+0x44>)
 8004268:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3306      	adds	r3, #6
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	4a08      	ldr	r2, [pc, #32]	; (8004298 <IPCC_SetDefaultCallbacks+0x48>)
 8004276:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b05      	cmp	r3, #5
 8004282:	d9ec      	bls.n	800425e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	0800421d 	.word	0x0800421d
 8004298:	08004237 	.word	0x08004237

0800429c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80042b0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	223f      	movs	r2, #63	; 0x3f
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_EXTI_EnableIT_0_31>:
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80042cc:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80042ce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80042d2:	4905      	ldr	r1, [pc, #20]	; (80042e8 <LL_EXTI_EnableIT_0_31+0x24>)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80042dc:	bf00      	nop
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	58000800 	.word	0x58000800

080042ec <LL_EXTI_DisableIT_0_31>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <LL_EXTI_DisableIT_0_31+0x28>)
 80042f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	43db      	mvns	r3, r3
 80042fe:	4905      	ldr	r1, [pc, #20]	; (8004314 <LL_EXTI_DisableIT_0_31+0x28>)
 8004300:	4013      	ands	r3, r2
 8004302:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	58000800 	.word	0x58000800

08004318 <LL_C2_EXTI_DisableIT_0_31>:
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8004322:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	43db      	mvns	r3, r3
 800432a:	4905      	ldr	r1, [pc, #20]	; (8004340 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800432c:	4013      	ands	r3, r2
 800432e:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	58000800 	.word	0x58000800

08004344 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4904      	ldr	r1, [pc, #16]	; (8004364 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	58000800 	.word	0x58000800

08004368 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	43db      	mvns	r3, r3
 8004378:	4904      	ldr	r1, [pc, #16]	; (800438c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800437a:	4013      	ands	r3, r2
 800437c:	600b      	str	r3, [r1, #0]

}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	58000800 	.word	0x58000800

08004390 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	4904      	ldr	r1, [pc, #16]	; (80043b0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	58000800 	.word	0x58000800

080043b4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	43db      	mvns	r3, r3
 80043c4:	4904      	ldr	r1, [pc, #16]	; (80043d8 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	58000800 	.word	0x58000800

080043dc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a04      	ldr	r2, [pc, #16]	; (80043f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ea:	6013      	str	r3, [r2, #0]
}
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	58000400 	.word	0x58000400

080043fc <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8004404:	4b1d      	ldr	r3, [pc, #116]	; (800447c <HAL_PWR_ConfigPVD+0x80>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f023 020e 	bic.w	r2, r3, #14
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	491a      	ldr	r1, [pc, #104]	; (800447c <HAL_PWR_ConfigPVD+0x80>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB serie, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8004416:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800441a:	f7ff ff67 	bl	80042ec <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800441e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004422:	f7ff ff79 	bl	8004318 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004426:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800442a:	f7ff ffc3 	bl	80043b4 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800442e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004432:	f7ff ff99 	bl	8004368 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004442:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004446:	f7ff ff3d 	bl	80042c4 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004456:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800445a:	f7ff ff73 	bl	8004344 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800446a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800446e:	f7ff ff8f 	bl	8004390 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	58000400 	.word	0x58000400

08004480 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_PWR_EnablePVD+0x1c>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a04      	ldr	r2, [pc, #16]	; (800449c <HAL_PWR_EnablePVD+0x1c>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6053      	str	r3, [r2, #4]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	58000400 	.word	0x58000400

080044a0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044a4:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	58000400 	.word	0x58000400

080044bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80044c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ce:	d101      	bne.n	80044d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_RCC_HSE_Enable>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044f2:	6013      	str	r3, [r2, #0]
}
 80044f4:	bf00      	nop
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_HSE_Disable>:
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004510:	6013      	str	r3, [r2, #0]
}
 8004512:	bf00      	nop
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <LL_RCC_HSE_IsReady>:
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800452e:	d101      	bne.n	8004534 <LL_RCC_HSE_IsReady+0x18>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <LL_RCC_HSE_IsReady+0x1a>
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <LL_RCC_HSI_Enable>:
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800454e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	bf00      	nop
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <LL_RCC_HSI_Disable>:
{
 800455e:	b480      	push	{r7}
 8004560:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	6013      	str	r3, [r2, #0]
}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_RCC_HSI_IsReady>:
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800458e:	d101      	bne.n	8004594 <LL_RCC_HSI_IsReady+0x18>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <LL_RCC_HSI_IsReady+0x1a>
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	061b      	lsls	r3, r3, #24
 80045b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ba:	4313      	orrs	r3, r2
 80045bc:	604b      	str	r3, [r1, #4]
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_RCC_HSI48_Enable>:
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045da:	f043 0301 	orr.w	r3, r3, #1
 80045de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_HSI48_Disable>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_RCC_HSI48_IsReady>:
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d101      	bne.n	8004626 <LL_RCC_HSI48_IsReady+0x18>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <LL_RCC_HSI48_IsReady+0x1a>
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_RCC_LSE_Enable>:
{
 8004632:	b480      	push	{r7}
 8004634:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004642:	f043 0301 	orr.w	r3, r3, #1
 8004646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800464a:	bf00      	nop
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <LL_RCC_LSE_Disable>:
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800466c:	bf00      	nop
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <LL_RCC_LSE_EnableBypass>:
{
 8004676:	b480      	push	{r7}
 8004678:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004686:	f043 0304 	orr.w	r3, r3, #4
 800468a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800468e:	bf00      	nop
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <LL_RCC_LSE_DisableBypass>:
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046b0:	bf00      	nop
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <LL_RCC_LSE_IsReady>:
{
 80046ba:	b480      	push	{r7}
 80046bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d101      	bne.n	80046d2 <LL_RCC_LSE_IsReady+0x18>
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <LL_RCC_LSE_IsReady+0x1a>
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <LL_RCC_LSI1_Enable>:
{
 80046de:	b480      	push	{r7}
 80046e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046f6:	bf00      	nop
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <LL_RCC_LSI1_Disable>:
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004710:	f023 0301 	bic.w	r3, r3, #1
 8004714:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004718:	bf00      	nop
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_RCC_LSI1_IsReady>:
{
 8004722:	b480      	push	{r7}
 8004724:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b02      	cmp	r3, #2
 8004734:	d101      	bne.n	800473a <LL_RCC_LSI1_IsReady+0x18>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <LL_RCC_LSI1_IsReady+0x1a>
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr

08004746 <LL_RCC_LSI2_Enable>:
{
 8004746:	b480      	push	{r7}
 8004748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800474a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004752:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004756:	f043 0304 	orr.w	r3, r3, #4
 800475a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800475e:	bf00      	nop
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <LL_RCC_LSI2_Disable>:
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800476c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004778:	f023 0304 	bic.w	r3, r3, #4
 800477c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_RCC_LSI2_IsReady>:
{
 800478a:	b480      	push	{r7}
 800478c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800478e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b08      	cmp	r3, #8
 800479c:	d101      	bne.n	80047a2 <LL_RCC_LSI2_IsReady+0x18>
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <LL_RCC_LSI2_IsReady+0x1a>
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_RCC_LSI2_SetTrimming>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80047b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <LL_RCC_MSI_Enable>:
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80047e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6013      	str	r3, [r2, #0]
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <LL_RCC_MSI_Disable>:
{
 80047fa:	b480      	push	{r7}
 80047fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6013      	str	r3, [r2, #0]
}
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_MSI_IsReady>:
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d101      	bne.n	800482e <LL_RCC_MSI_IsReady+0x16>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <LL_RCC_MSI_IsReady+0x18>
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_RCC_MSI_SetRange>:
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800484c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <LL_RCC_MSI_GetRange>:
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004872:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2bb0      	cmp	r3, #176	; 0xb0
 8004878:	d901      	bls.n	800487e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800487a:	23b0      	movs	r3, #176	; 0xb0
 800487c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800487e:	687b      	ldr	r3, [r7, #4]
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <LL_RCC_MSI_SetCalibTrimming>:
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	021b      	lsls	r3, r3, #8
 80048a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a6:	4313      	orrs	r3, r2
 80048a8:	604b      	str	r3, [r1, #4]
}
 80048aa:	bf00      	nop
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_RCC_SetSysClkSource>:
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80048be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 0203 	bic.w	r2, r3, #3
 80048c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	608b      	str	r3, [r1, #8]
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_GetSysClkSource>:
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 030c 	and.w	r3, r3, #12
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_RCC_SetAHBPrescaler>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	b083      	sub	sp, #12
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4313      	orrs	r3, r2
 8004910:	608b      	str	r3, [r1, #8]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <LL_C2_RCC_SetAHBPrescaler>:
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800492e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800493e:	bf00      	nop
 8004940:	370c      	adds	r7, #12
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <LL_RCC_SetAHB4Prescaler>:
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004956:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800495a:	f023 020f 	bic.w	r2, r3, #15
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	091b      	lsrs	r3, r3, #4
 8004962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <LL_RCC_SetAPB1Prescaler>:
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800498a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4313      	orrs	r3, r2
 8004992:	608b      	str	r3, [r1, #8]
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_RCC_SetAPB2Prescaler>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	608b      	str	r3, [r1, #8]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_GetAHBPrescaler>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <LL_RCC_GetAHB4Prescaler>:
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80049e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_RCC_PLL_Enable>:
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a0e:	6013      	str	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_RCC_PLL_Disable>:
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a2c:	6013      	str	r3, [r2, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_RCC_PLL_IsReady>:
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a4a:	d101      	bne.n	8004a50 <LL_RCC_PLL_IsReady+0x18>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e000      	b.n	8004a52 <LL_RCC_PLL_IsReady+0x1a>
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_RCC_PLL_GetN>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <LL_RCC_PLL_GetR>:
{
 8004a76:	b480      	push	{r7}
 8004a78:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_RCC_PLL_GetDivider>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_PLL_GetMainSource>:
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_IsActiveFlag_HPRE>:
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad0:	d101      	bne.n	8004ad6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004af6:	d101      	bne.n	8004afc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b10:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1c:	d101      	bne.n	8004b22 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004b2e:	b480      	push	{r7}
 8004b30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b40:	d101      	bne.n	8004b46 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b64:	d101      	bne.n	8004b6a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
	...

08004b78 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b08d      	sub	sp, #52	; 0x34
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e37e      	b.n	8005288 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8092 	beq.w	8004cbc <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b98:	f7ff fea1 	bl	80048de <LL_RCC_GetSysClkSource>
 8004b9c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b9e:	f7ff ff82 	bl	8004aa6 <LL_RCC_PLL_GetMainSource>
 8004ba2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x3e>
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	2b0c      	cmp	r3, #12
 8004bae:	d14c      	bne.n	8004c4a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d149      	bne.n	8004c4a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bb6:	f7ff fe2f 	bl	8004818 <LL_RCC_MSI_IsReady>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_OscConfig+0x54>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e35d      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004bd0:	f7ff fe47 	bl	8004862 <LL_RCC_MSI_GetRange>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	429c      	cmp	r4, r3
 8004bd8:	d914      	bls.n	8004c04 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fd16 	bl	8005610 <RCC_SetFlashLatencyFromMSIRange>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e34c      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fe21 	bl	800483a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fe45 	bl	800488c <LL_RCC_MSI_SetCalibTrimming>
 8004c02:	e013      	b.n	8004c2c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fe16 	bl	800483a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fe3a 	bl	800488c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 fcf7 	bl	8005610 <RCC_SetFlashLatencyFromMSIRange>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e32d      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c2c:	f000 fcdc 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4ab3      	ldr	r2, [pc, #716]	; (8004f00 <HAL_RCC_OscConfig+0x388>)
 8004c34:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c36:	4bb3      	ldr	r3, [pc, #716]	; (8004f04 <HAL_RCC_OscConfig+0x38c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fe fd34 	bl	80036a8 <HAL_InitTick>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d039      	beq.n	8004cba <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e31e      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01e      	beq.n	8004c90 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c52:	f7ff fdc3 	bl	80047dc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c56:	f7fe fd75 	bl	8003744 <HAL_GetTick>
 8004c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c5e:	f7fe fd71 	bl	8003744 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e30b      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c70:	f7ff fdd2 	bl	8004818 <LL_RCC_MSI_IsReady>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0f1      	beq.n	8004c5e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fddb 	bl	800483a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff fdff 	bl	800488c <LL_RCC_MSI_SetCalibTrimming>
 8004c8e:	e015      	b.n	8004cbc <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c90:	f7ff fdb3 	bl	80047fa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c94:	f7fe fd56 	bl	8003744 <HAL_GetTick>
 8004c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c9c:	f7fe fd52 	bl	8003744 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e2ec      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004cae:	f7ff fdb3 	bl	8004818 <LL_RCC_MSI_IsReady>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1f1      	bne.n	8004c9c <HAL_RCC_OscConfig+0x124>
 8004cb8:	e000      	b.n	8004cbc <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d04e      	beq.n	8004d66 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc8:	f7ff fe09 	bl	80048de <LL_RCC_GetSysClkSource>
 8004ccc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cce:	f7ff feea 	bl	8004aa6 <LL_RCC_PLL_GetMainSource>
 8004cd2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d005      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x16e>
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	2b0c      	cmp	r3, #12
 8004cde:	d10d      	bne.n	8004cfc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	2b03      	cmp	r3, #3
 8004ce4:	d10a      	bne.n	8004cfc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce6:	f7ff fc19 	bl	800451c <LL_RCC_HSE_IsReady>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d039      	beq.n	8004d64 <HAL_RCC_OscConfig+0x1ec>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d135      	bne.n	8004d64 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e2c5      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d04:	d102      	bne.n	8004d0c <HAL_RCC_OscConfig+0x194>
 8004d06:	f7ff fbeb 	bl	80044e0 <LL_RCC_HSE_Enable>
 8004d0a:	e001      	b.n	8004d10 <HAL_RCC_OscConfig+0x198>
 8004d0c:	f7ff fbf7 	bl	80044fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d012      	beq.n	8004d3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fe fd14 	bl	8003744 <HAL_GetTick>
 8004d1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d20:	f7fe fd10 	bl	8003744 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e2aa      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d32:	f7ff fbf3 	bl	800451c <LL_RCC_HSE_IsReady>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f1      	beq.n	8004d20 <HAL_RCC_OscConfig+0x1a8>
 8004d3c:	e013      	b.n	8004d66 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d3e:	f7fe fd01 	bl	8003744 <HAL_GetTick>
 8004d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d46:	f7fe fcfd 	bl	8003744 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b64      	cmp	r3, #100	; 0x64
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e297      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d58:	f7ff fbe0 	bl	800451c <LL_RCC_HSE_IsReady>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f1      	bne.n	8004d46 <HAL_RCC_OscConfig+0x1ce>
 8004d62:	e000      	b.n	8004d66 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d051      	beq.n	8004e16 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d72:	f7ff fdb4 	bl	80048de <LL_RCC_GetSysClkSource>
 8004d76:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d78:	f7ff fe95 	bl	8004aa6 <LL_RCC_PLL_GetMainSource>
 8004d7c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x218>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d113      	bne.n	8004db2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d110      	bne.n	8004db2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d90:	f7ff fbf4 	bl	800457c <LL_RCC_HSI_IsReady>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x22e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e270      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff fbf8 	bl	80045a0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004db0:	e031      	b.n	8004e16 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d019      	beq.n	8004dee <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dba:	f7ff fbc1 	bl	8004540 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dbe:	f7fe fcc1 	bl	8003744 <HAL_GetTick>
 8004dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc6:	f7fe fcbd 	bl	8003744 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e257      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004dd8:	f7ff fbd0 	bl	800457c <LL_RCC_HSI_IsReady>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f1      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fbda 	bl	80045a0 <LL_RCC_HSI_SetCalibTrimming>
 8004dec:	e013      	b.n	8004e16 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dee:	f7ff fbb6 	bl	800455e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df2:	f7fe fca7 	bl	8003744 <HAL_GetTick>
 8004df6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dfa:	f7fe fca3 	bl	8003744 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e23d      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e0c:	f7ff fbb6 	bl	800457c <LL_RCC_HSI_IsReady>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f1      	bne.n	8004dfa <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d106      	bne.n	8004e30 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80a3 	beq.w	8004f76 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d076      	beq.n	8004f26 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d046      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004e44:	f7ff fc6d 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d113      	bne.n	8004e76 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004e4e:	f7ff fc46 	bl	80046de <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e52:	f7fe fc77 	bl	8003744 <HAL_GetTick>
 8004e56:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e5a:	f7fe fc73 	bl	8003744 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e20d      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e6c:	f7ff fc59 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f1      	beq.n	8004e5a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004e76:	f7ff fc66 	bl	8004746 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7a:	f7fe fc63 	bl	8003744 <HAL_GetTick>
 8004e7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e80:	e008      	b.n	8004e94 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e82:	f7fe fc5f 	bl	8003744 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d901      	bls.n	8004e94 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e1f9      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e94:	f7ff fc79 	bl	800478a <LL_RCC_LSI2_IsReady>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f1      	beq.n	8004e82 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff fc83 	bl	80047ae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004ea8:	f7ff fc2a 	bl	8004700 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fe fc4a 	bl	8003744 <HAL_GetTick>
 8004eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004eb4:	f7fe fc46 	bl	8003744 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e1e0      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ec6:	f7ff fc2c 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f1      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x33c>
 8004ed0:	e051      	b.n	8004f76 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004ed2:	f7ff fc04 	bl	80046de <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed6:	f7fe fc35 	bl	8003744 <HAL_GetTick>
 8004eda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004edc:	e008      	b.n	8004ef0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ede:	f7fe fc31 	bl	8003744 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d901      	bls.n	8004ef0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e1cb      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ef0:	f7ff fc17 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0f1      	beq.n	8004ede <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004efa:	f7ff fc35 	bl	8004768 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004efe:	e00c      	b.n	8004f1a <HAL_RCC_OscConfig+0x3a2>
 8004f00:	20000048 	.word	0x20000048
 8004f04:	2000004c 	.word	0x2000004c
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f08:	f7fe fc1c 	bl	8003744 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e1b6      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f1a:	f7ff fc36 	bl	800478a <LL_RCC_LSI2_IsReady>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f1      	bne.n	8004f08 <HAL_RCC_OscConfig+0x390>
 8004f24:	e027      	b.n	8004f76 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f26:	f7ff fc1f 	bl	8004768 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fe fc0b 	bl	8003744 <HAL_GetTick>
 8004f2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f32:	f7fe fc07 	bl	8003744 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e1a1      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f44:	f7ff fc21 	bl	800478a <LL_RCC_LSI2_IsReady>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f1      	bne.n	8004f32 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004f4e:	f7ff fbd7 	bl	8004700 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f52:	f7fe fbf7 	bl	8003744 <HAL_GetTick>
 8004f56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f58:	e008      	b.n	8004f6c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f5a:	f7fe fbf3 	bl	8003744 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e18d      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f6c:	f7ff fbd9 	bl	8004722 <LL_RCC_LSI1_IsReady>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f1      	bne.n	8004f5a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d05b      	beq.n	800503a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f82:	4bb5      	ldr	r3, [pc, #724]	; (8005258 <HAL_RCC_OscConfig+0x6e0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d114      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f8e:	f7ff fa25 	bl	80043dc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f92:	f7fe fbd7 	bl	8003744 <HAL_GetTick>
 8004f96:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f9a:	f7fe fbd3 	bl	8003744 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e16d      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fac:	4baa      	ldr	r3, [pc, #680]	; (8005258 <HAL_RCC_OscConfig+0x6e0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d0f0      	beq.n	8004f9a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d102      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x44e>
 8004fc0:	f7ff fb37 	bl	8004632 <LL_RCC_LSE_Enable>
 8004fc4:	e00c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x468>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d104      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x460>
 8004fce:	f7ff fb52 	bl	8004676 <LL_RCC_LSE_EnableBypass>
 8004fd2:	f7ff fb2e 	bl	8004632 <LL_RCC_LSE_Enable>
 8004fd6:	e003      	b.n	8004fe0 <HAL_RCC_OscConfig+0x468>
 8004fd8:	f7ff fb3c 	bl	8004654 <LL_RCC_LSE_Disable>
 8004fdc:	f7ff fb5c 	bl	8004698 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d014      	beq.n	8005012 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fe fbac 	bl	8003744 <HAL_GetTick>
 8004fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004fee:	e00a      	b.n	8005006 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff0:	f7fe fba8 	bl	8003744 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e140      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005006:	f7ff fb58 	bl	80046ba <LL_RCC_LSE_IsReady>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d0ef      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x478>
 8005010:	e013      	b.n	800503a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005012:	f7fe fb97 	bl	8003744 <HAL_GetTick>
 8005016:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005018:	e00a      	b.n	8005030 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501a:	f7fe fb93 	bl	8003744 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	f241 3288 	movw	r2, #5000	; 0x1388
 8005028:	4293      	cmp	r3, r2
 800502a:	d901      	bls.n	8005030 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e12b      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005030:	f7ff fb43 	bl	80046ba <LL_RCC_LSE_IsReady>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ef      	bne.n	800501a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005042:	2b00      	cmp	r3, #0
 8005044:	d02c      	beq.n	80050a0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d014      	beq.n	8005078 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800504e:	f7ff fabc 	bl	80045ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005052:	f7fe fb77 	bl	8003744 <HAL_GetTick>
 8005056:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800505a:	f7fe fb73 	bl	8003744 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e10d      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800506c:	f7ff facf 	bl	800460e <LL_RCC_HSI48_IsReady>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f1      	beq.n	800505a <HAL_RCC_OscConfig+0x4e2>
 8005076:	e013      	b.n	80050a0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005078:	f7ff fab8 	bl	80045ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507c:	f7fe fb62 	bl	8003744 <HAL_GetTick>
 8005080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005084:	f7fe fb5e 	bl	8003744 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0f8      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005096:	f7ff faba 	bl	800460e <LL_RCC_HSI48_IsReady>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1f1      	bne.n	8005084 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 80ee 	beq.w	8005286 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050aa:	f7ff fc18 	bl	80048de <LL_RCC_GetSysClkSource>
 80050ae:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80050b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	2b02      	cmp	r3, #2
 80050be:	f040 80af 	bne.w	8005220 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 0203 	and.w	r2, r3, #3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d123      	bne.n	8005118 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050da:	429a      	cmp	r2, r3
 80050dc:	d11c      	bne.n	8005118 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d114      	bne.n	8005118 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d10d      	bne.n	8005118 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d106      	bne.n	8005118 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005114:	429a      	cmp	r2, r3
 8005116:	d05d      	beq.n	80051d4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d058      	beq.n	80051d0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0ab      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005130:	f7ff fc73 	bl	8004a1a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005134:	f7fe fb06 	bl	8003744 <HAL_GetTick>
 8005138:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513c:	f7fe fb02 	bl	8003744 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e09c      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800514e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1ef      	bne.n	800513c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005160:	68da      	ldr	r2, [r3, #12]
 8005162:	4b3e      	ldr	r3, [pc, #248]	; (800525c <HAL_RCC_OscConfig+0x6e4>)
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800516e:	4311      	orrs	r1, r2
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005174:	0212      	lsls	r2, r2, #8
 8005176:	4311      	orrs	r1, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800517c:	4311      	orrs	r1, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005182:	4311      	orrs	r1, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005188:	430a      	orrs	r2, r1
 800518a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800518e:	4313      	orrs	r3, r2
 8005190:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005192:	f7ff fc33 	bl	80049fc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051a6:	f7fe facd 	bl	8003744 <HAL_GetTick>
 80051aa:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ae:	f7fe fac9 	bl	8003744 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e063      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d0ef      	beq.n	80051ae <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051ce:	e05a      	b.n	8005286 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e059      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d151      	bne.n	8005286 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051e2:	f7ff fc0b 	bl	80049fc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051f6:	f7fe faa5 	bl	8003744 <HAL_GetTick>
 80051fa:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051fc:	e008      	b.n	8005210 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fe:	f7fe faa1 	bl	8003744 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e03b      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0ef      	beq.n	80051fe <HAL_RCC_OscConfig+0x686>
 800521e:	e032      	b.n	8005286 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b0c      	cmp	r3, #12
 8005224:	d02d      	beq.n	8005282 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005226:	f7ff fbf8 	bl	8004a1a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005234:	f023 0303 	bic.w	r3, r3, #3
 8005238:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800523a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005244:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524e:	f7fe fa79 	bl	8003744 <HAL_GetTick>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005254:	e00d      	b.n	8005272 <HAL_RCC_OscConfig+0x6fa>
 8005256:	bf00      	nop
 8005258:	58000400 	.word	0x58000400
 800525c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005260:	f7fe fa70 	bl	8003744 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e00a      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ef      	bne.n	8005260 <HAL_RCC_OscConfig+0x6e8>
 8005280:	e001      	b.n	8005286 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e000      	b.n	8005288 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005286:	2300      	movs	r3, #0
}
 8005288:	4618      	mov	r0, r3
 800528a:	3734      	adds	r7, #52	; 0x34
 800528c:	46bd      	mov	sp, r7
 800528e:	bd90      	pop	{r4, r7, pc}

08005290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e12d      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a4:	4b98      	ldr	r3, [pc, #608]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	683a      	ldr	r2, [r7, #0]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d91b      	bls.n	80052ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b2:	4b95      	ldr	r3, [pc, #596]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f023 0207 	bic.w	r2, r3, #7
 80052ba:	4993      	ldr	r1, [pc, #588]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4313      	orrs	r3, r2
 80052c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c2:	f7fe fa3f 	bl	8003744 <HAL_GetTick>
 80052c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c8:	e008      	b.n	80052dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052ca:	f7fe fa3b 	bl	8003744 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d901      	bls.n	80052dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e111      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052dc:	4b8a      	ldr	r3, [pc, #552]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d1ef      	bne.n	80052ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d016      	beq.n	8005324 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fafb 	bl	80048f6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005300:	f7fe fa20 	bl	8003744 <HAL_GetTick>
 8005304:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005308:	f7fe fa1c 	bl	8003744 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0f2      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800531a:	f7ff fbd0 	bl	8004abe <LL_RCC_IsActiveFlag_HPRE>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d0f1      	beq.n	8005308 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0320 	and.w	r3, r3, #32
 800532c:	2b00      	cmp	r3, #0
 800532e:	d016      	beq.n	800535e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff faf2 	bl	800491e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800533a:	f7fe fa03 	bl	8003744 <HAL_GetTick>
 800533e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005340:	e008      	b.n	8005354 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005342:	f7fe f9ff 	bl	8003744 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e0d5      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005354:	f7ff fbc5 	bl	8004ae2 <LL_RCC_IsActiveFlag_C2HPRE>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0f1      	beq.n	8005342 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	d016      	beq.n	8005398 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff faeb 	bl	800494a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005374:	f7fe f9e6 	bl	8003744 <HAL_GetTick>
 8005378:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800537a:	e008      	b.n	800538e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800537c:	f7fe f9e2 	bl	8003744 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	2b02      	cmp	r3, #2
 8005388:	d901      	bls.n	800538e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800538a:	2303      	movs	r3, #3
 800538c:	e0b8      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800538e:	f7ff fbbb 	bl	8004b08 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d0f1      	beq.n	800537c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d016      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff fae5 	bl	8004978 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053ae:	f7fe f9c9 	bl	8003744 <HAL_GetTick>
 80053b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053b6:	f7fe f9c5 	bl	8003744 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e09b      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053c8:	f7ff fbb1 	bl	8004b2e <LL_RCC_IsActiveFlag_PPRE1>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d0f1      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d017      	beq.n	800540e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fadb 	bl	80049a0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053ea:	f7fe f9ab 	bl	8003744 <HAL_GetTick>
 80053ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053f2:	f7fe f9a7 	bl	8003744 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e07d      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005404:	f7ff fba5 	bl	8004b52 <LL_RCC_IsActiveFlag_PPRE2>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f1      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d043      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	2b02      	cmp	r3, #2
 8005420:	d106      	bne.n	8005430 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005422:	f7ff f87b 	bl	800451c <LL_RCC_HSE_IsReady>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d11e      	bne.n	800546a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e067      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b03      	cmp	r3, #3
 8005436:	d106      	bne.n	8005446 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005438:	f7ff fafe 	bl	8004a38 <LL_RCC_PLL_IsReady>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d113      	bne.n	800546a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e05c      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800544e:	f7ff f9e3 	bl	8004818 <LL_RCC_MSI_IsReady>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d108      	bne.n	800546a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e051      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800545c:	f7ff f88e 	bl	800457c <LL_RCC_HSI_IsReady>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e04a      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff fa21 	bl	80048b6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005474:	f7fe f966 	bl	8003744 <HAL_GetTick>
 8005478:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800547a:	e00a      	b.n	8005492 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800547c:	f7fe f962 	bl	8003744 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	f241 3288 	movw	r2, #5000	; 0x1388
 800548a:	4293      	cmp	r3, r2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e036      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005492:	f7ff fa24 	bl	80048de <LL_RCC_GetSysClkSource>
 8005496:	4602      	mov	r2, r0
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	429a      	cmp	r2, r3
 80054a0:	d1ec      	bne.n	800547c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0307 	and.w	r3, r3, #7
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d21b      	bcs.n	80054e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b0:	4b15      	ldr	r3, [pc, #84]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f023 0207 	bic.w	r2, r3, #7
 80054b8:	4913      	ldr	r1, [pc, #76]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	4313      	orrs	r3, r2
 80054be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c0:	f7fe f940 	bl	8003744 <HAL_GetTick>
 80054c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	e008      	b.n	80054da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80054c8:	f7fe f93c 	bl	8003744 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e012      	b.n	8005500 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054da:	4b0b      	ldr	r3, [pc, #44]	; (8005508 <HAL_RCC_ClockConfig+0x278>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d1ef      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80054e8:	f000 f87e 	bl	80055e8 <HAL_RCC_GetHCLKFreq>
 80054ec:	4603      	mov	r3, r0
 80054ee:	4a07      	ldr	r2, [pc, #28]	; (800550c <HAL_RCC_ClockConfig+0x27c>)
 80054f0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80054f2:	f7fe f933 	bl	800375c <HAL_GetTickPrio>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7fe f8d5 	bl	80036a8 <HAL_InitTick>
 80054fe:	4603      	mov	r3, r0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	58004000 	.word	0x58004000
 800550c:	20000048 	.word	0x20000048

08005510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b085      	sub	sp, #20
 8005514:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005516:	f7ff f9e2 	bl	80048de <LL_RCC_GetSysClkSource>
 800551a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10a      	bne.n	8005538 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005522:	f7ff f99e 	bl	8004862 <LL_RCC_MSI_GetRange>
 8005526:	4603      	mov	r3, r0
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	4a2b      	ldr	r2, [pc, #172]	; (80055dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	e04b      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b04      	cmp	r3, #4
 800553c:	d102      	bne.n	8005544 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800553e:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	e045      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b08      	cmp	r3, #8
 8005548:	d10a      	bne.n	8005560 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800554a:	f7fe ffb7 	bl	80044bc <LL_RCC_HSE_IsEnabledDiv2>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d102      	bne.n	800555a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005554:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e03a      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800555a:	4b22      	ldr	r3, [pc, #136]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	e037      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005560:	f7ff faa1 	bl	8004aa6 <LL_RCC_PLL_GetMainSource>
 8005564:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b02      	cmp	r3, #2
 800556a:	d003      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0x64>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d003      	beq.n	800557a <HAL_RCC_GetSysClockFreq+0x6a>
 8005572:	e00d      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005574:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005576:	60bb      	str	r3, [r7, #8]
        break;
 8005578:	e015      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800557a:	f7fe ff9f 	bl	80044bc <LL_RCC_HSE_IsEnabledDiv2>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d102      	bne.n	800558a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005586:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005588:	e00d      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800558a:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800558c:	60bb      	str	r3, [r7, #8]
        break;
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005590:	f7ff f967 	bl	8004862 <LL_RCC_MSI_GetRange>
 8005594:	4603      	mov	r3, r0
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	f003 030f 	and.w	r3, r3, #15
 800559c:	4a0f      	ldr	r2, [pc, #60]	; (80055dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800559e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a2:	60bb      	str	r3, [r7, #8]
        break;
 80055a4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80055a6:	f7ff fa59 	bl	8004a5c <LL_RCC_PLL_GetN>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	fb03 f402 	mul.w	r4, r3, r2
 80055b2:	f7ff fa6c 	bl	8004a8e <LL_RCC_PLL_GetDivider>
 80055b6:	4603      	mov	r3, r0
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	3301      	adds	r3, #1
 80055bc:	fbb4 f4f3 	udiv	r4, r4, r3
 80055c0:	f7ff fa59 	bl	8004a76 <LL_RCC_PLL_GetR>
 80055c4:	4603      	mov	r3, r0
 80055c6:	0f5b      	lsrs	r3, r3, #29
 80055c8:	3301      	adds	r3, #1
 80055ca:	fbb4 f3f3 	udiv	r3, r4, r3
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80055d0:	68fb      	ldr	r3, [r7, #12]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd90      	pop	{r4, r7, pc}
 80055da:	bf00      	nop
 80055dc:	0800aff0 	.word	0x0800aff0
 80055e0:	00f42400 	.word	0x00f42400
 80055e4:	01e84800 	.word	0x01e84800

080055e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055e8:	b598      	push	{r3, r4, r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80055ec:	f7ff ff90 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 80055f0:	4604      	mov	r4, r0
 80055f2:	f7ff f9e9 	bl	80049c8 <LL_RCC_GetAHBPrescaler>
 80055f6:	4603      	mov	r3, r0
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	4a03      	ldr	r2, [pc, #12]	; (800560c <HAL_RCC_GetHCLKFreq+0x24>)
 8005600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005604:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	bd98      	pop	{r3, r4, r7, pc}
 800560c:	0800afb0 	.word	0x0800afb0

08005610 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2bb0      	cmp	r3, #176	; 0xb0
 800561c:	d903      	bls.n	8005626 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800561e:	4b15      	ldr	r3, [pc, #84]	; (8005674 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	e007      	b.n	8005636 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	4a11      	ldr	r2, [pc, #68]	; (8005674 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005634:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005636:	f7ff f9d3 	bl	80049e0 <LL_RCC_GetAHB4Prescaler>
 800563a:	4603      	mov	r3, r0
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	4a0d      	ldr	r2, [pc, #52]	; (8005678 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	fbb2 f3f3 	udiv	r3, r2, r3
 800564e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a0a      	ldr	r2, [pc, #40]	; (800567c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005654:	fba2 2303 	umull	r2, r3, r2, r3
 8005658:	0c9c      	lsrs	r4, r3, #18
 800565a:	f7fe ff21 	bl	80044a0 <HAL_PWREx_GetVoltageRange>
 800565e:	4603      	mov	r3, r0
 8005660:	4619      	mov	r1, r3
 8005662:	4620      	mov	r0, r4
 8005664:	f000 f80c 	bl	8005680 <RCC_SetFlashLatency>
 8005668:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}
 8005672:	bf00      	nop
 8005674:	0800aff0 	.word	0x0800aff0
 8005678:	0800afb0 	.word	0x0800afb0
 800567c:	431bde83 	.word	0x431bde83

08005680 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b093      	sub	sp, #76	; 0x4c
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800568a:	4b39      	ldr	r3, [pc, #228]	; (8005770 <RCC_SetFlashLatency+0xf0>)
 800568c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005696:	4a37      	ldr	r2, [pc, #220]	; (8005774 <RCC_SetFlashLatency+0xf4>)
 8005698:	f107 031c 	add.w	r3, r7, #28
 800569c:	ca07      	ldmia	r2, {r0, r1, r2}
 800569e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80056a2:	4b35      	ldr	r3, [pc, #212]	; (8005778 <RCC_SetFlashLatency+0xf8>)
 80056a4:	f107 040c 	add.w	r4, r7, #12
 80056a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80056ae:	2300      	movs	r3, #0
 80056b0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056b8:	d11c      	bne.n	80056f4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056ba:	2300      	movs	r3, #0
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
 80056be:	e015      	b.n	80056ec <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80056c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056c8:	4413      	add	r3, r2
 80056ca:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d808      	bhi.n	80056e6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80056d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056dc:	4413      	add	r3, r2
 80056de:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80056e2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80056e4:	e022      	b.n	800572c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e8:	3301      	adds	r3, #1
 80056ea:	643b      	str	r3, [r7, #64]	; 0x40
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d9e6      	bls.n	80056c0 <RCC_SetFlashLatency+0x40>
 80056f2:	e01b      	b.n	800572c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f8:	e015      	b.n	8005726 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005702:	4413      	add	r3, r2
 8005704:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d808      	bhi.n	8005720 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800570e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005716:	4413      	add	r3, r2
 8005718:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800571c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800571e:	e005      	b.n	800572c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005722:	3301      	adds	r3, #1
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005728:	2b02      	cmp	r3, #2
 800572a:	d9e6      	bls.n	80056fa <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800572c:	4b13      	ldr	r3, [pc, #76]	; (800577c <RCC_SetFlashLatency+0xfc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f023 0207 	bic.w	r2, r3, #7
 8005734:	4911      	ldr	r1, [pc, #68]	; (800577c <RCC_SetFlashLatency+0xfc>)
 8005736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005738:	4313      	orrs	r3, r2
 800573a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800573c:	f7fe f802 	bl	8003744 <HAL_GetTick>
 8005740:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005742:	e008      	b.n	8005756 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005744:	f7fd fffe 	bl	8003744 <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d901      	bls.n	8005756 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e007      	b.n	8005766 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <RCC_SetFlashLatency+0xfc>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0307 	and.w	r3, r3, #7
 800575e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005760:	429a      	cmp	r2, r3
 8005762:	d1ef      	bne.n	8005744 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	374c      	adds	r7, #76	; 0x4c
 800576a:	46bd      	mov	sp, r7
 800576c:	bd90      	pop	{r4, r7, pc}
 800576e:	bf00      	nop
 8005770:	0800ae08 	.word	0x0800ae08
 8005774:	0800ae18 	.word	0x0800ae18
 8005778:	0800ae24 	.word	0x0800ae24
 800577c:	58004000 	.word	0x58004000

08005780 <LL_RCC_LSE_IsEnabled>:
{
 8005780:	b480      	push	{r7}
 8005782:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f003 0301 	and.w	r3, r3, #1
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <LL_RCC_LSE_IsEnabled+0x18>
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <LL_RCC_LSE_IsEnabled+0x1a>
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <LL_RCC_LSE_IsReady>:
{
 80057a4:	b480      	push	{r7}
 80057a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d101      	bne.n	80057bc <LL_RCC_LSE_IsReady+0x18>
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <LL_RCC_LSE_IsReady+0x1a>
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <LL_RCC_SetRFWKPClockSource>:
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <LL_RCC_SetSMPSClockSource>:
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005802:	f023 0203 	bic.w	r2, r3, #3
 8005806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4313      	orrs	r3, r2
 800580e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <LL_RCC_SetSMPSPrescaler>:
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800582e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4313      	orrs	r3, r2
 8005836:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <LL_RCC_SetUSARTClockSource>:
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800584c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f023 0203 	bic.w	r2, r3, #3
 8005858:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <LL_RCC_SetLPUARTClockSource>:
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005884:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <LL_RCC_SetI2CClockSource>:
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058b4:	43db      	mvns	r3, r3
 80058b6:	401a      	ands	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	011b      	lsls	r3, r3, #4
 80058bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <LL_RCC_SetLPTIMClockSource>:
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80058de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	0c1b      	lsrs	r3, r3, #16
 80058ea:	041b      	lsls	r3, r3, #16
 80058ec:	43db      	mvns	r3, r3
 80058ee:	401a      	ands	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	041b      	lsls	r3, r3, #16
 80058f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058fe:	bf00      	nop
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <LL_RCC_SetSAIClockSource>:
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800591e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <LL_RCC_SetRNGClockSource>:
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800593e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800594a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <LL_RCC_SetCLK48ClockSource>:
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <LL_RCC_SetUSBClockSource>:
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ffe3 	bl	8005962 <LL_RCC_SetCLK48ClockSource>
}
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <LL_RCC_SetADCClockSource>:
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80059ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4313      	orrs	r3, r2
 80059c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <LL_RCC_SetRTCClockSource>:
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80059d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <LL_RCC_GetRTCClockSource>:
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <LL_RCC_ForceBackupDomainReset>:
{
 8005a16:	b480      	push	{r7}
 8005a18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a2e:	bf00      	nop
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a50:	bf00      	nop
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <LL_RCC_PLLSAI1_Enable>:
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a6c:	6013      	str	r3, [r2, #0]
}
 8005a6e:	bf00      	nop
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <LL_RCC_PLLSAI1_Disable>:
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a8a:	6013      	str	r3, [r2, #0]
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <LL_RCC_PLLSAI1_IsReady>:
{
 8005a96:	b480      	push	{r7}
 8005a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aa8:	d101      	bne.n	8005aae <LL_RCC_PLLSAI1_IsReady+0x18>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b088      	sub	sp, #32
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d034      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ade:	d021      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005ae0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ae4:	d81b      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005aea:	d01d      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005af0:	d815      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00b      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005af6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005afa:	d110      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b0a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b0c:	e00d      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	3304      	adds	r3, #4
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f947 	bl	8005da6 <RCCEx_PLLSAI1_ConfigNP>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b1c:	e005      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	77fb      	strb	r3, [r7, #31]
        break;
 8005b22:	e002      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b24:	bf00      	nop
 8005b26:	e000      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b2a:	7ffb      	ldrb	r3, [r7, #31]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d105      	bne.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fee8 	bl	800590a <LL_RCC_SetSAIClockSource>
 8005b3a:	e001      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3c:	7ffb      	ldrb	r3, [r7, #31]
 8005b3e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d046      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005b4c:	f7ff ff56 	bl	80059fc <LL_RCC_GetRTCClockSource>
 8005b50:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d03c      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b5c:	f7fe fc3e 	bl	80043dc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d105      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff ff30 	bl	80059d0 <LL_RCC_SetRTCClockSource>
 8005b70:	e02e      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b7a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005b7c:	f7ff ff4b 	bl	8005a16 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005b80:	f7ff ff5a 	bl	8005a38 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005b9c:	f7ff fdf0 	bl	8005780 <LL_RCC_LSE_IsEnabled>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d114      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ba6:	f7fd fdcd 	bl	8003744 <HAL_GetTick>
 8005baa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005bac:	e00b      	b.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bae:	f7fd fdc9 	bl	8003744 <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d902      	bls.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	77fb      	strb	r3, [r7, #31]
              break;
 8005bc4:	e004      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005bc6:	f7ff fded 	bl	80057a4 <LL_RCC_LSE_IsReady>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d1ee      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005bd0:	7ffb      	ldrb	r3, [r7, #31]
 8005bd2:	77bb      	strb	r3, [r7, #30]
 8005bd4:	e001      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fe2a 	bl	8005844 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0302 	and.w	r3, r3, #2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d004      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff fe35 	bl	8005870 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d004      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fe5d 	bl	80058d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0320 	and.w	r3, r3, #32
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d004      	beq.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fe52 	bl	80058d6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0304 	and.w	r3, r3, #4
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fe2a 	bl	800589c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fe1f 	bl	800589c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d022      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fe8d 	bl	800598e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c7c:	d107      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c8c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c96:	d10b      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 f8dd 	bl	8005e5c <RCCEx_PLLSAI1_ConfigNQ>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005ca6:	7ffb      	ldrb	r3, [r7, #31]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005cac:	7ffb      	ldrb	r3, [r7, #31]
 8005cae:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02b      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d008      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cce:	d003      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d105      	bne.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fe2a 	bl	8005936 <LL_RCC_SetRNGClockSource>
 8005ce2:	e00a      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cec:	60fb      	str	r3, [r7, #12]
 8005cee:	2000      	movs	r0, #0
 8005cf0:	f7ff fe21 	bl	8005936 <LL_RCC_SetRNGClockSource>
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff fe34 	bl	8005962 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d02:	d107      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d12:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d022      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fe3d 	bl	80059a4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d32:	d107      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d42:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d4c:	d10b      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3304      	adds	r3, #4
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f8dd 	bl	8005f12 <RCCEx_PLLSAI1_ConfigNR>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005d5c:	7ffb      	ldrb	r3, [r7, #31]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
 8005d64:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fd26 	bl	80057c8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d009      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff fd45 	bl	800581c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fd2c 	bl	80057f4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005d9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005db2:	f7ff fe61 	bl	8005a78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005db6:	f7fd fcc5 	bl	8003744 <HAL_GetTick>
 8005dba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dbc:	e009      	b.n	8005dd2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dbe:	f7fd fcc1 	bl	8003744 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d902      	bls.n	8005dd2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd0:	e004      	b.n	8005ddc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dd2:	f7ff fe60 	bl	8005a96 <LL_RCC_PLLSAI1_IsReady>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f0      	bne.n	8005dbe <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d137      	bne.n	8005e52 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	021b      	lsls	r3, r3, #8
 8005df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005df6:	4313      	orrs	r3, r2
 8005df8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e10:	f7ff fe23 	bl	8005a5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e14:	f7fd fc96 	bl	8003744 <HAL_GetTick>
 8005e18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e1a:	e009      	b.n	8005e30 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e1c:	f7fd fc92 	bl	8003744 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d902      	bls.n	8005e30 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e2e:	e004      	b.n	8005e3a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e30:	f7ff fe31 	bl	8005a96 <LL_RCC_PLLSAI1_IsReady>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d1f0      	bne.n	8005e1c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005e3a:	7bfb      	ldrb	r3, [r7, #15]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d108      	bne.n	8005e52 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e68:	f7ff fe06 	bl	8005a78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e6c:	f7fd fc6a 	bl	8003744 <HAL_GetTick>
 8005e70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e72:	e009      	b.n	8005e88 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e74:	f7fd fc66 	bl	8003744 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d902      	bls.n	8005e88 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	73fb      	strb	r3, [r7, #15]
      break;
 8005e86:	e004      	b.n	8005e92 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e88:	f7ff fe05 	bl	8005a96 <LL_RCC_PLLSAI1_IsReady>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1f0      	bne.n	8005e74 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d137      	bne.n	8005f08 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eac:	4313      	orrs	r3, r2
 8005eae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ec6:	f7ff fdc8 	bl	8005a5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eca:	f7fd fc3b 	bl	8003744 <HAL_GetTick>
 8005ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ed0:	e009      	b.n	8005ee6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ed2:	f7fd fc37 	bl	8003744 <HAL_GetTick>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d902      	bls.n	8005ee6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	73fb      	strb	r3, [r7, #15]
        break;
 8005ee4:	e004      	b.n	8005ef0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ee6:	f7ff fdd6 	bl	8005a96 <LL_RCC_PLLSAI1_IsReady>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d1f0      	bne.n	8005ed2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005ef0:	7bfb      	ldrb	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d108      	bne.n	8005f08 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efa:	691a      	ldr	r2, [r3, #16]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f04:	4313      	orrs	r3, r2
 8005f06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f1e:	f7ff fdab 	bl	8005a78 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f22:	f7fd fc0f 	bl	8003744 <HAL_GetTick>
 8005f26:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f28:	e009      	b.n	8005f3e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f2a:	f7fd fc0b 	bl	8003744 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d902      	bls.n	8005f3e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f3c:	e004      	b.n	8005f48 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f3e:	f7ff fdaa 	bl	8005a96 <LL_RCC_PLLSAI1_IsReady>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1f0      	bne.n	8005f2a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d137      	bne.n	8005fbe <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	021b      	lsls	r3, r3, #8
 8005f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f62:	4313      	orrs	r3, r2
 8005f64:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f7c:	f7ff fd6d 	bl	8005a5a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f80:	f7fd fbe0 	bl	8003744 <HAL_GetTick>
 8005f84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f86:	e009      	b.n	8005f9c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f88:	f7fd fbdc 	bl	8003744 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d902      	bls.n	8005f9c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	73fb      	strb	r3, [r7, #15]
        break;
 8005f9a:	e004      	b.n	8005fa6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f9c:	f7ff fd7b 	bl	8005a96 <LL_RCC_PLLSAI1_IsReady>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d1f0      	bne.n	8005f88 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005fa6:	7bfb      	ldrb	r3, [r7, #15]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d108      	bne.n	8005fbe <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d101      	bne.n	8005fda <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e0b4      	b.n	8006144 <HAL_RTC_Init+0x17c>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d12a      	bne.n	800603c <HAL_RTC_Init+0x74>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2020 	strb.w	r2, [r3, #32]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a56      	ldr	r2, [pc, #344]	; (800614c <HAL_RTC_Init+0x184>)
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a56      	ldr	r2, [pc, #344]	; (8006150 <HAL_RTC_Init+0x188>)
 8005ff8:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a55      	ldr	r2, [pc, #340]	; (8006154 <HAL_RTC_Init+0x18c>)
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a55      	ldr	r2, [pc, #340]	; (8006158 <HAL_RTC_Init+0x190>)
 8006004:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER1_SUPPORT)
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a54      	ldr	r2, [pc, #336]	; (800615c <HAL_RTC_Init+0x194>)
 800600a:	635a      	str	r2, [r3, #52]	; 0x34
#endif
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a54      	ldr	r2, [pc, #336]	; (8006160 <HAL_RTC_Init+0x198>)
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(RTC_TAMPER3_SUPPORT)
    hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamper3EventCallback     */
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a53      	ldr	r2, [pc, #332]	; (8006164 <HAL_RTC_Init+0x19c>)
 8006016:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

    if(hrtc->MspInitCallback == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d102      	bne.n	8006026 <HAL_RTC_Init+0x5e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a51      	ldr	r2, [pc, #324]	; (8006168 <HAL_RTC_Init+0x1a0>)
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <HAL_RTC_Init+0x74>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a4c      	ldr	r2, [pc, #304]	; (800616c <HAL_RTC_Init+0x1a4>)
 800603a:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	22ca      	movs	r2, #202	; 0xca
 800604a:	625a      	str	r2, [r3, #36]	; 0x24
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2253      	movs	r2, #83	; 0x53
 8006052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 fad6 	bl	8006606 <RTC_EnterInitMode>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d009      	beq.n	8006074 <HAL_RTC_Init+0xac>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	22ff      	movs	r2, #255	; 0xff
 8006066:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2204      	movs	r2, #4
 800606c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e067      	b.n	8006144 <HAL_RTC_Init+0x17c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006086:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6899      	ldr	r1, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68d2      	ldr	r2, [r2, #12]
 80060ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6919      	ldr	r1, [r3, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	041a      	lsls	r2, r3, #16
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060d2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0203 	bic.w	r2, r2, #3
 80060e2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69da      	ldr	r2, [r3, #28]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	430a      	orrs	r2, r1
 80060fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0320 	and.w	r3, r3, #32
 8006106:	2b00      	cmp	r3, #0
 8006108:	d113      	bne.n	8006132 <HAL_RTC_Init+0x16a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fa55 	bl	80065ba <HAL_RTC_WaitForSynchro>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00d      	beq.n	8006132 <HAL_RTC_Init+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	22ff      	movs	r2, #255	; 0xff
 800611c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2204      	movs	r2, #4
 8006122:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e008      	b.n	8006144 <HAL_RTC_Init+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	22ff      	movs	r2, #255	; 0xff
 8006138:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006142:	2300      	movs	r3, #0
  }
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	080065a7 	.word	0x080065a7
 8006150:	08006935 	.word	0x08006935
 8006154:	080066d3 	.word	0x080066d3
 8006158:	08006859 	.word	0x08006859
 800615c:	080066e7 	.word	0x080066e7
 8006160:	080066fb 	.word	0x080066fb
 8006164:	0800670f 	.word	0x0800670f
 8006168:	08002191 	.word	0x08002191
 800616c:	080021d1 	.word	0x080021d1

08006170 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_RTC_SetTime+0x1a>
 8006186:	2302      	movs	r3, #2
 8006188:	e0b2      	b.n	80062f0 <HAL_RTC_SetTime+0x180>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d126      	bne.n	80061ee <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d102      	bne.n	80061b4 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2200      	movs	r2, #0
 80061b2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fa4e 	bl	800665a <RTC_ByteToBcd2>
 80061be:	4603      	mov	r3, r0
 80061c0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fa47 	bl	800665a <RTC_ByteToBcd2>
 80061cc:	4603      	mov	r3, r0
 80061ce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061d0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	789b      	ldrb	r3, [r3, #2]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fa3f 	bl	800665a <RTC_ByteToBcd2>
 80061dc:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80061de:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	e018      	b.n	8006220 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d102      	bne.n	8006202 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2200      	movs	r2, #0
 8006200:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	785b      	ldrb	r3, [r3, #1]
 800620c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800620e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006214:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	78db      	ldrb	r3, [r3, #3]
 800621a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800621c:	4313      	orrs	r3, r2
 800621e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	22ca      	movs	r2, #202	; 0xca
 8006226:	625a      	str	r2, [r3, #36]	; 0x24
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2253      	movs	r2, #83	; 0x53
 800622e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f000 f9e8 	bl	8006606 <RTC_EnterInitMode>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00d      	beq.n	8006258 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	22ff      	movs	r2, #255	; 0xff
 8006242:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2204      	movs	r2, #4
 8006248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2200      	movs	r2, #0
 8006250:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e04b      	b.n	80062f0 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006262:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006266:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006276:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6899      	ldr	r1, [r3, #8]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	431a      	orrs	r2, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800629e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d113      	bne.n	80062d6 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f000 f983 	bl	80065ba <HAL_RTC_WaitForSynchro>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00d      	beq.n	80062d6 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	22ff      	movs	r2, #255	; 0xff
 80062c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2204      	movs	r2, #4
 80062c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e00c      	b.n	80062f0 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	22ff      	movs	r2, #255	; 0xff
 80062dc:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 80062ee:	2300      	movs	r3, #0
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd90      	pop	{r4, r7, pc}

080062f8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	60f8      	str	r0, [r7, #12]
 8006300:	60b9      	str	r1, [r7, #8]
 8006302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006326:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800632a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	0c1b      	lsrs	r3, r3, #16
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006336:	b2da      	uxtb	r2, r3
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	0a1b      	lsrs	r3, r3, #8
 8006340:	b2db      	uxtb	r3, r3
 8006342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006346:	b2da      	uxtb	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006354:	b2da      	uxtb	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	b2db      	uxtb	r3, r3
 8006360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006364:	b2da      	uxtb	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d11a      	bne.n	80063a6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f000 f990 	bl	800669a <RTC_Bcd2ToByte>
 800637a:	4603      	mov	r3, r0
 800637c:	461a      	mov	r2, r3
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	4618      	mov	r0, r3
 8006388:	f000 f987 	bl	800669a <RTC_Bcd2ToByte>
 800638c:	4603      	mov	r3, r0
 800638e:	461a      	mov	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	789b      	ldrb	r3, [r3, #2]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 f97e 	bl	800669a <RTC_Bcd2ToByte>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <HAL_RTC_SetDate+0x1a>
 80063c6:	2302      	movs	r3, #2
 80063c8:	e09c      	b.n	8006504 <HAL_RTC_SetDate+0x154>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10e      	bne.n	80063fe <HAL_RTC_SetDate+0x4e>
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	785b      	ldrb	r3, [r3, #1]
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	f023 0310 	bic.w	r3, r3, #16
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	330a      	adds	r3, #10
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d11c      	bne.n	800643e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	78db      	ldrb	r3, [r3, #3]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f926 	bl	800665a <RTC_ByteToBcd2>
 800640e:	4603      	mov	r3, r0
 8006410:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	4618      	mov	r0, r3
 8006418:	f000 f91f 	bl	800665a <RTC_ByteToBcd2>
 800641c:	4603      	mov	r3, r0
 800641e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006420:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	789b      	ldrb	r3, [r3, #2]
 8006426:	4618      	mov	r0, r3
 8006428:	f000 f917 	bl	800665a <RTC_ByteToBcd2>
 800642c:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800642e:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	e00e      	b.n	800645c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	78db      	ldrb	r3, [r3, #3]
 8006442:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	785b      	ldrb	r3, [r3, #1]
 8006448:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800644a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006450:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	22ca      	movs	r2, #202	; 0xca
 8006462:	625a      	str	r2, [r3, #36]	; 0x24
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2253      	movs	r2, #83	; 0x53
 800646a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 f8ca 	bl	8006606 <RTC_EnterInitMode>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00d      	beq.n	8006494 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	22ff      	movs	r2, #255	; 0xff
 800647e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2204      	movs	r2, #4
 8006484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e037      	b.n	8006504 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800649e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d113      	bne.n	80064ea <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f879 	bl	80065ba <HAL_RTC_WaitForSynchro>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00d      	beq.n	80064ea <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	22ff      	movs	r2, #255	; 0xff
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2204      	movs	r2, #4
 80064da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e00c      	b.n	8006504 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	22ff      	movs	r2, #255	; 0xff
 80064f0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006502:	2300      	movs	r3, #0
  }
}
 8006504:	4618      	mov	r0, r3
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	bd90      	pop	{r4, r7, pc}

0800650c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006522:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006526:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	0c1b      	lsrs	r3, r3, #16
 800652c:	b2da      	uxtb	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	0a1b      	lsrs	r3, r3, #8
 8006536:	b2db      	uxtb	r3, r3
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	b2da      	uxtb	r2, r3
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800654a:	b2da      	uxtb	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	0b5b      	lsrs	r3, r3, #13
 8006554:	b2db      	uxtb	r3, r3
 8006556:	f003 0307 	and.w	r3, r3, #7
 800655a:	b2da      	uxtb	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d11a      	bne.n	800659c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	78db      	ldrb	r3, [r3, #3]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f895 	bl	800669a <RTC_Bcd2ToByte>
 8006570:	4603      	mov	r3, r0
 8006572:	461a      	mov	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 f88c 	bl	800669a <RTC_Bcd2ToByte>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	789b      	ldrb	r3, [r3, #2]
 800658e:	4618      	mov	r0, r3
 8006590:	f000 f883 	bl	800669a <RTC_Bcd2ToByte>
 8006594:	4603      	mov	r3, r0
 8006596:	461a      	mov	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065d0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80065d2:	f7fd f8b7 	bl	8003744 <HAL_GetTick>
 80065d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065d8:	e009      	b.n	80065ee <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80065da:	f7fd f8b3 	bl	8003744 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e8:	d901      	bls.n	80065ee <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e007      	b.n	80065fe <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d0ee      	beq.n	80065da <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006618:	2b00      	cmp	r3, #0
 800661a:	d119      	bne.n	8006650 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f04f 32ff 	mov.w	r2, #4294967295
 8006624:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006626:	f7fd f88d 	bl	8003744 <HAL_GetTick>
 800662a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800662c:	e009      	b.n	8006642 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800662e:	f7fd f889 	bl	8003744 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800663c:	d901      	bls.n	8006642 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e007      	b.n	8006652 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0ee      	beq.n	800662e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	4603      	mov	r3, r0
 8006662:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006664:	2300      	movs	r3, #0
 8006666:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800666c:	e005      	b.n	800667a <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	3b0a      	subs	r3, #10
 8006678:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800667a:	7afb      	ldrb	r3, [r7, #11]
 800667c:	2b09      	cmp	r3, #9
 800667e:	d8f6      	bhi.n	800666e <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	b2da      	uxtb	r2, r3
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	4313      	orrs	r3, r2
 800668c:	b2db      	uxtb	r3, r3
}
 800668e:	4618      	mov	r0, r3
 8006690:	3714      	adds	r7, #20
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	4603      	mov	r3, r0
 80066a2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	091b      	lsrs	r3, r3, #4
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	461a      	mov	r2, r3
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	79fb      	ldrb	r3, [r7, #7]
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	b2db      	uxtb	r3, r3
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80066ee:	bf00      	nop
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8006702:	bf00      	nop
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 800670e:	b480      	push	{r7}
 8006710:	b083      	sub	sp, #12
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8006716:	bf00      	nop
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b086      	sub	sp, #24
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006738:	2302      	movs	r3, #2
 800673a:	e089      	b.n	8006850 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	22ca      	movs	r2, #202	; 0xca
 8006752:	625a      	str	r2, [r3, #36]	; 0x24
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2253      	movs	r2, #83	; 0x53
 800675a:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006766:	2b00      	cmp	r3, #0
 8006768:	d020      	beq.n	80067ac <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 800676a:	f7fc ffeb 	bl	8003744 <HAL_GetTick>
 800676e:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006770:	e015      	b.n	800679e <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006772:	f7fc ffe7 	bl	8003744 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006780:	d90d      	bls.n	800679e <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	22ff      	movs	r2, #255	; 0xff
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2203      	movs	r2, #3
 800678e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e058      	b.n	8006850 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1e2      	bne.n	8006772 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689a      	ldr	r2, [r3, #8]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ba:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80067bc:	f7fc ffc2 	bl	8003744 <HAL_GetTick>
 80067c0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80067c2:	e015      	b.n	80067f0 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067c4:	f7fc ffbe 	bl	8003744 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d2:	d90d      	bls.n	80067f0 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	22ff      	movs	r2, #255	; 0xff
 80067da:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2203      	movs	r2, #3
 80067e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e02f      	b.n	8006850 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d0e2      	beq.n	80067c4 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	689a      	ldr	r2, [r3, #8]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0207 	bic.w	r2, r2, #7
 800680c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6899      	ldr	r1, [r3, #8]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	430a      	orrs	r2, r1
 800681c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	689a      	ldr	r2, [r3, #8]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006834:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	22ff      	movs	r2, #255	; 0xff
 800683c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3350      	adds	r3, #80	; 0x50
 800687e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	601a      	str	r2, [r3, #0]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3350      	adds	r3, #80	; 0x50
 80068ac:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	4413      	add	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3714      	adds	r7, #20
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d101      	bne.n	80068de <HAL_RTCEx_EnableBypassShadow+0x16>
 80068da:	2302      	movs	r3, #2
 80068dc:	e024      	b.n	8006928 <HAL_RTCEx_EnableBypassShadow+0x60>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2202      	movs	r2, #2
 80068ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	22ca      	movs	r2, #202	; 0xca
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2253      	movs	r2, #83	; 0x53
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f042 0220 	orr.w	r2, r2, #32
 800690c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	22ff      	movs	r2, #255	; 0xff
 8006914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800693c:	bf00      	nop
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e095      	b.n	8006a86 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d108      	bne.n	8006974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800696a:	d009      	beq.n	8006980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	61da      	str	r2, [r3, #28]
 8006972:	e005      	b.n	8006980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fb fc2e 	bl	80021fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069c0:	d902      	bls.n	80069c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e002      	b.n	80069ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80069d6:	d007      	beq.n	80069e8 <HAL_SPI_Init+0xa0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069e0:	d002      	beq.n	80069e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80069f8:	431a      	orrs	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	431a      	orrs	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	431a      	orrs	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a16:	431a      	orrs	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a20:	431a      	orrs	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a2a:	ea42 0103 	orr.w	r1, r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a32:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	0c1b      	lsrs	r3, r3, #16
 8006a44:	f003 0204 	and.w	r2, r3, #4
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a56:	f003 0308 	and.w	r3, r3, #8
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a64:	ea42 0103 	orr.w	r1, r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	69db      	ldr	r3, [r3, #28]
 8006a9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d118      	bne.n	8006af2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d013      	beq.n	8006af2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d104      	bne.n	8006ade <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d009      	beq.n	8006af2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f000 81fb 	beq.w	8006ede <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	4798      	blx	r3
      }
      return;
 8006af0:	e1f5      	b.n	8006ede <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80ef 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4b73      	ldr	r3, [pc, #460]	; (8006ccc <HAL_UART_IRQHandler+0x23c>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4b72      	ldr	r3, [pc, #456]	; (8006cd0 <HAL_UART_IRQHandler+0x240>)
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	f000 80e4 	beq.w	8006cd8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d010      	beq.n	8006b3c <HAL_UART_IRQHandler+0xac>
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b32:	f043 0201 	orr.w	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d010      	beq.n	8006b68 <HAL_UART_IRQHandler+0xd8>
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00b      	beq.n	8006b68 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2202      	movs	r2, #2
 8006b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b5e:	f043 0204 	orr.w	r2, r3, #4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d010      	beq.n	8006b94 <HAL_UART_IRQHandler+0x104>
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2204      	movs	r2, #4
 8006b82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8a:	f043 0202 	orr.w	r2, r3, #2
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d015      	beq.n	8006bca <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	f003 0320 	and.w	r3, r3, #32
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d104      	bne.n	8006bb2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4b48      	ldr	r3, [pc, #288]	; (8006ccc <HAL_UART_IRQHandler+0x23c>)
 8006bac:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2208      	movs	r2, #8
 8006bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc0:	f043 0208 	orr.w	r2, r3, #8
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d011      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x168>
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00c      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bee:	f043 0220 	orr.w	r2, r3, #32
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 816f 	beq.w	8006ee2 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d011      	beq.n	8006c32 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d007      	beq.n	8006c32 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c38:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c44:	2b40      	cmp	r3, #64	; 0x40
 8006c46:	d004      	beq.n	8006c52 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d031      	beq.n	8006cb6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f966 	bl	8006f24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c62:	2b40      	cmp	r3, #64	; 0x40
 8006c64:	d123      	bne.n	8006cae <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c74:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d013      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c82:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <HAL_UART_IRQHandler+0x244>)
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fc ffa8 	bl	8003be0 <HAL_DMA_Abort_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d017      	beq.n	8006cc6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ca4:	e00f      	b.n	8006cc6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f926 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cac:	e00b      	b.n	8006cc6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f922 	bl	8006ef8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cb4:	e007      	b.n	8006cc6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f91e 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006cc4:	e10d      	b.n	8006ee2 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc6:	bf00      	nop
    return;
 8006cc8:	e10b      	b.n	8006ee2 <HAL_UART_IRQHandler+0x452>
 8006cca:	bf00      	nop
 8006ccc:	10000001 	.word	0x10000001
 8006cd0:	04000120 	.word	0x04000120
 8006cd4:	08006f89 	.word	0x08006f89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	f040 80ab 	bne.w	8006e38 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	f003 0310 	and.w	r3, r3, #16
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 80a5 	beq.w	8006e38 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	f003 0310 	and.w	r3, r3, #16
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 809f 	beq.w	8006e38 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0c:	2b40      	cmp	r3, #64	; 0x40
 8006d0e:	d155      	bne.n	8006dbc <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006d1a:	893b      	ldrh	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 80e2 	beq.w	8006ee6 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d28:	893a      	ldrh	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	f080 80db 	bcs.w	8006ee6 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	893a      	ldrh	r2, [r7, #8]
 8006d34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0320 	and.w	r3, r3, #32
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d12b      	bne.n	8006da0 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d56:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	689a      	ldr	r2, [r3, #8]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0201 	bic.w	r2, r2, #1
 8006d66:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d76:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f022 0210 	bic.w	r2, r2, #16
 8006d94:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fc fec1 	bl	8003b22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f8a9 	bl	8006f0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006dba:	e094      	b.n	8006ee6 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 8087 	beq.w	8006eea <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8006ddc:	897b      	ldrh	r3, [r7, #10]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 8083 	beq.w	8006eea <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006df2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6812      	ldr	r2, [r2, #0]
 8006dfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0210 	bic.w	r2, r2, #16
 8006e2a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e2c:	897b      	ldrh	r3, [r7, #10]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f86b 	bl	8006f0c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e36:	e058      	b.n	8006eea <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00d      	beq.n	8006e5e <HAL_UART_IRQHandler+0x3ce>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f8c6 	bl	8006fe8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e5c:	e048      	b.n	8006ef0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d012      	beq.n	8006e8e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d104      	bne.n	8006e7c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d034      	beq.n	8006eee <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
    }
    return;
 8006e8c:	e02f      	b.n	8006eee <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d008      	beq.n	8006eaa <HAL_UART_IRQHandler+0x41a>
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f886 	bl	8006fb4 <UART_EndTransmit_IT>
    return;
 8006ea8:	e022      	b.n	8006ef0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d008      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x436>
 8006eb4:	69bb      	ldr	r3, [r7, #24]
 8006eb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f8a6 	bl	8007010 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ec4:	e014      	b.n	8006ef0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00f      	beq.n	8006ef0 <HAL_UART_IRQHandler+0x460>
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	da0c      	bge.n	8006ef0 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f890 	bl	8006ffc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006edc:	e008      	b.n	8006ef0 <HAL_UART_IRQHandler+0x460>
      return;
 8006ede:	bf00      	nop
 8006ee0:	e006      	b.n	8006ef0 <HAL_UART_IRQHandler+0x460>
    return;
 8006ee2:	bf00      	nop
 8006ee4:	e004      	b.n	8006ef0 <HAL_UART_IRQHandler+0x460>
      return;
 8006ee6:	bf00      	nop
 8006ee8:	e002      	b.n	8006ef0 <HAL_UART_IRQHandler+0x460>
      return;
 8006eea:	bf00      	nop
 8006eec:	e000      	b.n	8006ef0 <HAL_UART_IRQHandler+0x460>
    return;
 8006eee:	bf00      	nop
  }
}
 8006ef0:	3720      	adds	r7, #32
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop

08006ef8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f18:	bf00      	nop
 8006f1a:	370c      	adds	r7, #12
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f3a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6812      	ldr	r2, [r2, #0]
 8006f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f4a:	f023 0301 	bic.w	r3, r3, #1
 8006f4e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d107      	bne.n	8006f68 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f022 0210 	bic.w	r2, r2, #16
 8006f66:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff ffa6 	bl	8006ef8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fac:	bf00      	nop
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fca:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f7fa fa6e 	bl	80014bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ff0:	bf00      	nop
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800702e:	f107 0308 	add.w	r3, r7, #8
 8007032:	2218      	movs	r2, #24
 8007034:	2100      	movs	r1, #0
 8007036:	4618      	mov	r0, r3
 8007038:	f001 fa00 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 800703c:	233f      	movs	r3, #63	; 0x3f
 800703e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007040:	2381      	movs	r3, #129	; 0x81
 8007042:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007044:	1dfb      	adds	r3, r7, #7
 8007046:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007048:	2301      	movs	r3, #1
 800704a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800704c:	f107 0308 	add.w	r3, r7, #8
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f001 f8b6 	bl	80081c4 <hci_send_req>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	da01      	bge.n	8007062 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800705e:	23ff      	movs	r3, #255	; 0xff
 8007060:	e000      	b.n	8007064 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007062:	79fb      	ldrb	r3, [r7, #7]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800706c:	b5b0      	push	{r4, r5, r7, lr}
 800706e:	b0ce      	sub	sp, #312	; 0x138
 8007070:	af00      	add	r7, sp, #0
 8007072:	4605      	mov	r5, r0
 8007074:	460c      	mov	r4, r1
 8007076:	4610      	mov	r0, r2
 8007078:	4619      	mov	r1, r3
 800707a:	1dfb      	adds	r3, r7, #7
 800707c:	462a      	mov	r2, r5
 800707e:	701a      	strb	r2, [r3, #0]
 8007080:	1d3b      	adds	r3, r7, #4
 8007082:	4622      	mov	r2, r4
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	1cbb      	adds	r3, r7, #2
 8007088:	4602      	mov	r2, r0
 800708a:	801a      	strh	r2, [r3, #0]
 800708c:	1dbb      	adds	r3, r7, #6
 800708e:	460a      	mov	r2, r1
 8007090:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8007092:	f107 0310 	add.w	r3, r7, #16
 8007096:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800709a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800709e:	3308      	adds	r3, #8
 80070a0:	f107 0210 	add.w	r2, r7, #16
 80070a4:	4413      	add	r3, r2
 80070a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80070aa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80070ae:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80070b2:	4413      	add	r3, r2
 80070b4:	3309      	adds	r3, #9
 80070b6:	f107 0210 	add.w	r2, r7, #16
 80070ba:	4413      	add	r3, r2
 80070bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80070c0:	f107 030f 	add.w	r3, r7, #15
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80070ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070d2:	1dfa      	adds	r2, r7, #7
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070dc:	3301      	adds	r3, #1
 80070de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80070e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070e6:	1d3a      	adds	r2, r7, #4
 80070e8:	8812      	ldrh	r2, [r2, #0]
 80070ea:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80070ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070f2:	3302      	adds	r3, #2
 80070f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80070f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070fc:	1cba      	adds	r2, r7, #2
 80070fe:	8812      	ldrh	r2, [r2, #0]
 8007100:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007108:	3302      	adds	r3, #2
 800710a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800710e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007112:	1dba      	adds	r2, r7, #6
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800711c:	3301      	adds	r3, #1
 800711e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007122:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007126:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800712a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800712c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007130:	3301      	adds	r3, #1
 8007132:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007136:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800713a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800713e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007140:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007144:	3301      	adds	r3, #1
 8007146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800714a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800714e:	3308      	adds	r3, #8
 8007150:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007154:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007158:	4618      	mov	r0, r3
 800715a:	f001 f95f 	bl	800841c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800715e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007162:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007166:	4413      	add	r3, r2
 8007168:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800716c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007170:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007174:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007176:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800717a:	3301      	adds	r3, #1
 800717c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007180:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007184:	3301      	adds	r3, #1
 8007186:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800718a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800718e:	4618      	mov	r0, r3
 8007190:	f001 f944 	bl	800841c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8007194:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007198:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800719c:	4413      	add	r3, r2
 800719e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80071a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80071aa:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80071ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071b0:	3302      	adds	r3, #2
 80071b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80071b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ba:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80071be:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80071c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071c4:	3302      	adds	r3, #2
 80071c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071ce:	2218      	movs	r2, #24
 80071d0:	2100      	movs	r1, #0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f001 f932 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 80071d8:	233f      	movs	r3, #63	; 0x3f
 80071da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80071de:	2383      	movs	r3, #131	; 0x83
 80071e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80071e4:	f107 0310 	add.w	r3, r7, #16
 80071e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80071ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80071f4:	f107 030f 	add.w	r3, r7, #15
 80071f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007202:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f000 ffdb 	bl	80081c4 <hci_send_req>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	da01      	bge.n	8007218 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007214:	23ff      	movs	r3, #255	; 0xff
 8007216:	e002      	b.n	800721e <aci_gap_set_discoverable+0x1b2>
  return status;
 8007218:	f107 030f 	add.w	r3, r7, #15
 800721c:	781b      	ldrb	r3, [r3, #0]
}
 800721e:	4618      	mov	r0, r3
 8007220:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007224:	46bd      	mov	sp, r7
 8007226:	bdb0      	pop	{r4, r5, r7, pc}

08007228 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b0cc      	sub	sp, #304	; 0x130
 800722c:	af00      	add	r7, sp, #0
 800722e:	4602      	mov	r2, r0
 8007230:	1dfb      	adds	r3, r7, #7
 8007232:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007234:	f107 0310 	add.w	r3, r7, #16
 8007238:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800723c:	f107 030f 	add.w	r3, r7, #15
 8007240:	2200      	movs	r2, #0
 8007242:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007244:	2300      	movs	r3, #0
 8007246:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800724a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800724e:	1dfa      	adds	r2, r7, #7
 8007250:	7812      	ldrb	r2, [r2, #0]
 8007252:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007254:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007258:	3301      	adds	r3, #1
 800725a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800725e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007262:	2218      	movs	r2, #24
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f001 f8e8 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 800726c:	233f      	movs	r3, #63	; 0x3f
 800726e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8007272:	2385      	movs	r3, #133	; 0x85
 8007274:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007278:	f107 0310 	add.w	r3, r7, #16
 800727c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007280:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007284:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007288:	f107 030f 	add.w	r3, r7, #15
 800728c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007290:	2301      	movs	r3, #1
 8007292:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007296:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800729a:	2100      	movs	r1, #0
 800729c:	4618      	mov	r0, r3
 800729e:	f000 ff91 	bl	80081c4 <hci_send_req>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da01      	bge.n	80072ac <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80072a8:	23ff      	movs	r3, #255	; 0xff
 80072aa:	e002      	b.n	80072b2 <aci_gap_set_io_capability+0x8a>
  return status;
 80072ac:	f107 030f 	add.w	r3, r7, #15
 80072b0:	781b      	ldrb	r3, [r3, #0]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80072bc:	b5b0      	push	{r4, r5, r7, lr}
 80072be:	b0cc      	sub	sp, #304	; 0x130
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4605      	mov	r5, r0
 80072c4:	460c      	mov	r4, r1
 80072c6:	4610      	mov	r0, r2
 80072c8:	4619      	mov	r1, r3
 80072ca:	1dfb      	adds	r3, r7, #7
 80072cc:	462a      	mov	r2, r5
 80072ce:	701a      	strb	r2, [r3, #0]
 80072d0:	1dbb      	adds	r3, r7, #6
 80072d2:	4622      	mov	r2, r4
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	1d7b      	adds	r3, r7, #5
 80072d8:	4602      	mov	r2, r0
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	1d3b      	adds	r3, r7, #4
 80072de:	460a      	mov	r2, r1
 80072e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80072e2:	f107 0310 	add.w	r3, r7, #16
 80072e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80072ea:	f107 030f 	add.w	r3, r7, #15
 80072ee:	2200      	movs	r2, #0
 80072f0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80072f2:	2300      	movs	r3, #0
 80072f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80072f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fc:	1dfa      	adds	r2, r7, #7
 80072fe:	7812      	ldrb	r2, [r2, #0]
 8007300:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007302:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007306:	3301      	adds	r3, #1
 8007308:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800730c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007310:	1dba      	adds	r2, r7, #6
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007316:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800731a:	3301      	adds	r3, #1
 800731c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007324:	1d7a      	adds	r2, r7, #5
 8007326:	7812      	ldrb	r2, [r2, #0]
 8007328:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800732a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800732e:	3301      	adds	r3, #1
 8007330:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007338:	1d3a      	adds	r2, r7, #4
 800733a:	7812      	ldrb	r2, [r2, #0]
 800733c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800733e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007342:	3301      	adds	r3, #1
 8007344:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800734c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007350:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007352:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007356:	3301      	adds	r3, #1
 8007358:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800735c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007360:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007364:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800736a:	3301      	adds	r3, #1
 800736c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007374:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007378:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800737a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800737e:	3301      	adds	r3, #1
 8007380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8007384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007388:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800738c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007394:	3304      	adds	r3, #4
 8007396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800739a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80073a2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80073a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073a8:	3301      	adds	r3, #1
 80073aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073b2:	2218      	movs	r2, #24
 80073b4:	2100      	movs	r1, #0
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 f840 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 80073bc:	233f      	movs	r3, #63	; 0x3f
 80073be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80073c2:	2386      	movs	r3, #134	; 0x86
 80073c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073c8:	f107 0310 	add.w	r3, r7, #16
 80073cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80073d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80073d8:	f107 030f 	add.w	r3, r7, #15
 80073dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80073e0:	2301      	movs	r3, #1
 80073e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073ea:	2100      	movs	r1, #0
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fee9 	bl	80081c4 <hci_send_req>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	da01      	bge.n	80073fc <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 80073f8:	23ff      	movs	r3, #255	; 0xff
 80073fa:	e002      	b.n	8007402 <aci_gap_set_authentication_requirement+0x146>
  return status;
 80073fc:	f107 030f 	add.w	r3, r7, #15
 8007400:	781b      	ldrb	r3, [r3, #0]
}
 8007402:	4618      	mov	r0, r3
 8007404:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007408:	46bd      	mov	sp, r7
 800740a:	bdb0      	pop	{r4, r5, r7, pc}

0800740c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800740c:	b590      	push	{r4, r7, lr}
 800740e:	b0cd      	sub	sp, #308	; 0x134
 8007410:	af00      	add	r7, sp, #0
 8007412:	4604      	mov	r4, r0
 8007414:	4608      	mov	r0, r1
 8007416:	4611      	mov	r1, r2
 8007418:	463a      	mov	r2, r7
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	1dfb      	adds	r3, r7, #7
 800741e:	4622      	mov	r2, r4
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	1dbb      	adds	r3, r7, #6
 8007424:	4602      	mov	r2, r0
 8007426:	701a      	strb	r2, [r3, #0]
 8007428:	1d7b      	adds	r3, r7, #5
 800742a:	460a      	mov	r2, r1
 800742c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800742e:	f107 0310 	add.w	r3, r7, #16
 8007432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007436:	f107 0308 	add.w	r3, r7, #8
 800743a:	2207      	movs	r2, #7
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f000 fffc 	bl	800843c <Osal_MemSet>
  int index_input = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800744a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744e:	1dfa      	adds	r2, r7, #7
 8007450:	7812      	ldrb	r2, [r2, #0]
 8007452:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007458:	3301      	adds	r3, #1
 800745a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800745e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007462:	1dba      	adds	r2, r7, #6
 8007464:	7812      	ldrb	r2, [r2, #0]
 8007466:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007468:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800746c:	3301      	adds	r3, #1
 800746e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8007472:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007476:	1d7a      	adds	r2, r7, #5
 8007478:	7812      	ldrb	r2, [r2, #0]
 800747a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800747c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007480:	3301      	adds	r3, #1
 8007482:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007486:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800748a:	2218      	movs	r2, #24
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f000 ffd4 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007494:	233f      	movs	r3, #63	; 0x3f
 8007496:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800749a:	238a      	movs	r3, #138	; 0x8a
 800749c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074a0:	f107 0310 	add.w	r3, r7, #16
 80074a4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80074b0:	f107 0308 	add.w	r3, r7, #8
 80074b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80074b8:	2307      	movs	r3, #7
 80074ba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074c2:	2100      	movs	r1, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 fe7d 	bl	80081c4 <hci_send_req>
 80074ca:	4603      	mov	r3, r0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	da01      	bge.n	80074d4 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80074d0:	23ff      	movs	r3, #255	; 0xff
 80074d2:	e021      	b.n	8007518 <aci_gap_init+0x10c>
  if ( resp.Status )
 80074d4:	f107 0308 	add.w	r3, r7, #8
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <aci_gap_init+0xda>
    return resp.Status;
 80074de:	f107 0308 	add.w	r3, r7, #8
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	e018      	b.n	8007518 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 80074e6:	f107 0308 	add.w	r3, r7, #8
 80074ea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	463b      	mov	r3, r7
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80074f6:	f107 0308 	add.w	r3, r7, #8
 80074fa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80074fe:	b29a      	uxth	r2, r3
 8007500:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007504:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007506:	f107 0308 	add.w	r3, r7, #8
 800750a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800750e:	b29a      	uxth	r2, r3
 8007510:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007514:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800751e:	46bd      	mov	sp, r7
 8007520:	bd90      	pop	{r4, r7, pc}

08007522 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b0cc      	sub	sp, #304	; 0x130
 8007526:	af00      	add	r7, sp, #0
 8007528:	4602      	mov	r2, r0
 800752a:	463b      	mov	r3, r7
 800752c:	6019      	str	r1, [r3, #0]
 800752e:	1dfb      	adds	r3, r7, #7
 8007530:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007532:	f107 0310 	add.w	r3, r7, #16
 8007536:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800753a:	f107 030f 	add.w	r3, r7, #15
 800753e:	2200      	movs	r2, #0
 8007540:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007542:	2300      	movs	r3, #0
 8007544:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800754c:	1dfa      	adds	r2, r7, #7
 800754e:	7812      	ldrb	r2, [r2, #0]
 8007550:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007556:	3301      	adds	r3, #1
 8007558:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800755c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007560:	1c58      	adds	r0, r3, #1
 8007562:	1dfb      	adds	r3, r7, #7
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	463b      	mov	r3, r7
 8007568:	6819      	ldr	r1, [r3, #0]
 800756a:	f000 ff57 	bl	800841c <Osal_MemCpy>
  index_input += AdvDataLen;
 800756e:	1dfb      	adds	r3, r7, #7
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007576:	4413      	add	r3, r2
 8007578:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800757c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007580:	2218      	movs	r2, #24
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f000 ff59 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 800758a:	233f      	movs	r3, #63	; 0x3f
 800758c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007590:	238e      	movs	r3, #142	; 0x8e
 8007592:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007596:	f107 0310 	add.w	r3, r7, #16
 800759a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800759e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80075a6:	f107 030f 	add.w	r3, r7, #15
 80075aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075b8:	2100      	movs	r1, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 fe02 	bl	80081c4 <hci_send_req>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	da01      	bge.n	80075ca <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80075c6:	23ff      	movs	r3, #255	; 0xff
 80075c8:	e002      	b.n	80075d0 <aci_gap_update_adv_data+0xae>
  return status;
 80075ca:	f107 030f 	add.w	r3, r7, #15
 80075ce:	781b      	ldrb	r3, [r3, #0]
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b088      	sub	sp, #32
 80075de:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075e4:	f107 0308 	add.w	r3, r7, #8
 80075e8:	2218      	movs	r2, #24
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 ff25 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 80075f2:	233f      	movs	r3, #63	; 0x3f
 80075f4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80075f6:	2392      	movs	r3, #146	; 0x92
 80075f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80075fa:	1dfb      	adds	r3, r7, #7
 80075fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80075fe:	2301      	movs	r3, #1
 8007600:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007602:	f107 0308 	add.w	r3, r7, #8
 8007606:	2100      	movs	r1, #0
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fddb 	bl	80081c4 <hci_send_req>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	da01      	bge.n	8007618 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007614:	23ff      	movs	r3, #255	; 0xff
 8007616:	e000      	b.n	800761a <aci_gap_configure_whitelist+0x40>
  return status;
 8007618:	79fb      	ldrb	r3, [r7, #7]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b0cc      	sub	sp, #304	; 0x130
 8007626:	af00      	add	r7, sp, #0
 8007628:	4602      	mov	r2, r0
 800762a:	1dbb      	adds	r3, r7, #6
 800762c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800762e:	f107 0310 	add.w	r3, r7, #16
 8007632:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007636:	f107 030f 	add.w	r3, r7, #15
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800763e:	2300      	movs	r3, #0
 8007640:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007648:	1dba      	adds	r2, r7, #6
 800764a:	8812      	ldrh	r2, [r2, #0]
 800764c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800764e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007652:	3302      	adds	r3, #2
 8007654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007658:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800765c:	2218      	movs	r2, #24
 800765e:	2100      	movs	r1, #0
 8007660:	4618      	mov	r0, r3
 8007662:	f000 feeb 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007666:	233f      	movs	r3, #63	; 0x3f
 8007668:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800766c:	2395      	movs	r3, #149	; 0x95
 800766e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007672:	f107 0310 	add.w	r3, r7, #16
 8007676:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800767a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800767e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007682:	f107 030f 	add.w	r3, r7, #15
 8007686:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800768a:	2301      	movs	r3, #1
 800768c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007690:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007694:	2100      	movs	r1, #0
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fd94 	bl	80081c4 <hci_send_req>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	da01      	bge.n	80076a6 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 80076a2:	23ff      	movs	r3, #255	; 0xff
 80076a4:	e002      	b.n	80076ac <aci_gap_allow_rebond+0x8a>
  return status;
 80076a6:	f107 030f 	add.w	r3, r7, #15
 80076aa:	781b      	ldrb	r3, [r3, #0]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b0cc      	sub	sp, #304	; 0x130
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	4602      	mov	r2, r0
 80076be:	1dbb      	adds	r3, r7, #6
 80076c0:	801a      	strh	r2, [r3, #0]
 80076c2:	1d7b      	adds	r3, r7, #5
 80076c4:	460a      	mov	r2, r1
 80076c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80076c8:	f107 0310 	add.w	r3, r7, #16
 80076cc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80076d0:	f107 030f 	add.w	r3, r7, #15
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80076d8:	2300      	movs	r3, #0
 80076da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80076de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076e2:	1dba      	adds	r2, r7, #6
 80076e4:	8812      	ldrh	r2, [r2, #0]
 80076e6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80076e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ec:	3302      	adds	r3, #2
 80076ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80076f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f6:	1d7a      	adds	r2, r7, #5
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80076fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007700:	3301      	adds	r3, #1
 8007702:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007706:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800770a:	2218      	movs	r2, #24
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fe94 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007714:	233f      	movs	r3, #63	; 0x3f
 8007716:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800771a:	23a5      	movs	r3, #165	; 0xa5
 800771c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007720:	f107 0310 	add.w	r3, r7, #16
 8007724:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007728:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800772c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007730:	f107 030f 	add.w	r3, r7, #15
 8007734:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007738:	2301      	movs	r3, #1
 800773a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800773e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007742:	2100      	movs	r1, #0
 8007744:	4618      	mov	r0, r3
 8007746:	f000 fd3d 	bl	80081c4 <hci_send_req>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	da01      	bge.n	8007754 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007750:	23ff      	movs	r3, #255	; 0xff
 8007752:	e002      	b.n	800775a <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8007754:	f107 030f 	add.w	r3, r7, #15
 8007758:	781b      	ldrb	r3, [r3, #0]
}
 800775a:	4618      	mov	r0, r3
 800775c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800776e:	f107 0308 	add.w	r3, r7, #8
 8007772:	2218      	movs	r2, #24
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fe60 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 800777c:	233f      	movs	r3, #63	; 0x3f
 800777e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007780:	f240 1301 	movw	r3, #257	; 0x101
 8007784:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007786:	1dfb      	adds	r3, r7, #7
 8007788:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800778a:	2301      	movs	r3, #1
 800778c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800778e:	f107 0308 	add.w	r3, r7, #8
 8007792:	2100      	movs	r1, #0
 8007794:	4618      	mov	r0, r3
 8007796:	f000 fd15 	bl	80081c4 <hci_send_req>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	da01      	bge.n	80077a4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80077a0:	23ff      	movs	r3, #255	; 0xff
 80077a2:	e000      	b.n	80077a6 <aci_gatt_init+0x42>
  return status;
 80077a4:	79fb      	ldrb	r3, [r7, #7]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3720      	adds	r7, #32
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80077ae:	b590      	push	{r4, r7, lr}
 80077b0:	b0cf      	sub	sp, #316	; 0x13c
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	4604      	mov	r4, r0
 80077b6:	4638      	mov	r0, r7
 80077b8:	6001      	str	r1, [r0, #0]
 80077ba:	4610      	mov	r0, r2
 80077bc:	4619      	mov	r1, r3
 80077be:	1dfb      	adds	r3, r7, #7
 80077c0:	4622      	mov	r2, r4
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	1dbb      	adds	r3, r7, #6
 80077c6:	4602      	mov	r2, r0
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	1d7b      	adds	r3, r7, #5
 80077cc:	460a      	mov	r2, r1
 80077ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80077d0:	f107 0310 	add.w	r3, r7, #16
 80077d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80077d8:	1dfb      	adds	r3, r7, #7
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d007      	beq.n	80077f0 <aci_gatt_add_service+0x42>
 80077e0:	1dfb      	adds	r3, r7, #7
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d101      	bne.n	80077ec <aci_gatt_add_service+0x3e>
 80077e8:	2311      	movs	r3, #17
 80077ea:	e002      	b.n	80077f2 <aci_gatt_add_service+0x44>
 80077ec:	2301      	movs	r3, #1
 80077ee:	e000      	b.n	80077f2 <aci_gatt_add_service+0x44>
 80077f0:	2303      	movs	r3, #3
 80077f2:	f107 0210 	add.w	r2, r7, #16
 80077f6:	4413      	add	r3, r2
 80077f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80077fc:	f107 030c 	add.w	r3, r7, #12
 8007800:	2203      	movs	r2, #3
 8007802:	2100      	movs	r1, #0
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fe19 	bl	800843c <Osal_MemSet>
  int index_input = 0;
 800780a:	2300      	movs	r3, #0
 800780c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007810:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007814:	1dfa      	adds	r2, r7, #7
 8007816:	7812      	ldrb	r2, [r2, #0]
 8007818:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800781a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800781e:	3301      	adds	r3, #1
 8007820:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007824:	1dfb      	adds	r3, r7, #7
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d002      	beq.n	8007832 <aci_gatt_add_service+0x84>
 800782c:	2b02      	cmp	r3, #2
 800782e:	d004      	beq.n	800783a <aci_gatt_add_service+0x8c>
 8007830:	e007      	b.n	8007842 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007832:	2302      	movs	r3, #2
 8007834:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007838:	e005      	b.n	8007846 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800783a:	2310      	movs	r3, #16
 800783c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007840:	e001      	b.n	8007846 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007842:	2347      	movs	r3, #71	; 0x47
 8007844:	e05d      	b.n	8007902 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007846:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800784a:	1c58      	adds	r0, r3, #1
 800784c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007850:	463b      	mov	r3, r7
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	f000 fde2 	bl	800841c <Osal_MemCpy>
    index_input += size;
 8007858:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800785c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007860:	4413      	add	r3, r2
 8007862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786a:	1dba      	adds	r2, r7, #6
 800786c:	7812      	ldrb	r2, [r2, #0]
 800786e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007870:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007874:	3301      	adds	r3, #1
 8007876:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800787a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800787e:	1d7a      	adds	r2, r7, #5
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007888:	3301      	adds	r3, #1
 800788a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800788e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007892:	2218      	movs	r2, #24
 8007894:	2100      	movs	r1, #0
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fdd0 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 800789c:	233f      	movs	r3, #63	; 0x3f
 800789e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80078a2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80078a6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078aa:	f107 0310 	add.w	r3, r7, #16
 80078ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80078ba:	f107 030c 	add.w	r3, r7, #12
 80078be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80078c2:	2303      	movs	r3, #3
 80078c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078cc:	2100      	movs	r1, #0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 fc78 	bl	80081c4 <hci_send_req>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	da01      	bge.n	80078de <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80078da:	23ff      	movs	r3, #255	; 0xff
 80078dc:	e011      	b.n	8007902 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80078de:	f107 030c 	add.w	r3, r7, #12
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <aci_gatt_add_service+0x142>
    return resp.Status;
 80078e8:	f107 030c 	add.w	r3, r7, #12
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	e008      	b.n	8007902 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80078f0:	f107 030c 	add.w	r3, r7, #12
 80078f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80078fe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007908:	46bd      	mov	sp, r7
 800790a:	bd90      	pop	{r4, r7, pc}

0800790c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800790c:	b590      	push	{r4, r7, lr}
 800790e:	b0d1      	sub	sp, #324	; 0x144
 8007910:	af00      	add	r7, sp, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	f107 0108 	add.w	r1, r7, #8
 800791a:	600a      	str	r2, [r1, #0]
 800791c:	4619      	mov	r1, r3
 800791e:	f107 030e 	add.w	r3, r7, #14
 8007922:	4622      	mov	r2, r4
 8007924:	801a      	strh	r2, [r3, #0]
 8007926:	f107 030d 	add.w	r3, r7, #13
 800792a:	4602      	mov	r2, r0
 800792c:	701a      	strb	r2, [r3, #0]
 800792e:	1dbb      	adds	r3, r7, #6
 8007930:	460a      	mov	r2, r1
 8007932:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007934:	f107 0318 	add.w	r3, r7, #24
 8007938:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800793c:	f107 030d 	add.w	r3, r7, #13
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d008      	beq.n	8007958 <aci_gatt_add_char+0x4c>
 8007946:	f107 030d 	add.w	r3, r7, #13
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d101      	bne.n	8007954 <aci_gatt_add_char+0x48>
 8007950:	2313      	movs	r3, #19
 8007952:	e002      	b.n	800795a <aci_gatt_add_char+0x4e>
 8007954:	2303      	movs	r3, #3
 8007956:	e000      	b.n	800795a <aci_gatt_add_char+0x4e>
 8007958:	2305      	movs	r3, #5
 800795a:	f107 0218 	add.w	r2, r7, #24
 800795e:	4413      	add	r3, r2
 8007960:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007964:	f107 0314 	add.w	r3, r7, #20
 8007968:	2203      	movs	r2, #3
 800796a:	2100      	movs	r1, #0
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fd65 	bl	800843c <Osal_MemSet>
  int index_input = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007978:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800797c:	f107 020e 	add.w	r2, r7, #14
 8007980:	8812      	ldrh	r2, [r2, #0]
 8007982:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007984:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007988:	3302      	adds	r3, #2
 800798a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800798e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007992:	f107 020d 	add.w	r2, r7, #13
 8007996:	7812      	ldrb	r2, [r2, #0]
 8007998:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800799a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800799e:	3301      	adds	r3, #1
 80079a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80079a4:	f107 030d 	add.w	r3, r7, #13
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d002      	beq.n	80079b4 <aci_gatt_add_char+0xa8>
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d004      	beq.n	80079bc <aci_gatt_add_char+0xb0>
 80079b2:	e007      	b.n	80079c4 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80079b4:	2302      	movs	r3, #2
 80079b6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80079ba:	e005      	b.n	80079c8 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80079bc:	2310      	movs	r3, #16
 80079be:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80079c2:	e001      	b.n	80079c8 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80079c4:	2347      	movs	r3, #71	; 0x47
 80079c6:	e086      	b.n	8007ad6 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80079c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80079cc:	1cd8      	adds	r0, r3, #3
 80079ce:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80079d2:	f107 0308 	add.w	r3, r7, #8
 80079d6:	6819      	ldr	r1, [r3, #0]
 80079d8:	f000 fd20 	bl	800841c <Osal_MemCpy>
    index_input += size;
 80079dc:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80079e0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80079e4:	4413      	add	r3, r2
 80079e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80079ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079ee:	1dba      	adds	r2, r7, #6
 80079f0:	8812      	ldrh	r2, [r2, #0]
 80079f2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80079f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079f8:	3302      	adds	r3, #2
 80079fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80079fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a02:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007a06:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007a08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007a12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a16:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a1a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007a1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a20:	3301      	adds	r3, #1
 8007a22:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007a26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a2a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007a2e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007a30:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a34:	3301      	adds	r3, #1
 8007a36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007a3a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a3e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007a42:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007a44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a48:	3301      	adds	r3, #1
 8007a4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007a4e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a52:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007a56:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007a58:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a62:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a66:	2218      	movs	r2, #24
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fce6 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a70:	233f      	movs	r3, #63	; 0x3f
 8007a72:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007a76:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007a7a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007a7e:	f107 0318 	add.w	r3, r7, #24
 8007a82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007a86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007a8e:	f107 0314 	add.w	r3, r7, #20
 8007a92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007a96:	2303      	movs	r3, #3
 8007a98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fb8e 	bl	80081c4 <hci_send_req>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	da01      	bge.n	8007ab2 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8007aae:	23ff      	movs	r3, #255	; 0xff
 8007ab0:	e011      	b.n	8007ad6 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8007ab2:	f107 0314 	add.w	r3, r7, #20
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8007abc:	f107 0314 	add.w	r3, r7, #20
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	e008      	b.n	8007ad6 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007ad2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd90      	pop	{r4, r7, pc}

08007ae0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007ae0:	b5b0      	push	{r4, r5, r7, lr}
 8007ae2:	b0cc      	sub	sp, #304	; 0x130
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	460c      	mov	r4, r1
 8007aea:	4610      	mov	r0, r2
 8007aec:	4619      	mov	r1, r3
 8007aee:	1dbb      	adds	r3, r7, #6
 8007af0:	462a      	mov	r2, r5
 8007af2:	801a      	strh	r2, [r3, #0]
 8007af4:	1d3b      	adds	r3, r7, #4
 8007af6:	4622      	mov	r2, r4
 8007af8:	801a      	strh	r2, [r3, #0]
 8007afa:	1cfb      	adds	r3, r7, #3
 8007afc:	4602      	mov	r2, r0
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	1cbb      	adds	r3, r7, #2
 8007b02:	460a      	mov	r2, r1
 8007b04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007b06:	f107 0310 	add.w	r3, r7, #16
 8007b0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b0e:	f107 030f 	add.w	r3, r7, #15
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b20:	1dba      	adds	r2, r7, #6
 8007b22:	8812      	ldrh	r2, [r2, #0]
 8007b24:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b2a:	3302      	adds	r3, #2
 8007b2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b34:	1d3a      	adds	r2, r7, #4
 8007b36:	8812      	ldrh	r2, [r2, #0]
 8007b38:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b3e:	3302      	adds	r3, #2
 8007b40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b48:	1cfa      	adds	r2, r7, #3
 8007b4a:	7812      	ldrb	r2, [r2, #0]
 8007b4c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007b4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b52:	3301      	adds	r3, #1
 8007b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007b58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b5c:	1cba      	adds	r2, r7, #2
 8007b5e:	7812      	ldrb	r2, [r2, #0]
 8007b60:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007b62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b66:	3301      	adds	r3, #1
 8007b68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007b6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b70:	1d98      	adds	r0, r3, #6
 8007b72:	1cbb      	adds	r3, r7, #2
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007b7c:	f000 fc4e 	bl	800841c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007b80:	1cbb      	adds	r3, r7, #2
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007b88:	4413      	add	r3, r2
 8007b8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b92:	2218      	movs	r2, #24
 8007b94:	2100      	movs	r1, #0
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fc50 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b9c:	233f      	movs	r3, #63	; 0x3f
 8007b9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007ba2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007ba6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007baa:	f107 0310 	add.w	r3, r7, #16
 8007bae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007bb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007bba:	f107 030f 	add.w	r3, r7, #15
 8007bbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bcc:	2100      	movs	r1, #0
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 faf8 	bl	80081c4 <hci_send_req>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	da01      	bge.n	8007bde <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8007bda:	23ff      	movs	r3, #255	; 0xff
 8007bdc:	e002      	b.n	8007be4 <aci_gatt_update_char_value+0x104>
  return status;
 8007bde:	f107 030f 	add.w	r3, r7, #15
 8007be2:	781b      	ldrb	r3, [r3, #0]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bdb0      	pop	{r4, r5, r7, pc}

08007bee <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b0cc      	sub	sp, #304	; 0x130
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	601a      	str	r2, [r3, #0]
 8007bf8:	1dfb      	adds	r3, r7, #7
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	701a      	strb	r2, [r3, #0]
 8007bfe:	1dbb      	adds	r3, r7, #6
 8007c00:	460a      	mov	r2, r1
 8007c02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007c04:	f107 0310 	add.w	r3, r7, #16
 8007c08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c0c:	f107 030f 	add.w	r3, r7, #15
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1e:	1dfa      	adds	r2, r7, #7
 8007c20:	7812      	ldrb	r2, [r2, #0]
 8007c22:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c28:	3301      	adds	r3, #1
 8007c2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c32:	1dba      	adds	r2, r7, #6
 8007c34:	7812      	ldrb	r2, [r2, #0]
 8007c36:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007c42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c46:	1c98      	adds	r0, r3, #2
 8007c48:	1dbb      	adds	r3, r7, #6
 8007c4a:	781a      	ldrb	r2, [r3, #0]
 8007c4c:	463b      	mov	r3, r7
 8007c4e:	6819      	ldr	r1, [r3, #0]
 8007c50:	f000 fbe4 	bl	800841c <Osal_MemCpy>
  index_input += Length;
 8007c54:	1dbb      	adds	r3, r7, #6
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c5c:	4413      	add	r3, r2
 8007c5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c66:	2218      	movs	r2, #24
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fbe6 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c70:	233f      	movs	r3, #63	; 0x3f
 8007c72:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007c76:	230c      	movs	r3, #12
 8007c78:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c7c:	f107 0310 	add.w	r3, r7, #16
 8007c80:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c8c:	f107 030f 	add.w	r3, r7, #15
 8007c90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c94:	2301      	movs	r3, #1
 8007c96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c9a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c9e:	2100      	movs	r1, #0
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 fa8f 	bl	80081c4 <hci_send_req>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	da01      	bge.n	8007cb0 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8007cac:	23ff      	movs	r3, #255	; 0xff
 8007cae:	e002      	b.n	8007cb6 <aci_hal_write_config_data+0xc8>
  return status;
 8007cb0:	f107 030f 	add.w	r3, r7, #15
 8007cb4:	781b      	ldrb	r3, [r3, #0]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b0cc      	sub	sp, #304	; 0x130
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	1dfb      	adds	r3, r7, #7
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	1dbb      	adds	r3, r7, #6
 8007cce:	460a      	mov	r2, r1
 8007cd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007cd2:	f107 0310 	add.w	r3, r7, #16
 8007cd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007cda:	f107 030f 	add.w	r3, r7, #15
 8007cde:	2200      	movs	r2, #0
 8007ce0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cec:	1dfa      	adds	r2, r7, #7
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007cf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d00:	1dba      	adds	r2, r7, #6
 8007d02:	7812      	ldrb	r2, [r2, #0]
 8007d04:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d14:	2218      	movs	r2, #24
 8007d16:	2100      	movs	r1, #0
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fb8f 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d1e:	233f      	movs	r3, #63	; 0x3f
 8007d20:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007d24:	230f      	movs	r3, #15
 8007d26:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d2a:	f107 0310 	add.w	r3, r7, #16
 8007d2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d3a:	f107 030f 	add.w	r3, r7, #15
 8007d3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f000 fa38 	bl	80081c4 <hci_send_req>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	da01      	bge.n	8007d5e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007d5a:	23ff      	movs	r3, #255	; 0xff
 8007d5c:	e002      	b.n	8007d64 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8007d5e:	f107 030f 	add.w	r3, r7, #15
 8007d62:	781b      	ldrb	r3, [r3, #0]
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b0cc      	sub	sp, #304	; 0x130
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	4602      	mov	r2, r0
 8007d76:	1dbb      	adds	r3, r7, #6
 8007d78:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007d7a:	f107 0310 	add.w	r3, r7, #16
 8007d7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d82:	f107 030f 	add.w	r3, r7, #15
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d94:	1dba      	adds	r2, r7, #6
 8007d96:	8812      	ldrh	r2, [r2, #0]
 8007d98:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d9e:	3302      	adds	r3, #2
 8007da0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007da4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007da8:	2218      	movs	r2, #24
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fb45 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007db2:	233f      	movs	r3, #63	; 0x3f
 8007db4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007db8:	2318      	movs	r3, #24
 8007dba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007dbe:	f107 0310 	add.w	r3, r7, #16
 8007dc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007dc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007dce:	f107 030f 	add.w	r3, r7, #15
 8007dd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ddc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 f9ee 	bl	80081c4 <hci_send_req>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	da01      	bge.n	8007df2 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8007dee:	23ff      	movs	r3, #255	; 0xff
 8007df0:	e002      	b.n	8007df8 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8007df2:	f107 030f 	add.w	r3, r7, #15
 8007df6:	781b      	ldrb	r3, [r3, #0]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b088      	sub	sp, #32
 8007e06:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e0c:	f107 0308 	add.w	r3, r7, #8
 8007e10:	2218      	movs	r2, #24
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f000 fb11 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x03;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007e22:	1dfb      	adds	r3, r7, #7
 8007e24:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007e26:	2301      	movs	r3, #1
 8007e28:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e2a:	f107 0308 	add.w	r3, r7, #8
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 f9c7 	bl	80081c4 <hci_send_req>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	da01      	bge.n	8007e40 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007e3c:	23ff      	movs	r3, #255	; 0xff
 8007e3e:	e000      	b.n	8007e42 <hci_reset+0x40>
  return status;
 8007e40:	79fb      	ldrb	r3, [r7, #7]
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3720      	adds	r7, #32
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b0ce      	sub	sp, #312	; 0x138
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	f107 0308 	add.w	r3, r7, #8
 8007e54:	6019      	str	r1, [r3, #0]
 8007e56:	1d3b      	adds	r3, r7, #4
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	f107 030e 	add.w	r3, r7, #14
 8007e5e:	4602      	mov	r2, r0
 8007e60:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8007e62:	f107 0318 	add.w	r3, r7, #24
 8007e66:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007e6a:	f107 0310 	add.w	r3, r7, #16
 8007e6e:	2205      	movs	r2, #5
 8007e70:	2100      	movs	r1, #0
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fae2 	bl	800843c <Osal_MemSet>
  int index_input = 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007e7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007e82:	f107 020e 	add.w	r2, r7, #14
 8007e86:	8812      	ldrh	r2, [r2, #0]
 8007e88:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e8a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007e8e:	3302      	adds	r3, #2
 8007e90:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e94:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007e98:	2218      	movs	r2, #24
 8007e9a:	2100      	movs	r1, #0
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 facd 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x08;
 8007ea2:	2308      	movs	r3, #8
 8007ea4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8007ea8:	2330      	movs	r3, #48	; 0x30
 8007eaa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007eae:	f107 0318 	add.w	r3, r7, #24
 8007eb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007eb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007eba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007ebe:	f107 0310 	add.w	r3, r7, #16
 8007ec2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007ec6:	2305      	movs	r3, #5
 8007ec8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ecc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 f976 	bl	80081c4 <hci_send_req>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da01      	bge.n	8007ee2 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8007ede:	23ff      	movs	r3, #255	; 0xff
 8007ee0:	e016      	b.n	8007f10 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8007ee2:	f107 0310 	add.w	r3, r7, #16
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <hci_le_read_phy+0xaa>
    return resp.Status;
 8007eec:	f107 0310 	add.w	r3, r7, #16
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	e00d      	b.n	8007f10 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8007ef4:	f107 0310 	add.w	r3, r7, #16
 8007ef8:	78da      	ldrb	r2, [r3, #3]
 8007efa:	f107 0308 	add.w	r3, r7, #8
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8007f02:	f107 0310 	add.w	r3, r7, #16
 8007f06:	791a      	ldrb	r2, [r3, #4]
 8007f08:	1d3b      	adds	r3, r7, #4
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007f1a:	b590      	push	{r4, r7, lr}
 8007f1c:	b0cd      	sub	sp, #308	; 0x134
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	4604      	mov	r4, r0
 8007f22:	4608      	mov	r0, r1
 8007f24:	4611      	mov	r1, r2
 8007f26:	1dfb      	adds	r3, r7, #7
 8007f28:	4622      	mov	r2, r4
 8007f2a:	701a      	strb	r2, [r3, #0]
 8007f2c:	1dbb      	adds	r3, r7, #6
 8007f2e:	4602      	mov	r2, r0
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	1d7b      	adds	r3, r7, #5
 8007f34:	460a      	mov	r2, r1
 8007f36:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007f38:	f107 0310 	add.w	r3, r7, #16
 8007f3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f40:	f107 030f 	add.w	r3, r7, #15
 8007f44:	2200      	movs	r2, #0
 8007f46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f52:	1dfa      	adds	r2, r7, #7
 8007f54:	7812      	ldrb	r2, [r2, #0]
 8007f56:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f66:	1dba      	adds	r2, r7, #6
 8007f68:	7812      	ldrb	r2, [r2, #0]
 8007f6a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f70:	3301      	adds	r3, #1
 8007f72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7a:	1d7a      	adds	r2, r7, #5
 8007f7c:	7812      	ldrb	r2, [r2, #0]
 8007f7e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007f80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f84:	3301      	adds	r3, #1
 8007f86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f8e:	2218      	movs	r2, #24
 8007f90:	2100      	movs	r1, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fa52 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x08;
 8007f98:	2308      	movs	r3, #8
 8007f9a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007f9e:	2331      	movs	r3, #49	; 0x31
 8007fa0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007fa4:	f107 0310 	add.w	r3, r7, #16
 8007fa8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007fac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007fb4:	f107 030f 	add.w	r3, r7, #15
 8007fb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007fc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f000 f8fb 	bl	80081c4 <hci_send_req>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	da01      	bge.n	8007fd8 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8007fd4:	23ff      	movs	r3, #255	; 0xff
 8007fd6:	e002      	b.n	8007fde <hci_le_set_default_phy+0xc4>
  return status;
 8007fd8:	f107 030f 	add.w	r3, r7, #15
 8007fdc:	781b      	ldrb	r3, [r3, #0]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd90      	pop	{r4, r7, pc}

08007fe8 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8007fe8:	b5b0      	push	{r4, r5, r7, lr}
 8007fea:	b0cc      	sub	sp, #304	; 0x130
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4605      	mov	r5, r0
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	4610      	mov	r0, r2
 8007ff4:	4619      	mov	r1, r3
 8007ff6:	1dbb      	adds	r3, r7, #6
 8007ff8:	462a      	mov	r2, r5
 8007ffa:	801a      	strh	r2, [r3, #0]
 8007ffc:	1d3b      	adds	r3, r7, #4
 8007ffe:	4622      	mov	r2, r4
 8008000:	801a      	strh	r2, [r3, #0]
 8008002:	1cbb      	adds	r3, r7, #2
 8008004:	4602      	mov	r2, r0
 8008006:	801a      	strh	r2, [r3, #0]
 8008008:	463b      	mov	r3, r7
 800800a:	460a      	mov	r2, r1
 800800c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800800e:	f107 0310 	add.w	r3, r7, #16
 8008012:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008016:	f107 030f 	add.w	r3, r7, #15
 800801a:	2200      	movs	r2, #0
 800801c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008028:	1dba      	adds	r2, r7, #6
 800802a:	8812      	ldrh	r2, [r2, #0]
 800802c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800802e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008032:	3302      	adds	r3, #2
 8008034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803c:	1d3a      	adds	r2, r7, #4
 800803e:	8812      	ldrh	r2, [r2, #0]
 8008040:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008042:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008046:	3302      	adds	r3, #2
 8008048:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800804c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008050:	1cba      	adds	r2, r7, #2
 8008052:	8812      	ldrh	r2, [r2, #0]
 8008054:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008056:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800805a:	3302      	adds	r3, #2
 800805c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8008060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008064:	463a      	mov	r2, r7
 8008066:	8812      	ldrh	r2, [r2, #0]
 8008068:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800806a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800806e:	3302      	adds	r3, #2
 8008070:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8008074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008078:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800807c:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800807e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008082:	3302      	adds	r3, #2
 8008084:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800808c:	2218      	movs	r2, #24
 800808e:	2100      	movs	r1, #0
 8008090:	4618      	mov	r0, r3
 8008092:	f000 f9d3 	bl	800843c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008096:	233f      	movs	r3, #63	; 0x3f
 8008098:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800809c:	f240 1381 	movw	r3, #385	; 0x181
 80080a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80080a4:	230f      	movs	r3, #15
 80080a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80080aa:	f107 0310 	add.w	r3, r7, #16
 80080ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80080ba:	f107 030f 	add.w	r3, r7, #15
 80080be:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80080c2:	2301      	movs	r3, #1
 80080c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f878 	bl	80081c4 <hci_send_req>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	da01      	bge.n	80080de <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 80080da:	23ff      	movs	r3, #255	; 0xff
 80080dc:	e002      	b.n	80080e4 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 80080de:	f107 030f 	add.w	r3, r7, #15
 80080e2:	781b      	ldrb	r3, [r3, #0]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080080f0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	4a08      	ldr	r2, [pc, #32]	; (8008120 <hci_init+0x30>)
 8008100:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008102:	4a08      	ldr	r2, [pc, #32]	; (8008124 <hci_init+0x34>)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008108:	4806      	ldr	r0, [pc, #24]	; (8008124 <hci_init+0x34>)
 800810a:	f000 f973 	bl	80083f4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4618      	mov	r0, r3
 8008114:	f000 f8d4 	bl	80082c0 <TlInit>

  return;
 8008118:	bf00      	nop
}
 800811a:	3708      	adds	r7, #8
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	2000030c 	.word	0x2000030c
 8008124:	200002e4 	.word	0x200002e4

08008128 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800812e:	4822      	ldr	r0, [pc, #136]	; (80081b8 <hci_user_evt_proc+0x90>)
 8008130:	f000 fc54 	bl	80089dc <LST_is_empty>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d12b      	bne.n	8008192 <hci_user_evt_proc+0x6a>
 800813a:	4b20      	ldr	r3, [pc, #128]	; (80081bc <hci_user_evt_proc+0x94>)
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d027      	beq.n	8008192 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008142:	f107 030c 	add.w	r3, r7, #12
 8008146:	4619      	mov	r1, r3
 8008148:	481b      	ldr	r0, [pc, #108]	; (80081b8 <hci_user_evt_proc+0x90>)
 800814a:	f000 fcd6 	bl	8008afa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800814e:	4b1c      	ldr	r3, [pc, #112]	; (80081c0 <hci_user_evt_proc+0x98>)
 8008150:	69db      	ldr	r3, [r3, #28]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800815a:	2301      	movs	r3, #1
 800815c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800815e:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <hci_user_evt_proc+0x98>)
 8008160:	69db      	ldr	r3, [r3, #28]
 8008162:	1d3a      	adds	r2, r7, #4
 8008164:	4610      	mov	r0, r2
 8008166:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008168:	793a      	ldrb	r2, [r7, #4]
 800816a:	4b14      	ldr	r3, [pc, #80]	; (80081bc <hci_user_evt_proc+0x94>)
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e002      	b.n	8008176 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008170:	4b12      	ldr	r3, [pc, #72]	; (80081bc <hci_user_evt_proc+0x94>)
 8008172:	2201      	movs	r2, #1
 8008174:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008176:	4b11      	ldr	r3, [pc, #68]	; (80081bc <hci_user_evt_proc+0x94>)
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d004      	beq.n	8008188 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	4618      	mov	r0, r3
 8008182:	f000 ff71 	bl	8009068 <TL_MM_EvtDone>
 8008186:	e004      	b.n	8008192 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4619      	mov	r1, r3
 800818c:	480a      	ldr	r0, [pc, #40]	; (80081b8 <hci_user_evt_proc+0x90>)
 800818e:	f000 fc47 	bl	8008a20 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008192:	4809      	ldr	r0, [pc, #36]	; (80081b8 <hci_user_evt_proc+0x90>)
 8008194:	f000 fc22 	bl	80089dc <LST_is_empty>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d107      	bne.n	80081ae <hci_user_evt_proc+0x86>
 800819e:	4b07      	ldr	r3, [pc, #28]	; (80081bc <hci_user_evt_proc+0x94>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d003      	beq.n	80081ae <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80081a6:	4804      	ldr	r0, [pc, #16]	; (80081b8 <hci_user_evt_proc+0x90>)
 80081a8:	f7fa fcce 	bl	8002b48 <hci_notify_asynch_evt>
  }


  return;
 80081ac:	bf00      	nop
 80081ae:	bf00      	nop
}
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000258 	.word	0x20000258
 80081bc:	20000264 	.word	0x20000264
 80081c0:	200002e4 	.word	0x200002e4

080081c4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	460b      	mov	r3, r1
 80081ce:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80081d0:	2000      	movs	r0, #0
 80081d2:	f000 f8cb 	bl	800836c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80081d6:	2300      	movs	r3, #0
 80081d8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	885b      	ldrh	r3, [r3, #2]
 80081de:	b21b      	sxth	r3, r3
 80081e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e4:	b21a      	sxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	881b      	ldrh	r3, [r3, #0]
 80081ea:	029b      	lsls	r3, r3, #10
 80081ec:	b21b      	sxth	r3, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	b21b      	sxth	r3, r3
 80081f2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	b2d9      	uxtb	r1, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689a      	ldr	r2, [r3, #8]
 80081fe:	8bbb      	ldrh	r3, [r7, #28]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f88d 	bl	8008320 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008206:	e04e      	b.n	80082a6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008208:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800820c:	f7fa fcb3 	bl	8002b76 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008210:	e043      	b.n	800829a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008212:	f107 030c 	add.w	r3, r7, #12
 8008216:	4619      	mov	r1, r3
 8008218:	4828      	ldr	r0, [pc, #160]	; (80082bc <hci_send_req+0xf8>)
 800821a:	f000 fc6e 	bl	8008afa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	7a5b      	ldrb	r3, [r3, #9]
 8008222:	2b0f      	cmp	r3, #15
 8008224:	d114      	bne.n	8008250 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	330b      	adds	r3, #11
 800822a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	885b      	ldrh	r3, [r3, #2]
 8008230:	b29b      	uxth	r3, r3
 8008232:	8bba      	ldrh	r2, [r7, #28]
 8008234:	429a      	cmp	r2, r3
 8008236:	d104      	bne.n	8008242 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	7812      	ldrb	r2, [r2, #0]
 8008240:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d027      	beq.n	800829a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800824a:	2301      	movs	r3, #1
 800824c:	77fb      	strb	r3, [r7, #31]
 800824e:	e024      	b.n	800829a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	330b      	adds	r3, #11
 8008254:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800825c:	b29b      	uxth	r3, r3
 800825e:	8bba      	ldrh	r2, [r7, #28]
 8008260:	429a      	cmp	r2, r3
 8008262:	d114      	bne.n	800828e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	7a9b      	ldrb	r3, [r3, #10]
 8008268:	3b03      	subs	r3, #3
 800826a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	7dfb      	ldrb	r3, [r7, #23]
 8008272:	429a      	cmp	r2, r3
 8008274:	bfa8      	it	ge
 8008276:	461a      	movge	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6918      	ldr	r0, [r3, #16]
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	1cd9      	adds	r1, r3, #3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	461a      	mov	r2, r3
 800828a:	f001 fa6f 	bl	800976c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008296:	2301      	movs	r3, #1
 8008298:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800829a:	4808      	ldr	r0, [pc, #32]	; (80082bc <hci_send_req+0xf8>)
 800829c:	f000 fb9e 	bl	80089dc <LST_is_empty>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0b5      	beq.n	8008212 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80082a6:	7ffb      	ldrb	r3, [r7, #31]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0ad      	beq.n	8008208 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80082ac:	2001      	movs	r0, #1
 80082ae:	f000 f85d 	bl	800836c <NotifyCmdStatus>

  return 0;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3720      	adds	r7, #32
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20000304 	.word	0x20000304

080082c0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80082c8:	480f      	ldr	r0, [pc, #60]	; (8008308 <TlInit+0x48>)
 80082ca:	f000 fb77 	bl	80089bc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80082ce:	4a0f      	ldr	r2, [pc, #60]	; (800830c <TlInit+0x4c>)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80082d4:	480e      	ldr	r0, [pc, #56]	; (8008310 <TlInit+0x50>)
 80082d6:	f000 fb71 	bl	80089bc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80082da:	4b0e      	ldr	r3, [pc, #56]	; (8008314 <TlInit+0x54>)
 80082dc:	2201      	movs	r2, #1
 80082de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80082e0:	4b0d      	ldr	r3, [pc, #52]	; (8008318 <TlInit+0x58>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80082ec:	4b0b      	ldr	r3, [pc, #44]	; (800831c <TlInit+0x5c>)
 80082ee:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80082f0:	4b09      	ldr	r3, [pc, #36]	; (8008318 <TlInit+0x58>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f107 0208 	add.w	r2, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
  }

  return;
 80082fc:	bf00      	nop
 80082fe:	bf00      	nop
}
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000304 	.word	0x20000304
 800830c:	20000260 	.word	0x20000260
 8008310:	20000258 	.word	0x20000258
 8008314:	20000264 	.word	0x20000264
 8008318:	200002e4 	.word	0x200002e4
 800831c:	080083ad 	.word	0x080083ad

08008320 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	603a      	str	r2, [r7, #0]
 800832a:	80fb      	strh	r3, [r7, #6]
 800832c:	460b      	mov	r3, r1
 800832e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008330:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <SendCmd+0x44>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	88fa      	ldrh	r2, [r7, #6]
 8008336:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800833a:	4b0a      	ldr	r3, [pc, #40]	; (8008364 <SendCmd+0x44>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	797a      	ldrb	r2, [r7, #5]
 8008340:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008342:	4b08      	ldr	r3, [pc, #32]	; (8008364 <SendCmd+0x44>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	330c      	adds	r3, #12
 8008348:	797a      	ldrb	r2, [r7, #5]
 800834a:	6839      	ldr	r1, [r7, #0]
 800834c:	4618      	mov	r0, r3
 800834e:	f001 fa0d 	bl	800976c <memcpy>

  hciContext.io.Send(0,0);
 8008352:	4b05      	ldr	r3, [pc, #20]	; (8008368 <SendCmd+0x48>)
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	2100      	movs	r1, #0
 8008358:	2000      	movs	r0, #0
 800835a:	4798      	blx	r3

  return;
 800835c:	bf00      	nop
}
 800835e:	3708      	adds	r7, #8
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20000260 	.word	0x20000260
 8008368:	200002e4 	.word	0x200002e4

0800836c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	4603      	mov	r3, r0
 8008374:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d108      	bne.n	800838e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <NotifyCmdStatus+0x3c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00d      	beq.n	80083a0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008384:	4b08      	ldr	r3, [pc, #32]	; (80083a8 <NotifyCmdStatus+0x3c>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2000      	movs	r0, #0
 800838a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800838c:	e008      	b.n	80083a0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800838e:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <NotifyCmdStatus+0x3c>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d004      	beq.n	80083a0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008396:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <NotifyCmdStatus+0x3c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2001      	movs	r0, #1
 800839c:	4798      	blx	r3
  return;
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
}
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	2000030c 	.word	0x2000030c

080083ac <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	7a5b      	ldrb	r3, [r3, #9]
 80083b8:	2b0f      	cmp	r3, #15
 80083ba:	d003      	beq.n	80083c4 <TlEvtReceived+0x18>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	7a5b      	ldrb	r3, [r3, #9]
 80083c0:	2b0e      	cmp	r3, #14
 80083c2:	d107      	bne.n	80083d4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	4809      	ldr	r0, [pc, #36]	; (80083ec <TlEvtReceived+0x40>)
 80083c8:	f000 fb50 	bl	8008a6c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80083cc:	2000      	movs	r0, #0
 80083ce:	f7fa fbc7 	bl	8002b60 <hci_cmd_resp_release>
 80083d2:	e006      	b.n	80083e2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80083d4:	6879      	ldr	r1, [r7, #4]
 80083d6:	4806      	ldr	r0, [pc, #24]	; (80083f0 <TlEvtReceived+0x44>)
 80083d8:	f000 fb48 	bl	8008a6c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80083dc:	4804      	ldr	r0, [pc, #16]	; (80083f0 <TlEvtReceived+0x44>)
 80083de:	f7fa fbb3 	bl	8002b48 <hci_notify_asynch_evt>
  }

  return;
 80083e2:	bf00      	nop
}
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000304 	.word	0x20000304
 80083f0:	20000258 	.word	0x20000258

080083f4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a05      	ldr	r2, [pc, #20]	; (8008414 <hci_register_io_bus+0x20>)
 8008400:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a04      	ldr	r2, [pc, #16]	; (8008418 <hci_register_io_bus+0x24>)
 8008406:	611a      	str	r2, [r3, #16]

  return;
 8008408:	bf00      	nop
}
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	08008de1 	.word	0x08008de1
 8008418:	08008e49 	.word	0x08008e49

0800841c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	68f8      	ldr	r0, [r7, #12]
 800842e:	f001 f99d 	bl	800976c <memcpy>
 8008432:	4603      	mov	r3, r0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f001 f99b 	bl	8009788 <memset>
 8008452:	4603      	mov	r3, r0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008466:	4b0f      	ldr	r3, [pc, #60]	; (80084a4 <OTP_Read+0x48>)
 8008468:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800846a:	e002      	b.n	8008472 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3b08      	subs	r3, #8
 8008470:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3307      	adds	r3, #7
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	79fa      	ldrb	r2, [r7, #7]
 800847a:	429a      	cmp	r2, r3
 800847c:	d003      	beq.n	8008486 <OTP_Read+0x2a>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4a09      	ldr	r2, [pc, #36]	; (80084a8 <OTP_Read+0x4c>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d1f2      	bne.n	800846c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	3307      	adds	r3, #7
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	79fa      	ldrb	r2, [r7, #7]
 800848e:	429a      	cmp	r2, r3
 8008490:	d001      	beq.n	8008496 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008496:	68fb      	ldr	r3, [r7, #12]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	1fff73f8 	.word	0x1fff73f8
 80084a8:	1fff7000 	.word	0x1fff7000

080084ac <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	; 0x28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80084b4:	2300      	movs	r3, #0
 80084b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	3301      	adds	r3, #1
 80084be:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	2bff      	cmp	r3, #255	; 0xff
 80084c6:	d14c      	bne.n	8008562 <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	3302      	adds	r3, #2
 80084cc:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	f640 4301 	movw	r3, #3073	; 0xc01
 80084da:	429a      	cmp	r2, r3
 80084dc:	d13d      	bne.n	800855a <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	3302      	adds	r3, #2
 80084e2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	885b      	ldrh	r3, [r3, #2]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	461a      	mov	r2, r3
 80084ec:	4b20      	ldr	r3, [pc, #128]	; (8008570 <PeerToPeer_Event_Handler+0xc4>)
 80084ee:	889b      	ldrh	r3, [r3, #4]
 80084f0:	3302      	adds	r3, #2
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d118      	bne.n	8008528 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 80084f6:	2301      	movs	r3, #1
 80084f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	7a1b      	ldrb	r3, [r3, #8]
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008508:	2300      	movs	r3, #0
 800850a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800850c:	f107 0308 	add.w	r3, r7, #8
 8008510:	4618      	mov	r0, r3
 8008512:	f7fa fb73 	bl	8002bfc <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8008516:	e022      	b.n	800855e <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008518:	2301      	movs	r3, #1
 800851a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800851c:	f107 0308 	add.w	r3, r7, #8
 8008520:	4618      	mov	r0, r3
 8008522:	f7fa fb6b 	bl	8002bfc <P2PS_STM_App_Notification>
        break;
 8008526:	e01a      	b.n	800855e <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	885b      	ldrh	r3, [r3, #2]
 800852c:	b29b      	uxth	r3, r3
 800852e:	461a      	mov	r2, r3
 8008530:	4b0f      	ldr	r3, [pc, #60]	; (8008570 <PeerToPeer_Event_Handler+0xc4>)
 8008532:	885b      	ldrh	r3, [r3, #2]
 8008534:	3301      	adds	r3, #1
 8008536:	429a      	cmp	r2, r3
 8008538:	d111      	bne.n	800855e <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800853a:	2303      	movs	r3, #3
 800853c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	88db      	ldrh	r3, [r3, #6]
 8008542:	b29b      	uxth	r3, r3
 8008544:	b2db      	uxtb	r3, r3
 8008546:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	3308      	adds	r3, #8
 800854c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800854e:	f107 0308 	add.w	r3, r7, #8
 8008552:	4618      	mov	r0, r3
 8008554:	f7fa fb52 	bl	8002bfc <P2PS_STM_App_Notification>
        break;
 8008558:	e001      	b.n	800855e <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 800855a:	bf00      	nop
 800855c:	e002      	b.n	8008564 <PeerToPeer_Event_Handler+0xb8>
        break;
 800855e:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008560:	e000      	b.n	8008564 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 8008562:	bf00      	nop
  }

  return(return_value);
 8008564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008568:	4618      	mov	r0, r3
 800856a:	3728      	adds	r7, #40	; 0x28
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	20000268 	.word	0x20000268

08008574 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800857a:	484a      	ldr	r0, [pc, #296]	; (80086a4 <P2PS_STM_Init+0x130>)
 800857c:	f000 fb82 	bl	8008c84 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008580:	238f      	movs	r3, #143	; 0x8f
 8008582:	703b      	strb	r3, [r7, #0]
 8008584:	23e5      	movs	r3, #229	; 0xe5
 8008586:	707b      	strb	r3, [r7, #1]
 8008588:	23b3      	movs	r3, #179	; 0xb3
 800858a:	70bb      	strb	r3, [r7, #2]
 800858c:	23d5      	movs	r3, #213	; 0xd5
 800858e:	70fb      	strb	r3, [r7, #3]
 8008590:	232e      	movs	r3, #46	; 0x2e
 8008592:	713b      	strb	r3, [r7, #4]
 8008594:	237f      	movs	r3, #127	; 0x7f
 8008596:	717b      	strb	r3, [r7, #5]
 8008598:	234a      	movs	r3, #74	; 0x4a
 800859a:	71bb      	strb	r3, [r7, #6]
 800859c:	2398      	movs	r3, #152	; 0x98
 800859e:	71fb      	strb	r3, [r7, #7]
 80085a0:	232a      	movs	r3, #42	; 0x2a
 80085a2:	723b      	strb	r3, [r7, #8]
 80085a4:	2348      	movs	r3, #72	; 0x48
 80085a6:	727b      	strb	r3, [r7, #9]
 80085a8:	237a      	movs	r3, #122	; 0x7a
 80085aa:	72bb      	strb	r3, [r7, #10]
 80085ac:	23cc      	movs	r3, #204	; 0xcc
 80085ae:	72fb      	strb	r3, [r7, #11]
 80085b0:	2340      	movs	r3, #64	; 0x40
 80085b2:	733b      	strb	r3, [r7, #12]
 80085b4:	23fe      	movs	r3, #254	; 0xfe
 80085b6:	737b      	strb	r3, [r7, #13]
 80085b8:	2300      	movs	r3, #0
 80085ba:	73bb      	strb	r3, [r7, #14]
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 80085c0:	4639      	mov	r1, r7
 80085c2:	4b39      	ldr	r3, [pc, #228]	; (80086a8 <P2PS_STM_Init+0x134>)
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	2308      	movs	r3, #8
 80085c8:	2201      	movs	r2, #1
 80085ca:	2002      	movs	r0, #2
 80085cc:	f7ff f8ef 	bl	80077ae <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 80085d0:	2319      	movs	r3, #25
 80085d2:	703b      	strb	r3, [r7, #0]
 80085d4:	23ed      	movs	r3, #237	; 0xed
 80085d6:	707b      	strb	r3, [r7, #1]
 80085d8:	2382      	movs	r3, #130	; 0x82
 80085da:	70bb      	strb	r3, [r7, #2]
 80085dc:	23ae      	movs	r3, #174	; 0xae
 80085de:	70fb      	strb	r3, [r7, #3]
 80085e0:	23ed      	movs	r3, #237	; 0xed
 80085e2:	713b      	strb	r3, [r7, #4]
 80085e4:	2321      	movs	r3, #33	; 0x21
 80085e6:	717b      	strb	r3, [r7, #5]
 80085e8:	234c      	movs	r3, #76	; 0x4c
 80085ea:	71bb      	strb	r3, [r7, #6]
 80085ec:	239d      	movs	r3, #157	; 0x9d
 80085ee:	71fb      	strb	r3, [r7, #7]
 80085f0:	2341      	movs	r3, #65	; 0x41
 80085f2:	723b      	strb	r3, [r7, #8]
 80085f4:	2345      	movs	r3, #69	; 0x45
 80085f6:	727b      	strb	r3, [r7, #9]
 80085f8:	2322      	movs	r3, #34	; 0x22
 80085fa:	72bb      	strb	r3, [r7, #10]
 80085fc:	238e      	movs	r3, #142	; 0x8e
 80085fe:	72fb      	strb	r3, [r7, #11]
 8008600:	2341      	movs	r3, #65	; 0x41
 8008602:	733b      	strb	r3, [r7, #12]
 8008604:	23fe      	movs	r3, #254	; 0xfe
 8008606:	737b      	strb	r3, [r7, #13]
 8008608:	2300      	movs	r3, #0
 800860a:	73bb      	strb	r3, [r7, #14]
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008610:	4b25      	ldr	r3, [pc, #148]	; (80086a8 <P2PS_STM_Init+0x134>)
 8008612:	8818      	ldrh	r0, [r3, #0]
 8008614:	463a      	mov	r2, r7
 8008616:	4b25      	ldr	r3, [pc, #148]	; (80086ac <P2PS_STM_Init+0x138>)
 8008618:	9305      	str	r3, [sp, #20]
 800861a:	2301      	movs	r3, #1
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	230a      	movs	r3, #10
 8008620:	9303      	str	r3, [sp, #12]
 8008622:	2301      	movs	r3, #1
 8008624:	9302      	str	r3, [sp, #8]
 8008626:	2300      	movs	r3, #0
 8008628:	9301      	str	r3, [sp, #4]
 800862a:	2306      	movs	r3, #6
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	2302      	movs	r3, #2
 8008630:	2102      	movs	r1, #2
 8008632:	f7ff f96b 	bl	800790c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8008636:	2319      	movs	r3, #25
 8008638:	703b      	strb	r3, [r7, #0]
 800863a:	23ed      	movs	r3, #237	; 0xed
 800863c:	707b      	strb	r3, [r7, #1]
 800863e:	2382      	movs	r3, #130	; 0x82
 8008640:	70bb      	strb	r3, [r7, #2]
 8008642:	23ae      	movs	r3, #174	; 0xae
 8008644:	70fb      	strb	r3, [r7, #3]
 8008646:	23ed      	movs	r3, #237	; 0xed
 8008648:	713b      	strb	r3, [r7, #4]
 800864a:	2321      	movs	r3, #33	; 0x21
 800864c:	717b      	strb	r3, [r7, #5]
 800864e:	234c      	movs	r3, #76	; 0x4c
 8008650:	71bb      	strb	r3, [r7, #6]
 8008652:	239d      	movs	r3, #157	; 0x9d
 8008654:	71fb      	strb	r3, [r7, #7]
 8008656:	2341      	movs	r3, #65	; 0x41
 8008658:	723b      	strb	r3, [r7, #8]
 800865a:	2345      	movs	r3, #69	; 0x45
 800865c:	727b      	strb	r3, [r7, #9]
 800865e:	2322      	movs	r3, #34	; 0x22
 8008660:	72bb      	strb	r3, [r7, #10]
 8008662:	238e      	movs	r3, #142	; 0x8e
 8008664:	72fb      	strb	r3, [r7, #11]
 8008666:	2342      	movs	r3, #66	; 0x42
 8008668:	733b      	strb	r3, [r7, #12]
 800866a:	23fe      	movs	r3, #254	; 0xfe
 800866c:	737b      	strb	r3, [r7, #13]
 800866e:	2300      	movs	r3, #0
 8008670:	73bb      	strb	r3, [r7, #14]
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008676:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <P2PS_STM_Init+0x134>)
 8008678:	8818      	ldrh	r0, [r3, #0]
 800867a:	463a      	mov	r2, r7
 800867c:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <P2PS_STM_Init+0x13c>)
 800867e:	9305      	str	r3, [sp, #20]
 8008680:	2301      	movs	r3, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	230a      	movs	r3, #10
 8008686:	9303      	str	r3, [sp, #12]
 8008688:	2301      	movs	r3, #1
 800868a:	9302      	str	r3, [sp, #8]
 800868c:	2300      	movs	r3, #0
 800868e:	9301      	str	r3, [sp, #4]
 8008690:	2310      	movs	r3, #16
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	2304      	movs	r3, #4
 8008696:	2102      	movs	r1, #2
 8008698:	f7ff f938 	bl	800790c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800869c:	bf00      	nop
}
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	080084ad 	.word	0x080084ad
 80086a8:	20000268 	.word	0x20000268
 80086ac:	2000026a 	.word	0x2000026a
 80086b0:	2000026c 	.word	0x2000026c

080086b4 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80086c0:	2342      	movs	r3, #66	; 0x42
 80086c2:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	f64f 6242 	movw	r2, #65090	; 0xfe42
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d10c      	bne.n	80086e8 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 80086ce:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <P2PS_STM_App_Update_Char+0x40>)
 80086d0:	8818      	ldrh	r0, [r3, #0]
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <P2PS_STM_App_Update_Char+0x40>)
 80086d4:	8899      	ldrh	r1, [r3, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	2304      	movs	r3, #4
 80086dc:	2200      	movs	r2, #0
 80086de:	f7ff f9ff 	bl	8007ae0 <aci_gatt_update_char_value>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             4, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 80086e6:	e000      	b.n	80086ea <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 80086e8:	bf00      	nop
  }

  return result;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 80086ec:	4618      	mov	r0, r3
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}
 80086f4:	20000268 	.word	0x20000268

080086f8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800870c:	69fb      	ldr	r3, [r7, #28]
 800870e:	2124      	movs	r1, #36	; 0x24
 8008710:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008714:	f000 f888 	bl	8008828 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	330b      	adds	r3, #11
 800871c:	78db      	ldrb	r3, [r3, #3]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3720      	adds	r7, #32
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008726:	b580      	push	{r7, lr}
 8008728:	b088      	sub	sp, #32
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800872e:	f107 030c 	add.w	r3, r7, #12
 8008732:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	210f      	movs	r1, #15
 800873e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008742:	f000 f871 	bl	8008828 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	330b      	adds	r3, #11
 800874a:	78db      	ldrb	r3, [r3, #3]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3720      	adds	r7, #32
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	4a08      	ldr	r2, [pc, #32]	; (8008784 <shci_init+0x30>)
 8008764:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008766:	4a08      	ldr	r2, [pc, #32]	; (8008788 <shci_init+0x34>)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800876c:	4806      	ldr	r0, [pc, #24]	; (8008788 <shci_init+0x34>)
 800876e:	f000 f911 	bl	8008994 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f894 	bl	80088a4 <TlInit>

  return;
 800877c:	bf00      	nop
}
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20000330 	.word	0x20000330
 8008788:	20000310 	.word	0x20000310

0800878c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008792:	4822      	ldr	r0, [pc, #136]	; (800881c <shci_user_evt_proc+0x90>)
 8008794:	f000 f922 	bl	80089dc <LST_is_empty>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d12b      	bne.n	80087f6 <shci_user_evt_proc+0x6a>
 800879e:	4b20      	ldr	r3, [pc, #128]	; (8008820 <shci_user_evt_proc+0x94>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d027      	beq.n	80087f6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80087a6:	f107 030c 	add.w	r3, r7, #12
 80087aa:	4619      	mov	r1, r3
 80087ac:	481b      	ldr	r0, [pc, #108]	; (800881c <shci_user_evt_proc+0x90>)
 80087ae:	f000 f9a4 	bl	8008afa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80087b2:	4b1c      	ldr	r3, [pc, #112]	; (8008824 <shci_user_evt_proc+0x98>)
 80087b4:	69db      	ldr	r3, [r3, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00c      	beq.n	80087d4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80087be:	2301      	movs	r3, #1
 80087c0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80087c2:	4b18      	ldr	r3, [pc, #96]	; (8008824 <shci_user_evt_proc+0x98>)
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	1d3a      	adds	r2, r7, #4
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80087cc:	793a      	ldrb	r2, [r7, #4]
 80087ce:	4b14      	ldr	r3, [pc, #80]	; (8008820 <shci_user_evt_proc+0x94>)
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	e002      	b.n	80087da <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80087d4:	4b12      	ldr	r3, [pc, #72]	; (8008820 <shci_user_evt_proc+0x94>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80087da:	4b11      	ldr	r3, [pc, #68]	; (8008820 <shci_user_evt_proc+0x94>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fc3f 	bl	8009068 <TL_MM_EvtDone>
 80087ea:	e004      	b.n	80087f6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4619      	mov	r1, r3
 80087f0:	480a      	ldr	r0, [pc, #40]	; (800881c <shci_user_evt_proc+0x90>)
 80087f2:	f000 f915 	bl	8008a20 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80087f6:	4809      	ldr	r0, [pc, #36]	; (800881c <shci_user_evt_proc+0x90>)
 80087f8:	f000 f8f0 	bl	80089dc <LST_is_empty>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d107      	bne.n	8008812 <shci_user_evt_proc+0x86>
 8008802:	4b07      	ldr	r3, [pc, #28]	; (8008820 <shci_user_evt_proc+0x94>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800880a:	4804      	ldr	r0, [pc, #16]	; (800881c <shci_user_evt_proc+0x90>)
 800880c:	f7f7 ff3a 	bl	8000684 <shci_notify_asynch_evt>
  }


  return;
 8008810:	bf00      	nop
 8008812:	bf00      	nop
}
 8008814:	3710      	adds	r7, #16
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000294 	.word	0x20000294
 8008820:	200002a4 	.word	0x200002a4
 8008824:	20000310 	.word	0x20000310

08008828 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	60ba      	str	r2, [r7, #8]
 8008830:	607b      	str	r3, [r7, #4]
 8008832:	4603      	mov	r3, r0
 8008834:	81fb      	strh	r3, [r7, #14]
 8008836:	460b      	mov	r3, r1
 8008838:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800883a:	2000      	movs	r0, #0
 800883c:	f000 f864 	bl	8008908 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008840:	4b16      	ldr	r3, [pc, #88]	; (800889c <shci_send+0x74>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	89fa      	ldrh	r2, [r7, #14]
 8008846:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800884a:	4b14      	ldr	r3, [pc, #80]	; (800889c <shci_send+0x74>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	7b7a      	ldrb	r2, [r7, #13]
 8008850:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008852:	4b12      	ldr	r3, [pc, #72]	; (800889c <shci_send+0x74>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	330c      	adds	r3, #12
 8008858:	7b7a      	ldrb	r2, [r7, #13]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 ff85 	bl	800976c <memcpy>

  shciContext.io.Send(0,0);
 8008862:	4b0f      	ldr	r3, [pc, #60]	; (80088a0 <shci_send+0x78>)
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	2100      	movs	r1, #0
 8008868:	2000      	movs	r0, #0
 800886a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800886c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008870:	f7f7 ff1f 	bl	80006b2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f103 0008 	add.w	r0, r3, #8
 800887a:	4b08      	ldr	r3, [pc, #32]	; (800889c <shci_send+0x74>)
 800887c:	6819      	ldr	r1, [r3, #0]
 800887e:	4b07      	ldr	r3, [pc, #28]	; (800889c <shci_send+0x74>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	789b      	ldrb	r3, [r3, #2]
 8008884:	3303      	adds	r3, #3
 8008886:	461a      	mov	r2, r3
 8008888:	f000 ff70 	bl	800976c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800888c:	2001      	movs	r0, #1
 800888e:	f000 f83b 	bl	8008908 <Cmd_SetStatus>

  return;
 8008892:	bf00      	nop
}
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	200002a0 	.word	0x200002a0
 80088a0:	20000310 	.word	0x20000310

080088a4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b086      	sub	sp, #24
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80088ac:	4a10      	ldr	r2, [pc, #64]	; (80088f0 <TlInit+0x4c>)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80088b2:	4810      	ldr	r0, [pc, #64]	; (80088f4 <TlInit+0x50>)
 80088b4:	f000 f882 	bl	80089bc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80088b8:	2001      	movs	r0, #1
 80088ba:	f000 f825 	bl	8008908 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <TlInit+0x54>)
 80088c0:	2201      	movs	r2, #1
 80088c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80088c4:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <TlInit+0x58>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00c      	beq.n	80088e6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <TlInit+0x5c>)
 80088d2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80088d4:	4b0b      	ldr	r3, [pc, #44]	; (8008904 <TlInit+0x60>)
 80088d6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80088d8:	4b08      	ldr	r3, [pc, #32]	; (80088fc <TlInit+0x58>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f107 020c 	add.w	r2, r7, #12
 80088e0:	4610      	mov	r0, r2
 80088e2:	4798      	blx	r3
  }

  return;
 80088e4:	bf00      	nop
 80088e6:	bf00      	nop
}
 80088e8:	3718      	adds	r7, #24
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	200002a0 	.word	0x200002a0
 80088f4:	20000294 	.word	0x20000294
 80088f8:	200002a4 	.word	0x200002a4
 80088fc:	20000310 	.word	0x20000310
 8008900:	08008959 	.word	0x08008959
 8008904:	08008971 	.word	0x08008971

08008908 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008912:	79fb      	ldrb	r3, [r7, #7]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d10b      	bne.n	8008930 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008918:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <Cmd_SetStatus+0x48>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008920:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <Cmd_SetStatus+0x48>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2000      	movs	r0, #0
 8008926:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008928:	4b0a      	ldr	r3, [pc, #40]	; (8008954 <Cmd_SetStatus+0x4c>)
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800892e:	e00b      	b.n	8008948 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008930:	4b08      	ldr	r3, [pc, #32]	; (8008954 <Cmd_SetStatus+0x4c>)
 8008932:	2201      	movs	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <Cmd_SetStatus+0x48>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d004      	beq.n	8008948 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800893e:	4b04      	ldr	r3, [pc, #16]	; (8008950 <Cmd_SetStatus+0x48>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2001      	movs	r0, #1
 8008944:	4798      	blx	r3
  return;
 8008946:	bf00      	nop
 8008948:	bf00      	nop
}
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20000330 	.word	0x20000330
 8008954:	2000029c 	.word	0x2000029c

08008958 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008960:	2000      	movs	r0, #0
 8008962:	f7f7 fe9b 	bl	800069c <shci_cmd_resp_release>

  return;
 8008966:	bf00      	nop
}
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	4805      	ldr	r0, [pc, #20]	; (8008990 <TlUserEvtReceived+0x20>)
 800897c:	f000 f876 	bl	8008a6c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008980:	4803      	ldr	r0, [pc, #12]	; (8008990 <TlUserEvtReceived+0x20>)
 8008982:	f7f7 fe7f 	bl	8000684 <shci_notify_asynch_evt>

  return;
 8008986:	bf00      	nop
}
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	20000294 	.word	0x20000294

08008994 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a05      	ldr	r2, [pc, #20]	; (80089b4 <shci_register_io_bus+0x20>)
 80089a0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a04      	ldr	r2, [pc, #16]	; (80089b8 <shci_register_io_bus+0x24>)
 80089a6:	611a      	str	r2, [r3, #16]

  return;
 80089a8:	bf00      	nop
}
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	08008ef5 	.word	0x08008ef5
 80089b8:	08008f49 	.word	0x08008f49

080089bc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	605a      	str	r2, [r3, #4]
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089e4:	f3ef 8310 	mrs	r3, PRIMASK
 80089e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80089ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80089ee:	b672      	cpsid	i
}
 80089f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d102      	bne.n	8008a02 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
 8008a00:	e001      	b.n	8008a06 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	f383 8810 	msr	PRIMASK, r3
}
 8008a10:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	371c      	adds	r7, #28
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a30:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a34:	b672      	cpsid	i
}
 8008a36:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	605a      	str	r2, [r3, #4]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f383 8810 	msr	PRIMASK, r3
}
 8008a5e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a60:	bf00      	nop
 8008a62:	371c      	adds	r7, #28
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a76:	f3ef 8310 	mrs	r3, PRIMASK
 8008a7a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a80:	b672      	cpsid	i
}
 8008a82:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	683a      	ldr	r2, [r7, #0]
 8008a96:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	601a      	str	r2, [r3, #0]
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f383 8810 	msr	PRIMASK, r3
}
 8008aaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008ac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008aca:	b672      	cpsid	i
}
 8008acc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6812      	ldr	r2, [r2, #0]
 8008ad6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6852      	ldr	r2, [r2, #4]
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f383 8810 	msr	PRIMASK, r3
}
 8008aec:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b086      	sub	sp, #24
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b04:	f3ef 8310 	mrs	r3, PRIMASK
 8008b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b0e:	b672      	cpsid	i
}
 8008b10:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7ff ffca 	bl	8008ab8 <LST_remove_node>
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	f383 8810 	msr	PRIMASK, r3
}
 8008b2e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b30:	bf00      	nop
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8008b38:	b480      	push	{r7}
 8008b3a:	af00      	add	r7, sp, #0
  return;
 8008b3c:	bf00      	nop
}
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <BLS_Init>:

__weak void BLS_Init( void )
{
 8008b46:	b480      	push	{r7}
 8008b48:	af00      	add	r7, sp, #0
  return;
 8008b4a:	bf00      	nop
}
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
  return;
 8008b58:	bf00      	nop
}
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <DIS_Init>:
__weak void DIS_Init( void )
{
 8008b62:	b480      	push	{r7}
 8008b64:	af00      	add	r7, sp, #0
  return;
 8008b66:	bf00      	nop
}
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  return;
 8008b74:	bf00      	nop
}
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008b7e:	b480      	push	{r7}
 8008b80:	af00      	add	r7, sp, #0
  return;
 8008b82:	bf00      	nop
}
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HRS_Init>:
__weak void HRS_Init( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  return;
 8008b90:	bf00      	nop
}
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <HTS_Init>:
__weak void HTS_Init( void )
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	af00      	add	r7, sp, #0
  return;
 8008b9e:	bf00      	nop
}
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <IAS_Init>:
__weak void IAS_Init( void )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
  return;
 8008bac:	bf00      	nop
}
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr

08008bb6 <LLS_Init>:
__weak void LLS_Init( void )
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	af00      	add	r7, sp, #0
  return;
 8008bba:	bf00      	nop
}
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <TPS_Init>:
__weak void TPS_Init( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
  return;
 8008bc8:	bf00      	nop
}
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	af00      	add	r7, sp, #0
  return;
 8008bd6:	bf00      	nop
}
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  return;
 8008be4:	bf00      	nop
}
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <MESH_Init>:
__weak void MESH_Init( void )
{
 8008bee:	b480      	push	{r7}
 8008bf0:	af00      	add	r7, sp, #0
  return;
 8008bf2:	bf00      	nop
}
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
  return;
 8008c00:	bf00      	nop
}
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	af00      	add	r7, sp, #0
  return;
 8008c0e:	bf00      	nop
}
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008c1c:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <SVCCTL_Init+0x18>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008c22:	4b04      	ldr	r3, [pc, #16]	; (8008c34 <SVCCTL_Init+0x1c>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008c28:	f000 f806 	bl	8008c38 <SVCCTL_SvcInit>

  return;
 8008c2c:	bf00      	nop
}
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20000270 	.word	0x20000270
 8008c34:	20000290 	.word	0x20000290

08008c38 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  BAS_Init();
 8008c3c:	f7ff ff7c 	bl	8008b38 <BAS_Init>

  BLS_Init();
 8008c40:	f7ff ff81 	bl	8008b46 <BLS_Init>

  CRS_STM_Init();
 8008c44:	f7ff ff86 	bl	8008b54 <CRS_STM_Init>

  DIS_Init();
 8008c48:	f7ff ff8b 	bl	8008b62 <DIS_Init>

  EDS_STM_Init();
 8008c4c:	f7ff ff90 	bl	8008b70 <EDS_STM_Init>

  HIDS_Init();
 8008c50:	f7ff ff95 	bl	8008b7e <HIDS_Init>

  HRS_Init();
 8008c54:	f7ff ff9a 	bl	8008b8c <HRS_Init>

  HTS_Init();
 8008c58:	f7ff ff9f 	bl	8008b9a <HTS_Init>

  IAS_Init();
 8008c5c:	f7ff ffa4 	bl	8008ba8 <IAS_Init>

  LLS_Init();
 8008c60:	f7ff ffa9 	bl	8008bb6 <LLS_Init>

  TPS_Init();
 8008c64:	f7ff ffae 	bl	8008bc4 <TPS_Init>

  MOTENV_STM_Init();
 8008c68:	f7ff ffb3 	bl	8008bd2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008c6c:	f7ff fc82 	bl	8008574 <P2PS_STM_Init>

  OTAS_STM_Init();
 8008c70:	f7ff ffb6 	bl	8008be0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008c74:	f7ff ffc2 	bl	8008bfc <BVOPUS_STM_Init>

  MESH_Init();
 8008c78:	f7ff ffb9 	bl	8008bee <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008c7c:	f7ff ffc5 	bl	8008c0a <SVCCTL_InitCustomSvc>
  
  return;
 8008c80:	bf00      	nop
}
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008c8c:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008c8e:	7f1b      	ldrb	r3, [r3, #28]
 8008c90:	4619      	mov	r1, r3
 8008c92:	4a08      	ldr	r2, [pc, #32]	; (8008cb4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008c9c:	7f1b      	ldrb	r3, [r3, #28]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	b2da      	uxtb	r2, r3
 8008ca2:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008ca4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008ca6:	bf00      	nop
}
 8008ca8:	370c      	adds	r7, #12
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000270 	.word	0x20000270

08008cb8 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	2bff      	cmp	r3, #255	; 0xff
 8008cd0:	d125      	bne.n	8008d1e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	3302      	adds	r3, #2
 8008cd6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29b      	uxth	r3, r3
 8008cde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008ce2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ce6:	d118      	bne.n	8008d1a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	757b      	strb	r3, [r7, #21]
 8008cec:	e00d      	b.n	8008d0a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008cee:	7d7b      	ldrb	r3, [r7, #21]
 8008cf0:	4a1a      	ldr	r2, [pc, #104]	; (8008d5c <SVCCTL_UserEvtRx+0xa4>)
 8008cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008cfe:	7dfb      	ldrb	r3, [r7, #23]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d108      	bne.n	8008d16 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008d04:	7d7b      	ldrb	r3, [r7, #21]
 8008d06:	3301      	adds	r3, #1
 8008d08:	757b      	strb	r3, [r7, #21]
 8008d0a:	4b14      	ldr	r3, [pc, #80]	; (8008d5c <SVCCTL_UserEvtRx+0xa4>)
 8008d0c:	7f1b      	ldrb	r3, [r3, #28]
 8008d0e:	7d7a      	ldrb	r2, [r7, #21]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d3ec      	bcc.n	8008cee <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008d14:	e002      	b.n	8008d1c <SVCCTL_UserEvtRx+0x64>
              break;
 8008d16:	bf00      	nop
          break;
 8008d18:	e000      	b.n	8008d1c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008d1a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008d1c:	e000      	b.n	8008d20 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008d1e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008d20:	7dfb      	ldrb	r3, [r7, #23]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d00f      	beq.n	8008d46 <SVCCTL_UserEvtRx+0x8e>
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	dc10      	bgt.n	8008d4c <SVCCTL_UserEvtRx+0x94>
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <SVCCTL_UserEvtRx+0x7c>
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d006      	beq.n	8008d40 <SVCCTL_UserEvtRx+0x88>
 8008d32:	e00b      	b.n	8008d4c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7f9 fbeb 	bl	8002510 <SVCCTL_App_Notification>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	75bb      	strb	r3, [r7, #22]
      break;
 8008d3e:	e008      	b.n	8008d52 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008d40:	2301      	movs	r3, #1
 8008d42:	75bb      	strb	r3, [r7, #22]
      break;
 8008d44:	e005      	b.n	8008d52 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75bb      	strb	r3, [r7, #22]
      break;
 8008d4a:	e002      	b.n	8008d52 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	75bb      	strb	r3, [r7, #22]
      break;
 8008d50:	bf00      	nop
  }

  return (return_status);
 8008d52:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3718      	adds	r7, #24
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000270 	.word	0x20000270

08008d60 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008d64:	f7fa f9de 	bl	8003124 <HW_IPCC_Enable>

  return;
 8008d68:	bf00      	nop
}
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <TL_Init>:


void TL_Init( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008d70:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <TL_Init+0x48>)
 8008d72:	4a11      	ldr	r2, [pc, #68]	; (8008db8 <TL_Init+0x4c>)
 8008d74:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008d76:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <TL_Init+0x48>)
 8008d78:	4a10      	ldr	r2, [pc, #64]	; (8008dbc <TL_Init+0x50>)
 8008d7a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008d7c:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <TL_Init+0x48>)
 8008d7e:	4a10      	ldr	r2, [pc, #64]	; (8008dc0 <TL_Init+0x54>)
 8008d80:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008d82:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <TL_Init+0x48>)
 8008d84:	4a0f      	ldr	r2, [pc, #60]	; (8008dc4 <TL_Init+0x58>)
 8008d86:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <TL_Init+0x48>)
 8008d8a:	4a0f      	ldr	r2, [pc, #60]	; (8008dc8 <TL_Init+0x5c>)
 8008d8c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <TL_Init+0x48>)
 8008d90:	4a0e      	ldr	r2, [pc, #56]	; (8008dcc <TL_Init+0x60>)
 8008d92:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <TL_Init+0x48>)
 8008d96:	4a0e      	ldr	r2, [pc, #56]	; (8008dd0 <TL_Init+0x64>)
 8008d98:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008d9a:	4b06      	ldr	r3, [pc, #24]	; (8008db4 <TL_Init+0x48>)
 8008d9c:	4a0d      	ldr	r2, [pc, #52]	; (8008dd4 <TL_Init+0x68>)
 8008d9e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008da0:	4b04      	ldr	r3, [pc, #16]	; (8008db4 <TL_Init+0x48>)
 8008da2:	4a0d      	ldr	r2, [pc, #52]	; (8008dd8 <TL_Init+0x6c>)
 8008da4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008da6:	4b03      	ldr	r3, [pc, #12]	; (8008db4 <TL_Init+0x48>)
 8008da8:	4a0c      	ldr	r2, [pc, #48]	; (8008ddc <TL_Init+0x70>)
 8008daa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008dac:	f7fa f9ce 	bl	800314c <HW_IPCC_Init>

  return;
 8008db0:	bf00      	nop
}
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20030000 	.word	0x20030000
 8008db8:	20030134 	.word	0x20030134
 8008dbc:	20030154 	.word	0x20030154
 8008dc0:	20030164 	.word	0x20030164
 8008dc4:	20030170 	.word	0x20030170
 8008dc8:	20030178 	.word	0x20030178
 8008dcc:	20030180 	.word	0x20030180
 8008dd0:	20030188 	.word	0x20030188
 8008dd4:	200301a4 	.word	0x200301a4
 8008dd8:	200301a8 	.word	0x200301a8
 8008ddc:	200301b4 	.word	0x200301b4

08008de0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008dec:	4811      	ldr	r0, [pc, #68]	; (8008e34 <TL_BLE_Init+0x54>)
 8008dee:	f7ff fde5 	bl	80089bc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008df2:	4b11      	ldr	r3, [pc, #68]	; (8008e38 <TL_BLE_Init+0x58>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	689a      	ldr	r2, [r3, #8]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	4a0c      	ldr	r2, [pc, #48]	; (8008e3c <TL_BLE_Init+0x5c>)
 8008e0c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	4a08      	ldr	r2, [pc, #32]	; (8008e34 <TL_BLE_Init+0x54>)
 8008e12:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008e14:	f7fa f9b0 	bl	8003178 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a08      	ldr	r2, [pc, #32]	; (8008e40 <TL_BLE_Init+0x60>)
 8008e1e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	4a07      	ldr	r2, [pc, #28]	; (8008e44 <TL_BLE_Init+0x64>)
 8008e26:	6013      	str	r3, [r2, #0]

  return 0;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	200301d0 	.word	0x200301d0
 8008e38:	20030000 	.word	0x20030000
 8008e3c:	20030a48 	.word	0x20030a48
 8008e40:	2000033c 	.word	0x2000033c
 8008e44:	20000340 	.word	0x20000340

08008e48 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	460b      	mov	r3, r1
 8008e52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008e54:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <TL_BLE_SendCmd+0x34>)
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008e5e:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <TL_BLE_SendCmd+0x34>)
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4619      	mov	r1, r3
 8008e66:	2001      	movs	r0, #1
 8008e68:	f000 f96c 	bl	8009144 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008e6c:	f7fa f98e 	bl	800318c <HW_IPCC_BLE_SendCmd>

  return 0;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3708      	adds	r7, #8
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20030000 	.word	0x20030000

08008e80 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008e86:	e01c      	b.n	8008ec2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008e88:	1d3b      	adds	r3, r7, #4
 8008e8a:	4619      	mov	r1, r3
 8008e8c:	4812      	ldr	r0, [pc, #72]	; (8008ed8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008e8e:	f7ff fe34 	bl	8008afa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	7a5b      	ldrb	r3, [r3, #9]
 8008e96:	2b0f      	cmp	r3, #15
 8008e98:	d003      	beq.n	8008ea2 <HW_IPCC_BLE_RxEvtNot+0x22>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7a5b      	ldrb	r3, [r3, #9]
 8008e9e:	2b0e      	cmp	r3, #14
 8008ea0:	d105      	bne.n	8008eae <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	2002      	movs	r0, #2
 8008ea8:	f000 f94c 	bl	8009144 <OutputDbgTrace>
 8008eac:	e004      	b.n	8008eb8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	2003      	movs	r0, #3
 8008eb4:	f000 f946 	bl	8009144 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008eb8:	4b08      	ldr	r3, [pc, #32]	; (8008edc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4610      	mov	r0, r2
 8008ec0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008ec2:	4805      	ldr	r0, [pc, #20]	; (8008ed8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008ec4:	f7ff fd8a 	bl	80089dc <LST_is_empty>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0dc      	beq.n	8008e88 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008ece:	bf00      	nop
}
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}
 8008ed6:	bf00      	nop
 8008ed8:	200301d0 	.word	0x200301d0
 8008edc:	2000033c 	.word	0x2000033c

08008ee0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008ee4:	4b02      	ldr	r3, [pc, #8]	; (8008ef0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4798      	blx	r3

  return;
 8008eea:	bf00      	nop
}
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000340 	.word	0x20000340

08008ef4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008f00:	480d      	ldr	r0, [pc, #52]	; (8008f38 <TL_SYS_Init+0x44>)
 8008f02:	f7ff fd5b 	bl	80089bc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008f06:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <TL_SYS_Init+0x48>)
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689a      	ldr	r2, [r3, #8]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	4a08      	ldr	r2, [pc, #32]	; (8008f38 <TL_SYS_Init+0x44>)
 8008f18:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008f1a:	f7fa f959 	bl	80031d0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a07      	ldr	r2, [pc, #28]	; (8008f40 <TL_SYS_Init+0x4c>)
 8008f24:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	4a06      	ldr	r2, [pc, #24]	; (8008f44 <TL_SYS_Init+0x50>)
 8008f2c:	6013      	str	r3, [r2, #0]

  return 0;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	200301d8 	.word	0x200301d8
 8008f3c:	20030000 	.word	0x20030000
 8008f40:	20000344 	.word	0x20000344
 8008f44:	20000348 	.word	0x20000348

08008f48 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	460b      	mov	r3, r1
 8008f52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008f54:	4b09      	ldr	r3, [pc, #36]	; (8008f7c <TL_SYS_SendCmd+0x34>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2210      	movs	r2, #16
 8008f5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008f5e:	4b07      	ldr	r3, [pc, #28]	; (8008f7c <TL_SYS_SendCmd+0x34>)
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4619      	mov	r1, r3
 8008f66:	2004      	movs	r0, #4
 8008f68:	f000 f8ec 	bl	8009144 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008f6c:	f7fa f93a 	bl	80031e4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	20030000 	.word	0x20030000

08008f80 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008f84:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	2005      	movs	r0, #5
 8008f8e:	f000 f8d9 	bl	8009144 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008f92:	4b05      	ldr	r3, [pc, #20]	; (8008fa8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a03      	ldr	r2, [pc, #12]	; (8008fa4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008f98:	68d2      	ldr	r2, [r2, #12]
 8008f9a:	6812      	ldr	r2, [r2, #0]
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3

  return;
 8008fa0:	bf00      	nop
}
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20030000 	.word	0x20030000
 8008fa8:	20000344 	.word	0x20000344

08008fac <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008fb2:	e00e      	b.n	8008fd2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008fb4:	1d3b      	adds	r3, r7, #4
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	480b      	ldr	r0, [pc, #44]	; (8008fe8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008fba:	f7ff fd9e 	bl	8008afa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	2006      	movs	r0, #6
 8008fc4:	f000 f8be 	bl	8009144 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008fc8:	4b08      	ldr	r3, [pc, #32]	; (8008fec <HW_IPCC_SYS_EvtNot+0x40>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	4610      	mov	r0, r2
 8008fd0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008fd2:	4805      	ldr	r0, [pc, #20]	; (8008fe8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008fd4:	f7ff fd02 	bl	80089dc <LST_is_empty>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d0ea      	beq.n	8008fb4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008fde:	bf00      	nop
}
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	200301d8 	.word	0x200301d8
 8008fec:	20000348 	.word	0x20000348

08008ff0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008ff8:	4817      	ldr	r0, [pc, #92]	; (8009058 <TL_MM_Init+0x68>)
 8008ffa:	f7ff fcdf 	bl	80089bc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008ffe:	4817      	ldr	r0, [pc, #92]	; (800905c <TL_MM_Init+0x6c>)
 8009000:	f7ff fcdc 	bl	80089bc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009004:	4b16      	ldr	r3, [pc, #88]	; (8009060 <TL_MM_Init+0x70>)
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	4a16      	ldr	r2, [pc, #88]	; (8009064 <TL_MM_Init+0x74>)
 800900a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800900c:	4b15      	ldr	r3, [pc, #84]	; (8009064 <TL_MM_Init+0x74>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6892      	ldr	r2, [r2, #8]
 8009014:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009016:	4b13      	ldr	r3, [pc, #76]	; (8009064 <TL_MM_Init+0x74>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	68d2      	ldr	r2, [r2, #12]
 800901e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009020:	4b10      	ldr	r3, [pc, #64]	; (8009064 <TL_MM_Init+0x74>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0c      	ldr	r2, [pc, #48]	; (8009058 <TL_MM_Init+0x68>)
 8009026:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009028:	4b0e      	ldr	r3, [pc, #56]	; (8009064 <TL_MM_Init+0x74>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6812      	ldr	r2, [r2, #0]
 8009030:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009032:	4b0c      	ldr	r3, [pc, #48]	; (8009064 <TL_MM_Init+0x74>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6852      	ldr	r2, [r2, #4]
 800903a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800903c:	4b09      	ldr	r3, [pc, #36]	; (8009064 <TL_MM_Init+0x74>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	6912      	ldr	r2, [r2, #16]
 8009044:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009046:	4b07      	ldr	r3, [pc, #28]	; (8009064 <TL_MM_Init+0x74>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	6952      	ldr	r2, [r2, #20]
 800904e:	619a      	str	r2, [r3, #24]

  return;
 8009050:	bf00      	nop
}
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	200301c0 	.word	0x200301c0
 800905c:	20000334 	.word	0x20000334
 8009060:	20030000 	.word	0x20030000
 8009064:	2000034c 	.word	0x2000034c

08009068 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b082      	sub	sp, #8
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	4807      	ldr	r0, [pc, #28]	; (8009090 <TL_MM_EvtDone+0x28>)
 8009074:	f7ff fcfa 	bl	8008a6c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009078:	6879      	ldr	r1, [r7, #4]
 800907a:	2000      	movs	r0, #0
 800907c:	f000 f862 	bl	8009144 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009080:	4804      	ldr	r0, [pc, #16]	; (8009094 <TL_MM_EvtDone+0x2c>)
 8009082:	f7fa f8d5 	bl	8003230 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009086:	bf00      	nop
}
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20000334 	.word	0x20000334
 8009094:	08009099 	.word	0x08009099

08009098 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800909e:	e00c      	b.n	80090ba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80090a0:	1d3b      	adds	r3, r7, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	480a      	ldr	r0, [pc, #40]	; (80090d0 <SendFreeBuf+0x38>)
 80090a6:	f7ff fd28 	bl	8008afa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80090aa:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <SendFreeBuf+0x3c>)
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	4611      	mov	r1, r2
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff fcd9 	bl	8008a6c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80090ba:	4805      	ldr	r0, [pc, #20]	; (80090d0 <SendFreeBuf+0x38>)
 80090bc:	f7ff fc8e 	bl	80089dc <LST_is_empty>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d0ec      	beq.n	80090a0 <SendFreeBuf+0x8>
  }

  return;
 80090c6:	bf00      	nop
}
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	20000334 	.word	0x20000334
 80090d4:	20030000 	.word	0x20030000

080090d8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80090dc:	4805      	ldr	r0, [pc, #20]	; (80090f4 <TL_TRACES_Init+0x1c>)
 80090de:	f7ff fc6d 	bl	80089bc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <TL_TRACES_Init+0x20>)
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	4a03      	ldr	r2, [pc, #12]	; (80090f4 <TL_TRACES_Init+0x1c>)
 80090e8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80090ea:	f7fa f8d7 	bl	800329c <HW_IPCC_TRACES_Init>

  return;
 80090ee:	bf00      	nop
}
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200301c8 	.word	0x200301c8
 80090f8:	20030000 	.word	0x20030000

080090fc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009102:	e008      	b.n	8009116 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009104:	1d3b      	adds	r3, r7, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4808      	ldr	r0, [pc, #32]	; (800912c <HW_IPCC_TRACES_EvtNot+0x30>)
 800910a:	f7ff fcf6 	bl	8008afa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f80d 	bl	8009130 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009116:	4805      	ldr	r0, [pc, #20]	; (800912c <HW_IPCC_TRACES_EvtNot+0x30>)
 8009118:	f7ff fc60 	bl	80089dc <LST_is_empty>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0f0      	beq.n	8009104 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009122:	bf00      	nop
}
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop
 800912c:	200301c8 	.word	0x200301c8

08009130 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b06      	cmp	r3, #6
 8009154:	d845      	bhi.n	80091e2 <OutputDbgTrace+0x9e>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <OutputDbgTrace+0x18>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009179 	.word	0x08009179
 8009160:	0800919d 	.word	0x0800919d
 8009164:	080091a3 	.word	0x080091a3
 8009168:	080091b7 	.word	0x080091b7
 800916c:	080091c3 	.word	0x080091c3
 8009170:	080091c9 	.word	0x080091c9
 8009174:	080091d7 	.word	0x080091d7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	7a5b      	ldrb	r3, [r3, #9]
 8009180:	2bff      	cmp	r3, #255	; 0xff
 8009182:	d005      	beq.n	8009190 <OutputDbgTrace+0x4c>
 8009184:	2bff      	cmp	r3, #255	; 0xff
 8009186:	dc05      	bgt.n	8009194 <OutputDbgTrace+0x50>
 8009188:	2b0e      	cmp	r3, #14
 800918a:	d005      	beq.n	8009198 <OutputDbgTrace+0x54>
 800918c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800918e:	e001      	b.n	8009194 <OutputDbgTrace+0x50>
          break;
 8009190:	bf00      	nop
 8009192:	e027      	b.n	80091e4 <OutputDbgTrace+0xa0>
          break;
 8009194:	bf00      	nop
 8009196:	e025      	b.n	80091e4 <OutputDbgTrace+0xa0>
          break;
 8009198:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800919a:	e023      	b.n	80091e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80091a0:	e020      	b.n	80091e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	7a5b      	ldrb	r3, [r3, #9]
 80091aa:	2b0e      	cmp	r3, #14
 80091ac:	d001      	beq.n	80091b2 <OutputDbgTrace+0x6e>
 80091ae:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80091b0:	e000      	b.n	80091b4 <OutputDbgTrace+0x70>
          break;
 80091b2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80091b4:	e016      	b.n	80091e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	7a5b      	ldrb	r3, [r3, #9]
 80091be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80091c0:	e010      	b.n	80091e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80091c6:	e00d      	b.n	80091e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	7a5b      	ldrb	r3, [r3, #9]
 80091d0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80091d2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80091d4:	e006      	b.n	80091e4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	7a5b      	ldrb	r3, [r3, #9]
 80091de:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80091e0:	e000      	b.n	80091e4 <OutputDbgTrace+0xa0>

    default:
      break;
 80091e2:	bf00      	nop
  }

  return;
 80091e4:	bf00      	nop
}
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <UTIL_LPM_Init+0x1c>)
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80091fa:	4b05      	ldr	r3, [pc, #20]	; (8009210 <UTIL_LPM_Init+0x20>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009200:	bf00      	nop
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	20000350 	.word	0x20000350
 8009210:	20000354 	.word	0x20000354

08009214 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009220:	f3ef 8310 	mrs	r3, PRIMASK
 8009224:	613b      	str	r3, [r7, #16]
  return(result);
 8009226:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800922a:	b672      	cpsid	i
}
 800922c:	bf00      	nop
  
  switch(state)
 800922e:	78fb      	ldrb	r3, [r7, #3]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d008      	beq.n	8009246 <UTIL_LPM_SetOffMode+0x32>
 8009234:	2b01      	cmp	r3, #1
 8009236:	d10e      	bne.n	8009256 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009238:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <UTIL_LPM_SetOffMode+0x5c>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4313      	orrs	r3, r2
 8009240:	4a0b      	ldr	r2, [pc, #44]	; (8009270 <UTIL_LPM_SetOffMode+0x5c>)
 8009242:	6013      	str	r3, [r2, #0]
      break;
 8009244:	e008      	b.n	8009258 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	43da      	mvns	r2, r3
 800924a:	4b09      	ldr	r3, [pc, #36]	; (8009270 <UTIL_LPM_SetOffMode+0x5c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4013      	ands	r3, r2
 8009250:	4a07      	ldr	r2, [pc, #28]	; (8009270 <UTIL_LPM_SetOffMode+0x5c>)
 8009252:	6013      	str	r3, [r2, #0]
      break;
 8009254:	e000      	b.n	8009258 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009256:	bf00      	nop
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f383 8810 	msr	PRIMASK, r3
}
 8009262:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009264:	bf00      	nop
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr
 8009270:	20000354 	.word	0x20000354

08009274 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800927a:	f3ef 8310 	mrs	r3, PRIMASK
 800927e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009280:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8009282:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009284:	b672      	cpsid	i
}
 8009286:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009288:	4b12      	ldr	r3, [pc, #72]	; (80092d4 <UTIL_LPM_EnterLowPower+0x60>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d006      	beq.n	800929e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009290:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <UTIL_LPM_EnterLowPower+0x64>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009296:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <UTIL_LPM_EnterLowPower+0x64>)
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	4798      	blx	r3
 800929c:	e010      	b.n	80092c0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800929e:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <UTIL_LPM_EnterLowPower+0x68>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d006      	beq.n	80092b4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <UTIL_LPM_EnterLowPower+0x64>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80092ac:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <UTIL_LPM_EnterLowPower+0x64>)
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	4798      	blx	r3
 80092b2:	e005      	b.n	80092c0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 80092b4:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <UTIL_LPM_EnterLowPower+0x64>)
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80092ba:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <UTIL_LPM_EnterLowPower+0x64>)
 80092bc:	695b      	ldr	r3, [r3, #20]
 80092be:	4798      	blx	r3
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f383 8810 	msr	PRIMASK, r3
}
 80092ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80092cc:	bf00      	nop
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20000350 	.word	0x20000350
 80092d8:	0800af50 	.word	0x0800af50
 80092dc:	20000354 	.word	0x20000354

080092e0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b08c      	sub	sp, #48	; 0x30
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80092e8:	4b67      	ldr	r3, [pc, #412]	; (8009488 <UTIL_SEQ_Run+0x1a8>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80092ee:	4b66      	ldr	r3, [pc, #408]	; (8009488 <UTIL_SEQ_Run+0x1a8>)
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4013      	ands	r3, r2
 80092f6:	4a64      	ldr	r2, [pc, #400]	; (8009488 <UTIL_SEQ_Run+0x1a8>)
 80092f8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80092fa:	e083      	b.n	8009404 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 80092fc:	2300      	movs	r3, #0
 80092fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009300:	e002      	b.n	8009308 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	3301      	adds	r3, #1
 8009306:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009308:	4a60      	ldr	r2, [pc, #384]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 800930a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009310:	4b5f      	ldr	r3, [pc, #380]	; (8009490 <UTIL_SEQ_Run+0x1b0>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	401a      	ands	r2, r3
 8009316:	4b5c      	ldr	r3, [pc, #368]	; (8009488 <UTIL_SEQ_Run+0x1a8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4013      	ands	r3, r2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0f0      	beq.n	8009302 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8009320:	4a5a      	ldr	r2, [pc, #360]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 8009322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009324:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009328:	4b59      	ldr	r3, [pc, #356]	; (8009490 <UTIL_SEQ_Run+0x1b0>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	401a      	ands	r2, r3
 800932e:	4b56      	ldr	r3, [pc, #344]	; (8009488 <UTIL_SEQ_Run+0x1a8>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4013      	ands	r3, r2
 8009334:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009336:	4a55      	ldr	r2, [pc, #340]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 8009338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933a:	00db      	lsls	r3, r3, #3
 800933c:	4413      	add	r3, r2
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	4013      	ands	r3, r2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d106      	bne.n	8009356 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009348:	4a50      	ldr	r2, [pc, #320]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 800934a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934c:	00db      	lsls	r3, r3, #3
 800934e:	4413      	add	r3, r2
 8009350:	f04f 32ff 	mov.w	r2, #4294967295
 8009354:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009356:	4a4d      	ldr	r2, [pc, #308]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	00db      	lsls	r3, r3, #3
 800935c:	4413      	add	r3, r2
 800935e:	685a      	ldr	r2, [r3, #4]
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	4013      	ands	r3, r2
 8009364:	4618      	mov	r0, r3
 8009366:	f000 f99d 	bl	80096a4 <SEQ_BitPosition>
 800936a:	4603      	mov	r3, r0
 800936c:	461a      	mov	r2, r3
 800936e:	4b49      	ldr	r3, [pc, #292]	; (8009494 <UTIL_SEQ_Run+0x1b4>)
 8009370:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009372:	4a46      	ldr	r2, [pc, #280]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 8009374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	4413      	add	r3, r2
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	4b45      	ldr	r3, [pc, #276]	; (8009494 <UTIL_SEQ_Run+0x1b4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2101      	movs	r1, #1
 8009382:	fa01 f303 	lsl.w	r3, r1, r3
 8009386:	43db      	mvns	r3, r3
 8009388:	401a      	ands	r2, r3
 800938a:	4940      	ldr	r1, [pc, #256]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	440b      	add	r3, r1
 8009392:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009394:	f3ef 8310 	mrs	r3, PRIMASK
 8009398:	61bb      	str	r3, [r7, #24]
  return(result);
 800939a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800939c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800939e:	b672      	cpsid	i
}
 80093a0:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80093a2:	4b3c      	ldr	r3, [pc, #240]	; (8009494 <UTIL_SEQ_Run+0x1b4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2201      	movs	r2, #1
 80093a8:	fa02 f303 	lsl.w	r3, r2, r3
 80093ac:	43da      	mvns	r2, r3
 80093ae:	4b3a      	ldr	r3, [pc, #232]	; (8009498 <UTIL_SEQ_Run+0x1b8>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4013      	ands	r3, r2
 80093b4:	4a38      	ldr	r2, [pc, #224]	; (8009498 <UTIL_SEQ_Run+0x1b8>)
 80093b6:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80093b8:	2302      	movs	r3, #2
 80093ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093bc:	e013      	b.n	80093e6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80093be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c0:	3b01      	subs	r3, #1
 80093c2:	4a32      	ldr	r2, [pc, #200]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 80093c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80093c8:	4b32      	ldr	r3, [pc, #200]	; (8009494 <UTIL_SEQ_Run+0x1b4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2201      	movs	r2, #1
 80093ce:	fa02 f303 	lsl.w	r3, r2, r3
 80093d2:	43da      	mvns	r2, r3
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	3b01      	subs	r3, #1
 80093d8:	400a      	ands	r2, r1
 80093da:	492c      	ldr	r1, [pc, #176]	; (800948c <UTIL_SEQ_Run+0x1ac>)
 80093dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	3b01      	subs	r3, #1
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e8      	bne.n	80093be <UTIL_SEQ_Run+0xde>
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f383 8810 	msr	PRIMASK, r3
}
 80093f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80093f8:	4b26      	ldr	r3, [pc, #152]	; (8009494 <UTIL_SEQ_Run+0x1b4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a27      	ldr	r2, [pc, #156]	; (800949c <UTIL_SEQ_Run+0x1bc>)
 80093fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009402:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8009404:	4b24      	ldr	r3, [pc, #144]	; (8009498 <UTIL_SEQ_Run+0x1b8>)
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	4b21      	ldr	r3, [pc, #132]	; (8009490 <UTIL_SEQ_Run+0x1b0>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	401a      	ands	r2, r3
 800940e:	4b1e      	ldr	r3, [pc, #120]	; (8009488 <UTIL_SEQ_Run+0x1a8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4013      	ands	r3, r2
 8009414:	2b00      	cmp	r3, #0
 8009416:	d007      	beq.n	8009428 <UTIL_SEQ_Run+0x148>
 8009418:	4b21      	ldr	r3, [pc, #132]	; (80094a0 <UTIL_SEQ_Run+0x1c0>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	4b21      	ldr	r3, [pc, #132]	; (80094a4 <UTIL_SEQ_Run+0x1c4>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4013      	ands	r3, r2
 8009422:	2b00      	cmp	r3, #0
 8009424:	f43f af6a 	beq.w	80092fc <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009428:	4b1a      	ldr	r3, [pc, #104]	; (8009494 <UTIL_SEQ_Run+0x1b4>)
 800942a:	f04f 32ff 	mov.w	r2, #4294967295
 800942e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009430:	f000 f92a 	bl	8009688 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009434:	f3ef 8310 	mrs	r3, PRIMASK
 8009438:	613b      	str	r3, [r7, #16]
  return(result);
 800943a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800943c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800943e:	b672      	cpsid	i
}
 8009440:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8009442:	4b15      	ldr	r3, [pc, #84]	; (8009498 <UTIL_SEQ_Run+0x1b8>)
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	4b12      	ldr	r3, [pc, #72]	; (8009490 <UTIL_SEQ_Run+0x1b0>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	401a      	ands	r2, r3
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <UTIL_SEQ_Run+0x1a8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4013      	ands	r3, r2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d108      	bne.n	8009468 <UTIL_SEQ_Run+0x188>
 8009456:	4b12      	ldr	r3, [pc, #72]	; (80094a0 <UTIL_SEQ_Run+0x1c0>)
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	4b12      	ldr	r3, [pc, #72]	; (80094a4 <UTIL_SEQ_Run+0x1c4>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4013      	ands	r3, r2
 8009460:	2b00      	cmp	r3, #0
 8009462:	d101      	bne.n	8009468 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8009464:	f7f7 f8fb 	bl	800065e <UTIL_SEQ_Idle>
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f383 8810 	msr	PRIMASK, r3
}
 8009472:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8009474:	f000 f90f 	bl	8009696 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009478:	4a03      	ldr	r2, [pc, #12]	; (8009488 <UTIL_SEQ_Run+0x1a8>)
 800947a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947c:	6013      	str	r3, [r2, #0]

  return;
 800947e:	bf00      	nop
}
 8009480:	3730      	adds	r7, #48	; 0x30
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20000058 	.word	0x20000058
 800948c:	200003e8 	.word	0x200003e8
 8009490:	20000054 	.word	0x20000054
 8009494:	20000364 	.word	0x20000364
 8009498:	20000358 	.word	0x20000358
 800949c:	20000368 	.word	0x20000368
 80094a0:	2000035c 	.word	0x2000035c
 80094a4:	20000360 	.word	0x20000360

080094a8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b088      	sub	sp, #32
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094b4:	f3ef 8310 	mrs	r3, PRIMASK
 80094b8:	617b      	str	r3, [r7, #20]
  return(result);
 80094ba:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80094bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80094be:	b672      	cpsid	i
}
 80094c0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 f8ee 	bl	80096a4 <SEQ_BitPosition>
 80094c8:	4603      	mov	r3, r0
 80094ca:	4619      	mov	r1, r3
 80094cc:	4a06      	ldr	r2, [pc, #24]	; (80094e8 <UTIL_SEQ_RegTask+0x40>)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	f383 8810 	msr	PRIMASK, r3
}
 80094de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80094e0:	bf00      	nop
}
 80094e2:	3720      	adds	r7, #32
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000368 	.word	0x20000368

080094ec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094f6:	f3ef 8310 	mrs	r3, PRIMASK
 80094fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80094fc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80094fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009500:	b672      	cpsid	i
}
 8009502:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009504:	4b0d      	ldr	r3, [pc, #52]	; (800953c <UTIL_SEQ_SetTask+0x50>)
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4313      	orrs	r3, r2
 800950c:	4a0b      	ldr	r2, [pc, #44]	; (800953c <UTIL_SEQ_SetTask+0x50>)
 800950e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009510:	4a0b      	ldr	r2, [pc, #44]	; (8009540 <UTIL_SEQ_SetTask+0x54>)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	431a      	orrs	r2, r3
 800951c:	4908      	ldr	r1, [pc, #32]	; (8009540 <UTIL_SEQ_SetTask+0x54>)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	f383 8810 	msr	PRIMASK, r3
}
 800952e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009530:	bf00      	nop
}
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	20000358 	.word	0x20000358
 8009540:	200003e8 	.word	0x200003e8

08009544 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009544:	b480      	push	{r7}
 8009546:	b087      	sub	sp, #28
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800954c:	f3ef 8310 	mrs	r3, PRIMASK
 8009550:	60fb      	str	r3, [r7, #12]
  return(result);
 8009552:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009554:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009556:	b672      	cpsid	i
}
 8009558:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	43da      	mvns	r2, r3
 800955e:	4b08      	ldr	r3, [pc, #32]	; (8009580 <UTIL_SEQ_PauseTask+0x3c>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4013      	ands	r3, r2
 8009564:	4a06      	ldr	r2, [pc, #24]	; (8009580 <UTIL_SEQ_PauseTask+0x3c>)
 8009566:	6013      	str	r3, [r2, #0]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f383 8810 	msr	PRIMASK, r3
}
 8009572:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009574:	bf00      	nop
}
 8009576:	371c      	adds	r7, #28
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	20000054 	.word	0x20000054

08009584 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800958c:	f3ef 8310 	mrs	r3, PRIMASK
 8009590:	60fb      	str	r3, [r7, #12]
  return(result);
 8009592:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009594:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009596:	b672      	cpsid	i
}
 8009598:	bf00      	nop

  TaskMask |= TaskId_bm;
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <UTIL_SEQ_ResumeTask+0x3c>)
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	4a07      	ldr	r2, [pc, #28]	; (80095c0 <UTIL_SEQ_ResumeTask+0x3c>)
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f383 8810 	msr	PRIMASK, r3
}
 80095b0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80095b2:	bf00      	nop
}
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	20000054 	.word	0x20000054

080095c4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b087      	sub	sp, #28
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095cc:	f3ef 8310 	mrs	r3, PRIMASK
 80095d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80095d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80095d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095d6:	b672      	cpsid	i
}
 80095d8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80095da:	4b09      	ldr	r3, [pc, #36]	; (8009600 <UTIL_SEQ_SetEvt+0x3c>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	4a07      	ldr	r2, [pc, #28]	; (8009600 <UTIL_SEQ_SetEvt+0x3c>)
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f383 8810 	msr	PRIMASK, r3
}
 80095f0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80095f2:	bf00      	nop
}
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	2000035c 	.word	0x2000035c

08009604 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800960c:	4b1b      	ldr	r3, [pc, #108]	; (800967c <UTIL_SEQ_WaitEvt+0x78>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009612:	4b1a      	ldr	r3, [pc, #104]	; (800967c <UTIL_SEQ_WaitEvt+0x78>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961a:	d102      	bne.n	8009622 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e005      	b.n	800962e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8009622:	4b16      	ldr	r3, [pc, #88]	; (800967c <UTIL_SEQ_WaitEvt+0x78>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2201      	movs	r2, #1
 8009628:	fa02 f303 	lsl.w	r3, r2, r3
 800962c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800962e:	4b14      	ldr	r3, [pc, #80]	; (8009680 <UTIL_SEQ_WaitEvt+0x7c>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8009634:	4a12      	ldr	r2, [pc, #72]	; (8009680 <UTIL_SEQ_WaitEvt+0x7c>)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800963a:	e005      	b.n	8009648 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800963c:	4b10      	ldr	r3, [pc, #64]	; (8009680 <UTIL_SEQ_WaitEvt+0x7c>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4619      	mov	r1, r3
 8009642:	6978      	ldr	r0, [r7, #20]
 8009644:	f7f7 f811 	bl	800066a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8009648:	4b0e      	ldr	r3, [pc, #56]	; (8009684 <UTIL_SEQ_WaitEvt+0x80>)
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	4b0c      	ldr	r3, [pc, #48]	; (8009680 <UTIL_SEQ_WaitEvt+0x7c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4013      	ands	r3, r2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d0f2      	beq.n	800963c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009656:	4a09      	ldr	r2, [pc, #36]	; (800967c <UTIL_SEQ_WaitEvt+0x78>)
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800965c:	4b08      	ldr	r3, [pc, #32]	; (8009680 <UTIL_SEQ_WaitEvt+0x7c>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	43da      	mvns	r2, r3
 8009662:	4b08      	ldr	r3, [pc, #32]	; (8009684 <UTIL_SEQ_WaitEvt+0x80>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4013      	ands	r3, r2
 8009668:	4a06      	ldr	r2, [pc, #24]	; (8009684 <UTIL_SEQ_WaitEvt+0x80>)
 800966a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800966c:	4a04      	ldr	r2, [pc, #16]	; (8009680 <UTIL_SEQ_WaitEvt+0x7c>)
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6013      	str	r3, [r2, #0]

  return;
 8009672:	bf00      	nop
}
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000364 	.word	0x20000364
 8009680:	20000360 	.word	0x20000360
 8009684:	2000035c 	.word	0x2000035c

08009688 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009688:	b480      	push	{r7}
 800968a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800968c:	bf00      	nop
}
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009696:	b480      	push	{r7}
 8009698:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800969a:	bf00      	nop
}
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	0c1b      	lsrs	r3, r3, #16
 80096b4:	041b      	lsls	r3, r3, #16
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d104      	bne.n	80096c4 <SEQ_BitPosition+0x20>
 80096ba:	2310      	movs	r3, #16
 80096bc:	73fb      	strb	r3, [r7, #15]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	041b      	lsls	r3, r3, #16
 80096c2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d105      	bne.n	80096da <SEQ_BitPosition+0x36>
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	3308      	adds	r3, #8
 80096d2:	73fb      	strb	r3, [r7, #15]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	021b      	lsls	r3, r3, #8
 80096d8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d105      	bne.n	80096f0 <SEQ_BitPosition+0x4c>
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	3304      	adds	r3, #4
 80096e8:	73fb      	strb	r3, [r7, #15]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	011b      	lsls	r3, r3, #4
 80096ee:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	0f1b      	lsrs	r3, r3, #28
 80096f4:	4a07      	ldr	r2, [pc, #28]	; (8009714 <SEQ_BitPosition+0x70>)
 80096f6:	5cd2      	ldrb	r2, [r2, r3]
 80096f8:	7bfb      	ldrb	r3, [r7, #15]
 80096fa:	4413      	add	r3, r2
 80096fc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	f1c3 031f 	rsb	r3, r3, #31
 8009704:	b2db      	uxtb	r3, r3
}
 8009706:	4618      	mov	r0, r3
 8009708:	3714      	adds	r7, #20
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	0800b030 	.word	0x0800b030

08009718 <__errno>:
 8009718:	4b01      	ldr	r3, [pc, #4]	; (8009720 <__errno+0x8>)
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	2000005c 	.word	0x2000005c

08009724 <__libc_init_array>:
 8009724:	b570      	push	{r4, r5, r6, lr}
 8009726:	4d0d      	ldr	r5, [pc, #52]	; (800975c <__libc_init_array+0x38>)
 8009728:	4c0d      	ldr	r4, [pc, #52]	; (8009760 <__libc_init_array+0x3c>)
 800972a:	1b64      	subs	r4, r4, r5
 800972c:	10a4      	asrs	r4, r4, #2
 800972e:	2600      	movs	r6, #0
 8009730:	42a6      	cmp	r6, r4
 8009732:	d109      	bne.n	8009748 <__libc_init_array+0x24>
 8009734:	4d0b      	ldr	r5, [pc, #44]	; (8009764 <__libc_init_array+0x40>)
 8009736:	4c0c      	ldr	r4, [pc, #48]	; (8009768 <__libc_init_array+0x44>)
 8009738:	f001 fb30 	bl	800ad9c <_init>
 800973c:	1b64      	subs	r4, r4, r5
 800973e:	10a4      	asrs	r4, r4, #2
 8009740:	2600      	movs	r6, #0
 8009742:	42a6      	cmp	r6, r4
 8009744:	d105      	bne.n	8009752 <__libc_init_array+0x2e>
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	f855 3b04 	ldr.w	r3, [r5], #4
 800974c:	4798      	blx	r3
 800974e:	3601      	adds	r6, #1
 8009750:	e7ee      	b.n	8009730 <__libc_init_array+0xc>
 8009752:	f855 3b04 	ldr.w	r3, [r5], #4
 8009756:	4798      	blx	r3
 8009758:	3601      	adds	r6, #1
 800975a:	e7f2      	b.n	8009742 <__libc_init_array+0x1e>
 800975c:	0800b2bc 	.word	0x0800b2bc
 8009760:	0800b2bc 	.word	0x0800b2bc
 8009764:	0800b2bc 	.word	0x0800b2bc
 8009768:	0800b2c0 	.word	0x0800b2c0

0800976c <memcpy>:
 800976c:	440a      	add	r2, r1
 800976e:	4291      	cmp	r1, r2
 8009770:	f100 33ff 	add.w	r3, r0, #4294967295
 8009774:	d100      	bne.n	8009778 <memcpy+0xc>
 8009776:	4770      	bx	lr
 8009778:	b510      	push	{r4, lr}
 800977a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800977e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009782:	4291      	cmp	r1, r2
 8009784:	d1f9      	bne.n	800977a <memcpy+0xe>
 8009786:	bd10      	pop	{r4, pc}

08009788 <memset>:
 8009788:	4402      	add	r2, r0
 800978a:	4603      	mov	r3, r0
 800978c:	4293      	cmp	r3, r2
 800978e:	d100      	bne.n	8009792 <memset+0xa>
 8009790:	4770      	bx	lr
 8009792:	f803 1b01 	strb.w	r1, [r3], #1
 8009796:	e7f9      	b.n	800978c <memset+0x4>

08009798 <validate_structure>:
 8009798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800979a:	6801      	ldr	r1, [r0, #0]
 800979c:	293b      	cmp	r1, #59	; 0x3b
 800979e:	4604      	mov	r4, r0
 80097a0:	d911      	bls.n	80097c6 <validate_structure+0x2e>
 80097a2:	223c      	movs	r2, #60	; 0x3c
 80097a4:	4668      	mov	r0, sp
 80097a6:	f000 fcab 	bl	800a100 <div>
 80097aa:	9a01      	ldr	r2, [sp, #4]
 80097ac:	6863      	ldr	r3, [r4, #4]
 80097ae:	9900      	ldr	r1, [sp, #0]
 80097b0:	2a00      	cmp	r2, #0
 80097b2:	440b      	add	r3, r1
 80097b4:	6063      	str	r3, [r4, #4]
 80097b6:	bfbb      	ittet	lt
 80097b8:	323c      	addlt	r2, #60	; 0x3c
 80097ba:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80097be:	6022      	strge	r2, [r4, #0]
 80097c0:	6022      	strlt	r2, [r4, #0]
 80097c2:	bfb8      	it	lt
 80097c4:	6063      	strlt	r3, [r4, #4]
 80097c6:	6861      	ldr	r1, [r4, #4]
 80097c8:	293b      	cmp	r1, #59	; 0x3b
 80097ca:	d911      	bls.n	80097f0 <validate_structure+0x58>
 80097cc:	223c      	movs	r2, #60	; 0x3c
 80097ce:	4668      	mov	r0, sp
 80097d0:	f000 fc96 	bl	800a100 <div>
 80097d4:	9a01      	ldr	r2, [sp, #4]
 80097d6:	68a3      	ldr	r3, [r4, #8]
 80097d8:	9900      	ldr	r1, [sp, #0]
 80097da:	2a00      	cmp	r2, #0
 80097dc:	440b      	add	r3, r1
 80097de:	60a3      	str	r3, [r4, #8]
 80097e0:	bfbb      	ittet	lt
 80097e2:	323c      	addlt	r2, #60	; 0x3c
 80097e4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80097e8:	6062      	strge	r2, [r4, #4]
 80097ea:	6062      	strlt	r2, [r4, #4]
 80097ec:	bfb8      	it	lt
 80097ee:	60a3      	strlt	r3, [r4, #8]
 80097f0:	68a1      	ldr	r1, [r4, #8]
 80097f2:	2917      	cmp	r1, #23
 80097f4:	d911      	bls.n	800981a <validate_structure+0x82>
 80097f6:	2218      	movs	r2, #24
 80097f8:	4668      	mov	r0, sp
 80097fa:	f000 fc81 	bl	800a100 <div>
 80097fe:	9a01      	ldr	r2, [sp, #4]
 8009800:	68e3      	ldr	r3, [r4, #12]
 8009802:	9900      	ldr	r1, [sp, #0]
 8009804:	2a00      	cmp	r2, #0
 8009806:	440b      	add	r3, r1
 8009808:	60e3      	str	r3, [r4, #12]
 800980a:	bfbb      	ittet	lt
 800980c:	3218      	addlt	r2, #24
 800980e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009812:	60a2      	strge	r2, [r4, #8]
 8009814:	60a2      	strlt	r2, [r4, #8]
 8009816:	bfb8      	it	lt
 8009818:	60e3      	strlt	r3, [r4, #12]
 800981a:	6921      	ldr	r1, [r4, #16]
 800981c:	290b      	cmp	r1, #11
 800981e:	d911      	bls.n	8009844 <validate_structure+0xac>
 8009820:	220c      	movs	r2, #12
 8009822:	4668      	mov	r0, sp
 8009824:	f000 fc6c 	bl	800a100 <div>
 8009828:	9a01      	ldr	r2, [sp, #4]
 800982a:	6963      	ldr	r3, [r4, #20]
 800982c:	9900      	ldr	r1, [sp, #0]
 800982e:	2a00      	cmp	r2, #0
 8009830:	440b      	add	r3, r1
 8009832:	6163      	str	r3, [r4, #20]
 8009834:	bfbb      	ittet	lt
 8009836:	320c      	addlt	r2, #12
 8009838:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800983c:	6122      	strge	r2, [r4, #16]
 800983e:	6122      	strlt	r2, [r4, #16]
 8009840:	bfb8      	it	lt
 8009842:	6163      	strlt	r3, [r4, #20]
 8009844:	6963      	ldr	r3, [r4, #20]
 8009846:	0799      	lsls	r1, r3, #30
 8009848:	d120      	bne.n	800988c <validate_structure+0xf4>
 800984a:	2164      	movs	r1, #100	; 0x64
 800984c:	fb93 f2f1 	sdiv	r2, r3, r1
 8009850:	fb01 3212 	mls	r2, r1, r2, r3
 8009854:	b9e2      	cbnz	r2, 8009890 <validate_structure+0xf8>
 8009856:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800985a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800985e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009862:	fb01 3312 	mls	r3, r1, r2, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	bf14      	ite	ne
 800986a:	231c      	movne	r3, #28
 800986c:	231d      	moveq	r3, #29
 800986e:	68e2      	ldr	r2, [r4, #12]
 8009870:	2a00      	cmp	r2, #0
 8009872:	dc0f      	bgt.n	8009894 <validate_structure+0xfc>
 8009874:	4f33      	ldr	r7, [pc, #204]	; (8009944 <validate_structure+0x1ac>)
 8009876:	260b      	movs	r6, #11
 8009878:	2064      	movs	r0, #100	; 0x64
 800987a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800987e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009882:	f1bc 0f00 	cmp.w	ip, #0
 8009886:	dd31      	ble.n	80098ec <validate_structure+0x154>
 8009888:	b003      	add	sp, #12
 800988a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800988c:	231c      	movs	r3, #28
 800988e:	e7ee      	b.n	800986e <validate_structure+0xd6>
 8009890:	231d      	movs	r3, #29
 8009892:	e7ec      	b.n	800986e <validate_structure+0xd6>
 8009894:	4f2b      	ldr	r7, [pc, #172]	; (8009944 <validate_structure+0x1ac>)
 8009896:	f04f 0c00 	mov.w	ip, #0
 800989a:	2564      	movs	r5, #100	; 0x64
 800989c:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80098a0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80098a4:	2a01      	cmp	r2, #1
 80098a6:	bf14      	ite	ne
 80098a8:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80098ac:	4618      	moveq	r0, r3
 80098ae:	4281      	cmp	r1, r0
 80098b0:	ddea      	ble.n	8009888 <validate_structure+0xf0>
 80098b2:	3201      	adds	r2, #1
 80098b4:	1a09      	subs	r1, r1, r0
 80098b6:	2a0c      	cmp	r2, #12
 80098b8:	60e1      	str	r1, [r4, #12]
 80098ba:	6122      	str	r2, [r4, #16]
 80098bc:	d1f0      	bne.n	80098a0 <validate_structure+0x108>
 80098be:	6963      	ldr	r3, [r4, #20]
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	0791      	lsls	r1, r2, #30
 80098c4:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80098c8:	d137      	bne.n	800993a <validate_structure+0x1a2>
 80098ca:	fb92 f1f5 	sdiv	r1, r2, r5
 80098ce:	fb05 2211 	mls	r2, r5, r1, r2
 80098d2:	2a00      	cmp	r2, #0
 80098d4:	d133      	bne.n	800993e <validate_structure+0x1a6>
 80098d6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80098da:	fb93 f2f6 	sdiv	r2, r3, r6
 80098de:	fb06 3312 	mls	r3, r6, r2, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bf14      	ite	ne
 80098e6:	231c      	movne	r3, #28
 80098e8:	231d      	moveq	r3, #29
 80098ea:	e7d9      	b.n	80098a0 <validate_structure+0x108>
 80098ec:	6921      	ldr	r1, [r4, #16]
 80098ee:	3901      	subs	r1, #1
 80098f0:	6121      	str	r1, [r4, #16]
 80098f2:	3101      	adds	r1, #1
 80098f4:	d114      	bne.n	8009920 <validate_structure+0x188>
 80098f6:	6963      	ldr	r3, [r4, #20]
 80098f8:	1e59      	subs	r1, r3, #1
 80098fa:	078a      	lsls	r2, r1, #30
 80098fc:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8009900:	d117      	bne.n	8009932 <validate_structure+0x19a>
 8009902:	fb91 f2f0 	sdiv	r2, r1, r0
 8009906:	fb00 1112 	mls	r1, r0, r2, r1
 800990a:	b9a1      	cbnz	r1, 8009936 <validate_structure+0x19e>
 800990c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009910:	fb93 f2f5 	sdiv	r2, r3, r5
 8009914:	fb05 3312 	mls	r3, r5, r2, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	bf14      	ite	ne
 800991c:	231c      	movne	r3, #28
 800991e:	231d      	moveq	r3, #29
 8009920:	6922      	ldr	r2, [r4, #16]
 8009922:	2a01      	cmp	r2, #1
 8009924:	bf14      	ite	ne
 8009926:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800992a:	461a      	moveq	r2, r3
 800992c:	4462      	add	r2, ip
 800992e:	60e2      	str	r2, [r4, #12]
 8009930:	e7a5      	b.n	800987e <validate_structure+0xe6>
 8009932:	231c      	movs	r3, #28
 8009934:	e7f4      	b.n	8009920 <validate_structure+0x188>
 8009936:	231d      	movs	r3, #29
 8009938:	e7f2      	b.n	8009920 <validate_structure+0x188>
 800993a:	231c      	movs	r3, #28
 800993c:	e7b0      	b.n	80098a0 <validate_structure+0x108>
 800993e:	231d      	movs	r3, #29
 8009940:	e7ae      	b.n	80098a0 <validate_structure+0x108>
 8009942:	bf00      	nop
 8009944:	0800b040 	.word	0x0800b040

08009948 <mktime>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	b08b      	sub	sp, #44	; 0x2c
 800994e:	4605      	mov	r5, r0
 8009950:	f000 fc2c 	bl	800a1ac <__gettzinfo>
 8009954:	4607      	mov	r7, r0
 8009956:	4628      	mov	r0, r5
 8009958:	f7ff ff1e 	bl	8009798 <validate_structure>
 800995c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009960:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8009964:	68a8      	ldr	r0, [r5, #8]
 8009966:	696e      	ldr	r6, [r5, #20]
 8009968:	fb0a 2303 	mla	r3, sl, r3, r2
 800996c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8009970:	fb0a 3a00 	mla	sl, sl, r0, r3
 8009974:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8009978:	4ac3      	ldr	r2, [pc, #780]	; (8009c88 <mktime+0x340>)
 800997a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800997e:	3c01      	subs	r4, #1
 8009980:	2b01      	cmp	r3, #1
 8009982:	4414      	add	r4, r2
 8009984:	dd11      	ble.n	80099aa <mktime+0x62>
 8009986:	07b1      	lsls	r1, r6, #30
 8009988:	d10f      	bne.n	80099aa <mktime+0x62>
 800998a:	2264      	movs	r2, #100	; 0x64
 800998c:	fb96 f3f2 	sdiv	r3, r6, r2
 8009990:	fb02 6313 	mls	r3, r2, r3, r6
 8009994:	b943      	cbnz	r3, 80099a8 <mktime+0x60>
 8009996:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 800999a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800999e:	fb91 f3f2 	sdiv	r3, r1, r2
 80099a2:	fb02 1313 	mls	r3, r2, r3, r1
 80099a6:	b903      	cbnz	r3, 80099aa <mktime+0x62>
 80099a8:	3401      	adds	r4, #1
 80099aa:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80099ae:	3310      	adds	r3, #16
 80099b0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80099b4:	4293      	cmp	r3, r2
 80099b6:	61ec      	str	r4, [r5, #28]
 80099b8:	f200 8161 	bhi.w	8009c7e <mktime+0x336>
 80099bc:	2e46      	cmp	r6, #70	; 0x46
 80099be:	dd77      	ble.n	8009ab0 <mktime+0x168>
 80099c0:	2346      	movs	r3, #70	; 0x46
 80099c2:	f240 1e6d 	movw	lr, #365	; 0x16d
 80099c6:	2164      	movs	r1, #100	; 0x64
 80099c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80099cc:	079a      	lsls	r2, r3, #30
 80099ce:	d169      	bne.n	8009aa4 <mktime+0x15c>
 80099d0:	fb93 f2f1 	sdiv	r2, r3, r1
 80099d4:	fb01 3212 	mls	r2, r1, r2, r3
 80099d8:	2a00      	cmp	r2, #0
 80099da:	d166      	bne.n	8009aaa <mktime+0x162>
 80099dc:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80099e0:	fb9c f2f0 	sdiv	r2, ip, r0
 80099e4:	fb00 c212 	mls	r2, r0, r2, ip
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	bf14      	ite	ne
 80099ec:	4672      	movne	r2, lr
 80099ee:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80099f2:	3301      	adds	r3, #1
 80099f4:	429e      	cmp	r6, r3
 80099f6:	4414      	add	r4, r2
 80099f8:	d1e8      	bne.n	80099cc <mktime+0x84>
 80099fa:	4ba4      	ldr	r3, [pc, #656]	; (8009c8c <mktime+0x344>)
 80099fc:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8009a00:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8009a04:	f000 f9ee 	bl	8009de4 <__tz_lock>
 8009a08:	f000 f9f8 	bl	8009dfc <_tzset_unlocked>
 8009a0c:	4ba0      	ldr	r3, [pc, #640]	; (8009c90 <mktime+0x348>)
 8009a0e:	f8d3 9000 	ldr.w	r9, [r3]
 8009a12:	f1b9 0f00 	cmp.w	r9, #0
 8009a16:	d03f      	beq.n	8009a98 <mktime+0x150>
 8009a18:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8009a1c:	6968      	ldr	r0, [r5, #20]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f1b9 0f01 	cmp.w	r9, #1
 8009a24:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009a28:	46c8      	mov	r8, r9
 8009a2a:	bfa8      	it	ge
 8009a2c:	f04f 0801 	movge.w	r8, #1
 8009a30:	4283      	cmp	r3, r0
 8009a32:	d17f      	bne.n	8009b34 <mktime+0x1ec>
 8009a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a36:	4619      	mov	r1, r3
 8009a38:	17da      	asrs	r2, r3, #31
 8009a3a:	e9cd 1200 	strd	r1, r2, [sp]
 8009a3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009a42:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a4c:	1a80      	subs	r0, r0, r2
 8009a4e:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8009a52:	4582      	cmp	sl, r0
 8009a54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a58:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009a5c:	da71      	bge.n	8009b42 <mktime+0x1fa>
 8009a5e:	9800      	ldr	r0, [sp, #0]
 8009a60:	6a39      	ldr	r1, [r7, #32]
 8009a62:	1a09      	subs	r1, r1, r0
 8009a64:	9104      	str	r1, [sp, #16]
 8009a66:	9801      	ldr	r0, [sp, #4]
 8009a68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a6a:	eb61 0100 	sbc.w	r1, r1, r0
 8009a6e:	9105      	str	r1, [sp, #20]
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	2900      	cmp	r1, #0
 8009a74:	d075      	beq.n	8009b62 <mktime+0x21a>
 8009a76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a7a:	4582      	cmp	sl, r0
 8009a7c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009a80:	db05      	blt.n	8009a8e <mktime+0x146>
 8009a82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a86:	4582      	cmp	sl, r0
 8009a88:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009a8c:	db6f      	blt.n	8009b6e <mktime+0x226>
 8009a8e:	f1b9 0f00 	cmp.w	r9, #0
 8009a92:	f04f 0900 	mov.w	r9, #0
 8009a96:	da6f      	bge.n	8009b78 <mktime+0x230>
 8009a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9a:	eb1a 0a03 	adds.w	sl, sl, r3
 8009a9e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009aa2:	e0ae      	b.n	8009c02 <mktime+0x2ba>
 8009aa4:	f240 126d 	movw	r2, #365	; 0x16d
 8009aa8:	e7a3      	b.n	80099f2 <mktime+0xaa>
 8009aaa:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009aae:	e7a0      	b.n	80099f2 <mktime+0xaa>
 8009ab0:	d0a3      	beq.n	80099fa <mktime+0xb2>
 8009ab2:	2345      	movs	r3, #69	; 0x45
 8009ab4:	f240 1e6d 	movw	lr, #365	; 0x16d
 8009ab8:	2164      	movs	r1, #100	; 0x64
 8009aba:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009abe:	e012      	b.n	8009ae6 <mktime+0x19e>
 8009ac0:	bb62      	cbnz	r2, 8009b1c <mktime+0x1d4>
 8009ac2:	fb93 f2f1 	sdiv	r2, r3, r1
 8009ac6:	fb01 3212 	mls	r2, r1, r2, r3
 8009aca:	bb52      	cbnz	r2, 8009b22 <mktime+0x1da>
 8009acc:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8009ad0:	fb9c f2f0 	sdiv	r2, ip, r0
 8009ad4:	fb00 c212 	mls	r2, r0, r2, ip
 8009ad8:	2a00      	cmp	r2, #0
 8009ada:	bf14      	ite	ne
 8009adc:	4672      	movne	r2, lr
 8009ade:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009ae2:	1aa4      	subs	r4, r4, r2
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	429e      	cmp	r6, r3
 8009ae8:	f003 0203 	and.w	r2, r3, #3
 8009aec:	dbe8      	blt.n	8009ac0 <mktime+0x178>
 8009aee:	b9da      	cbnz	r2, 8009b28 <mktime+0x1e0>
 8009af0:	2264      	movs	r2, #100	; 0x64
 8009af2:	fb96 f3f2 	sdiv	r3, r6, r2
 8009af6:	fb02 6313 	mls	r3, r2, r3, r6
 8009afa:	b9c3      	cbnz	r3, 8009b2e <mktime+0x1e6>
 8009afc:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8009b00:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b04:	fb91 f3f2 	sdiv	r3, r1, r2
 8009b08:	fb02 1313 	mls	r3, r2, r3, r1
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f240 136d 	movw	r3, #365	; 0x16d
 8009b12:	bf08      	it	eq
 8009b14:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009b18:	1ae4      	subs	r4, r4, r3
 8009b1a:	e76e      	b.n	80099fa <mktime+0xb2>
 8009b1c:	f240 126d 	movw	r2, #365	; 0x16d
 8009b20:	e7df      	b.n	8009ae2 <mktime+0x19a>
 8009b22:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009b26:	e7dc      	b.n	8009ae2 <mktime+0x19a>
 8009b28:	f240 136d 	movw	r3, #365	; 0x16d
 8009b2c:	e7f4      	b.n	8009b18 <mktime+0x1d0>
 8009b2e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009b32:	e7f1      	b.n	8009b18 <mktime+0x1d0>
 8009b34:	f000 f8ae 	bl	8009c94 <__tzcalc_limits>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	f47f af7b 	bne.w	8009a34 <mktime+0xec>
 8009b3e:	46c1      	mov	r9, r8
 8009b40:	e054      	b.n	8009bec <mktime+0x2a4>
 8009b42:	9800      	ldr	r0, [sp, #0]
 8009b44:	9902      	ldr	r1, [sp, #8]
 8009b46:	1a09      	subs	r1, r1, r0
 8009b48:	9108      	str	r1, [sp, #32]
 8009b4a:	9801      	ldr	r0, [sp, #4]
 8009b4c:	9903      	ldr	r1, [sp, #12]
 8009b4e:	eb61 0100 	sbc.w	r1, r1, r0
 8009b52:	9109      	str	r1, [sp, #36]	; 0x24
 8009b54:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b58:	4582      	cmp	sl, r0
 8009b5a:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009b5e:	dbee      	blt.n	8009b3e <mktime+0x1f6>
 8009b60:	e77d      	b.n	8009a5e <mktime+0x116>
 8009b62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b66:	4582      	cmp	sl, r0
 8009b68:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009b6c:	db89      	blt.n	8009a82 <mktime+0x13a>
 8009b6e:	f1b9 0f00 	cmp.w	r9, #0
 8009b72:	db3f      	blt.n	8009bf4 <mktime+0x2ac>
 8009b74:	f04f 0901 	mov.w	r9, #1
 8009b78:	ea88 0809 	eor.w	r8, r8, r9
 8009b7c:	f1b8 0f01 	cmp.w	r8, #1
 8009b80:	d134      	bne.n	8009bec <mktime+0x2a4>
 8009b82:	f1b9 0f00 	cmp.w	r9, #0
 8009b86:	d04f      	beq.n	8009c28 <mktime+0x2e0>
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	682a      	ldr	r2, [r5, #0]
 8009b8c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8009b90:	441a      	add	r2, r3
 8009b92:	eb1a 0a03 	adds.w	sl, sl, r3
 8009b96:	602a      	str	r2, [r5, #0]
 8009b98:	4628      	mov	r0, r5
 8009b9a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009b9e:	f7ff fdfb 	bl	8009798 <validate_structure>
 8009ba2:	68ea      	ldr	r2, [r5, #12]
 8009ba4:	ebb2 0208 	subs.w	r2, r2, r8
 8009ba8:	d020      	beq.n	8009bec <mktime+0x2a4>
 8009baa:	2a01      	cmp	r2, #1
 8009bac:	dc3e      	bgt.n	8009c2c <mktime+0x2e4>
 8009bae:	1c90      	adds	r0, r2, #2
 8009bb0:	bfd8      	it	le
 8009bb2:	2201      	movle	r2, #1
 8009bb4:	69eb      	ldr	r3, [r5, #28]
 8009bb6:	18d3      	adds	r3, r2, r3
 8009bb8:	4414      	add	r4, r2
 8009bba:	d540      	bpl.n	8009c3e <mktime+0x2f6>
 8009bbc:	1e72      	subs	r2, r6, #1
 8009bbe:	0791      	lsls	r1, r2, #30
 8009bc0:	d137      	bne.n	8009c32 <mktime+0x2ea>
 8009bc2:	2164      	movs	r1, #100	; 0x64
 8009bc4:	fb92 f3f1 	sdiv	r3, r2, r1
 8009bc8:	fb01 2313 	mls	r3, r1, r3, r2
 8009bcc:	bba3      	cbnz	r3, 8009c38 <mktime+0x2f0>
 8009bce:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8009bd2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009bd6:	fb96 f3f2 	sdiv	r3, r6, r2
 8009bda:	fb02 6613 	mls	r6, r2, r3, r6
 8009bde:	2e00      	cmp	r6, #0
 8009be0:	f240 136d 	movw	r3, #365	; 0x16d
 8009be4:	bf18      	it	ne
 8009be6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009bea:	61eb      	str	r3, [r5, #28]
 8009bec:	f1b9 0f01 	cmp.w	r9, #1
 8009bf0:	f47f af52 	bne.w	8009a98 <mktime+0x150>
 8009bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bf6:	eb1a 0a03 	adds.w	sl, sl, r3
 8009bfa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009bfe:	f04f 0901 	mov.w	r9, #1
 8009c02:	f000 f8f5 	bl	8009df0 <__tz_unlock>
 8009c06:	3404      	adds	r4, #4
 8009c08:	2307      	movs	r3, #7
 8009c0a:	fb94 f3f3 	sdiv	r3, r4, r3
 8009c0e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009c12:	1ae4      	subs	r4, r4, r3
 8009c14:	bf48      	it	mi
 8009c16:	3407      	addmi	r4, #7
 8009c18:	f8c5 9020 	str.w	r9, [r5, #32]
 8009c1c:	61ac      	str	r4, [r5, #24]
 8009c1e:	4650      	mov	r0, sl
 8009c20:	4659      	mov	r1, fp
 8009c22:	b00b      	add	sp, #44	; 0x2c
 8009c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c28:	1a9b      	subs	r3, r3, r2
 8009c2a:	e7ae      	b.n	8009b8a <mktime+0x242>
 8009c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c30:	e7c0      	b.n	8009bb4 <mktime+0x26c>
 8009c32:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009c36:	e7d8      	b.n	8009bea <mktime+0x2a2>
 8009c38:	f240 136d 	movw	r3, #365	; 0x16d
 8009c3c:	e7d5      	b.n	8009bea <mktime+0x2a2>
 8009c3e:	07b2      	lsls	r2, r6, #30
 8009c40:	d117      	bne.n	8009c72 <mktime+0x32a>
 8009c42:	2164      	movs	r1, #100	; 0x64
 8009c44:	fb96 f2f1 	sdiv	r2, r6, r1
 8009c48:	fb01 6212 	mls	r2, r1, r2, r6
 8009c4c:	b9a2      	cbnz	r2, 8009c78 <mktime+0x330>
 8009c4e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8009c52:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009c56:	fb96 f2f1 	sdiv	r2, r6, r1
 8009c5a:	fb01 6612 	mls	r6, r1, r2, r6
 8009c5e:	2e00      	cmp	r6, #0
 8009c60:	f240 126d 	movw	r2, #365	; 0x16d
 8009c64:	bf08      	it	eq
 8009c66:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	bfa8      	it	ge
 8009c6e:	1a9b      	subge	r3, r3, r2
 8009c70:	e7bb      	b.n	8009bea <mktime+0x2a2>
 8009c72:	f240 126d 	movw	r2, #365	; 0x16d
 8009c76:	e7f8      	b.n	8009c6a <mktime+0x322>
 8009c78:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009c7c:	e7f5      	b.n	8009c6a <mktime+0x322>
 8009c7e:	f04f 3aff 	mov.w	sl, #4294967295
 8009c82:	f04f 3bff 	mov.w	fp, #4294967295
 8009c86:	e7ca      	b.n	8009c1e <mktime+0x2d6>
 8009c88:	0800b070 	.word	0x0800b070
 8009c8c:	00015180 	.word	0x00015180
 8009c90:	20000414 	.word	0x20000414

08009c94 <__tzcalc_limits>:
 8009c94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	4680      	mov	r8, r0
 8009c9a:	f000 fa87 	bl	800a1ac <__gettzinfo>
 8009c9e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009ca2:	4598      	cmp	r8, r3
 8009ca4:	f340 8098 	ble.w	8009dd8 <__tzcalc_limits+0x144>
 8009ca8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8009cac:	4443      	add	r3, r8
 8009cae:	109b      	asrs	r3, r3, #2
 8009cb0:	f240 126d 	movw	r2, #365	; 0x16d
 8009cb4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8009cb8:	fb02 3505 	mla	r5, r2, r5, r3
 8009cbc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009cc0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8009cc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cc8:	441d      	add	r5, r3
 8009cca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009cce:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8009cd2:	fb98 f7f3 	sdiv	r7, r8, r3
 8009cd6:	fb03 8717 	mls	r7, r3, r7, r8
 8009cda:	4442      	add	r2, r8
 8009cdc:	fab7 fc87 	clz	ip, r7
 8009ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ce4:	f008 0303 	and.w	r3, r8, #3
 8009ce8:	4415      	add	r5, r2
 8009cea:	2264      	movs	r2, #100	; 0x64
 8009cec:	f8c0 8004 	str.w	r8, [r0, #4]
 8009cf0:	fb98 f6f2 	sdiv	r6, r8, r2
 8009cf4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009cf8:	fb02 8616 	mls	r6, r2, r6, r8
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009d02:	9300      	str	r3, [sp, #0]
 8009d04:	f04f 0e07 	mov.w	lr, #7
 8009d08:	7a22      	ldrb	r2, [r4, #8]
 8009d0a:	6963      	ldr	r3, [r4, #20]
 8009d0c:	2a4a      	cmp	r2, #74	; 0x4a
 8009d0e:	d128      	bne.n	8009d62 <__tzcalc_limits+0xce>
 8009d10:	9900      	ldr	r1, [sp, #0]
 8009d12:	18ea      	adds	r2, r5, r3
 8009d14:	b901      	cbnz	r1, 8009d18 <__tzcalc_limits+0x84>
 8009d16:	b906      	cbnz	r6, 8009d1a <__tzcalc_limits+0x86>
 8009d18:	bb0f      	cbnz	r7, 8009d5e <__tzcalc_limits+0xca>
 8009d1a:	2b3b      	cmp	r3, #59	; 0x3b
 8009d1c:	bfd4      	ite	le
 8009d1e:	2300      	movle	r3, #0
 8009d20:	2301      	movgt	r3, #1
 8009d22:	4413      	add	r3, r2
 8009d24:	1e5a      	subs	r2, r3, #1
 8009d26:	69a3      	ldr	r3, [r4, #24]
 8009d28:	492c      	ldr	r1, [pc, #176]	; (8009ddc <__tzcalc_limits+0x148>)
 8009d2a:	fb01 3202 	mla	r2, r1, r2, r3
 8009d2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d30:	4413      	add	r3, r2
 8009d32:	461a      	mov	r2, r3
 8009d34:	17db      	asrs	r3, r3, #31
 8009d36:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009d3a:	3428      	adds	r4, #40	; 0x28
 8009d3c:	45a3      	cmp	fp, r4
 8009d3e:	d1e3      	bne.n	8009d08 <__tzcalc_limits+0x74>
 8009d40:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8009d44:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8009d48:	4294      	cmp	r4, r2
 8009d4a:	eb75 0303 	sbcs.w	r3, r5, r3
 8009d4e:	bfb4      	ite	lt
 8009d50:	2301      	movlt	r3, #1
 8009d52:	2300      	movge	r3, #0
 8009d54:	6003      	str	r3, [r0, #0]
 8009d56:	2001      	movs	r0, #1
 8009d58:	b003      	add	sp, #12
 8009d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e7df      	b.n	8009d22 <__tzcalc_limits+0x8e>
 8009d62:	2a44      	cmp	r2, #68	; 0x44
 8009d64:	d101      	bne.n	8009d6a <__tzcalc_limits+0xd6>
 8009d66:	18ea      	adds	r2, r5, r3
 8009d68:	e7dd      	b.n	8009d26 <__tzcalc_limits+0x92>
 8009d6a:	9a00      	ldr	r2, [sp, #0]
 8009d6c:	bb72      	cbnz	r2, 8009dcc <__tzcalc_limits+0x138>
 8009d6e:	2e00      	cmp	r6, #0
 8009d70:	bf0c      	ite	eq
 8009d72:	46e0      	moveq	r8, ip
 8009d74:	f04f 0801 	movne.w	r8, #1
 8009d78:	4919      	ldr	r1, [pc, #100]	; (8009de0 <__tzcalc_limits+0x14c>)
 8009d7a:	68e2      	ldr	r2, [r4, #12]
 8009d7c:	9201      	str	r2, [sp, #4]
 8009d7e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8009d82:	fb0a 1808 	mla	r8, sl, r8, r1
 8009d86:	462a      	mov	r2, r5
 8009d88:	f04f 0900 	mov.w	r9, #0
 8009d8c:	f1a8 0804 	sub.w	r8, r8, #4
 8009d90:	9901      	ldr	r1, [sp, #4]
 8009d92:	f109 0901 	add.w	r9, r9, #1
 8009d96:	4549      	cmp	r1, r9
 8009d98:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8009d9c:	dc18      	bgt.n	8009dd0 <__tzcalc_limits+0x13c>
 8009d9e:	f102 0804 	add.w	r8, r2, #4
 8009da2:	fb98 f9fe 	sdiv	r9, r8, lr
 8009da6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8009daa:	eba8 0909 	sub.w	r9, r8, r9
 8009dae:	ebb3 0909 	subs.w	r9, r3, r9
 8009db2:	6923      	ldr	r3, [r4, #16]
 8009db4:	f103 33ff 	add.w	r3, r3, #4294967295
 8009db8:	bf48      	it	mi
 8009dba:	f109 0907 	addmi.w	r9, r9, #7
 8009dbe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009dc2:	444b      	add	r3, r9
 8009dc4:	4553      	cmp	r3, sl
 8009dc6:	da05      	bge.n	8009dd4 <__tzcalc_limits+0x140>
 8009dc8:	441a      	add	r2, r3
 8009dca:	e7ac      	b.n	8009d26 <__tzcalc_limits+0x92>
 8009dcc:	46e0      	mov	r8, ip
 8009dce:	e7d3      	b.n	8009d78 <__tzcalc_limits+0xe4>
 8009dd0:	4452      	add	r2, sl
 8009dd2:	e7dd      	b.n	8009d90 <__tzcalc_limits+0xfc>
 8009dd4:	3b07      	subs	r3, #7
 8009dd6:	e7f5      	b.n	8009dc4 <__tzcalc_limits+0x130>
 8009dd8:	2000      	movs	r0, #0
 8009dda:	e7bd      	b.n	8009d58 <__tzcalc_limits+0xc4>
 8009ddc:	00015180 	.word	0x00015180
 8009de0:	0800b13c 	.word	0x0800b13c

08009de4 <__tz_lock>:
 8009de4:	4801      	ldr	r0, [pc, #4]	; (8009dec <__tz_lock+0x8>)
 8009de6:	f000 b9e5 	b.w	800a1b4 <__retarget_lock_acquire>
 8009dea:	bf00      	nop
 8009dec:	20000757 	.word	0x20000757

08009df0 <__tz_unlock>:
 8009df0:	4801      	ldr	r0, [pc, #4]	; (8009df8 <__tz_unlock+0x8>)
 8009df2:	f000 b9e1 	b.w	800a1b8 <__retarget_lock_release>
 8009df6:	bf00      	nop
 8009df8:	20000757 	.word	0x20000757

08009dfc <_tzset_unlocked>:
 8009dfc:	4b01      	ldr	r3, [pc, #4]	; (8009e04 <_tzset_unlocked+0x8>)
 8009dfe:	6818      	ldr	r0, [r3, #0]
 8009e00:	f000 b802 	b.w	8009e08 <_tzset_unlocked_r>
 8009e04:	2000005c 	.word	0x2000005c

08009e08 <_tzset_unlocked_r>:
 8009e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0c:	b08d      	sub	sp, #52	; 0x34
 8009e0e:	4607      	mov	r7, r0
 8009e10:	f000 f9cc 	bl	800a1ac <__gettzinfo>
 8009e14:	49ae      	ldr	r1, [pc, #696]	; (800a0d0 <_tzset_unlocked_r+0x2c8>)
 8009e16:	4eaf      	ldr	r6, [pc, #700]	; (800a0d4 <_tzset_unlocked_r+0x2cc>)
 8009e18:	4605      	mov	r5, r0
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f000 f9be 	bl	800a19c <_getenv_r>
 8009e20:	4604      	mov	r4, r0
 8009e22:	b970      	cbnz	r0, 8009e42 <_tzset_unlocked_r+0x3a>
 8009e24:	4bac      	ldr	r3, [pc, #688]	; (800a0d8 <_tzset_unlocked_r+0x2d0>)
 8009e26:	4aad      	ldr	r2, [pc, #692]	; (800a0dc <_tzset_unlocked_r+0x2d4>)
 8009e28:	6018      	str	r0, [r3, #0]
 8009e2a:	4bad      	ldr	r3, [pc, #692]	; (800a0e0 <_tzset_unlocked_r+0x2d8>)
 8009e2c:	6018      	str	r0, [r3, #0]
 8009e2e:	4bad      	ldr	r3, [pc, #692]	; (800a0e4 <_tzset_unlocked_r+0x2dc>)
 8009e30:	6830      	ldr	r0, [r6, #0]
 8009e32:	e9c3 2200 	strd	r2, r2, [r3]
 8009e36:	f000 f9c1 	bl	800a1bc <free>
 8009e3a:	6034      	str	r4, [r6, #0]
 8009e3c:	b00d      	add	sp, #52	; 0x34
 8009e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e42:	6831      	ldr	r1, [r6, #0]
 8009e44:	2900      	cmp	r1, #0
 8009e46:	d15f      	bne.n	8009f08 <_tzset_unlocked_r+0x100>
 8009e48:	6830      	ldr	r0, [r6, #0]
 8009e4a:	f000 f9b7 	bl	800a1bc <free>
 8009e4e:	4620      	mov	r0, r4
 8009e50:	f7f6 f996 	bl	8000180 <strlen>
 8009e54:	1c41      	adds	r1, r0, #1
 8009e56:	4638      	mov	r0, r7
 8009e58:	f000 fa08 	bl	800a26c <_malloc_r>
 8009e5c:	6030      	str	r0, [r6, #0]
 8009e5e:	2800      	cmp	r0, #0
 8009e60:	d157      	bne.n	8009f12 <_tzset_unlocked_r+0x10a>
 8009e62:	7823      	ldrb	r3, [r4, #0]
 8009e64:	4aa0      	ldr	r2, [pc, #640]	; (800a0e8 <_tzset_unlocked_r+0x2e0>)
 8009e66:	49a1      	ldr	r1, [pc, #644]	; (800a0ec <_tzset_unlocked_r+0x2e4>)
 8009e68:	2b3a      	cmp	r3, #58	; 0x3a
 8009e6a:	bf08      	it	eq
 8009e6c:	3401      	addeq	r4, #1
 8009e6e:	ae0a      	add	r6, sp, #40	; 0x28
 8009e70:	4633      	mov	r3, r6
 8009e72:	4620      	mov	r0, r4
 8009e74:	f000 fa64 	bl	800a340 <siscanf>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	dddf      	ble.n	8009e3c <_tzset_unlocked_r+0x34>
 8009e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7e:	18e7      	adds	r7, r4, r3
 8009e80:	5ce3      	ldrb	r3, [r4, r3]
 8009e82:	2b2d      	cmp	r3, #45	; 0x2d
 8009e84:	d149      	bne.n	8009f1a <_tzset_unlocked_r+0x112>
 8009e86:	3701      	adds	r7, #1
 8009e88:	f04f 34ff 	mov.w	r4, #4294967295
 8009e8c:	f10d 0a20 	add.w	sl, sp, #32
 8009e90:	f10d 0b1e 	add.w	fp, sp, #30
 8009e94:	f04f 0800 	mov.w	r8, #0
 8009e98:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009e9c:	4994      	ldr	r1, [pc, #592]	; (800a0f0 <_tzset_unlocked_r+0x2e8>)
 8009e9e:	9603      	str	r6, [sp, #12]
 8009ea0:	f8cd b000 	str.w	fp, [sp]
 8009ea4:	4633      	mov	r3, r6
 8009ea6:	aa07      	add	r2, sp, #28
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	f8ad 801e 	strh.w	r8, [sp, #30]
 8009eae:	f8ad 8020 	strh.w	r8, [sp, #32]
 8009eb2:	f000 fa45 	bl	800a340 <siscanf>
 8009eb6:	4540      	cmp	r0, r8
 8009eb8:	ddc0      	ble.n	8009e3c <_tzset_unlocked_r+0x34>
 8009eba:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009ebe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009ec2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800a0fc <_tzset_unlocked_r+0x2f4>
 8009ec6:	213c      	movs	r1, #60	; 0x3c
 8009ec8:	fb01 2203 	mla	r2, r1, r3, r2
 8009ecc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009ed0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009ed4:	fb01 2303 	mla	r3, r1, r3, r2
 8009ed8:	435c      	muls	r4, r3
 8009eda:	62ac      	str	r4, [r5, #40]	; 0x28
 8009edc:	4c81      	ldr	r4, [pc, #516]	; (800a0e4 <_tzset_unlocked_r+0x2dc>)
 8009ede:	4b82      	ldr	r3, [pc, #520]	; (800a0e8 <_tzset_unlocked_r+0x2e0>)
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee4:	4981      	ldr	r1, [pc, #516]	; (800a0ec <_tzset_unlocked_r+0x2e4>)
 8009ee6:	441f      	add	r7, r3
 8009ee8:	464a      	mov	r2, r9
 8009eea:	4633      	mov	r3, r6
 8009eec:	4638      	mov	r0, r7
 8009eee:	f000 fa27 	bl	800a340 <siscanf>
 8009ef2:	4540      	cmp	r0, r8
 8009ef4:	dc16      	bgt.n	8009f24 <_tzset_unlocked_r+0x11c>
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	4b77      	ldr	r3, [pc, #476]	; (800a0d8 <_tzset_unlocked_r+0x2d0>)
 8009efc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	4b77      	ldr	r3, [pc, #476]	; (800a0e0 <_tzset_unlocked_r+0x2d8>)
 8009f02:	f8c3 8000 	str.w	r8, [r3]
 8009f06:	e799      	b.n	8009e3c <_tzset_unlocked_r+0x34>
 8009f08:	f7f6 f942 	bl	8000190 <strcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d19b      	bne.n	8009e48 <_tzset_unlocked_r+0x40>
 8009f10:	e794      	b.n	8009e3c <_tzset_unlocked_r+0x34>
 8009f12:	4621      	mov	r1, r4
 8009f14:	f000 fa42 	bl	800a39c <strcpy>
 8009f18:	e7a3      	b.n	8009e62 <_tzset_unlocked_r+0x5a>
 8009f1a:	2b2b      	cmp	r3, #43	; 0x2b
 8009f1c:	bf08      	it	eq
 8009f1e:	3701      	addeq	r7, #1
 8009f20:	2401      	movs	r4, #1
 8009f22:	e7b3      	b.n	8009e8c <_tzset_unlocked_r+0x84>
 8009f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f26:	f8c4 9004 	str.w	r9, [r4, #4]
 8009f2a:	18fc      	adds	r4, r7, r3
 8009f2c:	5cfb      	ldrb	r3, [r7, r3]
 8009f2e:	2b2d      	cmp	r3, #45	; 0x2d
 8009f30:	f040 808b 	bne.w	800a04a <_tzset_unlocked_r+0x242>
 8009f34:	3401      	adds	r4, #1
 8009f36:	f04f 37ff 	mov.w	r7, #4294967295
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f40:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009f44:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009f48:	930a      	str	r3, [sp, #40]	; 0x28
 8009f4a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009f4e:	e9cd b600 	strd	fp, r6, [sp]
 8009f52:	4967      	ldr	r1, [pc, #412]	; (800a0f0 <_tzset_unlocked_r+0x2e8>)
 8009f54:	4633      	mov	r3, r6
 8009f56:	aa07      	add	r2, sp, #28
 8009f58:	4620      	mov	r0, r4
 8009f5a:	f000 f9f1 	bl	800a340 <siscanf>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	dc78      	bgt.n	800a054 <_tzset_unlocked_r+0x24c>
 8009f62:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8009f64:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8009f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6a:	652f      	str	r7, [r5, #80]	; 0x50
 8009f6c:	441c      	add	r4, r3
 8009f6e:	462f      	mov	r7, r5
 8009f70:	f04f 0900 	mov.w	r9, #0
 8009f74:	7823      	ldrb	r3, [r4, #0]
 8009f76:	2b2c      	cmp	r3, #44	; 0x2c
 8009f78:	bf08      	it	eq
 8009f7a:	3401      	addeq	r4, #1
 8009f7c:	f894 8000 	ldrb.w	r8, [r4]
 8009f80:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009f84:	d178      	bne.n	800a078 <_tzset_unlocked_r+0x270>
 8009f86:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009f8a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009f8e:	ab09      	add	r3, sp, #36	; 0x24
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	4958      	ldr	r1, [pc, #352]	; (800a0f4 <_tzset_unlocked_r+0x2ec>)
 8009f94:	9603      	str	r6, [sp, #12]
 8009f96:	4633      	mov	r3, r6
 8009f98:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f000 f9cf 	bl	800a340 <siscanf>
 8009fa2:	2803      	cmp	r0, #3
 8009fa4:	f47f af4a 	bne.w	8009e3c <_tzset_unlocked_r+0x34>
 8009fa8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009fac:	1e4b      	subs	r3, r1, #1
 8009fae:	2b0b      	cmp	r3, #11
 8009fb0:	f63f af44 	bhi.w	8009e3c <_tzset_unlocked_r+0x34>
 8009fb4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009fb8:	1e53      	subs	r3, r2, #1
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	f63f af3e 	bhi.w	8009e3c <_tzset_unlocked_r+0x34>
 8009fc0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009fc4:	2b06      	cmp	r3, #6
 8009fc6:	f63f af39 	bhi.w	8009e3c <_tzset_unlocked_r+0x34>
 8009fca:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009fce:	f887 8008 	strb.w	r8, [r7, #8]
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd6:	eb04 0803 	add.w	r8, r4, r3
 8009fda:	2302      	movs	r3, #2
 8009fdc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009fe6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009fea:	930a      	str	r3, [sp, #40]	; 0x28
 8009fec:	f898 3000 	ldrb.w	r3, [r8]
 8009ff0:	2b2f      	cmp	r3, #47	; 0x2f
 8009ff2:	d109      	bne.n	800a008 <_tzset_unlocked_r+0x200>
 8009ff4:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009ff8:	e9cd b600 	strd	fp, r6, [sp]
 8009ffc:	493e      	ldr	r1, [pc, #248]	; (800a0f8 <_tzset_unlocked_r+0x2f0>)
 8009ffe:	4633      	mov	r3, r6
 800a000:	aa07      	add	r2, sp, #28
 800a002:	4640      	mov	r0, r8
 800a004:	f000 f99c 	bl	800a340 <siscanf>
 800a008:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a00c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a010:	213c      	movs	r1, #60	; 0x3c
 800a012:	fb01 2203 	mla	r2, r1, r3, r2
 800a016:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a01a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a01e:	fb01 2303 	mla	r3, r1, r3, r2
 800a022:	61bb      	str	r3, [r7, #24]
 800a024:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a026:	3728      	adds	r7, #40	; 0x28
 800a028:	4444      	add	r4, r8
 800a02a:	f1b9 0f00 	cmp.w	r9, #0
 800a02e:	d020      	beq.n	800a072 <_tzset_unlocked_r+0x26a>
 800a030:	6868      	ldr	r0, [r5, #4]
 800a032:	f7ff fe2f 	bl	8009c94 <__tzcalc_limits>
 800a036:	4b28      	ldr	r3, [pc, #160]	; (800a0d8 <_tzset_unlocked_r+0x2d0>)
 800a038:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a03a:	601a      	str	r2, [r3, #0]
 800a03c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a03e:	1a9b      	subs	r3, r3, r2
 800a040:	4a27      	ldr	r2, [pc, #156]	; (800a0e0 <_tzset_unlocked_r+0x2d8>)
 800a042:	bf18      	it	ne
 800a044:	2301      	movne	r3, #1
 800a046:	6013      	str	r3, [r2, #0]
 800a048:	e6f8      	b.n	8009e3c <_tzset_unlocked_r+0x34>
 800a04a:	2b2b      	cmp	r3, #43	; 0x2b
 800a04c:	bf08      	it	eq
 800a04e:	3401      	addeq	r4, #1
 800a050:	2701      	movs	r7, #1
 800a052:	e772      	b.n	8009f3a <_tzset_unlocked_r+0x132>
 800a054:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a058:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a05c:	213c      	movs	r1, #60	; 0x3c
 800a05e:	fb01 2203 	mla	r2, r1, r3, r2
 800a062:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a066:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a06a:	fb01 2303 	mla	r3, r1, r3, r2
 800a06e:	435f      	muls	r7, r3
 800a070:	e77a      	b.n	8009f68 <_tzset_unlocked_r+0x160>
 800a072:	f04f 0901 	mov.w	r9, #1
 800a076:	e77d      	b.n	8009f74 <_tzset_unlocked_r+0x16c>
 800a078:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a07c:	bf06      	itte	eq
 800a07e:	3401      	addeq	r4, #1
 800a080:	4643      	moveq	r3, r8
 800a082:	2344      	movne	r3, #68	; 0x44
 800a084:	220a      	movs	r2, #10
 800a086:	a90b      	add	r1, sp, #44	; 0x2c
 800a088:	4620      	mov	r0, r4
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	f000 fa1e 	bl	800a4cc <strtoul>
 800a090:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a094:	9b05      	ldr	r3, [sp, #20]
 800a096:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a09a:	45a0      	cmp	r8, r4
 800a09c:	d114      	bne.n	800a0c8 <_tzset_unlocked_r+0x2c0>
 800a09e:	234d      	movs	r3, #77	; 0x4d
 800a0a0:	f1b9 0f00 	cmp.w	r9, #0
 800a0a4:	d107      	bne.n	800a0b6 <_tzset_unlocked_r+0x2ae>
 800a0a6:	722b      	strb	r3, [r5, #8]
 800a0a8:	2103      	movs	r1, #3
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a0b0:	f8c5 9014 	str.w	r9, [r5, #20]
 800a0b4:	e791      	b.n	8009fda <_tzset_unlocked_r+0x1d2>
 800a0b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a0ba:	220b      	movs	r2, #11
 800a0bc:	2301      	movs	r3, #1
 800a0be:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a0c6:	e788      	b.n	8009fda <_tzset_unlocked_r+0x1d2>
 800a0c8:	b280      	uxth	r0, r0
 800a0ca:	723b      	strb	r3, [r7, #8]
 800a0cc:	6178      	str	r0, [r7, #20]
 800a0ce:	e784      	b.n	8009fda <_tzset_unlocked_r+0x1d2>
 800a0d0:	0800b0a0 	.word	0x0800b0a0
 800a0d4:	20000410 	.word	0x20000410
 800a0d8:	20000418 	.word	0x20000418
 800a0dc:	0800b0a3 	.word	0x0800b0a3
 800a0e0:	20000414 	.word	0x20000414
 800a0e4:	200000c0 	.word	0x200000c0
 800a0e8:	20000403 	.word	0x20000403
 800a0ec:	0800b0a7 	.word	0x0800b0a7
 800a0f0:	0800b0ca 	.word	0x0800b0ca
 800a0f4:	0800b0b6 	.word	0x0800b0b6
 800a0f8:	0800b0c9 	.word	0x0800b0c9
 800a0fc:	200003f8 	.word	0x200003f8

0800a100 <div>:
 800a100:	2900      	cmp	r1, #0
 800a102:	b510      	push	{r4, lr}
 800a104:	fb91 f4f2 	sdiv	r4, r1, r2
 800a108:	fb02 1314 	mls	r3, r2, r4, r1
 800a10c:	db06      	blt.n	800a11c <div+0x1c>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	da01      	bge.n	800a116 <div+0x16>
 800a112:	3401      	adds	r4, #1
 800a114:	1a9b      	subs	r3, r3, r2
 800a116:	e9c0 4300 	strd	r4, r3, [r0]
 800a11a:	bd10      	pop	{r4, pc}
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfc4      	itt	gt
 800a120:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800a124:	189b      	addgt	r3, r3, r2
 800a126:	e7f6      	b.n	800a116 <div+0x16>

0800a128 <_findenv_r>:
 800a128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	4607      	mov	r7, r0
 800a12e:	4689      	mov	r9, r1
 800a130:	4616      	mov	r6, r2
 800a132:	f000 f9d5 	bl	800a4e0 <__env_lock>
 800a136:	4b18      	ldr	r3, [pc, #96]	; (800a198 <_findenv_r+0x70>)
 800a138:	681c      	ldr	r4, [r3, #0]
 800a13a:	469a      	mov	sl, r3
 800a13c:	b134      	cbz	r4, 800a14c <_findenv_r+0x24>
 800a13e:	464b      	mov	r3, r9
 800a140:	4698      	mov	r8, r3
 800a142:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a146:	b139      	cbz	r1, 800a158 <_findenv_r+0x30>
 800a148:	293d      	cmp	r1, #61	; 0x3d
 800a14a:	d1f9      	bne.n	800a140 <_findenv_r+0x18>
 800a14c:	4638      	mov	r0, r7
 800a14e:	f000 f9cd 	bl	800a4ec <__env_unlock>
 800a152:	2000      	movs	r0, #0
 800a154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a158:	eba8 0809 	sub.w	r8, r8, r9
 800a15c:	46a3      	mov	fp, r4
 800a15e:	f854 0b04 	ldr.w	r0, [r4], #4
 800a162:	2800      	cmp	r0, #0
 800a164:	d0f2      	beq.n	800a14c <_findenv_r+0x24>
 800a166:	4642      	mov	r2, r8
 800a168:	4649      	mov	r1, r9
 800a16a:	f000 f91f 	bl	800a3ac <strncmp>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d1f4      	bne.n	800a15c <_findenv_r+0x34>
 800a172:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a176:	eb03 0508 	add.w	r5, r3, r8
 800a17a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a17e:	2b3d      	cmp	r3, #61	; 0x3d
 800a180:	d1ec      	bne.n	800a15c <_findenv_r+0x34>
 800a182:	f8da 3000 	ldr.w	r3, [sl]
 800a186:	ebab 0303 	sub.w	r3, fp, r3
 800a18a:	109b      	asrs	r3, r3, #2
 800a18c:	4638      	mov	r0, r7
 800a18e:	6033      	str	r3, [r6, #0]
 800a190:	f000 f9ac 	bl	800a4ec <__env_unlock>
 800a194:	1c68      	adds	r0, r5, #1
 800a196:	e7dd      	b.n	800a154 <_findenv_r+0x2c>
 800a198:	20000008 	.word	0x20000008

0800a19c <_getenv_r>:
 800a19c:	b507      	push	{r0, r1, r2, lr}
 800a19e:	aa01      	add	r2, sp, #4
 800a1a0:	f7ff ffc2 	bl	800a128 <_findenv_r>
 800a1a4:	b003      	add	sp, #12
 800a1a6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a1ac <__gettzinfo>:
 800a1ac:	4800      	ldr	r0, [pc, #0]	; (800a1b0 <__gettzinfo+0x4>)
 800a1ae:	4770      	bx	lr
 800a1b0:	200000c8 	.word	0x200000c8

0800a1b4 <__retarget_lock_acquire>:
 800a1b4:	4770      	bx	lr

0800a1b6 <__retarget_lock_acquire_recursive>:
 800a1b6:	4770      	bx	lr

0800a1b8 <__retarget_lock_release>:
 800a1b8:	4770      	bx	lr

0800a1ba <__retarget_lock_release_recursive>:
 800a1ba:	4770      	bx	lr

0800a1bc <free>:
 800a1bc:	4b02      	ldr	r3, [pc, #8]	; (800a1c8 <free+0xc>)
 800a1be:	4601      	mov	r1, r0
 800a1c0:	6818      	ldr	r0, [r3, #0]
 800a1c2:	f000 b803 	b.w	800a1cc <_free_r>
 800a1c6:	bf00      	nop
 800a1c8:	2000005c 	.word	0x2000005c

0800a1cc <_free_r>:
 800a1cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1ce:	2900      	cmp	r1, #0
 800a1d0:	d048      	beq.n	800a264 <_free_r+0x98>
 800a1d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d6:	9001      	str	r0, [sp, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	f1a1 0404 	sub.w	r4, r1, #4
 800a1de:	bfb8      	it	lt
 800a1e0:	18e4      	addlt	r4, r4, r3
 800a1e2:	f000 f989 	bl	800a4f8 <__malloc_lock>
 800a1e6:	4a20      	ldr	r2, [pc, #128]	; (800a268 <_free_r+0x9c>)
 800a1e8:	9801      	ldr	r0, [sp, #4]
 800a1ea:	6813      	ldr	r3, [r2, #0]
 800a1ec:	4615      	mov	r5, r2
 800a1ee:	b933      	cbnz	r3, 800a1fe <_free_r+0x32>
 800a1f0:	6063      	str	r3, [r4, #4]
 800a1f2:	6014      	str	r4, [r2, #0]
 800a1f4:	b003      	add	sp, #12
 800a1f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a1fa:	f000 b983 	b.w	800a504 <__malloc_unlock>
 800a1fe:	42a3      	cmp	r3, r4
 800a200:	d90b      	bls.n	800a21a <_free_r+0x4e>
 800a202:	6821      	ldr	r1, [r4, #0]
 800a204:	1862      	adds	r2, r4, r1
 800a206:	4293      	cmp	r3, r2
 800a208:	bf04      	itt	eq
 800a20a:	681a      	ldreq	r2, [r3, #0]
 800a20c:	685b      	ldreq	r3, [r3, #4]
 800a20e:	6063      	str	r3, [r4, #4]
 800a210:	bf04      	itt	eq
 800a212:	1852      	addeq	r2, r2, r1
 800a214:	6022      	streq	r2, [r4, #0]
 800a216:	602c      	str	r4, [r5, #0]
 800a218:	e7ec      	b.n	800a1f4 <_free_r+0x28>
 800a21a:	461a      	mov	r2, r3
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	b10b      	cbz	r3, 800a224 <_free_r+0x58>
 800a220:	42a3      	cmp	r3, r4
 800a222:	d9fa      	bls.n	800a21a <_free_r+0x4e>
 800a224:	6811      	ldr	r1, [r2, #0]
 800a226:	1855      	adds	r5, r2, r1
 800a228:	42a5      	cmp	r5, r4
 800a22a:	d10b      	bne.n	800a244 <_free_r+0x78>
 800a22c:	6824      	ldr	r4, [r4, #0]
 800a22e:	4421      	add	r1, r4
 800a230:	1854      	adds	r4, r2, r1
 800a232:	42a3      	cmp	r3, r4
 800a234:	6011      	str	r1, [r2, #0]
 800a236:	d1dd      	bne.n	800a1f4 <_free_r+0x28>
 800a238:	681c      	ldr	r4, [r3, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	6053      	str	r3, [r2, #4]
 800a23e:	4421      	add	r1, r4
 800a240:	6011      	str	r1, [r2, #0]
 800a242:	e7d7      	b.n	800a1f4 <_free_r+0x28>
 800a244:	d902      	bls.n	800a24c <_free_r+0x80>
 800a246:	230c      	movs	r3, #12
 800a248:	6003      	str	r3, [r0, #0]
 800a24a:	e7d3      	b.n	800a1f4 <_free_r+0x28>
 800a24c:	6825      	ldr	r5, [r4, #0]
 800a24e:	1961      	adds	r1, r4, r5
 800a250:	428b      	cmp	r3, r1
 800a252:	bf04      	itt	eq
 800a254:	6819      	ldreq	r1, [r3, #0]
 800a256:	685b      	ldreq	r3, [r3, #4]
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	bf04      	itt	eq
 800a25c:	1949      	addeq	r1, r1, r5
 800a25e:	6021      	streq	r1, [r4, #0]
 800a260:	6054      	str	r4, [r2, #4]
 800a262:	e7c7      	b.n	800a1f4 <_free_r+0x28>
 800a264:	b003      	add	sp, #12
 800a266:	bd30      	pop	{r4, r5, pc}
 800a268:	2000041c 	.word	0x2000041c

0800a26c <_malloc_r>:
 800a26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26e:	1ccd      	adds	r5, r1, #3
 800a270:	f025 0503 	bic.w	r5, r5, #3
 800a274:	3508      	adds	r5, #8
 800a276:	2d0c      	cmp	r5, #12
 800a278:	bf38      	it	cc
 800a27a:	250c      	movcc	r5, #12
 800a27c:	2d00      	cmp	r5, #0
 800a27e:	4606      	mov	r6, r0
 800a280:	db01      	blt.n	800a286 <_malloc_r+0x1a>
 800a282:	42a9      	cmp	r1, r5
 800a284:	d903      	bls.n	800a28e <_malloc_r+0x22>
 800a286:	230c      	movs	r3, #12
 800a288:	6033      	str	r3, [r6, #0]
 800a28a:	2000      	movs	r0, #0
 800a28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a28e:	f000 f933 	bl	800a4f8 <__malloc_lock>
 800a292:	4921      	ldr	r1, [pc, #132]	; (800a318 <_malloc_r+0xac>)
 800a294:	680a      	ldr	r2, [r1, #0]
 800a296:	4614      	mov	r4, r2
 800a298:	b99c      	cbnz	r4, 800a2c2 <_malloc_r+0x56>
 800a29a:	4f20      	ldr	r7, [pc, #128]	; (800a31c <_malloc_r+0xb0>)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	b923      	cbnz	r3, 800a2aa <_malloc_r+0x3e>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f000 f83c 	bl	800a320 <_sbrk_r>
 800a2a8:	6038      	str	r0, [r7, #0]
 800a2aa:	4629      	mov	r1, r5
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f000 f837 	bl	800a320 <_sbrk_r>
 800a2b2:	1c43      	adds	r3, r0, #1
 800a2b4:	d123      	bne.n	800a2fe <_malloc_r+0x92>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	6033      	str	r3, [r6, #0]
 800a2ba:	4630      	mov	r0, r6
 800a2bc:	f000 f922 	bl	800a504 <__malloc_unlock>
 800a2c0:	e7e3      	b.n	800a28a <_malloc_r+0x1e>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	1b5b      	subs	r3, r3, r5
 800a2c6:	d417      	bmi.n	800a2f8 <_malloc_r+0x8c>
 800a2c8:	2b0b      	cmp	r3, #11
 800a2ca:	d903      	bls.n	800a2d4 <_malloc_r+0x68>
 800a2cc:	6023      	str	r3, [r4, #0]
 800a2ce:	441c      	add	r4, r3
 800a2d0:	6025      	str	r5, [r4, #0]
 800a2d2:	e004      	b.n	800a2de <_malloc_r+0x72>
 800a2d4:	6863      	ldr	r3, [r4, #4]
 800a2d6:	42a2      	cmp	r2, r4
 800a2d8:	bf0c      	ite	eq
 800a2da:	600b      	streq	r3, [r1, #0]
 800a2dc:	6053      	strne	r3, [r2, #4]
 800a2de:	4630      	mov	r0, r6
 800a2e0:	f000 f910 	bl	800a504 <__malloc_unlock>
 800a2e4:	f104 000b 	add.w	r0, r4, #11
 800a2e8:	1d23      	adds	r3, r4, #4
 800a2ea:	f020 0007 	bic.w	r0, r0, #7
 800a2ee:	1ac2      	subs	r2, r0, r3
 800a2f0:	d0cc      	beq.n	800a28c <_malloc_r+0x20>
 800a2f2:	1a1b      	subs	r3, r3, r0
 800a2f4:	50a3      	str	r3, [r4, r2]
 800a2f6:	e7c9      	b.n	800a28c <_malloc_r+0x20>
 800a2f8:	4622      	mov	r2, r4
 800a2fa:	6864      	ldr	r4, [r4, #4]
 800a2fc:	e7cc      	b.n	800a298 <_malloc_r+0x2c>
 800a2fe:	1cc4      	adds	r4, r0, #3
 800a300:	f024 0403 	bic.w	r4, r4, #3
 800a304:	42a0      	cmp	r0, r4
 800a306:	d0e3      	beq.n	800a2d0 <_malloc_r+0x64>
 800a308:	1a21      	subs	r1, r4, r0
 800a30a:	4630      	mov	r0, r6
 800a30c:	f000 f808 	bl	800a320 <_sbrk_r>
 800a310:	3001      	adds	r0, #1
 800a312:	d1dd      	bne.n	800a2d0 <_malloc_r+0x64>
 800a314:	e7cf      	b.n	800a2b6 <_malloc_r+0x4a>
 800a316:	bf00      	nop
 800a318:	2000041c 	.word	0x2000041c
 800a31c:	20000420 	.word	0x20000420

0800a320 <_sbrk_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4d06      	ldr	r5, [pc, #24]	; (800a33c <_sbrk_r+0x1c>)
 800a324:	2300      	movs	r3, #0
 800a326:	4604      	mov	r4, r0
 800a328:	4608      	mov	r0, r1
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	f7f8 f81a 	bl	8002364 <_sbrk>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d102      	bne.n	800a33a <_sbrk_r+0x1a>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	b103      	cbz	r3, 800a33a <_sbrk_r+0x1a>
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	2000075c 	.word	0x2000075c

0800a340 <siscanf>:
 800a340:	b40e      	push	{r1, r2, r3}
 800a342:	b510      	push	{r4, lr}
 800a344:	b09f      	sub	sp, #124	; 0x7c
 800a346:	ac21      	add	r4, sp, #132	; 0x84
 800a348:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a34c:	f854 2b04 	ldr.w	r2, [r4], #4
 800a350:	9201      	str	r2, [sp, #4]
 800a352:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a356:	9004      	str	r0, [sp, #16]
 800a358:	9008      	str	r0, [sp, #32]
 800a35a:	f7f5 ff11 	bl	8000180 <strlen>
 800a35e:	4b0c      	ldr	r3, [pc, #48]	; (800a390 <siscanf+0x50>)
 800a360:	9005      	str	r0, [sp, #20]
 800a362:	9009      	str	r0, [sp, #36]	; 0x24
 800a364:	930d      	str	r3, [sp, #52]	; 0x34
 800a366:	480b      	ldr	r0, [pc, #44]	; (800a394 <siscanf+0x54>)
 800a368:	9a01      	ldr	r2, [sp, #4]
 800a36a:	6800      	ldr	r0, [r0, #0]
 800a36c:	9403      	str	r4, [sp, #12]
 800a36e:	2300      	movs	r3, #0
 800a370:	9311      	str	r3, [sp, #68]	; 0x44
 800a372:	9316      	str	r3, [sp, #88]	; 0x58
 800a374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a378:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a37c:	a904      	add	r1, sp, #16
 800a37e:	4623      	mov	r3, r4
 800a380:	f000 f946 	bl	800a610 <__ssvfiscanf_r>
 800a384:	b01f      	add	sp, #124	; 0x7c
 800a386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a38a:	b003      	add	sp, #12
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	0800a399 	.word	0x0800a399
 800a394:	2000005c 	.word	0x2000005c

0800a398 <__seofread>:
 800a398:	2000      	movs	r0, #0
 800a39a:	4770      	bx	lr

0800a39c <strcpy>:
 800a39c:	4603      	mov	r3, r0
 800a39e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3a2:	f803 2b01 	strb.w	r2, [r3], #1
 800a3a6:	2a00      	cmp	r2, #0
 800a3a8:	d1f9      	bne.n	800a39e <strcpy+0x2>
 800a3aa:	4770      	bx	lr

0800a3ac <strncmp>:
 800a3ac:	b510      	push	{r4, lr}
 800a3ae:	b16a      	cbz	r2, 800a3cc <strncmp+0x20>
 800a3b0:	3901      	subs	r1, #1
 800a3b2:	1884      	adds	r4, r0, r2
 800a3b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a3b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d103      	bne.n	800a3c8 <strncmp+0x1c>
 800a3c0:	42a0      	cmp	r0, r4
 800a3c2:	d001      	beq.n	800a3c8 <strncmp+0x1c>
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1f5      	bne.n	800a3b4 <strncmp+0x8>
 800a3c8:	1a98      	subs	r0, r3, r2
 800a3ca:	bd10      	pop	{r4, pc}
 800a3cc:	4610      	mov	r0, r2
 800a3ce:	e7fc      	b.n	800a3ca <strncmp+0x1e>

0800a3d0 <_strtoul_l.isra.0>:
 800a3d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3d4:	4e3b      	ldr	r6, [pc, #236]	; (800a4c4 <_strtoul_l.isra.0+0xf4>)
 800a3d6:	4686      	mov	lr, r0
 800a3d8:	468c      	mov	ip, r1
 800a3da:	4660      	mov	r0, ip
 800a3dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a3e0:	5da5      	ldrb	r5, [r4, r6]
 800a3e2:	f015 0508 	ands.w	r5, r5, #8
 800a3e6:	d1f8      	bne.n	800a3da <_strtoul_l.isra.0+0xa>
 800a3e8:	2c2d      	cmp	r4, #45	; 0x2d
 800a3ea:	d134      	bne.n	800a456 <_strtoul_l.isra.0+0x86>
 800a3ec:	f89c 4000 	ldrb.w	r4, [ip]
 800a3f0:	f04f 0801 	mov.w	r8, #1
 800a3f4:	f100 0c02 	add.w	ip, r0, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d05e      	beq.n	800a4ba <_strtoul_l.isra.0+0xea>
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d10c      	bne.n	800a41a <_strtoul_l.isra.0+0x4a>
 800a400:	2c30      	cmp	r4, #48	; 0x30
 800a402:	d10a      	bne.n	800a41a <_strtoul_l.isra.0+0x4a>
 800a404:	f89c 0000 	ldrb.w	r0, [ip]
 800a408:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a40c:	2858      	cmp	r0, #88	; 0x58
 800a40e:	d14f      	bne.n	800a4b0 <_strtoul_l.isra.0+0xe0>
 800a410:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a414:	2310      	movs	r3, #16
 800a416:	f10c 0c02 	add.w	ip, ip, #2
 800a41a:	f04f 37ff 	mov.w	r7, #4294967295
 800a41e:	2500      	movs	r5, #0
 800a420:	fbb7 f7f3 	udiv	r7, r7, r3
 800a424:	fb03 f907 	mul.w	r9, r3, r7
 800a428:	ea6f 0909 	mvn.w	r9, r9
 800a42c:	4628      	mov	r0, r5
 800a42e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a432:	2e09      	cmp	r6, #9
 800a434:	d818      	bhi.n	800a468 <_strtoul_l.isra.0+0x98>
 800a436:	4634      	mov	r4, r6
 800a438:	42a3      	cmp	r3, r4
 800a43a:	dd24      	ble.n	800a486 <_strtoul_l.isra.0+0xb6>
 800a43c:	2d00      	cmp	r5, #0
 800a43e:	db1f      	blt.n	800a480 <_strtoul_l.isra.0+0xb0>
 800a440:	4287      	cmp	r7, r0
 800a442:	d31d      	bcc.n	800a480 <_strtoul_l.isra.0+0xb0>
 800a444:	d101      	bne.n	800a44a <_strtoul_l.isra.0+0x7a>
 800a446:	45a1      	cmp	r9, r4
 800a448:	db1a      	blt.n	800a480 <_strtoul_l.isra.0+0xb0>
 800a44a:	fb00 4003 	mla	r0, r0, r3, r4
 800a44e:	2501      	movs	r5, #1
 800a450:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a454:	e7eb      	b.n	800a42e <_strtoul_l.isra.0+0x5e>
 800a456:	2c2b      	cmp	r4, #43	; 0x2b
 800a458:	bf08      	it	eq
 800a45a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a45e:	46a8      	mov	r8, r5
 800a460:	bf08      	it	eq
 800a462:	f100 0c02 	addeq.w	ip, r0, #2
 800a466:	e7c7      	b.n	800a3f8 <_strtoul_l.isra.0+0x28>
 800a468:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a46c:	2e19      	cmp	r6, #25
 800a46e:	d801      	bhi.n	800a474 <_strtoul_l.isra.0+0xa4>
 800a470:	3c37      	subs	r4, #55	; 0x37
 800a472:	e7e1      	b.n	800a438 <_strtoul_l.isra.0+0x68>
 800a474:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a478:	2e19      	cmp	r6, #25
 800a47a:	d804      	bhi.n	800a486 <_strtoul_l.isra.0+0xb6>
 800a47c:	3c57      	subs	r4, #87	; 0x57
 800a47e:	e7db      	b.n	800a438 <_strtoul_l.isra.0+0x68>
 800a480:	f04f 35ff 	mov.w	r5, #4294967295
 800a484:	e7e4      	b.n	800a450 <_strtoul_l.isra.0+0x80>
 800a486:	2d00      	cmp	r5, #0
 800a488:	da07      	bge.n	800a49a <_strtoul_l.isra.0+0xca>
 800a48a:	2322      	movs	r3, #34	; 0x22
 800a48c:	f8ce 3000 	str.w	r3, [lr]
 800a490:	f04f 30ff 	mov.w	r0, #4294967295
 800a494:	b942      	cbnz	r2, 800a4a8 <_strtoul_l.isra.0+0xd8>
 800a496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a49a:	f1b8 0f00 	cmp.w	r8, #0
 800a49e:	d000      	beq.n	800a4a2 <_strtoul_l.isra.0+0xd2>
 800a4a0:	4240      	negs	r0, r0
 800a4a2:	2a00      	cmp	r2, #0
 800a4a4:	d0f7      	beq.n	800a496 <_strtoul_l.isra.0+0xc6>
 800a4a6:	b10d      	cbz	r5, 800a4ac <_strtoul_l.isra.0+0xdc>
 800a4a8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a4ac:	6011      	str	r1, [r2, #0]
 800a4ae:	e7f2      	b.n	800a496 <_strtoul_l.isra.0+0xc6>
 800a4b0:	2430      	movs	r4, #48	; 0x30
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1b1      	bne.n	800a41a <_strtoul_l.isra.0+0x4a>
 800a4b6:	2308      	movs	r3, #8
 800a4b8:	e7af      	b.n	800a41a <_strtoul_l.isra.0+0x4a>
 800a4ba:	2c30      	cmp	r4, #48	; 0x30
 800a4bc:	d0a2      	beq.n	800a404 <_strtoul_l.isra.0+0x34>
 800a4be:	230a      	movs	r3, #10
 800a4c0:	e7ab      	b.n	800a41a <_strtoul_l.isra.0+0x4a>
 800a4c2:	bf00      	nop
 800a4c4:	0800b19d 	.word	0x0800b19d

0800a4c8 <_strtoul_r>:
 800a4c8:	f7ff bf82 	b.w	800a3d0 <_strtoul_l.isra.0>

0800a4cc <strtoul>:
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	460a      	mov	r2, r1
 800a4d0:	4601      	mov	r1, r0
 800a4d2:	4802      	ldr	r0, [pc, #8]	; (800a4dc <strtoul+0x10>)
 800a4d4:	6800      	ldr	r0, [r0, #0]
 800a4d6:	f7ff bf7b 	b.w	800a3d0 <_strtoul_l.isra.0>
 800a4da:	bf00      	nop
 800a4dc:	2000005c 	.word	0x2000005c

0800a4e0 <__env_lock>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	; (800a4e8 <__env_lock+0x8>)
 800a4e2:	f7ff be68 	b.w	800a1b6 <__retarget_lock_acquire_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	20000752 	.word	0x20000752

0800a4ec <__env_unlock>:
 800a4ec:	4801      	ldr	r0, [pc, #4]	; (800a4f4 <__env_unlock+0x8>)
 800a4ee:	f7ff be64 	b.w	800a1ba <__retarget_lock_release_recursive>
 800a4f2:	bf00      	nop
 800a4f4:	20000752 	.word	0x20000752

0800a4f8 <__malloc_lock>:
 800a4f8:	4801      	ldr	r0, [pc, #4]	; (800a500 <__malloc_lock+0x8>)
 800a4fa:	f7ff be5c 	b.w	800a1b6 <__retarget_lock_acquire_recursive>
 800a4fe:	bf00      	nop
 800a500:	20000754 	.word	0x20000754

0800a504 <__malloc_unlock>:
 800a504:	4801      	ldr	r0, [pc, #4]	; (800a50c <__malloc_unlock+0x8>)
 800a506:	f7ff be58 	b.w	800a1ba <__retarget_lock_release_recursive>
 800a50a:	bf00      	nop
 800a50c:	20000754 	.word	0x20000754

0800a510 <_realloc_r>:
 800a510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a512:	4607      	mov	r7, r0
 800a514:	4614      	mov	r4, r2
 800a516:	460e      	mov	r6, r1
 800a518:	b921      	cbnz	r1, 800a524 <_realloc_r+0x14>
 800a51a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a51e:	4611      	mov	r1, r2
 800a520:	f7ff bea4 	b.w	800a26c <_malloc_r>
 800a524:	b922      	cbnz	r2, 800a530 <_realloc_r+0x20>
 800a526:	f7ff fe51 	bl	800a1cc <_free_r>
 800a52a:	4625      	mov	r5, r4
 800a52c:	4628      	mov	r0, r5
 800a52e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a530:	f000 fc2c 	bl	800ad8c <_malloc_usable_size_r>
 800a534:	42a0      	cmp	r0, r4
 800a536:	d20f      	bcs.n	800a558 <_realloc_r+0x48>
 800a538:	4621      	mov	r1, r4
 800a53a:	4638      	mov	r0, r7
 800a53c:	f7ff fe96 	bl	800a26c <_malloc_r>
 800a540:	4605      	mov	r5, r0
 800a542:	2800      	cmp	r0, #0
 800a544:	d0f2      	beq.n	800a52c <_realloc_r+0x1c>
 800a546:	4631      	mov	r1, r6
 800a548:	4622      	mov	r2, r4
 800a54a:	f7ff f90f 	bl	800976c <memcpy>
 800a54e:	4631      	mov	r1, r6
 800a550:	4638      	mov	r0, r7
 800a552:	f7ff fe3b 	bl	800a1cc <_free_r>
 800a556:	e7e9      	b.n	800a52c <_realloc_r+0x1c>
 800a558:	4635      	mov	r5, r6
 800a55a:	e7e7      	b.n	800a52c <_realloc_r+0x1c>

0800a55c <_sungetc_r>:
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	1c4b      	adds	r3, r1, #1
 800a560:	4614      	mov	r4, r2
 800a562:	d103      	bne.n	800a56c <_sungetc_r+0x10>
 800a564:	f04f 35ff 	mov.w	r5, #4294967295
 800a568:	4628      	mov	r0, r5
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	8993      	ldrh	r3, [r2, #12]
 800a56e:	f023 0320 	bic.w	r3, r3, #32
 800a572:	8193      	strh	r3, [r2, #12]
 800a574:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a576:	6852      	ldr	r2, [r2, #4]
 800a578:	b2cd      	uxtb	r5, r1
 800a57a:	b18b      	cbz	r3, 800a5a0 <_sungetc_r+0x44>
 800a57c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a57e:	4293      	cmp	r3, r2
 800a580:	dd08      	ble.n	800a594 <_sungetc_r+0x38>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	1e5a      	subs	r2, r3, #1
 800a586:	6022      	str	r2, [r4, #0]
 800a588:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a58c:	6863      	ldr	r3, [r4, #4]
 800a58e:	3301      	adds	r3, #1
 800a590:	6063      	str	r3, [r4, #4]
 800a592:	e7e9      	b.n	800a568 <_sungetc_r+0xc>
 800a594:	4621      	mov	r1, r4
 800a596:	f000 fbbf 	bl	800ad18 <__submore>
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d0f1      	beq.n	800a582 <_sungetc_r+0x26>
 800a59e:	e7e1      	b.n	800a564 <_sungetc_r+0x8>
 800a5a0:	6921      	ldr	r1, [r4, #16]
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	b151      	cbz	r1, 800a5bc <_sungetc_r+0x60>
 800a5a6:	4299      	cmp	r1, r3
 800a5a8:	d208      	bcs.n	800a5bc <_sungetc_r+0x60>
 800a5aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a5ae:	42a9      	cmp	r1, r5
 800a5b0:	d104      	bne.n	800a5bc <_sungetc_r+0x60>
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	3201      	adds	r2, #1
 800a5b6:	6023      	str	r3, [r4, #0]
 800a5b8:	6062      	str	r2, [r4, #4]
 800a5ba:	e7d5      	b.n	800a568 <_sungetc_r+0xc>
 800a5bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5ca:	4623      	mov	r3, r4
 800a5cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a5d0:	6023      	str	r3, [r4, #0]
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e7dc      	b.n	800a590 <_sungetc_r+0x34>

0800a5d6 <__ssrefill_r>:
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	460c      	mov	r4, r1
 800a5da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a5dc:	b169      	cbz	r1, 800a5fa <__ssrefill_r+0x24>
 800a5de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e2:	4299      	cmp	r1, r3
 800a5e4:	d001      	beq.n	800a5ea <__ssrefill_r+0x14>
 800a5e6:	f7ff fdf1 	bl	800a1cc <_free_r>
 800a5ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5ec:	6063      	str	r3, [r4, #4]
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a5f2:	b113      	cbz	r3, 800a5fa <__ssrefill_r+0x24>
 800a5f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a5f6:	6023      	str	r3, [r4, #0]
 800a5f8:	bd10      	pop	{r4, pc}
 800a5fa:	6923      	ldr	r3, [r4, #16]
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	2300      	movs	r3, #0
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	89a3      	ldrh	r3, [r4, #12]
 800a604:	f043 0320 	orr.w	r3, r3, #32
 800a608:	81a3      	strh	r3, [r4, #12]
 800a60a:	f04f 30ff 	mov.w	r0, #4294967295
 800a60e:	e7f3      	b.n	800a5f8 <__ssrefill_r+0x22>

0800a610 <__ssvfiscanf_r>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	460c      	mov	r4, r1
 800a616:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a61a:	2100      	movs	r1, #0
 800a61c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a620:	49b2      	ldr	r1, [pc, #712]	; (800a8ec <__ssvfiscanf_r+0x2dc>)
 800a622:	91a0      	str	r1, [sp, #640]	; 0x280
 800a624:	f10d 0804 	add.w	r8, sp, #4
 800a628:	49b1      	ldr	r1, [pc, #708]	; (800a8f0 <__ssvfiscanf_r+0x2e0>)
 800a62a:	4fb2      	ldr	r7, [pc, #712]	; (800a8f4 <__ssvfiscanf_r+0x2e4>)
 800a62c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a8f8 <__ssvfiscanf_r+0x2e8>
 800a630:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a634:	4606      	mov	r6, r0
 800a636:	91a1      	str	r1, [sp, #644]	; 0x284
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	f892 a000 	ldrb.w	sl, [r2]
 800a63e:	f1ba 0f00 	cmp.w	sl, #0
 800a642:	f000 8151 	beq.w	800a8e8 <__ssvfiscanf_r+0x2d8>
 800a646:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a64a:	f013 0308 	ands.w	r3, r3, #8
 800a64e:	f102 0501 	add.w	r5, r2, #1
 800a652:	d019      	beq.n	800a688 <__ssvfiscanf_r+0x78>
 800a654:	6863      	ldr	r3, [r4, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	dd0f      	ble.n	800a67a <__ssvfiscanf_r+0x6a>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	781a      	ldrb	r2, [r3, #0]
 800a65e:	5cba      	ldrb	r2, [r7, r2]
 800a660:	0712      	lsls	r2, r2, #28
 800a662:	d401      	bmi.n	800a668 <__ssvfiscanf_r+0x58>
 800a664:	462a      	mov	r2, r5
 800a666:	e7e8      	b.n	800a63a <__ssvfiscanf_r+0x2a>
 800a668:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a66a:	3201      	adds	r2, #1
 800a66c:	9245      	str	r2, [sp, #276]	; 0x114
 800a66e:	6862      	ldr	r2, [r4, #4]
 800a670:	3301      	adds	r3, #1
 800a672:	3a01      	subs	r2, #1
 800a674:	6062      	str	r2, [r4, #4]
 800a676:	6023      	str	r3, [r4, #0]
 800a678:	e7ec      	b.n	800a654 <__ssvfiscanf_r+0x44>
 800a67a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a67c:	4621      	mov	r1, r4
 800a67e:	4630      	mov	r0, r6
 800a680:	4798      	blx	r3
 800a682:	2800      	cmp	r0, #0
 800a684:	d0e9      	beq.n	800a65a <__ssvfiscanf_r+0x4a>
 800a686:	e7ed      	b.n	800a664 <__ssvfiscanf_r+0x54>
 800a688:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a68c:	f040 8083 	bne.w	800a796 <__ssvfiscanf_r+0x186>
 800a690:	9341      	str	r3, [sp, #260]	; 0x104
 800a692:	9343      	str	r3, [sp, #268]	; 0x10c
 800a694:	7853      	ldrb	r3, [r2, #1]
 800a696:	2b2a      	cmp	r3, #42	; 0x2a
 800a698:	bf02      	ittt	eq
 800a69a:	2310      	moveq	r3, #16
 800a69c:	1c95      	addeq	r5, r2, #2
 800a69e:	9341      	streq	r3, [sp, #260]	; 0x104
 800a6a0:	220a      	movs	r2, #10
 800a6a2:	46ab      	mov	fp, r5
 800a6a4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a6a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a6ac:	2b09      	cmp	r3, #9
 800a6ae:	d91d      	bls.n	800a6ec <__ssvfiscanf_r+0xdc>
 800a6b0:	4891      	ldr	r0, [pc, #580]	; (800a8f8 <__ssvfiscanf_r+0x2e8>)
 800a6b2:	2203      	movs	r2, #3
 800a6b4:	f7f5 fd7c 	bl	80001b0 <memchr>
 800a6b8:	b140      	cbz	r0, 800a6cc <__ssvfiscanf_r+0xbc>
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	eba0 0009 	sub.w	r0, r0, r9
 800a6c0:	fa03 f000 	lsl.w	r0, r3, r0
 800a6c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a6c6:	4318      	orrs	r0, r3
 800a6c8:	9041      	str	r0, [sp, #260]	; 0x104
 800a6ca:	465d      	mov	r5, fp
 800a6cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a6d0:	2b78      	cmp	r3, #120	; 0x78
 800a6d2:	d806      	bhi.n	800a6e2 <__ssvfiscanf_r+0xd2>
 800a6d4:	2b57      	cmp	r3, #87	; 0x57
 800a6d6:	d810      	bhi.n	800a6fa <__ssvfiscanf_r+0xea>
 800a6d8:	2b25      	cmp	r3, #37	; 0x25
 800a6da:	d05c      	beq.n	800a796 <__ssvfiscanf_r+0x186>
 800a6dc:	d856      	bhi.n	800a78c <__ssvfiscanf_r+0x17c>
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d074      	beq.n	800a7cc <__ssvfiscanf_r+0x1bc>
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	9347      	str	r3, [sp, #284]	; 0x11c
 800a6e6:	230a      	movs	r3, #10
 800a6e8:	9342      	str	r3, [sp, #264]	; 0x108
 800a6ea:	e081      	b.n	800a7f0 <__ssvfiscanf_r+0x1e0>
 800a6ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a6ee:	fb02 1303 	mla	r3, r2, r3, r1
 800a6f2:	3b30      	subs	r3, #48	; 0x30
 800a6f4:	9343      	str	r3, [sp, #268]	; 0x10c
 800a6f6:	465d      	mov	r5, fp
 800a6f8:	e7d3      	b.n	800a6a2 <__ssvfiscanf_r+0x92>
 800a6fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a6fe:	2a20      	cmp	r2, #32
 800a700:	d8ef      	bhi.n	800a6e2 <__ssvfiscanf_r+0xd2>
 800a702:	a101      	add	r1, pc, #4	; (adr r1, 800a708 <__ssvfiscanf_r+0xf8>)
 800a704:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a708:	0800a7db 	.word	0x0800a7db
 800a70c:	0800a6e3 	.word	0x0800a6e3
 800a710:	0800a6e3 	.word	0x0800a6e3
 800a714:	0800a839 	.word	0x0800a839
 800a718:	0800a6e3 	.word	0x0800a6e3
 800a71c:	0800a6e3 	.word	0x0800a6e3
 800a720:	0800a6e3 	.word	0x0800a6e3
 800a724:	0800a6e3 	.word	0x0800a6e3
 800a728:	0800a6e3 	.word	0x0800a6e3
 800a72c:	0800a6e3 	.word	0x0800a6e3
 800a730:	0800a6e3 	.word	0x0800a6e3
 800a734:	0800a84f 	.word	0x0800a84f
 800a738:	0800a825 	.word	0x0800a825
 800a73c:	0800a793 	.word	0x0800a793
 800a740:	0800a793 	.word	0x0800a793
 800a744:	0800a793 	.word	0x0800a793
 800a748:	0800a6e3 	.word	0x0800a6e3
 800a74c:	0800a829 	.word	0x0800a829
 800a750:	0800a6e3 	.word	0x0800a6e3
 800a754:	0800a6e3 	.word	0x0800a6e3
 800a758:	0800a6e3 	.word	0x0800a6e3
 800a75c:	0800a6e3 	.word	0x0800a6e3
 800a760:	0800a85f 	.word	0x0800a85f
 800a764:	0800a831 	.word	0x0800a831
 800a768:	0800a7d3 	.word	0x0800a7d3
 800a76c:	0800a6e3 	.word	0x0800a6e3
 800a770:	0800a6e3 	.word	0x0800a6e3
 800a774:	0800a85b 	.word	0x0800a85b
 800a778:	0800a6e3 	.word	0x0800a6e3
 800a77c:	0800a825 	.word	0x0800a825
 800a780:	0800a6e3 	.word	0x0800a6e3
 800a784:	0800a6e3 	.word	0x0800a6e3
 800a788:	0800a7db 	.word	0x0800a7db
 800a78c:	3b45      	subs	r3, #69	; 0x45
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d8a7      	bhi.n	800a6e2 <__ssvfiscanf_r+0xd2>
 800a792:	2305      	movs	r3, #5
 800a794:	e02b      	b.n	800a7ee <__ssvfiscanf_r+0x1de>
 800a796:	6863      	ldr	r3, [r4, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	dd0d      	ble.n	800a7b8 <__ssvfiscanf_r+0x1a8>
 800a79c:	6823      	ldr	r3, [r4, #0]
 800a79e:	781a      	ldrb	r2, [r3, #0]
 800a7a0:	4552      	cmp	r2, sl
 800a7a2:	f040 80a1 	bne.w	800a8e8 <__ssvfiscanf_r+0x2d8>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	6862      	ldr	r2, [r4, #4]
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a7ae:	3a01      	subs	r2, #1
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	6062      	str	r2, [r4, #4]
 800a7b4:	9345      	str	r3, [sp, #276]	; 0x114
 800a7b6:	e755      	b.n	800a664 <__ssvfiscanf_r+0x54>
 800a7b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4630      	mov	r0, r6
 800a7be:	4798      	blx	r3
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d0eb      	beq.n	800a79c <__ssvfiscanf_r+0x18c>
 800a7c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	f040 8084 	bne.w	800a8d4 <__ssvfiscanf_r+0x2c4>
 800a7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d0:	e086      	b.n	800a8e0 <__ssvfiscanf_r+0x2d0>
 800a7d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a7d4:	f042 0220 	orr.w	r2, r2, #32
 800a7d8:	9241      	str	r2, [sp, #260]	; 0x104
 800a7da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a7dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7e0:	9241      	str	r2, [sp, #260]	; 0x104
 800a7e2:	2210      	movs	r2, #16
 800a7e4:	2b6f      	cmp	r3, #111	; 0x6f
 800a7e6:	9242      	str	r2, [sp, #264]	; 0x108
 800a7e8:	bf34      	ite	cc
 800a7ea:	2303      	movcc	r3, #3
 800a7ec:	2304      	movcs	r3, #4
 800a7ee:	9347      	str	r3, [sp, #284]	; 0x11c
 800a7f0:	6863      	ldr	r3, [r4, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	dd41      	ble.n	800a87a <__ssvfiscanf_r+0x26a>
 800a7f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7f8:	0659      	lsls	r1, r3, #25
 800a7fa:	d404      	bmi.n	800a806 <__ssvfiscanf_r+0x1f6>
 800a7fc:	6823      	ldr	r3, [r4, #0]
 800a7fe:	781a      	ldrb	r2, [r3, #0]
 800a800:	5cba      	ldrb	r2, [r7, r2]
 800a802:	0712      	lsls	r2, r2, #28
 800a804:	d440      	bmi.n	800a888 <__ssvfiscanf_r+0x278>
 800a806:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a808:	2b02      	cmp	r3, #2
 800a80a:	dc4f      	bgt.n	800a8ac <__ssvfiscanf_r+0x29c>
 800a80c:	466b      	mov	r3, sp
 800a80e:	4622      	mov	r2, r4
 800a810:	a941      	add	r1, sp, #260	; 0x104
 800a812:	4630      	mov	r0, r6
 800a814:	f000 f874 	bl	800a900 <_scanf_chars>
 800a818:	2801      	cmp	r0, #1
 800a81a:	d065      	beq.n	800a8e8 <__ssvfiscanf_r+0x2d8>
 800a81c:	2802      	cmp	r0, #2
 800a81e:	f47f af21 	bne.w	800a664 <__ssvfiscanf_r+0x54>
 800a822:	e7cf      	b.n	800a7c4 <__ssvfiscanf_r+0x1b4>
 800a824:	220a      	movs	r2, #10
 800a826:	e7dd      	b.n	800a7e4 <__ssvfiscanf_r+0x1d4>
 800a828:	2300      	movs	r3, #0
 800a82a:	9342      	str	r3, [sp, #264]	; 0x108
 800a82c:	2303      	movs	r3, #3
 800a82e:	e7de      	b.n	800a7ee <__ssvfiscanf_r+0x1de>
 800a830:	2308      	movs	r3, #8
 800a832:	9342      	str	r3, [sp, #264]	; 0x108
 800a834:	2304      	movs	r3, #4
 800a836:	e7da      	b.n	800a7ee <__ssvfiscanf_r+0x1de>
 800a838:	4629      	mov	r1, r5
 800a83a:	4640      	mov	r0, r8
 800a83c:	f000 f9ac 	bl	800ab98 <__sccl>
 800a840:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a846:	9341      	str	r3, [sp, #260]	; 0x104
 800a848:	4605      	mov	r5, r0
 800a84a:	2301      	movs	r3, #1
 800a84c:	e7cf      	b.n	800a7ee <__ssvfiscanf_r+0x1de>
 800a84e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a854:	9341      	str	r3, [sp, #260]	; 0x104
 800a856:	2300      	movs	r3, #0
 800a858:	e7c9      	b.n	800a7ee <__ssvfiscanf_r+0x1de>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e7c7      	b.n	800a7ee <__ssvfiscanf_r+0x1de>
 800a85e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a860:	06c3      	lsls	r3, r0, #27
 800a862:	f53f aeff 	bmi.w	800a664 <__ssvfiscanf_r+0x54>
 800a866:	9b00      	ldr	r3, [sp, #0]
 800a868:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a86a:	1d19      	adds	r1, r3, #4
 800a86c:	9100      	str	r1, [sp, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	07c0      	lsls	r0, r0, #31
 800a872:	bf4c      	ite	mi
 800a874:	801a      	strhmi	r2, [r3, #0]
 800a876:	601a      	strpl	r2, [r3, #0]
 800a878:	e6f4      	b.n	800a664 <__ssvfiscanf_r+0x54>
 800a87a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a87c:	4621      	mov	r1, r4
 800a87e:	4630      	mov	r0, r6
 800a880:	4798      	blx	r3
 800a882:	2800      	cmp	r0, #0
 800a884:	d0b7      	beq.n	800a7f6 <__ssvfiscanf_r+0x1e6>
 800a886:	e79d      	b.n	800a7c4 <__ssvfiscanf_r+0x1b4>
 800a888:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a88a:	3201      	adds	r2, #1
 800a88c:	9245      	str	r2, [sp, #276]	; 0x114
 800a88e:	6862      	ldr	r2, [r4, #4]
 800a890:	3a01      	subs	r2, #1
 800a892:	2a00      	cmp	r2, #0
 800a894:	6062      	str	r2, [r4, #4]
 800a896:	dd02      	ble.n	800a89e <__ssvfiscanf_r+0x28e>
 800a898:	3301      	adds	r3, #1
 800a89a:	6023      	str	r3, [r4, #0]
 800a89c:	e7ae      	b.n	800a7fc <__ssvfiscanf_r+0x1ec>
 800a89e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8a0:	4621      	mov	r1, r4
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	4798      	blx	r3
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	d0a8      	beq.n	800a7fc <__ssvfiscanf_r+0x1ec>
 800a8aa:	e78b      	b.n	800a7c4 <__ssvfiscanf_r+0x1b4>
 800a8ac:	2b04      	cmp	r3, #4
 800a8ae:	dc06      	bgt.n	800a8be <__ssvfiscanf_r+0x2ae>
 800a8b0:	466b      	mov	r3, sp
 800a8b2:	4622      	mov	r2, r4
 800a8b4:	a941      	add	r1, sp, #260	; 0x104
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	f000 f87a 	bl	800a9b0 <_scanf_i>
 800a8bc:	e7ac      	b.n	800a818 <__ssvfiscanf_r+0x208>
 800a8be:	4b0f      	ldr	r3, [pc, #60]	; (800a8fc <__ssvfiscanf_r+0x2ec>)
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	f43f aecf 	beq.w	800a664 <__ssvfiscanf_r+0x54>
 800a8c6:	466b      	mov	r3, sp
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	a941      	add	r1, sp, #260	; 0x104
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f3af 8000 	nop.w
 800a8d2:	e7a1      	b.n	800a818 <__ssvfiscanf_r+0x208>
 800a8d4:	89a3      	ldrh	r3, [r4, #12]
 800a8d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a8da:	bf18      	it	ne
 800a8dc:	f04f 30ff 	movne.w	r0, #4294967295
 800a8e0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a8ea:	e7f9      	b.n	800a8e0 <__ssvfiscanf_r+0x2d0>
 800a8ec:	0800a55d 	.word	0x0800a55d
 800a8f0:	0800a5d7 	.word	0x0800a5d7
 800a8f4:	0800b19d 	.word	0x0800b19d
 800a8f8:	0800b29d 	.word	0x0800b29d
 800a8fc:	00000000 	.word	0x00000000

0800a900 <_scanf_chars>:
 800a900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a904:	4615      	mov	r5, r2
 800a906:	688a      	ldr	r2, [r1, #8]
 800a908:	4680      	mov	r8, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	b932      	cbnz	r2, 800a91c <_scanf_chars+0x1c>
 800a90e:	698a      	ldr	r2, [r1, #24]
 800a910:	2a00      	cmp	r2, #0
 800a912:	bf0c      	ite	eq
 800a914:	2201      	moveq	r2, #1
 800a916:	f04f 32ff 	movne.w	r2, #4294967295
 800a91a:	608a      	str	r2, [r1, #8]
 800a91c:	6822      	ldr	r2, [r4, #0]
 800a91e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a9ac <_scanf_chars+0xac>
 800a922:	06d1      	lsls	r1, r2, #27
 800a924:	bf5f      	itttt	pl
 800a926:	681a      	ldrpl	r2, [r3, #0]
 800a928:	1d11      	addpl	r1, r2, #4
 800a92a:	6019      	strpl	r1, [r3, #0]
 800a92c:	6816      	ldrpl	r6, [r2, #0]
 800a92e:	2700      	movs	r7, #0
 800a930:	69a0      	ldr	r0, [r4, #24]
 800a932:	b188      	cbz	r0, 800a958 <_scanf_chars+0x58>
 800a934:	2801      	cmp	r0, #1
 800a936:	d107      	bne.n	800a948 <_scanf_chars+0x48>
 800a938:	682b      	ldr	r3, [r5, #0]
 800a93a:	781a      	ldrb	r2, [r3, #0]
 800a93c:	6963      	ldr	r3, [r4, #20]
 800a93e:	5c9b      	ldrb	r3, [r3, r2]
 800a940:	b953      	cbnz	r3, 800a958 <_scanf_chars+0x58>
 800a942:	bb27      	cbnz	r7, 800a98e <_scanf_chars+0x8e>
 800a944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a948:	2802      	cmp	r0, #2
 800a94a:	d120      	bne.n	800a98e <_scanf_chars+0x8e>
 800a94c:	682b      	ldr	r3, [r5, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a954:	071b      	lsls	r3, r3, #28
 800a956:	d41a      	bmi.n	800a98e <_scanf_chars+0x8e>
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	06da      	lsls	r2, r3, #27
 800a95c:	bf5e      	ittt	pl
 800a95e:	682b      	ldrpl	r3, [r5, #0]
 800a960:	781b      	ldrbpl	r3, [r3, #0]
 800a962:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a966:	682a      	ldr	r2, [r5, #0]
 800a968:	686b      	ldr	r3, [r5, #4]
 800a96a:	3201      	adds	r2, #1
 800a96c:	602a      	str	r2, [r5, #0]
 800a96e:	68a2      	ldr	r2, [r4, #8]
 800a970:	3b01      	subs	r3, #1
 800a972:	3a01      	subs	r2, #1
 800a974:	606b      	str	r3, [r5, #4]
 800a976:	3701      	adds	r7, #1
 800a978:	60a2      	str	r2, [r4, #8]
 800a97a:	b142      	cbz	r2, 800a98e <_scanf_chars+0x8e>
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dcd7      	bgt.n	800a930 <_scanf_chars+0x30>
 800a980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a984:	4629      	mov	r1, r5
 800a986:	4640      	mov	r0, r8
 800a988:	4798      	blx	r3
 800a98a:	2800      	cmp	r0, #0
 800a98c:	d0d0      	beq.n	800a930 <_scanf_chars+0x30>
 800a98e:	6823      	ldr	r3, [r4, #0]
 800a990:	f013 0310 	ands.w	r3, r3, #16
 800a994:	d105      	bne.n	800a9a2 <_scanf_chars+0xa2>
 800a996:	68e2      	ldr	r2, [r4, #12]
 800a998:	3201      	adds	r2, #1
 800a99a:	60e2      	str	r2, [r4, #12]
 800a99c:	69a2      	ldr	r2, [r4, #24]
 800a99e:	b102      	cbz	r2, 800a9a2 <_scanf_chars+0xa2>
 800a9a0:	7033      	strb	r3, [r6, #0]
 800a9a2:	6923      	ldr	r3, [r4, #16]
 800a9a4:	441f      	add	r7, r3
 800a9a6:	6127      	str	r7, [r4, #16]
 800a9a8:	2000      	movs	r0, #0
 800a9aa:	e7cb      	b.n	800a944 <_scanf_chars+0x44>
 800a9ac:	0800b19d 	.word	0x0800b19d

0800a9b0 <_scanf_i>:
 800a9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9b4:	4698      	mov	r8, r3
 800a9b6:	4b74      	ldr	r3, [pc, #464]	; (800ab88 <_scanf_i+0x1d8>)
 800a9b8:	460c      	mov	r4, r1
 800a9ba:	4682      	mov	sl, r0
 800a9bc:	4616      	mov	r6, r2
 800a9be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9c2:	b087      	sub	sp, #28
 800a9c4:	ab03      	add	r3, sp, #12
 800a9c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9ca:	4b70      	ldr	r3, [pc, #448]	; (800ab8c <_scanf_i+0x1dc>)
 800a9cc:	69a1      	ldr	r1, [r4, #24]
 800a9ce:	4a70      	ldr	r2, [pc, #448]	; (800ab90 <_scanf_i+0x1e0>)
 800a9d0:	2903      	cmp	r1, #3
 800a9d2:	bf18      	it	ne
 800a9d4:	461a      	movne	r2, r3
 800a9d6:	68a3      	ldr	r3, [r4, #8]
 800a9d8:	9201      	str	r2, [sp, #4]
 800a9da:	1e5a      	subs	r2, r3, #1
 800a9dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a9e0:	bf88      	it	hi
 800a9e2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a9e6:	4627      	mov	r7, r4
 800a9e8:	bf82      	ittt	hi
 800a9ea:	eb03 0905 	addhi.w	r9, r3, r5
 800a9ee:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a9f2:	60a3      	strhi	r3, [r4, #8]
 800a9f4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a9f8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a9fc:	bf98      	it	ls
 800a9fe:	f04f 0900 	movls.w	r9, #0
 800aa02:	6023      	str	r3, [r4, #0]
 800aa04:	463d      	mov	r5, r7
 800aa06:	f04f 0b00 	mov.w	fp, #0
 800aa0a:	6831      	ldr	r1, [r6, #0]
 800aa0c:	ab03      	add	r3, sp, #12
 800aa0e:	7809      	ldrb	r1, [r1, #0]
 800aa10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aa14:	2202      	movs	r2, #2
 800aa16:	f7f5 fbcb 	bl	80001b0 <memchr>
 800aa1a:	b328      	cbz	r0, 800aa68 <_scanf_i+0xb8>
 800aa1c:	f1bb 0f01 	cmp.w	fp, #1
 800aa20:	d159      	bne.n	800aad6 <_scanf_i+0x126>
 800aa22:	6862      	ldr	r2, [r4, #4]
 800aa24:	b92a      	cbnz	r2, 800aa32 <_scanf_i+0x82>
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	2308      	movs	r3, #8
 800aa2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa2e:	6063      	str	r3, [r4, #4]
 800aa30:	6022      	str	r2, [r4, #0]
 800aa32:	6822      	ldr	r2, [r4, #0]
 800aa34:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aa38:	6022      	str	r2, [r4, #0]
 800aa3a:	68a2      	ldr	r2, [r4, #8]
 800aa3c:	1e51      	subs	r1, r2, #1
 800aa3e:	60a1      	str	r1, [r4, #8]
 800aa40:	b192      	cbz	r2, 800aa68 <_scanf_i+0xb8>
 800aa42:	6832      	ldr	r2, [r6, #0]
 800aa44:	1c51      	adds	r1, r2, #1
 800aa46:	6031      	str	r1, [r6, #0]
 800aa48:	7812      	ldrb	r2, [r2, #0]
 800aa4a:	f805 2b01 	strb.w	r2, [r5], #1
 800aa4e:	6872      	ldr	r2, [r6, #4]
 800aa50:	3a01      	subs	r2, #1
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	6072      	str	r2, [r6, #4]
 800aa56:	dc07      	bgt.n	800aa68 <_scanf_i+0xb8>
 800aa58:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	4650      	mov	r0, sl
 800aa60:	4790      	blx	r2
 800aa62:	2800      	cmp	r0, #0
 800aa64:	f040 8085 	bne.w	800ab72 <_scanf_i+0x1c2>
 800aa68:	f10b 0b01 	add.w	fp, fp, #1
 800aa6c:	f1bb 0f03 	cmp.w	fp, #3
 800aa70:	d1cb      	bne.n	800aa0a <_scanf_i+0x5a>
 800aa72:	6863      	ldr	r3, [r4, #4]
 800aa74:	b90b      	cbnz	r3, 800aa7a <_scanf_i+0xca>
 800aa76:	230a      	movs	r3, #10
 800aa78:	6063      	str	r3, [r4, #4]
 800aa7a:	6863      	ldr	r3, [r4, #4]
 800aa7c:	4945      	ldr	r1, [pc, #276]	; (800ab94 <_scanf_i+0x1e4>)
 800aa7e:	6960      	ldr	r0, [r4, #20]
 800aa80:	1ac9      	subs	r1, r1, r3
 800aa82:	f000 f889 	bl	800ab98 <__sccl>
 800aa86:	f04f 0b00 	mov.w	fp, #0
 800aa8a:	68a3      	ldr	r3, [r4, #8]
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d03d      	beq.n	800ab0e <_scanf_i+0x15e>
 800aa92:	6831      	ldr	r1, [r6, #0]
 800aa94:	6960      	ldr	r0, [r4, #20]
 800aa96:	f891 c000 	ldrb.w	ip, [r1]
 800aa9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d035      	beq.n	800ab0e <_scanf_i+0x15e>
 800aaa2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800aaa6:	d124      	bne.n	800aaf2 <_scanf_i+0x142>
 800aaa8:	0510      	lsls	r0, r2, #20
 800aaaa:	d522      	bpl.n	800aaf2 <_scanf_i+0x142>
 800aaac:	f10b 0b01 	add.w	fp, fp, #1
 800aab0:	f1b9 0f00 	cmp.w	r9, #0
 800aab4:	d003      	beq.n	800aabe <_scanf_i+0x10e>
 800aab6:	3301      	adds	r3, #1
 800aab8:	f109 39ff 	add.w	r9, r9, #4294967295
 800aabc:	60a3      	str	r3, [r4, #8]
 800aabe:	6873      	ldr	r3, [r6, #4]
 800aac0:	3b01      	subs	r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	6073      	str	r3, [r6, #4]
 800aac6:	dd1b      	ble.n	800ab00 <_scanf_i+0x150>
 800aac8:	6833      	ldr	r3, [r6, #0]
 800aaca:	3301      	adds	r3, #1
 800aacc:	6033      	str	r3, [r6, #0]
 800aace:	68a3      	ldr	r3, [r4, #8]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	60a3      	str	r3, [r4, #8]
 800aad4:	e7d9      	b.n	800aa8a <_scanf_i+0xda>
 800aad6:	f1bb 0f02 	cmp.w	fp, #2
 800aada:	d1ae      	bne.n	800aa3a <_scanf_i+0x8a>
 800aadc:	6822      	ldr	r2, [r4, #0]
 800aade:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800aae2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aae6:	d1bf      	bne.n	800aa68 <_scanf_i+0xb8>
 800aae8:	2310      	movs	r3, #16
 800aaea:	6063      	str	r3, [r4, #4]
 800aaec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aaf0:	e7a2      	b.n	800aa38 <_scanf_i+0x88>
 800aaf2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800aaf6:	6022      	str	r2, [r4, #0]
 800aaf8:	780b      	ldrb	r3, [r1, #0]
 800aafa:	f805 3b01 	strb.w	r3, [r5], #1
 800aafe:	e7de      	b.n	800aabe <_scanf_i+0x10e>
 800ab00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab04:	4631      	mov	r1, r6
 800ab06:	4650      	mov	r0, sl
 800ab08:	4798      	blx	r3
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d0df      	beq.n	800aace <_scanf_i+0x11e>
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	05d9      	lsls	r1, r3, #23
 800ab12:	d50d      	bpl.n	800ab30 <_scanf_i+0x180>
 800ab14:	42bd      	cmp	r5, r7
 800ab16:	d909      	bls.n	800ab2c <_scanf_i+0x17c>
 800ab18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ab1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab20:	4632      	mov	r2, r6
 800ab22:	4650      	mov	r0, sl
 800ab24:	4798      	blx	r3
 800ab26:	f105 39ff 	add.w	r9, r5, #4294967295
 800ab2a:	464d      	mov	r5, r9
 800ab2c:	42bd      	cmp	r5, r7
 800ab2e:	d028      	beq.n	800ab82 <_scanf_i+0x1d2>
 800ab30:	6822      	ldr	r2, [r4, #0]
 800ab32:	f012 0210 	ands.w	r2, r2, #16
 800ab36:	d113      	bne.n	800ab60 <_scanf_i+0x1b0>
 800ab38:	702a      	strb	r2, [r5, #0]
 800ab3a:	6863      	ldr	r3, [r4, #4]
 800ab3c:	9e01      	ldr	r6, [sp, #4]
 800ab3e:	4639      	mov	r1, r7
 800ab40:	4650      	mov	r0, sl
 800ab42:	47b0      	blx	r6
 800ab44:	f8d8 3000 	ldr.w	r3, [r8]
 800ab48:	6821      	ldr	r1, [r4, #0]
 800ab4a:	1d1a      	adds	r2, r3, #4
 800ab4c:	f8c8 2000 	str.w	r2, [r8]
 800ab50:	f011 0f20 	tst.w	r1, #32
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	d00f      	beq.n	800ab78 <_scanf_i+0x1c8>
 800ab58:	6018      	str	r0, [r3, #0]
 800ab5a:	68e3      	ldr	r3, [r4, #12]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	60e3      	str	r3, [r4, #12]
 800ab60:	1bed      	subs	r5, r5, r7
 800ab62:	44ab      	add	fp, r5
 800ab64:	6925      	ldr	r5, [r4, #16]
 800ab66:	445d      	add	r5, fp
 800ab68:	6125      	str	r5, [r4, #16]
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	b007      	add	sp, #28
 800ab6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab72:	f04f 0b00 	mov.w	fp, #0
 800ab76:	e7ca      	b.n	800ab0e <_scanf_i+0x15e>
 800ab78:	07ca      	lsls	r2, r1, #31
 800ab7a:	bf4c      	ite	mi
 800ab7c:	8018      	strhmi	r0, [r3, #0]
 800ab7e:	6018      	strpl	r0, [r3, #0]
 800ab80:	e7eb      	b.n	800ab5a <_scanf_i+0x1aa>
 800ab82:	2001      	movs	r0, #1
 800ab84:	e7f2      	b.n	800ab6c <_scanf_i+0x1bc>
 800ab86:	bf00      	nop
 800ab88:	0800ae34 	.word	0x0800ae34
 800ab8c:	0800a4c9 	.word	0x0800a4c9
 800ab90:	0800ad15 	.word	0x0800ad15
 800ab94:	0800b2ba 	.word	0x0800b2ba

0800ab98 <__sccl>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	780b      	ldrb	r3, [r1, #0]
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	2b5e      	cmp	r3, #94	; 0x5e
 800aba0:	bf0b      	itete	eq
 800aba2:	784b      	ldrbeq	r3, [r1, #1]
 800aba4:	1c48      	addne	r0, r1, #1
 800aba6:	1c88      	addeq	r0, r1, #2
 800aba8:	2200      	movne	r2, #0
 800abaa:	bf08      	it	eq
 800abac:	2201      	moveq	r2, #1
 800abae:	1e61      	subs	r1, r4, #1
 800abb0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800abb4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800abb8:	42a9      	cmp	r1, r5
 800abba:	d1fb      	bne.n	800abb4 <__sccl+0x1c>
 800abbc:	b90b      	cbnz	r3, 800abc2 <__sccl+0x2a>
 800abbe:	3801      	subs	r0, #1
 800abc0:	bd70      	pop	{r4, r5, r6, pc}
 800abc2:	f082 0101 	eor.w	r1, r2, #1
 800abc6:	54e1      	strb	r1, [r4, r3]
 800abc8:	1c42      	adds	r2, r0, #1
 800abca:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800abce:	2d2d      	cmp	r5, #45	; 0x2d
 800abd0:	f102 36ff 	add.w	r6, r2, #4294967295
 800abd4:	4610      	mov	r0, r2
 800abd6:	d006      	beq.n	800abe6 <__sccl+0x4e>
 800abd8:	2d5d      	cmp	r5, #93	; 0x5d
 800abda:	d0f1      	beq.n	800abc0 <__sccl+0x28>
 800abdc:	b90d      	cbnz	r5, 800abe2 <__sccl+0x4a>
 800abde:	4630      	mov	r0, r6
 800abe0:	e7ee      	b.n	800abc0 <__sccl+0x28>
 800abe2:	462b      	mov	r3, r5
 800abe4:	e7ef      	b.n	800abc6 <__sccl+0x2e>
 800abe6:	7816      	ldrb	r6, [r2, #0]
 800abe8:	2e5d      	cmp	r6, #93	; 0x5d
 800abea:	d0fa      	beq.n	800abe2 <__sccl+0x4a>
 800abec:	42b3      	cmp	r3, r6
 800abee:	dcf8      	bgt.n	800abe2 <__sccl+0x4a>
 800abf0:	4618      	mov	r0, r3
 800abf2:	3001      	adds	r0, #1
 800abf4:	4286      	cmp	r6, r0
 800abf6:	5421      	strb	r1, [r4, r0]
 800abf8:	dcfb      	bgt.n	800abf2 <__sccl+0x5a>
 800abfa:	43d8      	mvns	r0, r3
 800abfc:	4430      	add	r0, r6
 800abfe:	1c5d      	adds	r5, r3, #1
 800ac00:	42b3      	cmp	r3, r6
 800ac02:	bfa8      	it	ge
 800ac04:	2000      	movge	r0, #0
 800ac06:	182b      	adds	r3, r5, r0
 800ac08:	3202      	adds	r2, #2
 800ac0a:	e7de      	b.n	800abca <__sccl+0x32>

0800ac0c <_strtol_l.isra.0>:
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac12:	d001      	beq.n	800ac18 <_strtol_l.isra.0+0xc>
 800ac14:	2b24      	cmp	r3, #36	; 0x24
 800ac16:	d906      	bls.n	800ac26 <_strtol_l.isra.0+0x1a>
 800ac18:	f7fe fd7e 	bl	8009718 <__errno>
 800ac1c:	2316      	movs	r3, #22
 800ac1e:	6003      	str	r3, [r0, #0]
 800ac20:	2000      	movs	r0, #0
 800ac22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac26:	4f3a      	ldr	r7, [pc, #232]	; (800ad10 <_strtol_l.isra.0+0x104>)
 800ac28:	468e      	mov	lr, r1
 800ac2a:	4676      	mov	r6, lr
 800ac2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ac30:	5de5      	ldrb	r5, [r4, r7]
 800ac32:	f015 0508 	ands.w	r5, r5, #8
 800ac36:	d1f8      	bne.n	800ac2a <_strtol_l.isra.0+0x1e>
 800ac38:	2c2d      	cmp	r4, #45	; 0x2d
 800ac3a:	d134      	bne.n	800aca6 <_strtol_l.isra.0+0x9a>
 800ac3c:	f89e 4000 	ldrb.w	r4, [lr]
 800ac40:	f04f 0801 	mov.w	r8, #1
 800ac44:	f106 0e02 	add.w	lr, r6, #2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d05c      	beq.n	800ad06 <_strtol_l.isra.0+0xfa>
 800ac4c:	2b10      	cmp	r3, #16
 800ac4e:	d10c      	bne.n	800ac6a <_strtol_l.isra.0+0x5e>
 800ac50:	2c30      	cmp	r4, #48	; 0x30
 800ac52:	d10a      	bne.n	800ac6a <_strtol_l.isra.0+0x5e>
 800ac54:	f89e 4000 	ldrb.w	r4, [lr]
 800ac58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac5c:	2c58      	cmp	r4, #88	; 0x58
 800ac5e:	d14d      	bne.n	800acfc <_strtol_l.isra.0+0xf0>
 800ac60:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ac64:	2310      	movs	r3, #16
 800ac66:	f10e 0e02 	add.w	lr, lr, #2
 800ac6a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ac6e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac72:	2600      	movs	r6, #0
 800ac74:	fbbc f9f3 	udiv	r9, ip, r3
 800ac78:	4635      	mov	r5, r6
 800ac7a:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac7e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ac82:	2f09      	cmp	r7, #9
 800ac84:	d818      	bhi.n	800acb8 <_strtol_l.isra.0+0xac>
 800ac86:	463c      	mov	r4, r7
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	dd24      	ble.n	800acd6 <_strtol_l.isra.0+0xca>
 800ac8c:	2e00      	cmp	r6, #0
 800ac8e:	db1f      	blt.n	800acd0 <_strtol_l.isra.0+0xc4>
 800ac90:	45a9      	cmp	r9, r5
 800ac92:	d31d      	bcc.n	800acd0 <_strtol_l.isra.0+0xc4>
 800ac94:	d101      	bne.n	800ac9a <_strtol_l.isra.0+0x8e>
 800ac96:	45a2      	cmp	sl, r4
 800ac98:	db1a      	blt.n	800acd0 <_strtol_l.isra.0+0xc4>
 800ac9a:	fb05 4503 	mla	r5, r5, r3, r4
 800ac9e:	2601      	movs	r6, #1
 800aca0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800aca4:	e7eb      	b.n	800ac7e <_strtol_l.isra.0+0x72>
 800aca6:	2c2b      	cmp	r4, #43	; 0x2b
 800aca8:	bf08      	it	eq
 800acaa:	f89e 4000 	ldrbeq.w	r4, [lr]
 800acae:	46a8      	mov	r8, r5
 800acb0:	bf08      	it	eq
 800acb2:	f106 0e02 	addeq.w	lr, r6, #2
 800acb6:	e7c7      	b.n	800ac48 <_strtol_l.isra.0+0x3c>
 800acb8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800acbc:	2f19      	cmp	r7, #25
 800acbe:	d801      	bhi.n	800acc4 <_strtol_l.isra.0+0xb8>
 800acc0:	3c37      	subs	r4, #55	; 0x37
 800acc2:	e7e1      	b.n	800ac88 <_strtol_l.isra.0+0x7c>
 800acc4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800acc8:	2f19      	cmp	r7, #25
 800acca:	d804      	bhi.n	800acd6 <_strtol_l.isra.0+0xca>
 800accc:	3c57      	subs	r4, #87	; 0x57
 800acce:	e7db      	b.n	800ac88 <_strtol_l.isra.0+0x7c>
 800acd0:	f04f 36ff 	mov.w	r6, #4294967295
 800acd4:	e7e4      	b.n	800aca0 <_strtol_l.isra.0+0x94>
 800acd6:	2e00      	cmp	r6, #0
 800acd8:	da05      	bge.n	800ace6 <_strtol_l.isra.0+0xda>
 800acda:	2322      	movs	r3, #34	; 0x22
 800acdc:	6003      	str	r3, [r0, #0]
 800acde:	4665      	mov	r5, ip
 800ace0:	b942      	cbnz	r2, 800acf4 <_strtol_l.isra.0+0xe8>
 800ace2:	4628      	mov	r0, r5
 800ace4:	e79d      	b.n	800ac22 <_strtol_l.isra.0+0x16>
 800ace6:	f1b8 0f00 	cmp.w	r8, #0
 800acea:	d000      	beq.n	800acee <_strtol_l.isra.0+0xe2>
 800acec:	426d      	negs	r5, r5
 800acee:	2a00      	cmp	r2, #0
 800acf0:	d0f7      	beq.n	800ace2 <_strtol_l.isra.0+0xd6>
 800acf2:	b10e      	cbz	r6, 800acf8 <_strtol_l.isra.0+0xec>
 800acf4:	f10e 31ff 	add.w	r1, lr, #4294967295
 800acf8:	6011      	str	r1, [r2, #0]
 800acfa:	e7f2      	b.n	800ace2 <_strtol_l.isra.0+0xd6>
 800acfc:	2430      	movs	r4, #48	; 0x30
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1b3      	bne.n	800ac6a <_strtol_l.isra.0+0x5e>
 800ad02:	2308      	movs	r3, #8
 800ad04:	e7b1      	b.n	800ac6a <_strtol_l.isra.0+0x5e>
 800ad06:	2c30      	cmp	r4, #48	; 0x30
 800ad08:	d0a4      	beq.n	800ac54 <_strtol_l.isra.0+0x48>
 800ad0a:	230a      	movs	r3, #10
 800ad0c:	e7ad      	b.n	800ac6a <_strtol_l.isra.0+0x5e>
 800ad0e:	bf00      	nop
 800ad10:	0800b19d 	.word	0x0800b19d

0800ad14 <_strtol_r>:
 800ad14:	f7ff bf7a 	b.w	800ac0c <_strtol_l.isra.0>

0800ad18 <__submore>:
 800ad18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1c:	460c      	mov	r4, r1
 800ad1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ad20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad24:	4299      	cmp	r1, r3
 800ad26:	d11d      	bne.n	800ad64 <__submore+0x4c>
 800ad28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad2c:	f7ff fa9e 	bl	800a26c <_malloc_r>
 800ad30:	b918      	cbnz	r0, 800ad3a <__submore+0x22>
 800ad32:	f04f 30ff 	mov.w	r0, #4294967295
 800ad36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad3e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ad40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ad44:	6360      	str	r0, [r4, #52]	; 0x34
 800ad46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ad4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ad4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ad52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ad5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ad5e:	6020      	str	r0, [r4, #0]
 800ad60:	2000      	movs	r0, #0
 800ad62:	e7e8      	b.n	800ad36 <__submore+0x1e>
 800ad64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ad66:	0077      	lsls	r7, r6, #1
 800ad68:	463a      	mov	r2, r7
 800ad6a:	f7ff fbd1 	bl	800a510 <_realloc_r>
 800ad6e:	4605      	mov	r5, r0
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d0de      	beq.n	800ad32 <__submore+0x1a>
 800ad74:	eb00 0806 	add.w	r8, r0, r6
 800ad78:	4601      	mov	r1, r0
 800ad7a:	4632      	mov	r2, r6
 800ad7c:	4640      	mov	r0, r8
 800ad7e:	f7fe fcf5 	bl	800976c <memcpy>
 800ad82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ad86:	f8c4 8000 	str.w	r8, [r4]
 800ad8a:	e7e9      	b.n	800ad60 <__submore+0x48>

0800ad8c <_malloc_usable_size_r>:
 800ad8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad90:	1f18      	subs	r0, r3, #4
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	bfbc      	itt	lt
 800ad96:	580b      	ldrlt	r3, [r1, r0]
 800ad98:	18c0      	addlt	r0, r0, r3
 800ad9a:	4770      	bx	lr

0800ad9c <_init>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	bf00      	nop
 800ada0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada2:	bc08      	pop	{r3}
 800ada4:	469e      	mov	lr, r3
 800ada6:	4770      	bx	lr

0800ada8 <_fini>:
 800ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adaa:	bf00      	nop
 800adac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adae:	bc08      	pop	{r3}
 800adb0:	469e      	mov	lr, r3
 800adb2:	4770      	bx	lr
