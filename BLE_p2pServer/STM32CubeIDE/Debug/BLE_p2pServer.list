
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aca4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800ade4  0800ade4  0001ade4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b2e8  0800b2e8  0001b2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b2ec  0800b2ec  0001b2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000110  20000008  0800b2f0  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000118  0800b400  00020118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 00000096  200001b4  0800b499  000201b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  2000024c  0800b52f  0002024c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000028c  0800b56c  0002028c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004b8  200002a0  0800b57d  000202a0  2**3
                  ALLOC
 11 ._user_heap_stack 00001400  20000758  0800b57d  00020758  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   00040fb3  00000000  00000000  000202cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007694  00000000  00000000  00061280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002b48  00000000  00000000  00068918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002870  00000000  00000000  0006b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002e13e  00000000  00000000  0006dcd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002ecb6  00000000  00000000  0009be0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000faf54  00000000  00000000  000caac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001c5a18  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000bc44  00000000  00000000  001c5a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002a0 	.word	0x200002a0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800adcc 	.word	0x0800adcc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002a4 	.word	0x200002a4
 800017c:	0800adcc 	.word	0x0800adcc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <strcmp>:
 8000190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000198:	2a01      	cmp	r2, #1
 800019a:	bf28      	it	cs
 800019c:	429a      	cmpcs	r2, r3
 800019e:	d0f7      	beq.n	8000190 <strcmp>
 80001a0:	1ad0      	subs	r0, r2, r3
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800025c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4313      	orrs	r3, r2
 8000266:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800026c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4013      	ands	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000274:	68fb      	ldr	r3, [r7, #12]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000282:	b480      	push	{r7}
 8000284:	b083      	sub	sp, #12
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800028a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800028e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	43db      	mvns	r3, r3
 8000294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000298:	4013      	ands	r3, r2
 800029a:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80002b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002b4:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80002b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4313      	orrs	r3, r2
 80002c0:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4013      	ands	r3, r2
 80002d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002d2:	68fb      	ldr	r3, [r7, #12]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 80002f8:	2303      	movs	r3, #3
 80002fa:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 80002fc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000300:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	2001      	movs	r0, #1
 8000304:	f7ff ffa4 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	4619      	mov	r1, r3
 800030c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000310:	f003 fd8c 	bl	8003e2c <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000314:	2001      	movs	r0, #1
 8000316:	f7ff ffb4 	bl	8000282 <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 800031a:	2318      	movs	r3, #24
 800031c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	2002      	movs	r0, #2
 8000320:	f7ff ff96 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4619      	mov	r1, r3
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <APPD_Init+0x70>)
 800032a:	f003 fd7f 	bl	8003e2c <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800032e:	2002      	movs	r0, #2
 8000330:	f7ff ffa7 	bl	8000282 <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000334:	f003 fa62 	bl	80037fc <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000338:	f003 fa66 	bl	8003808 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800033c:	f003 fa6a 	bl	8003814 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000340:	f000 f824 	bl	800038c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000344:	f000 f8c6 	bl	80004d4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000348:	bf00      	nop
}
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	48000400 	.word	0x48000400

08000354 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <APPD_EnableCPU2+0x34>)
 800035c:	1d3c      	adds	r4, r7, #4
 800035e:	461d      	mov	r5, r3
 8000360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000368:	c403      	stmia	r4!, {r0, r1}
 800036a:	8022      	strh	r2, [r4, #0]
 800036c:	3402      	adds	r4, #2
 800036e:	0c13      	lsrs	r3, r2, #16
 8000370:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000372:	f008 fec9 	bl	8009108 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f008 f9ec 	bl	8008756 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800037e:	bf00      	nop
}
 8000380:	3720      	adds	r7, #32
 8000382:	46bd      	mov	sp, r7
 8000384:	bdb0      	pop	{r4, r5, r7, pc}
 8000386:	bf00      	nop
 8000388:	0800ade4 	.word	0x0800ade4

0800038c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	77fb      	strb	r3, [r7, #31]
 80003b0:	e038      	b.n	8000424 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80003b2:	7ffb      	ldrb	r3, [r7, #31]
 80003b4:	4a44      	ldr	r2, [pc, #272]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	4413      	add	r3, r2
 80003ba:	799b      	ldrb	r3, [r3, #6]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d02b      	beq.n	8000418 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80003c0:	7ffb      	ldrb	r3, [r7, #31]
 80003c2:	4a41      	ldr	r2, [pc, #260]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003c8:	4a40      	ldr	r2, [pc, #256]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d01b      	beq.n	8000406 <APPD_SetCPU2GpioConfig+0x7a>
 80003ce:	4a3f      	ldr	r2, [pc, #252]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d823      	bhi.n	800041c <APPD_SetCPU2GpioConfig+0x90>
 80003d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003d8:	d003      	beq.n	80003e2 <APPD_SetCPU2GpioConfig+0x56>
 80003da:	4a3d      	ldr	r2, [pc, #244]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d009      	beq.n	80003f4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80003e0:	e01c      	b.n	800041c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80003e2:	7ffb      	ldrb	r3, [r7, #31]
 80003e4:	4a38      	ldr	r2, [pc, #224]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	4413      	add	r3, r2
 80003ea:	889a      	ldrh	r2, [r3, #4]
 80003ec:	8bbb      	ldrh	r3, [r7, #28]
 80003ee:	4313      	orrs	r3, r2
 80003f0:	83bb      	strh	r3, [r7, #28]
          break;
 80003f2:	e014      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80003f4:	7ffb      	ldrb	r3, [r7, #31]
 80003f6:	4a34      	ldr	r2, [pc, #208]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4413      	add	r3, r2
 80003fc:	889a      	ldrh	r2, [r3, #4]
 80003fe:	8b7b      	ldrh	r3, [r7, #26]
 8000400:	4313      	orrs	r3, r2
 8000402:	837b      	strh	r3, [r7, #26]
          break;
 8000404:	e00b      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000406:	7ffb      	ldrb	r3, [r7, #31]
 8000408:	4a2f      	ldr	r2, [pc, #188]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	4413      	add	r3, r2
 800040e:	889a      	ldrh	r2, [r3, #4]
 8000410:	8b3b      	ldrh	r3, [r7, #24]
 8000412:	4313      	orrs	r3, r2
 8000414:	833b      	strh	r3, [r7, #24]
          break;
 8000416:	e002      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000418:	bf00      	nop
 800041a:	e000      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800041c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800041e:	7ffb      	ldrb	r3, [r7, #31]
 8000420:	3301      	adds	r3, #1
 8000422:	77fb      	strb	r3, [r7, #31]
 8000424:	7ffb      	ldrb	r3, [r7, #31]
 8000426:	2b21      	cmp	r3, #33	; 0x21
 8000428:	d9c3      	bls.n	80003b2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000432:	2303      	movs	r3, #3
 8000434:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000436:	8bbb      	ldrh	r3, [r7, #28]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d014      	beq.n	8000466 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800043c:	8bbb      	ldrh	r3, [r7, #28]
 800043e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	2001      	movs	r0, #1
 8000442:	f7ff ff05 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff ff2e 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f003 fcea 	bl	8003e2c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000458:	8bbb      	ldrh	r3, [r7, #28]
 800045a:	2200      	movs	r2, #0
 800045c:	4619      	mov	r1, r3
 800045e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000462:	f003 fe53 	bl	800410c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000466:	8b7b      	ldrh	r3, [r7, #26]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800046c:	8b7b      	ldrh	r3, [r7, #26]
 800046e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	2002      	movs	r0, #2
 8000472:	f7ff feed 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000476:	2002      	movs	r0, #2
 8000478:	f7ff ff16 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 8000482:	f003 fcd3 	bl	8003e2c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000486:	8b7b      	ldrh	r3, [r7, #26]
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	4810      	ldr	r0, [pc, #64]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 800048e:	f003 fe3d 	bl	800410c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000492:	8b3b      	ldrh	r3, [r7, #24]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d013      	beq.n	80004c0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000498:	8b3b      	ldrh	r3, [r7, #24]
 800049a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800049c:	2004      	movs	r0, #4
 800049e:	f7ff fed7 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80004a2:	2004      	movs	r0, #4
 80004a4:	f7ff ff00 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80004ae:	f003 fcbd 	bl	8003e2c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80004b2:	8b3b      	ldrh	r3, [r7, #24]
 80004b4:	2200      	movs	r2, #0
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80004ba:	f003 fe27 	bl	800410c <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
}
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	0800ae70 	.word	0x0800ae70
 80004cc:	48000800 	.word	0x48000800
 80004d0:	48000400 	.word	0x48000400

080004d4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80004d8:	bf00      	nop
}
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <LL_C2_PWR_SetPowerMode+0x28>)
 80004ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004f2:	f023 0207 	bic.w	r2, r3, #7
 80004f6:	4905      	ldr	r1, [pc, #20]	; (800050c <LL_C2_PWR_SetPowerMode+0x28>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	58000400 	.word	0x58000400

08000510 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	608b      	str	r3, [r1, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800053c:	f000 f814 	bl	8000568 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000540:	4908      	ldr	r1, [pc, #32]	; (8000564 <APPE_Init+0x2c>)
 8000542:	2000      	movs	r0, #0
 8000544:	f000 fd38 	bl	8000fb8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000548:	f7ff feca 	bl	80002e0 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800054c:	2101      	movs	r1, #1
 800054e:	2001      	movs	r0, #1
 8000550:	f008 fe78 	bl	8009244 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000554:	f000 f867 	bl	8000626 <Led_Init>

  Button_Init();
 8000558:	f000 f875 	bl	8000646 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800055c:	f000 f812 	bl	8000584 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000560:	bf00      	nop
}
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000630 	.word	0x20000630

08000568 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800056c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000570:	f7ff ffce 	bl	8000510 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000574:	f008 fe54 	bl	8009220 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000578:	2004      	movs	r0, #4
 800057a:	f7ff ffb3 	bl	80004e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800057e:	bf00      	nop
}
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800058a:	f008 fc07 	bl	8008d9c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <appe_Tl_Init+0x50>)
 8000590:	2100      	movs	r1, #0
 8000592:	2020      	movs	r0, #32
 8000594:	f008 ffa0 	bl	80094d8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <appe_Tl_Init+0x54>)
 800059a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <appe_Tl_Init+0x58>)
 800059e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <appe_Tl_Init+0x5c>)
 80005a6:	f008 f8ed 	bl	8008784 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <appe_Tl_Init+0x60>)
 80005ac:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <appe_Tl_Init+0x64>)
 80005b0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <appe_Tl_Init+0x68>)
 80005b4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005b6:	f240 533c 	movw	r3, #1340	; 0x53c
 80005ba:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	4618      	mov	r0, r3
 80005c2:	f008 fd2d 	bl	8009020 <TL_MM_Init>

  TL_Enable();
 80005c6:	f008 fbe3 	bl	8008d90 <TL_Enable>

  return;
 80005ca:	bf00      	nop
}
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	080087bd 	.word	0x080087bd
 80005d8:	20030724 	.word	0x20030724
 80005dc:	080005f1 	.word	0x080005f1
 80005e0:	08000607 	.word	0x08000607
 80005e4:	2003093c 	.word	0x2003093c
 80005e8:	20030830 	.word	0x20030830
 80005ec:	200301e8 	.word	0x200301e8

080005f0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80005fa:	bf00      	nop
}
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800060e:	f7ff fea1 	bl	8000354 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000612:	f001 ff11 	bl	8002438 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000616:	2100      	movs	r1, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f008 fe13 	bl	8009244 <UTIL_LPM_SetOffMode>
  return;
 800061e:	bf00      	nop
}
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800062a:	2000      	movs	r0, #0
 800062c:	f002 feb4 	bl	8003398 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000630:	2001      	movs	r0, #1
 8000632:	f002 feb1 	bl	8003398 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000636:	2002      	movs	r0, #2
 8000638:	f002 feae 	bl	8003398 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 800063c:	2001      	movs	r0, #1
 800063e:	f002 fee5 	bl	800340c <BSP_LED_On>
#endif

  return;
 8000642:	bf00      	nop
}
 8000644:	bd80      	pop	{r7, pc}

08000646 <Button_Init>:

static void Button_Init( void )
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800064a:	2101      	movs	r1, #1
 800064c:	2000      	movs	r0, #0
 800064e:	f002 ff2b 	bl	80034a8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000652:	2101      	movs	r1, #1
 8000654:	2001      	movs	r0, #1
 8000656:	f002 ff27 	bl	80034a8 <BSP_PB_Init>
#endif

  return;
 800065a:	bf00      	nop
}
 800065c:	bd80      	pop	{r7, pc}

0800065e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000662:	f008 fe1f 	bl	80092a4 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000666:	bf00      	nop
}
 8000668:	bd80      	pop	{r7, pc}

0800066a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800066a:	b580      	push	{r7, lr}
 800066c:	b082      	sub	sp, #8
 800066e:	af00      	add	r7, sp, #0
 8000670:	6078      	str	r0, [r7, #4]
 8000672:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000674:	f04f 30ff 	mov.w	r0, #4294967295
 8000678:	f008 fe4a 	bl	8009310 <UTIL_SEQ_Run>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800068c:	2100      	movs	r1, #0
 800068e:	2020      	movs	r0, #32
 8000690:	f008 ff44 	bl	800951c <UTIL_SEQ_SetTask>
  return;
 8000694:	bf00      	nop
}
 8000696:	3708      	adds	r7, #8
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006a4:	2002      	movs	r0, #2
 80006a6:	f008 ffa5 	bl	80095f4 <UTIL_SEQ_SetEvt>
  return;
 80006aa:	bf00      	nop
}
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b082      	sub	sp, #8
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006ba:	2002      	movs	r0, #2
 80006bc:	f008 ffba 	bl	8009634 <UTIL_SEQ_WaitEvt>
  return;
 80006c0:	bf00      	nop
}
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80006d2:	88fb      	ldrh	r3, [r7, #6]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d135      	bne.n	8000744 <HAL_GPIO_EXTI_Callback+0x7c>
//    case BUTTON_SW1_PIN:
//     APP_BLE_Key_Button1_Action();
//      break;

    case BUTTON_SW2_PIN:
    	APP_BLE_Key_Button2_Action();
 80006d8:	f002 f81e 	bl	8002718 <APP_BLE_Key_Button2_Action>
    	BSP_LED_Toggle(LED1);
 80006dc:	2000      	movs	r0, #0
 80006de:	f002 fec9 	bl	8003474 <BSP_LED_Toggle>

    	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80006e2:	2200      	movs	r2, #0
 80006e4:	491a      	ldr	r1, [pc, #104]	; (8000750 <HAL_GPIO_EXTI_Callback+0x88>)
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <HAL_GPIO_EXTI_Callback+0x8c>)
 80006e8:	f005 fe1e 	bl	8006328 <HAL_RTC_GetTime>
    	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80006ec:	2200      	movs	r2, #0
 80006ee:	491a      	ldr	r1, [pc, #104]	; (8000758 <HAL_GPIO_EXTI_Callback+0x90>)
 80006f0:	4818      	ldr	r0, [pc, #96]	; (8000754 <HAL_GPIO_EXTI_Callback+0x8c>)
 80006f2:	f005 ff23 	bl	800653c <HAL_RTC_GetDate>

    	currTime.tm_year = currentDate.Year + 100;  // In fact: 2000 + 18 - 1900
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_GPIO_EXTI_Callback+0x90>)
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	3364      	adds	r3, #100	; 0x64
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 80006fe:	6153      	str	r3, [r2, #20]
    	currTime.tm_mday = currentDate.Date;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <HAL_GPIO_EXTI_Callback+0x90>)
 8000702:	789b      	ldrb	r3, [r3, #2]
 8000704:	461a      	mov	r2, r3
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000708:	60da      	str	r2, [r3, #12]
    	currTime.tm_mon  = currentDate.Month - 1;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <HAL_GPIO_EXTI_Callback+0x90>)
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	3b01      	subs	r3, #1
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000712:	6113      	str	r3, [r2, #16]

    	currTime.tm_hour = currentTime.Hours;
 8000714:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <HAL_GPIO_EXTI_Callback+0x88>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 800071c:	609a      	str	r2, [r3, #8]
    	currTime.tm_min  = currentTime.Minutes;
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_GPIO_EXTI_Callback+0x88>)
 8000720:	785b      	ldrb	r3, [r3, #1]
 8000722:	461a      	mov	r2, r3
 8000724:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000726:	605a      	str	r2, [r3, #4]
    	currTime.tm_sec  = currentTime.Seconds;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_GPIO_EXTI_Callback+0x88>)
 800072a:	789b      	ldrb	r3, [r3, #2]
 800072c:	461a      	mov	r2, r3
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000730:	601a      	str	r2, [r3, #0]

    	timestamp = mktime(&currTime);
 8000732:	480a      	ldr	r0, [pc, #40]	; (800075c <HAL_GPIO_EXTI_Callback+0x94>)
 8000734:	f009 f920 	bl	8009978 <mktime>
 8000738:	4602      	mov	r2, r0
 800073a:	460b      	mov	r3, r1
 800073c:	4908      	ldr	r1, [pc, #32]	; (8000760 <HAL_GPIO_EXTI_Callback+0x98>)
 800073e:	e9c1 2300 	strd	r2, r3, [r1]
    	break;
 8000742:	e000      	b.n	8000746 <HAL_GPIO_EXTI_Callback+0x7e>
//    case BUTTON_SW3_PIN:
//      APP_BLE_Key_Button3_Action();
//      break;

    default:
      break;
 8000744:	bf00      	nop

  }
  return;
 8000746:	bf00      	nop
}
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000042c 	.word	0x2000042c
 8000754:	20000630 	.word	0x20000630
 8000758:	20000428 	.word	0x20000428
 800075c:	20000440 	.word	0x20000440
 8000760:	20000420 	.word	0x20000420

08000764 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <LL_EXTI_EnableIT_0_31+0x24>)
 800076e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000772:	4905      	ldr	r1, [pc, #20]	; (8000788 <LL_EXTI_EnableIT_0_31+0x24>)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	4313      	orrs	r3, r2
 8000778:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800077c:	bf00      	nop
 800077e:	370c      	adds	r7, #12
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	58000800 	.word	0x58000800

0800078c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4904      	ldr	r1, [pc, #16]	; (80007ac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4313      	orrs	r3, r2
 800079e:	600b      	str	r3, [r1, #0]

}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	58000800 	.word	0x58000800

080007b0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007b6:	4b0d      	ldr	r3, [pc, #52]	; (80007ec <ReadRtcSsrValue+0x3c>)
 80007b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ba:	b29b      	uxth	r3, r3
 80007bc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <ReadRtcSsrValue+0x3c>)
 80007c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80007c6:	e005      	b.n	80007d4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007cc:	4b07      	ldr	r3, [pc, #28]	; (80007ec <ReadRtcSsrValue+0x3c>)
 80007ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d1f5      	bne.n	80007c8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80007dc:	683b      	ldr	r3, [r7, #0]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40002800 	.word	0x40002800

080007f0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000800:	79ba      	ldrb	r2, [r7, #6]
 8000802:	491d      	ldr	r1, [pc, #116]	; (8000878 <LinkTimerAfter+0x88>)
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	440b      	add	r3, r1
 800080e:	3315      	adds	r3, #21
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000814:	7bfb      	ldrb	r3, [r7, #15]
 8000816:	2b06      	cmp	r3, #6
 8000818:	d009      	beq.n	800082e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800081a:	7bfa      	ldrb	r2, [r7, #15]
 800081c:	4916      	ldr	r1, [pc, #88]	; (8000878 <LinkTimerAfter+0x88>)
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3314      	adds	r3, #20
 800082a:	79fa      	ldrb	r2, [r7, #7]
 800082c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800082e:	79fa      	ldrb	r2, [r7, #7]
 8000830:	4911      	ldr	r1, [pc, #68]	; (8000878 <LinkTimerAfter+0x88>)
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3315      	adds	r3, #21
 800083e:	7bfa      	ldrb	r2, [r7, #15]
 8000840:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000842:	79fa      	ldrb	r2, [r7, #7]
 8000844:	490c      	ldr	r1, [pc, #48]	; (8000878 <LinkTimerAfter+0x88>)
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3314      	adds	r3, #20
 8000852:	79ba      	ldrb	r2, [r7, #6]
 8000854:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000856:	79ba      	ldrb	r2, [r7, #6]
 8000858:	4907      	ldr	r1, [pc, #28]	; (8000878 <LinkTimerAfter+0x88>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3315      	adds	r3, #21
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	701a      	strb	r2, [r3, #0]

  return;
 800086a:	bf00      	nop
}
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	20000118 	.word	0x20000118

0800087c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	71fb      	strb	r3, [r7, #7]
 8000888:	4613      	mov	r3, r2
 800088a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800088c:	4b29      	ldr	r3, [pc, #164]	; (8000934 <LinkTimerBefore+0xb8>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	79ba      	ldrb	r2, [r7, #6]
 8000894:	429a      	cmp	r2, r3
 8000896:	d032      	beq.n	80008fe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000898:	79ba      	ldrb	r2, [r7, #6]
 800089a:	4927      	ldr	r1, [pc, #156]	; (8000938 <LinkTimerBefore+0xbc>)
 800089c:	4613      	mov	r3, r2
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	4413      	add	r3, r2
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	440b      	add	r3, r1
 80008a6:	3314      	adds	r3, #20
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80008ac:	7bfa      	ldrb	r2, [r7, #15]
 80008ae:	4922      	ldr	r1, [pc, #136]	; (8000938 <LinkTimerBefore+0xbc>)
 80008b0:	4613      	mov	r3, r2
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	4413      	add	r3, r2
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	440b      	add	r3, r1
 80008ba:	3315      	adds	r3, #21
 80008bc:	79fa      	ldrb	r2, [r7, #7]
 80008be:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	491d      	ldr	r1, [pc, #116]	; (8000938 <LinkTimerBefore+0xbc>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	3315      	adds	r3, #21
 80008d0:	79ba      	ldrb	r2, [r7, #6]
 80008d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80008d4:	79fa      	ldrb	r2, [r7, #7]
 80008d6:	4918      	ldr	r1, [pc, #96]	; (8000938 <LinkTimerBefore+0xbc>)
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	440b      	add	r3, r1
 80008e2:	3314      	adds	r3, #20
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80008e8:	79ba      	ldrb	r2, [r7, #6]
 80008ea:	4913      	ldr	r1, [pc, #76]	; (8000938 <LinkTimerBefore+0xbc>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	440b      	add	r3, r1
 80008f6:	3314      	adds	r3, #20
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80008fc:	e014      	b.n	8000928 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80008fe:	79fa      	ldrb	r2, [r7, #7]
 8000900:	490d      	ldr	r1, [pc, #52]	; (8000938 <LinkTimerBefore+0xbc>)
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	440b      	add	r3, r1
 800090c:	3315      	adds	r3, #21
 800090e:	79ba      	ldrb	r2, [r7, #6]
 8000910:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	4908      	ldr	r1, [pc, #32]	; (8000938 <LinkTimerBefore+0xbc>)
 8000916:	4613      	mov	r3, r2
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4413      	add	r3, r2
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	440b      	add	r3, r1
 8000920:	3314      	adds	r3, #20
 8000922:	79fa      	ldrb	r2, [r7, #7]
 8000924:	701a      	strb	r2, [r3, #0]
  return;
 8000926:	bf00      	nop
}
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	200001a8 	.word	0x200001a8
 8000938:	20000118 	.word	0x20000118

0800093c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000946:	4b4e      	ldr	r3, [pc, #312]	; (8000a80 <linkTimer+0x144>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b06      	cmp	r3, #6
 800094e:	d118      	bne.n	8000982 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000950:	4b4b      	ldr	r3, [pc, #300]	; (8000a80 <linkTimer+0x144>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <linkTimer+0x148>)
 8000958:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800095a:	4a49      	ldr	r2, [pc, #292]	; (8000a80 <linkTimer+0x144>)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000960:	79fa      	ldrb	r2, [r7, #7]
 8000962:	4949      	ldr	r1, [pc, #292]	; (8000a88 <linkTimer+0x14c>)
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	440b      	add	r3, r1
 800096e:	3315      	adds	r3, #21
 8000970:	2206      	movs	r2, #6
 8000972:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000974:	4b45      	ldr	r3, [pc, #276]	; (8000a8c <linkTimer+0x150>)
 8000976:	f04f 32ff 	mov.w	r2, #4294967295
 800097a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	81fb      	strh	r3, [r7, #14]
 8000980:	e078      	b.n	8000a74 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000982:	f000 f909 	bl	8000b98 <ReturnTimeElapsed>
 8000986:	4603      	mov	r3, r0
 8000988:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	493e      	ldr	r1, [pc, #248]	; (8000a88 <linkTimer+0x14c>)
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3308      	adds	r3, #8
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	89fb      	ldrh	r3, [r7, #14]
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	4419      	add	r1, r3
 80009a2:	4839      	ldr	r0, [pc, #228]	; (8000a88 <linkTimer+0x14c>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	4403      	add	r3, r0
 80009ae:	3308      	adds	r3, #8
 80009b0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	4934      	ldr	r1, [pc, #208]	; (8000a88 <linkTimer+0x14c>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3308      	adds	r3, #8
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80009c6:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <linkTimer+0x144>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	4619      	mov	r1, r3
 80009ce:	4a2e      	ldr	r2, [pc, #184]	; (8000a88 <linkTimer+0x14c>)
 80009d0:	460b      	mov	r3, r1
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	440b      	add	r3, r1
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	3308      	adds	r3, #8
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d337      	bcc.n	8000a54 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80009e4:	4b26      	ldr	r3, [pc, #152]	; (8000a80 <linkTimer+0x144>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80009ea:	7b7a      	ldrb	r2, [r7, #13]
 80009ec:	4926      	ldr	r1, [pc, #152]	; (8000a88 <linkTimer+0x14c>)
 80009ee:	4613      	mov	r3, r2
 80009f0:	005b      	lsls	r3, r3, #1
 80009f2:	4413      	add	r3, r2
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	440b      	add	r3, r1
 80009f8:	3315      	adds	r3, #21
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80009fe:	e013      	b.n	8000a28 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a00:	7b7a      	ldrb	r2, [r7, #13]
 8000a02:	4921      	ldr	r1, [pc, #132]	; (8000a88 <linkTimer+0x14c>)
 8000a04:	4613      	mov	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	4413      	add	r3, r2
 8000a0a:	00db      	lsls	r3, r3, #3
 8000a0c:	440b      	add	r3, r1
 8000a0e:	3315      	adds	r3, #21
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a14:	7b7a      	ldrb	r2, [r7, #13]
 8000a16:	491c      	ldr	r1, [pc, #112]	; (8000a88 <linkTimer+0x14c>)
 8000a18:	4613      	mov	r3, r2
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	4413      	add	r3, r2
 8000a1e:	00db      	lsls	r3, r3, #3
 8000a20:	440b      	add	r3, r1
 8000a22:	3315      	adds	r3, #21
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a28:	7b3b      	ldrb	r3, [r7, #12]
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d00b      	beq.n	8000a46 <linkTimer+0x10a>
 8000a2e:	7b3a      	ldrb	r2, [r7, #12]
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <linkTimer+0x14c>)
 8000a32:	4613      	mov	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	440b      	add	r3, r1
 8000a3c:	3308      	adds	r3, #8
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d2dc      	bcs.n	8000a00 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000a46:	7b7a      	ldrb	r2, [r7, #13]
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fecf 	bl	80007f0 <LinkTimerAfter>
 8000a52:	e00f      	b.n	8000a74 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <linkTimer+0x144>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff0c 	bl	800087c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <linkTimer+0x144>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <linkTimer+0x148>)
 8000a6c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <linkTimer+0x144>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000a74:	89fb      	ldrh	r3, [r7, #14]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001a8 	.word	0x200001a8
 8000a84:	200001a9 	.word	0x200001a9
 8000a88:	20000118 	.word	0x20000118
 8000a8c:	200001ac 	.word	0x200001ac

08000a90 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	460a      	mov	r2, r1
 8000a9a:	71fb      	strb	r3, [r7, #7]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000aa0:	4b39      	ldr	r3, [pc, #228]	; (8000b88 <UnlinkTimer+0xf8>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d111      	bne.n	8000ad0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000aac:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <UnlinkTimer+0xf8>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <UnlinkTimer+0xfc>)
 8000ab4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000ab6:	79fa      	ldrb	r2, [r7, #7]
 8000ab8:	4935      	ldr	r1, [pc, #212]	; (8000b90 <UnlinkTimer+0x100>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3315      	adds	r3, #21
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <UnlinkTimer+0xf8>)
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	e03e      	b.n	8000b4e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000ad0:	79fa      	ldrb	r2, [r7, #7]
 8000ad2:	492f      	ldr	r1, [pc, #188]	; (8000b90 <UnlinkTimer+0x100>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	440b      	add	r3, r1
 8000ade:	3314      	adds	r3, #20
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000ae4:	79fa      	ldrb	r2, [r7, #7]
 8000ae6:	492a      	ldr	r1, [pc, #168]	; (8000b90 <UnlinkTimer+0x100>)
 8000ae8:	4613      	mov	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	440b      	add	r3, r1
 8000af2:	3315      	adds	r3, #21
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000af8:	79f9      	ldrb	r1, [r7, #7]
 8000afa:	7bfa      	ldrb	r2, [r7, #15]
 8000afc:	4824      	ldr	r0, [pc, #144]	; (8000b90 <UnlinkTimer+0x100>)
 8000afe:	460b      	mov	r3, r1
 8000b00:	005b      	lsls	r3, r3, #1
 8000b02:	440b      	add	r3, r1
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	4403      	add	r3, r0
 8000b08:	3315      	adds	r3, #21
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b2d8      	uxtb	r0, r3
 8000b0e:	4920      	ldr	r1, [pc, #128]	; (8000b90 <UnlinkTimer+0x100>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	3315      	adds	r3, #21
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d013      	beq.n	8000b4e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b26:	79f9      	ldrb	r1, [r7, #7]
 8000b28:	7bba      	ldrb	r2, [r7, #14]
 8000b2a:	4819      	ldr	r0, [pc, #100]	; (8000b90 <UnlinkTimer+0x100>)
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	440b      	add	r3, r1
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	4403      	add	r3, r0
 8000b36:	3314      	adds	r3, #20
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	b2d8      	uxtb	r0, r3
 8000b3c:	4914      	ldr	r1, [pc, #80]	; (8000b90 <UnlinkTimer+0x100>)
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	440b      	add	r3, r1
 8000b48:	3314      	adds	r3, #20
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	490f      	ldr	r1, [pc, #60]	; (8000b90 <UnlinkTimer+0x100>)
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	440b      	add	r3, r1
 8000b5c:	330c      	adds	r3, #12
 8000b5e:	2201      	movs	r2, #1
 8000b60:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <UnlinkTimer+0xf8>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	2b06      	cmp	r3, #6
 8000b6a:	d107      	bne.n	8000b7c <UnlinkTimer+0xec>
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d104      	bne.n	8000b7c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <UnlinkTimer+0x104>)
 8000b74:	f04f 32ff 	mov.w	r2, #4294967295
 8000b78:	601a      	str	r2, [r3, #0]
  }

  return;
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
}
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	200001a8 	.word	0x200001a8
 8000b8c:	200001a9 	.word	0x200001a9
 8000b90:	20000118 	.word	0x20000118
 8000b94:	200001ac 	.word	0x200001ac

08000b98 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <ReturnTimeElapsed+0x70>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ba6:	d026      	beq.n	8000bf6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ba8:	f7ff fe02 	bl	80007b0 <ReadRtcSsrValue>
 8000bac:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <ReturnTimeElapsed+0x70>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d805      	bhi.n	8000bc4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <ReturnTimeElapsed+0x70>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e00a      	b.n	8000bda <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <ReturnTimeElapsed+0x74>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <ReturnTimeElapsed+0x70>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <ReturnTimeElapsed+0x78>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	461a      	mov	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	fb02 f303 	mul.w	r3, r2, r3
 8000be6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <ReturnTimeElapsed+0x7c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	461a      	mov	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	40d3      	lsrs	r3, r2
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	e001      	b.n	8000bfa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	b29b      	uxth	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200001ac 	.word	0x200001ac
 8000c0c:	200002c2 	.word	0x200002c2
 8000c10:	200002c1 	.word	0x200002c1
 8000c14:	200002c0 	.word	0x200002c0

08000c18 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d108      	bne.n	8000c3a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c28:	f7ff fdc2 	bl	80007b0 <ReadRtcSsrValue>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4a24      	ldr	r2, [pc, #144]	; (8000cc0 <RestartWakeupCounter+0xa8>)
 8000c30:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f002 ff71 	bl	8003b1a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000c38:	e03e      	b.n	8000cb8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d803      	bhi.n	8000c48 <RestartWakeupCounter+0x30>
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <RestartWakeupCounter+0xac>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d002      	beq.n	8000c4e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000c4e:	bf00      	nop
 8000c50:	4b1d      	ldr	r3, [pc, #116]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d0f7      	beq.n	8000c50 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000c60:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b17      	ldr	r3, [pc, #92]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c74:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <RestartWakeupCounter+0xb4>)
 8000c78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c7c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f002 ff59 	bl	8003b36 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <RestartWakeupCounter+0xb8>)
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	0c1b      	lsrs	r3, r3, #16
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	88fa      	ldrh	r2, [r7, #6]
 8000c8e:	4910      	ldr	r1, [pc, #64]	; (8000cd0 <RestartWakeupCounter+0xb8>)
 8000c90:	4313      	orrs	r3, r2
 8000c92:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c94:	f7ff fd8c 	bl	80007b0 <ReadRtcSsrValue>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <RestartWakeupCounter+0xa8>)
 8000c9c:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <RestartWakeupCounter+0xb0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cb0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000cb2:	f3af 8000 	nop.w
  return ;
 8000cb6:	bf00      	nop
}
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001ac 	.word	0x200001ac
 8000cc4:	200002c0 	.word	0x200002c0
 8000cc8:	200002bc 	.word	0x200002bc
 8000ccc:	58000800 	.word	0x58000800
 8000cd0:	40002800 	.word	0x40002800

08000cd4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000cda:	4b47      	ldr	r3, [pc, #284]	; (8000df8 <RescheduleTimerList+0x124>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce6:	d108      	bne.n	8000cfa <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000ce8:	bf00      	nop
 8000cea:	4b44      	ldr	r3, [pc, #272]	; (8000dfc <RescheduleTimerList+0x128>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68db      	ldr	r3, [r3, #12]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d1f7      	bne.n	8000cea <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000cfa:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <RescheduleTimerList+0x128>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689a      	ldr	r2, [r3, #8]
 8000d02:	4b3e      	ldr	r3, [pc, #248]	; (8000dfc <RescheduleTimerList+0x128>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d0c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d0e:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <RescheduleTimerList+0x12c>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d14:	7bfa      	ldrb	r2, [r7, #15]
 8000d16:	493b      	ldr	r1, [pc, #236]	; (8000e04 <RescheduleTimerList+0x130>)
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	440b      	add	r3, r1
 8000d22:	3308      	adds	r3, #8
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000d28:	f7ff ff36 	bl	8000b98 <ReturnTimeElapsed>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	d205      	bcs.n	8000d44 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <RescheduleTimerList+0x134>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
 8000d42:	e04d      	b.n	8000de0 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <RescheduleTimerList+0x138>)
 8000d48:	8812      	ldrh	r2, [r2, #0]
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	4413      	add	r3, r2
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d906      	bls.n	8000d64 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000d56:	4b2d      	ldr	r3, [pc, #180]	; (8000e0c <RescheduleTimerList+0x138>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <RescheduleTimerList+0x134>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e03d      	b.n	8000de0 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	88fb      	ldrh	r3, [r7, #6]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d6e:	4b26      	ldr	r3, [pc, #152]	; (8000e08 <RescheduleTimerList+0x134>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d74:	e034      	b.n	8000de0 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000d76:	7bfa      	ldrb	r2, [r7, #15]
 8000d78:	4922      	ldr	r1, [pc, #136]	; (8000e04 <RescheduleTimerList+0x130>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	440b      	add	r3, r1
 8000d84:	3308      	adds	r3, #8
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d20a      	bcs.n	8000da4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000d8e:	7bfa      	ldrb	r2, [r7, #15]
 8000d90:	491c      	ldr	r1, [pc, #112]	; (8000e04 <RescheduleTimerList+0x130>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3308      	adds	r3, #8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e013      	b.n	8000dcc <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000da4:	7bfa      	ldrb	r2, [r7, #15]
 8000da6:	4917      	ldr	r1, [pc, #92]	; (8000e04 <RescheduleTimerList+0x130>)
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	440b      	add	r3, r1
 8000db2:	3308      	adds	r3, #8
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	88fb      	ldrh	r3, [r7, #6]
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	1ac9      	subs	r1, r1, r3
 8000dbc:	4811      	ldr	r0, [pc, #68]	; (8000e04 <RescheduleTimerList+0x130>)
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4403      	add	r3, r0
 8000dc8:	3308      	adds	r3, #8
 8000dca:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	490d      	ldr	r1, [pc, #52]	; (8000e04 <RescheduleTimerList+0x130>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	3315      	adds	r3, #21
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b06      	cmp	r3, #6
 8000de4:	d1c7      	bne.n	8000d76 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000de6:	89bb      	ldrh	r3, [r7, #12]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff15 	bl	8000c18 <RestartWakeupCounter>

  return ;
 8000dee:	bf00      	nop
}
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40002800 	.word	0x40002800
 8000dfc:	200002bc 	.word	0x200002bc
 8000e00:	200001a8 	.word	0x200001a8
 8000e04:	20000118 	.word	0x20000118
 8000e08:	200001b0 	.word	0x200001b0
 8000e0c:	200002c4 	.word	0x200002c4

08000e10 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e16:	f3ef 8310 	mrs	r3, PRIMASK
 8000e1a:	617b      	str	r3, [r7, #20]
  return(result);
 8000e1c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e24:	4b5f      	ldr	r3, [pc, #380]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	22ca      	movs	r2, #202	; 0xca
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e2e:	4b5d      	ldr	r3, [pc, #372]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2253      	movs	r2, #83	; 0x53
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000e38:	4b5a      	ldr	r3, [pc, #360]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e4a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000e4c:	4b56      	ldr	r3, [pc, #344]	; (8000fa8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000e54:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e58:	4954      	ldr	r1, [pc, #336]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	440b      	add	r3, r1
 8000e64:	330c      	adds	r3, #12
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d172      	bne.n	8000f54 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000e6e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e72:	494e      	ldr	r1, [pc, #312]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	440b      	add	r3, r1
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000e82:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e86:	4949      	ldr	r1, [pc, #292]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	440b      	add	r3, r1
 8000e92:	3310      	adds	r3, #16
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000e98:	4b45      	ldr	r3, [pc, #276]	; (8000fb0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d050      	beq.n	8000f44 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000ea2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ea6:	4941      	ldr	r1, [pc, #260]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	330d      	adds	r3, #13
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d126      	bne.n	8000f0a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ebc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fde4 	bl	8000a90 <UnlinkTimer>
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	f383 8810 	msr	PRIMASK, r3
}
 8000ed2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000ed4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ed8:	4934      	ldr	r1, [pc, #208]	; (8000fac <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000eda:	4613      	mov	r3, r2
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	4413      	add	r3, r2
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	440b      	add	r3, r1
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fa4e 	bl	8001390 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	22ca      	movs	r2, #202	; 0xca
 8000efc:	625a      	str	r2, [r3, #36]	; 0x24
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2253      	movs	r2, #83	; 0x53
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
 8000f08:	e014      	b.n	8000f34 <HW_TS_RTC_Wakeup_Handler+0x124>
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f383 8810 	msr	PRIMASK, r3
}
 8000f14:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f9ac 	bl	8001278 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	22ca      	movs	r2, #202	; 0xca
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2253      	movs	r2, #83	; 0x53
 8000f32:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	69b8      	ldr	r0, [r7, #24]
 8000f3e:	f000 faaf 	bl	80014a0 <HW_TS_RTC_Int_AppNot>
 8000f42:	e025      	b.n	8000f90 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000f44:	f7ff fec6 	bl	8000cd4 <RescheduleTimerList>
 8000f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	f383 8810 	msr	PRIMASK, r3
}
 8000f52:	e01d      	b.n	8000f90 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f54:	bf00      	nop
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d0f7      	beq.n	8000f56 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f7a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000f7e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f383 8810 	msr	PRIMASK, r3
}
 8000f8e:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	22ff      	movs	r2, #255	; 0xff
 8000f98:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000f9a:	bf00      	nop
}
 8000f9c:	3728      	adds	r7, #40	; 0x28
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200002bc 	.word	0x200002bc
 8000fa8:	200001a8 	.word	0x200001a8
 8000fac:	20000118 	.word	0x20000118
 8000fb0:	200001b0 	.word	0x200001b0
 8000fb4:	58000800 	.word	0x58000800

08000fb8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000fc4:	4a64      	ldr	r2, [pc, #400]	; (8001158 <HW_TS_Init+0x1a0>)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000fca:	4b63      	ldr	r3, [pc, #396]	; (8001158 <HW_TS_Init+0x1a0>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	22ca      	movs	r2, #202	; 0xca
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8000fd4:	4b60      	ldr	r3, [pc, #384]	; (8001158 <HW_TS_Init+0x1a0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2253      	movs	r2, #83	; 0x53
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000fde:	4b5f      	ldr	r3, [pc, #380]	; (800115c <HW_TS_Init+0x1a4>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4a5e      	ldr	r2, [pc, #376]	; (800115c <HW_TS_Init+0x1a4>)
 8000fe4:	f043 0320 	orr.w	r3, r3, #32
 8000fe8:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000fea:	4b5c      	ldr	r3, [pc, #368]	; (800115c <HW_TS_Init+0x1a4>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	f1c3 0304 	rsb	r3, r3, #4
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b58      	ldr	r3, [pc, #352]	; (8001160 <HW_TS_Init+0x1a8>)
 8000ffe:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001000:	4b56      	ldr	r3, [pc, #344]	; (800115c <HW_TS_Init+0x1a4>)
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001008:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800100c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	fa92 f2a2 	rbit	r2, r2
 8001014:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800101a:	697a      	ldr	r2, [r7, #20]
 800101c:	2a00      	cmp	r2, #0
 800101e:	d101      	bne.n	8001024 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001020:	2220      	movs	r2, #32
 8001022:	e003      	b.n	800102c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	fab2 f282 	clz	r2, r2
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	40d3      	lsrs	r3, r2
 800102e:	b2db      	uxtb	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <HW_TS_Init+0x1ac>)
 8001036:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001038:	4b48      	ldr	r3, [pc, #288]	; (800115c <HW_TS_Init+0x1a4>)
 800103a:	691b      	ldr	r3, [r3, #16]
 800103c:	b29b      	uxth	r3, r3
 800103e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001042:	b29b      	uxth	r3, r3
 8001044:	3301      	adds	r3, #1
 8001046:	b29a      	uxth	r2, r3
 8001048:	4b47      	ldr	r3, [pc, #284]	; (8001168 <HW_TS_Init+0x1b0>)
 800104a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800104c:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HW_TS_Init+0x1b0>)
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	3b01      	subs	r3, #1
 8001052:	4a44      	ldr	r2, [pc, #272]	; (8001164 <HW_TS_Init+0x1ac>)
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800105e:	4a40      	ldr	r2, [pc, #256]	; (8001160 <HW_TS_Init+0x1a8>)
 8001060:	7812      	ldrb	r2, [r2, #0]
 8001062:	40d3      	lsrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800106c:	4293      	cmp	r3, r2
 800106e:	d904      	bls.n	800107a <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001070:	4b3e      	ldr	r3, [pc, #248]	; (800116c <HW_TS_Init+0x1b4>)
 8001072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001076:	801a      	strh	r2, [r3, #0]
 8001078:	e003      	b.n	8001082 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HW_TS_Init+0x1b4>)
 8001080:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001082:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001086:	f7ff fb81 	bl	800078c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800108a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800108e:	f7ff fb69 	bl	8000764 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d143      	bne.n	8001120 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <HW_TS_Init+0x1b8>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <HW_TS_Init+0x1bc>)
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	77fb      	strb	r3, [r7, #31]
 80010aa:	e00c      	b.n	80010c6 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80010ac:	7ffa      	ldrb	r2, [r7, #31]
 80010ae:	4932      	ldr	r1, [pc, #200]	; (8001178 <HW_TS_Init+0x1c0>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	330c      	adds	r3, #12
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010c0:	7ffb      	ldrb	r3, [r7, #31]
 80010c2:	3301      	adds	r3, #1
 80010c4:	77fb      	strb	r3, [r7, #31]
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d9ef      	bls.n	80010ac <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80010cc:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HW_TS_Init+0x1c4>)
 80010ce:	2206      	movs	r2, #6
 80010d0:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80010d2:	4b21      	ldr	r3, [pc, #132]	; (8001158 <HW_TS_Init+0x1a0>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HW_TS_Init+0x1a0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <HW_TS_Init+0x1a0>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <HW_TS_Init+0x1a0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010fa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HW_TS_Init+0x1c8>)
 80010fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001102:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001104:	2003      	movs	r0, #3
 8001106:	f002 fd16 	bl	8003b36 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HW_TS_Init+0x1a0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HW_TS_Init+0x1a0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	e00a      	b.n	8001136 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HW_TS_Init+0x1a0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001130:	2003      	movs	r0, #3
 8001132:	f002 fcf2 	bl	8003b1a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <HW_TS_Init+0x1a0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001140:	2200      	movs	r2, #0
 8001142:	2103      	movs	r1, #3
 8001144:	2003      	movs	r0, #3
 8001146:	f002 fca6 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800114a:	2003      	movs	r0, #3
 800114c:	f002 fcbd 	bl	8003aca <HAL_NVIC_EnableIRQ>

  return;
 8001150:	bf00      	nop
}
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	200002bc 	.word	0x200002bc
 800115c:	40002800 	.word	0x40002800
 8001160:	200002c0 	.word	0x200002c0
 8001164:	200002c1 	.word	0x200002c1
 8001168:	200002c2 	.word	0x200002c2
 800116c:	200002c4 	.word	0x200002c4
 8001170:	200001b0 	.word	0x200001b0
 8001174:	200001ac 	.word	0x200001ac
 8001178:	20000118 	.word	0x20000118
 800117c:	200001a8 	.word	0x200001a8
 8001180:	58000800 	.word	0x58000800

08001184 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001184:	b480      	push	{r7}
 8001186:	b08b      	sub	sp, #44	; 0x2c
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	4613      	mov	r3, r2
 8001192:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800119a:	f3ef 8310 	mrs	r3, PRIMASK
 800119e:	61fb      	str	r3, [r7, #28]
  return(result);
 80011a0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80011a4:	b672      	cpsid	i
}
 80011a6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011a8:	e004      	b.n	80011b4 <HW_TS_Create+0x30>
  {
    loop++;
 80011aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ae:	3301      	adds	r3, #1
 80011b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011b8:	2b05      	cmp	r3, #5
 80011ba:	d80c      	bhi.n	80011d6 <HW_TS_Create+0x52>
 80011bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011c0:	492c      	ldr	r1, [pc, #176]	; (8001274 <HW_TS_Create+0xf0>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	330c      	adds	r3, #12
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1e9      	bne.n	80011aa <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d038      	beq.n	8001250 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80011de:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011e2:	4924      	ldr	r1, [pc, #144]	; (8001274 <HW_TS_Create+0xf0>)
 80011e4:	4613      	mov	r3, r2
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	4413      	add	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	330c      	adds	r3, #12
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	f383 8810 	msr	PRIMASK, r3
}
 80011fe:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001200:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001204:	491b      	ldr	r1, [pc, #108]	; (8001274 <HW_TS_Create+0xf0>)
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	00db      	lsls	r3, r3, #3
 800120e:	440b      	add	r3, r1
 8001210:	3310      	adds	r3, #16
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001216:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800121a:	4916      	ldr	r1, [pc, #88]	; (8001274 <HW_TS_Create+0xf0>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	330d      	adds	r3, #13
 8001228:	79fa      	ldrb	r2, [r7, #7]
 800122a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800122c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001230:	4910      	ldr	r1, [pc, #64]	; (8001274 <HW_TS_Create+0xf0>)
 8001232:	4613      	mov	r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	4413      	add	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	440b      	add	r3, r1
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001246:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001248:	2300      	movs	r3, #0
 800124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800124e:	e008      	b.n	8001262 <HW_TS_Create+0xde>
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	f383 8810 	msr	PRIMASK, r3
}
 800125a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800125c:	2301      	movs	r3, #1
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001266:	4618      	mov	r0, r3
 8001268:	372c      	adds	r7, #44	; 0x2c
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000118 	.word	0x20000118

08001278 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001282:	f3ef 8310 	mrs	r3, PRIMASK
 8001286:	60fb      	str	r3, [r7, #12]
  return(result);
 8001288:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800128a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800128c:	b672      	cpsid	i
}
 800128e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001290:	2003      	movs	r0, #3
 8001292:	f002 fc28 	bl	8003ae6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HW_TS_Stop+0x100>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	22ca      	movs	r2, #202	; 0xca
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
 80012a0:	4b35      	ldr	r3, [pc, #212]	; (8001378 <HW_TS_Stop+0x100>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2253      	movs	r2, #83	; 0x53
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012aa:	79fa      	ldrb	r2, [r7, #7]
 80012ac:	4933      	ldr	r1, [pc, #204]	; (800137c <HW_TS_Stop+0x104>)
 80012ae:	4613      	mov	r3, r2
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	330c      	adds	r3, #12
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d148      	bne.n	8001354 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2100      	movs	r1, #0
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fbe2 	bl	8000a90 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80012cc:	4b2c      	ldr	r3, [pc, #176]	; (8001380 <HW_TS_Stop+0x108>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012d2:	7cfb      	ldrb	r3, [r7, #19]
 80012d4:	2b06      	cmp	r3, #6
 80012d6:	d135      	bne.n	8001344 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <HW_TS_Stop+0x10c>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e4:	d108      	bne.n	80012f8 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80012e6:	bf00      	nop
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HW_TS_Stop+0x100>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1f7      	bne.n	80012e8 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <HW_TS_Stop+0x100>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	4b1d      	ldr	r3, [pc, #116]	; (8001378 <HW_TS_Stop+0x100>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800130c:	bf00      	nop
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HW_TS_Stop+0x100>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f7      	beq.n	800130e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <HW_TS_Stop+0x100>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <HW_TS_Stop+0x100>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001332:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <HW_TS_Stop+0x110>)
 8001336:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800133a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800133c:	2003      	movs	r0, #3
 800133e:	f002 fbfa 	bl	8003b36 <HAL_NVIC_ClearPendingIRQ>
 8001342:	e007      	b.n	8001354 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <HW_TS_Stop+0x114>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	7cfa      	ldrb	r2, [r7, #19]
 800134c:	429a      	cmp	r2, r3
 800134e:	d001      	beq.n	8001354 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001350:	f7ff fcc0 	bl	8000cd4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HW_TS_Stop+0x100>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	22ff      	movs	r2, #255	; 0xff
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800135e:	2003      	movs	r0, #3
 8001360:	f002 fbb3 	bl	8003aca <HAL_NVIC_EnableIRQ>
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	f383 8810 	msr	PRIMASK, r3
}
 800136e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001370:	bf00      	nop
}
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200002bc 	.word	0x200002bc
 800137c:	20000118 	.word	0x20000118
 8001380:	200001a8 	.word	0x200001a8
 8001384:	40002800 	.word	0x40002800
 8001388:	58000800 	.word	0x58000800
 800138c:	200001a9 	.word	0x200001a9

08001390 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	6039      	str	r1, [r7, #0]
 800139a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800139c:	79fa      	ldrb	r2, [r7, #7]
 800139e:	493c      	ldr	r1, [pc, #240]	; (8001490 <HW_TS_Start+0x100>)
 80013a0:	4613      	mov	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	330c      	adds	r3, #12
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d103      	bne.n	80013bc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff ff5e 	bl	8001278 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013bc:	f3ef 8310 	mrs	r3, PRIMASK
 80013c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80013c2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013c6:	b672      	cpsid	i
}
 80013c8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013ca:	2003      	movs	r0, #3
 80013cc:	f002 fb8b 	bl	8003ae6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <HW_TS_Start+0x104>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	22ca      	movs	r2, #202	; 0xca
 80013d8:	625a      	str	r2, [r3, #36]	; 0x24
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HW_TS_Start+0x104>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2253      	movs	r2, #83	; 0x53
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80013e4:	79fa      	ldrb	r2, [r7, #7]
 80013e6:	492a      	ldr	r1, [pc, #168]	; (8001490 <HW_TS_Start+0x100>)
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	440b      	add	r3, r1
 80013f2:	330c      	adds	r3, #12
 80013f4:	2202      	movs	r2, #2
 80013f6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	4925      	ldr	r1, [pc, #148]	; (8001490 <HW_TS_Start+0x100>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3308      	adds	r3, #8
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	4920      	ldr	r1, [pc, #128]	; (8001490 <HW_TS_Start+0x100>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	3304      	adds	r3, #4
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fa8a 	bl	800093c <linkTimer>
 8001428:	4603      	mov	r3, r0
 800142a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800142c:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <HW_TS_Start+0x108>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001432:	4b1a      	ldr	r3, [pc, #104]	; (800149c <HW_TS_Start+0x10c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b2db      	uxtb	r3, r3
 8001438:	7c7a      	ldrb	r2, [r7, #17]
 800143a:	429a      	cmp	r2, r3
 800143c:	d002      	beq.n	8001444 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800143e:	f7ff fc49 	bl	8000cd4 <RescheduleTimerList>
 8001442:	e013      	b.n	800146c <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	4912      	ldr	r1, [pc, #72]	; (8001490 <HW_TS_Start+0x100>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3308      	adds	r3, #8
 8001454:	6819      	ldr	r1, [r3, #0]
 8001456:	8a7b      	ldrh	r3, [r7, #18]
 8001458:	79fa      	ldrb	r2, [r7, #7]
 800145a:	1ac9      	subs	r1, r1, r3
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <HW_TS_Start+0x100>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4403      	add	r3, r0
 8001468:	3308      	adds	r3, #8
 800146a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HW_TS_Start+0x104>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001476:	2003      	movs	r0, #3
 8001478:	f002 fb27 	bl	8003aca <HAL_NVIC_EnableIRQ>
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f383 8810 	msr	PRIMASK, r3
}
 8001486:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001488:	bf00      	nop
}
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000118 	.word	0x20000118
 8001494:	200002bc 	.word	0x200002bc
 8001498:	200001a8 	.word	0x200001a8
 800149c:	200001a9 	.word	0x200001a9

080014a0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	460b      	mov	r3, r1
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4798      	blx	r3

  return;
 80014b2:	bf00      	nop
}
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_UART_TxCpltCallback+0x4c>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d00a      	beq.n	80014e4 <HAL_UART_TxCpltCallback+0x28>
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <HAL_UART_TxCpltCallback+0x50>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d10f      	bne.n	80014f4 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80014d4:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <HAL_UART_TxCpltCallback+0x54>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00d      	beq.n	80014f8 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_UART_TxCpltCallback+0x54>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4798      	blx	r3
            }
            break;
 80014e2:	e009      	b.n	80014f8 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_UART_TxCpltCallback+0x58>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_UART_TxCpltCallback+0x58>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4798      	blx	r3
            }
            break;
 80014f2:	e003      	b.n	80014fc <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80014f4:	bf00      	nop
 80014f6:	e002      	b.n	80014fe <HAL_UART_TxCpltCallback+0x42>
            break;
 80014f8:	bf00      	nop
 80014fa:	e000      	b.n	80014fe <HAL_UART_TxCpltCallback+0x42>
            break;
 80014fc:	bf00      	nop
    }

    return;
 80014fe:	bf00      	nop
}
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40008000 	.word	0x40008000
 800150c:	40013800 	.word	0x40013800
 8001510:	20000470 	.word	0x20000470
 8001514:	20000464 	.word	0x20000464

08001518 <LL_PWR_SMPS_Enable>:
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <LL_PWR_SMPS_Enable+0x1c>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <LL_PWR_SMPS_Enable+0x1c>)
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	61d3      	str	r3, [r2, #28]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	58000400 	.word	0x58000400

08001538 <LL_PWR_SMPS_SetStartupCurrent>:
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001542:	69db      	ldr	r3, [r3, #28]
 8001544:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001548:	4904      	ldr	r1, [pc, #16]	; (800155c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4313      	orrs	r3, r2
 800154e:	61cb      	str	r3, [r1, #28]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	58000400 	.word	0x58000400

08001560 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 8001560:	b480      	push	{r7}
 8001562:	b087      	sub	sp, #28
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	f023 020f 	bic.w	r2, r3, #15
 8001582:	4913      	ldr	r1, [pc, #76]	; (80015d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4313      	orrs	r3, r2
 8001588:	61cb      	str	r3, [r1, #28]
}
 800158a:	e019      	b.n	80015c0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3b06      	subs	r3, #6
 8001590:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4413      	add	r3, r2
 8001598:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	da02      	bge.n	80015a6 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
 80015a4:	e004      	b.n	80015b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	dd01      	ble.n	80015b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80015ac:	230f      	movs	r3, #15
 80015ae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80015b2:	69db      	ldr	r3, [r3, #28]
 80015b4:	f023 020f 	bic.w	r2, r3, #15
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	4905      	ldr	r1, [pc, #20]	; (80015d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	61cb      	str	r3, [r1, #28]
}
 80015c0:	bf00      	nop
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	1fff7558 	.word	0x1fff7558
 80015d0:	58000400 	.word	0x58000400

080015d4 <LL_EXTI_DisableIT_0_31>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <LL_EXTI_DisableIT_0_31+0x28>)
 80015de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4905      	ldr	r1, [pc, #20]	; (80015fc <LL_EXTI_DisableIT_0_31+0x28>)
 80015e8:	4013      	ands	r3, r2
 80015ea:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	58000800 	.word	0x58000800

08001600 <LL_EXTI_DisableIT_32_63>:
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001608:	4b07      	ldr	r3, [pc, #28]	; (8001628 <LL_EXTI_DisableIT_32_63+0x28>)
 800160a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	43db      	mvns	r3, r3
 8001612:	4905      	ldr	r1, [pc, #20]	; (8001628 <LL_EXTI_DisableIT_32_63+0x28>)
 8001614:	4013      	ands	r3, r2
 8001616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	58000800 	.word	0x58000800

0800162c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001638:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800163a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800163e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001646:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001652:	4313      	orrs	r3, r2
 8001654:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	cafecafe 	.word	0xcafecafe

08001668 <LL_RCC_LSE_SetDriveCapability>:
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001678:	f023 0218 	bic.w	r2, r3, #24
 800167c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4313      	orrs	r3, r2
 8001684:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_AHB1_GRP1_EnableClock>:
{
 80016b6:	b480      	push	{r7}
 80016b8:	b085      	sub	sp, #20
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4013      	ands	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_AHB2_GRP1_EnableClock>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80016f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800170c:	68fb      	ldr	r3, [r7, #12]
}
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <LL_LPM_EnableSleep+0x1c>)
 8001722:	691b      	ldr	r3, [r3, #16]
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <LL_LPM_EnableSleep+0x1c>)
 8001726:	f023 0304 	bic.w	r3, r3, #4
 800172a:	6113      	str	r3, [r2, #16]
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	22ff      	movs	r2, #255	; 0xff
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	22ca      	movs	r2, #202	; 0xca
 8001762:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2253      	movs	r2, #83	; 0x53
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f023 0207 	bic.w	r2, r3, #7
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	609a      	str	r2, [r3, #8]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017a0:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <main+0x58>)
 80017a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017a6:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a8:	f001 ff76 	bl	8003698 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80017ac:	f000 fa31 	bl	8001c12 <Reset_Device>
  Config_HSE();
 80017b0:	f000 fa1b 	bl	8001bea <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b4:	f000 f820 	bl	80017f8 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80017b8:	f000 f8a6 	bl	8001908 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80017bc:	f000 fa0e 	bl	8001bdc <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80017c0:	f000 fa2e 	bl	8001c20 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c4:	f000 f9ac 	bl	8001b20 <MX_GPIO_Init>
  MX_DMA_Init();
 80017c8:	f000 f98c 	bl	8001ae4 <MX_DMA_Init>
  MX_RF_Init();
 80017cc:	f000 f8b0 	bl	8001930 <MX_RF_Init>
  MX_RTC_Init();
 80017d0:	f000 f8b6 	bl	8001940 <MX_RTC_Init>
  MX_SPI1_Init();
 80017d4:	f000 f948 	bl	8001a68 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* -1- Initialize LEDs mounted on P-NUCLEO-WB55 board */
    BSP_LED_Init(LED_BLUE);
 80017d8:	2000      	movs	r0, #0
 80017da:	f001 fddd 	bl	8003398 <BSP_LED_Init>
    BSP_LED_Init(LED_RED);
 80017de:	2002      	movs	r0, #2
 80017e0:	f001 fdda 	bl	8003398 <BSP_LED_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80017e4:	f7fe fea8 	bl	8000538 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f007 fd90 	bl	8009310 <UTIL_SEQ_Run>
 80017f0:	e7fa      	b.n	80017e8 <main+0x4c>
 80017f2:	bf00      	nop
 80017f4:	58004000 	.word	0x58004000

080017f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b0ae      	sub	sp, #184	; 0xb8
 80017fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001802:	2248      	movs	r2, #72	; 0x48
 8001804:	2100      	movs	r1, #0
 8001806:	4618      	mov	r0, r3
 8001808:	f007 ffd6 	bl	80097b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2250      	movs	r2, #80	; 0x50
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f007 ffc6 	bl	80097b8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800182c:	f002 fdee 	bl	800440c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ff19 	bl	8001668 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <SystemClock_Config+0x10c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <SystemClock_Config+0x10c>)
 8001840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <SystemClock_Config+0x10c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001852:	2307      	movs	r3, #7
 8001854:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800185c:	2301      	movs	r3, #1
 800185e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001860:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001864:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001866:	2340      	movs	r3, #64	; 0x40
 8001868:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800186c:	2300      	movs	r3, #0
 800186e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001872:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001876:	4618      	mov	r0, r3
 8001878:	f003 f996 	bl	8004ba8 <HAL_RCC_OscConfig>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001882:	f000 f9fe 	bl	8001c82 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001886:	236f      	movs	r3, #111	; 0x6f
 8001888:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800188a:	2302      	movs	r3, #2
 800188c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f003 fd09 	bl	80052c0 <HAL_RCC_ClockConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018b4:	f000 f9e5 	bl	8001c82 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80018b8:	f643 0303 	movw	r3, #14339	; 0x3803
 80018bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80018cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018d0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80018d2:	2302      	movs	r3, #2
 80018d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018d6:	2310      	movs	r3, #16
 80018d8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4618      	mov	r0, r3
 80018de:	f004 f904 	bl	8005aea <HAL_RCCEx_PeriphCLKConfig>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80018e8:	f000 f9cb 	bl	8001c82 <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff fe23 	bl	8001538 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80018f2:	2004      	movs	r0, #4
 80018f4:	f7ff fe34 	bl	8001560 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80018f8:	f7ff fe0e 	bl	8001518 <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 80018fc:	bf00      	nop
 80018fe:	37b8      	adds	r7, #184	; 0xb8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	58000400 	.word	0x58000400

08001908 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_IPCC_Init+0x20>)
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <MX_IPCC_Init+0x24>)
 8001910:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <MX_IPCC_Init+0x20>)
 8001914:	f002 fc68 	bl	80041e8 <HAL_IPCC_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800191e:	f000 f9b0 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000474 	.word	0x20000474
 800192c:	58000c00 	.word	0x58000c00

08001930 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001954:	2300      	movs	r3, #0
 8001956:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <MX_RTC_Init+0x120>)
 800195a:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <MX_RTC_Init+0x124>)
 800195c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800195e:	4b40      	ldr	r3, [pc, #256]	; (8001a60 <MX_RTC_Init+0x120>)
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001964:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <MX_RTC_Init+0x120>)
 8001966:	22ff      	movs	r2, #255	; 0xff
 8001968:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <MX_RTC_Init+0x120>)
 800196c:	227f      	movs	r2, #127	; 0x7f
 800196e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001970:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <MX_RTC_Init+0x120>)
 8001972:	2200      	movs	r2, #0
 8001974:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001976:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <MX_RTC_Init+0x120>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800197c:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <MX_RTC_Init+0x120>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001982:	4b37      	ldr	r3, [pc, #220]	; (8001a60 <MX_RTC_Init+0x120>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001988:	4835      	ldr	r0, [pc, #212]	; (8001a60 <MX_RTC_Init+0x120>)
 800198a:	f004 fb35 	bl	8005ff8 <HAL_RTC_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001994:	f000 f975 	bl	8001c82 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  /* Set Date and Time (if not already done before)*/
  	/* Read the Back Up Register 0 Data */
  	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2)
 8001998:	2100      	movs	r1, #0
 800199a:	4831      	ldr	r0, [pc, #196]	; (8001a60 <MX_RTC_Init+0x120>)
 800199c:	f004 ff96 	bl	80068cc <HAL_RTCEx_BKUPRead>
 80019a0:	4603      	mov	r3, r0
 80019a2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d03a      	beq.n	8001a20 <MX_RTC_Init+0xe0>
  	{
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 80019aa:	2311      	movs	r3, #17
 80019ac:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x45;
 80019ae:	2345      	movs	r3, #69	; 0x45
 80019b0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x25;
 80019b2:	2325      	movs	r3, #37	; 0x25
 80019b4:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	2201      	movs	r2, #1
 80019c6:	4619      	mov	r1, r3
 80019c8:	4825      	ldr	r0, [pc, #148]	; (8001a60 <MX_RTC_Init+0x120>)
 80019ca:	f004 fbe9 	bl	80061a0 <HAL_RTC_SetTime>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80019d4:	f000 f955 	bl	8001c82 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80019d8:	2303      	movs	r3, #3
 80019da:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80019dc:	2305      	movs	r3, #5
 80019de:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 80019e0:	2319      	movs	r3, #25
 80019e2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 80019e4:	2321      	movs	r3, #33	; 0x21
 80019e6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019e8:	463b      	mov	r3, r7
 80019ea:	2201      	movs	r2, #1
 80019ec:	4619      	mov	r1, r3
 80019ee:	481c      	ldr	r0, [pc, #112]	; (8001a60 <MX_RTC_Init+0x120>)
 80019f0:	f004 fcf6 	bl	80063e0 <HAL_RTC_SetDate>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 80019fa:	f000 f942 	bl	8001c82 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	4817      	ldr	r0, [pc, #92]	; (8001a60 <MX_RTC_Init+0x120>)
 8001a04:	f004 fea5 	bl	8006752 <HAL_RTCEx_SetWakeUpTimer>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_RTC_Init+0xd2>
  {
    Error_Handler();
 8001a0e:	f000 f938 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Writes a data in a RTC Backup data Register0 */
  		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001a12:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001a16:	2100      	movs	r1, #0
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <MX_RTC_Init+0x120>)
 8001a1a:	f004 ff3f 	bl	800689c <HAL_RTCEx_BKUPWrite>
 8001a1e:	e00e      	b.n	8001a3e <MX_RTC_Init+0xfe>
  	}
  	else
  	{
  		/* Check if the Power On Reset flag is set */
  		if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET)
 8001a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  			/* Turn on LED2: Power on reset occurred */
  			//BSP_LED_On(LED2);
  		}

  		/* Check if Pin Reset flag is set */
  		if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d002      	beq.n	8001a3e <MX_RTC_Init+0xfe>
  		{

  			BSP_LED_On(LED_RED);
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f001 fce7 	bl	800340c <BSP_LED_On>
  		}
  	}
  	/* Clear source Reset Flag */
  	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001a3e:	f7ff fe29 	bl	8001694 <LL_RCC_ClearResetFlags>
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001a42:	4808      	ldr	r0, [pc, #32]	; (8001a64 <MX_RTC_Init+0x124>)
 8001a44:	f7ff fe87 	bl	8001756 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <MX_RTC_Init+0x124>)
 8001a4c:	f7ff fe93 	bl	8001776 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <MX_RTC_Init+0x124>)
 8001a52:	f7ff fe73 	bl	800173c <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000630 	.word	0x20000630
 8001a64:	40002800 	.word	0x40002800

08001a68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_SPI1_Init+0x74>)
 8001a6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <MX_SPI1_Init+0x78>)
 8001a70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_SPI1_Init+0x74>)
 8001a74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_SPI1_Init+0x74>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_SPI1_Init+0x74>)
 8001a82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a88:	4b14      	ldr	r3, [pc, #80]	; (8001adc <MX_SPI1_Init+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a8e:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_SPI1_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_SPI1_Init+0x74>)
 8001a96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <MX_SPI1_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_SPI1_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <MX_SPI1_Init+0x74>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <MX_SPI1_Init+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <MX_SPI1_Init+0x74>)
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <MX_SPI1_Init+0x74>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_SPI1_Init+0x74>)
 8001ac2:	2208      	movs	r2, #8
 8001ac4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_SPI1_Init+0x74>)
 8001ac8:	f004 ff56 	bl	8006978 <HAL_SPI_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ad2:	f000 f8d6 	bl	8001c82 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	200006d8 	.word	0x200006d8
 8001ae0:	40013000 	.word	0x40013000

08001ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ae8:	2004      	movs	r0, #4
 8001aea:	f7ff fde4 	bl	80016b6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fde1 	bl	80016b6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001af4:	2002      	movs	r0, #2
 8001af6:	f7ff fdde 	bl	80016b6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	210f      	movs	r1, #15
 8001afe:	200e      	movs	r0, #14
 8001b00:	f001 ffc9 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b04:	200e      	movs	r0, #14
 8001b06:	f001 ffe0 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	210f      	movs	r1, #15
 8001b0e:	203a      	movs	r0, #58	; 0x3a
 8001b10:	f001 ffc1 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001b14:	203a      	movs	r0, #58	; 0x3a
 8001b16:	f001 ffd8 	bl	8003aca <HAL_NVIC_EnableIRQ>

}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b34:	2004      	movs	r0, #4
 8001b36:	f7ff fdd7 	bl	80016e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fdd4 	bl	80016e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	2002      	movs	r0, #2
 8001b42:	f7ff fdd1 	bl	80016e8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b46:	2008      	movs	r0, #8
 8001b48:	f7ff fdce 	bl	80016e8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f247 0123 	movw	r1, #28707	; 0x7023
 8001b52:	481e      	ldr	r0, [pc, #120]	; (8001bcc <MX_GPIO_Init+0xac>)
 8001b54:	f002 fada 	bl	800410c <HAL_GPIO_WritePin>
                          |LED2_BR_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_SW1_Pin SW1_BR_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin|SW1_BR_Pin;
 8001b58:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_GPIO_Init+0xb0>)
 8001b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481a      	ldr	r0, [pc, #104]	; (8001bd4 <MX_GPIO_Init+0xb4>)
 8001b6c:	f002 f95e 	bl	8003e2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED3_BR_Pin LED1_BR_Pin
                           LED2_BR_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001b70:	f247 0323 	movw	r3, #28707	; 0x7023
 8001b74:	607b      	str	r3, [r7, #4]
                          |LED2_BR_Pin|LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4811      	ldr	r0, [pc, #68]	; (8001bcc <MX_GPIO_Init+0xac>)
 8001b88:	f002 f950 	bl	8003e2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <MX_GPIO_Init+0xb0>)
 8001b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <MX_GPIO_Init+0xb8>)
 8001b9e:	f002 f945 	bl	8003e2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	2006      	movs	r0, #6
 8001ba8:	f001 ff75 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bac:	2006      	movs	r0, #6
 8001bae:	f001 ff8c 	bl	8003aca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	200a      	movs	r0, #10
 8001bb8:	f001 ff6d 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bbc:	200a      	movs	r0, #10
 8001bbe:	f001 ff84 	bl	8003aca <HAL_NVIC_EnableIRQ>

}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	10110000 	.word	0x10110000
 8001bd4:	48000800 	.word	0x48000800
 8001bd8:	48000c00 	.word	0x48000c00

08001bdc <PeriphClock_Config>:
  * @param  None
  * @retval None
  */

void PeriphClock_Config(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001be0:	bf00      	nop
}
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	f006 fc4b 	bl	800848c <OTP_Read>
 8001bf6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d005      	beq.n	8001c0a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	799b      	ldrb	r3, [r3, #6]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fd12 	bl	800162c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
}  
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <Reset_Device>:


static void Reset_Device( void )
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
	Reset_BackupDomain();

	Reset_IPCC();
#endif

	return;
 8001c16:	bf00      	nop
}
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <Init_Exti>:

	return;
}

static void Init_Exti( void )
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff fcd4 	bl	80015d4 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001c2c:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001c30:	f7ff fce6 	bl	8001600 <LL_EXTI_DisableIT_32_63>

  return;
 8001c34:	bf00      	nop
}
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f001 fd98 	bl	8003774 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c50:	d00a      	beq.n	8001c68 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001c52:	f001 fda7 	bl	80037a4 <HAL_GetTickFreq>
 8001c56:	4603      	mov	r3, r0
 8001c58:	461a      	mov	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c60:	e002      	b.n	8001c68 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001c62:	f7ff fd5b 	bl	800171c <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001c66:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001c68:	f001 fd84 	bl	8003774 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d8f4      	bhi.n	8001c62 <HAL_Delay+0x2a>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_PWR_SetPowerMode>:
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <LL_PWR_SetPowerMode+0x24>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 0207 	bic.w	r2, r3, #7
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <LL_PWR_SetPowerMode+0x24>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	58000400 	.word	0x58000400

08001cb8 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <LL_PWR_ClearFlag_WU+0x14>)
 8001cbe:	221f      	movs	r2, #31
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	58000400 	.word	0x58000400

08001cd0 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001cd4:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce2:	d101      	bne.n	8001ce8 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	58000400 	.word	0x58000400

08001cf8 <LL_RCC_HSE_Enable>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_RCC_HSE_IsReady>:
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001d1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d28:	d101      	bne.n	8001d2e <LL_RCC_HSE_IsReady+0x18>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <LL_RCC_HSE_IsReady+0x1a>
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_RCC_HSI_Enable>:
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4c:	6013      	str	r3, [r2, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_RCC_HSI_IsReady>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6a:	d101      	bne.n	8001d70 <LL_RCC_HSI_IsReady+0x18>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <LL_RCC_HSI_IsReady+0x1a>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_RCC_SetSysClkSource>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f023 0203 	bic.w	r2, r3, #3
 8001d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	608b      	str	r3, [r1, #8]
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_RCC_GetSysClkSource>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_RCC_SetSMPSClockSource>:
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	f023 0203 	bic.w	r2, r3, #3
 8001dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_LPM_EnableSleep>:
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <LL_LPM_EnableSleep+0x1c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <LL_LPM_EnableSleep+0x1c>)
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	6113      	str	r3, [r2, #16]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <LL_LPM_EnableDeepSleep+0x1c>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <LL_LPM_EnableDeepSleep+0x1c>)
 8001e0e:	f043 0304 	orr.w	r3, r3, #4
 8001e12:	6113      	str	r3, [r2, #16]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	3220      	adds	r2, #32
 8001e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e38:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <LL_HSEM_1StepLock+0x2c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d001      	beq.n	8001e42 <LL_HSEM_1StepLock+0x1e>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <LL_HSEM_1StepLock+0x20>
 8001e42:	2300      	movs	r3, #0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	80000400 	.word	0x80000400

08001e54 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0

  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001e7e:	f001 fc9d 	bl	80037bc <HAL_SuspendTick>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU( );
 8001e82:	f7ff ff19 	bl	8001cb8 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 8001e86:	2003      	movs	r0, #3
 8001e88:	f7ff ff02 	bl	8001c90 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001e8c:	f7ff ffba 	bl	8001e04 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI( );
 8001e90:	bf30      	wfi
/* USER CODE END PWR_EnterOffMode */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

  HAL_ResumeTick();
 8001e9a:	f001 fc9f 	bl	80037dc <HAL_ResumeTick>

/* USER CODE END PWR_ExitOffMode */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode ( this will abort the Stop Mode entry ).
   */
  HAL_SuspendTick();
 8001ea8:	f001 fc88 	bl	80037bc <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001eac:	bf00      	nop
 8001eae:	2103      	movs	r1, #3
 8001eb0:	4814      	ldr	r0, [pc, #80]	; (8001f04 <PWR_EnterStopMode+0x60>)
 8001eb2:	f7ff ffb7 	bl	8001e24 <LL_HSEM_1StepLock>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f8      	bne.n	8001eae <PWR_EnterStopMode+0xa>

  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	4811      	ldr	r0, [pc, #68]	; (8001f04 <PWR_EnterStopMode+0x60>)
 8001ec0:	f7ff ffb0 	bl	8001e24 <LL_HSEM_1StepLock>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <PWR_EnterStopMode+0x40>
  {
    if( LL_PWR_IsActiveFlag_C2DS( ) )
 8001eca:	f7ff ff01 	bl	8001cd0 <LL_PWR_IsActiveFlag_C2DS>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <PWR_EnterStopMode+0x44>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2104      	movs	r1, #4
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <PWR_EnterStopMode+0x60>)
 8001eda:	f7ff ffbb 	bl	8001e54 <LL_HSEM_ReleaseLock>

      /**
       * The switch on HSI before entering Stop Mode is required 
       */
      Switch_On_HSI( );
 8001ede:	f000 f852 	bl	8001f86 <Switch_On_HSI>
 8001ee2:	e001      	b.n	8001ee8 <PWR_EnterStopMode+0x44>
  else
  {
    /**
     * The switch on HSI before entering Stop Mode is required 
     */
    Switch_On_HSI( );
 8001ee4:	f000 f84f 	bl	8001f86 <Switch_On_HSI>
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2103      	movs	r1, #3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <PWR_EnterStopMode+0x60>)
 8001eee:	f7ff ffb1 	bl	8001e54 <LL_HSEM_ReleaseLock>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode( LL_PWR_MODE_STOP2 );
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f7ff fecc 	bl	8001c90 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001ef8:	f7ff ff84 	bl	8001e04 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 8001efc:	bf30      	wfi
/* USER CODE END PWR_EnterStopMode */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	58001400 	.word	0x58001400

08001f08 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2104      	movs	r1, #4
 8001f10:	4814      	ldr	r0, [pc, #80]	; (8001f64 <PWR_ExitStopMode+0x5c>)
 8001f12:	f7ff ff9f 	bl	8001e54 <LL_HSEM_ReleaseLock>

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001f16:	bf00      	nop
 8001f18:	2103      	movs	r1, #3
 8001f1a:	4812      	ldr	r0, [pc, #72]	; (8001f64 <PWR_ExitStopMode+0x5c>)
 8001f1c:	f7ff ff82 	bl	8001e24 <LL_HSEM_1StepLock>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f8      	bne.n	8001f18 <PWR_ExitStopMode+0x10>

  if(LL_RCC_GetSysClkSource( ) == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001f26:	f7ff ff3d 	bl	8001da4 <LL_RCC_GetSysClkSource>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d110      	bne.n	8001f52 <PWR_ExitStopMode+0x4a>
  {
    LL_RCC_HSE_Enable( );
 8001f30:	f7ff fee2 	bl	8001cf8 <LL_RCC_HSE_Enable>
    while(!LL_RCC_HSE_IsReady( ));
 8001f34:	bf00      	nop
 8001f36:	f7ff feee 	bl	8001d16 <LL_RCC_HSE_IsReady>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0fa      	beq.n	8001f36 <PWR_ExitStopMode+0x2e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001f40:	2002      	movs	r0, #2
 8001f42:	f7ff ff1b 	bl	8001d7c <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001f46:	bf00      	nop
 8001f48:	f7ff ff2c 	bl	8001da4 <LL_RCC_GetSysClkSource>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d1fa      	bne.n	8001f48 <PWR_ExitStopMode+0x40>
     * there is nothing to do here
     */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001f52:	2200      	movs	r2, #0
 8001f54:	2103      	movs	r1, #3
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <PWR_ExitStopMode+0x5c>)
 8001f58:	f7ff ff7c 	bl	8001e54 <LL_HSEM_ReleaseLock>

  HAL_ResumeTick();
 8001f5c:	f001 fc3e 	bl	80037dc <HAL_ResumeTick>

/* USER CODE END PWR_ExitStopMode */
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	58001400 	.word	0x58001400

08001f68 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

  HAL_SuspendTick();
 8001f6c:	f001 fc26 	bl	80037bc <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001f70:	f7ff ff38 	bl	8001de4 <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI( );
 8001f74:	bf30      	wfi
/* USER CODE END PWR_EnterSleepMode */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

  HAL_ResumeTick();
 8001f7e:	f001 fc2d 	bl	80037dc <HAL_ResumeTick>

/* USER CODE END PWR_ExitSleepMode */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8001f8a:	f7ff fed6 	bl	8001d3a <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 8001f8e:	bf00      	nop
 8001f90:	f7ff fee2 	bl	8001d58 <LL_RCC_HSI_IsReady>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d0fa      	beq.n	8001f90 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff feee 	bl	8001d7c <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff ff0b 	bl	8001dbc <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001fa6:	bf00      	nop
 8001fa8:	f7ff fefc 	bl	8001da4 <LL_RCC_GetSysClkSource>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d1fa      	bne.n	8001fa8 <Switch_On_HSI+0x22>
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LL_RCC_SetRTCClockSource>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_RCC_EnableRTC>:
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001fe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_RCC_DisableRTC>:
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800200a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002016:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800201a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <LL_AHB2_GRP1_EnableClock>:
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4313      	orrs	r3, r2
 800203e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800204c:	68fb      	ldr	r3, [r7, #12]
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_AHB3_GRP1_EnableClock>:
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4313      	orrs	r3, r2
 8002070:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002076:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4013      	ands	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	bf00      	nop
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_APB1_GRP1_EnableClock>:
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800209a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_APB1_GRP1_DisableClock>:
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80020c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020d4:	4013      	ands	r3, r2
 80020d6:	658b      	str	r3, [r1, #88]	; 0x58
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_APB2_GRP1_EnableClock>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002100:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4013      	ands	r3, r2
 8002106:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002108:	68fb      	ldr	r3, [r7, #12]
}
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 800211c:	463b      	mov	r3, r7
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002124:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002128:	f7ff ff97 	bl	800205a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 800212c:	2200      	movs	r2, #0
 800212e:	2100      	movs	r1, #0
 8002130:	202b      	movs	r0, #43	; 0x2b
 8002132:	f001 fcb0 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 8002136:	202b      	movs	r0, #43	; 0x2b
 8002138:	f001 fcc7 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	202e      	movs	r0, #46	; 0x2e
 8002142:	f001 fca8 	bl	8003a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002146:	202e      	movs	r0, #46	; 0x2e
 8002148:	f001 fcbf 	bl	8003aca <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800214c:	2300      	movs	r3, #0
 800214e:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002154:	463b      	mov	r3, r7
 8002156:	4618      	mov	r0, r3
 8002158:	f002 f968 	bl	800442c <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800215c:	f002 f9a8 	bl	80044b0 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <HAL_IPCC_MspInit+0x44>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d113      	bne.n	80021a2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800217a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800217e:	f7ff ff6c 	bl	800205a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2100      	movs	r1, #0
 8002186:	202c      	movs	r0, #44	; 0x2c
 8002188:	f001 fc85 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800218c:	202c      	movs	r0, #44	; 0x2c
 800218e:	f001 fc9c 	bl	8003aca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	202d      	movs	r0, #45	; 0x2d
 8002198:	f001 fc7d 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800219c:	202d      	movs	r0, #45	; 0x2d
 800219e:	f001 fc94 	bl	8003aca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80021a2:	bf00      	nop
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	58000c00 	.word	0x58000c00

080021b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_RTC_MspInit+0x3c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d110      	bne.n	80021e4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80021c2:	f002 f923 	bl	800440c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 80021c6:	f002 f921 	bl	800440c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80021ca:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021ce:	f7ff fef3 	bl	8001fb8 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021d2:	f7ff ff07 	bl	8001fe4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80021d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80021da:	f7ff ff57 	bl	800208c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f004 fb8a 	bl	80068f8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40002800 	.word	0x40002800

080021f0 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a06      	ldr	r2, [pc, #24]	; (8002218 <HAL_RTC_MspDeInit+0x28>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d105      	bne.n	800220e <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8002202:	f7ff ff00 	bl	8002006 <LL_RCC_DisableRTC>
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 8002206:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800220a:	f7ff ff58 	bl	80020be <LL_APB1_GRP1_DisableClock>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40002800 	.word	0x40002800

0800221c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_SPI_MspInit+0x5c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d117      	bne.n	800226e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800223e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002242:	f7ff ff4f 	bl	80020e4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002246:	2001      	movs	r0, #1
 8002248:	f7ff feee 	bl	8002028 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800224c:	23f0      	movs	r3, #240	; 0xf0
 800224e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800225c:	2305      	movs	r3, #5
 800225e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800226a:	f001 fddf 	bl	8003e2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40013000 	.word	0x40013000

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800228e:	e7fe      	b.n	800228e <HardFault_Handler+0x4>

08002290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <MemManage_Handler+0x4>

08002296 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229a:	e7fe      	b.n	800229a <BusFault_Handler+0x4>

0800229c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <UsageFault_Handler+0x4>

080022a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d0:	f001 fa3c 	bl	800374c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d4:	bf00      	nop
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80022dc:	2001      	movs	r0, #1
 80022de:	f001 ff47 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80022ea:	2010      	movs	r0, #16
 80022ec:	f001 ff40 	bl	8004170 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80022f8:	4802      	ldr	r0, [pc, #8]	; (8002304 <DMA1_Channel4_IRQHandler+0x10>)
 80022fa:	f001 fce8 	bl	8003cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000678 	.word	0x20000678

08002308 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800230c:	4802      	ldr	r0, [pc, #8]	; (8002318 <USART1_IRQHandler+0x10>)
 800230e:	f004 fbd7 	bl	8006ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	200005a0 	.word	0x200005a0

0800231c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002320:	4802      	ldr	r0, [pc, #8]	; (800232c <LPUART1_IRQHandler+0x10>)
 8002322:	f004 fbcd 	bl	8006ac0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	200004b0 	.word	0x200004b0

08002330 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002342:	f000 fe85 	bl	8003050 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}

0800234a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800234e:	f000 feb7 	bl	80030c0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}

08002356 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800235a:	f001 ff21 	bl	80041a0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <DMA2_Channel4_IRQHandler+0x10>)
 800236a:	f001 fcb0 	bl	8003cce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000540 	.word	0x20000540

08002378 <RTC_WKUP_IRQHandler>:
//{
//  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
//}

void RTC_WKUP_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800237c:	f7fe fd48 	bl	8000e10 <HW_TS_RTC_Wakeup_Handler>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f007 f9c8 	bl	8009748 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20030000 	.word	0x20030000
 80023e4:	00001000 	.word	0x00001000
 80023e8:	200002cc 	.word	0x200002cc
 80023ec:	20000758 	.word	0x20000758

080023f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <LL_FLASH_GetUDN+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	1fff7580 	.word	0x1fff7580

08002408 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <LL_FLASH_GetDeviceID+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	b2db      	uxtb	r3, r3
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	1fff7584 	.word	0x1fff7584

08002420 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <LL_FLASH_GetSTCompanyID+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0a1b      	lsrs	r3, r3, #8
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	1fff7584 	.word	0x1fff7584

08002438 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8002438:	b5b0      	push	{r4, r5, r7, lr}
 800243a:	b08c      	sub	sp, #48	; 0x30
 800243c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800243e:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <APP_BLE_Init+0xc4>)
 8002440:	463c      	mov	r4, r7
 8002442:	461d      	mov	r5, r3
 8002444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8002454:	f000 f96c 	bl	8002730 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002458:	2101      	movs	r1, #1
 800245a:	2002      	movs	r0, #2
 800245c:	f006 fef2 	bl	8009244 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002460:	4a27      	ldr	r2, [pc, #156]	; (8002500 <APP_BLE_Init+0xc8>)
 8002462:	2100      	movs	r1, #0
 8002464:	2008      	movs	r0, #8
 8002466:	f007 f837 	bl	80094d8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 800246a:	463b      	mov	r3, r7
 800246c:	4618      	mov	r0, r3
 800246e:	f006 f95b 	bl	8008728 <SHCI_C2_BLE_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8002478:	f7ff fc03 	bl	8001c82 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800247c:	f000 f96e 	bl	800275c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002480:	f006 fbe2 	bl	8008c48 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <APP_BLE_Init+0xcc>)
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800248c:	4b1d      	ldr	r3, [pc, #116]	; (8002504 <APP_BLE_Init+0xcc>)
 800248e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002492:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8002494:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <APP_BLE_Init+0xd0>)
 8002496:	2100      	movs	r1, #0
 8002498:	2001      	movs	r0, #1
 800249a:	f007 f81d 	bl	80094d8 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800249e:	4a1b      	ldr	r2, [pc, #108]	; (800250c <APP_BLE_Init+0xd4>)
 80024a0:	2100      	movs	r1, #0
 80024a2:	2004      	movs	r0, #4
 80024a4:	f007 f818 	bl	80094d8 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80024a8:	2006      	movs	r0, #6
 80024aa:	f005 fc78 	bl	8007d9e <aci_hal_set_radio_activity_mask>
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <APP_BLE_Init+0xd8>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 80024b4:	4b17      	ldr	r3, [pc, #92]	; (8002514 <APP_BLE_Init+0xdc>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 80024ba:	f000 fc31 	bl	8002d20 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <APP_BLE_Init+0xe0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	4916      	ldr	r1, [pc, #88]	; (800251c <APP_BLE_Init+0xe4>)
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fe5d 	bl	8001184 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80024ca:	4b15      	ldr	r3, [pc, #84]	; (8002520 <APP_BLE_Init+0xe8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	4915      	ldr	r1, [pc, #84]	; (8002524 <APP_BLE_Init+0xec>)
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fe57 	bl	8001184 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <APP_BLE_Init+0xcc>)
 80024d8:	2200      	movs	r2, #0
 80024da:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <APP_BLE_Init+0xcc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80024e2:	4b11      	ldr	r3, [pc, #68]	; (8002528 <APP_BLE_Init+0xf0>)
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <APP_BLE_Init+0xf4>)
 80024ea:	22a0      	movs	r2, #160	; 0xa0
 80024ec:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80024ee:	2001      	movs	r0, #1
 80024f0:	f000 f9f6 	bl	80028e0 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80024f4:	bf00      	nop
}
 80024f6:	3730      	adds	r7, #48	; 0x30
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bdb0      	pop	{r4, r5, r7, pc}
 80024fc:	0800ae00 	.word	0x0800ae00
 8002500:	08008159 	.word	0x08008159
 8002504:	200001b4 	.word	0x200001b4
 8002508:	08002a49 	.word	0x08002a49
 800250c:	08002b4d 	.word	0x08002b4d
 8002510:	20000741 	.word	0x20000741
 8002514:	20000740 	.word	0x20000740
 8002518:	08002a81 	.word	0x08002a81
 800251c:	20000235 	.word	0x20000235
 8002520:	08002a91 	.word	0x08002a91
 8002524:	20000236 	.word	0x20000236
 8002528:	20000238 	.word	0x20000238
 800252c:	2000023a 	.word	0x2000023a

08002530 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	; 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002538:	2342      	movs	r3, #66	; 0x42
 800253a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3301      	adds	r3, #1
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8002544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2bff      	cmp	r3, #255	; 0xff
 800254a:	f000 8081 	beq.w	8002650 <SVCCTL_App_Notification+0x120>
 800254e:	2bff      	cmp	r3, #255	; 0xff
 8002550:	f300 80d4 	bgt.w	80026fc <SVCCTL_App_Notification+0x1cc>
 8002554:	2b05      	cmp	r3, #5
 8002556:	d002      	beq.n	800255e <SVCCTL_App_Notification+0x2e>
 8002558:	2b3e      	cmp	r3, #62	; 0x3e
 800255a:	d020      	beq.n	800259e <SVCCTL_App_Notification+0x6e>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800255c:	e0ce      	b.n	80026fc <SVCCTL_App_Notification+0x1cc>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	3302      	adds	r3, #2
 8002562:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800256a:	b29a      	uxth	r2, r3
 800256c:	4b67      	ldr	r3, [pc, #412]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 800256e:	8adb      	ldrh	r3, [r3, #22]
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002574:	4b65      	ldr	r3, [pc, #404]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 8002576:	2200      	movs	r2, #0
 8002578:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800257a:	4b64      	ldr	r3, [pc, #400]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8002582:	2001      	movs	r0, #1
 8002584:	f000 f9ac 	bl	80028e0 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002588:	4b61      	ldr	r3, [pc, #388]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 800258a:	2201      	movs	r2, #1
 800258c:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800258e:	4b5f      	ldr	r3, [pc, #380]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 8002590:	8ada      	ldrh	r2, [r3, #22]
 8002592:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 8002594:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8002596:	485e      	ldr	r0, [pc, #376]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 8002598:	f000 fbae 	bl	8002cf8 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800259c:	e0b1      	b.n	8002702 <SVCCTL_App_Notification+0x1d2>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	3302      	adds	r3, #2
 80025a2:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d005      	beq.n	80025b8 <SVCCTL_App_Notification+0x88>
 80025ac:	2b0c      	cmp	r3, #12
 80025ae:	dc4b      	bgt.n	8002648 <SVCCTL_App_Notification+0x118>
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d017      	beq.n	80025e4 <SVCCTL_App_Notification+0xb4>
 80025b4:	2b03      	cmp	r3, #3
          break;
 80025b6:	e047      	b.n	8002648 <SVCCTL_App_Notification+0x118>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3301      	adds	r3, #1
 80025bc:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80025be:	4b53      	ldr	r3, [pc, #332]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 80025c0:	8adb      	ldrh	r3, [r3, #22]
 80025c2:	f107 020e 	add.w	r2, r7, #14
 80025c6:	f107 010f 	add.w	r1, r7, #15
 80025ca:	4618      	mov	r0, r3
 80025cc:	f005 fc55 	bl	8007e7a <hci_le_read_phy>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 80025d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d136      	bne.n	800264c <SVCCTL_App_Notification+0x11c>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 80025de:	7bfb      	ldrb	r3, [r7, #15]
 80025e0:	2b02      	cmp	r3, #2
          break;
 80025e2:	e033      	b.n	800264c <SVCCTL_App_Notification+0x11c>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3301      	adds	r3, #1
 80025e8:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80025ea:	4b48      	ldr	r3, [pc, #288]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 80025ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fe41 	bl	8001278 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80025f6:	4b45      	ldr	r3, [pc, #276]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 80025f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d104      	bne.n	800260a <SVCCTL_App_Notification+0xda>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002600:	4b42      	ldr	r3, [pc, #264]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 8002602:	2206      	movs	r2, #6
 8002604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8002608:	e003      	b.n	8002612 <SVCCTL_App_Notification+0xe2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800260a:	4b40      	ldr	r3, [pc, #256]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 800260c:	2205      	movs	r2, #5
 800260e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b3c      	ldr	r3, [pc, #240]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 800261c:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800261e:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 8002626:	8ada      	ldrh	r2, [r3, #22]
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 800262a:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800262c:	4838      	ldr	r0, [pc, #224]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 800262e:	f000 fb63 	bl	8002cf8 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002632:	4b37      	ldr	r3, [pc, #220]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002638:	4b34      	ldr	r3, [pc, #208]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 800263a:	8ada      	ldrh	r2, [r3, #22]
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 800263e:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8002640:	4833      	ldr	r0, [pc, #204]	; (8002710 <SVCCTL_App_Notification+0x1e0>)
 8002642:	f000 fb59 	bl	8002cf8 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002646:	e002      	b.n	800264e <SVCCTL_App_Notification+0x11e>
          break;
 8002648:	bf00      	nop
 800264a:	e05a      	b.n	8002702 <SVCCTL_App_Notification+0x1d2>
          break;
 800264c:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 800264e:	e058      	b.n	8002702 <SVCCTL_App_Notification+0x1d2>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	3302      	adds	r3, #2
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	b29b      	uxth	r3, r3
 800265c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002660:	d03b      	beq.n	80026da <SVCCTL_App_Notification+0x1aa>
 8002662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002666:	dc4b      	bgt.n	8002700 <SVCCTL_App_Notification+0x1d0>
 8002668:	2b04      	cmp	r3, #4
 800266a:	d03a      	beq.n	80026e2 <SVCCTL_App_Notification+0x1b2>
 800266c:	2b04      	cmp	r3, #4
 800266e:	db47      	blt.n	8002700 <SVCCTL_App_Notification+0x1d0>
 8002670:	f240 420a 	movw	r2, #1034	; 0x40a
 8002674:	4293      	cmp	r3, r2
 8002676:	dc43      	bgt.n	8002700 <SVCCTL_App_Notification+0x1d0>
 8002678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267c:	db40      	blt.n	8002700 <SVCCTL_App_Notification+0x1d0>
 800267e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002682:	2b0a      	cmp	r3, #10
 8002684:	d83c      	bhi.n	8002700 <SVCCTL_App_Notification+0x1d0>
 8002686:	a201      	add	r2, pc, #4	; (adr r2, 800268c <SVCCTL_App_Notification+0x15c>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	080026f9 	.word	0x080026f9
 8002690:	080026d3 	.word	0x080026d3
 8002694:	080026f9 	.word	0x080026f9
 8002698:	080026f9 	.word	0x080026f9
 800269c:	080026f9 	.word	0x080026f9
 80026a0:	080026b9 	.word	0x080026b9
 80026a4:	08002701 	.word	0x08002701
 80026a8:	080026f9 	.word	0x080026f9
 80026ac:	080026f9 	.word	0x080026f9
 80026b0:	080026c5 	.word	0x080026c5
 80026b4:	080026f9 	.word	0x080026f9
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 80026ba:	8adb      	ldrh	r3, [r3, #22]
 80026bc:	4618      	mov	r0, r3
 80026be:	f004 ffc8 	bl	8007652 <aci_gap_allow_rebond>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 80026c2:	e01a      	b.n	80026fa <SVCCTL_App_Notification+0x1ca>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 80026c6:	8adb      	ldrh	r3, [r3, #22]
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f005 f80b 	bl	80076e6 <aci_gap_numeric_comparison_value_confirm_yesno>
      break;
 80026d0:	e013      	b.n	80026fa <SVCCTL_App_Notification+0x1ca>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	3302      	adds	r3, #2
 80026d6:	623b      	str	r3, [r7, #32]
           break;    
 80026d8:	e00f      	b.n	80026fa <SVCCTL_App_Notification+0x1ca>
          mutex = 1;
 80026da:	4b0e      	ldr	r3, [pc, #56]	; (8002714 <SVCCTL_App_Notification+0x1e4>)
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]
      break;
 80026e0:	e00b      	b.n	80026fa <SVCCTL_App_Notification+0x1ca>
          BSP_LED_On(LED_GREEN);
 80026e2:	2001      	movs	r0, #1
 80026e4:	f000 fe92 	bl	800340c <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <SVCCTL_App_Notification+0x1dc>)
 80026ea:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80026ee:	210a      	movs	r1, #10
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fe4d 	bl	8001390 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80026f6:	e000      	b.n	80026fa <SVCCTL_App_Notification+0x1ca>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 80026f8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80026fa:	e001      	b.n	8002700 <SVCCTL_App_Notification+0x1d0>
      break;
 80026fc:	bf00      	nop
 80026fe:	e000      	b.n	8002702 <SVCCTL_App_Notification+0x1d2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002700:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3730      	adds	r7, #48	; 0x30
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	200001b4 	.word	0x200001b4
 8002710:	2000073c 	.word	0x2000073c
 8002714:	20000740 	.word	0x20000740

08002718 <APP_BLE_Key_Button2_Action>:
{
  P2PS_APP_SW1_Button_Action();
}

void APP_BLE_Key_Button2_Action(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 800271c:	2100      	movs	r1, #0
 800271e:	2010      	movs	r0, #16
 8002720:	f006 fefc 	bl	800951c <UTIL_SEQ_SetTask>
	Adv_Request(APP_BLE_FAST_ADV);
 8002724:	2001      	movs	r0, #1
 8002726:	f000 f8db 	bl	80028e0 <Adv_Request>
	return;
 800272a:	bf00      	nop
}
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <Ble_Tl_Init+0x20>)
 8002738:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <Ble_Tl_Init+0x24>)
 800273c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800273e:	463b      	mov	r3, r7
 8002740:	4619      	mov	r1, r3
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <Ble_Tl_Init+0x28>)
 8002744:	f005 fcec 	bl	8008120 <hci_init>

  return;
 8002748:	bf00      	nop
}
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20030028 	.word	0x20030028
 8002754:	08002bf5 	.word	0x08002bf5
 8002758:	08002bbd 	.word	0x08002bbd

0800275c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800275c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275e:	b08f      	sub	sp, #60	; 0x3c
 8002760:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8002762:	2300      	movs	r3, #0
 8002764:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8002766:	f005 fb64 	bl	8007e32 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800276a:	f000 f929 	bl	80029c0 <BleGetBdAddress>
 800276e:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002770:	69fa      	ldr	r2, [r7, #28]
 8002772:	2106      	movs	r1, #6
 8002774:	2000      	movs	r0, #0
 8002776:	f005 fa52 	bl	8007c1e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	795a      	ldrb	r2, [r3, #5]
 800277e:	4b52      	ldr	r3, [pc, #328]	; (80028c8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002780:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	791a      	ldrb	r2, [r3, #4]
 8002786:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002788:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	78da      	ldrb	r2, [r3, #3]
 800278e:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002790:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	789a      	ldrb	r2, [r3, #2]
 8002796:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002798:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	785a      	ldrb	r2, [r3, #1]
 800279e:	4b4a      	ldr	r3, [pc, #296]	; (80028c8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80027a0:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	4b48      	ldr	r3, [pc, #288]	; (80028c8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80027a8:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80027aa:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80027ae:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80027b0:	f7ff fe1e 	bl	80023f0 <LL_FLASH_GetUDN>
 80027b4:	4603      	mov	r3, r0
 80027b6:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	461a      	mov	r2, r3
 80027bc:	2106      	movs	r1, #6
 80027be:	202e      	movs	r0, #46	; 0x2e
 80027c0:	f005 fa2d 	bl	8007c1e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80027c4:	4a41      	ldr	r2, [pc, #260]	; (80028cc <Ble_Hci_Gap_Gatt_Init+0x170>)
 80027c6:	2110      	movs	r1, #16
 80027c8:	2018      	movs	r0, #24
 80027ca:	f005 fa28 	bl	8007c1e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80027ce:	4a40      	ldr	r2, [pc, #256]	; (80028d0 <Ble_Hci_Gap_Gatt_Init+0x174>)
 80027d0:	2110      	movs	r1, #16
 80027d2:	2008      	movs	r0, #8
 80027d4:	f005 fa23 	bl	8007c1e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80027d8:	2118      	movs	r1, #24
 80027da:	2001      	movs	r0, #1
 80027dc:	f005 fa88 	bl	8007cf0 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80027e0:	f004 ffd8 	bl	8007794 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80027e8:	7efb      	ldrb	r3, [r7, #27]
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80027f0:	7efb      	ldrb	r3, [r7, #27]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01e      	beq.n	8002834 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "BREATHE";
 80027f6:	4b37      	ldr	r3, [pc, #220]	; (80028d4 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80027f8:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 80027fa:	f107 0212 	add.w	r2, r7, #18
 80027fe:	7ef8      	ldrb	r0, [r7, #27]
 8002800:	f107 030e 	add.w	r3, r7, #14
 8002804:	9301      	str	r3, [sp, #4]
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	2207      	movs	r2, #7
 8002810:	2100      	movs	r1, #0
 8002812:	f004 fe13 	bl	800743c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002816:	8a7c      	ldrh	r4, [r7, #18]
 8002818:	8a3d      	ldrh	r5, [r7, #16]
 800281a:	6978      	ldr	r0, [r7, #20]
 800281c:	f7fd fcb0 	bl	8000180 <strlen>
 8002820:	4603      	mov	r3, r0
 8002822:	b2da      	uxtb	r2, r3
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	2200      	movs	r2, #0
 800282c:	4629      	mov	r1, r5
 800282e:	4620      	mov	r0, r4
 8002830:	f005 f96e 	bl	8007b10 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002834:	8a78      	ldrh	r0, [r7, #18]
 8002836:	89f9      	ldrh	r1, [r7, #14]
 8002838:	463b      	mov	r3, r7
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2302      	movs	r3, #2
 800283e:	2200      	movs	r2, #0
 8002840:	f005 f966 	bl	8007b10 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002844:	2202      	movs	r2, #2
 8002846:	2102      	movs	r1, #2
 8002848:	2000      	movs	r0, #0
 800284a:	f005 fb7e 	bl	8007f4a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002854:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f004 fcfd 	bl	8007258 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002860:	2201      	movs	r2, #1
 8002862:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002864:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002866:	2208      	movs	r2, #8
 8002868:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800286a:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800286c:	2210      	movs	r2, #16
 800286e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002870:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002872:	2200      	movs	r2, #0
 8002874:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002876:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002878:	4a18      	ldr	r2, [pc, #96]	; (80028dc <Ble_Hci_Gap_Gatt_Init+0x180>)
 800287a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800287e:	2201      	movs	r2, #1
 8002880:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002884:	789c      	ldrb	r4, [r3, #2]
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002888:	785d      	ldrb	r5, [r3, #1]
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800288c:	791b      	ldrb	r3, [r3, #4]
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002890:	7952      	ldrb	r2, [r2, #5]
 8002892:	4911      	ldr	r1, [pc, #68]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002894:	78c9      	ldrb	r1, [r1, #3]
 8002896:	4810      	ldr	r0, [pc, #64]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002898:	6880      	ldr	r0, [r0, #8]
 800289a:	2600      	movs	r6, #0
 800289c:	9604      	str	r6, [sp, #16]
 800289e:	9003      	str	r0, [sp, #12]
 80028a0:	9102      	str	r1, [sp, #8]
 80028a2:	9201      	str	r2, [sp, #4]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2300      	movs	r3, #0
 80028a8:	2201      	movs	r2, #1
 80028aa:	4629      	mov	r1, r5
 80028ac:	4620      	mov	r0, r4
 80028ae:	f004 fd1d 	bl	80072ec <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80028b4:	789b      	ldrb	r3, [r3, #2]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 80028ba:	f004 fea6 	bl	800760a <aci_gap_configure_whitelist>
   }
}
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000014 	.word	0x20000014
 80028cc:	0800afa0 	.word	0x0800afa0
 80028d0:	0800afb0 	.word	0x0800afb0
 80028d4:	0800ae30 	.word	0x0800ae30
 80028d8:	200001b4 	.word	0x200001b4
 80028dc:	0001b207 	.word	0x0001b207

080028e0 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08c      	sub	sp, #48	; 0x30
 80028e4:	af08      	add	r7, sp, #32
 80028e6:	4603      	mov	r3, r0
 80028e8:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80028ea:	2342      	movs	r3, #66	; 0x42
 80028ec:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <Adv_Request+0xc4>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80028fa:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <Adv_Request+0xc8>)
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	81bb      	strh	r3, [r7, #12]
 8002900:	e005      	b.n	800290e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002902:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002906:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002908:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800290c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <Adv_Request+0xcc>)
 8002910:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002914:	4618      	mov	r0, r3
 8002916:	f7fe fcaf 	bl	8001278 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d10d      	bne.n	800293c <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <Adv_Request+0xcc>)
 8002922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002926:	2b01      	cmp	r3, #1
 8002928:	d004      	beq.n	8002934 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <Adv_Request+0xcc>)
 800292c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002930:	2b02      	cmp	r3, #2
 8002932:	d103      	bne.n	800293c <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8002934:	f004 fb8e 	bl	8007054 <aci_gap_set_non_discoverable>
 8002938:	4603      	mov	r3, r0
 800293a:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 800293c:	4a1b      	ldr	r2, [pc, #108]	; (80029ac <Adv_Request+0xcc>)
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <Adv_Request+0xcc>)
 8002946:	7e1b      	ldrb	r3, [r3, #24]
 8002948:	89ba      	ldrh	r2, [r7, #12]
 800294a:	89f9      	ldrh	r1, [r7, #14]
 800294c:	2000      	movs	r0, #0
 800294e:	9006      	str	r0, [sp, #24]
 8002950:	2000      	movs	r0, #0
 8002952:	9005      	str	r0, [sp, #20]
 8002954:	4816      	ldr	r0, [pc, #88]	; (80029b0 <Adv_Request+0xd0>)
 8002956:	9004      	str	r0, [sp, #16]
 8002958:	9303      	str	r3, [sp, #12]
 800295a:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <Adv_Request+0xd4>)
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	2308      	movs	r3, #8
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2300      	movs	r3, #0
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	2000      	movs	r0, #0
 800296a:	f004 fb97 	bl	800709c <aci_gap_set_discoverable>
 800296e:	4603      	mov	r3, r0
 8002970:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8002972:	4911      	ldr	r1, [pc, #68]	; (80029b8 <Adv_Request+0xd8>)
 8002974:	200e      	movs	r0, #14
 8002976:	f004 fdec 	bl	8007552 <aci_gap_update_adv_data>
 800297a:	4603      	mov	r3, r0
 800297c:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <Adv_Request+0xcc>)
 800298c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002990:	490a      	ldr	r1, [pc, #40]	; (80029bc <Adv_Request+0xdc>)
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fcfc 	bl	8001390 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8002998:	bf00      	nop
 800299a:	bf00      	nop
}
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000238 	.word	0x20000238
 80029a8:	2000023a 	.word	0x2000023a
 80029ac:	200001b4 	.word	0x200001b4
 80029b0:	200001cd 	.word	0x200001cd
 80029b4:	0800afc0 	.word	0x0800afc0
 80029b8:	20000014 	.word	0x20000014
 80029bc:	0001e046 	.word	0x0001e046

080029c0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80029c6:	f7ff fd13 	bl	80023f0 <LL_FLASH_GetUDN>
 80029ca:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d023      	beq.n	8002a1c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80029d4:	f7ff fd24 	bl	8002420 <LL_FLASH_GetSTCompanyID>
 80029d8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80029da:	f7ff fd15 	bl	8002408 <LL_FLASH_GetDeviceID>
 80029de:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	4b16      	ldr	r3, [pc, #88]	; (8002a40 <BleGetBdAddress+0x80>)
 80029e6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <BleGetBdAddress+0x80>)
 80029f0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <BleGetBdAddress+0x80>)
 80029f8:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <BleGetBdAddress+0x80>)
 8002a00:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <BleGetBdAddress+0x80>)
 8002a0a:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4b0b      	ldr	r3, [pc, #44]	; (8002a40 <BleGetBdAddress+0x80>)
 8002a14:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002a16:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <BleGetBdAddress+0x80>)
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e00b      	b.n	8002a34 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f005 fd35 	bl	800848c <OTP_Read>
 8002a22:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e001      	b.n	8002a34 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002a30:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <BleGetBdAddress+0x84>)
 8002a32:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002a34:	697b      	ldr	r3, [r7, #20]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200002d0 	.word	0x200002d0
 8002a44:	0800af98 	.word	0x0800af98

08002a48 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8002a4e:	2001      	movs	r0, #1
 8002a50:	f000 fcf6 	bl	8003440 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002a54:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <Adv_Cancel+0x34>)
 8002a56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d00a      	beq.n	8002a74 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8002a62:	f004 faf7 	bl	8007054 <aci_gap_set_non_discoverable>
 8002a66:	4603      	mov	r3, r0
 8002a68:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002a6a:	4b04      	ldr	r3, [pc, #16]	; (8002a7c <Adv_Cancel+0x34>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8002a72:	bf00      	nop
 8002a74:	bf00      	nop
}
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	200001b4 	.word	0x200001b4

08002a80 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8002a84:	2100      	movs	r1, #0
 8002a86:	2001      	movs	r0, #1
 8002a88:	f006 fd48 	bl	800951c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8002a8c:	bf00      	nop
}
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8002a94:	2001      	movs	r0, #1
 8002a96:	f000 fcd3 	bl	8003440 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 8002aa0:	b590      	push	{r4, r7, lr}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) {
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d13f      	bne.n	8002b32 <BLE_SVC_L2CAP_Conn_Update+0x92>
    mutex = 0;
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8002ab8:	4b21      	ldr	r3, [pc, #132]	; (8002b40 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	3301      	adds	r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	bfb8      	it	lt
 8002ac6:	425b      	neglt	r3, r3
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	4b1d      	ldr	r3, [pc, #116]	; (8002b40 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002acc:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 8002ace:	4b1c      	ldr	r3, [pc, #112]	; (8002b40 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	4a1c      	ldr	r2, [pc, #112]	; (8002b44 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	ed93 7a00 	vldr	s14, [r3]
 8002adc:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ae8:	ee17 3a90 	vmov	r3, s15
 8002aec:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 8002aee:	4b14      	ldr	r3, [pc, #80]	; (8002b40 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	ed93 7a00 	vldr	s14, [r3]
 8002afc:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002b00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b08:	ee17 3a90 	vmov	r3, s15
 8002b0c:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8002b12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b16:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <BLE_SVC_L2CAP_Conn_Update+0xa8>)
 8002b1a:	8ad8      	ldrh	r0, [r3, #22]
 8002b1c:	8a7c      	ldrh	r4, [r7, #18]
 8002b1e:	8aba      	ldrh	r2, [r7, #20]
 8002b20:	8af9      	ldrh	r1, [r7, #22]
 8002b22:	8a3b      	ldrh	r3, [r7, #16]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4623      	mov	r3, r4
 8002b28:	f005 fa76 	bl	8008018 <aci_l2cap_connection_parameter_update_req>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
}
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd90      	pop	{r4, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000740 	.word	0x20000740
 8002b40:	20000741 	.word	0x20000741
 8002b44:	2000000c 	.word	0x2000000c
 8002b48:	200001b4 	.word	0x200001b4

08002b4c <Connection_Interval_Update_Req>:
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
static void Connection_Interval_Update_Req( void )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8002b50:	4b08      	ldr	r3, [pc, #32]	; (8002b74 <Connection_Interval_Update_Req+0x28>)
 8002b52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d00a      	beq.n	8002b70 <Connection_Interval_Update_Req+0x24>
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <Connection_Interval_Update_Req+0x28>)
 8002b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <Connection_Interval_Update_Req+0x28>)
 8002b66:	8adb      	ldrh	r3, [r3, #22]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff99 	bl	8002aa0 <BLE_SVC_L2CAP_Conn_Update>
  }
  return;
 8002b6e:	bf00      	nop
 8002b70:	bf00      	nop
}
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	200001b4 	.word	0x200001b4

08002b78 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002b80:	2100      	movs	r1, #0
 8002b82:	2008      	movs	r0, #8
 8002b84:	f006 fcca 	bl	800951c <UTIL_SEQ_SetTask>
  return;
 8002b88:	bf00      	nop
}
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f006 fd2b 	bl	80095f4 <UTIL_SEQ_SetEvt>
  return;
 8002b9e:	bf00      	nop
}
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f006 fd40 	bl	8009634 <UTIL_SEQ_WaitEvt>
  return;
 8002bb4:	bf00      	nop
}
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	3308      	adds	r3, #8
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f006 f88a 	bl	8008ce8 <SVCCTL_UserEvtRx>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002bd8:	7afb      	ldrb	r3, [r7, #11]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002be4:	e002      	b.n	8002bec <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
}
 8002bec:	bf00      	nop
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d002      	beq.n	8002c0a <BLE_StatusNot+0x16>
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d006      	beq.n	8002c16 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002c08:	e00b      	b.n	8002c22 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002c0a:	231f      	movs	r3, #31
 8002c0c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f006 fcb0 	bl	8009574 <UTIL_SEQ_PauseTask>
      break;
 8002c14:	e005      	b.n	8002c22 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002c16:	231f      	movs	r3, #31
 8002c18:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f006 fcca 	bl	80095b4 <UTIL_SEQ_ResumeTask>
      break;
 8002c20:	bf00      	nop
  }
  return;
 8002c22:	bf00      	nop
}
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <P2PS_STM_App_Notification>:
static void P2PS_TimeChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d019      	beq.n	8002c70 <P2PS_STM_App_Notification+0x44>
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	dc52      	bgt.n	8002ce6 <P2PS_STM_App_Notification+0xba>
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <P2PS_STM_App_Notification+0x1e>
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d00a      	beq.n	8002c5e <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8002c48:	e04d      	b.n	8002ce6 <P2PS_STM_App_Notification+0xba>
      P2P_Server_App_Context.Notification_Status = 1;
 8002c4a:	4b2a      	ldr	r3, [pc, #168]	; (8002cf4 <P2PS_STM_App_Notification+0xc8>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
      HW_TS_Start(P2P_Server_App_Context.Update_timer_Id, TIME_CHANGE_PERIOD);
 8002c50:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <P2PS_STM_App_Notification+0xc8>)
 8002c52:	7b1b      	ldrb	r3, [r3, #12]
 8002c54:	21cc      	movs	r1, #204	; 0xcc
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fb9a 	bl	8001390 <HW_TS_Start>
      break;
 8002c5c:	e046      	b.n	8002cec <P2PS_STM_App_Notification+0xc0>
      P2P_Server_App_Context.Notification_Status = 0;
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <P2PS_STM_App_Notification+0xc8>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(P2P_Server_App_Context.Update_timer_Id);
 8002c64:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <P2PS_STM_App_Notification+0xc8>)
 8002c66:	7b1b      	ldrb	r3, [r3, #12]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fb05 	bl	8001278 <HW_TS_Stop>
      break;
 8002c6e:	e03d      	b.n	8002cec <P2PS_STM_App_Notification+0xc0>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d117      	bne.n	8002caa <P2PS_STM_App_Notification+0x7e>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d105      	bne.n	8002c92 <P2PS_STM_App_Notification+0x66>
          BSP_LED_On(LED_BLUE);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f000 fbc0 	bl	800340c <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <P2PS_STM_App_Notification+0xc8>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	3301      	adds	r3, #1
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <P2PS_STM_App_Notification+0x7e>
          BSP_LED_Off(LED_BLUE);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f000 fbce 	bl	8003440 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002ca4:	4b13      	ldr	r3, [pc, #76]	; (8002cf4 <P2PS_STM_App_Notification+0xc8>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d11a      	bne.n	8002cea <P2PS_STM_App_Notification+0xbe>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <P2PS_STM_App_Notification+0xa0>
          BSP_LED_On(LED_BLUE);
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	f000 fba3 	bl	800340c <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <P2PS_STM_App_Notification+0xc8>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d108      	bne.n	8002cea <P2PS_STM_App_Notification+0xbe>
          BSP_LED_Off(LED_BLUE);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f000 fbb1 	bl	8003440 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <P2PS_STM_App_Notification+0xc8>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	709a      	strb	r2, [r3, #2]
      break;
 8002ce4:	e001      	b.n	8002cea <P2PS_STM_App_Notification+0xbe>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e000      	b.n	8002cec <P2PS_STM_App_Notification+0xc0>
      break;
 8002cea:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8002cec:	bf00      	nop
}
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	2000023c 	.word	0x2000023c

08002cf8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <P2PS_APP_Notification+0x1c>
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d000      	beq.n	8002d0e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8002d0c:	e003      	b.n	8002d16 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8002d0e:	f000 f825 	bl	8002d5c <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8002d12:	e000      	b.n	8002d16 <P2PS_APP_Notification+0x1e>
    break;
 8002d14:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8002d16:	bf00      	nop
}
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
	...

08002d20 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  UTIL_SEQ_RegTask( 1<< CFG_MY_TASK_NOTIFY_TIME, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8002d24:	4a09      	ldr	r2, [pc, #36]	; (8002d4c <P2PS_APP_Init+0x2c>)
 8002d26:	2100      	movs	r1, #0
 8002d28:	2010      	movs	r0, #16
 8002d2a:	f006 fbd5 	bl	80094d8 <UTIL_SEQ_RegTask>

  /* Create timer to change the time and update charecteristic */
      HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <P2PS_APP_Init+0x30>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <P2PS_APP_Init+0x34>)
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fe fa25 	bl	8001184 <HW_TS_Create>
  			P2PS_TimeChange_Timer_Callback);

    /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <P2PS_APP_Init+0x38>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8002d40:	f000 f80c 	bl	8002d5c <P2PS_APP_LED_BUTTON_context_Init>
  P2PS_APP_context_Init();
 8002d44:	f000 f820 	bl	8002d88 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8002d48:	bf00      	nop
}
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	08002db9 	.word	0x08002db9
 8002d50:	08002da9 	.word	0x08002da9
 8002d54:	20000248 	.word	0x20000248
 8002d58:	2000023c 	.word	0x2000023c

08002d5c <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8002d60:	2000      	movs	r0, #0
 8002d62:	f000 fb6d 	bl	8003440 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	721a      	strb	r2, [r3, #8]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8002d78:	4b02      	ldr	r3, [pc, #8]	; (8002d84 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	725a      	strb	r2, [r3, #9]
#endif
}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	2000023c 	.word	0x2000023c

08002d88 <P2PS_APP_context_Init>:
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/

static void P2PS_APP_context_Init(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.TimeControl.TimeStamp = 0xF2;
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <P2PS_APP_context_Init+0x1c>)
 8002d8e:	22f2      	movs	r2, #242	; 0xf2
 8002d90:	809a      	strh	r2, [r3, #4]
	P2P_Server_App_Context.TimeControl.Value = 0x1A;
 8002d92:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <P2PS_APP_context_Init+0x1c>)
 8002d94:	221a      	movs	r2, #26
 8002d96:	80da      	strh	r2, [r3, #6]
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	2000023c 	.word	0x2000023c

08002da8 <P2PS_TimeChange_Timer_Callback>:

static void P2PS_TimeChange_Timer_Callback(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 8002dac:	2100      	movs	r1, #0
 8002dae:	2010      	movs	r0, #16
 8002db0:	f006 fbb4 	bl	800951c <UTIL_SEQ_SetTask>
}
 8002db4:	bf00      	nop
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <P2PS_Send_Notification>:

void P2PS_Send_Notification(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 
	uint8_t value[4];

		value[0] = (uint8_t)(timestamp >> 24);
 8002dbe:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <P2PS_Send_Notification+0x7c>)
 8002dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	0e02      	lsrs	r2, r0, #24
 8002dce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dd2:	160b      	asrs	r3, r1, #24
 8002dd4:	b2d3      	uxtb	r3, r2
 8002dd6:	713b      	strb	r3, [r7, #4]
		value[1] = (uint8_t)(timestamp >> 16);
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <P2PS_Send_Notification+0x7c>)
 8002dda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	0c02      	lsrs	r2, r0, #16
 8002de8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002dec:	140b      	asrs	r3, r1, #16
 8002dee:	b2d3      	uxtb	r3, r2
 8002df0:	717b      	strb	r3, [r7, #5]
		value[2] = (uint8_t)(timestamp >> 8);
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <P2PS_Send_Notification+0x7c>)
 8002df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	f04f 0300 	mov.w	r3, #0
 8002e00:	0a02      	lsrs	r2, r0, #8
 8002e02:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e06:	120b      	asrs	r3, r1, #8
 8002e08:	b2d3      	uxtb	r3, r2
 8002e0a:	71bb      	strb	r3, [r7, #6]
		value[3] = (uint8_t)(timestamp);
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <P2PS_Send_Notification+0x7c>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	b2d3      	uxtb	r3, r2
 8002e14:	71fb      	strb	r3, [r7, #7]


	   if(P2P_Server_App_Context.Notification_Status){
 8002e16:	4b08      	ldr	r3, [pc, #32]	; (8002e38 <P2PS_Send_Notification+0x80>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <P2PS_Send_Notification+0x74>
	    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
	    APP_DBG_MSG(" \n\r");
	    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&value);
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8002e26:	f005 fc5d 	bl	80086e4 <P2PS_STM_App_Update_Char>

	   } else {
	    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
	   }

	  return;
 8002e2a:	bf00      	nop
 8002e2c:	bf00      	nop
}
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000420 	.word	0x20000420
 8002e38:	2000023c 	.word	0x2000023c

08002e3c <LL_PWR_EnableBootC2>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <LL_PWR_EnableBootC2+0x1c>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <LL_PWR_EnableBootC2+0x1c>)
 8002e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4a:	60d3      	str	r3, [r2, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	58000400 	.word	0x58000400

08002e5c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002e64:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002e66:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002e6a:	4905      	ldr	r1, [pc, #20]	; (8002e80 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	58000800 	.word	0x58000800

08002e84 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e8e:	6a1a      	ldr	r2, [r3, #32]
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	620b      	str	r3, [r1, #32]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	58000800 	.word	0x58000800

08002ea8 <LL_AHB3_GRP1_EnableClock>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4013      	ands	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f04:	68fb      	ldr	r3, [r7, #12]
}
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f043 0201 	orr.w	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
 8002f5a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	605a      	str	r2, [r3, #4]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	041b      	lsls	r3, r3, #16
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	605a      	str	r2, [r3, #4]
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	401a      	ands	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	605a      	str	r2, [r3, #4]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	609a      	str	r2, [r3, #8]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4013      	ands	r3, r2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d101      	bne.n	8003016 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	4013      	ands	r3, r2
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d101      	bne.n	8003040 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
	...

08003050 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003054:	2102      	movs	r1, #2
 8003056:	4819      	ldr	r0, [pc, #100]	; (80030bc <HW_IPCC_Rx_Handler+0x6c>)
 8003058:	f7ff ffe4 	bl	8003024 <LL_C2_IPCC_IsActiveFlag_CHx>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HW_IPCC_Rx_Handler+0x26>
 8003062:	4b16      	ldr	r3, [pc, #88]	; (80030bc <HW_IPCC_Rx_Handler+0x6c>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	43db      	mvns	r3, r3
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003070:	f000 f8ea 	bl	8003248 <HW_IPCC_SYS_EvtHandler>
 8003074:	e01f      	b.n	80030b6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003076:	2101      	movs	r1, #1
 8003078:	4810      	ldr	r0, [pc, #64]	; (80030bc <HW_IPCC_Rx_Handler+0x6c>)
 800307a:	f7ff ffd3 	bl	8003024 <LL_C2_IPCC_IsActiveFlag_CHx>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HW_IPCC_Rx_Handler+0x46>
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <HW_IPCC_Rx_Handler+0x6c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003090:	f000 f89e 	bl	80031d0 <HW_IPCC_BLE_EvtHandler>
 8003094:	e00f      	b.n	80030b6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003096:	2108      	movs	r1, #8
 8003098:	4808      	ldr	r0, [pc, #32]	; (80030bc <HW_IPCC_Rx_Handler+0x6c>)
 800309a:	f7ff ffc3 	bl	8003024 <LL_C2_IPCC_IsActiveFlag_CHx>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <HW_IPCC_Rx_Handler+0x68>
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HW_IPCC_Rx_Handler+0x6c>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	43db      	mvns	r3, r3
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80030b2:	f000 f915 	bl	80032e0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
}
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	58000c00 	.word	0x58000c00

080030c0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80030c4:	2102      	movs	r1, #2
 80030c6:	4822      	ldr	r0, [pc, #136]	; (8003150 <HW_IPCC_Tx_Handler+0x90>)
 80030c8:	f7ff ff97 	bl	8002ffa <LL_C1_IPCC_IsActiveFlag_CHx>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <HW_IPCC_Tx_Handler+0x26>
 80030d2:	4b1f      	ldr	r3, [pc, #124]	; (8003150 <HW_IPCC_Tx_Handler+0x90>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80030e0:	f000 f8a6 	bl	8003230 <HW_IPCC_SYS_CmdEvtHandler>
 80030e4:	e031      	b.n	800314a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80030e6:	2102      	movs	r1, #2
 80030e8:	4819      	ldr	r0, [pc, #100]	; (8003150 <HW_IPCC_Tx_Handler+0x90>)
 80030ea:	f7ff ff86 	bl	8002ffa <LL_C1_IPCC_IsActiveFlag_CHx>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d109      	bne.n	8003108 <HW_IPCC_Tx_Handler+0x48>
 80030f4:	4b16      	ldr	r3, [pc, #88]	; (8003150 <HW_IPCC_Tx_Handler+0x90>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	43db      	mvns	r3, r3
 80030fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d002      	beq.n	8003108 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003102:	f000 f895 	bl	8003230 <HW_IPCC_SYS_CmdEvtHandler>
 8003106:	e020      	b.n	800314a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8003108:	2108      	movs	r1, #8
 800310a:	4811      	ldr	r0, [pc, #68]	; (8003150 <HW_IPCC_Tx_Handler+0x90>)
 800310c:	f7ff ff75 	bl	8002ffa <LL_C1_IPCC_IsActiveFlag_CHx>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HW_IPCC_Tx_Handler+0x6a>
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HW_IPCC_Tx_Handler+0x90>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	43db      	mvns	r3, r3
 800311c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003124:	f000 f8be 	bl	80032a4 <HW_IPCC_MM_FreeBufHandler>
 8003128:	e00f      	b.n	800314a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800312a:	2120      	movs	r1, #32
 800312c:	4808      	ldr	r0, [pc, #32]	; (8003150 <HW_IPCC_Tx_Handler+0x90>)
 800312e:	f7ff ff64 	bl	8002ffa <LL_C1_IPCC_IsActiveFlag_CHx>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d109      	bne.n	800314c <HW_IPCC_Tx_Handler+0x8c>
 8003138:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HW_IPCC_Tx_Handler+0x90>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	43db      	mvns	r3, r3
 800313e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d002      	beq.n	800314c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003146:	f000 f84f 	bl	80031e8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800314a:	bf00      	nop
 800314c:	bf00      	nop
}
 800314e:	bd80      	pop	{r7, pc}
 8003150:	58000c00 	.word	0x58000c00

08003154 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003158:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800315c:	f7ff febd 	bl	8002eda <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003160:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003164:	f7ff fe7a 	bl	8002e5c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003168:	f44f 7000 	mov.w	r0, #512	; 0x200
 800316c:	f7ff fe8a 	bl	8002e84 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003170:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003172:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003174:	f7ff fe62 	bl	8002e3c <LL_PWR_EnableBootC2>

  return;
 8003178:	bf00      	nop
}
 800317a:	bd80      	pop	{r7, pc}

0800317c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003180:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003184:	f7ff fe90 	bl	8002ea8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003188:	4806      	ldr	r0, [pc, #24]	; (80031a4 <HW_IPCC_Init+0x28>)
 800318a:	f7ff fed2 	bl	8002f32 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <HW_IPCC_Init+0x28>)
 8003190:	f7ff febf 	bl	8002f12 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003194:	202c      	movs	r0, #44	; 0x2c
 8003196:	f000 fc98 	bl	8003aca <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800319a:	202d      	movs	r0, #45	; 0x2d
 800319c:	f000 fc95 	bl	8003aca <HAL_NVIC_EnableIRQ>

  return;
 80031a0:	bf00      	nop
}
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	58000c00 	.word	0x58000c00

080031a8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80031ac:	2101      	movs	r1, #1
 80031ae:	4802      	ldr	r0, [pc, #8]	; (80031b8 <HW_IPCC_BLE_Init+0x10>)
 80031b0:	f7ff fef4 	bl	8002f9c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80031b4:	bf00      	nop
}
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	58000c00 	.word	0x58000c00

080031bc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80031c0:	2101      	movs	r1, #1
 80031c2:	4802      	ldr	r0, [pc, #8]	; (80031cc <HW_IPCC_BLE_SendCmd+0x10>)
 80031c4:	f7ff ff0a 	bl	8002fdc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80031c8:	bf00      	nop
}
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	58000c00 	.word	0x58000c00

080031d0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80031d4:	f005 fe6c 	bl	8008eb0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80031d8:	2101      	movs	r1, #1
 80031da:	4802      	ldr	r0, [pc, #8]	; (80031e4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80031dc:	f7ff fef0 	bl	8002fc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80031e0:	bf00      	nop
}
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	58000c00 	.word	0x58000c00

080031e8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80031ec:	2120      	movs	r1, #32
 80031ee:	4803      	ldr	r0, [pc, #12]	; (80031fc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80031f0:	f7ff fec2 	bl	8002f78 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80031f4:	f005 fe8c 	bl	8008f10 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80031f8:	bf00      	nop
}
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	58000c00 	.word	0x58000c00

08003200 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003204:	2102      	movs	r1, #2
 8003206:	4802      	ldr	r0, [pc, #8]	; (8003210 <HW_IPCC_SYS_Init+0x10>)
 8003208:	f7ff fec8 	bl	8002f9c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800320c:	bf00      	nop
}
 800320e:	bd80      	pop	{r7, pc}
 8003210:	58000c00 	.word	0x58000c00

08003214 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003218:	2102      	movs	r1, #2
 800321a:	4804      	ldr	r0, [pc, #16]	; (800322c <HW_IPCC_SYS_SendCmd+0x18>)
 800321c:	f7ff fede 	bl	8002fdc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003220:	2102      	movs	r1, #2
 8003222:	4802      	ldr	r0, [pc, #8]	; (800322c <HW_IPCC_SYS_SendCmd+0x18>)
 8003224:	f7ff fe95 	bl	8002f52 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003228:	bf00      	nop
}
 800322a:	bd80      	pop	{r7, pc}
 800322c:	58000c00 	.word	0x58000c00

08003230 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003234:	2102      	movs	r1, #2
 8003236:	4803      	ldr	r0, [pc, #12]	; (8003244 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003238:	f7ff fe9e 	bl	8002f78 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800323c:	f005 feb8 	bl	8008fb0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003240:	bf00      	nop
}
 8003242:	bd80      	pop	{r7, pc}
 8003244:	58000c00 	.word	0x58000c00

08003248 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800324c:	f005 fec6 	bl	8008fdc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003250:	2102      	movs	r1, #2
 8003252:	4802      	ldr	r0, [pc, #8]	; (800325c <HW_IPCC_SYS_EvtHandler+0x14>)
 8003254:	f7ff feb4 	bl	8002fc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003258:	bf00      	nop
}
 800325a:	bd80      	pop	{r7, pc}
 800325c:	58000c00 	.word	0x58000c00

08003260 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003268:	2108      	movs	r1, #8
 800326a:	480c      	ldr	r0, [pc, #48]	; (800329c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800326c:	f7ff fec5 	bl	8002ffa <LL_C1_IPCC_IsActiveFlag_CHx>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d007      	beq.n	8003286 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800327c:	2108      	movs	r1, #8
 800327e:	4807      	ldr	r0, [pc, #28]	; (800329c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003280:	f7ff fe67 	bl	8002f52 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003284:	e006      	b.n	8003294 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800328a:	2108      	movs	r1, #8
 800328c:	4803      	ldr	r0, [pc, #12]	; (800329c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800328e:	f7ff fea5 	bl	8002fdc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003292:	bf00      	nop
}
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	58000c00 	.word	0x58000c00
 80032a0:	200002d8 	.word	0x200002d8

080032a4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80032a8:	2108      	movs	r1, #8
 80032aa:	4806      	ldr	r0, [pc, #24]	; (80032c4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80032ac:	f7ff fe64 	bl	8002f78 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80032b6:	2108      	movs	r1, #8
 80032b8:	4802      	ldr	r0, [pc, #8]	; (80032c4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80032ba:	f7ff fe8f 	bl	8002fdc <LL_C1_IPCC_SetFlag_CHx>

  return;
 80032be:	bf00      	nop
}
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	58000c00 	.word	0x58000c00
 80032c8:	200002d8 	.word	0x200002d8

080032cc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80032d0:	2108      	movs	r1, #8
 80032d2:	4802      	ldr	r0, [pc, #8]	; (80032dc <HW_IPCC_TRACES_Init+0x10>)
 80032d4:	f7ff fe62 	bl	8002f9c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80032d8:	bf00      	nop
}
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	58000c00 	.word	0x58000c00

080032e0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80032e4:	f005 ff22 	bl	800912c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80032e8:	2108      	movs	r1, #8
 80032ea:	4802      	ldr	r0, [pc, #8]	; (80032f4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80032ec:	f7ff fe68 	bl	8002fc0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80032f0:	bf00      	nop
}
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	58000c00 	.word	0x58000c00

080032f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80032f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032fc:	3304      	adds	r3, #4

080032fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003300:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003302:	d3f9      	bcc.n	80032f8 <CopyDataInit>
  bx lr
 8003304:	4770      	bx	lr

08003306 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003306:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003308:	3004      	adds	r0, #4

0800330a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800330a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800330c:	d3fb      	bcc.n	8003306 <FillZerobss>
  bx lr
 800330e:	4770      	bx	lr

08003310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003310:	480c      	ldr	r0, [pc, #48]	; (8003344 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003312:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003314:	480c      	ldr	r0, [pc, #48]	; (8003348 <LoopForever+0x8>)
 8003316:	490d      	ldr	r1, [pc, #52]	; (800334c <LoopForever+0xc>)
 8003318:	4a0d      	ldr	r2, [pc, #52]	; (8003350 <LoopForever+0x10>)
 800331a:	2300      	movs	r3, #0
 800331c:	f7ff ffef 	bl	80032fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003320:	480c      	ldr	r0, [pc, #48]	; (8003354 <LoopForever+0x14>)
 8003322:	490d      	ldr	r1, [pc, #52]	; (8003358 <LoopForever+0x18>)
 8003324:	2300      	movs	r3, #0
 8003326:	f7ff fff0 	bl	800330a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800332a:	480c      	ldr	r0, [pc, #48]	; (800335c <LoopForever+0x1c>)
 800332c:	490c      	ldr	r1, [pc, #48]	; (8003360 <LoopForever+0x20>)
 800332e:	2300      	movs	r3, #0
 8003330:	f7ff ffeb 	bl	800330a <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003334:	f000 f92a 	bl	800358c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003338:	f006 fa0c 	bl	8009754 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800333c:	f7fe fa2e 	bl	800179c <main>

08003340 <LoopForever>:

LoopForever:
  b LoopForever
 8003340:	e7fe      	b.n	8003340 <LoopForever>
 8003342:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003344:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003348:	20000008 	.word	0x20000008
 800334c:	20000118 	.word	0x20000118
 8003350:	0800b2f0 	.word	0x0800b2f0
  INIT_BSS _sbss, _ebss
 8003354:	200002a0 	.word	0x200002a0
 8003358:	20000758 	.word	0x20000758
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800335c:	200301e0 	.word	0x200301e0
 8003360:	20030a57 	.word	0x20030a57

08003364 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003364:	e7fe      	b.n	8003364 <ADC1_IRQHandler>

08003366 <LL_AHB2_GRP1_EnableClock>:
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800336e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003374:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4313      	orrs	r3, r2
 800337c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800337e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003382:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4013      	ands	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800338a:	68fb      	ldr	r3, [r7, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80033b2:	2002      	movs	r0, #2
 80033b4:	f7ff ffd7 	bl	8003366 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <BSP_LED_Init+0x6c>)
 80033bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033c2:	2301      	movs	r3, #1
 80033c4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ca:	2302      	movs	r3, #2
 80033cc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <BSP_LED_Init+0x70>)
 80033d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d6:	f107 020c 	add.w	r2, r7, #12
 80033da:	4611      	mov	r1, r2
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fd25 	bl	8003e2c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	4a08      	ldr	r2, [pc, #32]	; (8003408 <BSP_LED_Init+0x70>)
 80033e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	4a05      	ldr	r2, [pc, #20]	; (8003404 <BSP_LED_Init+0x6c>)
 80033ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033f2:	2200      	movs	r2, #0
 80033f4:	4619      	mov	r1, r3
 80033f6:	f000 fe89 	bl	800410c <HAL_GPIO_WritePin>
}
 80033fa:	bf00      	nop
 80033fc:	3720      	adds	r7, #32
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	0800afc8 	.word	0x0800afc8
 8003408:	20000024 	.word	0x20000024

0800340c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	4a07      	ldr	r2, [pc, #28]	; (8003438 <BSP_LED_On+0x2c>)
 800341a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	4a06      	ldr	r2, [pc, #24]	; (800343c <BSP_LED_On+0x30>)
 8003422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003426:	2201      	movs	r2, #1
 8003428:	4619      	mov	r1, r3
 800342a:	f000 fe6f 	bl	800410c <HAL_GPIO_WritePin>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000024 	.word	0x20000024
 800343c:	0800afc8 	.word	0x0800afc8

08003440 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800344a:	79fb      	ldrb	r3, [r7, #7]
 800344c:	4a07      	ldr	r2, [pc, #28]	; (800346c <BSP_LED_Off+0x2c>)
 800344e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	4a06      	ldr	r2, [pc, #24]	; (8003470 <BSP_LED_Off+0x30>)
 8003456:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800345a:	2200      	movs	r2, #0
 800345c:	4619      	mov	r1, r3
 800345e:	f000 fe55 	bl	800410c <HAL_GPIO_WritePin>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	20000024 	.word	0x20000024
 8003470:	0800afc8 	.word	0x0800afc8

08003474 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	4a07      	ldr	r2, [pc, #28]	; (80034a0 <BSP_LED_Toggle+0x2c>)
 8003482:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003486:	79fb      	ldrb	r3, [r7, #7]
 8003488:	4906      	ldr	r1, [pc, #24]	; (80034a4 <BSP_LED_Toggle+0x30>)
 800348a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800348e:	4619      	mov	r1, r3
 8003490:	4610      	mov	r0, r2
 8003492:	f000 fe53 	bl	800413c <HAL_GPIO_TogglePin>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000024 	.word	0x20000024
 80034a4:	0800afc8 	.word	0x0800afc8

080034a8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	460a      	mov	r2, r1
 80034b2:	71fb      	strb	r3, [r7, #7]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	609a      	str	r2, [r3, #8]
 80034c4:	60da      	str	r2, [r3, #12]
 80034c6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <BSP_PB_Init+0x2e>
 80034ce:	2004      	movs	r0, #4
 80034d0:	f7ff ff49 	bl	8003366 <LL_AHB2_GRP1_EnableClock>
 80034d4:	e00c      	b.n	80034f0 <BSP_PB_Init+0x48>
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d103      	bne.n	80034e4 <BSP_PB_Init+0x3c>
 80034dc:	2008      	movs	r0, #8
 80034de:	f7ff ff42 	bl	8003366 <LL_AHB2_GRP1_EnableClock>
 80034e2:	e005      	b.n	80034f0 <BSP_PB_Init+0x48>
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d102      	bne.n	80034f0 <BSP_PB_Init+0x48>
 80034ea:	2008      	movs	r0, #8
 80034ec:	f7ff ff3b 	bl	8003366 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80034f0:	79bb      	ldrb	r3, [r7, #6]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d117      	bne.n	8003526 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	4a20      	ldr	r2, [pc, #128]	; (800357c <BSP_PB_Init+0xd4>)
 80034fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034fe:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003504:	2301      	movs	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <BSP_PB_Init+0xd8>)
 8003510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003514:	f107 020c 	add.w	r2, r7, #12
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fc86 	bl	8003e2c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003520:	2001      	movs	r0, #1
 8003522:	f7fe fb89 	bl	8001c38 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003526:	79bb      	ldrb	r3, [r7, #6]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d122      	bne.n	8003572 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	4a13      	ldr	r2, [pc, #76]	; (800357c <BSP_PB_Init+0xd4>)
 8003530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003534:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003536:	2301      	movs	r3, #1
 8003538:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 800353a:	4b12      	ldr	r3, [pc, #72]	; (8003584 <BSP_PB_Init+0xdc>)
 800353c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800353e:	79fb      	ldrb	r3, [r7, #7]
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <BSP_PB_Init+0xd8>)
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	f107 020c 	add.w	r2, r7, #12
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f000 fc6d 	bl	8003e2c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	4a0c      	ldr	r2, [pc, #48]	; (8003588 <BSP_PB_Init+0xe0>)
 8003556:	5cd3      	ldrb	r3, [r2, r3]
 8003558:	b25b      	sxtb	r3, r3
 800355a:	2200      	movs	r2, #0
 800355c:	210f      	movs	r1, #15
 800355e:	4618      	mov	r0, r3
 8003560:	f000 fa99 	bl	8003a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <BSP_PB_Init+0xe0>)
 8003568:	5cd3      	ldrb	r3, [r2, r3]
 800356a:	b25b      	sxtb	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	f000 faac 	bl	8003aca <HAL_NVIC_EnableIRQ>
  }
}
 8003572:	bf00      	nop
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	0800afd0 	.word	0x0800afd0
 8003580:	20000030 	.word	0x20000030
 8003584:	10210000 	.word	0x10210000
 8003588:	0800afd8 	.word	0x0800afd8

0800358c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003590:	4b26      	ldr	r3, [pc, #152]	; (800362c <SystemInit+0xa0>)
 8003592:	2200      	movs	r2, #0
 8003594:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003596:	4b25      	ldr	r3, [pc, #148]	; (800362c <SystemInit+0xa0>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	4a23      	ldr	r2, [pc, #140]	; (800362c <SystemInit+0xa0>)
 800359e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80035b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ba:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80035be:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80035c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ca:	4b19      	ldr	r3, [pc, #100]	; (8003630 <SystemInit+0xa4>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035dc:	f023 0305 	bic.w	r3, r3, #5
 80035e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80035f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <SystemInit+0xa8>)
 80035fe:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003604:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <SystemInit+0xa8>)
 8003606:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361c:	2200      	movs	r2, #0
 800361e:	619a      	str	r2, [r3, #24]
}
 8003620:	bf00      	nop
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	e000ed00 	.word	0xe000ed00
 8003630:	faf6fefb 	.word	0xfaf6fefb
 8003634:	22041000 	.word	0x22041000

08003638 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a04      	ldr	r2, [pc, #16]	; (8003654 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	6053      	str	r3, [r2, #4]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	e0042000 	.word	0xe0042000

08003658 <LL_DBGMCU_DisableDBGStopMode>:
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a04      	ldr	r2, [pc, #16]	; (8003674 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 8003662:	f023 0302 	bic.w	r3, r3, #2
 8003666:	6053      	str	r3, [r2, #4]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e0042000 	.word	0xe0042000

08003678 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a04      	ldr	r2, [pc, #16]	; (8003694 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8003682:	f023 0304 	bic.w	r3, r3, #4
 8003686:	6053      	str	r3, [r2, #4]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	e0042000 	.word	0xe0042000

08003698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <HAL_Init+0x3c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a0b      	ldr	r2, [pc, #44]	; (80036d4 <HAL_Init+0x3c>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ae:	2003      	movs	r0, #3
 80036b0:	f000 f9e6 	bl	8003a80 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036b4:	2000      	movs	r0, #0
 80036b6:	f000 f80f 	bl	80036d8 <HAL_InitTick>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	71fb      	strb	r3, [r7, #7]
 80036c4:	e001      	b.n	80036ca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036c6:	f7fe fd26 	bl	8002116 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036ca:	79fb      	ldrb	r3, [r7, #7]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	58004000 	.word	0x58004000

080036d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80036e4:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_InitTick+0x6c>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d024      	beq.n	8003736 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036ec:	f001 ff94 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b14      	ldr	r3, [pc, #80]	; (8003744 <HAL_InitTick+0x6c>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	4619      	mov	r1, r3
 80036f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003700:	fbb2 f3f3 	udiv	r3, r2, r3
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f9fc 	bl	8003b02 <HAL_SYSTICK_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10f      	bne.n	8003730 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b0f      	cmp	r3, #15
 8003714:	d809      	bhi.n	800372a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003716:	2200      	movs	r2, #0
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	f04f 30ff 	mov.w	r0, #4294967295
 800371e:	f000 f9ba 	bl	8003a96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003722:	4a09      	ldr	r2, [pc, #36]	; (8003748 <HAL_InitTick+0x70>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	e007      	b.n	800373a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	e004      	b.n	800373a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	e001      	b.n	800373a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000044 	.word	0x20000044
 8003748:	20000040 	.word	0x20000040

0800374c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003750:	4b06      	ldr	r3, [pc, #24]	; (800376c <HAL_IncTick+0x20>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	4b06      	ldr	r3, [pc, #24]	; (8003770 <HAL_IncTick+0x24>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4413      	add	r3, r2
 800375c:	4a04      	ldr	r2, [pc, #16]	; (8003770 <HAL_IncTick+0x24>)
 800375e:	6013      	str	r3, [r2, #0]
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	20000044 	.word	0x20000044
 8003770:	20000744 	.word	0x20000744

08003774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return uwTick;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_GetTick+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000744 	.word	0x20000744

0800378c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_GetTickPrio+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000040 	.word	0x20000040

080037a4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <HAL_GetTickFreq+0x14>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	20000044 	.word	0x20000044

080037bc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_SuspendTick+0x1c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <HAL_SuspendTick+0x1c>)
 80037c6:	f023 0302 	bic.w	r3, r3, #2
 80037ca:	6013      	str	r3, [r2, #0]
}
 80037cc:	bf00      	nop
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e010 	.word	0xe000e010

080037dc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80037e0:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_ResumeTick+0x1c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <HAL_ResumeTick+0x1c>)
 80037e6:	f043 0302 	orr.w	r3, r3, #2
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e010 	.word	0xe000e010

080037fc <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003800:	f7ff ff1a 	bl	8003638 <LL_DBGMCU_DisableDBGSleepMode>
}
 8003804:	bf00      	nop
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 800380c:	f7ff ff24 	bl	8003658 <LL_DBGMCU_DisableDBGStopMode>
}
 8003810:	bf00      	nop
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8003818:	f7ff ff2e 	bl	8003678 <LL_DBGMCU_DisableDBGStandbyMode>
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}

08003820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003830:	4b0c      	ldr	r3, [pc, #48]	; (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800383c:	4013      	ands	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800384c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003852:	4a04      	ldr	r2, [pc, #16]	; (8003864 <__NVIC_SetPriorityGrouping+0x44>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	60d3      	str	r3, [r2, #12]
}
 8003858:	bf00      	nop
 800385a:	3714      	adds	r7, #20
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <__NVIC_GetPriorityGrouping+0x18>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	f003 0307 	and.w	r3, r3, #7
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	db0b      	blt.n	80038ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4907      	ldr	r1, [pc, #28]	; (80038bc <__NVIC_EnableIRQ+0x38>)
 800389e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	2001      	movs	r0, #1
 80038a6:	fa00 f202 	lsl.w	r2, r0, r2
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038ae:	bf00      	nop
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100

080038c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	db12      	blt.n	80038f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d2:	79fb      	ldrb	r3, [r7, #7]
 80038d4:	f003 021f 	and.w	r2, r3, #31
 80038d8:	490a      	ldr	r1, [pc, #40]	; (8003904 <__NVIC_DisableIRQ+0x44>)
 80038da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	2001      	movs	r0, #1
 80038e2:	fa00 f202 	lsl.w	r2, r0, r2
 80038e6:	3320      	adds	r3, #32
 80038e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038ec:	f3bf 8f4f 	dsb	sy
}
 80038f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038f2:	f3bf 8f6f 	isb	sy
}
 80038f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000e100 	.word	0xe000e100

08003908 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	4603      	mov	r3, r0
 8003910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	2b00      	cmp	r3, #0
 8003918:	db0c      	blt.n	8003934 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	f003 021f 	and.w	r2, r3, #31
 8003920:	4907      	ldr	r1, [pc, #28]	; (8003940 <__NVIC_SetPendingIRQ+0x38>)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	2001      	movs	r0, #1
 800392a:	fa00 f202 	lsl.w	r2, r0, r2
 800392e:	3340      	adds	r3, #64	; 0x40
 8003930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	e000e100 	.word	0xe000e100

08003944 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	2b00      	cmp	r3, #0
 8003954:	db0c      	blt.n	8003970 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 021f 	and.w	r2, r3, #31
 800395c:	4907      	ldr	r1, [pc, #28]	; (800397c <__NVIC_ClearPendingIRQ+0x38>)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	2001      	movs	r0, #1
 8003966:	fa00 f202 	lsl.w	r2, r0, r2
 800396a:	3360      	adds	r3, #96	; 0x60
 800396c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000e100 	.word	0xe000e100

08003980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	6039      	str	r1, [r7, #0]
 800398a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	2b00      	cmp	r3, #0
 8003992:	db0a      	blt.n	80039aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	490c      	ldr	r1, [pc, #48]	; (80039cc <__NVIC_SetPriority+0x4c>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	b2d2      	uxtb	r2, r2
 80039a2:	440b      	add	r3, r1
 80039a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039a8:	e00a      	b.n	80039c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4908      	ldr	r1, [pc, #32]	; (80039d0 <__NVIC_SetPriority+0x50>)
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	3b04      	subs	r3, #4
 80039b8:	0112      	lsls	r2, r2, #4
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	440b      	add	r3, r1
 80039be:	761a      	strb	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr
 80039cc:	e000e100 	.word	0xe000e100
 80039d0:	e000ed00 	.word	0xe000ed00

080039d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f1c3 0307 	rsb	r3, r3, #7
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	bf28      	it	cs
 80039f2:	2304      	movcs	r3, #4
 80039f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	3304      	adds	r3, #4
 80039fa:	2b06      	cmp	r3, #6
 80039fc:	d902      	bls.n	8003a04 <NVIC_EncodePriority+0x30>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3b03      	subs	r3, #3
 8003a02:	e000      	b.n	8003a06 <NVIC_EncodePriority+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43da      	mvns	r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	401a      	ands	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	fa01 f303 	lsl.w	r3, r1, r3
 8003a26:	43d9      	mvns	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	4313      	orrs	r3, r2
         );
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3724      	adds	r7, #36	; 0x24
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a4c:	d301      	bcc.n	8003a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e00f      	b.n	8003a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a52:	4a0a      	ldr	r2, [pc, #40]	; (8003a7c <SysTick_Config+0x40>)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a5a:	210f      	movs	r1, #15
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	f7ff ff8e 	bl	8003980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <SysTick_Config+0x40>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a6a:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <SysTick_Config+0x40>)
 8003a6c:	2207      	movs	r2, #7
 8003a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	e000e010 	.word	0xe000e010

08003a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff fec9 	bl	8003820 <__NVIC_SetPriorityGrouping>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b086      	sub	sp, #24
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa4:	f7ff fee0 	bl	8003868 <__NVIC_GetPriorityGrouping>
 8003aa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	6978      	ldr	r0, [r7, #20]
 8003ab0:	f7ff ff90 	bl	80039d4 <NVIC_EncodePriority>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aba:	4611      	mov	r1, r2
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff5f 	bl	8003980 <__NVIC_SetPriority>
}
 8003ac2:	bf00      	nop
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fed3 	bl	8003884 <__NVIC_EnableIRQ>
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fee3 	bl	80038c0 <__NVIC_DisableIRQ>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ff96 	bl	8003a3c <SysTick_Config>
 8003b10:	4603      	mov	r3, r0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	4603      	mov	r3, r0
 8003b22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff feed 	bl	8003908 <__NVIC_SetPendingIRQ>
}
 8003b2e:	bf00      	nop
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fefd 	bl	8003944 <__NVIC_ClearPendingIRQ>
}
 8003b4a:	bf00      	nop
 8003b4c:	3708      	adds	r7, #8
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e04f      	b.n	8003c04 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d008      	beq.n	8003b82 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2204      	movs	r2, #4
 8003b74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e040      	b.n	8003c04 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 020e 	bic.w	r2, r2, #14
 8003b90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ba0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb6:	f003 021c 	and.w	r2, r3, #28
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003be6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bf0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d005      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2204      	movs	r2, #4
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e047      	b.n	8003cc4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 020e 	bic.w	r2, r2, #14
 8003c42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c68:	f003 021c 	and.w	r2, r3, #28
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	2101      	movs	r1, #1
 8003c72:	fa01 f202 	lsl.w	r2, r1, r2
 8003c76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ca2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
    }
  }
  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b084      	sub	sp, #16
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cea:	f003 031c 	and.w	r3, r3, #28
 8003cee:	2204      	movs	r2, #4
 8003cf0:	409a      	lsls	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d026      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x7a>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f003 0304 	and.w	r3, r3, #4
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d021      	beq.n	8003d48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 0204 	bic.w	r2, r2, #4
 8003d20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	f003 021c 	and.w	r2, r3, #28
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	2104      	movs	r1, #4
 8003d30:	fa01 f202 	lsl.w	r2, r1, r2
 8003d34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d071      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d46:	e06c      	b.n	8003e22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4c:	f003 031c 	and.w	r3, r3, #28
 8003d50:	2202      	movs	r2, #2
 8003d52:	409a      	lsls	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d02e      	beq.n	8003dba <HAL_DMA_IRQHandler+0xec>
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d029      	beq.n	8003dba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0320 	and.w	r3, r3, #32
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 020a 	bic.w	r2, r2, #10
 8003d82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	f003 021c 	and.w	r2, r3, #28
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d98:	2102      	movs	r1, #2
 8003d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d038      	beq.n	8003e22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003db8:	e033      	b.n	8003e22 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f003 031c 	and.w	r3, r3, #28
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	409a      	lsls	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02a      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x156>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	f003 0308 	and.w	r3, r3, #8
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d025      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 020e 	bic.w	r2, r2, #14
 8003de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 021c 	and.w	r2, r3, #28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d004      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
}
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e3a:	e14c      	b.n	80040d6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2101      	movs	r1, #1
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	fa01 f303 	lsl.w	r3, r1, r3
 8003e48:	4013      	ands	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 813e 	beq.w	80040d0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d00b      	beq.n	8003e74 <HAL_GPIO_Init+0x48>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d007      	beq.n	8003e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e68:	2b11      	cmp	r3, #17
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b12      	cmp	r3, #18
 8003e72:	d130      	bne.n	8003ed6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	2203      	movs	r2, #3
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003eaa:	2201      	movs	r2, #1
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	091b      	lsrs	r3, r3, #4
 8003ec0:	f003 0201 	and.w	r2, r3, #1
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4013      	ands	r3, r2
 8003eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0xea>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b12      	cmp	r3, #18
 8003f14:	d123      	bne.n	8003f5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	08da      	lsrs	r2, r3, #3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3208      	adds	r2, #8
 8003f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	220f      	movs	r2, #15
 8003f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f32:	43db      	mvns	r3, r3
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4013      	ands	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	08da      	lsrs	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3208      	adds	r2, #8
 8003f58:	6939      	ldr	r1, [r7, #16]
 8003f5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	2203      	movs	r2, #3
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4013      	ands	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f003 0203 	and.w	r2, r3, #3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8098 	beq.w	80040d0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003fa0:	4a54      	ldr	r2, [pc, #336]	; (80040f4 <HAL_GPIO_Init+0x2c8>)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	220f      	movs	r2, #15
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003fca:	d019      	beq.n	8004000 <HAL_GPIO_Init+0x1d4>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a4a      	ldr	r2, [pc, #296]	; (80040f8 <HAL_GPIO_Init+0x2cc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d013      	beq.n	8003ffc <HAL_GPIO_Init+0x1d0>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a49      	ldr	r2, [pc, #292]	; (80040fc <HAL_GPIO_Init+0x2d0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00d      	beq.n	8003ff8 <HAL_GPIO_Init+0x1cc>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a48      	ldr	r2, [pc, #288]	; (8004100 <HAL_GPIO_Init+0x2d4>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <HAL_GPIO_Init+0x1c8>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a47      	ldr	r2, [pc, #284]	; (8004104 <HAL_GPIO_Init+0x2d8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d101      	bne.n	8003ff0 <HAL_GPIO_Init+0x1c4>
 8003fec:	2304      	movs	r3, #4
 8003fee:	e008      	b.n	8004002 <HAL_GPIO_Init+0x1d6>
 8003ff0:	2307      	movs	r3, #7
 8003ff2:	e006      	b.n	8004002 <HAL_GPIO_Init+0x1d6>
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e004      	b.n	8004002 <HAL_GPIO_Init+0x1d6>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e002      	b.n	8004002 <HAL_GPIO_Init+0x1d6>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_GPIO_Init+0x1d6>
 8004000:	2300      	movs	r3, #0
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	f002 0203 	and.w	r2, r2, #3
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	4093      	lsls	r3, r2
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004012:	4938      	ldr	r1, [pc, #224]	; (80040f4 <HAL_GPIO_Init+0x2c8>)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	3302      	adds	r3, #2
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004020:	4b39      	ldr	r3, [pc, #228]	; (8004108 <HAL_GPIO_Init+0x2dc>)
 8004022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	43db      	mvns	r3, r3
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4013      	ands	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004046:	4a30      	ldr	r2, [pc, #192]	; (8004108 <HAL_GPIO_Init+0x2dc>)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_GPIO_Init+0x2dc>)
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004054:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	43db      	mvns	r3, r3
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4013      	ands	r3, r2
 800405e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004074:	4a24      	ldr	r2, [pc, #144]	; (8004108 <HAL_GPIO_Init+0x2dc>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <HAL_GPIO_Init+0x2dc>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	43db      	mvns	r3, r3
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040a0:	4a19      	ldr	r2, [pc, #100]	; (8004108 <HAL_GPIO_Init+0x2dc>)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80040a6:	4b18      	ldr	r3, [pc, #96]	; (8004108 <HAL_GPIO_Init+0x2dc>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4013      	ands	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040ca:	4a0f      	ldr	r2, [pc, #60]	; (8004108 <HAL_GPIO_Init+0x2dc>)
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	3301      	adds	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f47f aeab 	bne.w	8003e3c <HAL_GPIO_Init+0x10>
  }
}
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	40010000 	.word	0x40010000
 80040f8:	48000400 	.word	0x48000400
 80040fc:	48000800 	.word	0x48000800
 8004100:	48000c00 	.word	0x48000c00
 8004104:	48001000 	.word	0x48001000
 8004108:	58000800 	.word	0x58000800

0800410c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
 8004118:	4613      	mov	r3, r2
 800411a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800411c:	787b      	ldrb	r3, [r7, #1]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004122:	887a      	ldrh	r2, [r7, #2]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004128:	e002      	b.n	8004130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800412a:	887a      	ldrh	r2, [r7, #2]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800414e:	887a      	ldrh	r2, [r7, #2]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4013      	ands	r3, r2
 8004154:	041a      	lsls	r2, r3, #16
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	43d9      	mvns	r1, r3
 800415a:	887b      	ldrh	r3, [r7, #2]
 800415c:	400b      	ands	r3, r1
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800417a:	4b08      	ldr	r3, [pc, #32]	; (800419c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800417c:	68da      	ldr	r2, [r3, #12]
 800417e:	88fb      	ldrh	r3, [r7, #6]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004186:	4a05      	ldr	r2, [pc, #20]	; (800419c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc fa9a 	bl	80006c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004194:	bf00      	nop
 8004196:	3708      	adds	r7, #8
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	58000800 	.word	0x58000800

080041a0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_HSEM_IRQHandler+0x30>)
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_HSEM_IRQHandler+0x30>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	4906      	ldr	r1, [pc, #24]	; (80041d0 <HAL_HSEM_IRQHandler+0x30>)
 80041b6:	4013      	ands	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80041ba:	4a05      	ldr	r2, [pc, #20]	; (80041d0 <HAL_HSEM_IRQHandler+0x30>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f807 	bl	80041d4 <HAL_HSEM_FreeCallback>
}
 80041c6:	bf00      	nop
 80041c8:	3708      	adds	r7, #8
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	58001500 	.word	0x58001500

080041d4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01e      	beq.n	8004238 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80041fa:	4b13      	ldr	r3, [pc, #76]	; (8004248 <HAL_IPCC_Init+0x60>)
 80041fc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd ffac 	bl	8002168 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004210:	68b8      	ldr	r0, [r7, #8]
 8004212:	f000 f85b 	bl	80042cc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 f82c 	bl	8004280 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004236:	e001      	b.n	800423c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	58000c00 	.word	0x58000c00

0800424c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	4613      	mov	r3, r2
 8004258:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004266:	b480      	push	{r7}
 8004268:	b085      	sub	sp, #20
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004288:	2300      	movs	r3, #0
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	e00f      	b.n	80042ae <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	4a0b      	ldr	r2, [pc, #44]	; (80042c4 <IPCC_SetDefaultCallbacks+0x44>)
 8004298:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3306      	adds	r3, #6
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <IPCC_SetDefaultCallbacks+0x48>)
 80042a6:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b05      	cmp	r3, #5
 80042b2:	d9ec      	bls.n	800428e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	0800424d 	.word	0x0800424d
 80042c8:	08004267 	.word	0x08004267

080042cc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80042e0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	223f      	movs	r2, #63	; 0x3f
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <LL_EXTI_EnableIT_0_31>:
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80042fc:	4b06      	ldr	r3, [pc, #24]	; (8004318 <LL_EXTI_EnableIT_0_31+0x24>)
 80042fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004302:	4905      	ldr	r1, [pc, #20]	; (8004318 <LL_EXTI_EnableIT_0_31+0x24>)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	58000800 	.word	0x58000800

0800431c <LL_EXTI_DisableIT_0_31>:
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004324:	4b07      	ldr	r3, [pc, #28]	; (8004344 <LL_EXTI_DisableIT_0_31+0x28>)
 8004326:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	43db      	mvns	r3, r3
 800432e:	4905      	ldr	r1, [pc, #20]	; (8004344 <LL_EXTI_DisableIT_0_31+0x28>)
 8004330:	4013      	ands	r3, r2
 8004332:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	58000800 	.word	0x58000800

08004348 <LL_C2_EXTI_DisableIT_0_31>:
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8004350:	4b07      	ldr	r3, [pc, #28]	; (8004370 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8004352:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	43db      	mvns	r3, r3
 800435a:	4905      	ldr	r1, [pc, #20]	; (8004370 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 800435c:	4013      	ands	r3, r2
 800435e:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	58000800 	.word	0x58000800

08004374 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4904      	ldr	r1, [pc, #16]	; (8004394 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	58000800 	.word	0x58000800

08004398 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80043a0:	4b06      	ldr	r3, [pc, #24]	; (80043bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	43db      	mvns	r3, r3
 80043a8:	4904      	ldr	r1, [pc, #16]	; (80043bc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80043aa:	4013      	ands	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]

}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	58000800 	.word	0x58000800

080043c0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	4904      	ldr	r1, [pc, #16]	; (80043e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	604b      	str	r3, [r1, #4]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	58000800 	.word	0x58000800

080043e4 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	4904      	ldr	r1, [pc, #16]	; (8004408 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80043f6:	4013      	ands	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	58000800 	.word	0x58000800

0800440c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004410:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a04      	ldr	r2, [pc, #16]	; (8004428 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441a:	6013      	str	r3, [r2, #0]
}
 800441c:	bf00      	nop
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	58000400 	.word	0x58000400

0800442c <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8004434:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HAL_PWR_ConfigPVD+0x80>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f023 020e 	bic.w	r2, r3, #14
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	491a      	ldr	r1, [pc, #104]	; (80044ac <HAL_PWR_ConfigPVD+0x80>)
 8004442:	4313      	orrs	r3, r2
 8004444:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB serie, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8004446:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800444a:	f7ff ff67 	bl	800431c <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 800444e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004452:	f7ff ff79 	bl	8004348 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004456:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800445a:	f7ff ffc3 	bl	80043e4 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800445e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004462:	f7ff ff99 	bl	8004398 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004472:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004476:	f7ff ff3d 	bl	80042f4 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004486:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800448a:	f7ff ff73 	bl	8004374 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800449a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800449e:	f7ff ff8f 	bl	80043c0 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3708      	adds	r7, #8
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	58000400 	.word	0x58000400

080044b0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80044b4:	4b05      	ldr	r3, [pc, #20]	; (80044cc <HAL_PWR_EnablePVD+0x1c>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a04      	ldr	r2, [pc, #16]	; (80044cc <HAL_PWR_EnablePVD+0x1c>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6053      	str	r3, [r2, #4]
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	58000400 	.word	0x58000400

080044d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80044dc:	4618      	mov	r0, r3
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	58000400 	.word	0x58000400

080044ec <LL_RCC_HSE_IsEnabledDiv2>:
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fe:	d101      	bne.n	8004504 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <LL_RCC_HSE_Enable>:
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	6013      	str	r3, [r2, #0]
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_RCC_HSE_Disable>:
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800453c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004540:	6013      	str	r3, [r2, #0]
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <LL_RCC_HSE_IsReady>:
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800455e:	d101      	bne.n	8004564 <LL_RCC_HSE_IsReady+0x18>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <LL_RCC_HSE_IsReady+0x1a>
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <LL_RCC_HSI_Enable>:
{
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800457e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004582:	6013      	str	r3, [r2, #0]
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_RCC_HSI_Disable>:
{
 800458e:	b480      	push	{r7}
 8004590:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800459c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a0:	6013      	str	r3, [r2, #0]
}
 80045a2:	bf00      	nop
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_RCC_HSI_IsReady>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80045b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045be:	d101      	bne.n	80045c4 <LL_RCC_HSI_IsReady+0x18>
 80045c0:	2301      	movs	r3, #1
 80045c2:	e000      	b.n	80045c6 <LL_RCC_HSI_IsReady+0x1a>
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80045d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	061b      	lsls	r3, r3, #24
 80045e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ea:	4313      	orrs	r3, r2
 80045ec:	604b      	str	r3, [r1, #4]
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_RCC_HSI48_Enable>:
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80045fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004602:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_RCC_HSI48_Disable>:
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004628:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800462c:	f023 0301 	bic.w	r3, r3, #1
 8004630:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004634:	bf00      	nop
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <LL_RCC_HSI48_IsReady>:
{
 800463e:	b480      	push	{r7}
 8004640:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004646:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d101      	bne.n	8004656 <LL_RCC_HSI48_IsReady+0x18>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <LL_RCC_HSI48_IsReady+0x1a>
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_RCC_LSE_Enable>:
{
 8004662:	b480      	push	{r7}
 8004664:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800466e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_RCC_LSE_Disable>:
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800469c:	bf00      	nop
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <LL_RCC_LSE_EnableBypass>:
{
 80046a6:	b480      	push	{r7}
 80046a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046be:	bf00      	nop
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <LL_RCC_LSE_DisableBypass>:
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046d8:	f023 0304 	bic.w	r3, r3, #4
 80046dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80046e0:	bf00      	nop
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <LL_RCC_LSE_IsReady>:
{
 80046ea:	b480      	push	{r7}
 80046ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d101      	bne.n	8004702 <LL_RCC_LSE_IsReady+0x18>
 80046fe:	2301      	movs	r3, #1
 8004700:	e000      	b.n	8004704 <LL_RCC_LSE_IsReady+0x1a>
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <LL_RCC_LSI1_Enable>:
{
 800470e:	b480      	push	{r7}
 8004710:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004726:	bf00      	nop
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <LL_RCC_LSI1_Disable>:
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004740:	f023 0301 	bic.w	r3, r3, #1
 8004744:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_RCC_LSI1_IsReady>:
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800475a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d101      	bne.n	800476a <LL_RCC_LSI1_IsReady+0x18>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <LL_RCC_LSI1_IsReady+0x1a>
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <LL_RCC_LSI2_Enable>:
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800478e:	bf00      	nop
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <LL_RCC_LSI2_Disable>:
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800479c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a8:	f023 0304 	bic.w	r3, r3, #4
 80047ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <LL_RCC_LSI2_IsReady>:
{
 80047ba:	b480      	push	{r7}
 80047bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80047be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d101      	bne.n	80047d2 <LL_RCC_LSI2_IsReady+0x18>
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <LL_RCC_LSI2_IsReady+0x1a>
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_RCC_LSI2_SetTrimming>:
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	021b      	lsls	r3, r3, #8
 80047f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <LL_RCC_MSI_Enable>:
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6013      	str	r3, [r2, #0]
}
 8004820:	bf00      	nop
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <LL_RCC_MSI_Disable>:
{
 800482a:	b480      	push	{r7}
 800482c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800482e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	6013      	str	r3, [r2, #0]
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_RCC_MSI_IsReady>:
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d101      	bne.n	800485e <LL_RCC_MSI_IsReady+0x16>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <LL_RCC_MSI_IsReady+0x18>
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <LL_RCC_MSI_SetRange>:
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4313      	orrs	r3, r2
 8004884:	600b      	str	r3, [r1, #0]
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <LL_RCC_MSI_GetRange>:
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2bb0      	cmp	r3, #176	; 0xb0
 80048a8:	d901      	bls.n	80048ae <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80048aa:	23b0      	movs	r3, #176	; 0xb0
 80048ac:	607b      	str	r3, [r7, #4]
  return msiRange;
 80048ae:	687b      	ldr	r3, [r7, #4]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_RCC_MSI_SetCalibTrimming>:
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80048c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048d6:	4313      	orrs	r3, r2
 80048d8:	604b      	str	r3, [r1, #4]
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_RCC_SetSysClkSource>:
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 0203 	bic.w	r2, r3, #3
 80048f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <LL_RCC_GetSysClkSource>:
{
 800490e:	b480      	push	{r7}
 8004910:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 030c 	and.w	r3, r3, #12
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_RCC_SetAHBPrescaler>:
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800492e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4313      	orrs	r3, r2
 8004940:	608b      	str	r3, [r1, #8]
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <LL_C2_RCC_SetAHBPrescaler>:
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800495e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_RCC_SetAHB4Prescaler>:
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004986:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800498a:	f023 020f 	bic.w	r2, r3, #15
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_RCC_SetAPB1Prescaler>:
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80049b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	608b      	str	r3, [r1, #8]
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <LL_RCC_SetAPB2Prescaler>:
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80049d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	608b      	str	r3, [r1, #8]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_RCC_GetAHBPrescaler>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_RCC_GetAHB4Prescaler>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <LL_RCC_PLL_Enable>:
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3e:	6013      	str	r3, [r2, #0]
}
 8004a40:	bf00      	nop
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_RCC_PLL_Disable>:
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5c:	6013      	str	r3, [r2, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <LL_RCC_PLL_IsReady>:
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7a:	d101      	bne.n	8004a80 <LL_RCC_PLL_IsReady+0x18>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <LL_RCC_PLL_IsReady+0x1a>
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_PLL_GetN>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	0a1b      	lsrs	r3, r3, #8
 8004a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_PLL_GetR>:
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_PLL_GetDivider>:
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <LL_RCC_PLL_GetMainSource>:
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	f003 0303 	and.w	r3, r3, #3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <LL_RCC_IsActiveFlag_HPRE>:
{
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d101      	bne.n	8004b06 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004b02:	2301      	movs	r3, #1
 8004b04:	e000      	b.n	8004b08 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004b12:	b480      	push	{r7}
 8004b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b26:	d101      	bne.n	8004b2c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4c:	d101      	bne.n	8004b52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e000      	b.n	8004b54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004b5e:	b480      	push	{r7}
 8004b60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b70:	d101      	bne.n	8004b76 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004b82:	b480      	push	{r7}
 8004b84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b94:	d101      	bne.n	8004b9a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
	...

08004ba8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b08d      	sub	sp, #52	; 0x34
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e37e      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0320 	and.w	r3, r3, #32
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8092 	beq.w	8004cec <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc8:	f7ff fea1 	bl	800490e <LL_RCC_GetSysClkSource>
 8004bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bce:	f7ff ff82 	bl	8004ad6 <LL_RCC_PLL_GetMainSource>
 8004bd2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_RCC_OscConfig+0x3e>
 8004bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d14c      	bne.n	8004c7a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d149      	bne.n	8004c7a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004be6:	f7ff fe2f 	bl	8004848 <LL_RCC_MSI_IsReady>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_RCC_OscConfig+0x54>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69db      	ldr	r3, [r3, #28]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e35d      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004c00:	f7ff fe47 	bl	8004892 <LL_RCC_MSI_GetRange>
 8004c04:	4603      	mov	r3, r0
 8004c06:	429c      	cmp	r4, r3
 8004c08:	d914      	bls.n	8004c34 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fd16 	bl	8005640 <RCC_SetFlashLatencyFromMSIRange>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e34c      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fe21 	bl	800486a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7ff fe45 	bl	80048bc <LL_RCC_MSI_SetCalibTrimming>
 8004c32:	e013      	b.n	8004c5c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff fe16 	bl	800486a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff fe3a 	bl	80048bc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fcf7 	bl	8005640 <RCC_SetFlashLatencyFromMSIRange>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e32d      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c5c:	f000 fcdc 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4ab3      	ldr	r2, [pc, #716]	; (8004f30 <HAL_RCC_OscConfig+0x388>)
 8004c64:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c66:	4bb3      	ldr	r3, [pc, #716]	; (8004f34 <HAL_RCC_OscConfig+0x38c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fe fd34 	bl	80036d8 <HAL_InitTick>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d039      	beq.n	8004cea <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e31e      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01e      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c82:	f7ff fdc3 	bl	800480c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c86:	f7fe fd75 	bl	8003774 <HAL_GetTick>
 8004c8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c8e:	f7fe fd71 	bl	8003774 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e30b      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ca0:	f7ff fdd2 	bl	8004848 <LL_RCC_MSI_IsReady>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d0f1      	beq.n	8004c8e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fddb 	bl	800486a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fdff 	bl	80048bc <LL_RCC_MSI_SetCalibTrimming>
 8004cbe:	e015      	b.n	8004cec <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004cc0:	f7ff fdb3 	bl	800482a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cc4:	f7fe fd56 	bl	8003774 <HAL_GetTick>
 8004cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ccc:	f7fe fd52 	bl	8003774 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e2ec      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004cde:	f7ff fdb3 	bl	8004848 <LL_RCC_MSI_IsReady>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f1      	bne.n	8004ccc <HAL_RCC_OscConfig+0x124>
 8004ce8:	e000      	b.n	8004cec <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d04e      	beq.n	8004d96 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cf8:	f7ff fe09 	bl	800490e <LL_RCC_GetSysClkSource>
 8004cfc:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cfe:	f7ff feea 	bl	8004ad6 <LL_RCC_PLL_GetMainSource>
 8004d02:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d005      	beq.n	8004d16 <HAL_RCC_OscConfig+0x16e>
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	2b0c      	cmp	r3, #12
 8004d0e:	d10d      	bne.n	8004d2c <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2b03      	cmp	r3, #3
 8004d14:	d10a      	bne.n	8004d2c <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d16:	f7ff fc19 	bl	800454c <LL_RCC_HSE_IsReady>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d039      	beq.n	8004d94 <HAL_RCC_OscConfig+0x1ec>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d135      	bne.n	8004d94 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e2c5      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d102      	bne.n	8004d3c <HAL_RCC_OscConfig+0x194>
 8004d36:	f7ff fbeb 	bl	8004510 <LL_RCC_HSE_Enable>
 8004d3a:	e001      	b.n	8004d40 <HAL_RCC_OscConfig+0x198>
 8004d3c:	f7ff fbf7 	bl	800452e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d012      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fe fd14 	bl	8003774 <HAL_GetTick>
 8004d4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fe fd10 	bl	8003774 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	; 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e2aa      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004d62:	f7ff fbf3 	bl	800454c <LL_RCC_HSE_IsReady>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0f1      	beq.n	8004d50 <HAL_RCC_OscConfig+0x1a8>
 8004d6c:	e013      	b.n	8004d96 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fe fd01 	bl	8003774 <HAL_GetTick>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d76:	f7fe fcfd 	bl	8003774 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b64      	cmp	r3, #100	; 0x64
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e297      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d88:	f7ff fbe0 	bl	800454c <LL_RCC_HSE_IsReady>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1f1      	bne.n	8004d76 <HAL_RCC_OscConfig+0x1ce>
 8004d92:	e000      	b.n	8004d96 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d051      	beq.n	8004e46 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004da2:	f7ff fdb4 	bl	800490e <LL_RCC_GetSysClkSource>
 8004da6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004da8:	f7ff fe95 	bl	8004ad6 <LL_RCC_PLL_GetMainSource>
 8004dac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d005      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x218>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b0c      	cmp	r3, #12
 8004db8:	d113      	bne.n	8004de2 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d110      	bne.n	8004de2 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc0:	f7ff fbf4 	bl	80045ac <LL_RCC_HSI_IsReady>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x22e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e270      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fbf8 	bl	80045d0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004de0:	e031      	b.n	8004e46 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d019      	beq.n	8004e1e <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dea:	f7ff fbc1 	bl	8004570 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dee:	f7fe fcc1 	bl	8003774 <HAL_GetTick>
 8004df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004df6:	f7fe fcbd 	bl	8003774 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e257      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e08:	f7ff fbd0 	bl	80045ac <LL_RCC_HSI_IsReady>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f1      	beq.n	8004df6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fbda 	bl	80045d0 <LL_RCC_HSI_SetCalibTrimming>
 8004e1c:	e013      	b.n	8004e46 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e1e:	f7ff fbb6 	bl	800458e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e22:	f7fe fca7 	bl	8003774 <HAL_GetTick>
 8004e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2a:	f7fe fca3 	bl	8003774 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e23d      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004e3c:	f7ff fbb6 	bl	80045ac <LL_RCC_HSI_IsReady>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f1      	bne.n	8004e2a <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d106      	bne.n	8004e60 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 80a3 	beq.w	8004fa6 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d076      	beq.n	8004f56 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d046      	beq.n	8004f02 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004e74:	f7ff fc6d 	bl	8004752 <LL_RCC_LSI1_IsReady>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d113      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004e7e:	f7ff fc46 	bl	800470e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e82:	f7fe fc77 	bl	8003774 <HAL_GetTick>
 8004e86:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e8a:	f7fe fc73 	bl	8003774 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e20d      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e9c:	f7ff fc59 	bl	8004752 <LL_RCC_LSI1_IsReady>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f1      	beq.n	8004e8a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004ea6:	f7ff fc66 	bl	8004776 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eaa:	f7fe fc63 	bl	8003774 <HAL_GetTick>
 8004eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004eb2:	f7fe fc5f 	bl	8003774 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e1f9      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004ec4:	f7ff fc79 	bl	80047ba <LL_RCC_LSI2_IsReady>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d0f1      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fc83 	bl	80047de <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004ed8:	f7ff fc2a 	bl	8004730 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fe fc4a 	bl	8003774 <HAL_GetTick>
 8004ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ee4:	f7fe fc46 	bl	8003774 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e1e0      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004ef6:	f7ff fc2c 	bl	8004752 <LL_RCC_LSI1_IsReady>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f1      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x33c>
 8004f00:	e051      	b.n	8004fa6 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004f02:	f7ff fc04 	bl	800470e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f06:	f7fe fc35 	bl	8003774 <HAL_GetTick>
 8004f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f0e:	f7fe fc31 	bl	8003774 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e1cb      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004f20:	f7ff fc17 	bl	8004752 <LL_RCC_LSI1_IsReady>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f1      	beq.n	8004f0e <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004f2a:	f7ff fc35 	bl	8004798 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f2e:	e00c      	b.n	8004f4a <HAL_RCC_OscConfig+0x3a2>
 8004f30:	2000003c 	.word	0x2000003c
 8004f34:	20000040 	.word	0x20000040
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f38:	f7fe fc1c 	bl	8003774 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b03      	cmp	r3, #3
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e1b6      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004f4a:	f7ff fc36 	bl	80047ba <LL_RCC_LSI2_IsReady>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f1      	bne.n	8004f38 <HAL_RCC_OscConfig+0x390>
 8004f54:	e027      	b.n	8004fa6 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004f56:	f7ff fc1f 	bl	8004798 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f5a:	f7fe fc0b 	bl	8003774 <HAL_GetTick>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f62:	f7fe fc07 	bl	8003774 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e1a1      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004f74:	f7ff fc21 	bl	80047ba <LL_RCC_LSI2_IsReady>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1f1      	bne.n	8004f62 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004f7e:	f7ff fbd7 	bl	8004730 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f82:	f7fe fbf7 	bl	8003774 <HAL_GetTick>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f8a:	f7fe fbf3 	bl	8003774 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e18d      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f9c:	f7ff fbd9 	bl	8004752 <LL_RCC_LSI1_IsReady>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f1      	bne.n	8004f8a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d05b      	beq.n	800506a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fb2:	4bb5      	ldr	r3, [pc, #724]	; (8005288 <HAL_RCC_OscConfig+0x6e0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d114      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004fbe:	f7ff fa25 	bl	800440c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fc2:	f7fe fbd7 	bl	8003774 <HAL_GetTick>
 8004fc6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fca:	f7fe fbd3 	bl	8003774 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e16d      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fdc:	4baa      	ldr	r3, [pc, #680]	; (8005288 <HAL_RCC_OscConfig+0x6e0>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0f0      	beq.n	8004fca <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d102      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x44e>
 8004ff0:	f7ff fb37 	bl	8004662 <LL_RCC_LSE_Enable>
 8004ff4:	e00c      	b.n	8005010 <HAL_RCC_OscConfig+0x468>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	d104      	bne.n	8005008 <HAL_RCC_OscConfig+0x460>
 8004ffe:	f7ff fb52 	bl	80046a6 <LL_RCC_LSE_EnableBypass>
 8005002:	f7ff fb2e 	bl	8004662 <LL_RCC_LSE_Enable>
 8005006:	e003      	b.n	8005010 <HAL_RCC_OscConfig+0x468>
 8005008:	f7ff fb3c 	bl	8004684 <LL_RCC_LSE_Disable>
 800500c:	f7ff fb5c 	bl	80046c8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d014      	beq.n	8005042 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7fe fbac 	bl	8003774 <HAL_GetTick>
 800501c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800501e:	e00a      	b.n	8005036 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f7fe fba8 	bl	8003774 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	; 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e140      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005036:	f7ff fb58 	bl	80046ea <LL_RCC_LSE_IsReady>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0ef      	beq.n	8005020 <HAL_RCC_OscConfig+0x478>
 8005040:	e013      	b.n	800506a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7fe fb97 	bl	8003774 <HAL_GetTick>
 8005046:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005048:	e00a      	b.n	8005060 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504a:	f7fe fb93 	bl	8003774 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f241 3288 	movw	r2, #5000	; 0x1388
 8005058:	4293      	cmp	r3, r2
 800505a:	d901      	bls.n	8005060 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e12b      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005060:	f7ff fb43 	bl	80046ea <LL_RCC_LSE_IsReady>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1ef      	bne.n	800504a <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02c      	beq.n	80050d0 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d014      	beq.n	80050a8 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800507e:	f7ff fabc 	bl	80045fa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005082:	f7fe fb77 	bl	8003774 <HAL_GetTick>
 8005086:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800508a:	f7fe fb73 	bl	8003774 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e10d      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800509c:	f7ff facf 	bl	800463e <LL_RCC_HSI48_IsReady>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f1      	beq.n	800508a <HAL_RCC_OscConfig+0x4e2>
 80050a6:	e013      	b.n	80050d0 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050a8:	f7ff fab8 	bl	800461c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ac:	f7fe fb62 	bl	8003774 <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050b4:	f7fe fb5e 	bl	8003774 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0f8      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80050c6:	f7ff faba 	bl	800463e <LL_RCC_HSI48_IsReady>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1f1      	bne.n	80050b4 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80ee 	beq.w	80052b6 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050da:	f7ff fc18 	bl	800490e <LL_RCC_GetSysClkSource>
 80050de:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80050e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	f040 80af 	bne.w	8005250 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f003 0203 	and.w	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d123      	bne.n	8005148 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800510a:	429a      	cmp	r2, r3
 800510c:	d11c      	bne.n	8005148 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	0a1b      	lsrs	r3, r3, #8
 8005112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800511a:	429a      	cmp	r2, r3
 800511c:	d114      	bne.n	8005148 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d10d      	bne.n	8005148 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d106      	bne.n	8005148 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005144:	429a      	cmp	r2, r3
 8005146:	d05d      	beq.n	8005204 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	2b0c      	cmp	r3, #12
 800514c:	d058      	beq.n	8005200 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800514e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0ab      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005160:	f7ff fc73 	bl	8004a4a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005164:	f7fe fb06 	bl	8003774 <HAL_GetTick>
 8005168:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fe fb02 	bl	8003774 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e09c      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ef      	bne.n	800516c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	4b3e      	ldr	r3, [pc, #248]	; (800528c <HAL_RCC_OscConfig+0x6e4>)
 8005194:	4013      	ands	r3, r2
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800519e:	4311      	orrs	r1, r2
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051a4:	0212      	lsls	r2, r2, #8
 80051a6:	4311      	orrs	r1, r2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051ac:	4311      	orrs	r1, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051b2:	4311      	orrs	r1, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80051b8:	430a      	orrs	r2, r1
 80051ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051be:	4313      	orrs	r3, r2
 80051c0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051c2:	f7ff fc33 	bl	8004a2c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051d4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051d6:	f7fe facd 	bl	8003774 <HAL_GetTick>
 80051da:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051dc:	e008      	b.n	80051f0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051de:	f7fe fac9 	bl	8003774 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e063      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ef      	beq.n	80051de <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051fe:	e05a      	b.n	80052b6 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e059      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d151      	bne.n	80052b6 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005212:	f7ff fc0b 	bl	8004a2c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005224:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005226:	f7fe faa5 	bl	8003774 <HAL_GetTick>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800522e:	f7fe faa1 	bl	8003774 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e03b      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d0ef      	beq.n	800522e <HAL_RCC_OscConfig+0x686>
 800524e:	e032      	b.n	80052b6 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d02d      	beq.n	80052b2 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	f7ff fbf8 	bl	8004a4a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800525a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005264:	f023 0303 	bic.w	r3, r3, #3
 8005268:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800526a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005274:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527e:	f7fe fa79 	bl	8003774 <HAL_GetTick>
 8005282:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005284:	e00d      	b.n	80052a2 <HAL_RCC_OscConfig+0x6fa>
 8005286:	bf00      	nop
 8005288:	58000400 	.word	0x58000400
 800528c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005290:	f7fe fa70 	bl	8003774 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e00a      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ef      	bne.n	8005290 <HAL_RCC_OscConfig+0x6e8>
 80052b0:	e001      	b.n	80052b6 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3734      	adds	r7, #52	; 0x34
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd90      	pop	{r4, r7, pc}

080052c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e12d      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052d4:	4b98      	ldr	r3, [pc, #608]	; (8005538 <HAL_RCC_ClockConfig+0x278>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d91b      	bls.n	800531a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052e2:	4b95      	ldr	r3, [pc, #596]	; (8005538 <HAL_RCC_ClockConfig+0x278>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f023 0207 	bic.w	r2, r3, #7
 80052ea:	4993      	ldr	r1, [pc, #588]	; (8005538 <HAL_RCC_ClockConfig+0x278>)
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f2:	f7fe fa3f 	bl	8003774 <HAL_GetTick>
 80052f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052f8:	e008      	b.n	800530c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80052fa:	f7fe fa3b 	bl	8003774 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e111      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800530c:	4b8a      	ldr	r3, [pc, #552]	; (8005538 <HAL_RCC_ClockConfig+0x278>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	429a      	cmp	r2, r3
 8005318:	d1ef      	bne.n	80052fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff fafb 	bl	8004926 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005330:	f7fe fa20 	bl	8003774 <HAL_GetTick>
 8005334:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005338:	f7fe fa1c 	bl	8003774 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e0f2      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800534a:	f7ff fbd0 	bl	8004aee <LL_RCC_IsActiveFlag_HPRE>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f1      	beq.n	8005338 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d016      	beq.n	800538e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	695b      	ldr	r3, [r3, #20]
 8005364:	4618      	mov	r0, r3
 8005366:	f7ff faf2 	bl	800494e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800536a:	f7fe fa03 	bl	8003774 <HAL_GetTick>
 800536e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005370:	e008      	b.n	8005384 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005372:	f7fe f9ff 	bl	8003774 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e0d5      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005384:	f7ff fbc5 	bl	8004b12 <LL_RCC_IsActiveFlag_C2HPRE>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f1      	beq.n	8005372 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff faeb 	bl	800497a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053a4:	f7fe f9e6 	bl	8003774 <HAL_GetTick>
 80053a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053ac:	f7fe f9e2 	bl	8003774 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e0b8      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80053be:	f7ff fbbb 	bl	8004b38 <LL_RCC_IsActiveFlag_SHDHPRE>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f1      	beq.n	80053ac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d016      	beq.n	8005402 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	4618      	mov	r0, r3
 80053da:	f7ff fae5 	bl	80049a8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053de:	f7fe f9c9 	bl	8003774 <HAL_GetTick>
 80053e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053e6:	f7fe f9c5 	bl	8003774 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e09b      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80053f8:	f7ff fbb1 	bl	8004b5e <LL_RCC_IsActiveFlag_PPRE1>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f1      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d017      	beq.n	800543e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff fadb 	bl	80049d0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800541a:	f7fe f9ab 	bl	8003774 <HAL_GetTick>
 800541e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005420:	e008      	b.n	8005434 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005422:	f7fe f9a7 	bl	8003774 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e07d      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005434:	f7ff fba5 	bl	8004b82 <LL_RCC_IsActiveFlag_PPRE2>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f1      	beq.n	8005422 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d043      	beq.n	80054d2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d106      	bne.n	8005460 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005452:	f7ff f87b 	bl	800454c <LL_RCC_HSE_IsReady>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11e      	bne.n	800549a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e067      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2b03      	cmp	r3, #3
 8005466:	d106      	bne.n	8005476 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005468:	f7ff fafe 	bl	8004a68 <LL_RCC_PLL_IsReady>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d113      	bne.n	800549a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e05c      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800547e:	f7ff f9e3 	bl	8004848 <LL_RCC_MSI_IsReady>
 8005482:	4603      	mov	r3, r0
 8005484:	2b00      	cmp	r3, #0
 8005486:	d108      	bne.n	800549a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e051      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800548c:	f7ff f88e 	bl	80045ac <LL_RCC_HSI_IsReady>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e04a      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff fa21 	bl	80048e6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a4:	f7fe f966 	bl	8003774 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ac:	f7fe f962 	bl	8003774 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e036      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	f7ff fa24 	bl	800490e <LL_RCC_GetSysClkSource>
 80054c6:	4602      	mov	r2, r0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d1ec      	bne.n	80054ac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d2:	4b19      	ldr	r3, [pc, #100]	; (8005538 <HAL_RCC_ClockConfig+0x278>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d21b      	bcs.n	8005518 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e0:	4b15      	ldr	r3, [pc, #84]	; (8005538 <HAL_RCC_ClockConfig+0x278>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f023 0207 	bic.w	r2, r3, #7
 80054e8:	4913      	ldr	r1, [pc, #76]	; (8005538 <HAL_RCC_ClockConfig+0x278>)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f0:	f7fe f940 	bl	8003774 <HAL_GetTick>
 80054f4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	e008      	b.n	800550a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80054f8:	f7fe f93c 	bl	8003774 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e012      	b.n	8005530 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_RCC_ClockConfig+0x278>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d1ef      	bne.n	80054f8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005518:	f000 f87e 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 800551c:	4603      	mov	r3, r0
 800551e:	4a07      	ldr	r2, [pc, #28]	; (800553c <HAL_RCC_ClockConfig+0x27c>)
 8005520:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005522:	f7fe f933 	bl	800378c <HAL_GetTickPrio>
 8005526:	4603      	mov	r3, r0
 8005528:	4618      	mov	r0, r3
 800552a:	f7fe f8d5 	bl	80036d8 <HAL_InitTick>
 800552e:	4603      	mov	r3, r0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	58004000 	.word	0x58004000
 800553c:	2000003c 	.word	0x2000003c

08005540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005540:	b590      	push	{r4, r7, lr}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005546:	f7ff f9e2 	bl	800490e <LL_RCC_GetSysClkSource>
 800554a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005552:	f7ff f99e 	bl	8004892 <LL_RCC_MSI_GetRange>
 8005556:	4603      	mov	r3, r0
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	4a2b      	ldr	r2, [pc, #172]	; (800560c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	e04b      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b04      	cmp	r3, #4
 800556c:	d102      	bne.n	8005574 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800556e:	4b28      	ldr	r3, [pc, #160]	; (8005610 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	e045      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2b08      	cmp	r3, #8
 8005578:	d10a      	bne.n	8005590 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800557a:	f7fe ffb7 	bl	80044ec <LL_RCC_HSE_IsEnabledDiv2>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d102      	bne.n	800558a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005584:	4b22      	ldr	r3, [pc, #136]	; (8005610 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e03a      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800558a:	4b22      	ldr	r3, [pc, #136]	; (8005614 <HAL_RCC_GetSysClockFreq+0xd4>)
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e037      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005590:	f7ff faa1 	bl	8004ad6 <LL_RCC_PLL_GetMainSource>
 8005594:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b02      	cmp	r3, #2
 800559a:	d003      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x64>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b03      	cmp	r3, #3
 80055a0:	d003      	beq.n	80055aa <HAL_RCC_GetSysClockFreq+0x6a>
 80055a2:	e00d      	b.n	80055c0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055a6:	60bb      	str	r3, [r7, #8]
        break;
 80055a8:	e015      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80055aa:	f7fe ff9f 	bl	80044ec <LL_RCC_HSE_IsEnabledDiv2>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80055b4:	4b16      	ldr	r3, [pc, #88]	; (8005610 <HAL_RCC_GetSysClockFreq+0xd0>)
 80055b6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80055b8:	e00d      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80055ba:	4b16      	ldr	r3, [pc, #88]	; (8005614 <HAL_RCC_GetSysClockFreq+0xd4>)
 80055bc:	60bb      	str	r3, [r7, #8]
        break;
 80055be:	e00a      	b.n	80055d6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055c0:	f7ff f967 	bl	8004892 <LL_RCC_MSI_GetRange>
 80055c4:	4603      	mov	r3, r0
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	4a0f      	ldr	r2, [pc, #60]	; (800560c <HAL_RCC_GetSysClockFreq+0xcc>)
 80055ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d2:	60bb      	str	r3, [r7, #8]
        break;
 80055d4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80055d6:	f7ff fa59 	bl	8004a8c <LL_RCC_PLL_GetN>
 80055da:	4602      	mov	r2, r0
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	fb03 f402 	mul.w	r4, r3, r2
 80055e2:	f7ff fa6c 	bl	8004abe <LL_RCC_PLL_GetDivider>
 80055e6:	4603      	mov	r3, r0
 80055e8:	091b      	lsrs	r3, r3, #4
 80055ea:	3301      	adds	r3, #1
 80055ec:	fbb4 f4f3 	udiv	r4, r4, r3
 80055f0:	f7ff fa59 	bl	8004aa6 <LL_RCC_PLL_GetR>
 80055f4:	4603      	mov	r3, r0
 80055f6:	0f5b      	lsrs	r3, r3, #29
 80055f8:	3301      	adds	r3, #1
 80055fa:	fbb4 f3f3 	udiv	r3, r4, r3
 80055fe:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8005600:	68fb      	ldr	r3, [r7, #12]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	bd90      	pop	{r4, r7, pc}
 800560a:	bf00      	nop
 800560c:	0800b01c 	.word	0x0800b01c
 8005610:	00f42400 	.word	0x00f42400
 8005614:	01e84800 	.word	0x01e84800

08005618 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005618:	b598      	push	{r3, r4, r7, lr}
 800561a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800561c:	f7ff ff90 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 8005620:	4604      	mov	r4, r0
 8005622:	f7ff f9e9 	bl	80049f8 <LL_RCC_GetAHBPrescaler>
 8005626:	4603      	mov	r3, r0
 8005628:	091b      	lsrs	r3, r3, #4
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	4a03      	ldr	r2, [pc, #12]	; (800563c <HAL_RCC_GetHCLKFreq+0x24>)
 8005630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005634:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005638:	4618      	mov	r0, r3
 800563a:	bd98      	pop	{r3, r4, r7, pc}
 800563c:	0800afdc 	.word	0x0800afdc

08005640 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2bb0      	cmp	r3, #176	; 0xb0
 800564c:	d903      	bls.n	8005656 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800564e:	4b15      	ldr	r3, [pc, #84]	; (80056a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	e007      	b.n	8005666 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	091b      	lsrs	r3, r3, #4
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	4a11      	ldr	r2, [pc, #68]	; (80056a4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005664:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005666:	f7ff f9d3 	bl	8004a10 <LL_RCC_GetAHB4Prescaler>
 800566a:	4603      	mov	r3, r0
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	4a0d      	ldr	r2, [pc, #52]	; (80056a8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4a0a      	ldr	r2, [pc, #40]	; (80056ac <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	0c9c      	lsrs	r4, r3, #18
 800568a:	f7fe ff21 	bl	80044d0 <HAL_PWREx_GetVoltageRange>
 800568e:	4603      	mov	r3, r0
 8005690:	4619      	mov	r1, r3
 8005692:	4620      	mov	r0, r4
 8005694:	f000 f80c 	bl	80056b0 <RCC_SetFlashLatency>
 8005698:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd90      	pop	{r4, r7, pc}
 80056a2:	bf00      	nop
 80056a4:	0800b01c 	.word	0x0800b01c
 80056a8:	0800afdc 	.word	0x0800afdc
 80056ac:	431bde83 	.word	0x431bde83

080056b0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b093      	sub	sp, #76	; 0x4c
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80056ba:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <RCC_SetFlashLatency+0xf0>)
 80056bc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80056c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80056c6:	4a37      	ldr	r2, [pc, #220]	; (80057a4 <RCC_SetFlashLatency+0xf4>)
 80056c8:	f107 031c 	add.w	r3, r7, #28
 80056cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80056ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80056d2:	4b35      	ldr	r3, [pc, #212]	; (80057a8 <RCC_SetFlashLatency+0xf8>)
 80056d4:	f107 040c 	add.w	r4, r7, #12
 80056d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80056de:	2300      	movs	r3, #0
 80056e0:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056e8:	d11c      	bne.n	8005724 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	643b      	str	r3, [r7, #64]	; 0x40
 80056ee:	e015      	b.n	800571c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80056f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80056f8:	4413      	add	r3, r2
 80056fa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d808      	bhi.n	8005716 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800570c:	4413      	add	r3, r2
 800570e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005712:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005714:	e022      	b.n	800575c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005718:	3301      	adds	r3, #1
 800571a:	643b      	str	r3, [r7, #64]	; 0x40
 800571c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571e:	2b03      	cmp	r3, #3
 8005720:	d9e6      	bls.n	80056f0 <RCC_SetFlashLatency+0x40>
 8005722:	e01b      	b.n	800575c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005724:	2300      	movs	r3, #0
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005728:	e015      	b.n	8005756 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800572a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005732:	4413      	add	r3, r2
 8005734:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	429a      	cmp	r2, r3
 800573c:	d808      	bhi.n	8005750 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800573e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005746:	4413      	add	r3, r2
 8005748:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800574c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800574e:	e005      	b.n	800575c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005752:	3301      	adds	r3, #1
 8005754:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005758:	2b02      	cmp	r3, #2
 800575a:	d9e6      	bls.n	800572a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800575c:	4b13      	ldr	r3, [pc, #76]	; (80057ac <RCC_SetFlashLatency+0xfc>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f023 0207 	bic.w	r2, r3, #7
 8005764:	4911      	ldr	r1, [pc, #68]	; (80057ac <RCC_SetFlashLatency+0xfc>)
 8005766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005768:	4313      	orrs	r3, r2
 800576a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800576c:	f7fe f802 	bl	8003774 <HAL_GetTick>
 8005770:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005772:	e008      	b.n	8005786 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005774:	f7fd fffe 	bl	8003774 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e007      	b.n	8005796 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <RCC_SetFlashLatency+0xfc>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005790:	429a      	cmp	r2, r3
 8005792:	d1ef      	bne.n	8005774 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	374c      	adds	r7, #76	; 0x4c
 800579a:	46bd      	mov	sp, r7
 800579c:	bd90      	pop	{r4, r7, pc}
 800579e:	bf00      	nop
 80057a0:	0800ae38 	.word	0x0800ae38
 80057a4:	0800ae48 	.word	0x0800ae48
 80057a8:	0800ae54 	.word	0x0800ae54
 80057ac:	58004000 	.word	0x58004000

080057b0 <LL_RCC_LSE_IsEnabled>:
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <LL_RCC_LSE_IsEnabled+0x18>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <LL_RCC_LSE_IsEnabled+0x1a>
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <LL_RCC_LSE_IsReady>:
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80057d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e0:	f003 0302 	and.w	r3, r3, #2
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d101      	bne.n	80057ec <LL_RCC_LSE_IsReady+0x18>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <LL_RCC_LSE_IsReady+0x1a>
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <LL_RCC_SetRFWKPClockSource>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005808:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800580c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <LL_RCC_SetSMPSClockSource>:
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	f023 0203 	bic.w	r2, r3, #3
 8005836:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4313      	orrs	r3, r2
 800583e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <LL_RCC_SetSMPSPrescaler>:
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800585e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4313      	orrs	r3, r2
 8005866:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <LL_RCC_SetUSARTClockSource>:
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005884:	f023 0203 	bic.w	r2, r3, #3
 8005888:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <LL_RCC_SetLPUARTClockSource>:
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80058a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <LL_RCC_SetI2CClockSource>:
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80058d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058e4:	43db      	mvns	r3, r3
 80058e6:	401a      	ands	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058f4:	4313      	orrs	r3, r2
 80058f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <LL_RCC_SetLPTIMClockSource>:
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800590e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005912:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	0c1b      	lsrs	r3, r3, #16
 800591a:	041b      	lsls	r3, r3, #16
 800591c:	43db      	mvns	r3, r3
 800591e:	401a      	ands	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <LL_RCC_SetSAIClockSource>:
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800594e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800595a:	bf00      	nop
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <LL_RCC_SetRNGClockSource>:
{
 8005966:	b480      	push	{r7}
 8005968:	b083      	sub	sp, #12
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800596e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800597a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <LL_RCC_SetCLK48ClockSource>:
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800599a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <LL_RCC_SetUSBClockSource>:
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff ffe3 	bl	8005992 <LL_RCC_SetCLK48ClockSource>
}
 80059cc:	bf00      	nop
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <LL_RCC_SetADCClockSource>:
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80059dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_RCC_SetRTCClockSource>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <LL_RCC_GetRTCClockSource>:
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <LL_RCC_ForceBackupDomainReset>:
{
 8005a46:	b480      	push	{r7}
 8005a48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a5e:	bf00      	nop
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a80:	bf00      	nop
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <LL_RCC_PLLSAI1_Enable>:
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a9c:	6013      	str	r3, [r2, #0]
}
 8005a9e:	bf00      	nop
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <LL_RCC_PLLSAI1_Disable>:
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ab6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aba:	6013      	str	r3, [r2, #0]
}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <LL_RCC_PLLSAI1_IsReady>:
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ad8:	d101      	bne.n	8005ade <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e000      	b.n	8005ae0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b088      	sub	sp, #32
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005af2:	2300      	movs	r3, #0
 8005af4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005af6:	2300      	movs	r3, #0
 8005af8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d034      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b0e:	d021      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005b14:	d81b      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b1a:	d01d      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005b20:	d815      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00b      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005b26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b2a:	d110      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b3c:	e00d      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 f947 	bl	8005dd6 <RCCEx_PLLSAI1_ConfigNP>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b4c:	e005      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	77fb      	strb	r3, [r7, #31]
        break;
 8005b52:	e002      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b54:	bf00      	nop
 8005b56:	e000      	b.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5a:	7ffb      	ldrb	r3, [r7, #31]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d105      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7ff fee8 	bl	800593a <LL_RCC_SetSAIClockSource>
 8005b6a:	e001      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6c:	7ffb      	ldrb	r3, [r7, #31]
 8005b6e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d046      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005b7c:	f7ff ff56 	bl	8005a2c <LL_RCC_GetRTCClockSource>
 8005b80:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	69ba      	ldr	r2, [r7, #24]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d03c      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b8c:	f7fe fc3e 	bl	800440c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff ff30 	bl	8005a00 <LL_RCC_SetRTCClockSource>
 8005ba0:	e02e      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005bac:	f7ff ff4b 	bl	8005a46 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005bb0:	f7ff ff5a 	bl	8005a68 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005bcc:	f7ff fdf0 	bl	80057b0 <LL_RCC_LSE_IsEnabled>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d114      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bd6:	f7fd fdcd 	bl	8003774 <HAL_GetTick>
 8005bda:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005bdc:	e00b      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bde:	f7fd fdc9 	bl	8003774 <HAL_GetTick>
 8005be2:	4602      	mov	r2, r0
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d902      	bls.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	77fb      	strb	r3, [r7, #31]
              break;
 8005bf4:	e004      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005bf6:	f7ff fded 	bl	80057d4 <LL_RCC_LSE_IsReady>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d1ee      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005c00:	7ffb      	ldrb	r3, [r7, #31]
 8005c02:	77bb      	strb	r3, [r7, #30]
 8005c04:	e001      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c06:	7ffb      	ldrb	r3, [r7, #31]
 8005c08:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0301 	and.w	r3, r3, #1
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d004      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff fe2a 	bl	8005874 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d004      	beq.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fe35 	bl	80058a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d004      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff fe5d 	bl	8005906 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fe52 	bl	8005906 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff fe2a 	bl	80058cc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fe1f 	bl	80058cc <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d022      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fe8d 	bl	80059be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cac:	d107      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cbc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cc6:	d10b      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f8dd 	bl	8005e8c <RCCEx_PLLSAI1_ConfigNQ>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
 8005cde:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d02b      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf4:	d008      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fe2a 	bl	8005966 <LL_RCC_SetRNGClockSource>
 8005d12:	e00a      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	2000      	movs	r0, #0
 8005d20:	f7ff fe21 	bl	8005966 <LL_RCC_SetRNGClockSource>
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fe34 	bl	8005992 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d32:	d107      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d022      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7ff fe3d 	bl	80059d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d62:	d107      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d72:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7c:	d10b      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f8dd 	bl	8005f42 <RCCEx_PLLSAI1_ConfigNR>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005d8c:	7ffb      	ldrb	r3, [r7, #31]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d001      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005d92:	7ffb      	ldrb	r3, [r7, #31]
 8005d94:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fd26 	bl	80057f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fd45 	bl	800584c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fd2c 	bl	8005824 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005dcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005de2:	f7ff fe61 	bl	8005aa8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005de6:	f7fd fcc5 	bl	8003774 <HAL_GetTick>
 8005dea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dec:	e009      	b.n	8005e02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dee:	f7fd fcc1 	bl	8003774 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d902      	bls.n	8005e02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005e00:	e004      	b.n	8005e0c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e02:	f7ff fe60 	bl	8005ac6 <LL_RCC_PLLSAI1_IsReady>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f0      	bne.n	8005dee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005e0c:	7bfb      	ldrb	r3, [r7, #15]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d137      	bne.n	8005e82 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e26:	4313      	orrs	r3, r2
 8005e28:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e40:	f7ff fe23 	bl	8005a8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e44:	f7fd fc96 	bl	8003774 <HAL_GetTick>
 8005e48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e4a:	e009      	b.n	8005e60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e4c:	f7fd fc92 	bl	8003774 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d902      	bls.n	8005e60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e5e:	e004      	b.n	8005e6a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e60:	f7ff fe31 	bl	8005ac6 <LL_RCC_PLLSAI1_IsReady>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d1f0      	bne.n	8005e4c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d108      	bne.n	8005e82 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b084      	sub	sp, #16
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e98:	f7ff fe06 	bl	8005aa8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e9c:	f7fd fc6a 	bl	8003774 <HAL_GetTick>
 8005ea0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ea2:	e009      	b.n	8005eb8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ea4:	f7fd fc66 	bl	8003774 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d902      	bls.n	8005eb8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb6:	e004      	b.n	8005ec2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005eb8:	f7ff fe05 	bl	8005ac6 <LL_RCC_PLLSAI1_IsReady>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f0      	bne.n	8005ea4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d137      	bne.n	8005f38 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005edc:	4313      	orrs	r3, r2
 8005ede:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ef6:	f7ff fdc8 	bl	8005a8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005efa:	f7fd fc3b 	bl	8003774 <HAL_GetTick>
 8005efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f00:	e009      	b.n	8005f16 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f02:	f7fd fc37 	bl	8003774 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d902      	bls.n	8005f16 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	73fb      	strb	r3, [r7, #15]
        break;
 8005f14:	e004      	b.n	8005f20 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f16:	f7ff fdd6 	bl	8005ac6 <LL_RCC_PLLSAI1_IsReady>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d1f0      	bne.n	8005f02 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d108      	bne.n	8005f38 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f34:	4313      	orrs	r3, r2
 8005f36:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f4e:	f7ff fdab 	bl	8005aa8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f52:	f7fd fc0f 	bl	8003774 <HAL_GetTick>
 8005f56:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f58:	e009      	b.n	8005f6e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f5a:	f7fd fc0b 	bl	8003774 <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d902      	bls.n	8005f6e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f6c:	e004      	b.n	8005f78 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f6e:	f7ff fdaa 	bl	8005ac6 <LL_RCC_PLLSAI1_IsReady>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d1f0      	bne.n	8005f5a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d137      	bne.n	8005fee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	021b      	lsls	r3, r3, #8
 8005f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f92:	4313      	orrs	r3, r2
 8005f94:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005fac:	f7ff fd6d 	bl	8005a8a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb0:	f7fd fbe0 	bl	8003774 <HAL_GetTick>
 8005fb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fb6:	e009      	b.n	8005fcc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb8:	f7fd fbdc 	bl	8003774 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b02      	cmp	r3, #2
 8005fc4:	d902      	bls.n	8005fcc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	73fb      	strb	r3, [r7, #15]
        break;
 8005fca:	e004      	b.n	8005fd6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fcc:	f7ff fd7b 	bl	8005ac6 <LL_RCC_PLLSAI1_IsReady>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d1f0      	bne.n	8005fb8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005fd6:	7bfb      	ldrb	r3, [r7, #15]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d108      	bne.n	8005fee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fea:	4313      	orrs	r3, r2
 8005fec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e0b4      	b.n	8006174 <HAL_RTC_Init+0x17c>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d12a      	bne.n	800606c <HAL_RTC_Init+0x74>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2020 	strb.w	r2, [r3, #32]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a56      	ldr	r2, [pc, #344]	; (800617c <HAL_RTC_Init+0x184>)
 8006022:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a56      	ldr	r2, [pc, #344]	; (8006180 <HAL_RTC_Init+0x188>)
 8006028:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a55      	ldr	r2, [pc, #340]	; (8006184 <HAL_RTC_Init+0x18c>)
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a55      	ldr	r2, [pc, #340]	; (8006188 <HAL_RTC_Init+0x190>)
 8006034:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER1_SUPPORT)
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a54      	ldr	r2, [pc, #336]	; (800618c <HAL_RTC_Init+0x194>)
 800603a:	635a      	str	r2, [r3, #52]	; 0x34
#endif
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4a54      	ldr	r2, [pc, #336]	; (8006190 <HAL_RTC_Init+0x198>)
 8006040:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(RTC_TAMPER3_SUPPORT)
    hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamper3EventCallback     */
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a53      	ldr	r2, [pc, #332]	; (8006194 <HAL_RTC_Init+0x19c>)
 8006046:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

    if(hrtc->MspInitCallback == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <HAL_RTC_Init+0x5e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a51      	ldr	r2, [pc, #324]	; (8006198 <HAL_RTC_Init+0x1a0>)
 8006054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <HAL_RTC_Init+0x74>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a4c      	ldr	r2, [pc, #304]	; (800619c <HAL_RTC_Init+0x1a4>)
 800606a:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	22ca      	movs	r2, #202	; 0xca
 800607a:	625a      	str	r2, [r3, #36]	; 0x24
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2253      	movs	r2, #83	; 0x53
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fad6 	bl	8006636 <RTC_EnterInitMode>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d009      	beq.n	80060a4 <HAL_RTC_Init+0xac>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	22ff      	movs	r2, #255	; 0xff
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2204      	movs	r2, #4
 800609c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e067      	b.n	8006174 <HAL_RTC_Init+0x17c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80060b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6899      	ldr	r1, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	68d2      	ldr	r2, [r2, #12]
 80060de:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6919      	ldr	r1, [r3, #16]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	041a      	lsls	r2, r3, #16
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006102:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0203 	bic.w	r2, r2, #3
 8006112:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69da      	ldr	r2, [r3, #28]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	431a      	orrs	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	430a      	orrs	r2, r1
 800612a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d113      	bne.n	8006162 <HAL_RTC_Init+0x16a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa55 	bl	80065ea <HAL_RTC_WaitForSynchro>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00d      	beq.n	8006162 <HAL_RTC_Init+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	22ff      	movs	r2, #255	; 0xff
 800614c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2204      	movs	r2, #4
 8006152:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e008      	b.n	8006174 <HAL_RTC_Init+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	22ff      	movs	r2, #255	; 0xff
 8006168:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006172:	2300      	movs	r3, #0
  }
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	080065d7 	.word	0x080065d7
 8006180:	08006965 	.word	0x08006965
 8006184:	08006703 	.word	0x08006703
 8006188:	08006889 	.word	0x08006889
 800618c:	08006717 	.word	0x08006717
 8006190:	0800672b 	.word	0x0800672b
 8006194:	0800673f 	.word	0x0800673f
 8006198:	080021b1 	.word	0x080021b1
 800619c:	080021f1 	.word	0x080021f1

080061a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061a0:	b590      	push	{r4, r7, lr}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_RTC_SetTime+0x1a>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e0b2      	b.n	8006320 <HAL_RTC_SetTime+0x180>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2202      	movs	r2, #2
 80061c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d126      	bne.n	800621e <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d102      	bne.n	80061e4 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	2200      	movs	r2, #0
 80061e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fa4e 	bl	800668a <RTC_ByteToBcd2>
 80061ee:	4603      	mov	r3, r0
 80061f0:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fa47 	bl	800668a <RTC_ByteToBcd2>
 80061fc:	4603      	mov	r3, r0
 80061fe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006200:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	789b      	ldrb	r3, [r3, #2]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fa3f 	bl	800668a <RTC_ByteToBcd2>
 800620c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800620e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	78db      	ldrb	r3, [r3, #3]
 8006216:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e018      	b.n	8006250 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2200      	movs	r2, #0
 8006230:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	785b      	ldrb	r3, [r3, #1]
 800623c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800623e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006244:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	78db      	ldrb	r3, [r3, #3]
 800624a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	22ca      	movs	r2, #202	; 0xca
 8006256:	625a      	str	r2, [r3, #36]	; 0x24
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2253      	movs	r2, #83	; 0x53
 800625e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 f9e8 	bl	8006636 <RTC_EnterInitMode>
 8006266:	4603      	mov	r3, r0
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00d      	beq.n	8006288 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2204      	movs	r2, #4
 8006278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e04b      	b.n	8006320 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006292:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006296:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6899      	ldr	r1, [r3, #8]
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0320 	and.w	r3, r3, #32
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d113      	bne.n	8006306 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f983 	bl	80065ea <HAL_RTC_WaitForSynchro>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00d      	beq.n	8006306 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	22ff      	movs	r2, #255	; 0xff
 80062f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2204      	movs	r2, #4
 80062f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e00c      	b.n	8006320 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	22ff      	movs	r2, #255	; 0xff
 800630c:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800631e:	2300      	movs	r3, #0
  }
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	bd90      	pop	{r4, r7, pc}

08006328 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006356:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800635a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	0c1b      	lsrs	r3, r3, #16
 8006360:	b2db      	uxtb	r3, r3
 8006362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006366:	b2da      	uxtb	r2, r3
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	0a1b      	lsrs	r3, r3, #8
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006376:	b2da      	uxtb	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	0c1b      	lsrs	r3, r3, #16
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d11a      	bne.n	80063d6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f990 	bl	80066ca <RTC_Bcd2ToByte>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 f987 	bl	80066ca <RTC_Bcd2ToByte>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	789b      	ldrb	r3, [r3, #2]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f97e 	bl	80066ca <RTC_Bcd2ToByte>
 80063ce:	4603      	mov	r3, r0
 80063d0:	461a      	mov	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063e0:	b590      	push	{r4, r7, lr}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_RTC_SetDate+0x1a>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e09c      	b.n	8006534 <HAL_RTC_SetDate+0x154>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10e      	bne.n	800642e <HAL_RTC_SetDate+0x4e>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	785b      	ldrb	r3, [r3, #1]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	785b      	ldrb	r3, [r3, #1]
 8006420:	f023 0310 	bic.w	r3, r3, #16
 8006424:	b2db      	uxtb	r3, r3
 8006426:	330a      	adds	r3, #10
 8006428:	b2da      	uxtb	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d11c      	bne.n	800646e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	78db      	ldrb	r3, [r3, #3]
 8006438:	4618      	mov	r0, r3
 800643a:	f000 f926 	bl	800668a <RTC_ByteToBcd2>
 800643e:	4603      	mov	r3, r0
 8006440:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	785b      	ldrb	r3, [r3, #1]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f91f 	bl	800668a <RTC_ByteToBcd2>
 800644c:	4603      	mov	r3, r0
 800644e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006450:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	789b      	ldrb	r3, [r3, #2]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f917 	bl	800668a <RTC_ByteToBcd2>
 800645c:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800645e:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006468:	4313      	orrs	r3, r2
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	e00e      	b.n	800648c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	78db      	ldrb	r3, [r3, #3]
 8006472:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800647a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006480:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	22ca      	movs	r2, #202	; 0xca
 8006492:	625a      	str	r2, [r3, #36]	; 0x24
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2253      	movs	r2, #83	; 0x53
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 f8ca 	bl	8006636 <RTC_EnterInitMode>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00d      	beq.n	80064c4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	22ff      	movs	r2, #255	; 0xff
 80064ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2204      	movs	r2, #4
 80064b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e037      	b.n	8006534 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064d2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68da      	ldr	r2, [r3, #12]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0320 	and.w	r3, r3, #32
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d113      	bne.n	800651a <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f000 f879 	bl	80065ea <HAL_RTC_WaitForSynchro>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00d      	beq.n	800651a <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	22ff      	movs	r2, #255	; 0xff
 8006504:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2204      	movs	r2, #4
 800650a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e00c      	b.n	8006534 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	22ff      	movs	r2, #255	; 0xff
 8006520:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006532:	2300      	movs	r3, #0
  }
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	bd90      	pop	{r4, r7, pc}

0800653c <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006552:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006556:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	b2da      	uxtb	r2, r3
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	0a1b      	lsrs	r3, r3, #8
 8006566:	b2db      	uxtb	r3, r3
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	b2da      	uxtb	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800657a:	b2da      	uxtb	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	0b5b      	lsrs	r3, r3, #13
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	b2da      	uxtb	r2, r3
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d11a      	bne.n	80065cc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	78db      	ldrb	r3, [r3, #3]
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f895 	bl	80066ca <RTC_Bcd2ToByte>
 80065a0:	4603      	mov	r3, r0
 80065a2:	461a      	mov	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	785b      	ldrb	r3, [r3, #1]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 f88c 	bl	80066ca <RTC_Bcd2ToByte>
 80065b2:	4603      	mov	r3, r0
 80065b4:	461a      	mov	r2, r3
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	789b      	ldrb	r3, [r3, #2]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 f883 	bl	80066ca <RTC_Bcd2ToByte>
 80065c4:	4603      	mov	r3, r0
 80065c6:	461a      	mov	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3718      	adds	r7, #24
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b083      	sub	sp, #12
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006600:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006602:	f7fd f8b7 	bl	8003774 <HAL_GetTick>
 8006606:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006608:	e009      	b.n	800661e <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800660a:	f7fd f8b3 	bl	8003774 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006618:	d901      	bls.n	800661e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e007      	b.n	800662e <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0320 	and.w	r3, r3, #32
 8006628:	2b00      	cmp	r3, #0
 800662a:	d0ee      	beq.n	800660a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006648:	2b00      	cmp	r3, #0
 800664a:	d119      	bne.n	8006680 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f04f 32ff 	mov.w	r2, #4294967295
 8006654:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006656:	f7fd f88d 	bl	8003774 <HAL_GetTick>
 800665a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800665c:	e009      	b.n	8006672 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800665e:	f7fd f889 	bl	8003774 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800666c:	d901      	bls.n	8006672 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e007      	b.n	8006682 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0ee      	beq.n	800665e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	4603      	mov	r3, r0
 8006692:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800669c:	e005      	b.n	80066aa <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3301      	adds	r3, #1
 80066a2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	3b0a      	subs	r3, #10
 80066a8:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 80066aa:	7afb      	ldrb	r3, [r7, #11]
 80066ac:	2b09      	cmp	r3, #9
 80066ae:	d8f6      	bhi.n	800669e <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	011b      	lsls	r3, r3, #4
 80066b6:	b2da      	uxtb	r2, r3
 80066b8:	7afb      	ldrb	r3, [r7, #11]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b2db      	uxtb	r3, r3
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	4603      	mov	r3, r0
 80066d2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	091b      	lsrs	r3, r3, #4
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	b2da      	uxtb	r2, r3
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	4413      	add	r3, r2
 80066f4:	b2db      	uxtb	r3, r3
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 800670a:	bf00      	nop
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 800671e:	bf00      	nop
 8006720:	370c      	adds	r7, #12
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr

0800672a <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr

08006752 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b086      	sub	sp, #24
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d101      	bne.n	800676c <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006768:	2302      	movs	r3, #2
 800676a:	e089      	b.n	8006880 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2202      	movs	r2, #2
 8006778:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	22ca      	movs	r2, #202	; 0xca
 8006782:	625a      	str	r2, [r3, #36]	; 0x24
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2253      	movs	r2, #83	; 0x53
 800678a:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	2b00      	cmp	r3, #0
 8006798:	d020      	beq.n	80067dc <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 800679a:	f7fc ffeb 	bl	8003774 <HAL_GetTick>
 800679e:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80067a0:	e015      	b.n	80067ce <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067a2:	f7fc ffe7 	bl	8003774 <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067b0:	d90d      	bls.n	80067ce <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	22ff      	movs	r2, #255	; 0xff
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2203      	movs	r2, #3
 80067be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 80067ca:	2303      	movs	r3, #3
 80067cc:	e058      	b.n	8006880 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1e2      	bne.n	80067a2 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067ea:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80067ec:	f7fc ffc2 	bl	8003774 <HAL_GetTick>
 80067f0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80067f2:	e015      	b.n	8006820 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80067f4:	f7fc ffbe 	bl	8003774 <HAL_GetTick>
 80067f8:	4602      	mov	r2, r0
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006802:	d90d      	bls.n	8006820 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	22ff      	movs	r2, #255	; 0xff
 800680a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2203      	movs	r2, #3
 8006810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e02f      	b.n	8006880 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0e2      	beq.n	80067f4 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0207 	bic.w	r2, r2, #7
 800683c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6899      	ldr	r1, [r3, #8]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	430a      	orrs	r2, r1
 800684c:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006864:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	22ff      	movs	r2, #255	; 0xff
 800686c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3350      	adds	r3, #80	; 0x50
 80068ae:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4413      	add	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	601a      	str	r2, [r3, #0]
}
 80068c0:	bf00      	nop
 80068c2:	371c      	adds	r7, #28
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3350      	adds	r3, #80	; 0x50
 80068dc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_RTCEx_EnableBypassShadow+0x16>
 800690a:	2302      	movs	r3, #2
 800690c:	e024      	b.n	8006958 <HAL_RTCEx_EnableBypassShadow+0x60>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	22ca      	movs	r2, #202	; 0xca
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2253      	movs	r2, #83	; 0x53
 800692c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0220 	orr.w	r2, r2, #32
 800693c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	22ff      	movs	r2, #255	; 0xff
 8006944:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e095      	b.n	8006ab6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d108      	bne.n	80069a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800699a:	d009      	beq.n	80069b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	61da      	str	r2, [r3, #28]
 80069a2:	e005      	b.n	80069b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fb fc26 	bl	800221c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069f0:	d902      	bls.n	80069f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80069f2:	2300      	movs	r3, #0
 80069f4:	60fb      	str	r3, [r7, #12]
 80069f6:	e002      	b.n	80069fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80069f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a06:	d007      	beq.n	8006a18 <HAL_SPI_Init+0xa0>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a10:	d002      	beq.n	8006a18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	431a      	orrs	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a50:	431a      	orrs	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5a:	ea42 0103 	orr.w	r1, r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	f003 0204 	and.w	r2, r3, #4
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	f003 0310 	and.w	r3, r3, #16
 8006a80:	431a      	orrs	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a94:	ea42 0103 	orr.w	r1, r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	69db      	ldr	r3, [r3, #28]
 8006ace:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d118      	bne.n	8006b22 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d013      	beq.n	8006b22 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f003 0320 	and.w	r3, r3, #32
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d104      	bne.n	8006b0e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f000 81fb 	beq.w	8006f0e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	4798      	blx	r3
      }
      return;
 8006b20:	e1f5      	b.n	8006f0e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80ef 	beq.w	8006d08 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4b73      	ldr	r3, [pc, #460]	; (8006cfc <HAL_UART_IRQHandler+0x23c>)
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d105      	bne.n	8006b40 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	4b72      	ldr	r3, [pc, #456]	; (8006d00 <HAL_UART_IRQHandler+0x240>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f000 80e4 	beq.w	8006d08 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d010      	beq.n	8006b6c <HAL_UART_IRQHandler+0xac>
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2201      	movs	r2, #1
 8006b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b62:	f043 0201 	orr.w	r2, r3, #1
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d010      	beq.n	8006b98 <HAL_UART_IRQHandler+0xd8>
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00b      	beq.n	8006b98 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2202      	movs	r2, #2
 8006b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8e:	f043 0204 	orr.w	r2, r3, #4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f003 0304 	and.w	r3, r3, #4
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d010      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x104>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00b      	beq.n	8006bc4 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2204      	movs	r2, #4
 8006bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bba:	f043 0202 	orr.w	r2, r3, #2
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d015      	beq.n	8006bfa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4b48      	ldr	r3, [pc, #288]	; (8006cfc <HAL_UART_IRQHandler+0x23c>)
 8006bdc:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00b      	beq.n	8006bfa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2208      	movs	r2, #8
 8006be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bf0:	f043 0208 	orr.w	r2, r3, #8
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d011      	beq.n	8006c28 <HAL_UART_IRQHandler+0x168>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00c      	beq.n	8006c28 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c1e:	f043 0220 	orr.w	r2, r3, #32
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 816f 	beq.w	8006f12 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	f003 0320 	and.w	r3, r3, #32
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d011      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d007      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d003      	beq.n	8006c62 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c68:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d004      	beq.n	8006c82 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d031      	beq.n	8006ce6 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f966 	bl	8006f54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d123      	bne.n	8006cde <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689a      	ldr	r2, [r3, #8]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d013      	beq.n	8006cd6 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb2:	4a14      	ldr	r2, [pc, #80]	; (8006d04 <HAL_UART_IRQHandler+0x244>)
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fc ffa8 	bl	8003c10 <HAL_DMA_Abort_IT>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006cd0:	4610      	mov	r0, r2
 8006cd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd4:	e00f      	b.n	8006cf6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f926 	bl	8006f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cdc:	e00b      	b.n	8006cf6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f922 	bl	8006f28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce4:	e007      	b.n	8006cf6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f91e 	bl	8006f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006cf4:	e10d      	b.n	8006f12 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf6:	bf00      	nop
    return;
 8006cf8:	e10b      	b.n	8006f12 <HAL_UART_IRQHandler+0x452>
 8006cfa:	bf00      	nop
 8006cfc:	10000001 	.word	0x10000001
 8006d00:	04000120 	.word	0x04000120
 8006d04:	08006fb9 	.word	0x08006fb9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	f040 80ab 	bne.w	8006e68 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f003 0310 	and.w	r3, r3, #16
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80a5 	beq.w	8006e68 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f000 809f 	beq.w	8006e68 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2210      	movs	r2, #16
 8006d30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d155      	bne.n	8006dec <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006d4a:	893b      	ldrh	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80e2 	beq.w	8006f16 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d58:	893a      	ldrh	r2, [r7, #8]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	f080 80db 	bcs.w	8006f16 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	893a      	ldrh	r2, [r7, #8]
 8006d64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0320 	and.w	r3, r3, #32
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d12b      	bne.n	8006dd0 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d86:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689a      	ldr	r2, [r3, #8]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f022 0201 	bic.w	r2, r2, #1
 8006d96:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	689a      	ldr	r2, [r3, #8]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006da6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f022 0210 	bic.w	r2, r2, #16
 8006dc4:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fc fec1 	bl	8003b52 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	4619      	mov	r1, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f8a9 	bl	8006f3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006dea:	e094      	b.n	8006f16 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8087 	beq.w	8006f1a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8006e0c:	897b      	ldrh	r3, [r7, #10]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8083 	beq.w	8006f1a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e22:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	6812      	ldr	r2, [r2, #0]
 8006e2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e32:	f023 0301 	bic.w	r3, r3, #1
 8006e36:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2200      	movs	r2, #0
 8006e44:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0210 	bic.w	r2, r2, #16
 8006e5a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e5c:	897b      	ldrh	r3, [r7, #10]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f86b 	bl	8006f3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006e66:	e058      	b.n	8006f1a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00d      	beq.n	8006e8e <HAL_UART_IRQHandler+0x3ce>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d008      	beq.n	8006e8e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006e84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 f8c6 	bl	8007018 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e8c:	e048      	b.n	8006f20 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d012      	beq.n	8006ebe <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d104      	bne.n	8006eac <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d034      	beq.n	8006f1e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
    }
    return;
 8006ebc:	e02f      	b.n	8006f1e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d008      	beq.n	8006eda <HAL_UART_IRQHandler+0x41a>
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f886 	bl	8006fe4 <UART_EndTransmit_IT>
    return;
 8006ed8:	e022      	b.n	8006f20 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x436>
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d003      	beq.n	8006ef6 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f8a6 	bl	8007040 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ef4:	e014      	b.n	8006f20 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00f      	beq.n	8006f20 <HAL_UART_IRQHandler+0x460>
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da0c      	bge.n	8006f20 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f890 	bl	800702c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006f0c:	e008      	b.n	8006f20 <HAL_UART_IRQHandler+0x460>
      return;
 8006f0e:	bf00      	nop
 8006f10:	e006      	b.n	8006f20 <HAL_UART_IRQHandler+0x460>
    return;
 8006f12:	bf00      	nop
 8006f14:	e004      	b.n	8006f20 <HAL_UART_IRQHandler+0x460>
      return;
 8006f16:	bf00      	nop
 8006f18:	e002      	b.n	8006f20 <HAL_UART_IRQHandler+0x460>
      return;
 8006f1a:	bf00      	nop
 8006f1c:	e000      	b.n	8006f20 <HAL_UART_IRQHandler+0x460>
    return;
 8006f1e:	bf00      	nop
  }
}
 8006f20:	3720      	adds	r7, #32
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop

08006f28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006f6a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	f023 0301 	bic.w	r3, r3, #1
 8006f7e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d107      	bne.n	8006f98 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0210 	bic.w	r2, r2, #16
 8006f96:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006fac:	bf00      	nop
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f7ff ffa6 	bl	8006f28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fdc:	bf00      	nop
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ffa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fa fa56 	bl	80014bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007010:	bf00      	nop
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b088      	sub	sp, #32
 8007058:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800705e:	f107 0308 	add.w	r3, r7, #8
 8007062:	2218      	movs	r2, #24
 8007064:	2100      	movs	r1, #0
 8007066:	4618      	mov	r0, r3
 8007068:	f001 fa00 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 800706c:	233f      	movs	r3, #63	; 0x3f
 800706e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8007070:	2381      	movs	r3, #129	; 0x81
 8007072:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007074:	1dfb      	adds	r3, r7, #7
 8007076:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007078:	2301      	movs	r3, #1
 800707a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800707c:	f107 0308 	add.w	r3, r7, #8
 8007080:	2100      	movs	r1, #0
 8007082:	4618      	mov	r0, r3
 8007084:	f001 f8b6 	bl	80081f4 <hci_send_req>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	da01      	bge.n	8007092 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800708e:	23ff      	movs	r3, #255	; 0xff
 8007090:	e000      	b.n	8007094 <aci_gap_set_non_discoverable+0x40>
  return status;
 8007092:	79fb      	ldrb	r3, [r7, #7]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3720      	adds	r7, #32
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800709c:	b5b0      	push	{r4, r5, r7, lr}
 800709e:	b0ce      	sub	sp, #312	; 0x138
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	4605      	mov	r5, r0
 80070a4:	460c      	mov	r4, r1
 80070a6:	4610      	mov	r0, r2
 80070a8:	4619      	mov	r1, r3
 80070aa:	1dfb      	adds	r3, r7, #7
 80070ac:	462a      	mov	r2, r5
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	1d3b      	adds	r3, r7, #4
 80070b2:	4622      	mov	r2, r4
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	1cbb      	adds	r3, r7, #2
 80070b8:	4602      	mov	r2, r0
 80070ba:	801a      	strh	r2, [r3, #0]
 80070bc:	1dbb      	adds	r3, r7, #6
 80070be:	460a      	mov	r2, r1
 80070c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80070c2:	f107 0310 	add.w	r3, r7, #16
 80070c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80070ca:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80070ce:	3308      	adds	r3, #8
 80070d0:	f107 0210 	add.w	r2, r7, #16
 80070d4:	4413      	add	r3, r2
 80070d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80070da:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80070de:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80070e2:	4413      	add	r3, r2
 80070e4:	3309      	adds	r3, #9
 80070e6:	f107 0210 	add.w	r2, r7, #16
 80070ea:	4413      	add	r3, r2
 80070ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80070f0:	f107 030f 	add.w	r3, r7, #15
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070f8:	2300      	movs	r3, #0
 80070fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80070fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007102:	1dfa      	adds	r2, r7, #7
 8007104:	7812      	ldrb	r2, [r2, #0]
 8007106:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007108:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800710c:	3301      	adds	r3, #1
 800710e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007112:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007116:	1d3a      	adds	r2, r7, #4
 8007118:	8812      	ldrh	r2, [r2, #0]
 800711a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800711e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007122:	3302      	adds	r3, #2
 8007124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007128:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800712c:	1cba      	adds	r2, r7, #2
 800712e:	8812      	ldrh	r2, [r2, #0]
 8007130:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007138:	3302      	adds	r3, #2
 800713a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800713e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007142:	1dba      	adds	r2, r7, #6
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007148:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800714c:	3301      	adds	r3, #1
 800714e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007152:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007156:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800715a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800715c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007160:	3301      	adds	r3, #1
 8007162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007166:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800716a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800716e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007174:	3301      	adds	r3, #1
 8007176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800717a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800717e:	3308      	adds	r3, #8
 8007180:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007184:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007188:	4618      	mov	r0, r3
 800718a:	f001 f95f 	bl	800844c <Osal_MemCpy>
    index_input += Local_Name_Length;
 800718e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007192:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007196:	4413      	add	r3, r2
 8007198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800719c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071a0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80071a4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80071a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071aa:	3301      	adds	r3, #1
 80071ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80071b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80071b4:	3301      	adds	r3, #1
 80071b6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80071ba:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 f944 	bl	800844c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80071c4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80071c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80071cc:	4413      	add	r3, r2
 80071ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d6:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80071da:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80071dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071e0:	3302      	adds	r3, #2
 80071e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 80071e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ea:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80071ee:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80071f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071f4:	3302      	adds	r3, #2
 80071f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071fe:	2218      	movs	r2, #24
 8007200:	2100      	movs	r1, #0
 8007202:	4618      	mov	r0, r3
 8007204:	f001 f932 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007208:	233f      	movs	r3, #63	; 0x3f
 800720a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800720e:	2383      	movs	r3, #131	; 0x83
 8007210:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007214:	f107 0310 	add.w	r3, r7, #16
 8007218:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800721c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007220:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007224:	f107 030f 	add.w	r3, r7, #15
 8007228:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800722c:	2301      	movs	r3, #1
 800722e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007232:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f000 ffdb 	bl	80081f4 <hci_send_req>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	da01      	bge.n	8007248 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007244:	23ff      	movs	r3, #255	; 0xff
 8007246:	e002      	b.n	800724e <aci_gap_set_discoverable+0x1b2>
  return status;
 8007248:	f107 030f 	add.w	r3, r7, #15
 800724c:	781b      	ldrb	r3, [r3, #0]
}
 800724e:	4618      	mov	r0, r3
 8007250:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007254:	46bd      	mov	sp, r7
 8007256:	bdb0      	pop	{r4, r5, r7, pc}

08007258 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b0cc      	sub	sp, #304	; 0x130
 800725c:	af00      	add	r7, sp, #0
 800725e:	4602      	mov	r2, r0
 8007260:	1dfb      	adds	r3, r7, #7
 8007262:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007264:	f107 0310 	add.w	r3, r7, #16
 8007268:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800726c:	f107 030f 	add.w	r3, r7, #15
 8007270:	2200      	movs	r2, #0
 8007272:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007274:	2300      	movs	r3, #0
 8007276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800727a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800727e:	1dfa      	adds	r2, r7, #7
 8007280:	7812      	ldrb	r2, [r2, #0]
 8007282:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007284:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007288:	3301      	adds	r3, #1
 800728a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800728e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007292:	2218      	movs	r2, #24
 8007294:	2100      	movs	r1, #0
 8007296:	4618      	mov	r0, r3
 8007298:	f001 f8e8 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 800729c:	233f      	movs	r3, #63	; 0x3f
 800729e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80072a2:	2385      	movs	r3, #133	; 0x85
 80072a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80072a8:	f107 0310 	add.w	r3, r7, #16
 80072ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80072b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80072b8:	f107 030f 	add.w	r3, r7, #15
 80072bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80072c0:	2301      	movs	r3, #1
 80072c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80072c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80072ca:	2100      	movs	r1, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f000 ff91 	bl	80081f4 <hci_send_req>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da01      	bge.n	80072dc <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 80072d8:	23ff      	movs	r3, #255	; 0xff
 80072da:	e002      	b.n	80072e2 <aci_gap_set_io_capability+0x8a>
  return status;
 80072dc:	f107 030f 	add.w	r3, r7, #15
 80072e0:	781b      	ldrb	r3, [r3, #0]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80072ec:	b5b0      	push	{r4, r5, r7, lr}
 80072ee:	b0cc      	sub	sp, #304	; 0x130
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4605      	mov	r5, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	4610      	mov	r0, r2
 80072f8:	4619      	mov	r1, r3
 80072fa:	1dfb      	adds	r3, r7, #7
 80072fc:	462a      	mov	r2, r5
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	1dbb      	adds	r3, r7, #6
 8007302:	4622      	mov	r2, r4
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	1d7b      	adds	r3, r7, #5
 8007308:	4602      	mov	r2, r0
 800730a:	701a      	strb	r2, [r3, #0]
 800730c:	1d3b      	adds	r3, r7, #4
 800730e:	460a      	mov	r2, r1
 8007310:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007312:	f107 0310 	add.w	r3, r7, #16
 8007316:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800731a:	f107 030f 	add.w	r3, r7, #15
 800731e:	2200      	movs	r2, #0
 8007320:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732c:	1dfa      	adds	r2, r7, #7
 800732e:	7812      	ldrb	r2, [r2, #0]
 8007330:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007332:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007336:	3301      	adds	r3, #1
 8007338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800733c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007340:	1dba      	adds	r2, r7, #6
 8007342:	7812      	ldrb	r2, [r2, #0]
 8007344:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007346:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800734a:	3301      	adds	r3, #1
 800734c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007354:	1d7a      	adds	r2, r7, #5
 8007356:	7812      	ldrb	r2, [r2, #0]
 8007358:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800735a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800735e:	3301      	adds	r3, #1
 8007360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007368:	1d3a      	adds	r2, r7, #4
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800736e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007372:	3301      	adds	r3, #1
 8007374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8007378:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800737c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8007380:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007382:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007386:	3301      	adds	r3, #1
 8007388:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800738c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007390:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8007394:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007396:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800739a:	3301      	adds	r3, #1
 800739c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80073a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80073a8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80073aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ae:	3301      	adds	r3, #1
 80073b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80073b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80073bc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80073c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073c4:	3304      	adds	r3, #4
 80073c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80073ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ce:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80073d2:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80073d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073d8:	3301      	adds	r3, #1
 80073da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80073de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80073e2:	2218      	movs	r2, #24
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 f840 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 80073ec:	233f      	movs	r3, #63	; 0x3f
 80073ee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80073f2:	2386      	movs	r3, #134	; 0x86
 80073f4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80073f8:	f107 0310 	add.w	r3, r7, #16
 80073fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007404:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007408:	f107 030f 	add.w	r3, r7, #15
 800740c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007410:	2301      	movs	r3, #1
 8007412:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007416:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f000 fee9 	bl	80081f4 <hci_send_req>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	da01      	bge.n	800742c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007428:	23ff      	movs	r3, #255	; 0xff
 800742a:	e002      	b.n	8007432 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800742c:	f107 030f 	add.w	r3, r7, #15
 8007430:	781b      	ldrb	r3, [r3, #0]
}
 8007432:	4618      	mov	r0, r3
 8007434:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007438:	46bd      	mov	sp, r7
 800743a:	bdb0      	pop	{r4, r5, r7, pc}

0800743c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800743c:	b590      	push	{r4, r7, lr}
 800743e:	b0cd      	sub	sp, #308	; 0x134
 8007440:	af00      	add	r7, sp, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	4611      	mov	r1, r2
 8007448:	463a      	mov	r2, r7
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	1dfb      	adds	r3, r7, #7
 800744e:	4622      	mov	r2, r4
 8007450:	701a      	strb	r2, [r3, #0]
 8007452:	1dbb      	adds	r3, r7, #6
 8007454:	4602      	mov	r2, r0
 8007456:	701a      	strb	r2, [r3, #0]
 8007458:	1d7b      	adds	r3, r7, #5
 800745a:	460a      	mov	r2, r1
 800745c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800745e:	f107 0310 	add.w	r3, r7, #16
 8007462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007466:	f107 0308 	add.w	r3, r7, #8
 800746a:	2207      	movs	r2, #7
 800746c:	2100      	movs	r1, #0
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fffc 	bl	800846c <Osal_MemSet>
  int index_input = 0;
 8007474:	2300      	movs	r3, #0
 8007476:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800747a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747e:	1dfa      	adds	r2, r7, #7
 8007480:	7812      	ldrb	r2, [r2, #0]
 8007482:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007484:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007488:	3301      	adds	r3, #1
 800748a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800748e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007492:	1dba      	adds	r2, r7, #6
 8007494:	7812      	ldrb	r2, [r2, #0]
 8007496:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007498:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800749c:	3301      	adds	r3, #1
 800749e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80074a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a6:	1d7a      	adds	r2, r7, #5
 80074a8:	7812      	ldrb	r2, [r2, #0]
 80074aa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80074ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074b0:	3301      	adds	r3, #1
 80074b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074ba:	2218      	movs	r2, #24
 80074bc:	2100      	movs	r1, #0
 80074be:	4618      	mov	r0, r3
 80074c0:	f000 ffd4 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 80074c4:	233f      	movs	r3, #63	; 0x3f
 80074c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80074ca:	238a      	movs	r3, #138	; 0x8a
 80074cc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074d0:	f107 0310 	add.w	r3, r7, #16
 80074d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80074e0:	f107 0308 	add.w	r3, r7, #8
 80074e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80074e8:	2307      	movs	r3, #7
 80074ea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074f2:	2100      	movs	r1, #0
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fe7d 	bl	80081f4 <hci_send_req>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da01      	bge.n	8007504 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007500:	23ff      	movs	r3, #255	; 0xff
 8007502:	e021      	b.n	8007548 <aci_gap_init+0x10c>
  if ( resp.Status )
 8007504:	f107 0308 	add.w	r3, r7, #8
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <aci_gap_init+0xda>
    return resp.Status;
 800750e:	f107 0308 	add.w	r3, r7, #8
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	e018      	b.n	8007548 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800751e:	b29a      	uxth	r2, r3
 8007520:	463b      	mov	r3, r7
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007526:	f107 0308 	add.w	r3, r7, #8
 800752a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800752e:	b29a      	uxth	r2, r3
 8007530:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007534:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007536:	f107 0308 	add.w	r3, r7, #8
 800753a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800753e:	b29a      	uxth	r2, r3
 8007540:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007544:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800754e:	46bd      	mov	sp, r7
 8007550:	bd90      	pop	{r4, r7, pc}

08007552 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b0cc      	sub	sp, #304	; 0x130
 8007556:	af00      	add	r7, sp, #0
 8007558:	4602      	mov	r2, r0
 800755a:	463b      	mov	r3, r7
 800755c:	6019      	str	r1, [r3, #0]
 800755e:	1dfb      	adds	r3, r7, #7
 8007560:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007562:	f107 0310 	add.w	r3, r7, #16
 8007566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800756a:	f107 030f 	add.w	r3, r7, #15
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007572:	2300      	movs	r3, #0
 8007574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800757c:	1dfa      	adds	r2, r7, #7
 800757e:	7812      	ldrb	r2, [r2, #0]
 8007580:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007582:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007586:	3301      	adds	r3, #1
 8007588:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800758c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007590:	1c58      	adds	r0, r3, #1
 8007592:	1dfb      	adds	r3, r7, #7
 8007594:	781a      	ldrb	r2, [r3, #0]
 8007596:	463b      	mov	r3, r7
 8007598:	6819      	ldr	r1, [r3, #0]
 800759a:	f000 ff57 	bl	800844c <Osal_MemCpy>
  index_input += AdvDataLen;
 800759e:	1dfb      	adds	r3, r7, #7
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80075a6:	4413      	add	r3, r2
 80075a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075b0:	2218      	movs	r2, #24
 80075b2:	2100      	movs	r1, #0
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 ff59 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 80075ba:	233f      	movs	r3, #63	; 0x3f
 80075bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80075c0:	238e      	movs	r3, #142	; 0x8e
 80075c2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075c6:	f107 0310 	add.w	r3, r7, #16
 80075ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80075d6:	f107 030f 	add.w	r3, r7, #15
 80075da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80075de:	2301      	movs	r3, #1
 80075e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075e8:	2100      	movs	r1, #0
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fe02 	bl	80081f4 <hci_send_req>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da01      	bge.n	80075fa <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80075f6:	23ff      	movs	r3, #255	; 0xff
 80075f8:	e002      	b.n	8007600 <aci_gap_update_adv_data+0xae>
  return status;
 80075fa:	f107 030f 	add.w	r3, r7, #15
 80075fe:	781b      	ldrb	r3, [r3, #0]
}
 8007600:	4618      	mov	r0, r3
 8007602:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b088      	sub	sp, #32
 800760e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007614:	f107 0308 	add.w	r3, r7, #8
 8007618:	2218      	movs	r2, #24
 800761a:	2100      	movs	r1, #0
 800761c:	4618      	mov	r0, r3
 800761e:	f000 ff25 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007622:	233f      	movs	r3, #63	; 0x3f
 8007624:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007626:	2392      	movs	r3, #146	; 0x92
 8007628:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800762a:	1dfb      	adds	r3, r7, #7
 800762c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800762e:	2301      	movs	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007632:	f107 0308 	add.w	r3, r7, #8
 8007636:	2100      	movs	r1, #0
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fddb 	bl	80081f4 <hci_send_req>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	da01      	bge.n	8007648 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007644:	23ff      	movs	r3, #255	; 0xff
 8007646:	e000      	b.n	800764a <aci_gap_configure_whitelist+0x40>
  return status;
 8007648:	79fb      	ldrb	r3, [r7, #7]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3720      	adds	r7, #32
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b0cc      	sub	sp, #304	; 0x130
 8007656:	af00      	add	r7, sp, #0
 8007658:	4602      	mov	r2, r0
 800765a:	1dbb      	adds	r3, r7, #6
 800765c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800765e:	f107 0310 	add.w	r3, r7, #16
 8007662:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007666:	f107 030f 	add.w	r3, r7, #15
 800766a:	2200      	movs	r2, #0
 800766c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007678:	1dba      	adds	r2, r7, #6
 800767a:	8812      	ldrh	r2, [r2, #0]
 800767c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800767e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007682:	3302      	adds	r3, #2
 8007684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800768c:	2218      	movs	r2, #24
 800768e:	2100      	movs	r1, #0
 8007690:	4618      	mov	r0, r3
 8007692:	f000 feeb 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007696:	233f      	movs	r3, #63	; 0x3f
 8007698:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800769c:	2395      	movs	r3, #149	; 0x95
 800769e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076a2:	f107 0310 	add.w	r3, r7, #16
 80076a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076b2:	f107 030f 	add.w	r3, r7, #15
 80076b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076ba:	2301      	movs	r3, #1
 80076bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076c4:	2100      	movs	r1, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 fd94 	bl	80081f4 <hci_send_req>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	da01      	bge.n	80076d6 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 80076d2:	23ff      	movs	r3, #255	; 0xff
 80076d4:	e002      	b.n	80076dc <aci_gap_allow_rebond+0x8a>
  return status;
 80076d6:	f107 030f 	add.w	r3, r7, #15
 80076da:	781b      	ldrb	r3, [r3, #0]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b0cc      	sub	sp, #304	; 0x130
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	4602      	mov	r2, r0
 80076ee:	1dbb      	adds	r3, r7, #6
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	1d7b      	adds	r3, r7, #5
 80076f4:	460a      	mov	r2, r1
 80076f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80076f8:	f107 0310 	add.w	r3, r7, #16
 80076fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007700:	f107 030f 	add.w	r3, r7, #15
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800770e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007712:	1dba      	adds	r2, r7, #6
 8007714:	8812      	ldrh	r2, [r2, #0]
 8007716:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800771c:	3302      	adds	r3, #2
 800771e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007726:	1d7a      	adds	r2, r7, #5
 8007728:	7812      	ldrb	r2, [r2, #0]
 800772a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800772c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007730:	3301      	adds	r3, #1
 8007732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007736:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800773a:	2218      	movs	r2, #24
 800773c:	2100      	movs	r1, #0
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fe94 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007744:	233f      	movs	r3, #63	; 0x3f
 8007746:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800774a:	23a5      	movs	r3, #165	; 0xa5
 800774c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007750:	f107 0310 	add.w	r3, r7, #16
 8007754:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007758:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800775c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007760:	f107 030f 	add.w	r3, r7, #15
 8007764:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007768:	2301      	movs	r3, #1
 800776a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800776e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007772:	2100      	movs	r1, #0
 8007774:	4618      	mov	r0, r3
 8007776:	f000 fd3d 	bl	80081f4 <hci_send_req>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	da01      	bge.n	8007784 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007780:	23ff      	movs	r3, #255	; 0xff
 8007782:	e002      	b.n	800778a <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8007784:	f107 030f 	add.w	r3, r7, #15
 8007788:	781b      	ldrb	r3, [r3, #0]
}
 800778a:	4618      	mov	r0, r3
 800778c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800779e:	f107 0308 	add.w	r3, r7, #8
 80077a2:	2218      	movs	r2, #24
 80077a4:	2100      	movs	r1, #0
 80077a6:	4618      	mov	r0, r3
 80077a8:	f000 fe60 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 80077ac:	233f      	movs	r3, #63	; 0x3f
 80077ae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80077b0:	f240 1301 	movw	r3, #257	; 0x101
 80077b4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80077b6:	1dfb      	adds	r3, r7, #7
 80077b8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80077ba:	2301      	movs	r3, #1
 80077bc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077be:	f107 0308 	add.w	r3, r7, #8
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fd15 	bl	80081f4 <hci_send_req>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da01      	bge.n	80077d4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80077d0:	23ff      	movs	r3, #255	; 0xff
 80077d2:	e000      	b.n	80077d6 <aci_gatt_init+0x42>
  return status;
 80077d4:	79fb      	ldrb	r3, [r7, #7]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3720      	adds	r7, #32
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80077de:	b590      	push	{r4, r7, lr}
 80077e0:	b0cf      	sub	sp, #316	; 0x13c
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	4604      	mov	r4, r0
 80077e6:	4638      	mov	r0, r7
 80077e8:	6001      	str	r1, [r0, #0]
 80077ea:	4610      	mov	r0, r2
 80077ec:	4619      	mov	r1, r3
 80077ee:	1dfb      	adds	r3, r7, #7
 80077f0:	4622      	mov	r2, r4
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	1dbb      	adds	r3, r7, #6
 80077f6:	4602      	mov	r2, r0
 80077f8:	701a      	strb	r2, [r3, #0]
 80077fa:	1d7b      	adds	r3, r7, #5
 80077fc:	460a      	mov	r2, r1
 80077fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007800:	f107 0310 	add.w	r3, r7, #16
 8007804:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007808:	1dfb      	adds	r3, r7, #7
 800780a:	781b      	ldrb	r3, [r3, #0]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d007      	beq.n	8007820 <aci_gatt_add_service+0x42>
 8007810:	1dfb      	adds	r3, r7, #7
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d101      	bne.n	800781c <aci_gatt_add_service+0x3e>
 8007818:	2311      	movs	r3, #17
 800781a:	e002      	b.n	8007822 <aci_gatt_add_service+0x44>
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <aci_gatt_add_service+0x44>
 8007820:	2303      	movs	r3, #3
 8007822:	f107 0210 	add.w	r2, r7, #16
 8007826:	4413      	add	r3, r2
 8007828:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800782c:	f107 030c 	add.w	r3, r7, #12
 8007830:	2203      	movs	r2, #3
 8007832:	2100      	movs	r1, #0
 8007834:	4618      	mov	r0, r3
 8007836:	f000 fe19 	bl	800846c <Osal_MemSet>
  int index_input = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007840:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007844:	1dfa      	adds	r2, r7, #7
 8007846:	7812      	ldrb	r2, [r2, #0]
 8007848:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800784a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800784e:	3301      	adds	r3, #1
 8007850:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007854:	1dfb      	adds	r3, r7, #7
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d002      	beq.n	8007862 <aci_gatt_add_service+0x84>
 800785c:	2b02      	cmp	r3, #2
 800785e:	d004      	beq.n	800786a <aci_gatt_add_service+0x8c>
 8007860:	e007      	b.n	8007872 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007862:	2302      	movs	r3, #2
 8007864:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007868:	e005      	b.n	8007876 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800786a:	2310      	movs	r3, #16
 800786c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007870:	e001      	b.n	8007876 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007872:	2347      	movs	r3, #71	; 0x47
 8007874:	e05d      	b.n	8007932 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007876:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800787a:	1c58      	adds	r0, r3, #1
 800787c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007880:	463b      	mov	r3, r7
 8007882:	6819      	ldr	r1, [r3, #0]
 8007884:	f000 fde2 	bl	800844c <Osal_MemCpy>
    index_input += size;
 8007888:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800788c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007890:	4413      	add	r3, r2
 8007892:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789a:	1dba      	adds	r2, r7, #6
 800789c:	7812      	ldrb	r2, [r2, #0]
 800789e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80078a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a4:	3301      	adds	r3, #1
 80078a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80078aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ae:	1d7a      	adds	r2, r7, #5
 80078b0:	7812      	ldrb	r2, [r2, #0]
 80078b2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80078b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078b8:	3301      	adds	r3, #1
 80078ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80078be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078c2:	2218      	movs	r2, #24
 80078c4:	2100      	movs	r1, #0
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fdd0 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 80078cc:	233f      	movs	r3, #63	; 0x3f
 80078ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80078d2:	f44f 7381 	mov.w	r3, #258	; 0x102
 80078d6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80078da:	f107 0310 	add.w	r3, r7, #16
 80078de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80078e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80078ea:	f107 030c 	add.w	r3, r7, #12
 80078ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80078f2:	2303      	movs	r3, #3
 80078f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80078f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80078fc:	2100      	movs	r1, #0
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fc78 	bl	80081f4 <hci_send_req>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	da01      	bge.n	800790e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800790a:	23ff      	movs	r3, #255	; 0xff
 800790c:	e011      	b.n	8007932 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800790e:	f107 030c 	add.w	r3, r7, #12
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d003      	beq.n	8007920 <aci_gatt_add_service+0x142>
    return resp.Status;
 8007918:	f107 030c 	add.w	r3, r7, #12
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	e008      	b.n	8007932 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8007920:	f107 030c 	add.w	r3, r7, #12
 8007924:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007928:	b29a      	uxth	r2, r3
 800792a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800792e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007938:	46bd      	mov	sp, r7
 800793a:	bd90      	pop	{r4, r7, pc}

0800793c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800793c:	b590      	push	{r4, r7, lr}
 800793e:	b0d1      	sub	sp, #324	; 0x144
 8007940:	af00      	add	r7, sp, #0
 8007942:	4604      	mov	r4, r0
 8007944:	4608      	mov	r0, r1
 8007946:	f107 0108 	add.w	r1, r7, #8
 800794a:	600a      	str	r2, [r1, #0]
 800794c:	4619      	mov	r1, r3
 800794e:	f107 030e 	add.w	r3, r7, #14
 8007952:	4622      	mov	r2, r4
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	f107 030d 	add.w	r3, r7, #13
 800795a:	4602      	mov	r2, r0
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	1dbb      	adds	r3, r7, #6
 8007960:	460a      	mov	r2, r1
 8007962:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007964:	f107 0318 	add.w	r3, r7, #24
 8007968:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800796c:	f107 030d 	add.w	r3, r7, #13
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d008      	beq.n	8007988 <aci_gatt_add_char+0x4c>
 8007976:	f107 030d 	add.w	r3, r7, #13
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b02      	cmp	r3, #2
 800797e:	d101      	bne.n	8007984 <aci_gatt_add_char+0x48>
 8007980:	2313      	movs	r3, #19
 8007982:	e002      	b.n	800798a <aci_gatt_add_char+0x4e>
 8007984:	2303      	movs	r3, #3
 8007986:	e000      	b.n	800798a <aci_gatt_add_char+0x4e>
 8007988:	2305      	movs	r3, #5
 800798a:	f107 0218 	add.w	r2, r7, #24
 800798e:	4413      	add	r3, r2
 8007990:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	2203      	movs	r2, #3
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fd65 	bl	800846c <Osal_MemSet>
  int index_input = 0;
 80079a2:	2300      	movs	r3, #0
 80079a4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80079a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80079ac:	f107 020e 	add.w	r2, r7, #14
 80079b0:	8812      	ldrh	r2, [r2, #0]
 80079b2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80079b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079b8:	3302      	adds	r3, #2
 80079ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80079be:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80079c2:	f107 020d 	add.w	r2, r7, #13
 80079c6:	7812      	ldrb	r2, [r2, #0]
 80079c8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80079ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079ce:	3301      	adds	r3, #1
 80079d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80079d4:	f107 030d 	add.w	r3, r7, #13
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d002      	beq.n	80079e4 <aci_gatt_add_char+0xa8>
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d004      	beq.n	80079ec <aci_gatt_add_char+0xb0>
 80079e2:	e007      	b.n	80079f4 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80079e4:	2302      	movs	r3, #2
 80079e6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80079ea:	e005      	b.n	80079f8 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80079ec:	2310      	movs	r3, #16
 80079ee:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80079f2:	e001      	b.n	80079f8 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80079f4:	2347      	movs	r3, #71	; 0x47
 80079f6:	e086      	b.n	8007b06 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80079f8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80079fc:	1cd8      	adds	r0, r3, #3
 80079fe:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007a02:	f107 0308 	add.w	r3, r7, #8
 8007a06:	6819      	ldr	r1, [r3, #0]
 8007a08:	f000 fd20 	bl	800844c <Osal_MemCpy>
    index_input += size;
 8007a0c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007a10:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007a14:	4413      	add	r3, r2
 8007a16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007a1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a1e:	1dba      	adds	r2, r7, #6
 8007a20:	8812      	ldrh	r2, [r2, #0]
 8007a22:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007a24:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a28:	3302      	adds	r3, #2
 8007a2a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007a2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a32:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007a36:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007a38:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007a42:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a46:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007a4a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007a4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a50:	3301      	adds	r3, #1
 8007a52:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007a56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a5a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007a5e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007a60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a64:	3301      	adds	r3, #1
 8007a66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a6e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007a72:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007a74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a78:	3301      	adds	r3, #1
 8007a7a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007a7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007a82:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007a86:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007a88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a96:	2218      	movs	r2, #24
 8007a98:	2100      	movs	r1, #0
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 fce6 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007aa0:	233f      	movs	r3, #63	; 0x3f
 8007aa2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007aa6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007aaa:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007aae:	f107 0318 	add.w	r3, r7, #24
 8007ab2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007ab6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007aba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007abe:	f107 0314 	add.w	r3, r7, #20
 8007ac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007acc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 fb8e 	bl	80081f4 <hci_send_req>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da01      	bge.n	8007ae2 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8007ade:	23ff      	movs	r3, #255	; 0xff
 8007ae0:	e011      	b.n	8007b06 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8007ae2:	f107 0314 	add.w	r3, r7, #20
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	e008      	b.n	8007b06 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8007af4:	f107 0314 	add.w	r3, r7, #20
 8007af8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007b02:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd90      	pop	{r4, r7, pc}

08007b10 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007b10:	b5b0      	push	{r4, r5, r7, lr}
 8007b12:	b0cc      	sub	sp, #304	; 0x130
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	4605      	mov	r5, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	4610      	mov	r0, r2
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	1dbb      	adds	r3, r7, #6
 8007b20:	462a      	mov	r2, r5
 8007b22:	801a      	strh	r2, [r3, #0]
 8007b24:	1d3b      	adds	r3, r7, #4
 8007b26:	4622      	mov	r2, r4
 8007b28:	801a      	strh	r2, [r3, #0]
 8007b2a:	1cfb      	adds	r3, r7, #3
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	701a      	strb	r2, [r3, #0]
 8007b30:	1cbb      	adds	r3, r7, #2
 8007b32:	460a      	mov	r2, r1
 8007b34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007b36:	f107 0310 	add.w	r3, r7, #16
 8007b3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b3e:	f107 030f 	add.w	r3, r7, #15
 8007b42:	2200      	movs	r2, #0
 8007b44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b50:	1dba      	adds	r2, r7, #6
 8007b52:	8812      	ldrh	r2, [r2, #0]
 8007b54:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007b56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b64:	1d3a      	adds	r2, r7, #4
 8007b66:	8812      	ldrh	r2, [r2, #0]
 8007b68:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007b6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b6e:	3302      	adds	r3, #2
 8007b70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007b74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b78:	1cfa      	adds	r2, r7, #3
 8007b7a:	7812      	ldrb	r2, [r2, #0]
 8007b7c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b82:	3301      	adds	r3, #1
 8007b84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007b88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8c:	1cba      	adds	r2, r7, #2
 8007b8e:	7812      	ldrb	r2, [r2, #0]
 8007b90:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007b92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b96:	3301      	adds	r3, #1
 8007b98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba0:	1d98      	adds	r0, r3, #6
 8007ba2:	1cbb      	adds	r3, r7, #2
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007bac:	f000 fc4e 	bl	800844c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007bb0:	1cbb      	adds	r3, r7, #2
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007bb8:	4413      	add	r3, r2
 8007bba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007bbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bc2:	2218      	movs	r2, #24
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 fc50 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bcc:	233f      	movs	r3, #63	; 0x3f
 8007bce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007bd2:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007bd6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007bda:	f107 0310 	add.w	r3, r7, #16
 8007bde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007be2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007be6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007bea:	f107 030f 	add.w	r3, r7, #15
 8007bee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 faf8 	bl	80081f4 <hci_send_req>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	da01      	bge.n	8007c0e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8007c0a:	23ff      	movs	r3, #255	; 0xff
 8007c0c:	e002      	b.n	8007c14 <aci_gatt_update_char_value+0x104>
  return status;
 8007c0e:	f107 030f 	add.w	r3, r7, #15
 8007c12:	781b      	ldrb	r3, [r3, #0]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bdb0      	pop	{r4, r5, r7, pc}

08007c1e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b0cc      	sub	sp, #304	; 0x130
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	463b      	mov	r3, r7
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	1dfb      	adds	r3, r7, #7
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	1dbb      	adds	r3, r7, #6
 8007c30:	460a      	mov	r2, r1
 8007c32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007c34:	f107 0310 	add.w	r3, r7, #16
 8007c38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c3c:	f107 030f 	add.w	r3, r7, #15
 8007c40:	2200      	movs	r2, #0
 8007c42:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4e:	1dfa      	adds	r2, r7, #7
 8007c50:	7812      	ldrb	r2, [r2, #0]
 8007c52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c58:	3301      	adds	r3, #1
 8007c5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c62:	1dba      	adds	r2, r7, #6
 8007c64:	7812      	ldrb	r2, [r2, #0]
 8007c66:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c76:	1c98      	adds	r0, r3, #2
 8007c78:	1dbb      	adds	r3, r7, #6
 8007c7a:	781a      	ldrb	r2, [r3, #0]
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	6819      	ldr	r1, [r3, #0]
 8007c80:	f000 fbe4 	bl	800844c <Osal_MemCpy>
  index_input += Length;
 8007c84:	1dbb      	adds	r3, r7, #6
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c96:	2218      	movs	r2, #24
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fbe6 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007ca0:	233f      	movs	r3, #63	; 0x3f
 8007ca2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007ca6:	230c      	movs	r3, #12
 8007ca8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cac:	f107 0310 	add.w	r3, r7, #16
 8007cb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007cbc:	f107 030f 	add.w	r3, r7, #15
 8007cc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fa8f 	bl	80081f4 <hci_send_req>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da01      	bge.n	8007ce0 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8007cdc:	23ff      	movs	r3, #255	; 0xff
 8007cde:	e002      	b.n	8007ce6 <aci_hal_write_config_data+0xc8>
  return status;
 8007ce0:	f107 030f 	add.w	r3, r7, #15
 8007ce4:	781b      	ldrb	r3, [r3, #0]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b0cc      	sub	sp, #304	; 0x130
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	1dfb      	adds	r3, r7, #7
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	1dbb      	adds	r3, r7, #6
 8007cfe:	460a      	mov	r2, r1
 8007d00:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007d02:	f107 0310 	add.w	r3, r7, #16
 8007d06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d0a:	f107 030f 	add.w	r3, r7, #15
 8007d0e:	2200      	movs	r2, #0
 8007d10:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d12:	2300      	movs	r3, #0
 8007d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1c:	1dfa      	adds	r2, r7, #7
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d26:	3301      	adds	r3, #1
 8007d28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007d2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d30:	1dba      	adds	r2, r7, #6
 8007d32:	7812      	ldrb	r2, [r2, #0]
 8007d34:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007d36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d44:	2218      	movs	r2, #24
 8007d46:	2100      	movs	r1, #0
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fb8f 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d4e:	233f      	movs	r3, #63	; 0x3f
 8007d50:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007d54:	230f      	movs	r3, #15
 8007d56:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d5a:	f107 0310 	add.w	r3, r7, #16
 8007d5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d6a:	f107 030f 	add.w	r3, r7, #15
 8007d6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d72:	2301      	movs	r3, #1
 8007d74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fa38 	bl	80081f4 <hci_send_req>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	da01      	bge.n	8007d8e <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007d8a:	23ff      	movs	r3, #255	; 0xff
 8007d8c:	e002      	b.n	8007d94 <aci_hal_set_tx_power_level+0xa4>
  return status;
 8007d8e:	f107 030f 	add.w	r3, r7, #15
 8007d92:	781b      	ldrb	r3, [r3, #0]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b0cc      	sub	sp, #304	; 0x130
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	4602      	mov	r2, r0
 8007da6:	1dbb      	adds	r3, r7, #6
 8007da8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007daa:	f107 0310 	add.w	r3, r7, #16
 8007dae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007db2:	f107 030f 	add.w	r3, r7, #15
 8007db6:	2200      	movs	r2, #0
 8007db8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dc4:	1dba      	adds	r2, r7, #6
 8007dc6:	8812      	ldrh	r2, [r2, #0]
 8007dc8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dce:	3302      	adds	r3, #2
 8007dd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007dd4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007dd8:	2218      	movs	r2, #24
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 fb45 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 8007de2:	233f      	movs	r3, #63	; 0x3f
 8007de4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007de8:	2318      	movs	r3, #24
 8007dea:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007dee:	f107 0310 	add.w	r3, r7, #16
 8007df2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007df6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007dfe:	f107 030f 	add.w	r3, r7, #15
 8007e02:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e10:	2100      	movs	r1, #0
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f9ee 	bl	80081f4 <hci_send_req>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	da01      	bge.n	8007e22 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8007e1e:	23ff      	movs	r3, #255	; 0xff
 8007e20:	e002      	b.n	8007e28 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8007e22:	f107 030f 	add.w	r3, r7, #15
 8007e26:	781b      	ldrb	r3, [r3, #0]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b088      	sub	sp, #32
 8007e36:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e3c:	f107 0308 	add.w	r3, r7, #8
 8007e40:	2218      	movs	r2, #24
 8007e42:	2100      	movs	r1, #0
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fb11 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x03;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007e52:	1dfb      	adds	r3, r7, #7
 8007e54:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007e56:	2301      	movs	r3, #1
 8007e58:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e5a:	f107 0308 	add.w	r3, r7, #8
 8007e5e:	2100      	movs	r1, #0
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 f9c7 	bl	80081f4 <hci_send_req>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	da01      	bge.n	8007e70 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007e6c:	23ff      	movs	r3, #255	; 0xff
 8007e6e:	e000      	b.n	8007e72 <hci_reset+0x40>
  return status;
 8007e70:	79fb      	ldrb	r3, [r7, #7]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3720      	adds	r7, #32
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b0ce      	sub	sp, #312	; 0x138
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	f107 0308 	add.w	r3, r7, #8
 8007e84:	6019      	str	r1, [r3, #0]
 8007e86:	1d3b      	adds	r3, r7, #4
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	f107 030e 	add.w	r3, r7, #14
 8007e8e:	4602      	mov	r2, r0
 8007e90:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8007e92:	f107 0318 	add.w	r3, r7, #24
 8007e96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007e9a:	f107 0310 	add.w	r3, r7, #16
 8007e9e:	2205      	movs	r2, #5
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f000 fae2 	bl	800846c <Osal_MemSet>
  int index_input = 0;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007eae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007eb2:	f107 020e 	add.w	r2, r7, #14
 8007eb6:	8812      	ldrh	r2, [r2, #0]
 8007eb8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007eba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ebe:	3302      	adds	r3, #2
 8007ec0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ec4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007ec8:	2218      	movs	r2, #24
 8007eca:	2100      	movs	r1, #0
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 facd 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x08;
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8007ed8:	2330      	movs	r3, #48	; 0x30
 8007eda:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007ede:	f107 0318 	add.w	r3, r7, #24
 8007ee2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007ee6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007eea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007eee:	f107 0310 	add.w	r3, r7, #16
 8007ef2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007ef6:	2305      	movs	r3, #5
 8007ef8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007efc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007f00:	2100      	movs	r1, #0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 f976 	bl	80081f4 <hci_send_req>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da01      	bge.n	8007f12 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8007f0e:	23ff      	movs	r3, #255	; 0xff
 8007f10:	e016      	b.n	8007f40 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8007f12:	f107 0310 	add.w	r3, r7, #16
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d003      	beq.n	8007f24 <hci_le_read_phy+0xaa>
    return resp.Status;
 8007f1c:	f107 0310 	add.w	r3, r7, #16
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	e00d      	b.n	8007f40 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8007f24:	f107 0310 	add.w	r3, r7, #16
 8007f28:	78da      	ldrb	r2, [r3, #3]
 8007f2a:	f107 0308 	add.w	r3, r7, #8
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8007f32:	f107 0310 	add.w	r3, r7, #16
 8007f36:	791a      	ldrb	r2, [r3, #4]
 8007f38:	1d3b      	adds	r3, r7, #4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007f4a:	b590      	push	{r4, r7, lr}
 8007f4c:	b0cd      	sub	sp, #308	; 0x134
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	4604      	mov	r4, r0
 8007f52:	4608      	mov	r0, r1
 8007f54:	4611      	mov	r1, r2
 8007f56:	1dfb      	adds	r3, r7, #7
 8007f58:	4622      	mov	r2, r4
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	1dbb      	adds	r3, r7, #6
 8007f5e:	4602      	mov	r2, r0
 8007f60:	701a      	strb	r2, [r3, #0]
 8007f62:	1d7b      	adds	r3, r7, #5
 8007f64:	460a      	mov	r2, r1
 8007f66:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007f68:	f107 0310 	add.w	r3, r7, #16
 8007f6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007f70:	f107 030f 	add.w	r3, r7, #15
 8007f74:	2200      	movs	r2, #0
 8007f76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007f7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f82:	1dfa      	adds	r2, r7, #7
 8007f84:	7812      	ldrb	r2, [r2, #0]
 8007f86:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f96:	1dba      	adds	r2, r7, #6
 8007f98:	7812      	ldrb	r2, [r2, #0]
 8007f9a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007f9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007faa:	1d7a      	adds	r2, r7, #5
 8007fac:	7812      	ldrb	r2, [r2, #0]
 8007fae:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007fbe:	2218      	movs	r2, #24
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fa52 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x08;
 8007fc8:	2308      	movs	r3, #8
 8007fca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007fce:	2331      	movs	r3, #49	; 0x31
 8007fd0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007fd4:	f107 0310 	add.w	r3, r7, #16
 8007fd8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fe0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007fe4:	f107 030f 	add.w	r3, r7, #15
 8007fe8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007fec:	2301      	movs	r3, #1
 8007fee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ff2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 f8fb 	bl	80081f4 <hci_send_req>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	da01      	bge.n	8008008 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008004:	23ff      	movs	r3, #255	; 0xff
 8008006:	e002      	b.n	800800e <hci_le_set_default_phy+0xc4>
  return status;
 8008008:	f107 030f 	add.w	r3, r7, #15
 800800c:	781b      	ldrb	r3, [r3, #0]
}
 800800e:	4618      	mov	r0, r3
 8008010:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008014:	46bd      	mov	sp, r7
 8008016:	bd90      	pop	{r4, r7, pc}

08008018 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8008018:	b5b0      	push	{r4, r5, r7, lr}
 800801a:	b0cc      	sub	sp, #304	; 0x130
 800801c:	af00      	add	r7, sp, #0
 800801e:	4605      	mov	r5, r0
 8008020:	460c      	mov	r4, r1
 8008022:	4610      	mov	r0, r2
 8008024:	4619      	mov	r1, r3
 8008026:	1dbb      	adds	r3, r7, #6
 8008028:	462a      	mov	r2, r5
 800802a:	801a      	strh	r2, [r3, #0]
 800802c:	1d3b      	adds	r3, r7, #4
 800802e:	4622      	mov	r2, r4
 8008030:	801a      	strh	r2, [r3, #0]
 8008032:	1cbb      	adds	r3, r7, #2
 8008034:	4602      	mov	r2, r0
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	463b      	mov	r3, r7
 800803a:	460a      	mov	r2, r1
 800803c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800803e:	f107 0310 	add.w	r3, r7, #16
 8008042:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008046:	f107 030f 	add.w	r3, r7, #15
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800804e:	2300      	movs	r3, #0
 8008050:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008058:	1dba      	adds	r2, r7, #6
 800805a:	8812      	ldrh	r2, [r2, #0]
 800805c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800805e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008062:	3302      	adds	r3, #2
 8008064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800806c:	1d3a      	adds	r2, r7, #4
 800806e:	8812      	ldrh	r2, [r2, #0]
 8008070:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8008072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008076:	3302      	adds	r3, #2
 8008078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800807c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008080:	1cba      	adds	r2, r7, #2
 8008082:	8812      	ldrh	r2, [r2, #0]
 8008084:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8008086:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800808a:	3302      	adds	r3, #2
 800808c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8008090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008094:	463a      	mov	r2, r7
 8008096:	8812      	ldrh	r2, [r2, #0]
 8008098:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800809a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800809e:	3302      	adds	r3, #2
 80080a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 80080a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a8:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80080ac:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 80080ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080b2:	3302      	adds	r3, #2
 80080b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080bc:	2218      	movs	r2, #24
 80080be:	2100      	movs	r1, #0
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f9d3 	bl	800846c <Osal_MemSet>
  rq.ogf = 0x3f;
 80080c6:	233f      	movs	r3, #63	; 0x3f
 80080c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 80080cc:	f240 1381 	movw	r3, #385	; 0x181
 80080d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80080d4:	230f      	movs	r3, #15
 80080d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80080da:	f107 0310 	add.w	r3, r7, #16
 80080de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80080e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80080ea:	f107 030f 	add.w	r3, r7, #15
 80080ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80080f2:	2301      	movs	r3, #1
 80080f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80080f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 f878 	bl	80081f4 <hci_send_req>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	da01      	bge.n	800810e <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 800810a:	23ff      	movs	r3, #255	; 0xff
 800810c:	e002      	b.n	8008114 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 800810e:	f107 030f 	add.w	r3, r7, #15
 8008112:	781b      	ldrb	r3, [r3, #0]
}
 8008114:	4618      	mov	r0, r3
 8008116:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800811a:	46bd      	mov	sp, r7
 800811c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008120 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	4a08      	ldr	r2, [pc, #32]	; (8008150 <hci_init+0x30>)
 8008130:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008132:	4a08      	ldr	r2, [pc, #32]	; (8008154 <hci_init+0x34>)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008138:	4806      	ldr	r0, [pc, #24]	; (8008154 <hci_init+0x34>)
 800813a:	f000 f973 	bl	8008424 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4618      	mov	r0, r3
 8008144:	f000 f8d4 	bl	80082f0 <TlInit>

  return;
 8008148:	bf00      	nop
}
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	20000304 	.word	0x20000304
 8008154:	200002dc 	.word	0x200002dc

08008158 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800815e:	4822      	ldr	r0, [pc, #136]	; (80081e8 <hci_user_evt_proc+0x90>)
 8008160:	f000 fc54 	bl	8008a0c <LST_is_empty>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d12b      	bne.n	80081c2 <hci_user_evt_proc+0x6a>
 800816a:	4b20      	ldr	r3, [pc, #128]	; (80081ec <hci_user_evt_proc+0x94>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d027      	beq.n	80081c2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008172:	f107 030c 	add.w	r3, r7, #12
 8008176:	4619      	mov	r1, r3
 8008178:	481b      	ldr	r0, [pc, #108]	; (80081e8 <hci_user_evt_proc+0x90>)
 800817a:	f000 fcd6 	bl	8008b2a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800817e:	4b1c      	ldr	r3, [pc, #112]	; (80081f0 <hci_user_evt_proc+0x98>)
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00c      	beq.n	80081a0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800818a:	2301      	movs	r3, #1
 800818c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800818e:	4b18      	ldr	r3, [pc, #96]	; (80081f0 <hci_user_evt_proc+0x98>)
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	1d3a      	adds	r2, r7, #4
 8008194:	4610      	mov	r0, r2
 8008196:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008198:	793a      	ldrb	r2, [r7, #4]
 800819a:	4b14      	ldr	r3, [pc, #80]	; (80081ec <hci_user_evt_proc+0x94>)
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	e002      	b.n	80081a6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80081a0:	4b12      	ldr	r3, [pc, #72]	; (80081ec <hci_user_evt_proc+0x94>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80081a6:	4b11      	ldr	r3, [pc, #68]	; (80081ec <hci_user_evt_proc+0x94>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d004      	beq.n	80081b8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f000 ff71 	bl	8009098 <TL_MM_EvtDone>
 80081b6:	e004      	b.n	80081c2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	4619      	mov	r1, r3
 80081bc:	480a      	ldr	r0, [pc, #40]	; (80081e8 <hci_user_evt_proc+0x90>)
 80081be:	f000 fc47 	bl	8008a50 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80081c2:	4809      	ldr	r0, [pc, #36]	; (80081e8 <hci_user_evt_proc+0x90>)
 80081c4:	f000 fc22 	bl	8008a0c <LST_is_empty>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d107      	bne.n	80081de <hci_user_evt_proc+0x86>
 80081ce:	4b07      	ldr	r3, [pc, #28]	; (80081ec <hci_user_evt_proc+0x94>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d003      	beq.n	80081de <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80081d6:	4804      	ldr	r0, [pc, #16]	; (80081e8 <hci_user_evt_proc+0x90>)
 80081d8:	f7fa fcce 	bl	8002b78 <hci_notify_asynch_evt>
  }


  return;
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
}
 80081e0:	3710      	adds	r7, #16
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20000250 	.word	0x20000250
 80081ec:	2000025c 	.word	0x2000025c
 80081f0:	200002dc 	.word	0x200002dc

080081f4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b088      	sub	sp, #32
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008200:	2000      	movs	r0, #0
 8008202:	f000 f8cb 	bl	800839c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008206:	2300      	movs	r3, #0
 8008208:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	b21b      	sxth	r3, r3
 8008210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008214:	b21a      	sxth	r2, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	029b      	lsls	r3, r3, #10
 800821c:	b21b      	sxth	r3, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	b21b      	sxth	r3, r3
 8008222:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	b2d9      	uxtb	r1, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	689a      	ldr	r2, [r3, #8]
 800822e:	8bbb      	ldrh	r3, [r7, #28]
 8008230:	4618      	mov	r0, r3
 8008232:	f000 f88d 	bl	8008350 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8008236:	e04e      	b.n	80082d6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8008238:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800823c:	f7fa fcb3 	bl	8002ba6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008240:	e043      	b.n	80082ca <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008242:	f107 030c 	add.w	r3, r7, #12
 8008246:	4619      	mov	r1, r3
 8008248:	4828      	ldr	r0, [pc, #160]	; (80082ec <hci_send_req+0xf8>)
 800824a:	f000 fc6e 	bl	8008b2a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	7a5b      	ldrb	r3, [r3, #9]
 8008252:	2b0f      	cmp	r3, #15
 8008254:	d114      	bne.n	8008280 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	330b      	adds	r3, #11
 800825a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	885b      	ldrh	r3, [r3, #2]
 8008260:	b29b      	uxth	r3, r3
 8008262:	8bba      	ldrh	r2, [r7, #28]
 8008264:	429a      	cmp	r2, r3
 8008266:	d104      	bne.n	8008272 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	7812      	ldrb	r2, [r2, #0]
 8008270:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d027      	beq.n	80082ca <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800827a:	2301      	movs	r3, #1
 800827c:	77fb      	strb	r3, [r7, #31]
 800827e:	e024      	b.n	80082ca <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	330b      	adds	r3, #11
 8008284:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800828c:	b29b      	uxth	r3, r3
 800828e:	8bba      	ldrh	r2, [r7, #28]
 8008290:	429a      	cmp	r2, r3
 8008292:	d114      	bne.n	80082be <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	7a9b      	ldrb	r3, [r3, #10]
 8008298:	3b03      	subs	r3, #3
 800829a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	7dfb      	ldrb	r3, [r7, #23]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	bfa8      	it	ge
 80082a6:	461a      	movge	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6918      	ldr	r0, [r3, #16]
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	1cd9      	adds	r1, r3, #3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	461a      	mov	r2, r3
 80082ba:	f001 fa6f 	bl	800979c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80082c6:	2301      	movs	r3, #1
 80082c8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80082ca:	4808      	ldr	r0, [pc, #32]	; (80082ec <hci_send_req+0xf8>)
 80082cc:	f000 fb9e 	bl	8008a0c <LST_is_empty>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0b5      	beq.n	8008242 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80082d6:	7ffb      	ldrb	r3, [r7, #31]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0ad      	beq.n	8008238 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80082dc:	2001      	movs	r0, #1
 80082de:	f000 f85d 	bl	800839c <NotifyCmdStatus>

  return 0;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3720      	adds	r7, #32
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	200002fc 	.word	0x200002fc

080082f0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b086      	sub	sp, #24
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80082f8:	480f      	ldr	r0, [pc, #60]	; (8008338 <TlInit+0x48>)
 80082fa:	f000 fb77 	bl	80089ec <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80082fe:	4a0f      	ldr	r2, [pc, #60]	; (800833c <TlInit+0x4c>)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008304:	480e      	ldr	r0, [pc, #56]	; (8008340 <TlInit+0x50>)
 8008306:	f000 fb71 	bl	80089ec <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800830a:	4b0e      	ldr	r3, [pc, #56]	; (8008344 <TlInit+0x54>)
 800830c:	2201      	movs	r2, #1
 800830e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008310:	4b0d      	ldr	r3, [pc, #52]	; (8008348 <TlInit+0x58>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800831c:	4b0b      	ldr	r3, [pc, #44]	; (800834c <TlInit+0x5c>)
 800831e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008320:	4b09      	ldr	r3, [pc, #36]	; (8008348 <TlInit+0x58>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f107 0208 	add.w	r2, r7, #8
 8008328:	4610      	mov	r0, r2
 800832a:	4798      	blx	r3
  }

  return;
 800832c:	bf00      	nop
 800832e:	bf00      	nop
}
 8008330:	3718      	adds	r7, #24
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	200002fc 	.word	0x200002fc
 800833c:	20000258 	.word	0x20000258
 8008340:	20000250 	.word	0x20000250
 8008344:	2000025c 	.word	0x2000025c
 8008348:	200002dc 	.word	0x200002dc
 800834c:	080083dd 	.word	0x080083dd

08008350 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	4603      	mov	r3, r0
 8008358:	603a      	str	r2, [r7, #0]
 800835a:	80fb      	strh	r3, [r7, #6]
 800835c:	460b      	mov	r3, r1
 800835e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8008360:	4b0c      	ldr	r3, [pc, #48]	; (8008394 <SendCmd+0x44>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	88fa      	ldrh	r2, [r7, #6]
 8008366:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800836a:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <SendCmd+0x44>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	797a      	ldrb	r2, [r7, #5]
 8008370:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008372:	4b08      	ldr	r3, [pc, #32]	; (8008394 <SendCmd+0x44>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	330c      	adds	r3, #12
 8008378:	797a      	ldrb	r2, [r7, #5]
 800837a:	6839      	ldr	r1, [r7, #0]
 800837c:	4618      	mov	r0, r3
 800837e:	f001 fa0d 	bl	800979c <memcpy>

  hciContext.io.Send(0,0);
 8008382:	4b05      	ldr	r3, [pc, #20]	; (8008398 <SendCmd+0x48>)
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	2100      	movs	r1, #0
 8008388:	2000      	movs	r0, #0
 800838a:	4798      	blx	r3

  return;
 800838c:	bf00      	nop
}
 800838e:	3708      	adds	r7, #8
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	20000258 	.word	0x20000258
 8008398:	200002dc 	.word	0x200002dc

0800839c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	4603      	mov	r3, r0
 80083a4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d108      	bne.n	80083be <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80083ac:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <NotifyCmdStatus+0x3c>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00d      	beq.n	80083d0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80083b4:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <NotifyCmdStatus+0x3c>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2000      	movs	r0, #0
 80083ba:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80083bc:	e008      	b.n	80083d0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80083be:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <NotifyCmdStatus+0x3c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80083c6:	4b04      	ldr	r3, [pc, #16]	; (80083d8 <NotifyCmdStatus+0x3c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2001      	movs	r0, #1
 80083cc:	4798      	blx	r3
  return;
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
}
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20000304 	.word	0x20000304

080083dc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	7a5b      	ldrb	r3, [r3, #9]
 80083e8:	2b0f      	cmp	r3, #15
 80083ea:	d003      	beq.n	80083f4 <TlEvtReceived+0x18>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	7a5b      	ldrb	r3, [r3, #9]
 80083f0:	2b0e      	cmp	r3, #14
 80083f2:	d107      	bne.n	8008404 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80083f4:	6879      	ldr	r1, [r7, #4]
 80083f6:	4809      	ldr	r0, [pc, #36]	; (800841c <TlEvtReceived+0x40>)
 80083f8:	f000 fb50 	bl	8008a9c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80083fc:	2000      	movs	r0, #0
 80083fe:	f7fa fbc7 	bl	8002b90 <hci_cmd_resp_release>
 8008402:	e006      	b.n	8008412 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008404:	6879      	ldr	r1, [r7, #4]
 8008406:	4806      	ldr	r0, [pc, #24]	; (8008420 <TlEvtReceived+0x44>)
 8008408:	f000 fb48 	bl	8008a9c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800840c:	4804      	ldr	r0, [pc, #16]	; (8008420 <TlEvtReceived+0x44>)
 800840e:	f7fa fbb3 	bl	8002b78 <hci_notify_asynch_evt>
  }

  return;
 8008412:	bf00      	nop
}
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200002fc 	.word	0x200002fc
 8008420:	20000250 	.word	0x20000250

08008424 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a05      	ldr	r2, [pc, #20]	; (8008444 <hci_register_io_bus+0x20>)
 8008430:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a04      	ldr	r2, [pc, #16]	; (8008448 <hci_register_io_bus+0x24>)
 8008436:	611a      	str	r2, [r3, #16]

  return;
 8008438:	bf00      	nop
}
 800843a:	370c      	adds	r7, #12
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	08008e11 	.word	0x08008e11
 8008448:	08008e79 	.word	0x08008e79

0800844c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f001 f99d 	bl	800979c <memcpy>
 8008462:	4603      	mov	r3, r0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	68b9      	ldr	r1, [r7, #8]
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f001 f99b 	bl	80097b8 <memset>
 8008482:	4603      	mov	r3, r0
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008496:	4b0f      	ldr	r3, [pc, #60]	; (80084d4 <OTP_Read+0x48>)
 8008498:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800849a:	e002      	b.n	80084a2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3b08      	subs	r3, #8
 80084a0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3307      	adds	r3, #7
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	79fa      	ldrb	r2, [r7, #7]
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d003      	beq.n	80084b6 <OTP_Read+0x2a>
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	4a09      	ldr	r2, [pc, #36]	; (80084d8 <OTP_Read+0x4c>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d1f2      	bne.n	800849c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	3307      	adds	r3, #7
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	79fa      	ldrb	r2, [r7, #7]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d001      	beq.n	80084c6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80084c6:	68fb      	ldr	r3, [r7, #12]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3714      	adds	r7, #20
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	1fff73f8 	.word	0x1fff73f8
 80084d8:	1fff7000 	.word	0x1fff7000

080084dc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08a      	sub	sp, #40	; 0x28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80084e4:	2300      	movs	r3, #0
 80084e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3301      	adds	r3, #1
 80084ee:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 80084f0:	6a3b      	ldr	r3, [r7, #32]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2bff      	cmp	r3, #255	; 0xff
 80084f6:	d14c      	bne.n	8008592 <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80084f8:	6a3b      	ldr	r3, [r7, #32]
 80084fa:	3302      	adds	r3, #2
 80084fc:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	881b      	ldrh	r3, [r3, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	f640 4301 	movw	r3, #3073	; 0xc01
 800850a:	429a      	cmp	r2, r3
 800850c:	d13d      	bne.n	800858a <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	3302      	adds	r3, #2
 8008512:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	885b      	ldrh	r3, [r3, #2]
 8008518:	b29b      	uxth	r3, r3
 800851a:	461a      	mov	r2, r3
 800851c:	4b20      	ldr	r3, [pc, #128]	; (80085a0 <PeerToPeer_Event_Handler+0xc4>)
 800851e:	889b      	ldrh	r3, [r3, #4]
 8008520:	3302      	adds	r3, #2
 8008522:	429a      	cmp	r2, r3
 8008524:	d118      	bne.n	8008558 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8008526:	2301      	movs	r3, #1
 8008528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	7a1b      	ldrb	r3, [r3, #8]
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	d007      	beq.n	8008548 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008538:	2300      	movs	r3, #0
 800853a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800853c:	f107 0308 	add.w	r3, r7, #8
 8008540:	4618      	mov	r0, r3
 8008542:	f7fa fb73 	bl	8002c2c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8008546:	e022      	b.n	800858e <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008548:	2301      	movs	r3, #1
 800854a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800854c:	f107 0308 	add.w	r3, r7, #8
 8008550:	4618      	mov	r0, r3
 8008552:	f7fa fb6b 	bl	8002c2c <P2PS_STM_App_Notification>
        break;
 8008556:	e01a      	b.n	800858e <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	885b      	ldrh	r3, [r3, #2]
 800855c:	b29b      	uxth	r3, r3
 800855e:	461a      	mov	r2, r3
 8008560:	4b0f      	ldr	r3, [pc, #60]	; (80085a0 <PeerToPeer_Event_Handler+0xc4>)
 8008562:	885b      	ldrh	r3, [r3, #2]
 8008564:	3301      	adds	r3, #1
 8008566:	429a      	cmp	r2, r3
 8008568:	d111      	bne.n	800858e <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800856a:	2303      	movs	r3, #3
 800856c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	88db      	ldrh	r3, [r3, #6]
 8008572:	b29b      	uxth	r3, r3
 8008574:	b2db      	uxtb	r3, r3
 8008576:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	3308      	adds	r3, #8
 800857c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800857e:	f107 0308 	add.w	r3, r7, #8
 8008582:	4618      	mov	r0, r3
 8008584:	f7fa fb52 	bl	8002c2c <P2PS_STM_App_Notification>
        break;
 8008588:	e001      	b.n	800858e <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 800858a:	bf00      	nop
 800858c:	e002      	b.n	8008594 <PeerToPeer_Event_Handler+0xb8>
        break;
 800858e:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008590:	e000      	b.n	8008594 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 8008592:	bf00      	nop
  }

  return(return_value);
 8008594:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008598:	4618      	mov	r0, r3
 800859a:	3728      	adds	r7, #40	; 0x28
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20000260 	.word	0x20000260

080085a4 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b08a      	sub	sp, #40	; 0x28
 80085a8:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80085aa:	484a      	ldr	r0, [pc, #296]	; (80086d4 <P2PS_STM_Init+0x130>)
 80085ac:	f000 fb82 	bl	8008cb4 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80085b0:	238f      	movs	r3, #143	; 0x8f
 80085b2:	703b      	strb	r3, [r7, #0]
 80085b4:	23e5      	movs	r3, #229	; 0xe5
 80085b6:	707b      	strb	r3, [r7, #1]
 80085b8:	23b3      	movs	r3, #179	; 0xb3
 80085ba:	70bb      	strb	r3, [r7, #2]
 80085bc:	23d5      	movs	r3, #213	; 0xd5
 80085be:	70fb      	strb	r3, [r7, #3]
 80085c0:	232e      	movs	r3, #46	; 0x2e
 80085c2:	713b      	strb	r3, [r7, #4]
 80085c4:	237f      	movs	r3, #127	; 0x7f
 80085c6:	717b      	strb	r3, [r7, #5]
 80085c8:	234a      	movs	r3, #74	; 0x4a
 80085ca:	71bb      	strb	r3, [r7, #6]
 80085cc:	2398      	movs	r3, #152	; 0x98
 80085ce:	71fb      	strb	r3, [r7, #7]
 80085d0:	232a      	movs	r3, #42	; 0x2a
 80085d2:	723b      	strb	r3, [r7, #8]
 80085d4:	2348      	movs	r3, #72	; 0x48
 80085d6:	727b      	strb	r3, [r7, #9]
 80085d8:	237a      	movs	r3, #122	; 0x7a
 80085da:	72bb      	strb	r3, [r7, #10]
 80085dc:	23cc      	movs	r3, #204	; 0xcc
 80085de:	72fb      	strb	r3, [r7, #11]
 80085e0:	2340      	movs	r3, #64	; 0x40
 80085e2:	733b      	strb	r3, [r7, #12]
 80085e4:	23fe      	movs	r3, #254	; 0xfe
 80085e6:	737b      	strb	r3, [r7, #13]
 80085e8:	2300      	movs	r3, #0
 80085ea:	73bb      	strb	r3, [r7, #14]
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 80085f0:	4639      	mov	r1, r7
 80085f2:	4b39      	ldr	r3, [pc, #228]	; (80086d8 <P2PS_STM_Init+0x134>)
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	2308      	movs	r3, #8
 80085f8:	2201      	movs	r2, #1
 80085fa:	2002      	movs	r0, #2
 80085fc:	f7ff f8ef 	bl	80077de <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8008600:	2319      	movs	r3, #25
 8008602:	703b      	strb	r3, [r7, #0]
 8008604:	23ed      	movs	r3, #237	; 0xed
 8008606:	707b      	strb	r3, [r7, #1]
 8008608:	2382      	movs	r3, #130	; 0x82
 800860a:	70bb      	strb	r3, [r7, #2]
 800860c:	23ae      	movs	r3, #174	; 0xae
 800860e:	70fb      	strb	r3, [r7, #3]
 8008610:	23ed      	movs	r3, #237	; 0xed
 8008612:	713b      	strb	r3, [r7, #4]
 8008614:	2321      	movs	r3, #33	; 0x21
 8008616:	717b      	strb	r3, [r7, #5]
 8008618:	234c      	movs	r3, #76	; 0x4c
 800861a:	71bb      	strb	r3, [r7, #6]
 800861c:	239d      	movs	r3, #157	; 0x9d
 800861e:	71fb      	strb	r3, [r7, #7]
 8008620:	2341      	movs	r3, #65	; 0x41
 8008622:	723b      	strb	r3, [r7, #8]
 8008624:	2345      	movs	r3, #69	; 0x45
 8008626:	727b      	strb	r3, [r7, #9]
 8008628:	2322      	movs	r3, #34	; 0x22
 800862a:	72bb      	strb	r3, [r7, #10]
 800862c:	238e      	movs	r3, #142	; 0x8e
 800862e:	72fb      	strb	r3, [r7, #11]
 8008630:	2341      	movs	r3, #65	; 0x41
 8008632:	733b      	strb	r3, [r7, #12]
 8008634:	23fe      	movs	r3, #254	; 0xfe
 8008636:	737b      	strb	r3, [r7, #13]
 8008638:	2300      	movs	r3, #0
 800863a:	73bb      	strb	r3, [r7, #14]
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008640:	4b25      	ldr	r3, [pc, #148]	; (80086d8 <P2PS_STM_Init+0x134>)
 8008642:	8818      	ldrh	r0, [r3, #0]
 8008644:	463a      	mov	r2, r7
 8008646:	4b25      	ldr	r3, [pc, #148]	; (80086dc <P2PS_STM_Init+0x138>)
 8008648:	9305      	str	r3, [sp, #20]
 800864a:	2301      	movs	r3, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	230a      	movs	r3, #10
 8008650:	9303      	str	r3, [sp, #12]
 8008652:	2301      	movs	r3, #1
 8008654:	9302      	str	r3, [sp, #8]
 8008656:	2300      	movs	r3, #0
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	2306      	movs	r3, #6
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	2302      	movs	r3, #2
 8008660:	2102      	movs	r1, #2
 8008662:	f7ff f96b 	bl	800793c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8008666:	2319      	movs	r3, #25
 8008668:	703b      	strb	r3, [r7, #0]
 800866a:	23ed      	movs	r3, #237	; 0xed
 800866c:	707b      	strb	r3, [r7, #1]
 800866e:	2382      	movs	r3, #130	; 0x82
 8008670:	70bb      	strb	r3, [r7, #2]
 8008672:	23ae      	movs	r3, #174	; 0xae
 8008674:	70fb      	strb	r3, [r7, #3]
 8008676:	23ed      	movs	r3, #237	; 0xed
 8008678:	713b      	strb	r3, [r7, #4]
 800867a:	2321      	movs	r3, #33	; 0x21
 800867c:	717b      	strb	r3, [r7, #5]
 800867e:	234c      	movs	r3, #76	; 0x4c
 8008680:	71bb      	strb	r3, [r7, #6]
 8008682:	239d      	movs	r3, #157	; 0x9d
 8008684:	71fb      	strb	r3, [r7, #7]
 8008686:	2341      	movs	r3, #65	; 0x41
 8008688:	723b      	strb	r3, [r7, #8]
 800868a:	2345      	movs	r3, #69	; 0x45
 800868c:	727b      	strb	r3, [r7, #9]
 800868e:	2322      	movs	r3, #34	; 0x22
 8008690:	72bb      	strb	r3, [r7, #10]
 8008692:	238e      	movs	r3, #142	; 0x8e
 8008694:	72fb      	strb	r3, [r7, #11]
 8008696:	2342      	movs	r3, #66	; 0x42
 8008698:	733b      	strb	r3, [r7, #12]
 800869a:	23fe      	movs	r3, #254	; 0xfe
 800869c:	737b      	strb	r3, [r7, #13]
 800869e:	2300      	movs	r3, #0
 80086a0:	73bb      	strb	r3, [r7, #14]
 80086a2:	2300      	movs	r3, #0
 80086a4:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80086a6:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <P2PS_STM_Init+0x134>)
 80086a8:	8818      	ldrh	r0, [r3, #0]
 80086aa:	463a      	mov	r2, r7
 80086ac:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <P2PS_STM_Init+0x13c>)
 80086ae:	9305      	str	r3, [sp, #20]
 80086b0:	2301      	movs	r3, #1
 80086b2:	9304      	str	r3, [sp, #16]
 80086b4:	230a      	movs	r3, #10
 80086b6:	9303      	str	r3, [sp, #12]
 80086b8:	2301      	movs	r3, #1
 80086ba:	9302      	str	r3, [sp, #8]
 80086bc:	2300      	movs	r3, #0
 80086be:	9301      	str	r3, [sp, #4]
 80086c0:	2310      	movs	r3, #16
 80086c2:	9300      	str	r3, [sp, #0]
 80086c4:	2304      	movs	r3, #4
 80086c6:	2102      	movs	r1, #2
 80086c8:	f7ff f938 	bl	800793c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80086cc:	bf00      	nop
}
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	080084dd 	.word	0x080084dd
 80086d8:	20000260 	.word	0x20000260
 80086dc:	20000262 	.word	0x20000262
 80086e0:	20000264 	.word	0x20000264

080086e4 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	4603      	mov	r3, r0
 80086ec:	6039      	str	r1, [r7, #0]
 80086ee:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80086f0:	2342      	movs	r3, #66	; 0x42
 80086f2:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	f64f 6242 	movw	r2, #65090	; 0xfe42
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d10c      	bne.n	8008718 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 80086fe:	4b09      	ldr	r3, [pc, #36]	; (8008724 <P2PS_STM_App_Update_Char+0x40>)
 8008700:	8818      	ldrh	r0, [r3, #0]
 8008702:	4b08      	ldr	r3, [pc, #32]	; (8008724 <P2PS_STM_App_Update_Char+0x40>)
 8008704:	8899      	ldrh	r1, [r3, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	2304      	movs	r3, #4
 800870c:	2200      	movs	r2, #0
 800870e:	f7ff f9ff 	bl	8007b10 <aci_gatt_update_char_value>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             4, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8008716:	e000      	b.n	800871a <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8008718:	bf00      	nop
  }

  return result;
 800871a:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800871c:	4618      	mov	r0, r3
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20000260 	.word	0x20000260

08008728 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008730:	f107 030c 	add.w	r3, r7, #12
 8008734:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	2124      	movs	r1, #36	; 0x24
 8008740:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008744:	f000 f888 	bl	8008858 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	330b      	adds	r3, #11
 800874c:	78db      	ldrb	r3, [r3, #3]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b088      	sub	sp, #32
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800875e:	f107 030c 	add.w	r3, r7, #12
 8008762:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	210f      	movs	r1, #15
 800876e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008772:	f000 f871 	bl	8008858 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	330b      	adds	r3, #11
 800877a:	78db      	ldrb	r3, [r3, #3]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3720      	adds	r7, #32
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	4a08      	ldr	r2, [pc, #32]	; (80087b4 <shci_init+0x30>)
 8008794:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008796:	4a08      	ldr	r2, [pc, #32]	; (80087b8 <shci_init+0x34>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800879c:	4806      	ldr	r0, [pc, #24]	; (80087b8 <shci_init+0x34>)
 800879e:	f000 f911 	bl	80089c4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 f894 	bl	80088d4 <TlInit>

  return;
 80087ac:	bf00      	nop
}
 80087ae:	3708      	adds	r7, #8
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	20000328 	.word	0x20000328
 80087b8:	20000308 	.word	0x20000308

080087bc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80087c2:	4822      	ldr	r0, [pc, #136]	; (800884c <shci_user_evt_proc+0x90>)
 80087c4:	f000 f922 	bl	8008a0c <LST_is_empty>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d12b      	bne.n	8008826 <shci_user_evt_proc+0x6a>
 80087ce:	4b20      	ldr	r3, [pc, #128]	; (8008850 <shci_user_evt_proc+0x94>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d027      	beq.n	8008826 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	4619      	mov	r1, r3
 80087dc:	481b      	ldr	r0, [pc, #108]	; (800884c <shci_user_evt_proc+0x90>)
 80087de:	f000 f9a4 	bl	8008b2a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80087e2:	4b1c      	ldr	r3, [pc, #112]	; (8008854 <shci_user_evt_proc+0x98>)
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00c      	beq.n	8008804 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80087ee:	2301      	movs	r3, #1
 80087f0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80087f2:	4b18      	ldr	r3, [pc, #96]	; (8008854 <shci_user_evt_proc+0x98>)
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	1d3a      	adds	r2, r7, #4
 80087f8:	4610      	mov	r0, r2
 80087fa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80087fc:	793a      	ldrb	r2, [r7, #4]
 80087fe:	4b14      	ldr	r3, [pc, #80]	; (8008850 <shci_user_evt_proc+0x94>)
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	e002      	b.n	800880a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008804:	4b12      	ldr	r3, [pc, #72]	; (8008850 <shci_user_evt_proc+0x94>)
 8008806:	2201      	movs	r2, #1
 8008808:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800880a:	4b11      	ldr	r3, [pc, #68]	; (8008850 <shci_user_evt_proc+0x94>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fc3f 	bl	8009098 <TL_MM_EvtDone>
 800881a:	e004      	b.n	8008826 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	4619      	mov	r1, r3
 8008820:	480a      	ldr	r0, [pc, #40]	; (800884c <shci_user_evt_proc+0x90>)
 8008822:	f000 f915 	bl	8008a50 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008826:	4809      	ldr	r0, [pc, #36]	; (800884c <shci_user_evt_proc+0x90>)
 8008828:	f000 f8f0 	bl	8008a0c <LST_is_empty>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d107      	bne.n	8008842 <shci_user_evt_proc+0x86>
 8008832:	4b07      	ldr	r3, [pc, #28]	; (8008850 <shci_user_evt_proc+0x94>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800883a:	4804      	ldr	r0, [pc, #16]	; (800884c <shci_user_evt_proc+0x90>)
 800883c:	f7f7 ff22 	bl	8000684 <shci_notify_asynch_evt>
  }


  return;
 8008840:	bf00      	nop
 8008842:	bf00      	nop
}
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}
 800884a:	bf00      	nop
 800884c:	2000028c 	.word	0x2000028c
 8008850:	2000029c 	.word	0x2000029c
 8008854:	20000308 	.word	0x20000308

08008858 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	60ba      	str	r2, [r7, #8]
 8008860:	607b      	str	r3, [r7, #4]
 8008862:	4603      	mov	r3, r0
 8008864:	81fb      	strh	r3, [r7, #14]
 8008866:	460b      	mov	r3, r1
 8008868:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800886a:	2000      	movs	r0, #0
 800886c:	f000 f864 	bl	8008938 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008870:	4b16      	ldr	r3, [pc, #88]	; (80088cc <shci_send+0x74>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	89fa      	ldrh	r2, [r7, #14]
 8008876:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800887a:	4b14      	ldr	r3, [pc, #80]	; (80088cc <shci_send+0x74>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	7b7a      	ldrb	r2, [r7, #13]
 8008880:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008882:	4b12      	ldr	r3, [pc, #72]	; (80088cc <shci_send+0x74>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	330c      	adds	r3, #12
 8008888:	7b7a      	ldrb	r2, [r7, #13]
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	4618      	mov	r0, r3
 800888e:	f000 ff85 	bl	800979c <memcpy>

  shciContext.io.Send(0,0);
 8008892:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <shci_send+0x78>)
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2100      	movs	r1, #0
 8008898:	2000      	movs	r0, #0
 800889a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800889c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80088a0:	f7f7 ff07 	bl	80006b2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f103 0008 	add.w	r0, r3, #8
 80088aa:	4b08      	ldr	r3, [pc, #32]	; (80088cc <shci_send+0x74>)
 80088ac:	6819      	ldr	r1, [r3, #0]
 80088ae:	4b07      	ldr	r3, [pc, #28]	; (80088cc <shci_send+0x74>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	789b      	ldrb	r3, [r3, #2]
 80088b4:	3303      	adds	r3, #3
 80088b6:	461a      	mov	r2, r3
 80088b8:	f000 ff70 	bl	800979c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80088bc:	2001      	movs	r0, #1
 80088be:	f000 f83b 	bl	8008938 <Cmd_SetStatus>

  return;
 80088c2:	bf00      	nop
}
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20000298 	.word	0x20000298
 80088d0:	20000308 	.word	0x20000308

080088d4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80088dc:	4a10      	ldr	r2, [pc, #64]	; (8008920 <TlInit+0x4c>)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80088e2:	4810      	ldr	r0, [pc, #64]	; (8008924 <TlInit+0x50>)
 80088e4:	f000 f882 	bl	80089ec <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80088e8:	2001      	movs	r0, #1
 80088ea:	f000 f825 	bl	8008938 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80088ee:	4b0e      	ldr	r3, [pc, #56]	; (8008928 <TlInit+0x54>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80088f4:	4b0d      	ldr	r3, [pc, #52]	; (800892c <TlInit+0x58>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00c      	beq.n	8008916 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008900:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <TlInit+0x5c>)
 8008902:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008904:	4b0b      	ldr	r3, [pc, #44]	; (8008934 <TlInit+0x60>)
 8008906:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008908:	4b08      	ldr	r3, [pc, #32]	; (800892c <TlInit+0x58>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f107 020c 	add.w	r2, r7, #12
 8008910:	4610      	mov	r0, r2
 8008912:	4798      	blx	r3
  }

  return;
 8008914:	bf00      	nop
 8008916:	bf00      	nop
}
 8008918:	3718      	adds	r7, #24
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	20000298 	.word	0x20000298
 8008924:	2000028c 	.word	0x2000028c
 8008928:	2000029c 	.word	0x2000029c
 800892c:	20000308 	.word	0x20000308
 8008930:	08008989 	.word	0x08008989
 8008934:	080089a1 	.word	0x080089a1

08008938 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10b      	bne.n	8008960 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008948:	4b0d      	ldr	r3, [pc, #52]	; (8008980 <Cmd_SetStatus+0x48>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d003      	beq.n	8008958 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008950:	4b0b      	ldr	r3, [pc, #44]	; (8008980 <Cmd_SetStatus+0x48>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2000      	movs	r0, #0
 8008956:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008958:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <Cmd_SetStatus+0x4c>)
 800895a:	2200      	movs	r2, #0
 800895c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800895e:	e00b      	b.n	8008978 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008960:	4b08      	ldr	r3, [pc, #32]	; (8008984 <Cmd_SetStatus+0x4c>)
 8008962:	2201      	movs	r2, #1
 8008964:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <Cmd_SetStatus+0x48>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800896e:	4b04      	ldr	r3, [pc, #16]	; (8008980 <Cmd_SetStatus+0x48>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2001      	movs	r0, #1
 8008974:	4798      	blx	r3
  return;
 8008976:	bf00      	nop
 8008978:	bf00      	nop
}
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20000328 	.word	0x20000328
 8008984:	20000294 	.word	0x20000294

08008988 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008990:	2000      	movs	r0, #0
 8008992:	f7f7 fe83 	bl	800069c <shci_cmd_resp_release>

  return;
 8008996:	bf00      	nop
}
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
	...

080089a0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80089a8:	6879      	ldr	r1, [r7, #4]
 80089aa:	4805      	ldr	r0, [pc, #20]	; (80089c0 <TlUserEvtReceived+0x20>)
 80089ac:	f000 f876 	bl	8008a9c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80089b0:	4803      	ldr	r0, [pc, #12]	; (80089c0 <TlUserEvtReceived+0x20>)
 80089b2:	f7f7 fe67 	bl	8000684 <shci_notify_asynch_evt>

  return;
 80089b6:	bf00      	nop
}
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	2000028c 	.word	0x2000028c

080089c4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a05      	ldr	r2, [pc, #20]	; (80089e4 <shci_register_io_bus+0x20>)
 80089d0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a04      	ldr	r2, [pc, #16]	; (80089e8 <shci_register_io_bus+0x24>)
 80089d6:	611a      	str	r2, [r3, #16]

  return;
 80089d8:	bf00      	nop
}
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	08008f25 	.word	0x08008f25
 80089e8:	08008f79 	.word	0x08008f79

080089ec <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	605a      	str	r2, [r3, #4]
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a14:	f3ef 8310 	mrs	r3, PRIMASK
 8008a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a1e:	b672      	cpsid	i
}
 8008a20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d102      	bne.n	8008a32 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	75fb      	strb	r3, [r7, #23]
 8008a30:	e001      	b.n	8008a36 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	75fb      	strb	r3, [r7, #23]
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f383 8810 	msr	PRIMASK, r3
}
 8008a40:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a60:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a64:	b672      	cpsid	i
}
 8008a66:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	605a      	str	r2, [r3, #4]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f383 8810 	msr	PRIMASK, r3
}
 8008a8e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a90:	bf00      	nop
 8008a92:	371c      	adds	r7, #28
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8008aaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aac:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008aae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ab0:	b672      	cpsid	i
}
 8008ab2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	683a      	ldr	r2, [r7, #0]
 8008ac6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	683a      	ldr	r2, [r7, #0]
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	f383 8810 	msr	PRIMASK, r3
}
 8008ada:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008adc:	bf00      	nop
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af0:	f3ef 8310 	mrs	r3, PRIMASK
 8008af4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008af6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008af8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008afa:	b672      	cpsid	i
}
 8008afc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6812      	ldr	r2, [r2, #0]
 8008b06:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6852      	ldr	r2, [r2, #4]
 8008b10:	605a      	str	r2, [r3, #4]
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f383 8810 	msr	PRIMASK, r3
}
 8008b1c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b1e:	bf00      	nop
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b086      	sub	sp, #24
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
 8008b32:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b34:	f3ef 8310 	mrs	r3, PRIMASK
 8008b38:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b3e:	b672      	cpsid	i
}
 8008b40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff ffca 	bl	8008ae8 <LST_remove_node>
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f383 8810 	msr	PRIMASK, r3
}
 8008b5e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008b60:	bf00      	nop
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
  return;
 8008b6c:	bf00      	nop
}
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <BLS_Init>:

__weak void BLS_Init( void )
{
 8008b76:	b480      	push	{r7}
 8008b78:	af00      	add	r7, sp, #0
  return;
 8008b7a:	bf00      	nop
}
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8008b84:	b480      	push	{r7}
 8008b86:	af00      	add	r7, sp, #0
  return;
 8008b88:	bf00      	nop
}
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <DIS_Init>:
__weak void DIS_Init( void )
{
 8008b92:	b480      	push	{r7}
 8008b94:	af00      	add	r7, sp, #0
  return;
 8008b96:	bf00      	nop
}
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	af00      	add	r7, sp, #0
  return;
 8008ba4:	bf00      	nop
}
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr

08008bae <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008bae:	b480      	push	{r7}
 8008bb0:	af00      	add	r7, sp, #0
  return;
 8008bb2:	bf00      	nop
}
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <HRS_Init>:
__weak void HRS_Init( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  return;
 8008bc0:	bf00      	nop
}
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <HTS_Init>:
__weak void HTS_Init( void )
{
 8008bca:	b480      	push	{r7}
 8008bcc:	af00      	add	r7, sp, #0
  return;
 8008bce:	bf00      	nop
}
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <IAS_Init>:
__weak void IAS_Init( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  return;
 8008bdc:	bf00      	nop
}
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <LLS_Init>:
__weak void LLS_Init( void )
{
 8008be6:	b480      	push	{r7}
 8008be8:	af00      	add	r7, sp, #0
  return;
 8008bea:	bf00      	nop
}
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <TPS_Init>:
__weak void TPS_Init( void )
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	af00      	add	r7, sp, #0
  return;
 8008bf8:	bf00      	nop
}
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8008c02:	b480      	push	{r7}
 8008c04:	af00      	add	r7, sp, #0
  return;
 8008c06:	bf00      	nop
}
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8008c10:	b480      	push	{r7}
 8008c12:	af00      	add	r7, sp, #0
  return;
 8008c14:	bf00      	nop
}
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <MESH_Init>:
__weak void MESH_Init( void )
{
 8008c1e:	b480      	push	{r7}
 8008c20:	af00      	add	r7, sp, #0
  return;
 8008c22:	bf00      	nop
}
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	af00      	add	r7, sp, #0
  return;
 8008c30:	bf00      	nop
}
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	af00      	add	r7, sp, #0
  return;
 8008c3e:	bf00      	nop
}
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008c4c:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <SVCCTL_Init+0x18>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008c52:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <SVCCTL_Init+0x1c>)
 8008c54:	2200      	movs	r2, #0
 8008c56:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008c58:	f000 f806 	bl	8008c68 <SVCCTL_SvcInit>

  return;
 8008c5c:	bf00      	nop
}
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000268 	.word	0x20000268
 8008c64:	20000288 	.word	0x20000288

08008c68 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  BAS_Init();
 8008c6c:	f7ff ff7c 	bl	8008b68 <BAS_Init>

  BLS_Init();
 8008c70:	f7ff ff81 	bl	8008b76 <BLS_Init>

  CRS_STM_Init();
 8008c74:	f7ff ff86 	bl	8008b84 <CRS_STM_Init>

  DIS_Init();
 8008c78:	f7ff ff8b 	bl	8008b92 <DIS_Init>

  EDS_STM_Init();
 8008c7c:	f7ff ff90 	bl	8008ba0 <EDS_STM_Init>

  HIDS_Init();
 8008c80:	f7ff ff95 	bl	8008bae <HIDS_Init>

  HRS_Init();
 8008c84:	f7ff ff9a 	bl	8008bbc <HRS_Init>

  HTS_Init();
 8008c88:	f7ff ff9f 	bl	8008bca <HTS_Init>

  IAS_Init();
 8008c8c:	f7ff ffa4 	bl	8008bd8 <IAS_Init>

  LLS_Init();
 8008c90:	f7ff ffa9 	bl	8008be6 <LLS_Init>

  TPS_Init();
 8008c94:	f7ff ffae 	bl	8008bf4 <TPS_Init>

  MOTENV_STM_Init();
 8008c98:	f7ff ffb3 	bl	8008c02 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008c9c:	f7ff fc82 	bl	80085a4 <P2PS_STM_Init>

  OTAS_STM_Init();
 8008ca0:	f7ff ffb6 	bl	8008c10 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008ca4:	f7ff ffc2 	bl	8008c2c <BVOPUS_STM_Init>

  MESH_Init();
 8008ca8:	f7ff ffb9 	bl	8008c1e <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008cac:	f7ff ffc5 	bl	8008c3a <SVCCTL_InitCustomSvc>
  
  return;
 8008cb0:	bf00      	nop
}
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008cbc:	4b09      	ldr	r3, [pc, #36]	; (8008ce4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008cbe:	7f1b      	ldrb	r3, [r3, #28]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	4a08      	ldr	r2, [pc, #32]	; (8008ce4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008cca:	4b06      	ldr	r3, [pc, #24]	; (8008ce4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008ccc:	7f1b      	ldrb	r3, [r3, #28]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	4b04      	ldr	r3, [pc, #16]	; (8008ce4 <SVCCTL_RegisterSvcHandler+0x30>)
 8008cd4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008cd6:	bf00      	nop
}
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	20000268 	.word	0x20000268

08008ce8 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2bff      	cmp	r3, #255	; 0xff
 8008d00:	d125      	bne.n	8008d4e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	3302      	adds	r3, #2
 8008d06:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	881b      	ldrh	r3, [r3, #0]
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008d16:	d118      	bne.n	8008d4a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008d18:	2300      	movs	r3, #0
 8008d1a:	757b      	strb	r3, [r7, #21]
 8008d1c:	e00d      	b.n	8008d3a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008d1e:	7d7b      	ldrb	r3, [r7, #21]
 8008d20:	4a1a      	ldr	r2, [pc, #104]	; (8008d8c <SVCCTL_UserEvtRx+0xa4>)
 8008d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	4798      	blx	r3
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d108      	bne.n	8008d46 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008d34:	7d7b      	ldrb	r3, [r7, #21]
 8008d36:	3301      	adds	r3, #1
 8008d38:	757b      	strb	r3, [r7, #21]
 8008d3a:	4b14      	ldr	r3, [pc, #80]	; (8008d8c <SVCCTL_UserEvtRx+0xa4>)
 8008d3c:	7f1b      	ldrb	r3, [r3, #28]
 8008d3e:	7d7a      	ldrb	r2, [r7, #21]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d3ec      	bcc.n	8008d1e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008d44:	e002      	b.n	8008d4c <SVCCTL_UserEvtRx+0x64>
              break;
 8008d46:	bf00      	nop
          break;
 8008d48:	e000      	b.n	8008d4c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008d4a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008d4c:	e000      	b.n	8008d50 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008d4e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d00f      	beq.n	8008d76 <SVCCTL_UserEvtRx+0x8e>
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	dc10      	bgt.n	8008d7c <SVCCTL_UserEvtRx+0x94>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <SVCCTL_UserEvtRx+0x7c>
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d006      	beq.n	8008d70 <SVCCTL_UserEvtRx+0x88>
 8008d62:	e00b      	b.n	8008d7c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7f9 fbe3 	bl	8002530 <SVCCTL_App_Notification>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	75bb      	strb	r3, [r7, #22]
      break;
 8008d6e:	e008      	b.n	8008d82 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008d70:	2301      	movs	r3, #1
 8008d72:	75bb      	strb	r3, [r7, #22]
      break;
 8008d74:	e005      	b.n	8008d82 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008d76:	2300      	movs	r3, #0
 8008d78:	75bb      	strb	r3, [r7, #22]
      break;
 8008d7a:	e002      	b.n	8008d82 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	75bb      	strb	r3, [r7, #22]
      break;
 8008d80:	bf00      	nop
  }

  return (return_status);
 8008d82:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20000268 	.word	0x20000268

08008d90 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008d94:	f7fa f9de 	bl	8003154 <HW_IPCC_Enable>

  return;
 8008d98:	bf00      	nop
}
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <TL_Init>:


void TL_Init( void )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008da0:	4b10      	ldr	r3, [pc, #64]	; (8008de4 <TL_Init+0x48>)
 8008da2:	4a11      	ldr	r2, [pc, #68]	; (8008de8 <TL_Init+0x4c>)
 8008da4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <TL_Init+0x48>)
 8008da8:	4a10      	ldr	r2, [pc, #64]	; (8008dec <TL_Init+0x50>)
 8008daa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008dac:	4b0d      	ldr	r3, [pc, #52]	; (8008de4 <TL_Init+0x48>)
 8008dae:	4a10      	ldr	r2, [pc, #64]	; (8008df0 <TL_Init+0x54>)
 8008db0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008db2:	4b0c      	ldr	r3, [pc, #48]	; (8008de4 <TL_Init+0x48>)
 8008db4:	4a0f      	ldr	r2, [pc, #60]	; (8008df4 <TL_Init+0x58>)
 8008db6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <TL_Init+0x48>)
 8008dba:	4a0f      	ldr	r2, [pc, #60]	; (8008df8 <TL_Init+0x5c>)
 8008dbc:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008dbe:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <TL_Init+0x48>)
 8008dc0:	4a0e      	ldr	r2, [pc, #56]	; (8008dfc <TL_Init+0x60>)
 8008dc2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008dc4:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <TL_Init+0x48>)
 8008dc6:	4a0e      	ldr	r2, [pc, #56]	; (8008e00 <TL_Init+0x64>)
 8008dc8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008dca:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <TL_Init+0x48>)
 8008dcc:	4a0d      	ldr	r2, [pc, #52]	; (8008e04 <TL_Init+0x68>)
 8008dce:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <TL_Init+0x48>)
 8008dd2:	4a0d      	ldr	r2, [pc, #52]	; (8008e08 <TL_Init+0x6c>)
 8008dd4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008dd6:	4b03      	ldr	r3, [pc, #12]	; (8008de4 <TL_Init+0x48>)
 8008dd8:	4a0c      	ldr	r2, [pc, #48]	; (8008e0c <TL_Init+0x70>)
 8008dda:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008ddc:	f7fa f9ce 	bl	800317c <HW_IPCC_Init>

  return;
 8008de0:	bf00      	nop
}
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20030000 	.word	0x20030000
 8008de8:	20030134 	.word	0x20030134
 8008dec:	20030154 	.word	0x20030154
 8008df0:	20030164 	.word	0x20030164
 8008df4:	20030170 	.word	0x20030170
 8008df8:	20030178 	.word	0x20030178
 8008dfc:	20030180 	.word	0x20030180
 8008e00:	20030188 	.word	0x20030188
 8008e04:	200301a4 	.word	0x200301a4
 8008e08:	200301a8 	.word	0x200301a8
 8008e0c:	200301b4 	.word	0x200301b4

08008e10 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008e1c:	4811      	ldr	r0, [pc, #68]	; (8008e64 <TL_BLE_Init+0x54>)
 8008e1e:	f7ff fde5 	bl	80089ec <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008e22:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <TL_BLE_Init+0x58>)
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	4a0c      	ldr	r2, [pc, #48]	; (8008e6c <TL_BLE_Init+0x5c>)
 8008e3c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	4a08      	ldr	r2, [pc, #32]	; (8008e64 <TL_BLE_Init+0x54>)
 8008e42:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008e44:	f7fa f9b0 	bl	80031a8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a08      	ldr	r2, [pc, #32]	; (8008e70 <TL_BLE_Init+0x60>)
 8008e4e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4a07      	ldr	r2, [pc, #28]	; (8008e74 <TL_BLE_Init+0x64>)
 8008e56:	6013      	str	r3, [r2, #0]

  return 0;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200301d0 	.word	0x200301d0
 8008e68:	20030000 	.word	0x20030000
 8008e6c:	20030a48 	.word	0x20030a48
 8008e70:	20000334 	.word	0x20000334
 8008e74:	20000338 	.word	0x20000338

08008e78 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008e84:	4b09      	ldr	r3, [pc, #36]	; (8008eac <TL_BLE_SendCmd+0x34>)
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008e8e:	4b07      	ldr	r3, [pc, #28]	; (8008eac <TL_BLE_SendCmd+0x34>)
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4619      	mov	r1, r3
 8008e96:	2001      	movs	r0, #1
 8008e98:	f000 f96c 	bl	8009174 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008e9c:	f7fa f98e 	bl	80031bc <HW_IPCC_BLE_SendCmd>

  return 0;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20030000 	.word	0x20030000

08008eb0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008eb6:	e01c      	b.n	8008ef2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008eb8:	1d3b      	adds	r3, r7, #4
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4812      	ldr	r0, [pc, #72]	; (8008f08 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008ebe:	f7ff fe34 	bl	8008b2a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7a5b      	ldrb	r3, [r3, #9]
 8008ec6:	2b0f      	cmp	r3, #15
 8008ec8:	d003      	beq.n	8008ed2 <HW_IPCC_BLE_RxEvtNot+0x22>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7a5b      	ldrb	r3, [r3, #9]
 8008ece:	2b0e      	cmp	r3, #14
 8008ed0:	d105      	bne.n	8008ede <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	2002      	movs	r0, #2
 8008ed8:	f000 f94c 	bl	8009174 <OutputDbgTrace>
 8008edc:	e004      	b.n	8008ee8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	2003      	movs	r0, #3
 8008ee4:	f000 f946 	bl	8009174 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008ee8:	4b08      	ldr	r3, [pc, #32]	; (8008f0c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008ef2:	4805      	ldr	r0, [pc, #20]	; (8008f08 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008ef4:	f7ff fd8a 	bl	8008a0c <LST_is_empty>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0dc      	beq.n	8008eb8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008efe:	bf00      	nop
}
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	200301d0 	.word	0x200301d0
 8008f0c:	20000334 	.word	0x20000334

08008f10 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008f14:	4b02      	ldr	r3, [pc, #8]	; (8008f20 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4798      	blx	r3

  return;
 8008f1a:	bf00      	nop
}
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	20000338 	.word	0x20000338

08008f24 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008f30:	480d      	ldr	r0, [pc, #52]	; (8008f68 <TL_SYS_Init+0x44>)
 8008f32:	f7ff fd5b 	bl	80089ec <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008f36:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <TL_SYS_Init+0x48>)
 8008f38:	68db      	ldr	r3, [r3, #12]
 8008f3a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	689a      	ldr	r2, [r3, #8]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4a08      	ldr	r2, [pc, #32]	; (8008f68 <TL_SYS_Init+0x44>)
 8008f48:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008f4a:	f7fa f959 	bl	8003200 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a07      	ldr	r2, [pc, #28]	; (8008f70 <TL_SYS_Init+0x4c>)
 8008f54:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	4a06      	ldr	r2, [pc, #24]	; (8008f74 <TL_SYS_Init+0x50>)
 8008f5c:	6013      	str	r3, [r2, #0]

  return 0;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	200301d8 	.word	0x200301d8
 8008f6c:	20030000 	.word	0x20030000
 8008f70:	2000033c 	.word	0x2000033c
 8008f74:	20000340 	.word	0x20000340

08008f78 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	460b      	mov	r3, r1
 8008f82:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008f84:	4b09      	ldr	r3, [pc, #36]	; (8008fac <TL_SYS_SendCmd+0x34>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008f8e:	4b07      	ldr	r3, [pc, #28]	; (8008fac <TL_SYS_SendCmd+0x34>)
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4619      	mov	r1, r3
 8008f96:	2004      	movs	r0, #4
 8008f98:	f000 f8ec 	bl	8009174 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008f9c:	f7fa f93a 	bl	8003214 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20030000 	.word	0x20030000

08008fb0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008fb4:	4b07      	ldr	r3, [pc, #28]	; (8008fd4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	2005      	movs	r0, #5
 8008fbe:	f000 f8d9 	bl	8009174 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008fc2:	4b05      	ldr	r3, [pc, #20]	; (8008fd8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a03      	ldr	r2, [pc, #12]	; (8008fd4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008fc8:	68d2      	ldr	r2, [r2, #12]
 8008fca:	6812      	ldr	r2, [r2, #0]
 8008fcc:	4610      	mov	r0, r2
 8008fce:	4798      	blx	r3

  return;
 8008fd0:	bf00      	nop
}
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	20030000 	.word	0x20030000
 8008fd8:	2000033c 	.word	0x2000033c

08008fdc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008fe2:	e00e      	b.n	8009002 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008fe4:	1d3b      	adds	r3, r7, #4
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	480b      	ldr	r0, [pc, #44]	; (8009018 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008fea:	f7ff fd9e 	bl	8008b2a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	2006      	movs	r0, #6
 8008ff4:	f000 f8be 	bl	8009174 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008ff8:	4b08      	ldr	r3, [pc, #32]	; (800901c <HW_IPCC_SYS_EvtNot+0x40>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	4610      	mov	r0, r2
 8009000:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009002:	4805      	ldr	r0, [pc, #20]	; (8009018 <HW_IPCC_SYS_EvtNot+0x3c>)
 8009004:	f7ff fd02 	bl	8008a0c <LST_is_empty>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0ea      	beq.n	8008fe4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800900e:	bf00      	nop
}
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	200301d8 	.word	0x200301d8
 800901c:	20000340 	.word	0x20000340

08009020 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009028:	4817      	ldr	r0, [pc, #92]	; (8009088 <TL_MM_Init+0x68>)
 800902a:	f7ff fcdf 	bl	80089ec <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800902e:	4817      	ldr	r0, [pc, #92]	; (800908c <TL_MM_Init+0x6c>)
 8009030:	f7ff fcdc 	bl	80089ec <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009034:	4b16      	ldr	r3, [pc, #88]	; (8009090 <TL_MM_Init+0x70>)
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	4a16      	ldr	r2, [pc, #88]	; (8009094 <TL_MM_Init+0x74>)
 800903a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800903c:	4b15      	ldr	r3, [pc, #84]	; (8009094 <TL_MM_Init+0x74>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	6892      	ldr	r2, [r2, #8]
 8009044:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009046:	4b13      	ldr	r3, [pc, #76]	; (8009094 <TL_MM_Init+0x74>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	68d2      	ldr	r2, [r2, #12]
 800904e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009050:	4b10      	ldr	r3, [pc, #64]	; (8009094 <TL_MM_Init+0x74>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a0c      	ldr	r2, [pc, #48]	; (8009088 <TL_MM_Init+0x68>)
 8009056:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009058:	4b0e      	ldr	r3, [pc, #56]	; (8009094 <TL_MM_Init+0x74>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6812      	ldr	r2, [r2, #0]
 8009060:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009062:	4b0c      	ldr	r3, [pc, #48]	; (8009094 <TL_MM_Init+0x74>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	6852      	ldr	r2, [r2, #4]
 800906a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800906c:	4b09      	ldr	r3, [pc, #36]	; (8009094 <TL_MM_Init+0x74>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	6912      	ldr	r2, [r2, #16]
 8009074:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009076:	4b07      	ldr	r3, [pc, #28]	; (8009094 <TL_MM_Init+0x74>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	6952      	ldr	r2, [r2, #20]
 800907e:	619a      	str	r2, [r3, #24]

  return;
 8009080:	bf00      	nop
}
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	200301c0 	.word	0x200301c0
 800908c:	2000032c 	.word	0x2000032c
 8009090:	20030000 	.word	0x20030000
 8009094:	20000344 	.word	0x20000344

08009098 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80090a0:	6879      	ldr	r1, [r7, #4]
 80090a2:	4807      	ldr	r0, [pc, #28]	; (80090c0 <TL_MM_EvtDone+0x28>)
 80090a4:	f7ff fcfa 	bl	8008a9c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	2000      	movs	r0, #0
 80090ac:	f000 f862 	bl	8009174 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80090b0:	4804      	ldr	r0, [pc, #16]	; (80090c4 <TL_MM_EvtDone+0x2c>)
 80090b2:	f7fa f8d5 	bl	8003260 <HW_IPCC_MM_SendFreeBuf>

  return;
 80090b6:	bf00      	nop
}
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	2000032c 	.word	0x2000032c
 80090c4:	080090c9 	.word	0x080090c9

080090c8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80090ce:	e00c      	b.n	80090ea <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80090d0:	1d3b      	adds	r3, r7, #4
 80090d2:	4619      	mov	r1, r3
 80090d4:	480a      	ldr	r0, [pc, #40]	; (8009100 <SendFreeBuf+0x38>)
 80090d6:	f7ff fd28 	bl	8008b2a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80090da:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <SendFreeBuf+0x3c>)
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	4611      	mov	r1, r2
 80090e4:	4618      	mov	r0, r3
 80090e6:	f7ff fcd9 	bl	8008a9c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80090ea:	4805      	ldr	r0, [pc, #20]	; (8009100 <SendFreeBuf+0x38>)
 80090ec:	f7ff fc8e 	bl	8008a0c <LST_is_empty>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0ec      	beq.n	80090d0 <SendFreeBuf+0x8>
  }

  return;
 80090f6:	bf00      	nop
}
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	2000032c 	.word	0x2000032c
 8009104:	20030000 	.word	0x20030000

08009108 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800910c:	4805      	ldr	r0, [pc, #20]	; (8009124 <TL_TRACES_Init+0x1c>)
 800910e:	f7ff fc6d 	bl	80089ec <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009112:	4b05      	ldr	r3, [pc, #20]	; (8009128 <TL_TRACES_Init+0x20>)
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	4a03      	ldr	r2, [pc, #12]	; (8009124 <TL_TRACES_Init+0x1c>)
 8009118:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800911a:	f7fa f8d7 	bl	80032cc <HW_IPCC_TRACES_Init>

  return;
 800911e:	bf00      	nop
}
 8009120:	bd80      	pop	{r7, pc}
 8009122:	bf00      	nop
 8009124:	200301c8 	.word	0x200301c8
 8009128:	20030000 	.word	0x20030000

0800912c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009132:	e008      	b.n	8009146 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009134:	1d3b      	adds	r3, r7, #4
 8009136:	4619      	mov	r1, r3
 8009138:	4808      	ldr	r0, [pc, #32]	; (800915c <HW_IPCC_TRACES_EvtNot+0x30>)
 800913a:	f7ff fcf6 	bl	8008b2a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4618      	mov	r0, r3
 8009142:	f000 f80d 	bl	8009160 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009146:	4805      	ldr	r0, [pc, #20]	; (800915c <HW_IPCC_TRACES_EvtNot+0x30>)
 8009148:	f7ff fc60 	bl	8008a0c <LST_is_empty>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0f0      	beq.n	8009134 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009152:	bf00      	nop
}
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	200301c8 	.word	0x200301c8

08009160 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	2b06      	cmp	r3, #6
 8009184:	d845      	bhi.n	8009212 <OutputDbgTrace+0x9e>
 8009186:	a201      	add	r2, pc, #4	; (adr r2, 800918c <OutputDbgTrace+0x18>)
 8009188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918c:	080091a9 	.word	0x080091a9
 8009190:	080091cd 	.word	0x080091cd
 8009194:	080091d3 	.word	0x080091d3
 8009198:	080091e7 	.word	0x080091e7
 800919c:	080091f3 	.word	0x080091f3
 80091a0:	080091f9 	.word	0x080091f9
 80091a4:	08009207 	.word	0x08009207
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	7a5b      	ldrb	r3, [r3, #9]
 80091b0:	2bff      	cmp	r3, #255	; 0xff
 80091b2:	d005      	beq.n	80091c0 <OutputDbgTrace+0x4c>
 80091b4:	2bff      	cmp	r3, #255	; 0xff
 80091b6:	dc05      	bgt.n	80091c4 <OutputDbgTrace+0x50>
 80091b8:	2b0e      	cmp	r3, #14
 80091ba:	d005      	beq.n	80091c8 <OutputDbgTrace+0x54>
 80091bc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80091be:	e001      	b.n	80091c4 <OutputDbgTrace+0x50>
          break;
 80091c0:	bf00      	nop
 80091c2:	e027      	b.n	8009214 <OutputDbgTrace+0xa0>
          break;
 80091c4:	bf00      	nop
 80091c6:	e025      	b.n	8009214 <OutputDbgTrace+0xa0>
          break;
 80091c8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80091ca:	e023      	b.n	8009214 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80091d0:	e020      	b.n	8009214 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	7a5b      	ldrb	r3, [r3, #9]
 80091da:	2b0e      	cmp	r3, #14
 80091dc:	d001      	beq.n	80091e2 <OutputDbgTrace+0x6e>
 80091de:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80091e0:	e000      	b.n	80091e4 <OutputDbgTrace+0x70>
          break;
 80091e2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80091e4:	e016      	b.n	8009214 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	7a5b      	ldrb	r3, [r3, #9]
 80091ee:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80091f0:	e010      	b.n	8009214 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80091f6:	e00d      	b.n	8009214 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	7a5b      	ldrb	r3, [r3, #9]
 8009200:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009202:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009204:	e006      	b.n	8009214 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	7a5b      	ldrb	r3, [r3, #9]
 800920e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009210:	e000      	b.n	8009214 <OutputDbgTrace+0xa0>

    default:
      break;
 8009212:	bf00      	nop
  }

  return;
 8009214:	bf00      	nop
}
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <UTIL_LPM_Init+0x1c>)
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800922a:	4b05      	ldr	r3, [pc, #20]	; (8009240 <UTIL_LPM_Init+0x20>)
 800922c:	2200      	movs	r2, #0
 800922e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009230:	bf00      	nop
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000348 	.word	0x20000348
 8009240:	2000034c 	.word	0x2000034c

08009244 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	460b      	mov	r3, r1
 800924e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009250:	f3ef 8310 	mrs	r3, PRIMASK
 8009254:	613b      	str	r3, [r7, #16]
  return(result);
 8009256:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009258:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800925a:	b672      	cpsid	i
}
 800925c:	bf00      	nop
  
  switch(state)
 800925e:	78fb      	ldrb	r3, [r7, #3]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d008      	beq.n	8009276 <UTIL_LPM_SetOffMode+0x32>
 8009264:	2b01      	cmp	r3, #1
 8009266:	d10e      	bne.n	8009286 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009268:	4b0d      	ldr	r3, [pc, #52]	; (80092a0 <UTIL_LPM_SetOffMode+0x5c>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4313      	orrs	r3, r2
 8009270:	4a0b      	ldr	r2, [pc, #44]	; (80092a0 <UTIL_LPM_SetOffMode+0x5c>)
 8009272:	6013      	str	r3, [r2, #0]
      break;
 8009274:	e008      	b.n	8009288 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	43da      	mvns	r2, r3
 800927a:	4b09      	ldr	r3, [pc, #36]	; (80092a0 <UTIL_LPM_SetOffMode+0x5c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4013      	ands	r3, r2
 8009280:	4a07      	ldr	r2, [pc, #28]	; (80092a0 <UTIL_LPM_SetOffMode+0x5c>)
 8009282:	6013      	str	r3, [r2, #0]
      break;
 8009284:	e000      	b.n	8009288 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009286:	bf00      	nop
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f383 8810 	msr	PRIMASK, r3
}
 8009292:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009294:	bf00      	nop
 8009296:	371c      	adds	r7, #28
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	2000034c 	.word	0x2000034c

080092a4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092aa:	f3ef 8310 	mrs	r3, PRIMASK
 80092ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80092b0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 80092b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80092b4:	b672      	cpsid	i
}
 80092b6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80092b8:	4b12      	ldr	r3, [pc, #72]	; (8009304 <UTIL_LPM_EnterLowPower+0x60>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d006      	beq.n	80092ce <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80092c0:	4b11      	ldr	r3, [pc, #68]	; (8009308 <UTIL_LPM_EnterLowPower+0x64>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80092c6:	4b10      	ldr	r3, [pc, #64]	; (8009308 <UTIL_LPM_EnterLowPower+0x64>)
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	4798      	blx	r3
 80092cc:	e010      	b.n	80092f0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80092ce:	4b0f      	ldr	r3, [pc, #60]	; (800930c <UTIL_LPM_EnterLowPower+0x68>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d006      	beq.n	80092e4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 80092d6:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <UTIL_LPM_EnterLowPower+0x64>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80092dc:	4b0a      	ldr	r3, [pc, #40]	; (8009308 <UTIL_LPM_EnterLowPower+0x64>)
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	4798      	blx	r3
 80092e2:	e005      	b.n	80092f0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 80092e4:	4b08      	ldr	r3, [pc, #32]	; (8009308 <UTIL_LPM_EnterLowPower+0x64>)
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80092ea:	4b07      	ldr	r3, [pc, #28]	; (8009308 <UTIL_LPM_EnterLowPower+0x64>)
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	4798      	blx	r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f383 8810 	msr	PRIMASK, r3
}
 80092fa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80092fc:	bf00      	nop
 80092fe:	3710      	adds	r7, #16
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}
 8009304:	20000348 	.word	0x20000348
 8009308:	0800af80 	.word	0x0800af80
 800930c:	2000034c 	.word	0x2000034c

08009310 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08c      	sub	sp, #48	; 0x30
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009318:	4b67      	ldr	r3, [pc, #412]	; (80094b8 <UTIL_SEQ_Run+0x1a8>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800931e:	4b66      	ldr	r3, [pc, #408]	; (80094b8 <UTIL_SEQ_Run+0x1a8>)
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4013      	ands	r3, r2
 8009326:	4a64      	ldr	r2, [pc, #400]	; (80094b8 <UTIL_SEQ_Run+0x1a8>)
 8009328:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800932a:	e083      	b.n	8009434 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800932c:	2300      	movs	r3, #0
 800932e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009330:	e002      	b.n	8009338 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8009332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009334:	3301      	adds	r3, #1
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009338:	4a60      	ldr	r2, [pc, #384]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 800933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009340:	4b5f      	ldr	r3, [pc, #380]	; (80094c0 <UTIL_SEQ_Run+0x1b0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	401a      	ands	r2, r3
 8009346:	4b5c      	ldr	r3, [pc, #368]	; (80094b8 <UTIL_SEQ_Run+0x1a8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4013      	ands	r3, r2
 800934c:	2b00      	cmp	r3, #0
 800934e:	d0f0      	beq.n	8009332 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8009350:	4a5a      	ldr	r2, [pc, #360]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009358:	4b59      	ldr	r3, [pc, #356]	; (80094c0 <UTIL_SEQ_Run+0x1b0>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	401a      	ands	r2, r3
 800935e:	4b56      	ldr	r3, [pc, #344]	; (80094b8 <UTIL_SEQ_Run+0x1a8>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4013      	ands	r3, r2
 8009364:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009366:	4a55      	ldr	r2, [pc, #340]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	4413      	add	r3, r2
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009372:	4013      	ands	r3, r2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d106      	bne.n	8009386 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009378:	4a50      	ldr	r2, [pc, #320]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 800937a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937c:	00db      	lsls	r3, r3, #3
 800937e:	4413      	add	r3, r2
 8009380:	f04f 32ff 	mov.w	r2, #4294967295
 8009384:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009386:	4a4d      	ldr	r2, [pc, #308]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 8009388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	4413      	add	r3, r2
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	4013      	ands	r3, r2
 8009394:	4618      	mov	r0, r3
 8009396:	f000 f99d 	bl	80096d4 <SEQ_BitPosition>
 800939a:	4603      	mov	r3, r0
 800939c:	461a      	mov	r2, r3
 800939e:	4b49      	ldr	r3, [pc, #292]	; (80094c4 <UTIL_SEQ_Run+0x1b4>)
 80093a0:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80093a2:	4a46      	ldr	r2, [pc, #280]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	4b45      	ldr	r3, [pc, #276]	; (80094c4 <UTIL_SEQ_Run+0x1b4>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	2101      	movs	r1, #1
 80093b2:	fa01 f303 	lsl.w	r3, r1, r3
 80093b6:	43db      	mvns	r3, r3
 80093b8:	401a      	ands	r2, r3
 80093ba:	4940      	ldr	r1, [pc, #256]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	440b      	add	r3, r1
 80093c2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093c4:	f3ef 8310 	mrs	r3, PRIMASK
 80093c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80093ca:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80093cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80093ce:	b672      	cpsid	i
}
 80093d0:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80093d2:	4b3c      	ldr	r3, [pc, #240]	; (80094c4 <UTIL_SEQ_Run+0x1b4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2201      	movs	r2, #1
 80093d8:	fa02 f303 	lsl.w	r3, r2, r3
 80093dc:	43da      	mvns	r2, r3
 80093de:	4b3a      	ldr	r3, [pc, #232]	; (80094c8 <UTIL_SEQ_Run+0x1b8>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4013      	ands	r3, r2
 80093e4:	4a38      	ldr	r2, [pc, #224]	; (80094c8 <UTIL_SEQ_Run+0x1b8>)
 80093e6:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80093e8:	2302      	movs	r3, #2
 80093ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093ec:	e013      	b.n	8009416 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80093ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093f0:	3b01      	subs	r3, #1
 80093f2:	4a32      	ldr	r2, [pc, #200]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 80093f4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80093f8:	4b32      	ldr	r3, [pc, #200]	; (80094c4 <UTIL_SEQ_Run+0x1b4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2201      	movs	r2, #1
 80093fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009402:	43da      	mvns	r2, r3
 8009404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009406:	3b01      	subs	r3, #1
 8009408:	400a      	ands	r2, r1
 800940a:	492c      	ldr	r1, [pc, #176]	; (80094bc <UTIL_SEQ_Run+0x1ac>)
 800940c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009412:	3b01      	subs	r3, #1
 8009414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1e8      	bne.n	80093ee <UTIL_SEQ_Run+0xde>
 800941c:	6a3b      	ldr	r3, [r7, #32]
 800941e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f383 8810 	msr	PRIMASK, r3
}
 8009426:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009428:	4b26      	ldr	r3, [pc, #152]	; (80094c4 <UTIL_SEQ_Run+0x1b4>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a27      	ldr	r2, [pc, #156]	; (80094cc <UTIL_SEQ_Run+0x1bc>)
 800942e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009432:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8009434:	4b24      	ldr	r3, [pc, #144]	; (80094c8 <UTIL_SEQ_Run+0x1b8>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b21      	ldr	r3, [pc, #132]	; (80094c0 <UTIL_SEQ_Run+0x1b0>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	401a      	ands	r2, r3
 800943e:	4b1e      	ldr	r3, [pc, #120]	; (80094b8 <UTIL_SEQ_Run+0x1a8>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4013      	ands	r3, r2
 8009444:	2b00      	cmp	r3, #0
 8009446:	d007      	beq.n	8009458 <UTIL_SEQ_Run+0x148>
 8009448:	4b21      	ldr	r3, [pc, #132]	; (80094d0 <UTIL_SEQ_Run+0x1c0>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	4b21      	ldr	r3, [pc, #132]	; (80094d4 <UTIL_SEQ_Run+0x1c4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4013      	ands	r3, r2
 8009452:	2b00      	cmp	r3, #0
 8009454:	f43f af6a 	beq.w	800932c <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009458:	4b1a      	ldr	r3, [pc, #104]	; (80094c4 <UTIL_SEQ_Run+0x1b4>)
 800945a:	f04f 32ff 	mov.w	r2, #4294967295
 800945e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009460:	f000 f92a 	bl	80096b8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009464:	f3ef 8310 	mrs	r3, PRIMASK
 8009468:	613b      	str	r3, [r7, #16]
  return(result);
 800946a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800946c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800946e:	b672      	cpsid	i
}
 8009470:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <UTIL_SEQ_Run+0x1b8>)
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	4b12      	ldr	r3, [pc, #72]	; (80094c0 <UTIL_SEQ_Run+0x1b0>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	401a      	ands	r2, r3
 800947c:	4b0e      	ldr	r3, [pc, #56]	; (80094b8 <UTIL_SEQ_Run+0x1a8>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4013      	ands	r3, r2
 8009482:	2b00      	cmp	r3, #0
 8009484:	d108      	bne.n	8009498 <UTIL_SEQ_Run+0x188>
 8009486:	4b12      	ldr	r3, [pc, #72]	; (80094d0 <UTIL_SEQ_Run+0x1c0>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <UTIL_SEQ_Run+0x1c4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4013      	ands	r3, r2
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8009494:	f7f7 f8e3 	bl	800065e <UTIL_SEQ_Idle>
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f383 8810 	msr	PRIMASK, r3
}
 80094a2:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 80094a4:	f000 f90f 	bl	80096c6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80094a8:	4a03      	ldr	r2, [pc, #12]	; (80094b8 <UTIL_SEQ_Run+0x1a8>)
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	6013      	str	r3, [r2, #0]

  return;
 80094ae:	bf00      	nop
}
 80094b0:	3730      	adds	r7, #48	; 0x30
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	2000004c 	.word	0x2000004c
 80094bc:	200003e0 	.word	0x200003e0
 80094c0:	20000048 	.word	0x20000048
 80094c4:	2000035c 	.word	0x2000035c
 80094c8:	20000350 	.word	0x20000350
 80094cc:	20000360 	.word	0x20000360
 80094d0:	20000354 	.word	0x20000354
 80094d4:	20000358 	.word	0x20000358

080094d8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e4:	f3ef 8310 	mrs	r3, PRIMASK
 80094e8:	617b      	str	r3, [r7, #20]
  return(result);
 80094ea:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80094ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80094ee:	b672      	cpsid	i
}
 80094f0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	f000 f8ee 	bl	80096d4 <SEQ_BitPosition>
 80094f8:	4603      	mov	r3, r0
 80094fa:	4619      	mov	r1, r3
 80094fc:	4a06      	ldr	r2, [pc, #24]	; (8009518 <UTIL_SEQ_RegTask+0x40>)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	f383 8810 	msr	PRIMASK, r3
}
 800950e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009510:	bf00      	nop
}
 8009512:	3720      	adds	r7, #32
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20000360 	.word	0x20000360

0800951c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009526:	f3ef 8310 	mrs	r3, PRIMASK
 800952a:	60fb      	str	r3, [r7, #12]
  return(result);
 800952c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800952e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009530:	b672      	cpsid	i
}
 8009532:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009534:	4b0d      	ldr	r3, [pc, #52]	; (800956c <UTIL_SEQ_SetTask+0x50>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4313      	orrs	r3, r2
 800953c:	4a0b      	ldr	r2, [pc, #44]	; (800956c <UTIL_SEQ_SetTask+0x50>)
 800953e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009540:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <UTIL_SEQ_SetTask+0x54>)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	431a      	orrs	r2, r3
 800954c:	4908      	ldr	r1, [pc, #32]	; (8009570 <UTIL_SEQ_SetTask+0x54>)
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f383 8810 	msr	PRIMASK, r3
}
 800955e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009560:	bf00      	nop
}
 8009562:	371c      	adds	r7, #28
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr
 800956c:	20000350 	.word	0x20000350
 8009570:	200003e0 	.word	0x200003e0

08009574 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800957c:	f3ef 8310 	mrs	r3, PRIMASK
 8009580:	60fb      	str	r3, [r7, #12]
  return(result);
 8009582:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009586:	b672      	cpsid	i
}
 8009588:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	43da      	mvns	r2, r3
 800958e:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <UTIL_SEQ_PauseTask+0x3c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4013      	ands	r3, r2
 8009594:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <UTIL_SEQ_PauseTask+0x3c>)
 8009596:	6013      	str	r3, [r2, #0]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f383 8810 	msr	PRIMASK, r3
}
 80095a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80095a4:	bf00      	nop
}
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	20000048 	.word	0x20000048

080095b4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b087      	sub	sp, #28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095bc:	f3ef 8310 	mrs	r3, PRIMASK
 80095c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80095c2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80095c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095c6:	b672      	cpsid	i
}
 80095c8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80095ca:	4b09      	ldr	r3, [pc, #36]	; (80095f0 <UTIL_SEQ_ResumeTask+0x3c>)
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	4a07      	ldr	r2, [pc, #28]	; (80095f0 <UTIL_SEQ_ResumeTask+0x3c>)
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f383 8810 	msr	PRIMASK, r3
}
 80095e0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80095e2:	bf00      	nop
}
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	20000048 	.word	0x20000048

080095f4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009600:	60fb      	str	r3, [r7, #12]
  return(result);
 8009602:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009606:	b672      	cpsid	i
}
 8009608:	bf00      	nop

  EvtSet |= EvtId_bm;
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <UTIL_SEQ_SetEvt+0x3c>)
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4313      	orrs	r3, r2
 8009612:	4a07      	ldr	r2, [pc, #28]	; (8009630 <UTIL_SEQ_SetEvt+0x3c>)
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f383 8810 	msr	PRIMASK, r3
}
 8009620:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009622:	bf00      	nop
}
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr
 800962e:	bf00      	nop
 8009630:	20000354 	.word	0x20000354

08009634 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800963c:	4b1b      	ldr	r3, [pc, #108]	; (80096ac <UTIL_SEQ_WaitEvt+0x78>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009642:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <UTIL_SEQ_WaitEvt+0x78>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964a:	d102      	bne.n	8009652 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800964c:	2300      	movs	r3, #0
 800964e:	617b      	str	r3, [r7, #20]
 8009650:	e005      	b.n	800965e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8009652:	4b16      	ldr	r3, [pc, #88]	; (80096ac <UTIL_SEQ_WaitEvt+0x78>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2201      	movs	r2, #1
 8009658:	fa02 f303 	lsl.w	r3, r2, r3
 800965c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800965e:	4b14      	ldr	r3, [pc, #80]	; (80096b0 <UTIL_SEQ_WaitEvt+0x7c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8009664:	4a12      	ldr	r2, [pc, #72]	; (80096b0 <UTIL_SEQ_WaitEvt+0x7c>)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800966a:	e005      	b.n	8009678 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800966c:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <UTIL_SEQ_WaitEvt+0x7c>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4619      	mov	r1, r3
 8009672:	6978      	ldr	r0, [r7, #20]
 8009674:	f7f6 fff9 	bl	800066a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8009678:	4b0e      	ldr	r3, [pc, #56]	; (80096b4 <UTIL_SEQ_WaitEvt+0x80>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	4b0c      	ldr	r3, [pc, #48]	; (80096b0 <UTIL_SEQ_WaitEvt+0x7c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4013      	ands	r3, r2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d0f2      	beq.n	800966c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009686:	4a09      	ldr	r2, [pc, #36]	; (80096ac <UTIL_SEQ_WaitEvt+0x78>)
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800968c:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <UTIL_SEQ_WaitEvt+0x7c>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	43da      	mvns	r2, r3
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <UTIL_SEQ_WaitEvt+0x80>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4013      	ands	r3, r2
 8009698:	4a06      	ldr	r2, [pc, #24]	; (80096b4 <UTIL_SEQ_WaitEvt+0x80>)
 800969a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800969c:	4a04      	ldr	r2, [pc, #16]	; (80096b0 <UTIL_SEQ_WaitEvt+0x7c>)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6013      	str	r3, [r2, #0]

  return;
 80096a2:	bf00      	nop
}
 80096a4:	3718      	adds	r7, #24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	2000035c 	.word	0x2000035c
 80096b0:	20000358 	.word	0x20000358
 80096b4:	20000354 	.word	0x20000354

080096b8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80096b8:	b480      	push	{r7}
 80096ba:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80096bc:	bf00      	nop
}
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80096c6:	b480      	push	{r7}
 80096c8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80096ca:	bf00      	nop
}
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	0c1b      	lsrs	r3, r3, #16
 80096e4:	041b      	lsls	r3, r3, #16
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d104      	bne.n	80096f4 <SEQ_BitPosition+0x20>
 80096ea:	2310      	movs	r3, #16
 80096ec:	73fb      	strb	r3, [r7, #15]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	041b      	lsls	r3, r3, #16
 80096f2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d105      	bne.n	800970a <SEQ_BitPosition+0x36>
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	3308      	adds	r3, #8
 8009702:	73fb      	strb	r3, [r7, #15]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	021b      	lsls	r3, r3, #8
 8009708:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d105      	bne.n	8009720 <SEQ_BitPosition+0x4c>
 8009714:	7bfb      	ldrb	r3, [r7, #15]
 8009716:	3304      	adds	r3, #4
 8009718:	73fb      	strb	r3, [r7, #15]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	011b      	lsls	r3, r3, #4
 800971e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	0f1b      	lsrs	r3, r3, #28
 8009724:	4a07      	ldr	r2, [pc, #28]	; (8009744 <SEQ_BitPosition+0x70>)
 8009726:	5cd2      	ldrb	r2, [r2, r3]
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	4413      	add	r3, r2
 800972c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	f1c3 031f 	rsb	r3, r3, #31
 8009734:	b2db      	uxtb	r3, r3
}
 8009736:	4618      	mov	r0, r3
 8009738:	3714      	adds	r7, #20
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	0800b05c 	.word	0x0800b05c

08009748 <__errno>:
 8009748:	4b01      	ldr	r3, [pc, #4]	; (8009750 <__errno+0x8>)
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	20000050 	.word	0x20000050

08009754 <__libc_init_array>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4d0d      	ldr	r5, [pc, #52]	; (800978c <__libc_init_array+0x38>)
 8009758:	4c0d      	ldr	r4, [pc, #52]	; (8009790 <__libc_init_array+0x3c>)
 800975a:	1b64      	subs	r4, r4, r5
 800975c:	10a4      	asrs	r4, r4, #2
 800975e:	2600      	movs	r6, #0
 8009760:	42a6      	cmp	r6, r4
 8009762:	d109      	bne.n	8009778 <__libc_init_array+0x24>
 8009764:	4d0b      	ldr	r5, [pc, #44]	; (8009794 <__libc_init_array+0x40>)
 8009766:	4c0c      	ldr	r4, [pc, #48]	; (8009798 <__libc_init_array+0x44>)
 8009768:	f001 fb30 	bl	800adcc <_init>
 800976c:	1b64      	subs	r4, r4, r5
 800976e:	10a4      	asrs	r4, r4, #2
 8009770:	2600      	movs	r6, #0
 8009772:	42a6      	cmp	r6, r4
 8009774:	d105      	bne.n	8009782 <__libc_init_array+0x2e>
 8009776:	bd70      	pop	{r4, r5, r6, pc}
 8009778:	f855 3b04 	ldr.w	r3, [r5], #4
 800977c:	4798      	blx	r3
 800977e:	3601      	adds	r6, #1
 8009780:	e7ee      	b.n	8009760 <__libc_init_array+0xc>
 8009782:	f855 3b04 	ldr.w	r3, [r5], #4
 8009786:	4798      	blx	r3
 8009788:	3601      	adds	r6, #1
 800978a:	e7f2      	b.n	8009772 <__libc_init_array+0x1e>
 800978c:	0800b2e8 	.word	0x0800b2e8
 8009790:	0800b2e8 	.word	0x0800b2e8
 8009794:	0800b2e8 	.word	0x0800b2e8
 8009798:	0800b2ec 	.word	0x0800b2ec

0800979c <memcpy>:
 800979c:	440a      	add	r2, r1
 800979e:	4291      	cmp	r1, r2
 80097a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80097a4:	d100      	bne.n	80097a8 <memcpy+0xc>
 80097a6:	4770      	bx	lr
 80097a8:	b510      	push	{r4, lr}
 80097aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097b2:	4291      	cmp	r1, r2
 80097b4:	d1f9      	bne.n	80097aa <memcpy+0xe>
 80097b6:	bd10      	pop	{r4, pc}

080097b8 <memset>:
 80097b8:	4402      	add	r2, r0
 80097ba:	4603      	mov	r3, r0
 80097bc:	4293      	cmp	r3, r2
 80097be:	d100      	bne.n	80097c2 <memset+0xa>
 80097c0:	4770      	bx	lr
 80097c2:	f803 1b01 	strb.w	r1, [r3], #1
 80097c6:	e7f9      	b.n	80097bc <memset+0x4>

080097c8 <validate_structure>:
 80097c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ca:	6801      	ldr	r1, [r0, #0]
 80097cc:	293b      	cmp	r1, #59	; 0x3b
 80097ce:	4604      	mov	r4, r0
 80097d0:	d911      	bls.n	80097f6 <validate_structure+0x2e>
 80097d2:	223c      	movs	r2, #60	; 0x3c
 80097d4:	4668      	mov	r0, sp
 80097d6:	f000 fcab 	bl	800a130 <div>
 80097da:	9a01      	ldr	r2, [sp, #4]
 80097dc:	6863      	ldr	r3, [r4, #4]
 80097de:	9900      	ldr	r1, [sp, #0]
 80097e0:	2a00      	cmp	r2, #0
 80097e2:	440b      	add	r3, r1
 80097e4:	6063      	str	r3, [r4, #4]
 80097e6:	bfbb      	ittet	lt
 80097e8:	323c      	addlt	r2, #60	; 0x3c
 80097ea:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80097ee:	6022      	strge	r2, [r4, #0]
 80097f0:	6022      	strlt	r2, [r4, #0]
 80097f2:	bfb8      	it	lt
 80097f4:	6063      	strlt	r3, [r4, #4]
 80097f6:	6861      	ldr	r1, [r4, #4]
 80097f8:	293b      	cmp	r1, #59	; 0x3b
 80097fa:	d911      	bls.n	8009820 <validate_structure+0x58>
 80097fc:	223c      	movs	r2, #60	; 0x3c
 80097fe:	4668      	mov	r0, sp
 8009800:	f000 fc96 	bl	800a130 <div>
 8009804:	9a01      	ldr	r2, [sp, #4]
 8009806:	68a3      	ldr	r3, [r4, #8]
 8009808:	9900      	ldr	r1, [sp, #0]
 800980a:	2a00      	cmp	r2, #0
 800980c:	440b      	add	r3, r1
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	bfbb      	ittet	lt
 8009812:	323c      	addlt	r2, #60	; 0x3c
 8009814:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009818:	6062      	strge	r2, [r4, #4]
 800981a:	6062      	strlt	r2, [r4, #4]
 800981c:	bfb8      	it	lt
 800981e:	60a3      	strlt	r3, [r4, #8]
 8009820:	68a1      	ldr	r1, [r4, #8]
 8009822:	2917      	cmp	r1, #23
 8009824:	d911      	bls.n	800984a <validate_structure+0x82>
 8009826:	2218      	movs	r2, #24
 8009828:	4668      	mov	r0, sp
 800982a:	f000 fc81 	bl	800a130 <div>
 800982e:	9a01      	ldr	r2, [sp, #4]
 8009830:	68e3      	ldr	r3, [r4, #12]
 8009832:	9900      	ldr	r1, [sp, #0]
 8009834:	2a00      	cmp	r2, #0
 8009836:	440b      	add	r3, r1
 8009838:	60e3      	str	r3, [r4, #12]
 800983a:	bfbb      	ittet	lt
 800983c:	3218      	addlt	r2, #24
 800983e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009842:	60a2      	strge	r2, [r4, #8]
 8009844:	60a2      	strlt	r2, [r4, #8]
 8009846:	bfb8      	it	lt
 8009848:	60e3      	strlt	r3, [r4, #12]
 800984a:	6921      	ldr	r1, [r4, #16]
 800984c:	290b      	cmp	r1, #11
 800984e:	d911      	bls.n	8009874 <validate_structure+0xac>
 8009850:	220c      	movs	r2, #12
 8009852:	4668      	mov	r0, sp
 8009854:	f000 fc6c 	bl	800a130 <div>
 8009858:	9a01      	ldr	r2, [sp, #4]
 800985a:	6963      	ldr	r3, [r4, #20]
 800985c:	9900      	ldr	r1, [sp, #0]
 800985e:	2a00      	cmp	r2, #0
 8009860:	440b      	add	r3, r1
 8009862:	6163      	str	r3, [r4, #20]
 8009864:	bfbb      	ittet	lt
 8009866:	320c      	addlt	r2, #12
 8009868:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800986c:	6122      	strge	r2, [r4, #16]
 800986e:	6122      	strlt	r2, [r4, #16]
 8009870:	bfb8      	it	lt
 8009872:	6163      	strlt	r3, [r4, #20]
 8009874:	6963      	ldr	r3, [r4, #20]
 8009876:	0799      	lsls	r1, r3, #30
 8009878:	d120      	bne.n	80098bc <validate_structure+0xf4>
 800987a:	2164      	movs	r1, #100	; 0x64
 800987c:	fb93 f2f1 	sdiv	r2, r3, r1
 8009880:	fb01 3212 	mls	r2, r1, r2, r3
 8009884:	b9e2      	cbnz	r2, 80098c0 <validate_structure+0xf8>
 8009886:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800988a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800988e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009892:	fb01 3312 	mls	r3, r1, r2, r3
 8009896:	2b00      	cmp	r3, #0
 8009898:	bf14      	ite	ne
 800989a:	231c      	movne	r3, #28
 800989c:	231d      	moveq	r3, #29
 800989e:	68e2      	ldr	r2, [r4, #12]
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	dc0f      	bgt.n	80098c4 <validate_structure+0xfc>
 80098a4:	4f33      	ldr	r7, [pc, #204]	; (8009974 <validate_structure+0x1ac>)
 80098a6:	260b      	movs	r6, #11
 80098a8:	2064      	movs	r0, #100	; 0x64
 80098aa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80098ae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80098b2:	f1bc 0f00 	cmp.w	ip, #0
 80098b6:	dd31      	ble.n	800991c <validate_structure+0x154>
 80098b8:	b003      	add	sp, #12
 80098ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098bc:	231c      	movs	r3, #28
 80098be:	e7ee      	b.n	800989e <validate_structure+0xd6>
 80098c0:	231d      	movs	r3, #29
 80098c2:	e7ec      	b.n	800989e <validate_structure+0xd6>
 80098c4:	4f2b      	ldr	r7, [pc, #172]	; (8009974 <validate_structure+0x1ac>)
 80098c6:	f04f 0c00 	mov.w	ip, #0
 80098ca:	2564      	movs	r5, #100	; 0x64
 80098cc:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80098d0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80098d4:	2a01      	cmp	r2, #1
 80098d6:	bf14      	ite	ne
 80098d8:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80098dc:	4618      	moveq	r0, r3
 80098de:	4281      	cmp	r1, r0
 80098e0:	ddea      	ble.n	80098b8 <validate_structure+0xf0>
 80098e2:	3201      	adds	r2, #1
 80098e4:	1a09      	subs	r1, r1, r0
 80098e6:	2a0c      	cmp	r2, #12
 80098e8:	60e1      	str	r1, [r4, #12]
 80098ea:	6122      	str	r2, [r4, #16]
 80098ec:	d1f0      	bne.n	80098d0 <validate_structure+0x108>
 80098ee:	6963      	ldr	r3, [r4, #20]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	0791      	lsls	r1, r2, #30
 80098f4:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80098f8:	d137      	bne.n	800996a <validate_structure+0x1a2>
 80098fa:	fb92 f1f5 	sdiv	r1, r2, r5
 80098fe:	fb05 2211 	mls	r2, r5, r1, r2
 8009902:	2a00      	cmp	r2, #0
 8009904:	d133      	bne.n	800996e <validate_structure+0x1a6>
 8009906:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800990a:	fb93 f2f6 	sdiv	r2, r3, r6
 800990e:	fb06 3312 	mls	r3, r6, r2, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	bf14      	ite	ne
 8009916:	231c      	movne	r3, #28
 8009918:	231d      	moveq	r3, #29
 800991a:	e7d9      	b.n	80098d0 <validate_structure+0x108>
 800991c:	6921      	ldr	r1, [r4, #16]
 800991e:	3901      	subs	r1, #1
 8009920:	6121      	str	r1, [r4, #16]
 8009922:	3101      	adds	r1, #1
 8009924:	d114      	bne.n	8009950 <validate_structure+0x188>
 8009926:	6963      	ldr	r3, [r4, #20]
 8009928:	1e59      	subs	r1, r3, #1
 800992a:	078a      	lsls	r2, r1, #30
 800992c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8009930:	d117      	bne.n	8009962 <validate_structure+0x19a>
 8009932:	fb91 f2f0 	sdiv	r2, r1, r0
 8009936:	fb00 1112 	mls	r1, r0, r2, r1
 800993a:	b9a1      	cbnz	r1, 8009966 <validate_structure+0x19e>
 800993c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009940:	fb93 f2f5 	sdiv	r2, r3, r5
 8009944:	fb05 3312 	mls	r3, r5, r2, r3
 8009948:	2b00      	cmp	r3, #0
 800994a:	bf14      	ite	ne
 800994c:	231c      	movne	r3, #28
 800994e:	231d      	moveq	r3, #29
 8009950:	6922      	ldr	r2, [r4, #16]
 8009952:	2a01      	cmp	r2, #1
 8009954:	bf14      	ite	ne
 8009956:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800995a:	461a      	moveq	r2, r3
 800995c:	4462      	add	r2, ip
 800995e:	60e2      	str	r2, [r4, #12]
 8009960:	e7a5      	b.n	80098ae <validate_structure+0xe6>
 8009962:	231c      	movs	r3, #28
 8009964:	e7f4      	b.n	8009950 <validate_structure+0x188>
 8009966:	231d      	movs	r3, #29
 8009968:	e7f2      	b.n	8009950 <validate_structure+0x188>
 800996a:	231c      	movs	r3, #28
 800996c:	e7b0      	b.n	80098d0 <validate_structure+0x108>
 800996e:	231d      	movs	r3, #29
 8009970:	e7ae      	b.n	80098d0 <validate_structure+0x108>
 8009972:	bf00      	nop
 8009974:	0800b06c 	.word	0x0800b06c

08009978 <mktime>:
 8009978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800997c:	b08b      	sub	sp, #44	; 0x2c
 800997e:	4605      	mov	r5, r0
 8009980:	f000 fc2c 	bl	800a1dc <__gettzinfo>
 8009984:	4607      	mov	r7, r0
 8009986:	4628      	mov	r0, r5
 8009988:	f7ff ff1e 	bl	80097c8 <validate_structure>
 800998c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009990:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8009994:	68a8      	ldr	r0, [r5, #8]
 8009996:	696e      	ldr	r6, [r5, #20]
 8009998:	fb0a 2303 	mla	r3, sl, r3, r2
 800999c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80099a0:	fb0a 3a00 	mla	sl, sl, r0, r3
 80099a4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80099a8:	4ac3      	ldr	r2, [pc, #780]	; (8009cb8 <mktime+0x340>)
 80099aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80099ae:	3c01      	subs	r4, #1
 80099b0:	2b01      	cmp	r3, #1
 80099b2:	4414      	add	r4, r2
 80099b4:	dd11      	ble.n	80099da <mktime+0x62>
 80099b6:	07b1      	lsls	r1, r6, #30
 80099b8:	d10f      	bne.n	80099da <mktime+0x62>
 80099ba:	2264      	movs	r2, #100	; 0x64
 80099bc:	fb96 f3f2 	sdiv	r3, r6, r2
 80099c0:	fb02 6313 	mls	r3, r2, r3, r6
 80099c4:	b943      	cbnz	r3, 80099d8 <mktime+0x60>
 80099c6:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80099ca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80099ce:	fb91 f3f2 	sdiv	r3, r1, r2
 80099d2:	fb02 1313 	mls	r3, r2, r3, r1
 80099d6:	b903      	cbnz	r3, 80099da <mktime+0x62>
 80099d8:	3401      	adds	r4, #1
 80099da:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80099de:	3310      	adds	r3, #16
 80099e0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80099e4:	4293      	cmp	r3, r2
 80099e6:	61ec      	str	r4, [r5, #28]
 80099e8:	f200 8161 	bhi.w	8009cae <mktime+0x336>
 80099ec:	2e46      	cmp	r6, #70	; 0x46
 80099ee:	dd77      	ble.n	8009ae0 <mktime+0x168>
 80099f0:	2346      	movs	r3, #70	; 0x46
 80099f2:	f240 1e6d 	movw	lr, #365	; 0x16d
 80099f6:	2164      	movs	r1, #100	; 0x64
 80099f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80099fc:	079a      	lsls	r2, r3, #30
 80099fe:	d169      	bne.n	8009ad4 <mktime+0x15c>
 8009a00:	fb93 f2f1 	sdiv	r2, r3, r1
 8009a04:	fb01 3212 	mls	r2, r1, r2, r3
 8009a08:	2a00      	cmp	r2, #0
 8009a0a:	d166      	bne.n	8009ada <mktime+0x162>
 8009a0c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8009a10:	fb9c f2f0 	sdiv	r2, ip, r0
 8009a14:	fb00 c212 	mls	r2, r0, r2, ip
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	bf14      	ite	ne
 8009a1c:	4672      	movne	r2, lr
 8009a1e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009a22:	3301      	adds	r3, #1
 8009a24:	429e      	cmp	r6, r3
 8009a26:	4414      	add	r4, r2
 8009a28:	d1e8      	bne.n	80099fc <mktime+0x84>
 8009a2a:	4ba4      	ldr	r3, [pc, #656]	; (8009cbc <mktime+0x344>)
 8009a2c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8009a30:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8009a34:	f000 f9ee 	bl	8009e14 <__tz_lock>
 8009a38:	f000 f9f8 	bl	8009e2c <_tzset_unlocked>
 8009a3c:	4ba0      	ldr	r3, [pc, #640]	; (8009cc0 <mktime+0x348>)
 8009a3e:	f8d3 9000 	ldr.w	r9, [r3]
 8009a42:	f1b9 0f00 	cmp.w	r9, #0
 8009a46:	d03f      	beq.n	8009ac8 <mktime+0x150>
 8009a48:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8009a4c:	6968      	ldr	r0, [r5, #20]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f1b9 0f01 	cmp.w	r9, #1
 8009a54:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009a58:	46c8      	mov	r8, r9
 8009a5a:	bfa8      	it	ge
 8009a5c:	f04f 0801 	movge.w	r8, #1
 8009a60:	4283      	cmp	r3, r0
 8009a62:	d17f      	bne.n	8009b64 <mktime+0x1ec>
 8009a64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a66:	4619      	mov	r1, r3
 8009a68:	17da      	asrs	r2, r3, #31
 8009a6a:	e9cd 1200 	strd	r1, r2, [sp]
 8009a6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009a72:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a7c:	1a80      	subs	r0, r0, r2
 8009a7e:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8009a82:	4582      	cmp	sl, r0
 8009a84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a88:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009a8c:	da71      	bge.n	8009b72 <mktime+0x1fa>
 8009a8e:	9800      	ldr	r0, [sp, #0]
 8009a90:	6a39      	ldr	r1, [r7, #32]
 8009a92:	1a09      	subs	r1, r1, r0
 8009a94:	9104      	str	r1, [sp, #16]
 8009a96:	9801      	ldr	r0, [sp, #4]
 8009a98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a9a:	eb61 0100 	sbc.w	r1, r1, r0
 8009a9e:	9105      	str	r1, [sp, #20]
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	2900      	cmp	r1, #0
 8009aa4:	d075      	beq.n	8009b92 <mktime+0x21a>
 8009aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009aaa:	4582      	cmp	sl, r0
 8009aac:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009ab0:	db05      	blt.n	8009abe <mktime+0x146>
 8009ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ab6:	4582      	cmp	sl, r0
 8009ab8:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009abc:	db6f      	blt.n	8009b9e <mktime+0x226>
 8009abe:	f1b9 0f00 	cmp.w	r9, #0
 8009ac2:	f04f 0900 	mov.w	r9, #0
 8009ac6:	da6f      	bge.n	8009ba8 <mktime+0x230>
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	eb1a 0a03 	adds.w	sl, sl, r3
 8009ace:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009ad2:	e0ae      	b.n	8009c32 <mktime+0x2ba>
 8009ad4:	f240 126d 	movw	r2, #365	; 0x16d
 8009ad8:	e7a3      	b.n	8009a22 <mktime+0xaa>
 8009ada:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009ade:	e7a0      	b.n	8009a22 <mktime+0xaa>
 8009ae0:	d0a3      	beq.n	8009a2a <mktime+0xb2>
 8009ae2:	2345      	movs	r3, #69	; 0x45
 8009ae4:	f240 1e6d 	movw	lr, #365	; 0x16d
 8009ae8:	2164      	movs	r1, #100	; 0x64
 8009aea:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009aee:	e012      	b.n	8009b16 <mktime+0x19e>
 8009af0:	bb62      	cbnz	r2, 8009b4c <mktime+0x1d4>
 8009af2:	fb93 f2f1 	sdiv	r2, r3, r1
 8009af6:	fb01 3212 	mls	r2, r1, r2, r3
 8009afa:	bb52      	cbnz	r2, 8009b52 <mktime+0x1da>
 8009afc:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8009b00:	fb9c f2f0 	sdiv	r2, ip, r0
 8009b04:	fb00 c212 	mls	r2, r0, r2, ip
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	bf14      	ite	ne
 8009b0c:	4672      	movne	r2, lr
 8009b0e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009b12:	1aa4      	subs	r4, r4, r2
 8009b14:	3b01      	subs	r3, #1
 8009b16:	429e      	cmp	r6, r3
 8009b18:	f003 0203 	and.w	r2, r3, #3
 8009b1c:	dbe8      	blt.n	8009af0 <mktime+0x178>
 8009b1e:	b9da      	cbnz	r2, 8009b58 <mktime+0x1e0>
 8009b20:	2264      	movs	r2, #100	; 0x64
 8009b22:	fb96 f3f2 	sdiv	r3, r6, r2
 8009b26:	fb02 6313 	mls	r3, r2, r3, r6
 8009b2a:	b9c3      	cbnz	r3, 8009b5e <mktime+0x1e6>
 8009b2c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8009b30:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b34:	fb91 f3f2 	sdiv	r3, r1, r2
 8009b38:	fb02 1313 	mls	r3, r2, r3, r1
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f240 136d 	movw	r3, #365	; 0x16d
 8009b42:	bf08      	it	eq
 8009b44:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009b48:	1ae4      	subs	r4, r4, r3
 8009b4a:	e76e      	b.n	8009a2a <mktime+0xb2>
 8009b4c:	f240 126d 	movw	r2, #365	; 0x16d
 8009b50:	e7df      	b.n	8009b12 <mktime+0x19a>
 8009b52:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009b56:	e7dc      	b.n	8009b12 <mktime+0x19a>
 8009b58:	f240 136d 	movw	r3, #365	; 0x16d
 8009b5c:	e7f4      	b.n	8009b48 <mktime+0x1d0>
 8009b5e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009b62:	e7f1      	b.n	8009b48 <mktime+0x1d0>
 8009b64:	f000 f8ae 	bl	8009cc4 <__tzcalc_limits>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f47f af7b 	bne.w	8009a64 <mktime+0xec>
 8009b6e:	46c1      	mov	r9, r8
 8009b70:	e054      	b.n	8009c1c <mktime+0x2a4>
 8009b72:	9800      	ldr	r0, [sp, #0]
 8009b74:	9902      	ldr	r1, [sp, #8]
 8009b76:	1a09      	subs	r1, r1, r0
 8009b78:	9108      	str	r1, [sp, #32]
 8009b7a:	9801      	ldr	r0, [sp, #4]
 8009b7c:	9903      	ldr	r1, [sp, #12]
 8009b7e:	eb61 0100 	sbc.w	r1, r1, r0
 8009b82:	9109      	str	r1, [sp, #36]	; 0x24
 8009b84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009b88:	4582      	cmp	sl, r0
 8009b8a:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009b8e:	dbee      	blt.n	8009b6e <mktime+0x1f6>
 8009b90:	e77d      	b.n	8009a8e <mktime+0x116>
 8009b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b96:	4582      	cmp	sl, r0
 8009b98:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009b9c:	db89      	blt.n	8009ab2 <mktime+0x13a>
 8009b9e:	f1b9 0f00 	cmp.w	r9, #0
 8009ba2:	db3f      	blt.n	8009c24 <mktime+0x2ac>
 8009ba4:	f04f 0901 	mov.w	r9, #1
 8009ba8:	ea88 0809 	eor.w	r8, r8, r9
 8009bac:	f1b8 0f01 	cmp.w	r8, #1
 8009bb0:	d134      	bne.n	8009c1c <mktime+0x2a4>
 8009bb2:	f1b9 0f00 	cmp.w	r9, #0
 8009bb6:	d04f      	beq.n	8009c58 <mktime+0x2e0>
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	682a      	ldr	r2, [r5, #0]
 8009bbc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8009bc0:	441a      	add	r2, r3
 8009bc2:	eb1a 0a03 	adds.w	sl, sl, r3
 8009bc6:	602a      	str	r2, [r5, #0]
 8009bc8:	4628      	mov	r0, r5
 8009bca:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009bce:	f7ff fdfb 	bl	80097c8 <validate_structure>
 8009bd2:	68ea      	ldr	r2, [r5, #12]
 8009bd4:	ebb2 0208 	subs.w	r2, r2, r8
 8009bd8:	d020      	beq.n	8009c1c <mktime+0x2a4>
 8009bda:	2a01      	cmp	r2, #1
 8009bdc:	dc3e      	bgt.n	8009c5c <mktime+0x2e4>
 8009bde:	1c90      	adds	r0, r2, #2
 8009be0:	bfd8      	it	le
 8009be2:	2201      	movle	r2, #1
 8009be4:	69eb      	ldr	r3, [r5, #28]
 8009be6:	18d3      	adds	r3, r2, r3
 8009be8:	4414      	add	r4, r2
 8009bea:	d540      	bpl.n	8009c6e <mktime+0x2f6>
 8009bec:	1e72      	subs	r2, r6, #1
 8009bee:	0791      	lsls	r1, r2, #30
 8009bf0:	d137      	bne.n	8009c62 <mktime+0x2ea>
 8009bf2:	2164      	movs	r1, #100	; 0x64
 8009bf4:	fb92 f3f1 	sdiv	r3, r2, r1
 8009bf8:	fb01 2313 	mls	r3, r1, r3, r2
 8009bfc:	bba3      	cbnz	r3, 8009c68 <mktime+0x2f0>
 8009bfe:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8009c02:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009c06:	fb96 f3f2 	sdiv	r3, r6, r2
 8009c0a:	fb02 6613 	mls	r6, r2, r3, r6
 8009c0e:	2e00      	cmp	r6, #0
 8009c10:	f240 136d 	movw	r3, #365	; 0x16d
 8009c14:	bf18      	it	ne
 8009c16:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009c1a:	61eb      	str	r3, [r5, #28]
 8009c1c:	f1b9 0f01 	cmp.w	r9, #1
 8009c20:	f47f af52 	bne.w	8009ac8 <mktime+0x150>
 8009c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c26:	eb1a 0a03 	adds.w	sl, sl, r3
 8009c2a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009c2e:	f04f 0901 	mov.w	r9, #1
 8009c32:	f000 f8f5 	bl	8009e20 <__tz_unlock>
 8009c36:	3404      	adds	r4, #4
 8009c38:	2307      	movs	r3, #7
 8009c3a:	fb94 f3f3 	sdiv	r3, r4, r3
 8009c3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009c42:	1ae4      	subs	r4, r4, r3
 8009c44:	bf48      	it	mi
 8009c46:	3407      	addmi	r4, #7
 8009c48:	f8c5 9020 	str.w	r9, [r5, #32]
 8009c4c:	61ac      	str	r4, [r5, #24]
 8009c4e:	4650      	mov	r0, sl
 8009c50:	4659      	mov	r1, fp
 8009c52:	b00b      	add	sp, #44	; 0x2c
 8009c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c58:	1a9b      	subs	r3, r3, r2
 8009c5a:	e7ae      	b.n	8009bba <mktime+0x242>
 8009c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c60:	e7c0      	b.n	8009be4 <mktime+0x26c>
 8009c62:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009c66:	e7d8      	b.n	8009c1a <mktime+0x2a2>
 8009c68:	f240 136d 	movw	r3, #365	; 0x16d
 8009c6c:	e7d5      	b.n	8009c1a <mktime+0x2a2>
 8009c6e:	07b2      	lsls	r2, r6, #30
 8009c70:	d117      	bne.n	8009ca2 <mktime+0x32a>
 8009c72:	2164      	movs	r1, #100	; 0x64
 8009c74:	fb96 f2f1 	sdiv	r2, r6, r1
 8009c78:	fb01 6212 	mls	r2, r1, r2, r6
 8009c7c:	b9a2      	cbnz	r2, 8009ca8 <mktime+0x330>
 8009c7e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8009c82:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009c86:	fb96 f2f1 	sdiv	r2, r6, r1
 8009c8a:	fb01 6612 	mls	r6, r1, r2, r6
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	f240 126d 	movw	r2, #365	; 0x16d
 8009c94:	bf08      	it	eq
 8009c96:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	bfa8      	it	ge
 8009c9e:	1a9b      	subge	r3, r3, r2
 8009ca0:	e7bb      	b.n	8009c1a <mktime+0x2a2>
 8009ca2:	f240 126d 	movw	r2, #365	; 0x16d
 8009ca6:	e7f8      	b.n	8009c9a <mktime+0x322>
 8009ca8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009cac:	e7f5      	b.n	8009c9a <mktime+0x322>
 8009cae:	f04f 3aff 	mov.w	sl, #4294967295
 8009cb2:	f04f 3bff 	mov.w	fp, #4294967295
 8009cb6:	e7ca      	b.n	8009c4e <mktime+0x2d6>
 8009cb8:	0800b09c 	.word	0x0800b09c
 8009cbc:	00015180 	.word	0x00015180
 8009cc0:	2000040c 	.word	0x2000040c

08009cc4 <__tzcalc_limits>:
 8009cc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc8:	4680      	mov	r8, r0
 8009cca:	f000 fa87 	bl	800a1dc <__gettzinfo>
 8009cce:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009cd2:	4598      	cmp	r8, r3
 8009cd4:	f340 8098 	ble.w	8009e08 <__tzcalc_limits+0x144>
 8009cd8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8009cdc:	4443      	add	r3, r8
 8009cde:	109b      	asrs	r3, r3, #2
 8009ce0:	f240 126d 	movw	r2, #365	; 0x16d
 8009ce4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8009ce8:	fb02 3505 	mla	r5, r2, r5, r3
 8009cec:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009cf0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8009cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cf8:	441d      	add	r5, r3
 8009cfa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009cfe:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8009d02:	fb98 f7f3 	sdiv	r7, r8, r3
 8009d06:	fb03 8717 	mls	r7, r3, r7, r8
 8009d0a:	4442      	add	r2, r8
 8009d0c:	fab7 fc87 	clz	ip, r7
 8009d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d14:	f008 0303 	and.w	r3, r8, #3
 8009d18:	4415      	add	r5, r2
 8009d1a:	2264      	movs	r2, #100	; 0x64
 8009d1c:	f8c0 8004 	str.w	r8, [r0, #4]
 8009d20:	fb98 f6f2 	sdiv	r6, r8, r2
 8009d24:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009d28:	fb02 8616 	mls	r6, r2, r6, r8
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	f04f 0e07 	mov.w	lr, #7
 8009d38:	7a22      	ldrb	r2, [r4, #8]
 8009d3a:	6963      	ldr	r3, [r4, #20]
 8009d3c:	2a4a      	cmp	r2, #74	; 0x4a
 8009d3e:	d128      	bne.n	8009d92 <__tzcalc_limits+0xce>
 8009d40:	9900      	ldr	r1, [sp, #0]
 8009d42:	18ea      	adds	r2, r5, r3
 8009d44:	b901      	cbnz	r1, 8009d48 <__tzcalc_limits+0x84>
 8009d46:	b906      	cbnz	r6, 8009d4a <__tzcalc_limits+0x86>
 8009d48:	bb0f      	cbnz	r7, 8009d8e <__tzcalc_limits+0xca>
 8009d4a:	2b3b      	cmp	r3, #59	; 0x3b
 8009d4c:	bfd4      	ite	le
 8009d4e:	2300      	movle	r3, #0
 8009d50:	2301      	movgt	r3, #1
 8009d52:	4413      	add	r3, r2
 8009d54:	1e5a      	subs	r2, r3, #1
 8009d56:	69a3      	ldr	r3, [r4, #24]
 8009d58:	492c      	ldr	r1, [pc, #176]	; (8009e0c <__tzcalc_limits+0x148>)
 8009d5a:	fb01 3202 	mla	r2, r1, r2, r3
 8009d5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d60:	4413      	add	r3, r2
 8009d62:	461a      	mov	r2, r3
 8009d64:	17db      	asrs	r3, r3, #31
 8009d66:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009d6a:	3428      	adds	r4, #40	; 0x28
 8009d6c:	45a3      	cmp	fp, r4
 8009d6e:	d1e3      	bne.n	8009d38 <__tzcalc_limits+0x74>
 8009d70:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8009d74:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8009d78:	4294      	cmp	r4, r2
 8009d7a:	eb75 0303 	sbcs.w	r3, r5, r3
 8009d7e:	bfb4      	ite	lt
 8009d80:	2301      	movlt	r3, #1
 8009d82:	2300      	movge	r3, #0
 8009d84:	6003      	str	r3, [r0, #0]
 8009d86:	2001      	movs	r0, #1
 8009d88:	b003      	add	sp, #12
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	2300      	movs	r3, #0
 8009d90:	e7df      	b.n	8009d52 <__tzcalc_limits+0x8e>
 8009d92:	2a44      	cmp	r2, #68	; 0x44
 8009d94:	d101      	bne.n	8009d9a <__tzcalc_limits+0xd6>
 8009d96:	18ea      	adds	r2, r5, r3
 8009d98:	e7dd      	b.n	8009d56 <__tzcalc_limits+0x92>
 8009d9a:	9a00      	ldr	r2, [sp, #0]
 8009d9c:	bb72      	cbnz	r2, 8009dfc <__tzcalc_limits+0x138>
 8009d9e:	2e00      	cmp	r6, #0
 8009da0:	bf0c      	ite	eq
 8009da2:	46e0      	moveq	r8, ip
 8009da4:	f04f 0801 	movne.w	r8, #1
 8009da8:	4919      	ldr	r1, [pc, #100]	; (8009e10 <__tzcalc_limits+0x14c>)
 8009daa:	68e2      	ldr	r2, [r4, #12]
 8009dac:	9201      	str	r2, [sp, #4]
 8009dae:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8009db2:	fb0a 1808 	mla	r8, sl, r8, r1
 8009db6:	462a      	mov	r2, r5
 8009db8:	f04f 0900 	mov.w	r9, #0
 8009dbc:	f1a8 0804 	sub.w	r8, r8, #4
 8009dc0:	9901      	ldr	r1, [sp, #4]
 8009dc2:	f109 0901 	add.w	r9, r9, #1
 8009dc6:	4549      	cmp	r1, r9
 8009dc8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8009dcc:	dc18      	bgt.n	8009e00 <__tzcalc_limits+0x13c>
 8009dce:	f102 0804 	add.w	r8, r2, #4
 8009dd2:	fb98 f9fe 	sdiv	r9, r8, lr
 8009dd6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8009dda:	eba8 0909 	sub.w	r9, r8, r9
 8009dde:	ebb3 0909 	subs.w	r9, r3, r9
 8009de2:	6923      	ldr	r3, [r4, #16]
 8009de4:	f103 33ff 	add.w	r3, r3, #4294967295
 8009de8:	bf48      	it	mi
 8009dea:	f109 0907 	addmi.w	r9, r9, #7
 8009dee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009df2:	444b      	add	r3, r9
 8009df4:	4553      	cmp	r3, sl
 8009df6:	da05      	bge.n	8009e04 <__tzcalc_limits+0x140>
 8009df8:	441a      	add	r2, r3
 8009dfa:	e7ac      	b.n	8009d56 <__tzcalc_limits+0x92>
 8009dfc:	46e0      	mov	r8, ip
 8009dfe:	e7d3      	b.n	8009da8 <__tzcalc_limits+0xe4>
 8009e00:	4452      	add	r2, sl
 8009e02:	e7dd      	b.n	8009dc0 <__tzcalc_limits+0xfc>
 8009e04:	3b07      	subs	r3, #7
 8009e06:	e7f5      	b.n	8009df4 <__tzcalc_limits+0x130>
 8009e08:	2000      	movs	r0, #0
 8009e0a:	e7bd      	b.n	8009d88 <__tzcalc_limits+0xc4>
 8009e0c:	00015180 	.word	0x00015180
 8009e10:	0800b168 	.word	0x0800b168

08009e14 <__tz_lock>:
 8009e14:	4801      	ldr	r0, [pc, #4]	; (8009e1c <__tz_lock+0x8>)
 8009e16:	f000 b9e5 	b.w	800a1e4 <__retarget_lock_acquire>
 8009e1a:	bf00      	nop
 8009e1c:	2000074f 	.word	0x2000074f

08009e20 <__tz_unlock>:
 8009e20:	4801      	ldr	r0, [pc, #4]	; (8009e28 <__tz_unlock+0x8>)
 8009e22:	f000 b9e1 	b.w	800a1e8 <__retarget_lock_release>
 8009e26:	bf00      	nop
 8009e28:	2000074f 	.word	0x2000074f

08009e2c <_tzset_unlocked>:
 8009e2c:	4b01      	ldr	r3, [pc, #4]	; (8009e34 <_tzset_unlocked+0x8>)
 8009e2e:	6818      	ldr	r0, [r3, #0]
 8009e30:	f000 b802 	b.w	8009e38 <_tzset_unlocked_r>
 8009e34:	20000050 	.word	0x20000050

08009e38 <_tzset_unlocked_r>:
 8009e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3c:	b08d      	sub	sp, #52	; 0x34
 8009e3e:	4607      	mov	r7, r0
 8009e40:	f000 f9cc 	bl	800a1dc <__gettzinfo>
 8009e44:	49ae      	ldr	r1, [pc, #696]	; (800a100 <_tzset_unlocked_r+0x2c8>)
 8009e46:	4eaf      	ldr	r6, [pc, #700]	; (800a104 <_tzset_unlocked_r+0x2cc>)
 8009e48:	4605      	mov	r5, r0
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	f000 f9be 	bl	800a1cc <_getenv_r>
 8009e50:	4604      	mov	r4, r0
 8009e52:	b970      	cbnz	r0, 8009e72 <_tzset_unlocked_r+0x3a>
 8009e54:	4bac      	ldr	r3, [pc, #688]	; (800a108 <_tzset_unlocked_r+0x2d0>)
 8009e56:	4aad      	ldr	r2, [pc, #692]	; (800a10c <_tzset_unlocked_r+0x2d4>)
 8009e58:	6018      	str	r0, [r3, #0]
 8009e5a:	4bad      	ldr	r3, [pc, #692]	; (800a110 <_tzset_unlocked_r+0x2d8>)
 8009e5c:	6018      	str	r0, [r3, #0]
 8009e5e:	4bad      	ldr	r3, [pc, #692]	; (800a114 <_tzset_unlocked_r+0x2dc>)
 8009e60:	6830      	ldr	r0, [r6, #0]
 8009e62:	e9c3 2200 	strd	r2, r2, [r3]
 8009e66:	f000 f9c1 	bl	800a1ec <free>
 8009e6a:	6034      	str	r4, [r6, #0]
 8009e6c:	b00d      	add	sp, #52	; 0x34
 8009e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e72:	6831      	ldr	r1, [r6, #0]
 8009e74:	2900      	cmp	r1, #0
 8009e76:	d15f      	bne.n	8009f38 <_tzset_unlocked_r+0x100>
 8009e78:	6830      	ldr	r0, [r6, #0]
 8009e7a:	f000 f9b7 	bl	800a1ec <free>
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f7f6 f97e 	bl	8000180 <strlen>
 8009e84:	1c41      	adds	r1, r0, #1
 8009e86:	4638      	mov	r0, r7
 8009e88:	f000 fa08 	bl	800a29c <_malloc_r>
 8009e8c:	6030      	str	r0, [r6, #0]
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d157      	bne.n	8009f42 <_tzset_unlocked_r+0x10a>
 8009e92:	7823      	ldrb	r3, [r4, #0]
 8009e94:	4aa0      	ldr	r2, [pc, #640]	; (800a118 <_tzset_unlocked_r+0x2e0>)
 8009e96:	49a1      	ldr	r1, [pc, #644]	; (800a11c <_tzset_unlocked_r+0x2e4>)
 8009e98:	2b3a      	cmp	r3, #58	; 0x3a
 8009e9a:	bf08      	it	eq
 8009e9c:	3401      	addeq	r4, #1
 8009e9e:	ae0a      	add	r6, sp, #40	; 0x28
 8009ea0:	4633      	mov	r3, r6
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 fa64 	bl	800a370 <siscanf>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	dddf      	ble.n	8009e6c <_tzset_unlocked_r+0x34>
 8009eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eae:	18e7      	adds	r7, r4, r3
 8009eb0:	5ce3      	ldrb	r3, [r4, r3]
 8009eb2:	2b2d      	cmp	r3, #45	; 0x2d
 8009eb4:	d149      	bne.n	8009f4a <_tzset_unlocked_r+0x112>
 8009eb6:	3701      	adds	r7, #1
 8009eb8:	f04f 34ff 	mov.w	r4, #4294967295
 8009ebc:	f10d 0a20 	add.w	sl, sp, #32
 8009ec0:	f10d 0b1e 	add.w	fp, sp, #30
 8009ec4:	f04f 0800 	mov.w	r8, #0
 8009ec8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009ecc:	4994      	ldr	r1, [pc, #592]	; (800a120 <_tzset_unlocked_r+0x2e8>)
 8009ece:	9603      	str	r6, [sp, #12]
 8009ed0:	f8cd b000 	str.w	fp, [sp]
 8009ed4:	4633      	mov	r3, r6
 8009ed6:	aa07      	add	r2, sp, #28
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f8ad 801e 	strh.w	r8, [sp, #30]
 8009ede:	f8ad 8020 	strh.w	r8, [sp, #32]
 8009ee2:	f000 fa45 	bl	800a370 <siscanf>
 8009ee6:	4540      	cmp	r0, r8
 8009ee8:	ddc0      	ble.n	8009e6c <_tzset_unlocked_r+0x34>
 8009eea:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009eee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009ef2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800a12c <_tzset_unlocked_r+0x2f4>
 8009ef6:	213c      	movs	r1, #60	; 0x3c
 8009ef8:	fb01 2203 	mla	r2, r1, r3, r2
 8009efc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009f00:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009f04:	fb01 2303 	mla	r3, r1, r3, r2
 8009f08:	435c      	muls	r4, r3
 8009f0a:	62ac      	str	r4, [r5, #40]	; 0x28
 8009f0c:	4c81      	ldr	r4, [pc, #516]	; (800a114 <_tzset_unlocked_r+0x2dc>)
 8009f0e:	4b82      	ldr	r3, [pc, #520]	; (800a118 <_tzset_unlocked_r+0x2e0>)
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f14:	4981      	ldr	r1, [pc, #516]	; (800a11c <_tzset_unlocked_r+0x2e4>)
 8009f16:	441f      	add	r7, r3
 8009f18:	464a      	mov	r2, r9
 8009f1a:	4633      	mov	r3, r6
 8009f1c:	4638      	mov	r0, r7
 8009f1e:	f000 fa27 	bl	800a370 <siscanf>
 8009f22:	4540      	cmp	r0, r8
 8009f24:	dc16      	bgt.n	8009f54 <_tzset_unlocked_r+0x11c>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	6063      	str	r3, [r4, #4]
 8009f2a:	4b77      	ldr	r3, [pc, #476]	; (800a108 <_tzset_unlocked_r+0x2d0>)
 8009f2c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	4b77      	ldr	r3, [pc, #476]	; (800a110 <_tzset_unlocked_r+0x2d8>)
 8009f32:	f8c3 8000 	str.w	r8, [r3]
 8009f36:	e799      	b.n	8009e6c <_tzset_unlocked_r+0x34>
 8009f38:	f7f6 f92a 	bl	8000190 <strcmp>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d19b      	bne.n	8009e78 <_tzset_unlocked_r+0x40>
 8009f40:	e794      	b.n	8009e6c <_tzset_unlocked_r+0x34>
 8009f42:	4621      	mov	r1, r4
 8009f44:	f000 fa42 	bl	800a3cc <strcpy>
 8009f48:	e7a3      	b.n	8009e92 <_tzset_unlocked_r+0x5a>
 8009f4a:	2b2b      	cmp	r3, #43	; 0x2b
 8009f4c:	bf08      	it	eq
 8009f4e:	3701      	addeq	r7, #1
 8009f50:	2401      	movs	r4, #1
 8009f52:	e7b3      	b.n	8009ebc <_tzset_unlocked_r+0x84>
 8009f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f56:	f8c4 9004 	str.w	r9, [r4, #4]
 8009f5a:	18fc      	adds	r4, r7, r3
 8009f5c:	5cfb      	ldrb	r3, [r7, r3]
 8009f5e:	2b2d      	cmp	r3, #45	; 0x2d
 8009f60:	f040 808b 	bne.w	800a07a <_tzset_unlocked_r+0x242>
 8009f64:	3401      	adds	r4, #1
 8009f66:	f04f 37ff 	mov.w	r7, #4294967295
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f70:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009f74:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009f78:	930a      	str	r3, [sp, #40]	; 0x28
 8009f7a:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009f7e:	e9cd b600 	strd	fp, r6, [sp]
 8009f82:	4967      	ldr	r1, [pc, #412]	; (800a120 <_tzset_unlocked_r+0x2e8>)
 8009f84:	4633      	mov	r3, r6
 8009f86:	aa07      	add	r2, sp, #28
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f000 f9f1 	bl	800a370 <siscanf>
 8009f8e:	2800      	cmp	r0, #0
 8009f90:	dc78      	bgt.n	800a084 <_tzset_unlocked_r+0x24c>
 8009f92:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8009f94:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8009f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9a:	652f      	str	r7, [r5, #80]	; 0x50
 8009f9c:	441c      	add	r4, r3
 8009f9e:	462f      	mov	r7, r5
 8009fa0:	f04f 0900 	mov.w	r9, #0
 8009fa4:	7823      	ldrb	r3, [r4, #0]
 8009fa6:	2b2c      	cmp	r3, #44	; 0x2c
 8009fa8:	bf08      	it	eq
 8009faa:	3401      	addeq	r4, #1
 8009fac:	f894 8000 	ldrb.w	r8, [r4]
 8009fb0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009fb4:	d178      	bne.n	800a0a8 <_tzset_unlocked_r+0x270>
 8009fb6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009fba:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009fbe:	ab09      	add	r3, sp, #36	; 0x24
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	4958      	ldr	r1, [pc, #352]	; (800a124 <_tzset_unlocked_r+0x2ec>)
 8009fc4:	9603      	str	r6, [sp, #12]
 8009fc6:	4633      	mov	r3, r6
 8009fc8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009fcc:	4620      	mov	r0, r4
 8009fce:	f000 f9cf 	bl	800a370 <siscanf>
 8009fd2:	2803      	cmp	r0, #3
 8009fd4:	f47f af4a 	bne.w	8009e6c <_tzset_unlocked_r+0x34>
 8009fd8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009fdc:	1e4b      	subs	r3, r1, #1
 8009fde:	2b0b      	cmp	r3, #11
 8009fe0:	f63f af44 	bhi.w	8009e6c <_tzset_unlocked_r+0x34>
 8009fe4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009fe8:	1e53      	subs	r3, r2, #1
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	f63f af3e 	bhi.w	8009e6c <_tzset_unlocked_r+0x34>
 8009ff0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009ff4:	2b06      	cmp	r3, #6
 8009ff6:	f63f af39 	bhi.w	8009e6c <_tzset_unlocked_r+0x34>
 8009ffa:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009ffe:	f887 8008 	strb.w	r8, [r7, #8]
 800a002:	617b      	str	r3, [r7, #20]
 800a004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a006:	eb04 0803 	add.w	r8, r4, r3
 800a00a:	2302      	movs	r3, #2
 800a00c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a010:	2300      	movs	r3, #0
 800a012:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a016:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a01a:	930a      	str	r3, [sp, #40]	; 0x28
 800a01c:	f898 3000 	ldrb.w	r3, [r8]
 800a020:	2b2f      	cmp	r3, #47	; 0x2f
 800a022:	d109      	bne.n	800a038 <_tzset_unlocked_r+0x200>
 800a024:	e9cd a602 	strd	sl, r6, [sp, #8]
 800a028:	e9cd b600 	strd	fp, r6, [sp]
 800a02c:	493e      	ldr	r1, [pc, #248]	; (800a128 <_tzset_unlocked_r+0x2f0>)
 800a02e:	4633      	mov	r3, r6
 800a030:	aa07      	add	r2, sp, #28
 800a032:	4640      	mov	r0, r8
 800a034:	f000 f99c 	bl	800a370 <siscanf>
 800a038:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a03c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a040:	213c      	movs	r1, #60	; 0x3c
 800a042:	fb01 2203 	mla	r2, r1, r3, r2
 800a046:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a04a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a04e:	fb01 2303 	mla	r3, r1, r3, r2
 800a052:	61bb      	str	r3, [r7, #24]
 800a054:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a056:	3728      	adds	r7, #40	; 0x28
 800a058:	4444      	add	r4, r8
 800a05a:	f1b9 0f00 	cmp.w	r9, #0
 800a05e:	d020      	beq.n	800a0a2 <_tzset_unlocked_r+0x26a>
 800a060:	6868      	ldr	r0, [r5, #4]
 800a062:	f7ff fe2f 	bl	8009cc4 <__tzcalc_limits>
 800a066:	4b28      	ldr	r3, [pc, #160]	; (800a108 <_tzset_unlocked_r+0x2d0>)
 800a068:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a06a:	601a      	str	r2, [r3, #0]
 800a06c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a06e:	1a9b      	subs	r3, r3, r2
 800a070:	4a27      	ldr	r2, [pc, #156]	; (800a110 <_tzset_unlocked_r+0x2d8>)
 800a072:	bf18      	it	ne
 800a074:	2301      	movne	r3, #1
 800a076:	6013      	str	r3, [r2, #0]
 800a078:	e6f8      	b.n	8009e6c <_tzset_unlocked_r+0x34>
 800a07a:	2b2b      	cmp	r3, #43	; 0x2b
 800a07c:	bf08      	it	eq
 800a07e:	3401      	addeq	r4, #1
 800a080:	2701      	movs	r7, #1
 800a082:	e772      	b.n	8009f6a <_tzset_unlocked_r+0x132>
 800a084:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a088:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800a08c:	213c      	movs	r1, #60	; 0x3c
 800a08e:	fb01 2203 	mla	r2, r1, r3, r2
 800a092:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a096:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a09a:	fb01 2303 	mla	r3, r1, r3, r2
 800a09e:	435f      	muls	r7, r3
 800a0a0:	e77a      	b.n	8009f98 <_tzset_unlocked_r+0x160>
 800a0a2:	f04f 0901 	mov.w	r9, #1
 800a0a6:	e77d      	b.n	8009fa4 <_tzset_unlocked_r+0x16c>
 800a0a8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a0ac:	bf06      	itte	eq
 800a0ae:	3401      	addeq	r4, #1
 800a0b0:	4643      	moveq	r3, r8
 800a0b2:	2344      	movne	r3, #68	; 0x44
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	a90b      	add	r1, sp, #44	; 0x2c
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	9305      	str	r3, [sp, #20]
 800a0bc:	f000 fa1e 	bl	800a4fc <strtoul>
 800a0c0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a0c4:	9b05      	ldr	r3, [sp, #20]
 800a0c6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a0ca:	45a0      	cmp	r8, r4
 800a0cc:	d114      	bne.n	800a0f8 <_tzset_unlocked_r+0x2c0>
 800a0ce:	234d      	movs	r3, #77	; 0x4d
 800a0d0:	f1b9 0f00 	cmp.w	r9, #0
 800a0d4:	d107      	bne.n	800a0e6 <_tzset_unlocked_r+0x2ae>
 800a0d6:	722b      	strb	r3, [r5, #8]
 800a0d8:	2103      	movs	r1, #3
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a0e0:	f8c5 9014 	str.w	r9, [r5, #20]
 800a0e4:	e791      	b.n	800a00a <_tzset_unlocked_r+0x1d2>
 800a0e6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a0ea:	220b      	movs	r2, #11
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a0f6:	e788      	b.n	800a00a <_tzset_unlocked_r+0x1d2>
 800a0f8:	b280      	uxth	r0, r0
 800a0fa:	723b      	strb	r3, [r7, #8]
 800a0fc:	6178      	str	r0, [r7, #20]
 800a0fe:	e784      	b.n	800a00a <_tzset_unlocked_r+0x1d2>
 800a100:	0800b0cc 	.word	0x0800b0cc
 800a104:	20000408 	.word	0x20000408
 800a108:	20000410 	.word	0x20000410
 800a10c:	0800b0cf 	.word	0x0800b0cf
 800a110:	2000040c 	.word	0x2000040c
 800a114:	200000b4 	.word	0x200000b4
 800a118:	200003fb 	.word	0x200003fb
 800a11c:	0800b0d3 	.word	0x0800b0d3
 800a120:	0800b0f6 	.word	0x0800b0f6
 800a124:	0800b0e2 	.word	0x0800b0e2
 800a128:	0800b0f5 	.word	0x0800b0f5
 800a12c:	200003f0 	.word	0x200003f0

0800a130 <div>:
 800a130:	2900      	cmp	r1, #0
 800a132:	b510      	push	{r4, lr}
 800a134:	fb91 f4f2 	sdiv	r4, r1, r2
 800a138:	fb02 1314 	mls	r3, r2, r4, r1
 800a13c:	db06      	blt.n	800a14c <div+0x1c>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da01      	bge.n	800a146 <div+0x16>
 800a142:	3401      	adds	r4, #1
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	e9c0 4300 	strd	r4, r3, [r0]
 800a14a:	bd10      	pop	{r4, pc}
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	bfc4      	itt	gt
 800a150:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800a154:	189b      	addgt	r3, r3, r2
 800a156:	e7f6      	b.n	800a146 <div+0x16>

0800a158 <_findenv_r>:
 800a158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	4607      	mov	r7, r0
 800a15e:	4689      	mov	r9, r1
 800a160:	4616      	mov	r6, r2
 800a162:	f000 f9d5 	bl	800a510 <__env_lock>
 800a166:	4b18      	ldr	r3, [pc, #96]	; (800a1c8 <_findenv_r+0x70>)
 800a168:	681c      	ldr	r4, [r3, #0]
 800a16a:	469a      	mov	sl, r3
 800a16c:	b134      	cbz	r4, 800a17c <_findenv_r+0x24>
 800a16e:	464b      	mov	r3, r9
 800a170:	4698      	mov	r8, r3
 800a172:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a176:	b139      	cbz	r1, 800a188 <_findenv_r+0x30>
 800a178:	293d      	cmp	r1, #61	; 0x3d
 800a17a:	d1f9      	bne.n	800a170 <_findenv_r+0x18>
 800a17c:	4638      	mov	r0, r7
 800a17e:	f000 f9cd 	bl	800a51c <__env_unlock>
 800a182:	2000      	movs	r0, #0
 800a184:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a188:	eba8 0809 	sub.w	r8, r8, r9
 800a18c:	46a3      	mov	fp, r4
 800a18e:	f854 0b04 	ldr.w	r0, [r4], #4
 800a192:	2800      	cmp	r0, #0
 800a194:	d0f2      	beq.n	800a17c <_findenv_r+0x24>
 800a196:	4642      	mov	r2, r8
 800a198:	4649      	mov	r1, r9
 800a19a:	f000 f91f 	bl	800a3dc <strncmp>
 800a19e:	2800      	cmp	r0, #0
 800a1a0:	d1f4      	bne.n	800a18c <_findenv_r+0x34>
 800a1a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a1a6:	eb03 0508 	add.w	r5, r3, r8
 800a1aa:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a1ae:	2b3d      	cmp	r3, #61	; 0x3d
 800a1b0:	d1ec      	bne.n	800a18c <_findenv_r+0x34>
 800a1b2:	f8da 3000 	ldr.w	r3, [sl]
 800a1b6:	ebab 0303 	sub.w	r3, fp, r3
 800a1ba:	109b      	asrs	r3, r3, #2
 800a1bc:	4638      	mov	r0, r7
 800a1be:	6033      	str	r3, [r6, #0]
 800a1c0:	f000 f9ac 	bl	800a51c <__env_unlock>
 800a1c4:	1c68      	adds	r0, r5, #1
 800a1c6:	e7dd      	b.n	800a184 <_findenv_r+0x2c>
 800a1c8:	20000008 	.word	0x20000008

0800a1cc <_getenv_r>:
 800a1cc:	b507      	push	{r0, r1, r2, lr}
 800a1ce:	aa01      	add	r2, sp, #4
 800a1d0:	f7ff ffc2 	bl	800a158 <_findenv_r>
 800a1d4:	b003      	add	sp, #12
 800a1d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a1dc <__gettzinfo>:
 800a1dc:	4800      	ldr	r0, [pc, #0]	; (800a1e0 <__gettzinfo+0x4>)
 800a1de:	4770      	bx	lr
 800a1e0:	200000c0 	.word	0x200000c0

0800a1e4 <__retarget_lock_acquire>:
 800a1e4:	4770      	bx	lr

0800a1e6 <__retarget_lock_acquire_recursive>:
 800a1e6:	4770      	bx	lr

0800a1e8 <__retarget_lock_release>:
 800a1e8:	4770      	bx	lr

0800a1ea <__retarget_lock_release_recursive>:
 800a1ea:	4770      	bx	lr

0800a1ec <free>:
 800a1ec:	4b02      	ldr	r3, [pc, #8]	; (800a1f8 <free+0xc>)
 800a1ee:	4601      	mov	r1, r0
 800a1f0:	6818      	ldr	r0, [r3, #0]
 800a1f2:	f000 b803 	b.w	800a1fc <_free_r>
 800a1f6:	bf00      	nop
 800a1f8:	20000050 	.word	0x20000050

0800a1fc <_free_r>:
 800a1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a1fe:	2900      	cmp	r1, #0
 800a200:	d048      	beq.n	800a294 <_free_r+0x98>
 800a202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a206:	9001      	str	r0, [sp, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f1a1 0404 	sub.w	r4, r1, #4
 800a20e:	bfb8      	it	lt
 800a210:	18e4      	addlt	r4, r4, r3
 800a212:	f000 f989 	bl	800a528 <__malloc_lock>
 800a216:	4a20      	ldr	r2, [pc, #128]	; (800a298 <_free_r+0x9c>)
 800a218:	9801      	ldr	r0, [sp, #4]
 800a21a:	6813      	ldr	r3, [r2, #0]
 800a21c:	4615      	mov	r5, r2
 800a21e:	b933      	cbnz	r3, 800a22e <_free_r+0x32>
 800a220:	6063      	str	r3, [r4, #4]
 800a222:	6014      	str	r4, [r2, #0]
 800a224:	b003      	add	sp, #12
 800a226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a22a:	f000 b983 	b.w	800a534 <__malloc_unlock>
 800a22e:	42a3      	cmp	r3, r4
 800a230:	d90b      	bls.n	800a24a <_free_r+0x4e>
 800a232:	6821      	ldr	r1, [r4, #0]
 800a234:	1862      	adds	r2, r4, r1
 800a236:	4293      	cmp	r3, r2
 800a238:	bf04      	itt	eq
 800a23a:	681a      	ldreq	r2, [r3, #0]
 800a23c:	685b      	ldreq	r3, [r3, #4]
 800a23e:	6063      	str	r3, [r4, #4]
 800a240:	bf04      	itt	eq
 800a242:	1852      	addeq	r2, r2, r1
 800a244:	6022      	streq	r2, [r4, #0]
 800a246:	602c      	str	r4, [r5, #0]
 800a248:	e7ec      	b.n	800a224 <_free_r+0x28>
 800a24a:	461a      	mov	r2, r3
 800a24c:	685b      	ldr	r3, [r3, #4]
 800a24e:	b10b      	cbz	r3, 800a254 <_free_r+0x58>
 800a250:	42a3      	cmp	r3, r4
 800a252:	d9fa      	bls.n	800a24a <_free_r+0x4e>
 800a254:	6811      	ldr	r1, [r2, #0]
 800a256:	1855      	adds	r5, r2, r1
 800a258:	42a5      	cmp	r5, r4
 800a25a:	d10b      	bne.n	800a274 <_free_r+0x78>
 800a25c:	6824      	ldr	r4, [r4, #0]
 800a25e:	4421      	add	r1, r4
 800a260:	1854      	adds	r4, r2, r1
 800a262:	42a3      	cmp	r3, r4
 800a264:	6011      	str	r1, [r2, #0]
 800a266:	d1dd      	bne.n	800a224 <_free_r+0x28>
 800a268:	681c      	ldr	r4, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	6053      	str	r3, [r2, #4]
 800a26e:	4421      	add	r1, r4
 800a270:	6011      	str	r1, [r2, #0]
 800a272:	e7d7      	b.n	800a224 <_free_r+0x28>
 800a274:	d902      	bls.n	800a27c <_free_r+0x80>
 800a276:	230c      	movs	r3, #12
 800a278:	6003      	str	r3, [r0, #0]
 800a27a:	e7d3      	b.n	800a224 <_free_r+0x28>
 800a27c:	6825      	ldr	r5, [r4, #0]
 800a27e:	1961      	adds	r1, r4, r5
 800a280:	428b      	cmp	r3, r1
 800a282:	bf04      	itt	eq
 800a284:	6819      	ldreq	r1, [r3, #0]
 800a286:	685b      	ldreq	r3, [r3, #4]
 800a288:	6063      	str	r3, [r4, #4]
 800a28a:	bf04      	itt	eq
 800a28c:	1949      	addeq	r1, r1, r5
 800a28e:	6021      	streq	r1, [r4, #0]
 800a290:	6054      	str	r4, [r2, #4]
 800a292:	e7c7      	b.n	800a224 <_free_r+0x28>
 800a294:	b003      	add	sp, #12
 800a296:	bd30      	pop	{r4, r5, pc}
 800a298:	20000414 	.word	0x20000414

0800a29c <_malloc_r>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	1ccd      	adds	r5, r1, #3
 800a2a0:	f025 0503 	bic.w	r5, r5, #3
 800a2a4:	3508      	adds	r5, #8
 800a2a6:	2d0c      	cmp	r5, #12
 800a2a8:	bf38      	it	cc
 800a2aa:	250c      	movcc	r5, #12
 800a2ac:	2d00      	cmp	r5, #0
 800a2ae:	4606      	mov	r6, r0
 800a2b0:	db01      	blt.n	800a2b6 <_malloc_r+0x1a>
 800a2b2:	42a9      	cmp	r1, r5
 800a2b4:	d903      	bls.n	800a2be <_malloc_r+0x22>
 800a2b6:	230c      	movs	r3, #12
 800a2b8:	6033      	str	r3, [r6, #0]
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2be:	f000 f933 	bl	800a528 <__malloc_lock>
 800a2c2:	4921      	ldr	r1, [pc, #132]	; (800a348 <_malloc_r+0xac>)
 800a2c4:	680a      	ldr	r2, [r1, #0]
 800a2c6:	4614      	mov	r4, r2
 800a2c8:	b99c      	cbnz	r4, 800a2f2 <_malloc_r+0x56>
 800a2ca:	4f20      	ldr	r7, [pc, #128]	; (800a34c <_malloc_r+0xb0>)
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	b923      	cbnz	r3, 800a2da <_malloc_r+0x3e>
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	f000 f83c 	bl	800a350 <_sbrk_r>
 800a2d8:	6038      	str	r0, [r7, #0]
 800a2da:	4629      	mov	r1, r5
 800a2dc:	4630      	mov	r0, r6
 800a2de:	f000 f837 	bl	800a350 <_sbrk_r>
 800a2e2:	1c43      	adds	r3, r0, #1
 800a2e4:	d123      	bne.n	800a32e <_malloc_r+0x92>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	6033      	str	r3, [r6, #0]
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f000 f922 	bl	800a534 <__malloc_unlock>
 800a2f0:	e7e3      	b.n	800a2ba <_malloc_r+0x1e>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	1b5b      	subs	r3, r3, r5
 800a2f6:	d417      	bmi.n	800a328 <_malloc_r+0x8c>
 800a2f8:	2b0b      	cmp	r3, #11
 800a2fa:	d903      	bls.n	800a304 <_malloc_r+0x68>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	441c      	add	r4, r3
 800a300:	6025      	str	r5, [r4, #0]
 800a302:	e004      	b.n	800a30e <_malloc_r+0x72>
 800a304:	6863      	ldr	r3, [r4, #4]
 800a306:	42a2      	cmp	r2, r4
 800a308:	bf0c      	ite	eq
 800a30a:	600b      	streq	r3, [r1, #0]
 800a30c:	6053      	strne	r3, [r2, #4]
 800a30e:	4630      	mov	r0, r6
 800a310:	f000 f910 	bl	800a534 <__malloc_unlock>
 800a314:	f104 000b 	add.w	r0, r4, #11
 800a318:	1d23      	adds	r3, r4, #4
 800a31a:	f020 0007 	bic.w	r0, r0, #7
 800a31e:	1ac2      	subs	r2, r0, r3
 800a320:	d0cc      	beq.n	800a2bc <_malloc_r+0x20>
 800a322:	1a1b      	subs	r3, r3, r0
 800a324:	50a3      	str	r3, [r4, r2]
 800a326:	e7c9      	b.n	800a2bc <_malloc_r+0x20>
 800a328:	4622      	mov	r2, r4
 800a32a:	6864      	ldr	r4, [r4, #4]
 800a32c:	e7cc      	b.n	800a2c8 <_malloc_r+0x2c>
 800a32e:	1cc4      	adds	r4, r0, #3
 800a330:	f024 0403 	bic.w	r4, r4, #3
 800a334:	42a0      	cmp	r0, r4
 800a336:	d0e3      	beq.n	800a300 <_malloc_r+0x64>
 800a338:	1a21      	subs	r1, r4, r0
 800a33a:	4630      	mov	r0, r6
 800a33c:	f000 f808 	bl	800a350 <_sbrk_r>
 800a340:	3001      	adds	r0, #1
 800a342:	d1dd      	bne.n	800a300 <_malloc_r+0x64>
 800a344:	e7cf      	b.n	800a2e6 <_malloc_r+0x4a>
 800a346:	bf00      	nop
 800a348:	20000414 	.word	0x20000414
 800a34c:	20000418 	.word	0x20000418

0800a350 <_sbrk_r>:
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	4d06      	ldr	r5, [pc, #24]	; (800a36c <_sbrk_r+0x1c>)
 800a354:	2300      	movs	r3, #0
 800a356:	4604      	mov	r4, r0
 800a358:	4608      	mov	r0, r1
 800a35a:	602b      	str	r3, [r5, #0]
 800a35c:	f7f8 f812 	bl	8002384 <_sbrk>
 800a360:	1c43      	adds	r3, r0, #1
 800a362:	d102      	bne.n	800a36a <_sbrk_r+0x1a>
 800a364:	682b      	ldr	r3, [r5, #0]
 800a366:	b103      	cbz	r3, 800a36a <_sbrk_r+0x1a>
 800a368:	6023      	str	r3, [r4, #0]
 800a36a:	bd38      	pop	{r3, r4, r5, pc}
 800a36c:	20000754 	.word	0x20000754

0800a370 <siscanf>:
 800a370:	b40e      	push	{r1, r2, r3}
 800a372:	b510      	push	{r4, lr}
 800a374:	b09f      	sub	sp, #124	; 0x7c
 800a376:	ac21      	add	r4, sp, #132	; 0x84
 800a378:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a37c:	f854 2b04 	ldr.w	r2, [r4], #4
 800a380:	9201      	str	r2, [sp, #4]
 800a382:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a386:	9004      	str	r0, [sp, #16]
 800a388:	9008      	str	r0, [sp, #32]
 800a38a:	f7f5 fef9 	bl	8000180 <strlen>
 800a38e:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <siscanf+0x50>)
 800a390:	9005      	str	r0, [sp, #20]
 800a392:	9009      	str	r0, [sp, #36]	; 0x24
 800a394:	930d      	str	r3, [sp, #52]	; 0x34
 800a396:	480b      	ldr	r0, [pc, #44]	; (800a3c4 <siscanf+0x54>)
 800a398:	9a01      	ldr	r2, [sp, #4]
 800a39a:	6800      	ldr	r0, [r0, #0]
 800a39c:	9403      	str	r4, [sp, #12]
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9311      	str	r3, [sp, #68]	; 0x44
 800a3a2:	9316      	str	r3, [sp, #88]	; 0x58
 800a3a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3a8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a3ac:	a904      	add	r1, sp, #16
 800a3ae:	4623      	mov	r3, r4
 800a3b0:	f000 f946 	bl	800a640 <__ssvfiscanf_r>
 800a3b4:	b01f      	add	sp, #124	; 0x7c
 800a3b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3ba:	b003      	add	sp, #12
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	0800a3c9 	.word	0x0800a3c9
 800a3c4:	20000050 	.word	0x20000050

0800a3c8 <__seofread>:
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	4770      	bx	lr

0800a3cc <strcpy>:
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3d2:	f803 2b01 	strb.w	r2, [r3], #1
 800a3d6:	2a00      	cmp	r2, #0
 800a3d8:	d1f9      	bne.n	800a3ce <strcpy+0x2>
 800a3da:	4770      	bx	lr

0800a3dc <strncmp>:
 800a3dc:	b510      	push	{r4, lr}
 800a3de:	b16a      	cbz	r2, 800a3fc <strncmp+0x20>
 800a3e0:	3901      	subs	r1, #1
 800a3e2:	1884      	adds	r4, r0, r2
 800a3e4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a3e8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d103      	bne.n	800a3f8 <strncmp+0x1c>
 800a3f0:	42a0      	cmp	r0, r4
 800a3f2:	d001      	beq.n	800a3f8 <strncmp+0x1c>
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1f5      	bne.n	800a3e4 <strncmp+0x8>
 800a3f8:	1a98      	subs	r0, r3, r2
 800a3fa:	bd10      	pop	{r4, pc}
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	e7fc      	b.n	800a3fa <strncmp+0x1e>

0800a400 <_strtoul_l.isra.0>:
 800a400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a404:	4e3b      	ldr	r6, [pc, #236]	; (800a4f4 <_strtoul_l.isra.0+0xf4>)
 800a406:	4686      	mov	lr, r0
 800a408:	468c      	mov	ip, r1
 800a40a:	4660      	mov	r0, ip
 800a40c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a410:	5da5      	ldrb	r5, [r4, r6]
 800a412:	f015 0508 	ands.w	r5, r5, #8
 800a416:	d1f8      	bne.n	800a40a <_strtoul_l.isra.0+0xa>
 800a418:	2c2d      	cmp	r4, #45	; 0x2d
 800a41a:	d134      	bne.n	800a486 <_strtoul_l.isra.0+0x86>
 800a41c:	f89c 4000 	ldrb.w	r4, [ip]
 800a420:	f04f 0801 	mov.w	r8, #1
 800a424:	f100 0c02 	add.w	ip, r0, #2
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d05e      	beq.n	800a4ea <_strtoul_l.isra.0+0xea>
 800a42c:	2b10      	cmp	r3, #16
 800a42e:	d10c      	bne.n	800a44a <_strtoul_l.isra.0+0x4a>
 800a430:	2c30      	cmp	r4, #48	; 0x30
 800a432:	d10a      	bne.n	800a44a <_strtoul_l.isra.0+0x4a>
 800a434:	f89c 0000 	ldrb.w	r0, [ip]
 800a438:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a43c:	2858      	cmp	r0, #88	; 0x58
 800a43e:	d14f      	bne.n	800a4e0 <_strtoul_l.isra.0+0xe0>
 800a440:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a444:	2310      	movs	r3, #16
 800a446:	f10c 0c02 	add.w	ip, ip, #2
 800a44a:	f04f 37ff 	mov.w	r7, #4294967295
 800a44e:	2500      	movs	r5, #0
 800a450:	fbb7 f7f3 	udiv	r7, r7, r3
 800a454:	fb03 f907 	mul.w	r9, r3, r7
 800a458:	ea6f 0909 	mvn.w	r9, r9
 800a45c:	4628      	mov	r0, r5
 800a45e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a462:	2e09      	cmp	r6, #9
 800a464:	d818      	bhi.n	800a498 <_strtoul_l.isra.0+0x98>
 800a466:	4634      	mov	r4, r6
 800a468:	42a3      	cmp	r3, r4
 800a46a:	dd24      	ble.n	800a4b6 <_strtoul_l.isra.0+0xb6>
 800a46c:	2d00      	cmp	r5, #0
 800a46e:	db1f      	blt.n	800a4b0 <_strtoul_l.isra.0+0xb0>
 800a470:	4287      	cmp	r7, r0
 800a472:	d31d      	bcc.n	800a4b0 <_strtoul_l.isra.0+0xb0>
 800a474:	d101      	bne.n	800a47a <_strtoul_l.isra.0+0x7a>
 800a476:	45a1      	cmp	r9, r4
 800a478:	db1a      	blt.n	800a4b0 <_strtoul_l.isra.0+0xb0>
 800a47a:	fb00 4003 	mla	r0, r0, r3, r4
 800a47e:	2501      	movs	r5, #1
 800a480:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a484:	e7eb      	b.n	800a45e <_strtoul_l.isra.0+0x5e>
 800a486:	2c2b      	cmp	r4, #43	; 0x2b
 800a488:	bf08      	it	eq
 800a48a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a48e:	46a8      	mov	r8, r5
 800a490:	bf08      	it	eq
 800a492:	f100 0c02 	addeq.w	ip, r0, #2
 800a496:	e7c7      	b.n	800a428 <_strtoul_l.isra.0+0x28>
 800a498:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a49c:	2e19      	cmp	r6, #25
 800a49e:	d801      	bhi.n	800a4a4 <_strtoul_l.isra.0+0xa4>
 800a4a0:	3c37      	subs	r4, #55	; 0x37
 800a4a2:	e7e1      	b.n	800a468 <_strtoul_l.isra.0+0x68>
 800a4a4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a4a8:	2e19      	cmp	r6, #25
 800a4aa:	d804      	bhi.n	800a4b6 <_strtoul_l.isra.0+0xb6>
 800a4ac:	3c57      	subs	r4, #87	; 0x57
 800a4ae:	e7db      	b.n	800a468 <_strtoul_l.isra.0+0x68>
 800a4b0:	f04f 35ff 	mov.w	r5, #4294967295
 800a4b4:	e7e4      	b.n	800a480 <_strtoul_l.isra.0+0x80>
 800a4b6:	2d00      	cmp	r5, #0
 800a4b8:	da07      	bge.n	800a4ca <_strtoul_l.isra.0+0xca>
 800a4ba:	2322      	movs	r3, #34	; 0x22
 800a4bc:	f8ce 3000 	str.w	r3, [lr]
 800a4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c4:	b942      	cbnz	r2, 800a4d8 <_strtoul_l.isra.0+0xd8>
 800a4c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4ca:	f1b8 0f00 	cmp.w	r8, #0
 800a4ce:	d000      	beq.n	800a4d2 <_strtoul_l.isra.0+0xd2>
 800a4d0:	4240      	negs	r0, r0
 800a4d2:	2a00      	cmp	r2, #0
 800a4d4:	d0f7      	beq.n	800a4c6 <_strtoul_l.isra.0+0xc6>
 800a4d6:	b10d      	cbz	r5, 800a4dc <_strtoul_l.isra.0+0xdc>
 800a4d8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a4dc:	6011      	str	r1, [r2, #0]
 800a4de:	e7f2      	b.n	800a4c6 <_strtoul_l.isra.0+0xc6>
 800a4e0:	2430      	movs	r4, #48	; 0x30
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1b1      	bne.n	800a44a <_strtoul_l.isra.0+0x4a>
 800a4e6:	2308      	movs	r3, #8
 800a4e8:	e7af      	b.n	800a44a <_strtoul_l.isra.0+0x4a>
 800a4ea:	2c30      	cmp	r4, #48	; 0x30
 800a4ec:	d0a2      	beq.n	800a434 <_strtoul_l.isra.0+0x34>
 800a4ee:	230a      	movs	r3, #10
 800a4f0:	e7ab      	b.n	800a44a <_strtoul_l.isra.0+0x4a>
 800a4f2:	bf00      	nop
 800a4f4:	0800b1c9 	.word	0x0800b1c9

0800a4f8 <_strtoul_r>:
 800a4f8:	f7ff bf82 	b.w	800a400 <_strtoul_l.isra.0>

0800a4fc <strtoul>:
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	460a      	mov	r2, r1
 800a500:	4601      	mov	r1, r0
 800a502:	4802      	ldr	r0, [pc, #8]	; (800a50c <strtoul+0x10>)
 800a504:	6800      	ldr	r0, [r0, #0]
 800a506:	f7ff bf7b 	b.w	800a400 <_strtoul_l.isra.0>
 800a50a:	bf00      	nop
 800a50c:	20000050 	.word	0x20000050

0800a510 <__env_lock>:
 800a510:	4801      	ldr	r0, [pc, #4]	; (800a518 <__env_lock+0x8>)
 800a512:	f7ff be68 	b.w	800a1e6 <__retarget_lock_acquire_recursive>
 800a516:	bf00      	nop
 800a518:	2000074a 	.word	0x2000074a

0800a51c <__env_unlock>:
 800a51c:	4801      	ldr	r0, [pc, #4]	; (800a524 <__env_unlock+0x8>)
 800a51e:	f7ff be64 	b.w	800a1ea <__retarget_lock_release_recursive>
 800a522:	bf00      	nop
 800a524:	2000074a 	.word	0x2000074a

0800a528 <__malloc_lock>:
 800a528:	4801      	ldr	r0, [pc, #4]	; (800a530 <__malloc_lock+0x8>)
 800a52a:	f7ff be5c 	b.w	800a1e6 <__retarget_lock_acquire_recursive>
 800a52e:	bf00      	nop
 800a530:	2000074c 	.word	0x2000074c

0800a534 <__malloc_unlock>:
 800a534:	4801      	ldr	r0, [pc, #4]	; (800a53c <__malloc_unlock+0x8>)
 800a536:	f7ff be58 	b.w	800a1ea <__retarget_lock_release_recursive>
 800a53a:	bf00      	nop
 800a53c:	2000074c 	.word	0x2000074c

0800a540 <_realloc_r>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	4607      	mov	r7, r0
 800a544:	4614      	mov	r4, r2
 800a546:	460e      	mov	r6, r1
 800a548:	b921      	cbnz	r1, 800a554 <_realloc_r+0x14>
 800a54a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a54e:	4611      	mov	r1, r2
 800a550:	f7ff bea4 	b.w	800a29c <_malloc_r>
 800a554:	b922      	cbnz	r2, 800a560 <_realloc_r+0x20>
 800a556:	f7ff fe51 	bl	800a1fc <_free_r>
 800a55a:	4625      	mov	r5, r4
 800a55c:	4628      	mov	r0, r5
 800a55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a560:	f000 fc2c 	bl	800adbc <_malloc_usable_size_r>
 800a564:	42a0      	cmp	r0, r4
 800a566:	d20f      	bcs.n	800a588 <_realloc_r+0x48>
 800a568:	4621      	mov	r1, r4
 800a56a:	4638      	mov	r0, r7
 800a56c:	f7ff fe96 	bl	800a29c <_malloc_r>
 800a570:	4605      	mov	r5, r0
 800a572:	2800      	cmp	r0, #0
 800a574:	d0f2      	beq.n	800a55c <_realloc_r+0x1c>
 800a576:	4631      	mov	r1, r6
 800a578:	4622      	mov	r2, r4
 800a57a:	f7ff f90f 	bl	800979c <memcpy>
 800a57e:	4631      	mov	r1, r6
 800a580:	4638      	mov	r0, r7
 800a582:	f7ff fe3b 	bl	800a1fc <_free_r>
 800a586:	e7e9      	b.n	800a55c <_realloc_r+0x1c>
 800a588:	4635      	mov	r5, r6
 800a58a:	e7e7      	b.n	800a55c <_realloc_r+0x1c>

0800a58c <_sungetc_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	1c4b      	adds	r3, r1, #1
 800a590:	4614      	mov	r4, r2
 800a592:	d103      	bne.n	800a59c <_sungetc_r+0x10>
 800a594:	f04f 35ff 	mov.w	r5, #4294967295
 800a598:	4628      	mov	r0, r5
 800a59a:	bd38      	pop	{r3, r4, r5, pc}
 800a59c:	8993      	ldrh	r3, [r2, #12]
 800a59e:	f023 0320 	bic.w	r3, r3, #32
 800a5a2:	8193      	strh	r3, [r2, #12]
 800a5a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5a6:	6852      	ldr	r2, [r2, #4]
 800a5a8:	b2cd      	uxtb	r5, r1
 800a5aa:	b18b      	cbz	r3, 800a5d0 <_sungetc_r+0x44>
 800a5ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	dd08      	ble.n	800a5c4 <_sungetc_r+0x38>
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	1e5a      	subs	r2, r3, #1
 800a5b6:	6022      	str	r2, [r4, #0]
 800a5b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a5bc:	6863      	ldr	r3, [r4, #4]
 800a5be:	3301      	adds	r3, #1
 800a5c0:	6063      	str	r3, [r4, #4]
 800a5c2:	e7e9      	b.n	800a598 <_sungetc_r+0xc>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	f000 fbbf 	bl	800ad48 <__submore>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d0f1      	beq.n	800a5b2 <_sungetc_r+0x26>
 800a5ce:	e7e1      	b.n	800a594 <_sungetc_r+0x8>
 800a5d0:	6921      	ldr	r1, [r4, #16]
 800a5d2:	6823      	ldr	r3, [r4, #0]
 800a5d4:	b151      	cbz	r1, 800a5ec <_sungetc_r+0x60>
 800a5d6:	4299      	cmp	r1, r3
 800a5d8:	d208      	bcs.n	800a5ec <_sungetc_r+0x60>
 800a5da:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a5de:	42a9      	cmp	r1, r5
 800a5e0:	d104      	bne.n	800a5ec <_sungetc_r+0x60>
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	3201      	adds	r2, #1
 800a5e6:	6023      	str	r3, [r4, #0]
 800a5e8:	6062      	str	r2, [r4, #4]
 800a5ea:	e7d5      	b.n	800a598 <_sungetc_r+0xc>
 800a5ec:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a5f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5f4:	6363      	str	r3, [r4, #52]	; 0x34
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5fa:	4623      	mov	r3, r4
 800a5fc:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	2301      	movs	r3, #1
 800a604:	e7dc      	b.n	800a5c0 <_sungetc_r+0x34>

0800a606 <__ssrefill_r>:
 800a606:	b510      	push	{r4, lr}
 800a608:	460c      	mov	r4, r1
 800a60a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a60c:	b169      	cbz	r1, 800a62a <__ssrefill_r+0x24>
 800a60e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a612:	4299      	cmp	r1, r3
 800a614:	d001      	beq.n	800a61a <__ssrefill_r+0x14>
 800a616:	f7ff fdf1 	bl	800a1fc <_free_r>
 800a61a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a61c:	6063      	str	r3, [r4, #4]
 800a61e:	2000      	movs	r0, #0
 800a620:	6360      	str	r0, [r4, #52]	; 0x34
 800a622:	b113      	cbz	r3, 800a62a <__ssrefill_r+0x24>
 800a624:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a626:	6023      	str	r3, [r4, #0]
 800a628:	bd10      	pop	{r4, pc}
 800a62a:	6923      	ldr	r3, [r4, #16]
 800a62c:	6023      	str	r3, [r4, #0]
 800a62e:	2300      	movs	r3, #0
 800a630:	6063      	str	r3, [r4, #4]
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f043 0320 	orr.w	r3, r3, #32
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	f04f 30ff 	mov.w	r0, #4294967295
 800a63e:	e7f3      	b.n	800a628 <__ssrefill_r+0x22>

0800a640 <__ssvfiscanf_r>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	460c      	mov	r4, r1
 800a646:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a64a:	2100      	movs	r1, #0
 800a64c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a650:	49b2      	ldr	r1, [pc, #712]	; (800a91c <__ssvfiscanf_r+0x2dc>)
 800a652:	91a0      	str	r1, [sp, #640]	; 0x280
 800a654:	f10d 0804 	add.w	r8, sp, #4
 800a658:	49b1      	ldr	r1, [pc, #708]	; (800a920 <__ssvfiscanf_r+0x2e0>)
 800a65a:	4fb2      	ldr	r7, [pc, #712]	; (800a924 <__ssvfiscanf_r+0x2e4>)
 800a65c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a928 <__ssvfiscanf_r+0x2e8>
 800a660:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a664:	4606      	mov	r6, r0
 800a666:	91a1      	str	r1, [sp, #644]	; 0x284
 800a668:	9300      	str	r3, [sp, #0]
 800a66a:	f892 a000 	ldrb.w	sl, [r2]
 800a66e:	f1ba 0f00 	cmp.w	sl, #0
 800a672:	f000 8151 	beq.w	800a918 <__ssvfiscanf_r+0x2d8>
 800a676:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a67a:	f013 0308 	ands.w	r3, r3, #8
 800a67e:	f102 0501 	add.w	r5, r2, #1
 800a682:	d019      	beq.n	800a6b8 <__ssvfiscanf_r+0x78>
 800a684:	6863      	ldr	r3, [r4, #4]
 800a686:	2b00      	cmp	r3, #0
 800a688:	dd0f      	ble.n	800a6aa <__ssvfiscanf_r+0x6a>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	781a      	ldrb	r2, [r3, #0]
 800a68e:	5cba      	ldrb	r2, [r7, r2]
 800a690:	0712      	lsls	r2, r2, #28
 800a692:	d401      	bmi.n	800a698 <__ssvfiscanf_r+0x58>
 800a694:	462a      	mov	r2, r5
 800a696:	e7e8      	b.n	800a66a <__ssvfiscanf_r+0x2a>
 800a698:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a69a:	3201      	adds	r2, #1
 800a69c:	9245      	str	r2, [sp, #276]	; 0x114
 800a69e:	6862      	ldr	r2, [r4, #4]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	3a01      	subs	r2, #1
 800a6a4:	6062      	str	r2, [r4, #4]
 800a6a6:	6023      	str	r3, [r4, #0]
 800a6a8:	e7ec      	b.n	800a684 <__ssvfiscanf_r+0x44>
 800a6aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	4798      	blx	r3
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	d0e9      	beq.n	800a68a <__ssvfiscanf_r+0x4a>
 800a6b6:	e7ed      	b.n	800a694 <__ssvfiscanf_r+0x54>
 800a6b8:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a6bc:	f040 8083 	bne.w	800a7c6 <__ssvfiscanf_r+0x186>
 800a6c0:	9341      	str	r3, [sp, #260]	; 0x104
 800a6c2:	9343      	str	r3, [sp, #268]	; 0x10c
 800a6c4:	7853      	ldrb	r3, [r2, #1]
 800a6c6:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c8:	bf02      	ittt	eq
 800a6ca:	2310      	moveq	r3, #16
 800a6cc:	1c95      	addeq	r5, r2, #2
 800a6ce:	9341      	streq	r3, [sp, #260]	; 0x104
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	46ab      	mov	fp, r5
 800a6d4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a6d8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a6dc:	2b09      	cmp	r3, #9
 800a6de:	d91d      	bls.n	800a71c <__ssvfiscanf_r+0xdc>
 800a6e0:	4891      	ldr	r0, [pc, #580]	; (800a928 <__ssvfiscanf_r+0x2e8>)
 800a6e2:	2203      	movs	r2, #3
 800a6e4:	f7f5 fd64 	bl	80001b0 <memchr>
 800a6e8:	b140      	cbz	r0, 800a6fc <__ssvfiscanf_r+0xbc>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	eba0 0009 	sub.w	r0, r0, r9
 800a6f0:	fa03 f000 	lsl.w	r0, r3, r0
 800a6f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a6f6:	4318      	orrs	r0, r3
 800a6f8:	9041      	str	r0, [sp, #260]	; 0x104
 800a6fa:	465d      	mov	r5, fp
 800a6fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a700:	2b78      	cmp	r3, #120	; 0x78
 800a702:	d806      	bhi.n	800a712 <__ssvfiscanf_r+0xd2>
 800a704:	2b57      	cmp	r3, #87	; 0x57
 800a706:	d810      	bhi.n	800a72a <__ssvfiscanf_r+0xea>
 800a708:	2b25      	cmp	r3, #37	; 0x25
 800a70a:	d05c      	beq.n	800a7c6 <__ssvfiscanf_r+0x186>
 800a70c:	d856      	bhi.n	800a7bc <__ssvfiscanf_r+0x17c>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d074      	beq.n	800a7fc <__ssvfiscanf_r+0x1bc>
 800a712:	2303      	movs	r3, #3
 800a714:	9347      	str	r3, [sp, #284]	; 0x11c
 800a716:	230a      	movs	r3, #10
 800a718:	9342      	str	r3, [sp, #264]	; 0x108
 800a71a:	e081      	b.n	800a820 <__ssvfiscanf_r+0x1e0>
 800a71c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a71e:	fb02 1303 	mla	r3, r2, r3, r1
 800a722:	3b30      	subs	r3, #48	; 0x30
 800a724:	9343      	str	r3, [sp, #268]	; 0x10c
 800a726:	465d      	mov	r5, fp
 800a728:	e7d3      	b.n	800a6d2 <__ssvfiscanf_r+0x92>
 800a72a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a72e:	2a20      	cmp	r2, #32
 800a730:	d8ef      	bhi.n	800a712 <__ssvfiscanf_r+0xd2>
 800a732:	a101      	add	r1, pc, #4	; (adr r1, 800a738 <__ssvfiscanf_r+0xf8>)
 800a734:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a738:	0800a80b 	.word	0x0800a80b
 800a73c:	0800a713 	.word	0x0800a713
 800a740:	0800a713 	.word	0x0800a713
 800a744:	0800a869 	.word	0x0800a869
 800a748:	0800a713 	.word	0x0800a713
 800a74c:	0800a713 	.word	0x0800a713
 800a750:	0800a713 	.word	0x0800a713
 800a754:	0800a713 	.word	0x0800a713
 800a758:	0800a713 	.word	0x0800a713
 800a75c:	0800a713 	.word	0x0800a713
 800a760:	0800a713 	.word	0x0800a713
 800a764:	0800a87f 	.word	0x0800a87f
 800a768:	0800a855 	.word	0x0800a855
 800a76c:	0800a7c3 	.word	0x0800a7c3
 800a770:	0800a7c3 	.word	0x0800a7c3
 800a774:	0800a7c3 	.word	0x0800a7c3
 800a778:	0800a713 	.word	0x0800a713
 800a77c:	0800a859 	.word	0x0800a859
 800a780:	0800a713 	.word	0x0800a713
 800a784:	0800a713 	.word	0x0800a713
 800a788:	0800a713 	.word	0x0800a713
 800a78c:	0800a713 	.word	0x0800a713
 800a790:	0800a88f 	.word	0x0800a88f
 800a794:	0800a861 	.word	0x0800a861
 800a798:	0800a803 	.word	0x0800a803
 800a79c:	0800a713 	.word	0x0800a713
 800a7a0:	0800a713 	.word	0x0800a713
 800a7a4:	0800a88b 	.word	0x0800a88b
 800a7a8:	0800a713 	.word	0x0800a713
 800a7ac:	0800a855 	.word	0x0800a855
 800a7b0:	0800a713 	.word	0x0800a713
 800a7b4:	0800a713 	.word	0x0800a713
 800a7b8:	0800a80b 	.word	0x0800a80b
 800a7bc:	3b45      	subs	r3, #69	; 0x45
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d8a7      	bhi.n	800a712 <__ssvfiscanf_r+0xd2>
 800a7c2:	2305      	movs	r3, #5
 800a7c4:	e02b      	b.n	800a81e <__ssvfiscanf_r+0x1de>
 800a7c6:	6863      	ldr	r3, [r4, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	dd0d      	ble.n	800a7e8 <__ssvfiscanf_r+0x1a8>
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	781a      	ldrb	r2, [r3, #0]
 800a7d0:	4552      	cmp	r2, sl
 800a7d2:	f040 80a1 	bne.w	800a918 <__ssvfiscanf_r+0x2d8>
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	6862      	ldr	r2, [r4, #4]
 800a7da:	6023      	str	r3, [r4, #0]
 800a7dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a7de:	3a01      	subs	r2, #1
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	6062      	str	r2, [r4, #4]
 800a7e4:	9345      	str	r3, [sp, #276]	; 0x114
 800a7e6:	e755      	b.n	800a694 <__ssvfiscanf_r+0x54>
 800a7e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4798      	blx	r3
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d0eb      	beq.n	800a7cc <__ssvfiscanf_r+0x18c>
 800a7f4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	f040 8084 	bne.w	800a904 <__ssvfiscanf_r+0x2c4>
 800a7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a800:	e086      	b.n	800a910 <__ssvfiscanf_r+0x2d0>
 800a802:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a804:	f042 0220 	orr.w	r2, r2, #32
 800a808:	9241      	str	r2, [sp, #260]	; 0x104
 800a80a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a80c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a810:	9241      	str	r2, [sp, #260]	; 0x104
 800a812:	2210      	movs	r2, #16
 800a814:	2b6f      	cmp	r3, #111	; 0x6f
 800a816:	9242      	str	r2, [sp, #264]	; 0x108
 800a818:	bf34      	ite	cc
 800a81a:	2303      	movcc	r3, #3
 800a81c:	2304      	movcs	r3, #4
 800a81e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	dd41      	ble.n	800a8aa <__ssvfiscanf_r+0x26a>
 800a826:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a828:	0659      	lsls	r1, r3, #25
 800a82a:	d404      	bmi.n	800a836 <__ssvfiscanf_r+0x1f6>
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	781a      	ldrb	r2, [r3, #0]
 800a830:	5cba      	ldrb	r2, [r7, r2]
 800a832:	0712      	lsls	r2, r2, #28
 800a834:	d440      	bmi.n	800a8b8 <__ssvfiscanf_r+0x278>
 800a836:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a838:	2b02      	cmp	r3, #2
 800a83a:	dc4f      	bgt.n	800a8dc <__ssvfiscanf_r+0x29c>
 800a83c:	466b      	mov	r3, sp
 800a83e:	4622      	mov	r2, r4
 800a840:	a941      	add	r1, sp, #260	; 0x104
 800a842:	4630      	mov	r0, r6
 800a844:	f000 f874 	bl	800a930 <_scanf_chars>
 800a848:	2801      	cmp	r0, #1
 800a84a:	d065      	beq.n	800a918 <__ssvfiscanf_r+0x2d8>
 800a84c:	2802      	cmp	r0, #2
 800a84e:	f47f af21 	bne.w	800a694 <__ssvfiscanf_r+0x54>
 800a852:	e7cf      	b.n	800a7f4 <__ssvfiscanf_r+0x1b4>
 800a854:	220a      	movs	r2, #10
 800a856:	e7dd      	b.n	800a814 <__ssvfiscanf_r+0x1d4>
 800a858:	2300      	movs	r3, #0
 800a85a:	9342      	str	r3, [sp, #264]	; 0x108
 800a85c:	2303      	movs	r3, #3
 800a85e:	e7de      	b.n	800a81e <__ssvfiscanf_r+0x1de>
 800a860:	2308      	movs	r3, #8
 800a862:	9342      	str	r3, [sp, #264]	; 0x108
 800a864:	2304      	movs	r3, #4
 800a866:	e7da      	b.n	800a81e <__ssvfiscanf_r+0x1de>
 800a868:	4629      	mov	r1, r5
 800a86a:	4640      	mov	r0, r8
 800a86c:	f000 f9ac 	bl	800abc8 <__sccl>
 800a870:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a876:	9341      	str	r3, [sp, #260]	; 0x104
 800a878:	4605      	mov	r5, r0
 800a87a:	2301      	movs	r3, #1
 800a87c:	e7cf      	b.n	800a81e <__ssvfiscanf_r+0x1de>
 800a87e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a884:	9341      	str	r3, [sp, #260]	; 0x104
 800a886:	2300      	movs	r3, #0
 800a888:	e7c9      	b.n	800a81e <__ssvfiscanf_r+0x1de>
 800a88a:	2302      	movs	r3, #2
 800a88c:	e7c7      	b.n	800a81e <__ssvfiscanf_r+0x1de>
 800a88e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a890:	06c3      	lsls	r3, r0, #27
 800a892:	f53f aeff 	bmi.w	800a694 <__ssvfiscanf_r+0x54>
 800a896:	9b00      	ldr	r3, [sp, #0]
 800a898:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a89a:	1d19      	adds	r1, r3, #4
 800a89c:	9100      	str	r1, [sp, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	07c0      	lsls	r0, r0, #31
 800a8a2:	bf4c      	ite	mi
 800a8a4:	801a      	strhmi	r2, [r3, #0]
 800a8a6:	601a      	strpl	r2, [r3, #0]
 800a8a8:	e6f4      	b.n	800a694 <__ssvfiscanf_r+0x54>
 800a8aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	4798      	blx	r3
 800a8b2:	2800      	cmp	r0, #0
 800a8b4:	d0b7      	beq.n	800a826 <__ssvfiscanf_r+0x1e6>
 800a8b6:	e79d      	b.n	800a7f4 <__ssvfiscanf_r+0x1b4>
 800a8b8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a8ba:	3201      	adds	r2, #1
 800a8bc:	9245      	str	r2, [sp, #276]	; 0x114
 800a8be:	6862      	ldr	r2, [r4, #4]
 800a8c0:	3a01      	subs	r2, #1
 800a8c2:	2a00      	cmp	r2, #0
 800a8c4:	6062      	str	r2, [r4, #4]
 800a8c6:	dd02      	ble.n	800a8ce <__ssvfiscanf_r+0x28e>
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	6023      	str	r3, [r4, #0]
 800a8cc:	e7ae      	b.n	800a82c <__ssvfiscanf_r+0x1ec>
 800a8ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	4798      	blx	r3
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d0a8      	beq.n	800a82c <__ssvfiscanf_r+0x1ec>
 800a8da:	e78b      	b.n	800a7f4 <__ssvfiscanf_r+0x1b4>
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	dc06      	bgt.n	800a8ee <__ssvfiscanf_r+0x2ae>
 800a8e0:	466b      	mov	r3, sp
 800a8e2:	4622      	mov	r2, r4
 800a8e4:	a941      	add	r1, sp, #260	; 0x104
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f000 f87a 	bl	800a9e0 <_scanf_i>
 800a8ec:	e7ac      	b.n	800a848 <__ssvfiscanf_r+0x208>
 800a8ee:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <__ssvfiscanf_r+0x2ec>)
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f43f aecf 	beq.w	800a694 <__ssvfiscanf_r+0x54>
 800a8f6:	466b      	mov	r3, sp
 800a8f8:	4622      	mov	r2, r4
 800a8fa:	a941      	add	r1, sp, #260	; 0x104
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	f3af 8000 	nop.w
 800a902:	e7a1      	b.n	800a848 <__ssvfiscanf_r+0x208>
 800a904:	89a3      	ldrh	r3, [r4, #12]
 800a906:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a90a:	bf18      	it	ne
 800a90c:	f04f 30ff 	movne.w	r0, #4294967295
 800a910:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a918:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a91a:	e7f9      	b.n	800a910 <__ssvfiscanf_r+0x2d0>
 800a91c:	0800a58d 	.word	0x0800a58d
 800a920:	0800a607 	.word	0x0800a607
 800a924:	0800b1c9 	.word	0x0800b1c9
 800a928:	0800b2c9 	.word	0x0800b2c9
 800a92c:	00000000 	.word	0x00000000

0800a930 <_scanf_chars>:
 800a930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a934:	4615      	mov	r5, r2
 800a936:	688a      	ldr	r2, [r1, #8]
 800a938:	4680      	mov	r8, r0
 800a93a:	460c      	mov	r4, r1
 800a93c:	b932      	cbnz	r2, 800a94c <_scanf_chars+0x1c>
 800a93e:	698a      	ldr	r2, [r1, #24]
 800a940:	2a00      	cmp	r2, #0
 800a942:	bf0c      	ite	eq
 800a944:	2201      	moveq	r2, #1
 800a946:	f04f 32ff 	movne.w	r2, #4294967295
 800a94a:	608a      	str	r2, [r1, #8]
 800a94c:	6822      	ldr	r2, [r4, #0]
 800a94e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a9dc <_scanf_chars+0xac>
 800a952:	06d1      	lsls	r1, r2, #27
 800a954:	bf5f      	itttt	pl
 800a956:	681a      	ldrpl	r2, [r3, #0]
 800a958:	1d11      	addpl	r1, r2, #4
 800a95a:	6019      	strpl	r1, [r3, #0]
 800a95c:	6816      	ldrpl	r6, [r2, #0]
 800a95e:	2700      	movs	r7, #0
 800a960:	69a0      	ldr	r0, [r4, #24]
 800a962:	b188      	cbz	r0, 800a988 <_scanf_chars+0x58>
 800a964:	2801      	cmp	r0, #1
 800a966:	d107      	bne.n	800a978 <_scanf_chars+0x48>
 800a968:	682b      	ldr	r3, [r5, #0]
 800a96a:	781a      	ldrb	r2, [r3, #0]
 800a96c:	6963      	ldr	r3, [r4, #20]
 800a96e:	5c9b      	ldrb	r3, [r3, r2]
 800a970:	b953      	cbnz	r3, 800a988 <_scanf_chars+0x58>
 800a972:	bb27      	cbnz	r7, 800a9be <_scanf_chars+0x8e>
 800a974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a978:	2802      	cmp	r0, #2
 800a97a:	d120      	bne.n	800a9be <_scanf_chars+0x8e>
 800a97c:	682b      	ldr	r3, [r5, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a984:	071b      	lsls	r3, r3, #28
 800a986:	d41a      	bmi.n	800a9be <_scanf_chars+0x8e>
 800a988:	6823      	ldr	r3, [r4, #0]
 800a98a:	06da      	lsls	r2, r3, #27
 800a98c:	bf5e      	ittt	pl
 800a98e:	682b      	ldrpl	r3, [r5, #0]
 800a990:	781b      	ldrbpl	r3, [r3, #0]
 800a992:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a996:	682a      	ldr	r2, [r5, #0]
 800a998:	686b      	ldr	r3, [r5, #4]
 800a99a:	3201      	adds	r2, #1
 800a99c:	602a      	str	r2, [r5, #0]
 800a99e:	68a2      	ldr	r2, [r4, #8]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	3a01      	subs	r2, #1
 800a9a4:	606b      	str	r3, [r5, #4]
 800a9a6:	3701      	adds	r7, #1
 800a9a8:	60a2      	str	r2, [r4, #8]
 800a9aa:	b142      	cbz	r2, 800a9be <_scanf_chars+0x8e>
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	dcd7      	bgt.n	800a960 <_scanf_chars+0x30>
 800a9b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a9b4:	4629      	mov	r1, r5
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4798      	blx	r3
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d0d0      	beq.n	800a960 <_scanf_chars+0x30>
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	f013 0310 	ands.w	r3, r3, #16
 800a9c4:	d105      	bne.n	800a9d2 <_scanf_chars+0xa2>
 800a9c6:	68e2      	ldr	r2, [r4, #12]
 800a9c8:	3201      	adds	r2, #1
 800a9ca:	60e2      	str	r2, [r4, #12]
 800a9cc:	69a2      	ldr	r2, [r4, #24]
 800a9ce:	b102      	cbz	r2, 800a9d2 <_scanf_chars+0xa2>
 800a9d0:	7033      	strb	r3, [r6, #0]
 800a9d2:	6923      	ldr	r3, [r4, #16]
 800a9d4:	441f      	add	r7, r3
 800a9d6:	6127      	str	r7, [r4, #16]
 800a9d8:	2000      	movs	r0, #0
 800a9da:	e7cb      	b.n	800a974 <_scanf_chars+0x44>
 800a9dc:	0800b1c9 	.word	0x0800b1c9

0800a9e0 <_scanf_i>:
 800a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e4:	4698      	mov	r8, r3
 800a9e6:	4b74      	ldr	r3, [pc, #464]	; (800abb8 <_scanf_i+0x1d8>)
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	4682      	mov	sl, r0
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	ab03      	add	r3, sp, #12
 800a9f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9fa:	4b70      	ldr	r3, [pc, #448]	; (800abbc <_scanf_i+0x1dc>)
 800a9fc:	69a1      	ldr	r1, [r4, #24]
 800a9fe:	4a70      	ldr	r2, [pc, #448]	; (800abc0 <_scanf_i+0x1e0>)
 800aa00:	2903      	cmp	r1, #3
 800aa02:	bf18      	it	ne
 800aa04:	461a      	movne	r2, r3
 800aa06:	68a3      	ldr	r3, [r4, #8]
 800aa08:	9201      	str	r2, [sp, #4]
 800aa0a:	1e5a      	subs	r2, r3, #1
 800aa0c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa10:	bf88      	it	hi
 800aa12:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800aa16:	4627      	mov	r7, r4
 800aa18:	bf82      	ittt	hi
 800aa1a:	eb03 0905 	addhi.w	r9, r3, r5
 800aa1e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aa22:	60a3      	strhi	r3, [r4, #8]
 800aa24:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aa28:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800aa2c:	bf98      	it	ls
 800aa2e:	f04f 0900 	movls.w	r9, #0
 800aa32:	6023      	str	r3, [r4, #0]
 800aa34:	463d      	mov	r5, r7
 800aa36:	f04f 0b00 	mov.w	fp, #0
 800aa3a:	6831      	ldr	r1, [r6, #0]
 800aa3c:	ab03      	add	r3, sp, #12
 800aa3e:	7809      	ldrb	r1, [r1, #0]
 800aa40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aa44:	2202      	movs	r2, #2
 800aa46:	f7f5 fbb3 	bl	80001b0 <memchr>
 800aa4a:	b328      	cbz	r0, 800aa98 <_scanf_i+0xb8>
 800aa4c:	f1bb 0f01 	cmp.w	fp, #1
 800aa50:	d159      	bne.n	800ab06 <_scanf_i+0x126>
 800aa52:	6862      	ldr	r2, [r4, #4]
 800aa54:	b92a      	cbnz	r2, 800aa62 <_scanf_i+0x82>
 800aa56:	6822      	ldr	r2, [r4, #0]
 800aa58:	2308      	movs	r3, #8
 800aa5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa5e:	6063      	str	r3, [r4, #4]
 800aa60:	6022      	str	r2, [r4, #0]
 800aa62:	6822      	ldr	r2, [r4, #0]
 800aa64:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800aa68:	6022      	str	r2, [r4, #0]
 800aa6a:	68a2      	ldr	r2, [r4, #8]
 800aa6c:	1e51      	subs	r1, r2, #1
 800aa6e:	60a1      	str	r1, [r4, #8]
 800aa70:	b192      	cbz	r2, 800aa98 <_scanf_i+0xb8>
 800aa72:	6832      	ldr	r2, [r6, #0]
 800aa74:	1c51      	adds	r1, r2, #1
 800aa76:	6031      	str	r1, [r6, #0]
 800aa78:	7812      	ldrb	r2, [r2, #0]
 800aa7a:	f805 2b01 	strb.w	r2, [r5], #1
 800aa7e:	6872      	ldr	r2, [r6, #4]
 800aa80:	3a01      	subs	r2, #1
 800aa82:	2a00      	cmp	r2, #0
 800aa84:	6072      	str	r2, [r6, #4]
 800aa86:	dc07      	bgt.n	800aa98 <_scanf_i+0xb8>
 800aa88:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800aa8c:	4631      	mov	r1, r6
 800aa8e:	4650      	mov	r0, sl
 800aa90:	4790      	blx	r2
 800aa92:	2800      	cmp	r0, #0
 800aa94:	f040 8085 	bne.w	800aba2 <_scanf_i+0x1c2>
 800aa98:	f10b 0b01 	add.w	fp, fp, #1
 800aa9c:	f1bb 0f03 	cmp.w	fp, #3
 800aaa0:	d1cb      	bne.n	800aa3a <_scanf_i+0x5a>
 800aaa2:	6863      	ldr	r3, [r4, #4]
 800aaa4:	b90b      	cbnz	r3, 800aaaa <_scanf_i+0xca>
 800aaa6:	230a      	movs	r3, #10
 800aaa8:	6063      	str	r3, [r4, #4]
 800aaaa:	6863      	ldr	r3, [r4, #4]
 800aaac:	4945      	ldr	r1, [pc, #276]	; (800abc4 <_scanf_i+0x1e4>)
 800aaae:	6960      	ldr	r0, [r4, #20]
 800aab0:	1ac9      	subs	r1, r1, r3
 800aab2:	f000 f889 	bl	800abc8 <__sccl>
 800aab6:	f04f 0b00 	mov.w	fp, #0
 800aaba:	68a3      	ldr	r3, [r4, #8]
 800aabc:	6822      	ldr	r2, [r4, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d03d      	beq.n	800ab3e <_scanf_i+0x15e>
 800aac2:	6831      	ldr	r1, [r6, #0]
 800aac4:	6960      	ldr	r0, [r4, #20]
 800aac6:	f891 c000 	ldrb.w	ip, [r1]
 800aaca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aace:	2800      	cmp	r0, #0
 800aad0:	d035      	beq.n	800ab3e <_scanf_i+0x15e>
 800aad2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800aad6:	d124      	bne.n	800ab22 <_scanf_i+0x142>
 800aad8:	0510      	lsls	r0, r2, #20
 800aada:	d522      	bpl.n	800ab22 <_scanf_i+0x142>
 800aadc:	f10b 0b01 	add.w	fp, fp, #1
 800aae0:	f1b9 0f00 	cmp.w	r9, #0
 800aae4:	d003      	beq.n	800aaee <_scanf_i+0x10e>
 800aae6:	3301      	adds	r3, #1
 800aae8:	f109 39ff 	add.w	r9, r9, #4294967295
 800aaec:	60a3      	str	r3, [r4, #8]
 800aaee:	6873      	ldr	r3, [r6, #4]
 800aaf0:	3b01      	subs	r3, #1
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	6073      	str	r3, [r6, #4]
 800aaf6:	dd1b      	ble.n	800ab30 <_scanf_i+0x150>
 800aaf8:	6833      	ldr	r3, [r6, #0]
 800aafa:	3301      	adds	r3, #1
 800aafc:	6033      	str	r3, [r6, #0]
 800aafe:	68a3      	ldr	r3, [r4, #8]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	60a3      	str	r3, [r4, #8]
 800ab04:	e7d9      	b.n	800aaba <_scanf_i+0xda>
 800ab06:	f1bb 0f02 	cmp.w	fp, #2
 800ab0a:	d1ae      	bne.n	800aa6a <_scanf_i+0x8a>
 800ab0c:	6822      	ldr	r2, [r4, #0]
 800ab0e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ab12:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ab16:	d1bf      	bne.n	800aa98 <_scanf_i+0xb8>
 800ab18:	2310      	movs	r3, #16
 800ab1a:	6063      	str	r3, [r4, #4]
 800ab1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab20:	e7a2      	b.n	800aa68 <_scanf_i+0x88>
 800ab22:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ab26:	6022      	str	r2, [r4, #0]
 800ab28:	780b      	ldrb	r3, [r1, #0]
 800ab2a:	f805 3b01 	strb.w	r3, [r5], #1
 800ab2e:	e7de      	b.n	800aaee <_scanf_i+0x10e>
 800ab30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ab34:	4631      	mov	r1, r6
 800ab36:	4650      	mov	r0, sl
 800ab38:	4798      	blx	r3
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d0df      	beq.n	800aafe <_scanf_i+0x11e>
 800ab3e:	6823      	ldr	r3, [r4, #0]
 800ab40:	05d9      	lsls	r1, r3, #23
 800ab42:	d50d      	bpl.n	800ab60 <_scanf_i+0x180>
 800ab44:	42bd      	cmp	r5, r7
 800ab46:	d909      	bls.n	800ab5c <_scanf_i+0x17c>
 800ab48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ab4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab50:	4632      	mov	r2, r6
 800ab52:	4650      	mov	r0, sl
 800ab54:	4798      	blx	r3
 800ab56:	f105 39ff 	add.w	r9, r5, #4294967295
 800ab5a:	464d      	mov	r5, r9
 800ab5c:	42bd      	cmp	r5, r7
 800ab5e:	d028      	beq.n	800abb2 <_scanf_i+0x1d2>
 800ab60:	6822      	ldr	r2, [r4, #0]
 800ab62:	f012 0210 	ands.w	r2, r2, #16
 800ab66:	d113      	bne.n	800ab90 <_scanf_i+0x1b0>
 800ab68:	702a      	strb	r2, [r5, #0]
 800ab6a:	6863      	ldr	r3, [r4, #4]
 800ab6c:	9e01      	ldr	r6, [sp, #4]
 800ab6e:	4639      	mov	r1, r7
 800ab70:	4650      	mov	r0, sl
 800ab72:	47b0      	blx	r6
 800ab74:	f8d8 3000 	ldr.w	r3, [r8]
 800ab78:	6821      	ldr	r1, [r4, #0]
 800ab7a:	1d1a      	adds	r2, r3, #4
 800ab7c:	f8c8 2000 	str.w	r2, [r8]
 800ab80:	f011 0f20 	tst.w	r1, #32
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	d00f      	beq.n	800aba8 <_scanf_i+0x1c8>
 800ab88:	6018      	str	r0, [r3, #0]
 800ab8a:	68e3      	ldr	r3, [r4, #12]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	60e3      	str	r3, [r4, #12]
 800ab90:	1bed      	subs	r5, r5, r7
 800ab92:	44ab      	add	fp, r5
 800ab94:	6925      	ldr	r5, [r4, #16]
 800ab96:	445d      	add	r5, fp
 800ab98:	6125      	str	r5, [r4, #16]
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	b007      	add	sp, #28
 800ab9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba2:	f04f 0b00 	mov.w	fp, #0
 800aba6:	e7ca      	b.n	800ab3e <_scanf_i+0x15e>
 800aba8:	07ca      	lsls	r2, r1, #31
 800abaa:	bf4c      	ite	mi
 800abac:	8018      	strhmi	r0, [r3, #0]
 800abae:	6018      	strpl	r0, [r3, #0]
 800abb0:	e7eb      	b.n	800ab8a <_scanf_i+0x1aa>
 800abb2:	2001      	movs	r0, #1
 800abb4:	e7f2      	b.n	800ab9c <_scanf_i+0x1bc>
 800abb6:	bf00      	nop
 800abb8:	0800ae64 	.word	0x0800ae64
 800abbc:	0800a4f9 	.word	0x0800a4f9
 800abc0:	0800ad45 	.word	0x0800ad45
 800abc4:	0800b2e6 	.word	0x0800b2e6

0800abc8 <__sccl>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	780b      	ldrb	r3, [r1, #0]
 800abcc:	4604      	mov	r4, r0
 800abce:	2b5e      	cmp	r3, #94	; 0x5e
 800abd0:	bf0b      	itete	eq
 800abd2:	784b      	ldrbeq	r3, [r1, #1]
 800abd4:	1c48      	addne	r0, r1, #1
 800abd6:	1c88      	addeq	r0, r1, #2
 800abd8:	2200      	movne	r2, #0
 800abda:	bf08      	it	eq
 800abdc:	2201      	moveq	r2, #1
 800abde:	1e61      	subs	r1, r4, #1
 800abe0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800abe4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800abe8:	42a9      	cmp	r1, r5
 800abea:	d1fb      	bne.n	800abe4 <__sccl+0x1c>
 800abec:	b90b      	cbnz	r3, 800abf2 <__sccl+0x2a>
 800abee:	3801      	subs	r0, #1
 800abf0:	bd70      	pop	{r4, r5, r6, pc}
 800abf2:	f082 0101 	eor.w	r1, r2, #1
 800abf6:	54e1      	strb	r1, [r4, r3]
 800abf8:	1c42      	adds	r2, r0, #1
 800abfa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800abfe:	2d2d      	cmp	r5, #45	; 0x2d
 800ac00:	f102 36ff 	add.w	r6, r2, #4294967295
 800ac04:	4610      	mov	r0, r2
 800ac06:	d006      	beq.n	800ac16 <__sccl+0x4e>
 800ac08:	2d5d      	cmp	r5, #93	; 0x5d
 800ac0a:	d0f1      	beq.n	800abf0 <__sccl+0x28>
 800ac0c:	b90d      	cbnz	r5, 800ac12 <__sccl+0x4a>
 800ac0e:	4630      	mov	r0, r6
 800ac10:	e7ee      	b.n	800abf0 <__sccl+0x28>
 800ac12:	462b      	mov	r3, r5
 800ac14:	e7ef      	b.n	800abf6 <__sccl+0x2e>
 800ac16:	7816      	ldrb	r6, [r2, #0]
 800ac18:	2e5d      	cmp	r6, #93	; 0x5d
 800ac1a:	d0fa      	beq.n	800ac12 <__sccl+0x4a>
 800ac1c:	42b3      	cmp	r3, r6
 800ac1e:	dcf8      	bgt.n	800ac12 <__sccl+0x4a>
 800ac20:	4618      	mov	r0, r3
 800ac22:	3001      	adds	r0, #1
 800ac24:	4286      	cmp	r6, r0
 800ac26:	5421      	strb	r1, [r4, r0]
 800ac28:	dcfb      	bgt.n	800ac22 <__sccl+0x5a>
 800ac2a:	43d8      	mvns	r0, r3
 800ac2c:	4430      	add	r0, r6
 800ac2e:	1c5d      	adds	r5, r3, #1
 800ac30:	42b3      	cmp	r3, r6
 800ac32:	bfa8      	it	ge
 800ac34:	2000      	movge	r0, #0
 800ac36:	182b      	adds	r3, r5, r0
 800ac38:	3202      	adds	r2, #2
 800ac3a:	e7de      	b.n	800abfa <__sccl+0x32>

0800ac3c <_strtol_l.isra.0>:
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac42:	d001      	beq.n	800ac48 <_strtol_l.isra.0+0xc>
 800ac44:	2b24      	cmp	r3, #36	; 0x24
 800ac46:	d906      	bls.n	800ac56 <_strtol_l.isra.0+0x1a>
 800ac48:	f7fe fd7e 	bl	8009748 <__errno>
 800ac4c:	2316      	movs	r3, #22
 800ac4e:	6003      	str	r3, [r0, #0]
 800ac50:	2000      	movs	r0, #0
 800ac52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac56:	4f3a      	ldr	r7, [pc, #232]	; (800ad40 <_strtol_l.isra.0+0x104>)
 800ac58:	468e      	mov	lr, r1
 800ac5a:	4676      	mov	r6, lr
 800ac5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ac60:	5de5      	ldrb	r5, [r4, r7]
 800ac62:	f015 0508 	ands.w	r5, r5, #8
 800ac66:	d1f8      	bne.n	800ac5a <_strtol_l.isra.0+0x1e>
 800ac68:	2c2d      	cmp	r4, #45	; 0x2d
 800ac6a:	d134      	bne.n	800acd6 <_strtol_l.isra.0+0x9a>
 800ac6c:	f89e 4000 	ldrb.w	r4, [lr]
 800ac70:	f04f 0801 	mov.w	r8, #1
 800ac74:	f106 0e02 	add.w	lr, r6, #2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d05c      	beq.n	800ad36 <_strtol_l.isra.0+0xfa>
 800ac7c:	2b10      	cmp	r3, #16
 800ac7e:	d10c      	bne.n	800ac9a <_strtol_l.isra.0+0x5e>
 800ac80:	2c30      	cmp	r4, #48	; 0x30
 800ac82:	d10a      	bne.n	800ac9a <_strtol_l.isra.0+0x5e>
 800ac84:	f89e 4000 	ldrb.w	r4, [lr]
 800ac88:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ac8c:	2c58      	cmp	r4, #88	; 0x58
 800ac8e:	d14d      	bne.n	800ad2c <_strtol_l.isra.0+0xf0>
 800ac90:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800ac94:	2310      	movs	r3, #16
 800ac96:	f10e 0e02 	add.w	lr, lr, #2
 800ac9a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ac9e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aca2:	2600      	movs	r6, #0
 800aca4:	fbbc f9f3 	udiv	r9, ip, r3
 800aca8:	4635      	mov	r5, r6
 800acaa:	fb03 ca19 	mls	sl, r3, r9, ip
 800acae:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800acb2:	2f09      	cmp	r7, #9
 800acb4:	d818      	bhi.n	800ace8 <_strtol_l.isra.0+0xac>
 800acb6:	463c      	mov	r4, r7
 800acb8:	42a3      	cmp	r3, r4
 800acba:	dd24      	ble.n	800ad06 <_strtol_l.isra.0+0xca>
 800acbc:	2e00      	cmp	r6, #0
 800acbe:	db1f      	blt.n	800ad00 <_strtol_l.isra.0+0xc4>
 800acc0:	45a9      	cmp	r9, r5
 800acc2:	d31d      	bcc.n	800ad00 <_strtol_l.isra.0+0xc4>
 800acc4:	d101      	bne.n	800acca <_strtol_l.isra.0+0x8e>
 800acc6:	45a2      	cmp	sl, r4
 800acc8:	db1a      	blt.n	800ad00 <_strtol_l.isra.0+0xc4>
 800acca:	fb05 4503 	mla	r5, r5, r3, r4
 800acce:	2601      	movs	r6, #1
 800acd0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800acd4:	e7eb      	b.n	800acae <_strtol_l.isra.0+0x72>
 800acd6:	2c2b      	cmp	r4, #43	; 0x2b
 800acd8:	bf08      	it	eq
 800acda:	f89e 4000 	ldrbeq.w	r4, [lr]
 800acde:	46a8      	mov	r8, r5
 800ace0:	bf08      	it	eq
 800ace2:	f106 0e02 	addeq.w	lr, r6, #2
 800ace6:	e7c7      	b.n	800ac78 <_strtol_l.isra.0+0x3c>
 800ace8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800acec:	2f19      	cmp	r7, #25
 800acee:	d801      	bhi.n	800acf4 <_strtol_l.isra.0+0xb8>
 800acf0:	3c37      	subs	r4, #55	; 0x37
 800acf2:	e7e1      	b.n	800acb8 <_strtol_l.isra.0+0x7c>
 800acf4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800acf8:	2f19      	cmp	r7, #25
 800acfa:	d804      	bhi.n	800ad06 <_strtol_l.isra.0+0xca>
 800acfc:	3c57      	subs	r4, #87	; 0x57
 800acfe:	e7db      	b.n	800acb8 <_strtol_l.isra.0+0x7c>
 800ad00:	f04f 36ff 	mov.w	r6, #4294967295
 800ad04:	e7e4      	b.n	800acd0 <_strtol_l.isra.0+0x94>
 800ad06:	2e00      	cmp	r6, #0
 800ad08:	da05      	bge.n	800ad16 <_strtol_l.isra.0+0xda>
 800ad0a:	2322      	movs	r3, #34	; 0x22
 800ad0c:	6003      	str	r3, [r0, #0]
 800ad0e:	4665      	mov	r5, ip
 800ad10:	b942      	cbnz	r2, 800ad24 <_strtol_l.isra.0+0xe8>
 800ad12:	4628      	mov	r0, r5
 800ad14:	e79d      	b.n	800ac52 <_strtol_l.isra.0+0x16>
 800ad16:	f1b8 0f00 	cmp.w	r8, #0
 800ad1a:	d000      	beq.n	800ad1e <_strtol_l.isra.0+0xe2>
 800ad1c:	426d      	negs	r5, r5
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d0f7      	beq.n	800ad12 <_strtol_l.isra.0+0xd6>
 800ad22:	b10e      	cbz	r6, 800ad28 <_strtol_l.isra.0+0xec>
 800ad24:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ad28:	6011      	str	r1, [r2, #0]
 800ad2a:	e7f2      	b.n	800ad12 <_strtol_l.isra.0+0xd6>
 800ad2c:	2430      	movs	r4, #48	; 0x30
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1b3      	bne.n	800ac9a <_strtol_l.isra.0+0x5e>
 800ad32:	2308      	movs	r3, #8
 800ad34:	e7b1      	b.n	800ac9a <_strtol_l.isra.0+0x5e>
 800ad36:	2c30      	cmp	r4, #48	; 0x30
 800ad38:	d0a4      	beq.n	800ac84 <_strtol_l.isra.0+0x48>
 800ad3a:	230a      	movs	r3, #10
 800ad3c:	e7ad      	b.n	800ac9a <_strtol_l.isra.0+0x5e>
 800ad3e:	bf00      	nop
 800ad40:	0800b1c9 	.word	0x0800b1c9

0800ad44 <_strtol_r>:
 800ad44:	f7ff bf7a 	b.w	800ac3c <_strtol_l.isra.0>

0800ad48 <__submore>:
 800ad48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad4c:	460c      	mov	r4, r1
 800ad4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ad50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad54:	4299      	cmp	r1, r3
 800ad56:	d11d      	bne.n	800ad94 <__submore+0x4c>
 800ad58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ad5c:	f7ff fa9e 	bl	800a29c <_malloc_r>
 800ad60:	b918      	cbnz	r0, 800ad6a <__submore+0x22>
 800ad62:	f04f 30ff 	mov.w	r0, #4294967295
 800ad66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6e:	63a3      	str	r3, [r4, #56]	; 0x38
 800ad70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ad74:	6360      	str	r0, [r4, #52]	; 0x34
 800ad76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ad7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ad7e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ad82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ad86:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ad8a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ad8e:	6020      	str	r0, [r4, #0]
 800ad90:	2000      	movs	r0, #0
 800ad92:	e7e8      	b.n	800ad66 <__submore+0x1e>
 800ad94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ad96:	0077      	lsls	r7, r6, #1
 800ad98:	463a      	mov	r2, r7
 800ad9a:	f7ff fbd1 	bl	800a540 <_realloc_r>
 800ad9e:	4605      	mov	r5, r0
 800ada0:	2800      	cmp	r0, #0
 800ada2:	d0de      	beq.n	800ad62 <__submore+0x1a>
 800ada4:	eb00 0806 	add.w	r8, r0, r6
 800ada8:	4601      	mov	r1, r0
 800adaa:	4632      	mov	r2, r6
 800adac:	4640      	mov	r0, r8
 800adae:	f7fe fcf5 	bl	800979c <memcpy>
 800adb2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800adb6:	f8c4 8000 	str.w	r8, [r4]
 800adba:	e7e9      	b.n	800ad90 <__submore+0x48>

0800adbc <_malloc_usable_size_r>:
 800adbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adc0:	1f18      	subs	r0, r3, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bfbc      	itt	lt
 800adc6:	580b      	ldrlt	r3, [r1, r0]
 800adc8:	18c0      	addlt	r0, r0, r3
 800adca:	4770      	bx	lr

0800adcc <_init>:
 800adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adce:	bf00      	nop
 800add0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800add2:	bc08      	pop	{r3}
 800add4:	469e      	mov	lr, r3
 800add6:	4770      	bx	lr

0800add8 <_fini>:
 800add8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adda:	bf00      	nop
 800addc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adde:	bc08      	pop	{r3}
 800ade0:	469e      	mov	lr, r3
 800ade2:	4770      	bx	lr
