
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c49c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  0800c5dc  0800c5dc  0001c5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d074  0800d074  0001d074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d07c  0800d07c  0001d07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d080  0800d080  0001d080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000004  0800d084  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000ac  0800d12c  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000090  20000148  0800d1c5  00020148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 0000003d  200001d8  0800d255  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000218  0800d292  00020218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001468  2000022c  0800d2a3  0002022c  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  20001694  0800d2a3  00021694  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   0004277d  00000000  00000000  00020259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00007bf2  00000000  00000000  000629d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002b68  00000000  00000000  0006a5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000028a0  00000000  00000000  0006d130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002e9bb  00000000  00000000  0006f9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00030c35  00000000  00000000  0009e38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000fb45c  00000000  00000000  000cefc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000053  00000000  00000000  001ca41c  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000bb6c  00000000  00000000  001ca470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000022c 	.word	0x2000022c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800c5c4 	.word	0x0800c5c4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000230 	.word	0x20000230
 800017c:	0800c5c4 	.word	0x0800c5c4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96e 	b.w	8000524 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468c      	mov	ip, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	f040 8083 	bne.w	8000376 <__udivmoddi4+0x116>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d947      	bls.n	8000306 <__udivmoddi4+0xa6>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b142      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027c:	f1c2 0020 	rsb	r0, r2, #32
 8000280:	fa24 f000 	lsr.w	r0, r4, r0
 8000284:	4091      	lsls	r1, r2
 8000286:	4097      	lsls	r7, r2
 8000288:	ea40 0c01 	orr.w	ip, r0, r1
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbbc f6f8 	udiv	r6, ip, r8
 8000298:	fa1f fe87 	uxth.w	lr, r7
 800029c:	fb08 c116 	mls	r1, r8, r6, ip
 80002a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a4:	fb06 f10e 	mul.w	r1, r6, lr
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b2:	f080 8119 	bcs.w	80004e8 <__udivmoddi4+0x288>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8116 	bls.w	80004e8 <__udivmoddi4+0x288>
 80002bc:	3e02      	subs	r6, #2
 80002be:	443b      	add	r3, r7
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002c8:	fb08 3310 	mls	r3, r8, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	193c      	adds	r4, r7, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295
 80002de:	f080 8105 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f240 8102 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002e8:	3802      	subs	r0, #2
 80002ea:	443c      	add	r4, r7
 80002ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f0:	eba4 040e 	sub.w	r4, r4, lr
 80002f4:	2600      	movs	r6, #0
 80002f6:	b11d      	cbz	r5, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000300:	4631      	mov	r1, r6
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	b902      	cbnz	r2, 800030a <__udivmoddi4+0xaa>
 8000308:	deff      	udf	#255	; 0xff
 800030a:	fab2 f282 	clz	r2, r2
 800030e:	2a00      	cmp	r2, #0
 8000310:	d150      	bne.n	80003b4 <__udivmoddi4+0x154>
 8000312:	1bcb      	subs	r3, r1, r7
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	fa1f f887 	uxth.w	r8, r7
 800031c:	2601      	movs	r6, #1
 800031e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000322:	0c21      	lsrs	r1, r4, #16
 8000324:	fb0e 331c 	mls	r3, lr, ip, r3
 8000328:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800032c:	fb08 f30c 	mul.w	r3, r8, ip
 8000330:	428b      	cmp	r3, r1
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000334:	1879      	adds	r1, r7, r1
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0xe2>
 800033c:	428b      	cmp	r3, r1
 800033e:	f200 80e9 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 8000342:	4684      	mov	ip, r0
 8000344:	1ac9      	subs	r1, r1, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000350:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x10c>
 800035c:	193c      	adds	r4, r7, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x10a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80d9 	bhi.w	800051c <__udivmoddi4+0x2bc>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e7bf      	b.n	80002f6 <__udivmoddi4+0x96>
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x12e>
 800037a:	2d00      	cmp	r5, #0
 800037c:	f000 80b1 	beq.w	80004e2 <__udivmoddi4+0x282>
 8000380:	2600      	movs	r6, #0
 8000382:	e9c5 0100 	strd	r0, r1, [r5]
 8000386:	4630      	mov	r0, r6
 8000388:	4631      	mov	r1, r6
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f683 	clz	r6, r3
 8000392:	2e00      	cmp	r6, #0
 8000394:	d14a      	bne.n	800042c <__udivmoddi4+0x1cc>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0x140>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80b8 	bhi.w	8000510 <__udivmoddi4+0x2b0>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0103 	sbc.w	r1, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	468c      	mov	ip, r1
 80003aa:	2d00      	cmp	r5, #0
 80003ac:	d0a8      	beq.n	8000300 <__udivmoddi4+0xa0>
 80003ae:	e9c5 4c00 	strd	r4, ip, [r5]
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0xa0>
 80003b4:	f1c2 0320 	rsb	r3, r2, #32
 80003b8:	fa20 f603 	lsr.w	r6, r0, r3
 80003bc:	4097      	lsls	r7, r2
 80003be:	fa01 f002 	lsl.w	r0, r1, r2
 80003c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c6:	40d9      	lsrs	r1, r3
 80003c8:	4330      	orrs	r0, r6
 80003ca:	0c03      	lsrs	r3, r0, #16
 80003cc:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d0:	fa1f f887 	uxth.w	r8, r7
 80003d4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb06 f108 	mul.w	r1, r6, r8
 80003e0:	4299      	cmp	r1, r3
 80003e2:	fa04 f402 	lsl.w	r4, r4, r2
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x19c>
 80003e8:	18fb      	adds	r3, r7, r3
 80003ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ee:	f080 808d 	bcs.w	800050c <__udivmoddi4+0x2ac>
 80003f2:	4299      	cmp	r1, r3
 80003f4:	f240 808a 	bls.w	800050c <__udivmoddi4+0x2ac>
 80003f8:	3e02      	subs	r6, #2
 80003fa:	443b      	add	r3, r7
 80003fc:	1a5b      	subs	r3, r3, r1
 80003fe:	b281      	uxth	r1, r0
 8000400:	fbb3 f0fe 	udiv	r0, r3, lr
 8000404:	fb0e 3310 	mls	r3, lr, r0, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb00 f308 	mul.w	r3, r0, r8
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x1c4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f100 3cff 	add.w	ip, r0, #4294967295
 800041a:	d273      	bcs.n	8000504 <__udivmoddi4+0x2a4>
 800041c:	428b      	cmp	r3, r1
 800041e:	d971      	bls.n	8000504 <__udivmoddi4+0x2a4>
 8000420:	3802      	subs	r0, #2
 8000422:	4439      	add	r1, r7
 8000424:	1acb      	subs	r3, r1, r3
 8000426:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800042a:	e778      	b.n	800031e <__udivmoddi4+0xbe>
 800042c:	f1c6 0c20 	rsb	ip, r6, #32
 8000430:	fa03 f406 	lsl.w	r4, r3, r6
 8000434:	fa22 f30c 	lsr.w	r3, r2, ip
 8000438:	431c      	orrs	r4, r3
 800043a:	fa20 f70c 	lsr.w	r7, r0, ip
 800043e:	fa01 f306 	lsl.w	r3, r1, r6
 8000442:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000446:	fa21 f10c 	lsr.w	r1, r1, ip
 800044a:	431f      	orrs	r7, r3
 800044c:	0c3b      	lsrs	r3, r7, #16
 800044e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000452:	fa1f f884 	uxth.w	r8, r4
 8000456:	fb0e 1119 	mls	r1, lr, r9, r1
 800045a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800045e:	fb09 fa08 	mul.w	sl, r9, r8
 8000462:	458a      	cmp	sl, r1
 8000464:	fa02 f206 	lsl.w	r2, r2, r6
 8000468:	fa00 f306 	lsl.w	r3, r0, r6
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x220>
 800046e:	1861      	adds	r1, r4, r1
 8000470:	f109 30ff 	add.w	r0, r9, #4294967295
 8000474:	d248      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 8000476:	458a      	cmp	sl, r1
 8000478:	d946      	bls.n	8000508 <__udivmoddi4+0x2a8>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4421      	add	r1, r4
 8000480:	eba1 010a 	sub.w	r1, r1, sl
 8000484:	b2bf      	uxth	r7, r7
 8000486:	fbb1 f0fe 	udiv	r0, r1, lr
 800048a:	fb0e 1110 	mls	r1, lr, r0, r1
 800048e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000492:	fb00 f808 	mul.w	r8, r0, r8
 8000496:	45b8      	cmp	r8, r7
 8000498:	d907      	bls.n	80004aa <__udivmoddi4+0x24a>
 800049a:	19e7      	adds	r7, r4, r7
 800049c:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a0:	d22e      	bcs.n	8000500 <__udivmoddi4+0x2a0>
 80004a2:	45b8      	cmp	r8, r7
 80004a4:	d92c      	bls.n	8000500 <__udivmoddi4+0x2a0>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4427      	add	r7, r4
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	eba7 0708 	sub.w	r7, r7, r8
 80004b2:	fba0 8902 	umull	r8, r9, r0, r2
 80004b6:	454f      	cmp	r7, r9
 80004b8:	46c6      	mov	lr, r8
 80004ba:	4649      	mov	r1, r9
 80004bc:	d31a      	bcc.n	80004f4 <__udivmoddi4+0x294>
 80004be:	d017      	beq.n	80004f0 <__udivmoddi4+0x290>
 80004c0:	b15d      	cbz	r5, 80004da <__udivmoddi4+0x27a>
 80004c2:	ebb3 020e 	subs.w	r2, r3, lr
 80004c6:	eb67 0701 	sbc.w	r7, r7, r1
 80004ca:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ce:	40f2      	lsrs	r2, r6
 80004d0:	ea4c 0202 	orr.w	r2, ip, r2
 80004d4:	40f7      	lsrs	r7, r6
 80004d6:	e9c5 2700 	strd	r2, r7, [r5]
 80004da:	2600      	movs	r6, #0
 80004dc:	4631      	mov	r1, r6
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e70b      	b.n	8000300 <__udivmoddi4+0xa0>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0x60>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6fd      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f0:	4543      	cmp	r3, r8
 80004f2:	d2e5      	bcs.n	80004c0 <__udivmoddi4+0x260>
 80004f4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f8:	eb69 0104 	sbc.w	r1, r9, r4
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7df      	b.n	80004c0 <__udivmoddi4+0x260>
 8000500:	4608      	mov	r0, r1
 8000502:	e7d2      	b.n	80004aa <__udivmoddi4+0x24a>
 8000504:	4660      	mov	r0, ip
 8000506:	e78d      	b.n	8000424 <__udivmoddi4+0x1c4>
 8000508:	4681      	mov	r9, r0
 800050a:	e7b9      	b.n	8000480 <__udivmoddi4+0x220>
 800050c:	4666      	mov	r6, ip
 800050e:	e775      	b.n	80003fc <__udivmoddi4+0x19c>
 8000510:	4630      	mov	r0, r6
 8000512:	e74a      	b.n	80003aa <__udivmoddi4+0x14a>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	4439      	add	r1, r7
 800051a:	e713      	b.n	8000344 <__udivmoddi4+0xe4>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	e724      	b.n	800036c <__udivmoddi4+0x10c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000530:	4b06      	ldr	r3, [pc, #24]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000532:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000536:	4905      	ldr	r1, [pc, #20]	; (800054c <LL_EXTI_EnableIT_32_63+0x24>)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4313      	orrs	r3, r2
 800053c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	58000800 	.word	0x58000800

08000550 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800055c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800055e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4013      	ands	r3, r2
 8000572:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000574:	68fb      	ldr	r3, [r7, #12]
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr

08000582 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000582:	b480      	push	{r7}
 8000584:	b085      	sub	sp, #20
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800058a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800058e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4313      	orrs	r3, r2
 800059a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 800059e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ac:	68fb      	ldr	r3, [r7, #12]
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005be:	f003 fc5d 	bl	8003e7c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005c2:	f003 fc61 	bl	8003e88 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005c6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005ca:	f7ff ffad 	bl	8000528 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005ce:	f009 f889 	bl	80096e4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005d2:	f000 f821 	bl	8000618 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005d6:	f000 f8c3 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005da:	bf00      	nop
}
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <APPD_EnableCPU2+0x34>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	c403      	stmia	r4!, {r0, r1}
 80005f6:	8022      	strh	r2, [r4, #0]
 80005f8:	3402      	adds	r4, #2
 80005fa:	0c13      	lsrs	r3, r2, #16
 80005fc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80005fe:	f00a fceb 	bl	800afd8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f009 fc0c 	bl	8009e22 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800060a:	bf00      	nop
}
 800060c:	3720      	adds	r7, #32
 800060e:	46bd      	mov	sp, r7
 8000610:	bdb0      	pop	{r4, r5, r7, pc}
 8000612:	bf00      	nop
 8000614:	0800c5dc 	.word	0x0800c5dc

08000618 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000638:	2300      	movs	r3, #0
 800063a:	77fb      	strb	r3, [r7, #31]
 800063c:	e038      	b.n	80006b0 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800063e:	7ffb      	ldrb	r3, [r7, #31]
 8000640:	4a44      	ldr	r2, [pc, #272]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	4413      	add	r3, r2
 8000646:	799b      	ldrb	r3, [r3, #6]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d02b      	beq.n	80006a4 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800064c:	7ffb      	ldrb	r3, [r7, #31]
 800064e:	4a41      	ldr	r2, [pc, #260]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000654:	4a40      	ldr	r2, [pc, #256]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d01b      	beq.n	8000692 <APPD_SetCPU2GpioConfig+0x7a>
 800065a:	4a3f      	ldr	r2, [pc, #252]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d823      	bhi.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
 8000660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000664:	d003      	beq.n	800066e <APPD_SetCPU2GpioConfig+0x56>
 8000666:	4a3d      	ldr	r2, [pc, #244]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d009      	beq.n	8000680 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800066c:	e01c      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800066e:	7ffb      	ldrb	r3, [r7, #31]
 8000670:	4a38      	ldr	r2, [pc, #224]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	4413      	add	r3, r2
 8000676:	889a      	ldrh	r2, [r3, #4]
 8000678:	8bbb      	ldrh	r3, [r7, #28]
 800067a:	4313      	orrs	r3, r2
 800067c:	83bb      	strh	r3, [r7, #28]
          break;
 800067e:	e014      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000680:	7ffb      	ldrb	r3, [r7, #31]
 8000682:	4a34      	ldr	r2, [pc, #208]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000684:	00db      	lsls	r3, r3, #3
 8000686:	4413      	add	r3, r2
 8000688:	889a      	ldrh	r2, [r3, #4]
 800068a:	8b7b      	ldrh	r3, [r7, #26]
 800068c:	4313      	orrs	r3, r2
 800068e:	837b      	strh	r3, [r7, #26]
          break;
 8000690:	e00b      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000692:	7ffb      	ldrb	r3, [r7, #31]
 8000694:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <APPD_SetCPU2GpioConfig+0x13c>)
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	889a      	ldrh	r2, [r3, #4]
 800069c:	8b3b      	ldrh	r3, [r7, #24]
 800069e:	4313      	orrs	r3, r2
 80006a0:	833b      	strh	r3, [r7, #24]
          break;
 80006a2:	e002      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 80006a4:	bf00      	nop
 80006a6:	e000      	b.n	80006aa <APPD_SetCPU2GpioConfig+0x92>
          break;
 80006a8:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006aa:	7ffb      	ldrb	r3, [r7, #31]
 80006ac:	3301      	adds	r3, #1
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	7ffb      	ldrb	r3, [r7, #31]
 80006b2:	2b21      	cmp	r3, #33	; 0x21
 80006b4:	d9c3      	bls.n	800063e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c2:	8bbb      	ldrh	r3, [r7, #28]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d014      	beq.n	80006f2 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c8:	8bbb      	ldrh	r3, [r7, #28]
 80006ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	2001      	movs	r0, #1
 80006ce:	f7ff ff3f 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff ff55 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	4619      	mov	r1, r3
 80006dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e0:	f004 f8e4 	bl	80048ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e4:	8bbb      	ldrh	r3, [r7, #28]
 80006e6:	2200      	movs	r2, #0
 80006e8:	4619      	mov	r1, r3
 80006ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ee:	f004 fa4d 	bl	8004b8c <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f2:	8b7b      	ldrh	r3, [r7, #26]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d012      	beq.n	800071e <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f8:	8b7b      	ldrh	r3, [r7, #26]
 80006fa:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fc:	2002      	movs	r0, #2
 80006fe:	f7ff ff27 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff3d 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	4619      	mov	r1, r3
 800070c:	4813      	ldr	r0, [pc, #76]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800070e:	f004 f8cd 	bl	80048ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000712:	8b7b      	ldrh	r3, [r7, #26]
 8000714:	2200      	movs	r2, #0
 8000716:	4619      	mov	r1, r3
 8000718:	4810      	ldr	r0, [pc, #64]	; (800075c <APPD_SetCPU2GpioConfig+0x144>)
 800071a:	f004 fa37 	bl	8004b8c <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071e:	8b3b      	ldrh	r3, [r7, #24]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d013      	beq.n	800074c <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000724:	8b3b      	ldrh	r3, [r7, #24]
 8000726:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000728:	2004      	movs	r0, #4
 800072a:	f7ff ff11 	bl	8000550 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072e:	2004      	movs	r0, #4
 8000730:	f7ff ff27 	bl	8000582 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4807      	ldr	r0, [pc, #28]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 800073a:	f004 f8b7 	bl	80048ac <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073e:	8b3b      	ldrh	r3, [r7, #24]
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4804      	ldr	r0, [pc, #16]	; (8000758 <APPD_SetCPU2GpioConfig+0x140>)
 8000746:	f004 fa21 	bl	8004b8c <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
}
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800cdb0 	.word	0x0800cdb0
 8000758:	48000800 	.word	0x48000800
 800075c:	48000400 	.word	0x48000400

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f001 fb29 	bl	8001dc8 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f000 ffc0 	bl	8001714 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007aa:	f023 0207 	bic.w	r2, r3, #7
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58000400 	.word	0x58000400

080007c8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	608b      	str	r3, [r1, #8]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80007f4:	f000 f814 	bl	8000820 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80007f8:	4908      	ldr	r1, [pc, #32]	; (800081c <APPE_Init+0x2c>)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fd08 	bl	8001210 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000800:	f7ff fedb 	bl	80005ba <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000804:	2101      	movs	r1, #1
 8000806:	2001      	movs	r0, #1
 8000808:	f00a fc84 	bl	800b114 <UTIL_LPM_SetOffMode>

  Led_Init();
 800080c:	f000 f867 	bl	80008de <Led_Init>

  Button_Init();
 8000810:	f000 f875 	bl	80008fe <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000814:	f000 f812 	bl	800083c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000818:	bf00      	nop
}
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2000156c 	.word	0x2000156c

08000820 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000824:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000828:	f7ff ffce 	bl	80007c8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800082c:	f00a fc60 	bl	800b0f0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000830:	2004      	movs	r0, #4
 8000832:	f7ff ffb3 	bl	800079c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000836:	bf00      	nop
}
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000842:	f00a fa13 	bl	800ac6c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <appe_Tl_Init+0x50>)
 8000848:	2100      	movs	r1, #0
 800084a:	2010      	movs	r0, #16
 800084c:	f00a fd76 	bl	800b33c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <appe_Tl_Init+0x54>)
 8000852:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <appe_Tl_Init+0x58>)
 8000856:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <appe_Tl_Init+0x5c>)
 800085e:	f009 faf7 	bl	8009e50 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <appe_Tl_Init+0x60>)
 8000864:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <appe_Tl_Init+0x64>)
 8000868:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <appe_Tl_Init+0x68>)
 800086c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800086e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000872:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4618      	mov	r0, r3
 800087a:	f00a fb39 	bl	800aef0 <TL_MM_Init>

  TL_Enable();
 800087e:	f00a f9ef 	bl	800ac60 <TL_Enable>

  return;
 8000882:	bf00      	nop
}
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08009e89 	.word	0x08009e89
 8000890:	20030724 	.word	0x20030724
 8000894:	080008a9 	.word	0x080008a9
 8000898:	080008bf 	.word	0x080008bf
 800089c:	2003093c 	.word	0x2003093c
 80008a0:	20030830 	.word	0x20030830
 80008a4:	200301e8 	.word	0x200301e8

080008a8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80008b2:	bf00      	nop
}
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80008c6:	f7ff fe8b 	bl	80005e0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80008ca:	f002 f831 	bl	8002930 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2001      	movs	r0, #1
 80008d2:	f00a fc1f 	bl	800b114 <UTIL_LPM_SetOffMode>
  return;
 80008d6:	bf00      	nop
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f003 f8e2 	bl	8003aac <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f003 f8df 	bl	8003aac <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f003 f8dc 	bl	8003aac <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f003 f913 	bl	8003b20 <BSP_LED_On>
#endif

  return;
 80008fa:	bf00      	nop
}
 80008fc:	bd80      	pop	{r7, pc}

080008fe <Button_Init>:

static void Button_Init( void )
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000902:	2101      	movs	r1, #1
 8000904:	2000      	movs	r0, #0
 8000906:	f003 f93f 	bl	8003b88 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800090a:	2101      	movs	r1, #1
 800090c:	2001      	movs	r0, #1
 800090e:	f003 f93b 	bl	8003b88 <BSP_PB_Init>
#endif

  return;
 8000912:	bf00      	nop
}
 8000914:	bd80      	pop	{r7, pc}

08000916 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800091a:	bf00      	nop
}
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800092e:	f04f 30ff 	mov.w	r0, #4294967295
 8000932:	f00a fc1f 	bl	800b174 <UTIL_SEQ_Run>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000946:	2100      	movs	r1, #0
 8000948:	2010      	movs	r0, #16
 800094a:	f00a fd19 	bl	800b380 <UTIL_SEQ_SetTask>
  return;
 800094e:	bf00      	nop
}
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800095e:	2002      	movs	r0, #2
 8000960:	f00a fd7a 	bl	800b458 <UTIL_SEQ_SetEvt>
  return;
 8000964:	bf00      	nop
}
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000974:	2002      	movs	r0, #2
 8000976:	f00a fd8f 	bl	800b498 <UTIL_SEQ_WaitEvt>
  return;
 800097a:	bf00      	nop
}
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	2b10      	cmp	r3, #16
 8000990:	d006      	beq.n	80009a0 <HAL_GPIO_EXTI_Callback+0x1e>
 8000992:	2b10      	cmp	r3, #16
 8000994:	dc0d      	bgt.n	80009b2 <HAL_GPIO_EXTI_Callback+0x30>
 8000996:	2b01      	cmp	r3, #1
 8000998:	d005      	beq.n	80009a6 <HAL_GPIO_EXTI_Callback+0x24>
 800099a:	2b02      	cmp	r3, #2
 800099c:	d006      	beq.n	80009ac <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 800099e:	e008      	b.n	80009b2 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 80009a0:	f002 f9ec 	bl	8002d7c <APP_BLE_Key_Button1_Action>
      break; 
 80009a4:	e006      	b.n	80009b4 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80009a6:	f002 f9ef 	bl	8002d88 <APP_BLE_Key_Button2_Action>
      break; 
 80009aa:	e003      	b.n	80009b4 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80009ac:	f002 f9f4 	bl	8002d98 <APP_BLE_Key_Button3_Action>
      break;
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80009b2:	bf00      	nop

  }
  return;
 80009b4:	bf00      	nop
}
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <LL_EXTI_EnableIT_0_31>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80009c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	58000800 	.word	0x58000800

080009e4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	600b      	str	r3, [r1, #0]

}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58000800 	.word	0x58000800

08000a08 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a1e:	e005      	b.n	8000a2c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d1f5      	bne.n	8000a20 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a34:	683b      	ldr	r3, [r7, #0]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40002800 	.word	0x40002800

08000a48 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a58:	79ba      	ldrb	r2, [r7, #6]
 8000a5a:	491d      	ldr	r1, [pc, #116]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	440b      	add	r3, r1
 8000a66:	3315      	adds	r3, #21
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d009      	beq.n	8000a86 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3314      	adds	r3, #20
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4911      	ldr	r1, [pc, #68]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	3315      	adds	r3, #21
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3314      	adds	r3, #20
 8000aaa:	79ba      	ldrb	r2, [r7, #6]
 8000aac:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	440b      	add	r3, r1
 8000abc:	3315      	adds	r3, #21
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	701a      	strb	r2, [r3, #0]

  return;
 8000ac2:	bf00      	nop
}
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000ac 	.word	0x200000ac

08000ad4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <LinkTimerBefore+0xb8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	79ba      	ldrb	r2, [r7, #6]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d032      	beq.n	8000b56 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	4927      	ldr	r1, [pc, #156]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	440b      	add	r3, r1
 8000afe:	3314      	adds	r3, #20
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	4922      	ldr	r1, [pc, #136]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	491d      	ldr	r1, [pc, #116]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
 8000b26:	3315      	adds	r3, #21
 8000b28:	79ba      	ldrb	r2, [r7, #6]
 8000b2a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	4918      	ldr	r1, [pc, #96]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b40:	79ba      	ldrb	r2, [r7, #6]
 8000b42:	4913      	ldr	r1, [pc, #76]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3314      	adds	r3, #20
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b54:	e014      	b.n	8000b80 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3315      	adds	r3, #21
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b6a:	79ba      	ldrb	r2, [r7, #6]
 8000b6c:	4908      	ldr	r1, [pc, #32]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3314      	adds	r3, #20
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	701a      	strb	r2, [r3, #0]
  return;
 8000b7e:	bf00      	nop
}
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2000013c 	.word	0x2000013c
 8000b90:	200000ac 	.word	0x200000ac

08000b94 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <linkTimer+0x144>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d118      	bne.n	8000bda <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ba8:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <linkTimer+0x144>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <linkTimer+0x148>)
 8000bb0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <linkTimer+0x144>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	4949      	ldr	r1, [pc, #292]	; (8000ce0 <linkTimer+0x14c>)
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3315      	adds	r3, #21
 8000bc8:	2206      	movs	r2, #6
 8000bca:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bcc:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <linkTimer+0x150>)
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	81fb      	strh	r3, [r7, #14]
 8000bd8:	e078      	b.n	8000ccc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bda:	f000 f909 	bl	8000df0 <ReturnTimeElapsed>
 8000bde:	4603      	mov	r3, r0
 8000be0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	493e      	ldr	r1, [pc, #248]	; (8000ce0 <linkTimer+0x14c>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	6819      	ldr	r1, [r3, #0]
 8000bf4:	89fb      	ldrh	r3, [r7, #14]
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	4419      	add	r1, r3
 8000bfa:	4839      	ldr	r0, [pc, #228]	; (8000ce0 <linkTimer+0x14c>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4403      	add	r3, r0
 8000c06:	3308      	adds	r3, #8
 8000c08:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	4934      	ldr	r1, [pc, #208]	; (8000ce0 <linkTimer+0x14c>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <linkTimer+0x144>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <linkTimer+0x14c>)
 8000c28:	460b      	mov	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	440b      	add	r3, r1
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4413      	add	r3, r2
 8000c32:	3308      	adds	r3, #8
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d337      	bcc.n	8000cac <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <linkTimer+0x144>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c42:	7b7a      	ldrb	r2, [r7, #13]
 8000c44:	4926      	ldr	r1, [pc, #152]	; (8000ce0 <linkTimer+0x14c>)
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	440b      	add	r3, r1
 8000c50:	3315      	adds	r3, #21
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c56:	e013      	b.n	8000c80 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c58:	7b7a      	ldrb	r2, [r7, #13]
 8000c5a:	4921      	ldr	r1, [pc, #132]	; (8000ce0 <linkTimer+0x14c>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3315      	adds	r3, #21
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c6c:	7b7a      	ldrb	r2, [r7, #13]
 8000c6e:	491c      	ldr	r1, [pc, #112]	; (8000ce0 <linkTimer+0x14c>)
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3315      	adds	r3, #21
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d00b      	beq.n	8000c9e <linkTimer+0x10a>
 8000c86:	7b3a      	ldrb	r2, [r7, #12]
 8000c88:	4915      	ldr	r1, [pc, #84]	; (8000ce0 <linkTimer+0x14c>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	3308      	adds	r3, #8
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d2dc      	bcs.n	8000c58 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000c9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fecf 	bl	8000a48 <LinkTimerAfter>
 8000caa:	e00f      	b.n	8000ccc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <linkTimer+0x144>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff0c 	bl	8000ad4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <linkTimer+0x144>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <linkTimer+0x148>)
 8000cc4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <linkTimer+0x144>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000013c 	.word	0x2000013c
 8000cdc:	2000013d 	.word	0x2000013d
 8000ce0:	200000ac 	.word	0x200000ac
 8000ce4:	20000140 	.word	0x20000140

08000ce8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000cf8:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <UnlinkTimer+0xf8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d111      	bne.n	8000d28 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <UnlinkTimer+0xf8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <UnlinkTimer+0xfc>)
 8000d0c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	4935      	ldr	r1, [pc, #212]	; (8000de8 <UnlinkTimer+0x100>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3315      	adds	r3, #21
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <UnlinkTimer+0xf8>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e03e      	b.n	8000da6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	492f      	ldr	r1, [pc, #188]	; (8000de8 <UnlinkTimer+0x100>)
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	3314      	adds	r3, #20
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	492a      	ldr	r1, [pc, #168]	; (8000de8 <UnlinkTimer+0x100>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	3315      	adds	r3, #21
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d50:	79f9      	ldrb	r1, [r7, #7]
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4824      	ldr	r0, [pc, #144]	; (8000de8 <UnlinkTimer+0x100>)
 8000d56:	460b      	mov	r3, r1
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	440b      	add	r3, r1
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4403      	add	r3, r0
 8000d60:	3315      	adds	r3, #21
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2d8      	uxtb	r0, r3
 8000d66:	4920      	ldr	r1, [pc, #128]	; (8000de8 <UnlinkTimer+0x100>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	3315      	adds	r3, #21
 8000d74:	4602      	mov	r2, r0
 8000d76:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d013      	beq.n	8000da6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d7e:	79f9      	ldrb	r1, [r7, #7]
 8000d80:	7bba      	ldrb	r2, [r7, #14]
 8000d82:	4819      	ldr	r0, [pc, #100]	; (8000de8 <UnlinkTimer+0x100>)
 8000d84:	460b      	mov	r3, r1
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4403      	add	r3, r0
 8000d8e:	3314      	adds	r3, #20
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	4914      	ldr	r1, [pc, #80]	; (8000de8 <UnlinkTimer+0x100>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3314      	adds	r3, #20
 8000da2:	4602      	mov	r2, r0
 8000da4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	490f      	ldr	r1, [pc, #60]	; (8000de8 <UnlinkTimer+0x100>)
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	330c      	adds	r3, #12
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <UnlinkTimer+0xf8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d107      	bne.n	8000dd4 <UnlinkTimer+0xec>
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d104      	bne.n	8000dd4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <UnlinkTimer+0x104>)
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
}
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	2000013c 	.word	0x2000013c
 8000de4:	2000013d 	.word	0x2000013d
 8000de8:	200000ac 	.word	0x200000ac
 8000dec:	20000140 	.word	0x20000140

08000df0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfe:	d026      	beq.n	8000e4e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e00:	f7ff fe02 	bl	8000a08 <ReadRtcSsrValue>
 8000e04:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d805      	bhi.n	8000e1c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e00a      	b.n	8000e32 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <ReturnTimeElapsed+0x74>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <ReturnTimeElapsed+0x78>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <ReturnTimeElapsed+0x7c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	40d3      	lsrs	r3, r2
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	e001      	b.n	8000e52 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b29b      	uxth	r3, r3
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000140 	.word	0x20000140
 8000e64:	2000024e 	.word	0x2000024e
 8000e68:	2000024d 	.word	0x2000024d
 8000e6c:	2000024c 	.word	0x2000024c

08000e70 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d108      	bne.n	8000e92 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e80:	f7ff fdc2 	bl	8000a08 <ReadRtcSsrValue>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <RestartWakeupCounter+0xa8>)
 8000e88:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f003 f97f 	bl	800418e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000e90:	e03e      	b.n	8000f10 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d803      	bhi.n	8000ea0 <RestartWakeupCounter+0x30>
 8000e98:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <RestartWakeupCounter+0xac>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d002      	beq.n	8000ea6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ea6:	bf00      	nop
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f7      	beq.n	8000ea8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ecc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <RestartWakeupCounter+0xb4>)
 8000ed0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ed4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f003 f967 	bl	80041aa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <RestartWakeupCounter+0xb8>)
 8000ede:	695b      	ldr	r3, [r3, #20]
 8000ee0:	0c1b      	lsrs	r3, r3, #16
 8000ee2:	041b      	lsls	r3, r3, #16
 8000ee4:	88fa      	ldrh	r2, [r7, #6]
 8000ee6:	4910      	ldr	r1, [pc, #64]	; (8000f28 <RestartWakeupCounter+0xb8>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000eec:	f7ff fd8c 	bl	8000a08 <ReadRtcSsrValue>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a09      	ldr	r2, [pc, #36]	; (8000f18 <RestartWakeupCounter+0xa8>)
 8000ef4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <RestartWakeupCounter+0xb0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f08:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f0a:	f3af 8000 	nop.w
  return ;
 8000f0e:	bf00      	nop
}
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000140 	.word	0x20000140
 8000f1c:	2000024c 	.word	0x2000024c
 8000f20:	20000248 	.word	0x20000248
 8000f24:	58000800 	.word	0x58000800
 8000f28:	40002800 	.word	0x40002800

08000f2c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f32:	4b47      	ldr	r3, [pc, #284]	; (8001050 <RescheduleTimerList+0x124>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3e:	d108      	bne.n	8000f52 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f40:	bf00      	nop
 8000f42:	4b44      	ldr	r3, [pc, #272]	; (8001054 <RescheduleTimerList+0x128>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f7      	bne.n	8000f42 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f52:	4b40      	ldr	r3, [pc, #256]	; (8001054 <RescheduleTimerList+0x128>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4b3e      	ldr	r3, [pc, #248]	; (8001054 <RescheduleTimerList+0x128>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f64:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f66:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <RescheduleTimerList+0x12c>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f6c:	7bfa      	ldrb	r2, [r7, #15]
 8000f6e:	493b      	ldr	r1, [pc, #236]	; (800105c <RescheduleTimerList+0x130>)
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	440b      	add	r3, r1
 8000f7a:	3308      	adds	r3, #8
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f80:	f7ff ff36 	bl	8000df0 <ReturnTimeElapsed>
 8000f84:	4603      	mov	r3, r0
 8000f86:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d205      	bcs.n	8000f9c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <RescheduleTimerList+0x134>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	e04d      	b.n	8001038 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f9c:	88fb      	ldrh	r3, [r7, #6]
 8000f9e:	4a31      	ldr	r2, [pc, #196]	; (8001064 <RescheduleTimerList+0x138>)
 8000fa0:	8812      	ldrh	r2, [r2, #0]
 8000fa2:	b292      	uxth	r2, r2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d906      	bls.n	8000fbc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000fae:	4b2d      	ldr	r3, [pc, #180]	; (8001064 <RescheduleTimerList+0x138>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <RescheduleTimerList+0x134>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e03d      	b.n	8001038 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	; (8001060 <RescheduleTimerList+0x134>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fcc:	e034      	b.n	8001038 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	4922      	ldr	r1, [pc, #136]	; (800105c <RescheduleTimerList+0x130>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	3308      	adds	r3, #8
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d20a      	bcs.n	8000ffc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	491c      	ldr	r1, [pc, #112]	; (800105c <RescheduleTimerList+0x130>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3308      	adds	r3, #8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e013      	b.n	8001024 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	4917      	ldr	r1, [pc, #92]	; (800105c <RescheduleTimerList+0x130>)
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3308      	adds	r3, #8
 800100c:	6819      	ldr	r1, [r3, #0]
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <RescheduleTimerList+0x130>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	4403      	add	r3, r0
 8001020:	3308      	adds	r3, #8
 8001022:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	490d      	ldr	r1, [pc, #52]	; (800105c <RescheduleTimerList+0x130>)
 8001028:	4613      	mov	r3, r2
 800102a:	005b      	lsls	r3, r3, #1
 800102c:	4413      	add	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	3315      	adds	r3, #21
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	2b06      	cmp	r3, #6
 800103c:	d1c7      	bne.n	8000fce <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800103e:	89bb      	ldrh	r3, [r7, #12]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff15 	bl	8000e70 <RestartWakeupCounter>

  return ;
 8001046:	bf00      	nop
}
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40002800 	.word	0x40002800
 8001054:	20000248 	.word	0x20000248
 8001058:	2000013c 	.word	0x2000013c
 800105c:	200000ac 	.word	0x200000ac
 8001060:	20000144 	.word	0x20000144
 8001064:	20000250 	.word	0x20000250

08001068 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800106e:	f3ef 8310 	mrs	r3, PRIMASK
 8001072:	617b      	str	r3, [r7, #20]
  return(result);
 8001074:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800107c:	4b5f      	ldr	r3, [pc, #380]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	22ca      	movs	r2, #202	; 0xca
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2253      	movs	r2, #83	; 0x53
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8001090:	4b5a      	ldr	r3, [pc, #360]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	4b58      	ldr	r3, [pc, #352]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010a2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80010a4:	4b56      	ldr	r3, [pc, #344]	; (8001200 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010ac:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010b0:	4954      	ldr	r1, [pc, #336]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	440b      	add	r3, r1
 80010bc:	330c      	adds	r3, #12
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d172      	bne.n	80011ac <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010ca:	494e      	ldr	r1, [pc, #312]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	4413      	add	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	440b      	add	r3, r1
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010da:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010de:	4949      	ldr	r1, [pc, #292]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	3310      	adds	r3, #16
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010f0:	4b45      	ldr	r3, [pc, #276]	; (8001208 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d050      	beq.n	800119c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80010fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010fe:	4941      	ldr	r1, [pc, #260]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001100:	4613      	mov	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	440b      	add	r3, r1
 800110a:	330d      	adds	r3, #13
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b01      	cmp	r3, #1
 8001112:	d126      	bne.n	8001162 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001118:	2101      	movs	r1, #1
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fde4 	bl	8000ce8 <UnlinkTimer>
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	f383 8810 	msr	PRIMASK, r3
}
 800112a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800112c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001130:	4934      	ldr	r1, [pc, #208]	; (8001204 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	440b      	add	r3, r1
 800113c:	3304      	adds	r3, #4
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fa4e 	bl	80015e8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	22ca      	movs	r2, #202	; 0xca
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
 8001156:	4b29      	ldr	r3, [pc, #164]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2253      	movs	r2, #83	; 0x53
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
 8001160:	e014      	b.n	800118c <HW_TS_RTC_Wakeup_Handler+0x124>
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f383 8810 	msr	PRIMASK, r3
}
 800116c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800116e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f9ac 	bl	80014d0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	22ca      	movs	r2, #202	; 0xca
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2253      	movs	r2, #83	; 0x53
 800118a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800118c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	4619      	mov	r1, r3
 8001194:	69b8      	ldr	r0, [r7, #24]
 8001196:	f000 faaf 	bl	80016f8 <HW_TS_RTC_Int_AppNot>
 800119a:	e025      	b.n	80011e8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 800119c:	f7ff fec6 	bl	8000f2c <RescheduleTimerList>
 80011a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f383 8810 	msr	PRIMASK, r3
}
 80011aa:	e01d      	b.n	80011e8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011ac:	bf00      	nop
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f7      	beq.n	80011ae <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011d2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80011d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011da:	60da      	str	r2, [r3, #12]
 80011dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011de:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f383 8810 	msr	PRIMASK, r3
}
 80011e6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x194>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	22ff      	movs	r2, #255	; 0xff
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80011f2:	bf00      	nop
}
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000248 	.word	0x20000248
 8001200:	2000013c 	.word	0x2000013c
 8001204:	200000ac 	.word	0x200000ac
 8001208:	20000144 	.word	0x20000144
 800120c:	58000800 	.word	0x58000800

08001210 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800121c:	4a64      	ldr	r2, [pc, #400]	; (80013b0 <HW_TS_Init+0x1a0>)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001222:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	22ca      	movs	r2, #202	; 0xca
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
 800122c:	4b60      	ldr	r3, [pc, #384]	; (80013b0 <HW_TS_Init+0x1a0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2253      	movs	r2, #83	; 0x53
 8001234:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001236:	4b5f      	ldr	r3, [pc, #380]	; (80013b4 <HW_TS_Init+0x1a4>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	4a5e      	ldr	r2, [pc, #376]	; (80013b4 <HW_TS_Init+0x1a4>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001242:	4b5c      	ldr	r3, [pc, #368]	; (80013b4 <HW_TS_Init+0x1a4>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f1c3 0304 	rsb	r3, r3, #4
 8001252:	b2da      	uxtb	r2, r3
 8001254:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HW_TS_Init+0x1a8>)
 8001256:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <HW_TS_Init+0x1a4>)
 800125a:	691b      	ldr	r3, [r3, #16]
 800125c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001260:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001264:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	fa92 f2a2 	rbit	r2, r2
 800126c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	2a00      	cmp	r2, #0
 8001276:	d101      	bne.n	800127c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001278:	2220      	movs	r2, #32
 800127a:	e003      	b.n	8001284 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	fab2 f282 	clz	r2, r2
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	40d3      	lsrs	r3, r2
 8001286:	b2db      	uxtb	r3, r3
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b4b      	ldr	r3, [pc, #300]	; (80013bc <HW_TS_Init+0x1ac>)
 800128e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001290:	4b48      	ldr	r3, [pc, #288]	; (80013b4 <HW_TS_Init+0x1a4>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	b29b      	uxth	r3, r3
 8001296:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800129a:	b29b      	uxth	r3, r3
 800129c:	3301      	adds	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <HW_TS_Init+0x1b0>)
 80012a2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80012a4:	4b46      	ldr	r3, [pc, #280]	; (80013c0 <HW_TS_Init+0x1b0>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	4a44      	ldr	r2, [pc, #272]	; (80013bc <HW_TS_Init+0x1ac>)
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012b6:	4a40      	ldr	r2, [pc, #256]	; (80013b8 <HW_TS_Init+0x1a8>)
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	40d3      	lsrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d904      	bls.n	80012d2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012c8:	4b3e      	ldr	r3, [pc, #248]	; (80013c4 <HW_TS_Init+0x1b4>)
 80012ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ce:	801a      	strh	r2, [r3, #0]
 80012d0:	e003      	b.n	80012da <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b3b      	ldr	r3, [pc, #236]	; (80013c4 <HW_TS_Init+0x1b4>)
 80012d8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012da:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012de:	f7ff fb81 	bl	80009e4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012e6:	f7ff fb69 	bl	80009bc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d143      	bne.n	8001378 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012f0:	4b35      	ldr	r3, [pc, #212]	; (80013c8 <HW_TS_Init+0x1b8>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <HW_TS_Init+0x1bc>)
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
 80012fc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012fe:	2300      	movs	r3, #0
 8001300:	77fb      	strb	r3, [r7, #31]
 8001302:	e00c      	b.n	800131e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001304:	7ffa      	ldrb	r2, [r7, #31]
 8001306:	4932      	ldr	r1, [pc, #200]	; (80013d0 <HW_TS_Init+0x1c0>)
 8001308:	4613      	mov	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	4413      	add	r3, r2
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	330c      	adds	r3, #12
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	3301      	adds	r3, #1
 800131c:	77fb      	strb	r3, [r7, #31]
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d9ef      	bls.n	8001304 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HW_TS_Init+0x1c4>)
 8001326:	2206      	movs	r2, #6
 8001328:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800132a:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HW_TS_Init+0x1a0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b1f      	ldr	r3, [pc, #124]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800133c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HW_TS_Init+0x1a0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001352:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001354:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HW_TS_Init+0x1c8>)
 8001356:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800135a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800135c:	2003      	movs	r0, #3
 800135e:	f002 ff24 	bl	80041aa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HW_TS_Init+0x1a0>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	e00a      	b.n	800138e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001378:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <HW_TS_Init+0x1a0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001388:	2003      	movs	r0, #3
 800138a:	f002 ff00 	bl	800418e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <HW_TS_Init+0x1a0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	22ff      	movs	r2, #255	; 0xff
 8001396:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001398:	2200      	movs	r2, #0
 800139a:	2103      	movs	r1, #3
 800139c:	2003      	movs	r0, #3
 800139e:	f002 feb4 	bl	800410a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013a2:	2003      	movs	r0, #3
 80013a4:	f002 fecb 	bl	800413e <HAL_NVIC_EnableIRQ>

  return;
 80013a8:	bf00      	nop
}
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000248 	.word	0x20000248
 80013b4:	40002800 	.word	0x40002800
 80013b8:	2000024c 	.word	0x2000024c
 80013bc:	2000024d 	.word	0x2000024d
 80013c0:	2000024e 	.word	0x2000024e
 80013c4:	20000250 	.word	0x20000250
 80013c8:	20000144 	.word	0x20000144
 80013cc:	20000140 	.word	0x20000140
 80013d0:	200000ac 	.word	0x200000ac
 80013d4:	2000013c 	.word	0x2000013c
 80013d8:	58000800 	.word	0x58000800

080013dc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013dc:	b480      	push	{r7}
 80013de:	b08b      	sub	sp, #44	; 0x2c
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	4613      	mov	r3, r2
 80013ea:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013f2:	f3ef 8310 	mrs	r3, PRIMASK
 80013f6:	61fb      	str	r3, [r7, #28]
  return(result);
 80013f8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001400:	e004      	b.n	800140c <HW_TS_Create+0x30>
  {
    loop++;
 8001402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001406:	3301      	adds	r3, #1
 8001408:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800140c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001410:	2b05      	cmp	r3, #5
 8001412:	d80c      	bhi.n	800142e <HW_TS_Create+0x52>
 8001414:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001418:	492c      	ldr	r1, [pc, #176]	; (80014cc <HW_TS_Create+0xf0>)
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	330c      	adds	r3, #12
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1e9      	bne.n	8001402 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800142e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001432:	2b06      	cmp	r3, #6
 8001434:	d038      	beq.n	80014a8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001436:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800143a:	4924      	ldr	r1, [pc, #144]	; (80014cc <HW_TS_Create+0xf0>)
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	f383 8810 	msr	PRIMASK, r3
}
 8001456:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001458:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800145c:	491b      	ldr	r1, [pc, #108]	; (80014cc <HW_TS_Create+0xf0>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	440b      	add	r3, r1
 8001468:	3310      	adds	r3, #16
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800146e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001472:	4916      	ldr	r1, [pc, #88]	; (80014cc <HW_TS_Create+0xf0>)
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	440b      	add	r3, r1
 800147e:	330d      	adds	r3, #13
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001484:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001488:	4910      	ldr	r1, [pc, #64]	; (80014cc <HW_TS_Create+0xf0>)
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	440b      	add	r3, r1
 8001494:	683a      	ldr	r2, [r7, #0]
 8001496:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800149e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014a6:	e008      	b.n	80014ba <HW_TS_Create+0xde>
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f383 8810 	msr	PRIMASK, r3
}
 80014b2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014b4:	2301      	movs	r3, #1
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014be:	4618      	mov	r0, r3
 80014c0:	372c      	adds	r7, #44	; 0x2c
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	200000ac 	.word	0x200000ac

080014d0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014da:	f3ef 8310 	mrs	r3, PRIMASK
 80014de:	60fb      	str	r3, [r7, #12]
  return(result);
 80014e0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014e4:	b672      	cpsid	i
}
 80014e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014e8:	2003      	movs	r0, #3
 80014ea:	f002 fe36 	bl	800415a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <HW_TS_Stop+0x100>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	22ca      	movs	r2, #202	; 0xca
 80014f6:	625a      	str	r2, [r3, #36]	; 0x24
 80014f8:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <HW_TS_Stop+0x100>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2253      	movs	r2, #83	; 0x53
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	4933      	ldr	r1, [pc, #204]	; (80015d4 <HW_TS_Stop+0x104>)
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	440b      	add	r3, r1
 8001510:	330c      	adds	r3, #12
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b02      	cmp	r3, #2
 8001518:	d148      	bne.n	80015ac <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fbe2 	bl	8000ce8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HW_TS_Stop+0x108>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800152a:	7cfb      	ldrb	r3, [r7, #19]
 800152c:	2b06      	cmp	r3, #6
 800152e:	d135      	bne.n	800159c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HW_TS_Stop+0x10c>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800153c:	d108      	bne.n	8001550 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800153e:	bf00      	nop
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <HW_TS_Stop+0x100>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f7      	bne.n	8001540 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HW_TS_Stop+0x100>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HW_TS_Stop+0x100>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001562:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001564:	bf00      	nop
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HW_TS_Stop+0x100>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f7      	beq.n	8001566 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <HW_TS_Stop+0x100>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HW_TS_Stop+0x100>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800158a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HW_TS_Stop+0x110>)
 800158e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001592:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001594:	2003      	movs	r0, #3
 8001596:	f002 fe08 	bl	80041aa <HAL_NVIC_ClearPendingIRQ>
 800159a:	e007      	b.n	80015ac <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HW_TS_Stop+0x114>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	7cfa      	ldrb	r2, [r7, #19]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80015a8:	f7ff fcc0 	bl	8000f2c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HW_TS_Stop+0x100>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	22ff      	movs	r2, #255	; 0xff
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015b6:	2003      	movs	r0, #3
 80015b8:	f002 fdc1 	bl	800413e <HAL_NVIC_EnableIRQ>
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	f383 8810 	msr	PRIMASK, r3
}
 80015c6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015c8:	bf00      	nop
}
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000248 	.word	0x20000248
 80015d4:	200000ac 	.word	0x200000ac
 80015d8:	2000013c 	.word	0x2000013c
 80015dc:	40002800 	.word	0x40002800
 80015e0:	58000800 	.word	0x58000800
 80015e4:	2000013d 	.word	0x2000013d

080015e8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015f4:	79fa      	ldrb	r2, [r7, #7]
 80015f6:	493c      	ldr	r1, [pc, #240]	; (80016e8 <HW_TS_Start+0x100>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	330c      	adds	r3, #12
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d103      	bne.n	8001614 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff5e 	bl	80014d0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001614:	f3ef 8310 	mrs	r3, PRIMASK
 8001618:	60fb      	str	r3, [r7, #12]
  return(result);
 800161a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800161c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800161e:	b672      	cpsid	i
}
 8001620:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001622:	2003      	movs	r0, #3
 8001624:	f002 fd99 	bl	800415a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001628:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HW_TS_Start+0x104>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	22ca      	movs	r2, #202	; 0xca
 8001630:	625a      	str	r2, [r3, #36]	; 0x24
 8001632:	4b2e      	ldr	r3, [pc, #184]	; (80016ec <HW_TS_Start+0x104>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2253      	movs	r2, #83	; 0x53
 800163a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800163c:	79fa      	ldrb	r2, [r7, #7]
 800163e:	492a      	ldr	r1, [pc, #168]	; (80016e8 <HW_TS_Start+0x100>)
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	330c      	adds	r3, #12
 800164c:	2202      	movs	r2, #2
 800164e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001650:	79fa      	ldrb	r2, [r7, #7]
 8001652:	4925      	ldr	r1, [pc, #148]	; (80016e8 <HW_TS_Start+0x100>)
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	440b      	add	r3, r1
 800165e:	3308      	adds	r3, #8
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001664:	79fa      	ldrb	r2, [r7, #7]
 8001666:	4920      	ldr	r1, [pc, #128]	; (80016e8 <HW_TS_Start+0x100>)
 8001668:	4613      	mov	r3, r2
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3304      	adds	r3, #4
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fa8a 	bl	8000b94 <linkTimer>
 8001680:	4603      	mov	r3, r0
 8001682:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001684:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HW_TS_Start+0x108>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HW_TS_Start+0x10c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	7c7a      	ldrb	r2, [r7, #17]
 8001692:	429a      	cmp	r2, r3
 8001694:	d002      	beq.n	800169c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001696:	f7ff fc49 	bl	8000f2c <RescheduleTimerList>
 800169a:	e013      	b.n	80016c4 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800169c:	79fa      	ldrb	r2, [r7, #7]
 800169e:	4912      	ldr	r1, [pc, #72]	; (80016e8 <HW_TS_Start+0x100>)
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	3308      	adds	r3, #8
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	8a7b      	ldrh	r3, [r7, #18]
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	1ac9      	subs	r1, r1, r3
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <HW_TS_Start+0x100>)
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4403      	add	r3, r0
 80016c0:	3308      	adds	r3, #8
 80016c2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <HW_TS_Start+0x104>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	22ff      	movs	r2, #255	; 0xff
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016ce:	2003      	movs	r0, #3
 80016d0:	f002 fd35 	bl	800413e <HAL_NVIC_EnableIRQ>
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f383 8810 	msr	PRIMASK, r3
}
 80016de:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016e0:	bf00      	nop
}
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200000ac 	.word	0x200000ac
 80016ec:	20000248 	.word	0x20000248
 80016f0:	2000013c 	.word	0x2000013c
 80016f4:	2000013d 	.word	0x2000013d

080016f8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	460b      	mov	r3, r1
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4798      	blx	r3

  return;
 800170a:	bf00      	nop
}
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4603      	mov	r3, r0
 8001720:	73fb      	strb	r3, [r7, #15]
 8001722:	4613      	mov	r3, r2
 8001724:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800172a:	2300      	movs	r3, #0
 800172c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d002      	beq.n	800173a <HW_UART_Transmit_DMA+0x26>
 8001734:	2b02      	cmp	r3, #2
 8001736:	d00f      	beq.n	8001758 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8001738:	e01d      	b.n	8001776 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <HW_UART_Transmit_DMA+0xa4>)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HW_UART_Transmit_DMA+0xa8>)
 8001742:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <HW_UART_Transmit_DMA+0xac>)
 8001744:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8001746:	89bb      	ldrh	r3, [r7, #12]
 8001748:	461a      	mov	r2, r3
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	481b      	ldr	r0, [pc, #108]	; (80017bc <HW_UART_Transmit_DMA+0xa8>)
 800174e:	f005 fecb 	bl	80074e8 <HAL_UART_Transmit_DMA>
 8001752:	4603      	mov	r3, r0
 8001754:	75fb      	strb	r3, [r7, #23]
            break;
 8001756:	e00e      	b.n	8001776 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8001758:	4a1a      	ldr	r2, [pc, #104]	; (80017c4 <HW_UART_Transmit_DMA+0xb0>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HW_UART_Transmit_DMA+0xb4>)
 8001760:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HW_UART_Transmit_DMA+0xb8>)
 8001762:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001764:	89bb      	ldrh	r3, [r7, #12]
 8001766:	461a      	mov	r2, r3
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	4817      	ldr	r0, [pc, #92]	; (80017c8 <HW_UART_Transmit_DMA+0xb4>)
 800176c:	f005 febc 	bl	80074e8 <HAL_UART_Transmit_DMA>
 8001770:	4603      	mov	r3, r0
 8001772:	75fb      	strb	r3, [r7, #23]
            break;
 8001774:	bf00      	nop
    }

    switch (hal_status)
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	2b03      	cmp	r3, #3
 800177a:	d817      	bhi.n	80017ac <HW_UART_Transmit_DMA+0x98>
 800177c:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <HW_UART_Transmit_DMA+0x70>)
 800177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001782:	bf00      	nop
 8001784:	08001795 	.word	0x08001795
 8001788:	0800179b 	.word	0x0800179b
 800178c:	080017a1 	.word	0x080017a1
 8001790:	080017a7 	.word	0x080017a7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001794:	2300      	movs	r3, #0
 8001796:	75bb      	strb	r3, [r7, #22]
            break;
 8001798:	e009      	b.n	80017ae <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800179a:	2301      	movs	r3, #1
 800179c:	75bb      	strb	r3, [r7, #22]
            break;
 800179e:	e006      	b.n	80017ae <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80017a0:	2302      	movs	r3, #2
 80017a2:	75bb      	strb	r3, [r7, #22]
            break;
 80017a4:	e003      	b.n	80017ae <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80017a6:	2303      	movs	r3, #3
 80017a8:	75bb      	strb	r3, [r7, #22]
            break;
 80017aa:	e000      	b.n	80017ae <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 80017ac:	bf00      	nop
    }

    return hw_status;
 80017ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200013ac 	.word	0x200013ac
 80017bc:	200014dc 	.word	0x200014dc
 80017c0:	40013800 	.word	0x40013800
 80017c4:	200013a0 	.word	0x200013a0
 80017c8:	200013ec 	.word	0x200013ec
 80017cc:	40008000 	.word	0x40008000

080017d0 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a0f      	ldr	r2, [pc, #60]	; (800181c <HAL_UART_TxCpltCallback+0x4c>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00a      	beq.n	80017f8 <HAL_UART_TxCpltCallback+0x28>
 80017e2:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <HAL_UART_TxCpltCallback+0x50>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d10f      	bne.n	8001808 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_UART_TxCpltCallback+0x54>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00d      	beq.n	800180c <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_UART_TxCpltCallback+0x54>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4798      	blx	r3
            }
            break;
 80017f6:	e009      	b.n	800180c <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_UART_TxCpltCallback+0x58>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_UART_TxCpltCallback+0x58>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4798      	blx	r3
            }
            break;
 8001806:	e003      	b.n	8001810 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8001808:	bf00      	nop
 800180a:	e002      	b.n	8001812 <HAL_UART_TxCpltCallback+0x42>
            break;
 800180c:	bf00      	nop
 800180e:	e000      	b.n	8001812 <HAL_UART_TxCpltCallback+0x42>
            break;
 8001810:	bf00      	nop
    }

    return;
 8001812:	bf00      	nop
}
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40008000 	.word	0x40008000
 8001820:	40013800 	.word	0x40013800
 8001824:	200013ac 	.word	0x200013ac
 8001828:	200013a0 	.word	0x200013a0

0800182c <LL_PWR_SMPS_Enable>:
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <LL_PWR_SMPS_Enable+0x1c>)
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <LL_PWR_SMPS_Enable+0x1c>)
 8001836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800183a:	61d3      	str	r3, [r2, #28]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	58000400 	.word	0x58000400

0800184c <LL_PWR_SMPS_SetStartupCurrent>:
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800185c:	4904      	ldr	r1, [pc, #16]	; (8001870 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4313      	orrs	r3, r2
 8001862:	61cb      	str	r3, [r1, #28]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	58000400 	.word	0x58000400

08001874 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d108      	bne.n	80018a0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f023 020f 	bic.w	r2, r3, #15
 8001896:	4913      	ldr	r1, [pc, #76]	; (80018e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4313      	orrs	r3, r2
 800189c:	61cb      	str	r3, [r1, #28]
}
 800189e:	e019      	b.n	80018d4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3b06      	subs	r3, #6
 80018a4:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4413      	add	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da02      	bge.n	80018ba <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	e004      	b.n	80018c4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	dd01      	ble.n	80018c4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80018c0:	230f      	movs	r3, #15
 80018c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f023 020f 	bic.w	r2, r3, #15
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	4905      	ldr	r1, [pc, #20]	; (80018e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61cb      	str	r3, [r1, #28]
}
 80018d4:	bf00      	nop
 80018d6:	371c      	adds	r7, #28
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	1fff7558 	.word	0x1fff7558
 80018e4:	58000400 	.word	0x58000400

080018e8 <LL_EXTI_DisableIT_0_31>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <LL_EXTI_DisableIT_0_31+0x28>)
 80018f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	4905      	ldr	r1, [pc, #20]	; (8001910 <LL_EXTI_DisableIT_0_31+0x28>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	58000800 	.word	0x58000800

08001914 <LL_EXTI_DisableIT_32_63>:
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <LL_EXTI_DisableIT_32_63+0x28>)
 800191e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	43db      	mvns	r3, r3
 8001926:	4905      	ldr	r1, [pc, #20]	; (800193c <LL_EXTI_DisableIT_32_63+0x28>)
 8001928:	4013      	ands	r3, r2
 800192a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800192e:	bf00      	nop
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	58000800 	.word	0x58000800

08001940 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800194e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800195a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	cafecafe 	.word	0xcafecafe

0800197c <LL_RCC_LSE_SetDriveCapability>:
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198c:	f023 0218 	bic.w	r2, r3, #24
 8001990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4313      	orrs	r3, r2
 8001998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001a00:	d101      	bne.n	8001a06 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a26:	d101      	bne.n	8001a2c <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_AHB1_GRP1_EnableClock>:
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b085      	sub	sp, #20
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <LL_AHB2_GRP1_EnableClock>:
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_AHB3_GRP1_EnableClock>:
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ada:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	605a      	str	r2, [r3, #4]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	605a      	str	r2, [r3, #4]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	615a      	str	r2, [r3, #20]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	609a      	str	r2, [r3, #8]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	619a      	str	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <LL_LPM_EnableSleep+0x1c>)
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <LL_LPM_EnableSleep+0x1c>)
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	6113      	str	r3, [r2, #16]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	22ff      	movs	r2, #255	; 0xff
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	22ca      	movs	r2, #202	; 0xca
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2253      	movs	r2, #83	; 0x53
 8001c00:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f023 0207 	bic.w	r2, r3, #7
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <main+0x58>)
 8001c3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c3e:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c40:	f002 f88a 	bl	8003d58 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001c44:	f000 fa7f 	bl	8002146 <Reset_Device>
  Config_HSE();
 8001c48:	f000 fa69 	bl	800211e <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4c:	f000 f820 	bl	8001c90 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8001c50:	f000 f8a6 	bl	8001da0 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001c54:	f000 fa5c 	bl	8002110 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001c58:	f000 fab7 	bl	80021ca <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c5c:	f000 f9fa 	bl	8002054 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c60:	f000 f9da 	bl	8002018 <MX_DMA_Init>
  MX_RF_Init();
 8001c64:	f000 f8fe 	bl	8001e64 <MX_RF_Init>
  MX_RTC_Init();
 8001c68:	f000 f904 	bl	8001e74 <MX_RTC_Init>
  MX_SPI1_Init();
 8001c6c:	f000 f996 	bl	8001f9c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* -1- Initialize LEDs mounted on P-NUCLEO-WB55 board */
    BSP_LED_Init(LED_BLUE);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f001 ff1b 	bl	8003aac <BSP_LED_Init>
    BSP_LED_Init(LED_RED);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f001 ff18 	bl	8003aac <BSP_LED_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001c7c:	f7fe fdb8 	bl	80007f0 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	f009 fa76 	bl	800b174 <UTIL_SEQ_Run>
 8001c88:	e7fa      	b.n	8001c80 <main+0x4c>
 8001c8a:	bf00      	nop
 8001c8c:	58004000 	.word	0x58004000

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b0ae      	sub	sp, #184	; 0xb8
 8001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001c9a:	2248      	movs	r2, #72	; 0x48
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f009 fcbc 	bl	800b61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	605a      	str	r2, [r3, #4]
 8001cae:	609a      	str	r2, [r3, #8]
 8001cb0:	60da      	str	r2, [r3, #12]
 8001cb2:	611a      	str	r2, [r3, #16]
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	2250      	movs	r2, #80	; 0x50
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f009 fcac 	bl	800b61c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001cc4:	f003 f8c8 	bl	8004e58 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff fe57 	bl	800197c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <SystemClock_Config+0x10c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cd6:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <SystemClock_Config+0x10c>)
 8001cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <SystemClock_Config+0x10c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ce6:	603b      	str	r3, [r7, #0]
 8001ce8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001cea:	2307      	movs	r3, #7
 8001cec:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cfe:	2340      	movs	r3, #64	; 0x40
 8001d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d04:	2300      	movs	r3, #0
 8001d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d0a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fc88 	bl	8005624 <HAL_RCC_OscConfig>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d1a:	f000 fa87 	bl	800222c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001d1e:	236f      	movs	r3, #111	; 0x6f
 8001d20:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001d22:	2302      	movs	r3, #2
 8001d24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d26:	2300      	movs	r3, #0
 8001d28:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001d36:	2300      	movs	r3, #0
 8001d38:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fffb 	bl	8005d3c <HAL_RCC_ClockConfig>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d4c:	f000 fa6e 	bl	800222c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001d50:	f643 0303 	movw	r3, #14339	; 0x3803
 8001d54:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001d64:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d68:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001d6e:	2310      	movs	r3, #16
 8001d70:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 fc22 	bl	80065be <HAL_RCCEx_PeriphCLKConfig>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001d80:	f000 fa54 	bl	800222c <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff fd61 	bl	800184c <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8001d8a:	2004      	movs	r0, #4
 8001d8c:	f7ff fd72 	bl	8001874 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001d90:	f7ff fd4c 	bl	800182c <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 8001d94:	bf00      	nop
 8001d96:	37b8      	adds	r7, #184	; 0xb8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	58000400 	.word	0x58000400

08001da0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_IPCC_Init+0x20>)
 8001da6:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <MX_IPCC_Init+0x24>)
 8001da8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <MX_IPCC_Init+0x20>)
 8001dac:	f002 ff42 	bl	8004c34 <HAL_IPCC_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001db6:	f000 fa39 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200013b0 	.word	0x200013b0
 8001dc4:	58000c00 	.word	0x58000c00

08001dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001dcc:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001dce:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <MX_USART1_UART_Init+0x98>)
 8001dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001dee:	220c      	movs	r2, #12
 8001df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001df8:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001dfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dfe:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e12:	4812      	ldr	r0, [pc, #72]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001e14:	f005 fb18 	bl	8007448 <HAL_UART_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001e1e:	f000 fa05 	bl	800222c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e22:	2100      	movs	r1, #0
 8001e24:	480d      	ldr	r0, [pc, #52]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001e26:	f006 faf5 	bl	8008414 <HAL_UARTEx_SetTxFifoThreshold>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001e30:	f000 f9fc 	bl	800222c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e34:	2100      	movs	r1, #0
 8001e36:	4809      	ldr	r0, [pc, #36]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001e38:	f006 fb2a 	bl	8008490 <HAL_UARTEx_SetRxFifoThreshold>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001e42:	f000 f9f3 	bl	800222c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_USART1_UART_Init+0x94>)
 8001e48:	f006 faab 	bl	80083a2 <HAL_UARTEx_DisableFifoMode>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001e52:	f000 f9eb 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200014dc 	.word	0x200014dc
 8001e60:	40013800 	.word	0x40013800

08001e64 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	609a      	str	r2, [r3, #8]
 8001e84:	60da      	str	r2, [r3, #12]
 8001e86:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e88:	2300      	movs	r3, #0
 8001e8a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e8c:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <MX_RTC_Init+0x120>)
 8001e8e:	4a42      	ldr	r2, [pc, #264]	; (8001f98 <MX_RTC_Init+0x124>)
 8001e90:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e92:	4b40      	ldr	r3, [pc, #256]	; (8001f94 <MX_RTC_Init+0x120>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001e98:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <MX_RTC_Init+0x120>)
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <MX_RTC_Init+0x120>)
 8001ea0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ea4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ea6:	4b3b      	ldr	r3, [pc, #236]	; (8001f94 <MX_RTC_Init+0x120>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <MX_RTC_Init+0x120>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <MX_RTC_Init+0x120>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <MX_RTC_Init+0x120>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ebe:	4835      	ldr	r0, [pc, #212]	; (8001f94 <MX_RTC_Init+0x120>)
 8001ec0:	f004 fe04 	bl	8006acc <HAL_RTC_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001eca:	f000 f9af 	bl	800222c <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  /* Set Date and Time (if not already done before)*/
  	/* Read the Back Up Register 0 Data */
  	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	4830      	ldr	r0, [pc, #192]	; (8001f94 <MX_RTC_Init+0x120>)
 8001ed2:	f005 f9a0 	bl	8007216 <HAL_RTCEx_BKUPRead>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d03a      	beq.n	8001f56 <MX_RTC_Init+0xe2>
  	{
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8001ee0:	2311      	movs	r3, #17
 8001ee2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x45;
 8001ee4:	2345      	movs	r3, #69	; 0x45
 8001ee6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x25;
 8001ee8:	2325      	movs	r3, #37	; 0x25
 8001eea:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ef8:	1d3b      	adds	r3, r7, #4
 8001efa:	2201      	movs	r2, #1
 8001efc:	4619      	mov	r1, r3
 8001efe:	4825      	ldr	r0, [pc, #148]	; (8001f94 <MX_RTC_Init+0x120>)
 8001f00:	f004 feb8 	bl	8006c74 <HAL_RTC_SetTime>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001f0a:	f000 f98f 	bl	800222c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001f12:	2305      	movs	r3, #5
 8001f14:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 8001f16:	2319      	movs	r3, #25
 8001f18:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8001f1a:	2321      	movs	r3, #33	; 0x21
 8001f1c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	481b      	ldr	r0, [pc, #108]	; (8001f94 <MX_RTC_Init+0x120>)
 8001f26:	f004 ff69 	bl	8006dfc <HAL_RTC_SetDate>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8001f30:	f000 f97c 	bl	800222c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001f34:	2200      	movs	r2, #0
 8001f36:	2100      	movs	r1, #0
 8001f38:	4816      	ldr	r0, [pc, #88]	; (8001f94 <MX_RTC_Init+0x120>)
 8001f3a:	f005 f8af 	bl	800709c <HAL_RTCEx_SetWakeUpTimer>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8001f44:	f000 f972 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Writes a data in a RTC Backup data Register0 */
  		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001f48:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4811      	ldr	r0, [pc, #68]	; (8001f94 <MX_RTC_Init+0x120>)
 8001f50:	f005 f949 	bl	80071e6 <HAL_RTCEx_BKUPWrite>
 8001f54:	e00e      	b.n	8001f74 <MX_RTC_Init+0x100>
  	}
  	else
  	{
  		/* Check if the Power On Reset flag is set */
  		if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET)
 8001f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
  			/* Turn on LED2: Power on reset occurred */
  			//BSP_LED_On(LED2);
  		}

  		/* Check if Pin Reset flag is set */
  		if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <MX_RTC_Init+0x100>
  		{

  			BSP_LED_On(LED_RED);
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f001 fdd6 	bl	8003b20 <BSP_LED_On>
  		}
  	}
  	/* Clear source Reset Flag */
  	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001f74:	f7ff fd60 	bl	8001a38 <LL_RCC_ClearResetFlags>
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001f78:	4807      	ldr	r0, [pc, #28]	; (8001f98 <MX_RTC_Init+0x124>)
 8001f7a:	f7ff fe38 	bl	8001bee <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4805      	ldr	r0, [pc, #20]	; (8001f98 <MX_RTC_Init+0x124>)
 8001f82:	f7ff fe44 	bl	8001c0e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001f86:	4804      	ldr	r0, [pc, #16]	; (8001f98 <MX_RTC_Init+0x124>)
 8001f88:	f7ff fe24 	bl	8001bd4 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	2000156c 	.word	0x2000156c
 8001f98:	40002800 	.word	0x40002800

08001f9c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fa2:	4a1c      	ldr	r2, [pc, #112]	; (8002014 <MX_SPI1_Init+0x78>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fa8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001fac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001fba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fca:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001fce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_SPI1_Init+0x74>)
 8001fea:	2207      	movs	r2, #7
 8001fec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_SPI1_Init+0x74>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_SPI1_Init+0x74>)
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_SPI1_Init+0x74>)
 8001ffc:	f005 f961 	bl	80072c2 <HAL_SPI_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002006:	f000 f911 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20001614 	.word	0x20001614
 8002014:	40013000 	.word	0x40013000

08002018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800201c:	2004      	movs	r0, #4
 800201e:	f7ff fd1c 	bl	8001a5a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fd19 	bl	8001a5a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002028:	2002      	movs	r0, #2
 800202a:	f7ff fd16 	bl	8001a5a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	210f      	movs	r1, #15
 8002032:	200e      	movs	r0, #14
 8002034:	f002 f869 	bl	800410a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002038:	200e      	movs	r0, #14
 800203a:	f002 f880 	bl	800413e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	210f      	movs	r1, #15
 8002042:	203a      	movs	r0, #58	; 0x3a
 8002044:	f002 f861 	bl	800410a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002048:	203a      	movs	r0, #58	; 0x3a
 800204a:	f002 f878 	bl	800413e <HAL_NVIC_EnableIRQ>

}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
	...

08002054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205a:	1d3b      	adds	r3, r7, #4
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002068:	2004      	movs	r0, #4
 800206a:	f7ff fd0f 	bl	8001a8c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	2001      	movs	r0, #1
 8002070:	f7ff fd0c 	bl	8001a8c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002074:	2002      	movs	r0, #2
 8002076:	f7ff fd09 	bl	8001a8c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800207a:	2008      	movs	r0, #8
 800207c:	f7ff fd06 	bl	8001a8c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8002080:	2200      	movs	r2, #0
 8002082:	f247 0123 	movw	r1, #28707	; 0x7023
 8002086:	481e      	ldr	r0, [pc, #120]	; (8002100 <MX_GPIO_Init+0xac>)
 8002088:	f002 fd80 	bl	8004b8c <HAL_GPIO_WritePin>
                          |LED2_BR_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_SW1_Pin SW1_BR_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin|SW1_BR_Pin;
 800208c:	f241 0310 	movw	r3, #4112	; 0x1010
 8002090:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <MX_GPIO_Init+0xb0>)
 8002094:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002096:	2301      	movs	r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209a:	1d3b      	adds	r3, r7, #4
 800209c:	4619      	mov	r1, r3
 800209e:	481a      	ldr	r0, [pc, #104]	; (8002108 <MX_GPIO_Init+0xb4>)
 80020a0:	f002 fc04 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED3_BR_Pin LED1_BR_Pin
                           LED2_BR_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 80020a4:	f247 0323 	movw	r3, #28707	; 0x7023
 80020a8:	607b      	str	r3, [r7, #4]
                          |LED2_BR_Pin|LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b2:	2300      	movs	r3, #0
 80020b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4811      	ldr	r0, [pc, #68]	; (8002100 <MX_GPIO_Init+0xac>)
 80020bc:	f002 fbf6 	bl	80048ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 80020c0:	2301      	movs	r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020c4:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <MX_GPIO_Init+0xb0>)
 80020c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 80020cc:	1d3b      	adds	r3, r7, #4
 80020ce:	4619      	mov	r1, r3
 80020d0:	480e      	ldr	r0, [pc, #56]	; (800210c <MX_GPIO_Init+0xb8>)
 80020d2:	f002 fbeb 	bl	80048ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2100      	movs	r1, #0
 80020da:	2006      	movs	r0, #6
 80020dc:	f002 f815 	bl	800410a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020e0:	2006      	movs	r0, #6
 80020e2:	f002 f82c 	bl	800413e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2100      	movs	r1, #0
 80020ea:	200a      	movs	r0, #10
 80020ec:	f002 f80d 	bl	800410a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80020f0:	200a      	movs	r0, #10
 80020f2:	f002 f824 	bl	800413e <HAL_NVIC_EnableIRQ>

}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	48000400 	.word	0x48000400
 8002104:	10110000 	.word	0x10110000
 8002108:	48000800 	.word	0x48000800
 800210c:	48000c00 	.word	0x48000c00

08002110 <PeriphClock_Config>:
  * @param  None
  * @retval None
  */

void PeriphClock_Config(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8002114:	bf00      	nop
}
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8002124:	2000      	movs	r0, #0
 8002126:	f007 fd11 	bl	8009b4c <OTP_Read>
 800212a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	799b      	ldrb	r3, [r3, #6]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fc02 	bl	8001940 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800213c:	bf00      	nop
 800213e:	bf00      	nop
}  
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <Reset_Device>:


static void Reset_Device( void )
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 800214a:	f000 f827 	bl	800219c <Reset_BackupDomain>

	Reset_IPCC();
 800214e:	f000 f803 	bl	8002158 <Reset_IPCC>
#endif

	return;
 8002152:	bf00      	nop
}
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800215c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002160:	f7ff fcad 	bl	8001abe <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8002164:	213f      	movs	r1, #63	; 0x3f
 8002166:	480c      	ldr	r0, [pc, #48]	; (8002198 <Reset_IPCC+0x40>)
 8002168:	f7ff fd08 	bl	8001b7c <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 800216c:	213f      	movs	r1, #63	; 0x3f
 800216e:	480a      	ldr	r0, [pc, #40]	; (8002198 <Reset_IPCC+0x40>)
 8002170:	f7ff fd12 	bl	8001b98 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8002174:	213f      	movs	r1, #63	; 0x3f
 8002176:	4808      	ldr	r0, [pc, #32]	; (8002198 <Reset_IPCC+0x40>)
 8002178:	f7ff fcba 	bl	8001af0 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 800217c:	213f      	movs	r1, #63	; 0x3f
 800217e:	4806      	ldr	r0, [pc, #24]	; (8002198 <Reset_IPCC+0x40>)
 8002180:	f7ff fcd9 	bl	8001b36 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8002184:	213f      	movs	r1, #63	; 0x3f
 8002186:	4804      	ldr	r0, [pc, #16]	; (8002198 <Reset_IPCC+0x40>)
 8002188:	f7ff fcc4 	bl	8001b14 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 800218c:	213f      	movs	r1, #63	; 0x3f
 800218e:	4802      	ldr	r0, [pc, #8]	; (8002198 <Reset_IPCC+0x40>)
 8002190:	f7ff fce3 	bl	8001b5a <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8002194:	bf00      	nop
}
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58000c00 	.word	0x58000c00

0800219c <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80021a0:	f7ff fc24 	bl	80019ec <LL_RCC_IsActiveFlag_PINRST>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00d      	beq.n	80021c6 <Reset_BackupDomain+0x2a>
 80021aa:	f7ff fc32 	bl	8001a12 <LL_RCC_IsActiveFlag_SFTRST>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d108      	bne.n	80021c6 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80021b4:	f002 fe50 	bl	8004e58 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 80021b8:	f002 fe4e 	bl	8004e58 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 80021bc:	f7ff fbf4 	bl	80019a8 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 80021c0:	f7ff fc03 	bl	80019ca <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
}
 80021c8:	bd80      	pop	{r7, pc}

080021ca <Init_Exti>:

static void Init_Exti( void )
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 80021ce:	f04f 30ff 	mov.w	r0, #4294967295
 80021d2:	f7ff fb89 	bl	80018e8 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 80021d6:	f06f 0050 	mvn.w	r0, #80	; 0x50
 80021da:	f7ff fb9b 	bl	8001914 <LL_EXTI_DisableIT_32_63>

  return;
 80021de:	bf00      	nop
}
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b084      	sub	sp, #16
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ea:	f001 fe23 	bl	8003e34 <HAL_GetTick>
 80021ee:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fa:	d00a      	beq.n	8002212 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80021fc:	f001 fe32 	bl	8003e64 <HAL_GetTickFreq>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800220a:	e002      	b.n	8002212 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800220c:	f7ff fcd2 	bl	8001bb4 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8002210:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002212:	f001 fe0f 	bl	8003e34 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	429a      	cmp	r2, r3
 8002220:	d8f4      	bhi.n	800220c <HAL_Delay+0x2a>
  }
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <LL_RCC_SetRTCClockSource>:
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800224e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_RCC_EnableRTC>:
{
 8002266:	b480      	push	{r7}
 8002268:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800227e:	bf00      	nop
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_RCC_DisableRTC>:
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002294:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002298:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_AHB2_GRP1_EnableClock>:
{
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4313      	orrs	r3, r2
 80022c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4013      	ands	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <LL_AHB3_GRP1_EnableClock>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4013      	ands	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002300:	68fb      	ldr	r3, [r7, #12]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_APB1_GRP1_EnableClock>:
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800231a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800231c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4013      	ands	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002332:	68fb      	ldr	r3, [r7, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_APB1_GRP2_EnableClock>:
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800234e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4313      	orrs	r3, r2
 8002356:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002364:	68fb      	ldr	r3, [r7, #12]
}
 8002366:	bf00      	nop
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <LL_APB1_GRP1_DisableClock>:
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	43db      	mvns	r3, r3
 8002384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002388:	4013      	ands	r3, r2
 800238a:	658b      	str	r3, [r1, #88]	; 0x58
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_APB2_GRP1_EnableClock>:
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80023d0:	463b      	mov	r3, r7
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 80023d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80023dc:	f7ff ff7e 	bl	80022dc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2100      	movs	r1, #0
 80023e4:	202b      	movs	r0, #43	; 0x2b
 80023e6:	f001 fe90 	bl	800410a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 80023ea:	202b      	movs	r0, #43	; 0x2b
 80023ec:	f001 fea7 	bl	800413e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2100      	movs	r1, #0
 80023f4:	202e      	movs	r0, #46	; 0x2e
 80023f6:	f001 fe88 	bl	800410a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80023fa:	202e      	movs	r0, #46	; 0x2e
 80023fc:	f001 fe9f 	bl	800413e <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8002400:	2300      	movs	r3, #0
 8002402:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002408:	463b      	mov	r3, r7
 800240a:	4618      	mov	r0, r3
 800240c:	f002 fd34 	bl	8004e78 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8002410:	f002 fd74 	bl	8004efc <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_IPCC_MspInit+0x44>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d113      	bne.n	8002456 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800242e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002432:	f7ff ff53 	bl	80022dc <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	2100      	movs	r1, #0
 800243a:	202c      	movs	r0, #44	; 0x2c
 800243c:	f001 fe65 	bl	800410a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002440:	202c      	movs	r0, #44	; 0x2c
 8002442:	f001 fe7c 	bl	800413e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	202d      	movs	r0, #45	; 0x2d
 800244c:	f001 fe5d 	bl	800410a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002450:	202d      	movs	r0, #45	; 0x2d
 8002452:	f001 fe74 	bl	800413e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	58000c00 	.word	0x58000c00

08002464 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246c:	f107 031c 	add.w	r3, r7, #28
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	60da      	str	r2, [r3, #12]
 800247a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a59      	ldr	r2, [pc, #356]	; (80025e8 <HAL_UART_MspInit+0x184>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d15e      	bne.n	8002544 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002486:	2001      	movs	r0, #1
 8002488:	f7ff ff5a 	bl	8002340 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff ff0c 	bl	80022aa <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002492:	230c      	movs	r3, #12
 8002494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80024a2:	2308      	movs	r3, #8
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4619      	mov	r1, r3
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b0:	f002 f9fc 	bl	80048ac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80024b4:	4b4d      	ldr	r3, [pc, #308]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024b6:	4a4e      	ldr	r2, [pc, #312]	; (80025f0 <HAL_UART_MspInit+0x18c>)
 80024b8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80024ba:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024bc:	2211      	movs	r2, #17
 80024be:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024c0:	4b4a      	ldr	r3, [pc, #296]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024c2:	2210      	movs	r2, #16
 80024c4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024c6:	4b49      	ldr	r3, [pc, #292]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024cc:	4b47      	ldr	r3, [pc, #284]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024ce:	2280      	movs	r2, #128	; 0x80
 80024d0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024d2:	4b46      	ldr	r3, [pc, #280]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024d8:	4b44      	ldr	r3, [pc, #272]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80024de:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80024ea:	4840      	ldr	r0, [pc, #256]	; (80025ec <HAL_UART_MspInit+0x188>)
 80024ec:	f001 fe6c 	bl	80041c8 <HAL_DMA_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 80024f6:	f7ff fe99 	bl	800222c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 80024fa:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 80024fe:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 800250c:	2301      	movs	r3, #1
 800250e:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	4619      	mov	r1, r3
 8002516:	4835      	ldr	r0, [pc, #212]	; (80025ec <HAL_UART_MspInit+0x188>)
 8002518:	f002 f988 	bl	800482c <HAL_DMAEx_ConfigMuxSync>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8002522:	f7ff fe83 	bl	800222c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a30      	ldr	r2, [pc, #192]	; (80025ec <HAL_UART_MspInit+0x188>)
 800252a:	679a      	str	r2, [r3, #120]	; 0x78
 800252c:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <HAL_UART_MspInit+0x188>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002532:	2200      	movs	r2, #0
 8002534:	2100      	movs	r1, #0
 8002536:	2025      	movs	r0, #37	; 0x25
 8002538:	f001 fde7 	bl	800410a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800253c:	2025      	movs	r0, #37	; 0x25
 800253e:	f001 fdfe 	bl	800413e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002542:	e04c      	b.n	80025de <HAL_UART_MspInit+0x17a>
  else if(huart->Instance==USART1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <HAL_UART_MspInit+0x190>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d147      	bne.n	80025de <HAL_UART_MspInit+0x17a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800254e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002552:	f7ff ff21 	bl	8002398 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	2002      	movs	r0, #2
 8002558:	f7ff fea7 	bl	80022aa <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800255c:	23c0      	movs	r3, #192	; 0xc0
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002564:	2301      	movs	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002568:	2303      	movs	r3, #3
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800256c:	2307      	movs	r3, #7
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4619      	mov	r1, r3
 8002576:	4820      	ldr	r0, [pc, #128]	; (80025f8 <HAL_UART_MspInit+0x194>)
 8002578:	f002 f998 	bl	80048ac <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800257c:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <HAL_UART_MspInit+0x198>)
 800257e:	4a20      	ldr	r2, [pc, #128]	; (8002600 <HAL_UART_MspInit+0x19c>)
 8002580:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002582:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <HAL_UART_MspInit+0x198>)
 8002584:	220f      	movs	r2, #15
 8002586:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_UART_MspInit+0x198>)
 800258a:	2210      	movs	r2, #16
 800258c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258e:	4b1b      	ldr	r3, [pc, #108]	; (80025fc <HAL_UART_MspInit+0x198>)
 8002590:	2200      	movs	r2, #0
 8002592:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_UART_MspInit+0x198>)
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_UART_MspInit+0x198>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_UART_MspInit+0x198>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_UART_MspInit+0x198>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_UART_MspInit+0x198>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025b2:	4812      	ldr	r0, [pc, #72]	; (80025fc <HAL_UART_MspInit+0x198>)
 80025b4:	f001 fe08 	bl	80041c8 <HAL_DMA_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_UART_MspInit+0x15e>
      Error_Handler();
 80025be:	f7ff fe35 	bl	800222c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <HAL_UART_MspInit+0x198>)
 80025c6:	679a      	str	r2, [r3, #120]	; 0x78
 80025c8:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_UART_MspInit+0x198>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	2024      	movs	r0, #36	; 0x24
 80025d4:	f001 fd99 	bl	800410a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025d8:	2024      	movs	r0, #36	; 0x24
 80025da:	f001 fdb0 	bl	800413e <HAL_NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3730      	adds	r7, #48	; 0x30
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40008000 	.word	0x40008000
 80025ec:	200015b4 	.word	0x200015b4
 80025f0:	40020044 	.word	0x40020044
 80025f4:	40013800 	.word	0x40013800
 80025f8:	48000400 	.word	0x48000400
 80025fc:	2000147c 	.word	0x2000147c
 8002600:	40020444 	.word	0x40020444

08002604 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <HAL_RTC_MspInit+0x3c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d110      	bne.n	8002638 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002616:	f002 fc1f 	bl	8004e58 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800261a:	f002 fc1d 	bl	8004e58 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800261e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002622:	f7ff fe0a 	bl	800223a <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002626:	f7ff fe1e 	bl	8002266 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800262a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800262e:	f7ff fe6e 	bl	800230e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f004 fe05 	bl	8007242 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40002800 	.word	0x40002800

08002644 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_RTC_MspDeInit+0x28>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d105      	bne.n	8002662 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8002656:	f7ff fe17 	bl	8002288 <LL_RCC_DisableRTC>
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 800265a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800265e:	f7ff fe88 	bl	8002372 <LL_APB1_GRP1_DisableClock>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40002800 	.word	0x40002800

08002670 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	60da      	str	r2, [r3, #12]
 8002686:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0f      	ldr	r2, [pc, #60]	; (80026cc <HAL_SPI_MspInit+0x5c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d117      	bne.n	80026c2 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002692:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002696:	f7ff fe7f 	bl	8002398 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	2001      	movs	r0, #1
 800269c:	f7ff fe05 	bl	80022aa <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80026a0:	23f0      	movs	r3, #240	; 0xf0
 80026a2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026b0:	2305      	movs	r3, #5
 80026b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026be:	f002 f8f5 	bl	80048ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026c2:	bf00      	nop
 80026c4:	3720      	adds	r7, #32
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40013000 	.word	0x40013000

080026d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e2:	e7fe      	b.n	80026e2 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <MemManage_Handler+0x4>

080026ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ea:	b480      	push	{r7}
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ee:	e7fe      	b.n	80026ee <BusFault_Handler+0x4>

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f4:	e7fe      	b.n	80026f4 <UsageFault_Handler+0x4>

080026f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002724:	f001 fb72 	bl	8003e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}

0800272c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002730:	2001      	movs	r0, #1
 8002732:	f002 fa43 	bl	8004bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}

0800273a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800273e:	2010      	movs	r0, #16
 8002740:	f002 fa3c 	bl	8004bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}

08002748 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <DMA1_Channel4_IRQHandler+0x10>)
 800274e:	f001 ff1c 	bl	800458a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	200015b4 	.word	0x200015b4

0800275c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <USART1_IRQHandler+0x10>)
 8002762:	f004 ff41 	bl	80075e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200014dc 	.word	0x200014dc

08002770 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <LPUART1_IRQHandler+0x10>)
 8002776:	f004 ff37 	bl	80075e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	200013ec 	.word	0x200013ec

08002784 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002796:	f000 ffe5 	bl	8003764 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800279a:	bf00      	nop
 800279c:	bd80      	pop	{r7, pc}

0800279e <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80027a2:	f001 f817 	bl	80037d4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80027ae:	f002 fa1d 	bl	8004bec <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <DMA2_Channel4_IRQHandler+0x10>)
 80027be:	f001 fee4 	bl	800458a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	2000147c 	.word	0x2000147c

080027cc <RTC_WKUP_IRQHandler>:
//{
//  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
//}

void RTC_WKUP_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 80027d0:	f7fe fc4a 	bl	8001068 <HW_TS_RTC_Wakeup_Handler>
}
 80027d4:	bf00      	nop
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	e00a      	b.n	8002800 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027ea:	f3af 8000 	nop.w
 80027ee:	4601      	mov	r1, r0
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	b2ca      	uxtb	r2, r1
 80027f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	dbf0      	blt.n	80027ea <_read+0x12>
	}

return len;
 8002808:	687b      	ldr	r3, [r7, #4]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
	return -1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283a:	605a      	str	r2, [r3, #4]
	return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_isatty>:

int _isatty(int file)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
	return 1;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	return 0;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <_sbrk+0x5c>)
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <_sbrk+0x60>)
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <_sbrk+0x64>)
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <_sbrk+0x68>)
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <_sbrk+0x64>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d207      	bcs.n	80028bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ac:	f008 fe7e 	bl	800b5ac <__errno>
 80028b0:	4603      	mov	r3, r0
 80028b2:	220c      	movs	r2, #12
 80028b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	e009      	b.n	80028d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <_sbrk+0x64>)
 80028cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20030000 	.word	0x20030000
 80028dc:	00001000 	.word	0x00001000
 80028e0:	20000254 	.word	0x20000254
 80028e4:	20001698 	.word	0x20001698

080028e8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <LL_FLASH_GetUDN+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	1fff7580 	.word	0x1fff7580

08002900 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <LL_FLASH_GetDeviceID+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	b2db      	uxtb	r3, r3
}
 800290a:	4618      	mov	r0, r3
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	1fff7584 	.word	0x1fff7584

08002918 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 800291c:	4b03      	ldr	r3, [pc, #12]	; (800292c <LL_FLASH_GetSTCompanyID+0x14>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	0a1b      	lsrs	r3, r3, #8
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	1fff7584 	.word	0x1fff7584

08002930 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8002930:	b5b0      	push	{r4, r5, r7, lr}
 8002932:	b08c      	sub	sp, #48	; 0x30
 8002934:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002936:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <APP_BLE_Init+0xc4>)
 8002938:	463c      	mov	r4, r7
 800293a:	461d      	mov	r5, r3
 800293c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800293e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002944:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800294c:	f000 fa2c 	bl	8002da8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002950:	2101      	movs	r1, #1
 8002952:	2002      	movs	r0, #2
 8002954:	f008 fbde 	bl	800b114 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002958:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <APP_BLE_Init+0xc8>)
 800295a:	2100      	movs	r1, #0
 800295c:	2008      	movs	r0, #8
 800295e:	f008 fced 	bl	800b33c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8002962:	463b      	mov	r3, r7
 8002964:	4618      	mov	r0, r3
 8002966:	f007 fa45 	bl	8009df4 <SHCI_C2_BLE_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8002970:	f7ff fc5c 	bl	800222c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002974:	f000 fa2e 	bl	8002dd4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002978:	f008 f8ce 	bl	800ab18 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800297c:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <APP_BLE_Init+0xcc>)
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <APP_BLE_Init+0xcc>)
 8002986:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298a:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800298c:	4a1c      	ldr	r2, [pc, #112]	; (8002a00 <APP_BLE_Init+0xd0>)
 800298e:	2100      	movs	r1, #0
 8002990:	2001      	movs	r0, #1
 8002992:	f008 fcd3 	bl	800b33c <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8002996:	4a1b      	ldr	r2, [pc, #108]	; (8002a04 <APP_BLE_Init+0xd4>)
 8002998:	2100      	movs	r1, #0
 800299a:	2004      	movs	r0, #4
 800299c:	f008 fcce 	bl	800b33c <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80029a0:	2006      	movs	r0, #6
 80029a2:	f006 fca6 	bl	80092f2 <aci_hal_set_radio_activity_mask>
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <APP_BLE_Init+0xd8>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 80029ac:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <APP_BLE_Init+0xdc>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 80029b2:	f000 fd71 	bl	8003498 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <APP_BLE_Init+0xe0>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	4916      	ldr	r1, [pc, #88]	; (8002a14 <APP_BLE_Init+0xe4>)
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe fd0d 	bl	80013dc <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <APP_BLE_Init+0xe8>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	4915      	ldr	r1, [pc, #84]	; (8002a1c <APP_BLE_Init+0xec>)
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fd07 	bl	80013dc <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <APP_BLE_Init+0xcc>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80029d4:	4b09      	ldr	r3, [pc, #36]	; (80029fc <APP_BLE_Init+0xcc>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <APP_BLE_Init+0xf0>)
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80029e0:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <APP_BLE_Init+0xf4>)
 80029e2:	22a0      	movs	r2, #160	; 0xa0
 80029e4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f000 fab6 	bl	8002f58 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80029ec:	bf00      	nop
}
 80029ee:	3730      	adds	r7, #48	; 0x30
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bdb0      	pop	{r4, r5, r7, pc}
 80029f4:	0800c5f8 	.word	0x0800c5f8
 80029f8:	08009819 	.word	0x08009819
 80029fc:	20000148 	.word	0x20000148
 8002a00:	0800312d 	.word	0x0800312d
 8002a04:	08003275 	.word	0x08003275
 8002a08:	2000167d 	.word	0x2000167d
 8002a0c:	2000167c 	.word	0x2000167c
 8002a10:	0800318d 	.word	0x0800318d
 8002a14:	200001c9 	.word	0x200001c9
 8002a18:	0800319d 	.word	0x0800319d
 8002a1c:	200001ca 	.word	0x200001ca
 8002a20:	200001cc 	.word	0x200001cc
 8002a24:	200001ce 	.word	0x200001ce

08002a28 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08c      	sub	sp, #48	; 0x30
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002a30:	2342      	movs	r3, #66	; 0x42
 8002a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2bff      	cmp	r3, #255	; 0xff
 8002a42:	f000 80b6 	beq.w	8002bb2 <SVCCTL_App_Notification+0x18a>
 8002a46:	2bff      	cmp	r3, #255	; 0xff
 8002a48:	f300 8158 	bgt.w	8002cfc <SVCCTL_App_Notification+0x2d4>
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d002      	beq.n	8002a56 <SVCCTL_App_Notification+0x2e>
 8002a50:	2b3e      	cmp	r3, #62	; 0x3e
 8002a52:	d023      	beq.n	8002a9c <SVCCTL_App_Notification+0x74>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8002a54:	e152      	b.n	8002cfc <SVCCTL_App_Notification+0x2d4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	3302      	adds	r3, #2
 8002a5a:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	4ba9      	ldr	r3, [pc, #676]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002a66:	8adb      	ldrh	r3, [r3, #22]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d109      	bne.n	8002a80 <SVCCTL_App_Notification+0x58>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002a6c:	4ba7      	ldr	r3, [pc, #668]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002a72:	4ba6      	ldr	r3, [pc, #664]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8002a7a:	48a5      	ldr	r0, [pc, #660]	; (8002d10 <SVCCTL_App_Notification+0x2e8>)
 8002a7c:	f008 fe5c 	bl	800b738 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8002a80:	2001      	movs	r0, #1
 8002a82:	f000 fa69 	bl	8002f58 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002a86:	4ba3      	ldr	r3, [pc, #652]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002a8c:	4b9f      	ldr	r3, [pc, #636]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002a8e:	8ada      	ldrh	r2, [r3, #22]
 8002a90:	4ba0      	ldr	r3, [pc, #640]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002a92:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8002a94:	489f      	ldr	r0, [pc, #636]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002a96:	f000 fceb 	bl	8003470 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8002a9a:	e132      	b.n	8002d02 <SVCCTL_App_Notification+0x2da>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9e:	3302      	adds	r3, #2
 8002aa0:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d009      	beq.n	8002abe <SVCCTL_App_Notification+0x96>
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	dc7f      	bgt.n	8002bae <SVCCTL_App_Notification+0x186>
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d043      	beq.n	8002b3a <SVCCTL_App_Notification+0x112>
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d17b      	bne.n	8002bae <SVCCTL_App_Notification+0x186>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8002ab6:	4898      	ldr	r0, [pc, #608]	; (8002d18 <SVCCTL_App_Notification+0x2f0>)
 8002ab8:	f008 fe3e 	bl	800b738 <puts>
          break;
 8002abc:	e078      	b.n	8002bb0 <SVCCTL_App_Notification+0x188>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8002abe:	4897      	ldr	r0, [pc, #604]	; (8002d1c <SVCCTL_App_Notification+0x2f4>)
 8002ac0:	f008 fe3a 	bl	800b738 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <SVCCTL_App_Notification+0xb2>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8002ad2:	4893      	ldr	r0, [pc, #588]	; (8002d20 <SVCCTL_App_Notification+0x2f8>)
 8002ad4:	f008 fe30 	bl	800b738 <puts>
 8002ad8:	e002      	b.n	8002ae0 <SVCCTL_App_Notification+0xb8>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8002ada:	4892      	ldr	r0, [pc, #584]	; (8002d24 <SVCCTL_App_Notification+0x2fc>)
 8002adc:	f008 fe2c 	bl	800b738 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8002ae0:	4b8a      	ldr	r3, [pc, #552]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002ae2:	8adb      	ldrh	r3, [r3, #22]
 8002ae4:	f107 020e 	add.w	r2, r7, #14
 8002ae8:	f107 010f 	add.w	r1, r7, #15
 8002aec:	4618      	mov	r0, r3
 8002aee:	f006 fc6e 	bl	80093ce <hci_le_read_phy>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8002af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d118      	bne.n	8002b32 <SVCCTL_App_Notification+0x10a>
            APP_DBG_MSG("Read_PHY success \n");
 8002b00:	4889      	ldr	r0, [pc, #548]	; (8002d28 <SVCCTL_App_Notification+0x300>)
 8002b02:	f008 fe19 	bl	800b738 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d10a      	bne.n	8002b22 <SVCCTL_App_Notification+0xfa>
 8002b0c:	7bbb      	ldrb	r3, [r7, #14]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d107      	bne.n	8002b22 <SVCCTL_App_Notification+0xfa>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	4619      	mov	r1, r3
 8002b16:	7bbb      	ldrb	r3, [r7, #14]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4884      	ldr	r0, [pc, #528]	; (8002d2c <SVCCTL_App_Notification+0x304>)
 8002b1c:	f008 fd86 	bl	800b62c <iprintf>
          break;
 8002b20:	e046      	b.n	8002bb0 <SVCCTL_App_Notification+0x188>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	4619      	mov	r1, r3
 8002b26:	7bbb      	ldrb	r3, [r7, #14]
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4880      	ldr	r0, [pc, #512]	; (8002d2c <SVCCTL_App_Notification+0x304>)
 8002b2c:	f008 fd7e 	bl	800b62c <iprintf>
          break;
 8002b30:	e03e      	b.n	8002bb0 <SVCCTL_App_Notification+0x188>
            APP_DBG_MSG("Read conf not succeess \n");
 8002b32:	487f      	ldr	r0, [pc, #508]	; (8002d30 <SVCCTL_App_Notification+0x308>)
 8002b34:	f008 fe00 	bl	800b738 <puts>
          break;
 8002b38:	e03a      	b.n	8002bb0 <SVCCTL_App_Notification+0x188>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002b40:	4b72      	ldr	r3, [pc, #456]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002b42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe fcc2 	bl	80014d0 <HW_TS_Stop>
          APP_DBG_MSG("HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	4619      	mov	r1, r3
 8002b56:	4877      	ldr	r0, [pc, #476]	; (8002d34 <SVCCTL_App_Notification+0x30c>)
 8002b58:	f008 fd68 	bl	800b62c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8002b5c:	4b6b      	ldr	r3, [pc, #428]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002b5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d104      	bne.n	8002b70 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002b66:	4b69      	ldr	r3, [pc, #420]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002b68:	2206      	movs	r2, #6
 8002b6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8002b6e:	e003      	b.n	8002b78 <SVCCTL_App_Notification+0x150>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8002b70:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002b72:	2205      	movs	r2, #5
 8002b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b62      	ldr	r3, [pc, #392]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002b82:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002b84:	4b63      	ldr	r3, [pc, #396]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002b8a:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002b8c:	8ada      	ldrh	r2, [r3, #22]
 8002b8e:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002b90:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8002b92:	4860      	ldr	r0, [pc, #384]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002b94:	f000 fc6c 	bl	8003470 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002b98:	4b5e      	ldr	r3, [pc, #376]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002b9e:	4b5b      	ldr	r3, [pc, #364]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002ba0:	8ada      	ldrh	r2, [r3, #22]
 8002ba2:	4b5c      	ldr	r3, [pc, #368]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002ba4:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8002ba6:	485b      	ldr	r0, [pc, #364]	; (8002d14 <SVCCTL_App_Notification+0x2ec>)
 8002ba8:	f000 fc62 	bl	8003470 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8002bac:	e000      	b.n	8002bb0 <SVCCTL_App_Notification+0x188>
          break;
 8002bae:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8002bb0:	e0a7      	b.n	8002d02 <SVCCTL_App_Notification+0x2da>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bc2:	f000 8087 	beq.w	8002cd4 <SVCCTL_App_Notification+0x2ac>
 8002bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bca:	f300 8099 	bgt.w	8002d00 <SVCCTL_App_Notification+0x2d8>
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	f000 8088 	beq.w	8002ce4 <SVCCTL_App_Notification+0x2bc>
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	f2c0 8093 	blt.w	8002d00 <SVCCTL_App_Notification+0x2d8>
 8002bda:	f240 420a 	movw	r2, #1034	; 0x40a
 8002bde:	4293      	cmp	r3, r2
 8002be0:	f300 808e 	bgt.w	8002d00 <SVCCTL_App_Notification+0x2d8>
 8002be4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002be8:	f2c0 808a 	blt.w	8002d00 <SVCCTL_App_Notification+0x2d8>
 8002bec:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002bf0:	2b0a      	cmp	r3, #10
 8002bf2:	f200 8085 	bhi.w	8002d00 <SVCCTL_App_Notification+0x2d8>
 8002bf6:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <SVCCTL_App_Notification+0x1d4>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c29 	.word	0x08002c29
 8002c00:	08002cab 	.word	0x08002cab
 8002c04:	08002c31 	.word	0x08002c31
 8002c08:	08002c3f 	.word	0x08002c3f
 8002c0c:	08002c47 	.word	0x08002c47
 8002c10:	08002c4f 	.word	0x08002c4f
 8002c14:	08002d01 	.word	0x08002d01
 8002c18:	08002cdd 	.word	0x08002cdd
 8002c1c:	08002c67 	.word	0x08002c67
 8002c20:	08002c77 	.word	0x08002c77
 8002c24:	08002c6f 	.word	0x08002c6f
        APP_DBG_MSG("\r\n\r** ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8002c28:	4843      	ldr	r0, [pc, #268]	; (8002d38 <SVCCTL_App_Notification+0x310>)
 8002c2a:	f008 fd85 	bl	800b738 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8002c2e:	e064      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8002c30:	4842      	ldr	r0, [pc, #264]	; (8002d3c <SVCCTL_App_Notification+0x314>)
 8002c32:	f008 fd81 	bl	800b738 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 8002c36:	4842      	ldr	r0, [pc, #264]	; (8002d40 <SVCCTL_App_Notification+0x318>)
 8002c38:	f008 fd7e 	bl	800b738 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8002c3c:	e05d      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE \n");
 8002c3e:	4841      	ldr	r0, [pc, #260]	; (8002d44 <SVCCTL_App_Notification+0x31c>)
 8002c40:	f008 fd7a 	bl	800b738 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 8002c44:	e059      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 8002c46:	4840      	ldr	r0, [pc, #256]	; (8002d48 <SVCCTL_App_Notification+0x320>)
 8002c48:	f008 fd76 	bl	800b738 <puts>
          break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 8002c4c:	e055      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 8002c4e:	483f      	ldr	r0, [pc, #252]	; (8002d4c <SVCCTL_App_Notification+0x324>)
 8002c50:	f008 fd72 	bl	800b738 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002c56:	8adb      	ldrh	r3, [r3, #22]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f005 ffa4 	bl	8008ba6 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8002c5e:	483c      	ldr	r0, [pc, #240]	; (8002d50 <SVCCTL_App_Notification+0x328>)
 8002c60:	f008 fd6a 	bl	800b738 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8002c64:	e049      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
         APP_DBG_MSG("\r\n\r** ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 8002c66:	483b      	ldr	r0, [pc, #236]	; (8002d54 <SVCCTL_App_Notification+0x32c>)
 8002c68:	f008 fd66 	bl	800b738 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 8002c6c:	e045      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
         APP_DBG_MSG("\r\n\r** ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8002c6e:	483a      	ldr	r0, [pc, #232]	; (8002d58 <SVCCTL_App_Notification+0x330>)
 8002c70:	f008 fd62 	bl	800b738 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 8002c74:	e041      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blecore_evt->data))->Numeric_Value);
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8002c7a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4836      	ldr	r0, [pc, #216]	; (8002d5c <SVCCTL_App_Notification+0x334>)
 8002c82:	f008 fcd3 	bl	800b62c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blecore_evt->data))->Numeric_Value);
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8002c8a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4833      	ldr	r0, [pc, #204]	; (8002d60 <SVCCTL_App_Notification+0x338>)
 8002c92:	f008 fccb 	bl	800b62c <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8002c96:	4b1d      	ldr	r3, [pc, #116]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002c98:	8adb      	ldrh	r3, [r3, #22]
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f005 ffcc 	bl	8008c3a <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8002ca2:	4830      	ldr	r0, [pc, #192]	; (8002d64 <SVCCTL_App_Notification+0x33c>)
 8002ca4:	f008 fd48 	bl	800b738 <puts>
      break;
 8002ca8:	e027      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	3302      	adds	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE, pairing_complete->Status = %d\n",pairing_complete->Status);
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	789b      	ldrb	r3, [r3, #2]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	482c      	ldr	r0, [pc, #176]	; (8002d68 <SVCCTL_App_Notification+0x340>)
 8002cb8:	f008 fcb8 	bl	800b62c <iprintf>
            if (pairing_complete->Status == 0)
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	789b      	ldrb	r3, [r3, #2]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <SVCCTL_App_Notification+0x2a4>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8002cc4:	4829      	ldr	r0, [pc, #164]	; (8002d6c <SVCCTL_App_Notification+0x344>)
 8002cc6:	f008 fd37 	bl	800b738 <puts>
           break;    
 8002cca:	e016      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8002ccc:	4828      	ldr	r0, [pc, #160]	; (8002d70 <SVCCTL_App_Notification+0x348>)
 8002cce:	f008 fd33 	bl	800b738 <puts>
           break;    
 8002cd2:	e012      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
          mutex = 1;
 8002cd4:	4b27      	ldr	r3, [pc, #156]	; (8002d74 <SVCCTL_App_Notification+0x34c>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
      break;
 8002cda:	e00e      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
        APP_DBG_MSG("\r\n\r** ACI_GAP_PROC_COMPLETE_VSEVT_CODE \n");
 8002cdc:	4826      	ldr	r0, [pc, #152]	; (8002d78 <SVCCTL_App_Notification+0x350>)
 8002cde:	f008 fd2b 	bl	800b738 <puts>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8002ce2:	e00a      	b.n	8002cfa <SVCCTL_App_Notification+0x2d2>
          BSP_LED_On(LED_GREEN);
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f000 ff1b 	bl	8003b20 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <SVCCTL_App_Notification+0x2e4>)
 8002cec:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002cf0:	210a      	movs	r1, #10
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fe fc78 	bl	80015e8 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8002cf8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002cfa:	e001      	b.n	8002d00 <SVCCTL_App_Notification+0x2d8>
      break;
 8002cfc:	bf00      	nop
 8002cfe:	e000      	b.n	8002d02 <SVCCTL_App_Notification+0x2da>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002d00:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002d02:	2301      	movs	r3, #1
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3730      	adds	r7, #48	; 0x30
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20000148 	.word	0x20000148
 8002d10:	0800c628 	.word	0x0800c628
 8002d14:	20001678 	.word	0x20001678
 8002d18:	0800c650 	.word	0x0800c650
 8002d1c:	0800c67c 	.word	0x0800c67c
 8002d20:	0800c698 	.word	0x0800c698
 8002d24:	0800c6bc 	.word	0x0800c6bc
 8002d28:	0800c6e4 	.word	0x0800c6e4
 8002d2c:	0800c6f8 	.word	0x0800c6f8
 8002d30:	0800c714 	.word	0x0800c714
 8002d34:	0800c72c 	.word	0x0800c72c
 8002d38:	0800c770 	.word	0x0800c770
 8002d3c:	0800c7a0 	.word	0x0800c7a0
 8002d40:	0800c7c8 	.word	0x0800c7c8
 8002d44:	0800c7e8 	.word	0x0800c7e8
 8002d48:	0800c814 	.word	0x0800c814
 8002d4c:	0800c848 	.word	0x0800c848
 8002d50:	0800c86c 	.word	0x0800c86c
 8002d54:	0800c888 	.word	0x0800c888
 8002d58:	0800c8b4 	.word	0x0800c8b4
 8002d5c:	0800c8e4 	.word	0x0800c8e4
 8002d60:	0800c8fc 	.word	0x0800c8fc
 8002d64:	0800c910 	.word	0x0800c910
 8002d68:	0800c94c 	.word	0x0800c94c
 8002d6c:	0800c9ac 	.word	0x0800c9ac
 8002d70:	0800c9c0 	.word	0x0800c9c0
 8002d74:	2000167c 	.word	0x2000167c
 8002d78:	0800c9d4 	.word	0x0800c9d4

08002d7c <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8002d80:	f000 fbb2 	bl	80034e8 <P2PS_APP_SW1_Button_Action>
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	2004      	movs	r0, #4
 8002d90:	f008 faf6 	bl	800b380 <UTIL_SEQ_SetTask>
#endif
  
  return;
 8002d94:	bf00      	nop
}
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <Ble_Tl_Init+0x20>)
 8002db0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8002db2:	4b06      	ldr	r3, [pc, #24]	; (8002dcc <Ble_Tl_Init+0x24>)
 8002db4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8002db6:	463b      	mov	r3, r7
 8002db8:	4619      	mov	r1, r3
 8002dba:	4805      	ldr	r0, [pc, #20]	; (8002dd0 <Ble_Tl_Init+0x28>)
 8002dbc:	f006 fd10 	bl	80097e0 <hci_init>

  return;
 8002dc0:	bf00      	nop
}
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20030028 	.word	0x20030028
 8002dcc:	0800331d 	.word	0x0800331d
 8002dd0:	080032e5 	.word	0x080032e5

08002dd4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8002dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dd6:	b08f      	sub	sp, #60	; 0x3c
 8002dd8:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8002dda:	2300      	movs	r3, #0
 8002ddc:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8002dde:	f006 fad2 	bl	8009386 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8002de2:	f000 f95f 	bl	80030a4 <BleGetBdAddress>
 8002de6:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	2106      	movs	r1, #6
 8002dec:	2000      	movs	r0, #0
 8002dee:	f006 f9c0 	bl	8009172 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	795a      	ldrb	r2, [r3, #5]
 8002df6:	4b52      	ldr	r3, [pc, #328]	; (8002f40 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002df8:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	791a      	ldrb	r2, [r3, #4]
 8002dfe:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002e00:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	78da      	ldrb	r2, [r3, #3]
 8002e06:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002e08:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	789a      	ldrb	r2, [r3, #2]
 8002e0e:	4b4c      	ldr	r3, [pc, #304]	; (8002f40 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002e10:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	785a      	ldrb	r2, [r3, #1]
 8002e16:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002e18:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	781a      	ldrb	r2, [r3, #0]
 8002e1e:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002e20:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8002e22:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8002e26:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8002e28:	f7ff fd5e 	bl	80028e8 <LL_FLASH_GetUDN>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8002e30:	1d3b      	adds	r3, r7, #4
 8002e32:	461a      	mov	r2, r3
 8002e34:	2106      	movs	r1, #6
 8002e36:	202e      	movs	r0, #46	; 0x2e
 8002e38:	f006 f99b 	bl	8009172 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002e3c:	4a41      	ldr	r2, [pc, #260]	; (8002f44 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8002e3e:	2110      	movs	r1, #16
 8002e40:	2018      	movs	r0, #24
 8002e42:	f006 f996 	bl	8009172 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8002e48:	2110      	movs	r1, #16
 8002e4a:	2008      	movs	r0, #8
 8002e4c:	f006 f991 	bl	8009172 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002e50:	2118      	movs	r1, #24
 8002e52:	2001      	movs	r0, #1
 8002e54:	f006 f9f6 	bl	8009244 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8002e58:	f005 ff46 	bl	8008ce8 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002e60:	7efb      	ldrb	r3, [r7, #27]
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8002e68:	7efb      	ldrb	r3, [r7, #27]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01e      	beq.n	8002eac <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "BREATHE";
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <Ble_Hci_Gap_Gatt_Init+0x178>)
 8002e70:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8002e72:	f107 0212 	add.w	r2, r7, #18
 8002e76:	7ef8      	ldrb	r0, [r7, #27]
 8002e78:	f107 030e 	add.w	r3, r7, #14
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	2207      	movs	r2, #7
 8002e88:	2100      	movs	r1, #0
 8002e8a:	f005 fd81 	bl	8008990 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002e8e:	8a7c      	ldrh	r4, [r7, #18]
 8002e90:	8a3d      	ldrh	r5, [r7, #16]
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7fd f974 	bl	8000180 <strlen>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	f006 f8dc 	bl	8009064 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002eac:	8a78      	ldrh	r0, [r7, #18]
 8002eae:	89f9      	ldrh	r1, [r7, #14]
 8002eb0:	463b      	mov	r3, r7
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f006 f8d4 	bl	8009064 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	2102      	movs	r1, #2
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f006 faec 	bl	800949e <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002ecc:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f005 fc6b 	bl	80087ac <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002ed6:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002edc:	4b1c      	ldr	r3, [pc, #112]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ede:	2208      	movs	r2, #8
 8002ee0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002ee8:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002eee:	4b18      	ldr	r3, [pc, #96]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ef0:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <Ble_Hci_Gap_Gatt_Init+0x180>)
 8002ef2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002ef4:	4b16      	ldr	r3, [pc, #88]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002efa:	4b15      	ldr	r3, [pc, #84]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002efc:	789c      	ldrb	r4, [r3, #2]
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002f00:	785d      	ldrb	r5, [r3, #1]
 8002f02:	4b13      	ldr	r3, [pc, #76]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002f04:	791b      	ldrb	r3, [r3, #4]
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002f08:	7952      	ldrb	r2, [r2, #5]
 8002f0a:	4911      	ldr	r1, [pc, #68]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002f0c:	78c9      	ldrb	r1, [r1, #3]
 8002f0e:	4810      	ldr	r0, [pc, #64]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002f10:	6880      	ldr	r0, [r0, #8]
 8002f12:	2600      	movs	r6, #0
 8002f14:	9604      	str	r6, [sp, #16]
 8002f16:	9003      	str	r0, [sp, #12]
 8002f18:	9102      	str	r1, [sp, #8]
 8002f1a:	9201      	str	r2, [sp, #4]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2201      	movs	r2, #1
 8002f22:	4629      	mov	r1, r5
 8002f24:	4620      	mov	r0, r4
 8002f26:	f005 fc8b 	bl	8008840 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002f2c:	789b      	ldrb	r3, [r3, #2]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8002f32:	f005 fe14 	bl	8008b5e <aci_gap_configure_whitelist>
   }
}
 8002f36:	bf00      	nop
 8002f38:	3724      	adds	r7, #36	; 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	0800cec8 	.word	0x0800cec8
 8002f48:	0800ced8 	.word	0x0800ced8
 8002f4c:	0800c9fc 	.word	0x0800c9fc
 8002f50:	20000148 	.word	0x20000148
 8002f54:	0001b207 	.word	0x0001b207

08002f58 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08c      	sub	sp, #48	; 0x30
 8002f5c:	af08      	add	r7, sp, #32
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002f62:	2342      	movs	r3, #66	; 0x42
 8002f64:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d106      	bne.n	8002f7a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002f6c:	4b3f      	ldr	r3, [pc, #252]	; (800306c <Adv_Request+0x114>)
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <Adv_Request+0x118>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	81bb      	strh	r3, [r7, #12]
 8002f78:	e005      	b.n	8002f86 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002f7a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002f7e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002f80:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002f84:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <Adv_Request+0x11c>)
 8002f88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fe fa9f 	bl	80014d0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <Adv_Request+0x11c>)
 8002f94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4837      	ldr	r0, [pc, #220]	; (8003078 <Adv_Request+0x120>)
 8002f9c:	f008 fb46 	bl	800b62c <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d119      	bne.n	8002fda <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002fa6:	4b33      	ldr	r3, [pc, #204]	; (8003074 <Adv_Request+0x11c>)
 8002fa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d004      	beq.n	8002fba <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8002fb0:	4b30      	ldr	r3, [pc, #192]	; (8003074 <Adv_Request+0x11c>)
 8002fb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d10f      	bne.n	8002fda <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8002fba:	f005 faf5 	bl	80085a8 <aci_gap_set_non_discoverable>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8002fc8:	482c      	ldr	r0, [pc, #176]	; (800307c <Adv_Request+0x124>)
 8002fca:	f008 fbb5 	bl	800b738 <puts>
 8002fce:	e004      	b.n	8002fda <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 8002fd0:	7afb      	ldrb	r3, [r7, #11]
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	482a      	ldr	r0, [pc, #168]	; (8003080 <Adv_Request+0x128>)
 8002fd6:	f008 fb29 	bl	800b62c <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8002fda:	4a26      	ldr	r2, [pc, #152]	; (8003074 <Adv_Request+0x11c>)
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <Adv_Request+0x11c>)
 8002fe4:	7e1b      	ldrb	r3, [r3, #24]
 8002fe6:	89ba      	ldrh	r2, [r7, #12]
 8002fe8:	89f9      	ldrh	r1, [r7, #14]
 8002fea:	2000      	movs	r0, #0
 8002fec:	9006      	str	r0, [sp, #24]
 8002fee:	2000      	movs	r0, #0
 8002ff0:	9005      	str	r0, [sp, #20]
 8002ff2:	4824      	ldr	r0, [pc, #144]	; (8003084 <Adv_Request+0x12c>)
 8002ff4:	9004      	str	r0, [sp, #16]
 8002ff6:	9303      	str	r3, [sp, #12]
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <Adv_Request+0x130>)
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	2308      	movs	r3, #8
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	2300      	movs	r3, #0
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2300      	movs	r3, #0
 8003006:	2000      	movs	r0, #0
 8003008:	f005 faf2 	bl	80085f0 <aci_gap_set_discoverable>
 800300c:	4603      	mov	r3, r0
 800300e:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8003010:	491e      	ldr	r1, [pc, #120]	; (800308c <Adv_Request+0x134>)
 8003012:	200e      	movs	r0, #14
 8003014:	f005 fd47 	bl	8008aa6 <aci_gap_update_adv_data>
 8003018:	4603      	mov	r3, r0
 800301a:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800301c:	7afb      	ldrb	r3, [r7, #11]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d111      	bne.n	8003046 <Adv_Request+0xee>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10a      	bne.n	800303e <Adv_Request+0xe6>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8003028:	4819      	ldr	r0, [pc, #100]	; (8003090 <Adv_Request+0x138>)
 800302a:	f008 fb85 	bl	800b738 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <Adv_Request+0x11c>)
 8003030:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003034:	4917      	ldr	r1, [pc, #92]	; (8003094 <Adv_Request+0x13c>)
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fad6 	bl	80015e8 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800303c:	e012      	b.n	8003064 <Adv_Request+0x10c>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 800303e:	4816      	ldr	r0, [pc, #88]	; (8003098 <Adv_Request+0x140>)
 8003040:	f008 fb7a 	bl	800b738 <puts>
  return;
 8003044:	e00e      	b.n	8003064 <Adv_Request+0x10c>
      if (New_Status == APP_BLE_FAST_ADV)
 8003046:	79fb      	ldrb	r3, [r7, #7]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d105      	bne.n	8003058 <Adv_Request+0x100>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800304c:	7afb      	ldrb	r3, [r7, #11]
 800304e:	4619      	mov	r1, r3
 8003050:	4812      	ldr	r0, [pc, #72]	; (800309c <Adv_Request+0x144>)
 8003052:	f008 faeb 	bl	800b62c <iprintf>
  return;
 8003056:	e005      	b.n	8003064 <Adv_Request+0x10c>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	4619      	mov	r1, r3
 800305c:	4810      	ldr	r0, [pc, #64]	; (80030a0 <Adv_Request+0x148>)
 800305e:	f008 fae5 	bl	800b62c <iprintf>
  return;
 8003062:	bf00      	nop
}
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200001cc 	.word	0x200001cc
 8003070:	200001ce 	.word	0x200001ce
 8003074:	20000148 	.word	0x20000148
 8003078:	0800ca04 	.word	0x0800ca04
 800307c:	0800ca20 	.word	0x0800ca20
 8003080:	0800ca44 	.word	0x0800ca44
 8003084:	20000161 	.word	0x20000161
 8003088:	0800cee8 	.word	0x0800cee8
 800308c:	2000000c 	.word	0x2000000c
 8003090:	0800ca6c 	.word	0x0800ca6c
 8003094:	0001e046 	.word	0x0001e046
 8003098:	0800ca94 	.word	0x0800ca94
 800309c:	0800cac0 	.word	0x0800cac0
 80030a0:	0800caf0 	.word	0x0800caf0

080030a4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80030aa:	f7ff fc1d 	bl	80028e8 <LL_FLASH_GetUDN>
 80030ae:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b6:	d023      	beq.n	8003100 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80030b8:	f7ff fc2e 	bl	8002918 <LL_FLASH_GetSTCompanyID>
 80030bc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80030be:	f7ff fc1f 	bl	8002900 <LL_FLASH_GetDeviceID>
 80030c2:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <BleGetBdAddress+0x80>)
 80030ca:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <BleGetBdAddress+0x80>)
 80030d4:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	4b12      	ldr	r3, [pc, #72]	; (8003124 <BleGetBdAddress+0x80>)
 80030dc:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <BleGetBdAddress+0x80>)
 80030e4:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	0a1b      	lsrs	r3, r3, #8
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <BleGetBdAddress+0x80>)
 80030ee:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	0c1b      	lsrs	r3, r3, #16
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4b0b      	ldr	r3, [pc, #44]	; (8003124 <BleGetBdAddress+0x80>)
 80030f8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <BleGetBdAddress+0x80>)
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	e00b      	b.n	8003118 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8003100:	2000      	movs	r0, #0
 8003102:	f006 fd23 	bl	8009b4c <OTP_Read>
 8003106:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	617b      	str	r3, [r7, #20]
 8003112:	e001      	b.n	8003118 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <BleGetBdAddress+0x84>)
 8003116:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8003118:	697b      	ldr	r3, [r7, #20]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	20000258 	.word	0x20000258
 8003128:	0800cec0 	.word	0x0800cec0

0800312c <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8003132:	2001      	movs	r0, #1
 8003134:	f000 fd0e 	bl	8003b54 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8003138:	4b10      	ldr	r3, [pc, #64]	; (800317c <Adv_Cancel+0x50>)
 800313a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800313e:	2b05      	cmp	r3, #5
 8003140:	d017      	beq.n	8003172 <Adv_Cancel+0x46>

  {

    tBleStatus result = 0x00;
 8003142:	2300      	movs	r3, #0
 8003144:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8003146:	f005 fa2f 	bl	80085a8 <aci_gap_set_non_discoverable>
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800314e:	4b0b      	ldr	r3, [pc, #44]	; (800317c <Adv_Cancel+0x50>)
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <Adv_Cancel+0x3e>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800315c:	4808      	ldr	r0, [pc, #32]	; (8003180 <Adv_Cancel+0x54>)
 800315e:	f008 fa65 	bl	800b62c <iprintf>
 8003162:	4808      	ldr	r0, [pc, #32]	; (8003184 <Adv_Cancel+0x58>)
 8003164:	f008 fa62 	bl	800b62c <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8003168:	e003      	b.n	8003172 <Adv_Cancel+0x46>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800316a:	4807      	ldr	r0, [pc, #28]	; (8003188 <Adv_Cancel+0x5c>)
 800316c:	f008 fa5e 	bl	800b62c <iprintf>
  return;
 8003170:	bf00      	nop
 8003172:	bf00      	nop
}
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20000148 	.word	0x20000148
 8003180:	0800cb24 	.word	0x0800cb24
 8003184:	0800cb2c 	.word	0x0800cb2c
 8003188:	0800cb48 	.word	0x0800cb48

0800318c <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8003190:	2100      	movs	r1, #0
 8003192:	2001      	movs	r0, #1
 8003194:	f008 f8f4 	bl	800b380 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8003198:	bf00      	nop
}
 800319a:	bd80      	pop	{r7, pc}

0800319c <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 80031a0:	2001      	movs	r0, #1
 80031a2:	f000 fcd7 	bl	8003b54 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 80031ac:	b590      	push	{r4, r7, lr}
 80031ae:	b089      	sub	sp, #36	; 0x24
 80031b0:	af02      	add	r7, sp, #8
 80031b2:	4603      	mov	r3, r0
 80031b4:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) {
 80031b6:	4b29      	ldr	r3, [pc, #164]	; (800325c <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d149      	bne.n	8003252 <BLE_SVC_L2CAP_Conn_Update+0xa6>
    mutex = 0;
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80031c4:	4b26      	ldr	r3, [pc, #152]	; (8003260 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	bfb8      	it	lt
 80031d2:	425b      	neglt	r3, r3
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b22      	ldr	r3, [pc, #136]	; (8003260 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80031d8:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 80031da:	4b21      	ldr	r3, [pc, #132]	; (8003260 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4a21      	ldr	r2, [pc, #132]	; (8003264 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	ed93 7a00 	vldr	s14, [r3]
 80031e8:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 80031ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031f4:	ee17 3a90 	vmov	r3, s15
 80031f8:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 80031fa:	4b19      	ldr	r3, [pc, #100]	; (8003260 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	4a19      	ldr	r2, [pc, #100]	; (8003264 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800320c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003214:	ee17 3a90 	vmov	r3, s15
 8003218:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 800321a:	2300      	movs	r3, #0
 800321c:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800321e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003222:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 8003226:	8ad8      	ldrh	r0, [r3, #22]
 8003228:	8a7c      	ldrh	r4, [r7, #18]
 800322a:	8aba      	ldrh	r2, [r7, #20]
 800322c:	8af9      	ldrh	r1, [r7, #22]
 800322e:	8a3b      	ldrh	r3, [r7, #16]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	4623      	mov	r3, r4
 8003234:	f006 f99a 	bl	800956c <aci_l2cap_connection_parameter_update_req>
 8003238:	4603      	mov	r3, r0
 800323a:	73fb      	strb	r3, [r7, #15]
                                                       interval_min, interval_max,
                                                       slave_latency, timeout_multiplier);
    if( result == BLE_STATUS_SUCCESS )
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8003242:	480a      	ldr	r0, [pc, #40]	; (800326c <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8003244:	f008 f9f2 	bl	800b62c <iprintf>
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 8003248:	e003      	b.n	8003252 <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800324a:	4809      	ldr	r0, [pc, #36]	; (8003270 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 800324c:	f008 f9ee 	bl	800b62c <iprintf>
  return;
 8003250:	bf00      	nop
 8003252:	bf00      	nop
}
 8003254:	371c      	adds	r7, #28
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	2000167c 	.word	0x2000167c
 8003260:	2000167d 	.word	0x2000167d
 8003264:	20000004 	.word	0x20000004
 8003268:	20000148 	.word	0x20000148
 800326c:	0800cb6c 	.word	0x0800cb6c
 8003270:	0800cb9c 	.word	0x0800cb9c

08003274 <Connection_Interval_Update_Req>:
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
static void Connection_Interval_Update_Req( void )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <Connection_Interval_Update_Req+0x28>)
 800327a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800327e:	2b01      	cmp	r3, #1
 8003280:	d00a      	beq.n	8003298 <Connection_Interval_Update_Req+0x24>
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <Connection_Interval_Update_Req+0x28>)
 8003284:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d005      	beq.n	8003298 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <Connection_Interval_Update_Req+0x28>)
 800328e:	8adb      	ldrh	r3, [r3, #22]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff ff8b 	bl	80031ac <BLE_SVC_L2CAP_Conn_Update>
  }
  return;
 8003296:	bf00      	nop
 8003298:	bf00      	nop
}
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000148 	.word	0x20000148

080032a0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80032a8:	2100      	movs	r1, #0
 80032aa:	2008      	movs	r0, #8
 80032ac:	f008 f868 	bl	800b380 <UTIL_SEQ_SetTask>
  return;
 80032b0:	bf00      	nop
}
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80032c0:	2001      	movs	r0, #1
 80032c2:	f008 f8c9 	bl	800b458 <UTIL_SEQ_SetEvt>
  return;
 80032c6:	bf00      	nop
}
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80032d6:	2001      	movs	r0, #1
 80032d8:	f008 f8de 	bl	800b498 <UTIL_SEQ_WaitEvt>
  return;
 80032dc:	bf00      	nop
}
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	3308      	adds	r3, #8
 80032f6:	4618      	mov	r0, r3
 80032f8:	f007 fc5e 	bl	800abb8 <SVCCTL_UserEvtRx>
 80032fc:	4603      	mov	r3, r0
 80032fe:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003300:	7afb      	ldrb	r3, [r7, #11]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800330c:	e002      	b.n	8003314 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <BLE_StatusNot+0x16>
 800332c:	2b01      	cmp	r3, #1
 800332e:	d006      	beq.n	800333e <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8003330:	e00b      	b.n	800334a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003332:	230f      	movs	r3, #15
 8003334:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f008 f84e 	bl	800b3d8 <UTIL_SEQ_PauseTask>
      break;
 800333c:	e005      	b.n	800334a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800333e:	230f      	movs	r3, #15
 8003340:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f008 f868 	bl	800b418 <UTIL_SEQ_ResumeTask>
      break;
 8003348:	bf00      	nop
  }
  return;
 800334a:	bf00      	nop
}
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b03      	cmp	r3, #3
 8003362:	d01a      	beq.n	800339a <P2PS_STM_App_Notification+0x46>
 8003364:	2b03      	cmp	r3, #3
 8003366:	dc6b      	bgt.n	8003440 <P2PS_STM_App_Notification+0xec>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <P2PS_STM_App_Notification+0x1e>
 800336c:	2b01      	cmp	r3, #1
 800336e:	d00a      	beq.n	8003386 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8003370:	e066      	b.n	8003440 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 8003372:	4b37      	ldr	r3, [pc, #220]	; (8003450 <P2PS_STM_App_Notification+0xfc>)
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8003378:	4836      	ldr	r0, [pc, #216]	; (8003454 <P2PS_STM_App_Notification+0x100>)
 800337a:	f008 f9dd 	bl	800b738 <puts>
      APP_DBG_MSG(" \n\r");
 800337e:	4836      	ldr	r0, [pc, #216]	; (8003458 <P2PS_STM_App_Notification+0x104>)
 8003380:	f008 f954 	bl	800b62c <iprintf>
      break;
 8003384:	e05f      	b.n	8003446 <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 8003386:	4b32      	ldr	r3, [pc, #200]	; (8003450 <P2PS_STM_App_Notification+0xfc>)
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800338c:	4833      	ldr	r0, [pc, #204]	; (800345c <P2PS_STM_App_Notification+0x108>)
 800338e:	f008 f9d3 	bl	800b738 <puts>
      APP_DBG_MSG(" \n\r");
 8003392:	4831      	ldr	r0, [pc, #196]	; (8003458 <P2PS_STM_App_Notification+0x104>)
 8003394:	f008 f94a 	bl	800b62c <iprintf>
      break;
 8003398:	e055      	b.n	8003446 <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d123      	bne.n	80033ec <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	3301      	adds	r3, #1
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d10b      	bne.n	80033c8 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 80033b0:	2000      	movs	r0, #0
 80033b2:	f000 fbb5 	bl	8003b20 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 80033b6:	482a      	ldr	r0, [pc, #168]	; (8003460 <P2PS_STM_App_Notification+0x10c>)
 80033b8:	f008 f9be 	bl	800b738 <puts>
          APP_DBG_MSG(" \n\r");
 80033bc:	4826      	ldr	r0, [pc, #152]	; (8003458 <P2PS_STM_App_Notification+0x104>)
 80033be:	f008 f935 	bl	800b62c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80033c2:	4b23      	ldr	r3, [pc, #140]	; (8003450 <P2PS_STM_App_Notification+0xfc>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	3301      	adds	r3, #1
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10b      	bne.n	80033ec <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 80033d4:	2000      	movs	r0, #0
 80033d6:	f000 fbbd 	bl	8003b54 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 80033da:	4822      	ldr	r0, [pc, #136]	; (8003464 <P2PS_STM_App_Notification+0x110>)
 80033dc:	f008 f9ac 	bl	800b738 <puts>
          APP_DBG_MSG(" \n\r");
 80033e0:	481d      	ldr	r0, [pc, #116]	; (8003458 <P2PS_STM_App_Notification+0x104>)
 80033e2:	f008 f923 	bl	800b62c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80033e6:	4b1a      	ldr	r3, [pc, #104]	; (8003450 <P2PS_STM_App_Notification+0xfc>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d126      	bne.n	8003444 <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	3301      	adds	r3, #1
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d10b      	bne.n	800341a <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 8003402:	2000      	movs	r0, #0
 8003404:	f000 fb8c 	bl	8003b20 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8003408:	4817      	ldr	r0, [pc, #92]	; (8003468 <P2PS_STM_App_Notification+0x114>)
 800340a:	f008 f995 	bl	800b738 <puts>
          APP_DBG_MSG(" \n\r");
 800340e:	4812      	ldr	r0, [pc, #72]	; (8003458 <P2PS_STM_App_Notification+0x104>)
 8003410:	f008 f90c 	bl	800b62c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003414:	4b0e      	ldr	r3, [pc, #56]	; (8003450 <P2PS_STM_App_Notification+0xfc>)
 8003416:	2201      	movs	r2, #1
 8003418:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	3301      	adds	r3, #1
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 8003426:	2000      	movs	r0, #0
 8003428:	f000 fb94 	bl	8003b54 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 800342c:	480f      	ldr	r0, [pc, #60]	; (800346c <P2PS_STM_App_Notification+0x118>)
 800342e:	f008 f983 	bl	800b738 <puts>
          APP_DBG_MSG(" \n\r");
 8003432:	4809      	ldr	r0, [pc, #36]	; (8003458 <P2PS_STM_App_Notification+0x104>)
 8003434:	f008 f8fa 	bl	800b62c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <P2PS_STM_App_Notification+0xfc>)
 800343a:	2200      	movs	r2, #0
 800343c:	709a      	strb	r2, [r3, #2]
      break;
 800343e:	e001      	b.n	8003444 <P2PS_STM_App_Notification+0xf0>
      break;
 8003440:	bf00      	nop
 8003442:	e000      	b.n	8003446 <P2PS_STM_App_Notification+0xf2>
      break;
 8003444:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8003446:	bf00      	nop
}
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200001d0 	.word	0x200001d0
 8003454:	0800cbc4 	.word	0x0800cbc4
 8003458:	0800cbf8 	.word	0x0800cbf8
 800345c:	0800cbfc 	.word	0x0800cbfc
 8003460:	0800cc30 	.word	0x0800cc30
 8003464:	0800cc58 	.word	0x0800cc58
 8003468:	0800cc80 	.word	0x0800cc80
 800346c:	0800cca8 	.word	0x0800cca8

08003470 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <P2PS_APP_Notification+0x1c>
 8003480:	2b01      	cmp	r3, #1
 8003482:	d000      	beq.n	8003486 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8003484:	e003      	b.n	800348e <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8003486:	f000 f819 	bl	80034bc <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800348a:	e000      	b.n	800348e <P2PS_APP_Notification+0x1e>
    break;
 800348c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800348e:	bf00      	nop
}
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 800349c:	4a05      	ldr	r2, [pc, #20]	; (80034b4 <P2PS_APP_Init+0x1c>)
 800349e:	2100      	movs	r1, #0
 80034a0:	2002      	movs	r0, #2
 80034a2:	f007 ff4b 	bl	800b33c <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <P2PS_APP_Init+0x20>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80034ac:	f000 f806 	bl	80034bc <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 80034b0:	bf00      	nop
}
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	080034f9 	.word	0x080034f9
 80034b8:	200001d0 	.word	0x200001d0

080034bc <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f000 fb47 	bl	8003b54 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80034c8:	2201      	movs	r2, #1
 80034ca:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80034d8:	4b02      	ldr	r3, [pc, #8]	; (80034e4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80034da:	2200      	movs	r2, #0
 80034dc:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200001d0 	.word	0x200001d0

080034e8 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80034ec:	2100      	movs	r1, #0
 80034ee:	2002      	movs	r0, #2
 80034f0:	f007 ff46 	bl	800b380 <UTIL_SEQ_SetTask>

  return;
 80034f4:	bf00      	nop
}
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 80034fc:	4b0f      	ldr	r3, [pc, #60]	; (800353c <P2PS_Send_Notification+0x44>)
 80034fe:	791b      	ldrb	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8003504:	4b0d      	ldr	r3, [pc, #52]	; (800353c <P2PS_Send_Notification+0x44>)
 8003506:	2201      	movs	r2, #1
 8003508:	711a      	strb	r2, [r3, #4]
 800350a:	e002      	b.n	8003512 <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800350c:	4b0b      	ldr	r3, [pc, #44]	; (800353c <P2PS_Send_Notification+0x44>)
 800350e:	2200      	movs	r2, #0
 8003510:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <P2PS_Send_Notification+0x44>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 800351a:	4809      	ldr	r0, [pc, #36]	; (8003540 <P2PS_Send_Notification+0x48>)
 800351c:	f008 f886 	bl	800b62c <iprintf>
    APP_DBG_MSG(" \n\r");
 8003520:	4808      	ldr	r0, [pc, #32]	; (8003544 <P2PS_Send_Notification+0x4c>)
 8003522:	f008 f883 	bl	800b62c <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8003526:	4908      	ldr	r1, [pc, #32]	; (8003548 <P2PS_Send_Notification+0x50>)
 8003528:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800352c:	f006 fc40 	bl	8009db0 <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8003530:	e003      	b.n	800353a <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8003532:	4806      	ldr	r0, [pc, #24]	; (800354c <P2PS_Send_Notification+0x54>)
 8003534:	f008 f87a 	bl	800b62c <iprintf>
  return;
 8003538:	bf00      	nop
}
 800353a:	bd80      	pop	{r7, pc}
 800353c:	200001d0 	.word	0x200001d0
 8003540:	0800ccd0 	.word	0x0800ccd0
 8003544:	0800cbf8 	.word	0x0800cbf8
 8003548:	200001d3 	.word	0x200001d3
 800354c:	0800cd10 	.word	0x0800cd10

08003550 <LL_PWR_EnableBootC2>:
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <LL_PWR_EnableBootC2+0x1c>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <LL_PWR_EnableBootC2+0x1c>)
 800355a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	58000400 	.word	0x58000400

08003570 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800357a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800357e:	4905      	ldr	r1, [pc, #20]	; (8003594 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	58000800 	.word	0x58000800

08003598 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	4904      	ldr	r1, [pc, #16]	; (80035b8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	620b      	str	r3, [r1, #32]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	58000800 	.word	0x58000800

080035bc <LL_AHB3_GRP1_EnableClock>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80035c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4013      	ands	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035e0:	68fb      	ldr	r3, [r7, #12]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b085      	sub	sp, #20
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80035f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80035fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800360a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003618:	68fb      	ldr	r3, [r7, #12]
}
 800361a:	bf00      	nop
 800361c:	3714      	adds	r7, #20
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <LL_C1_IPCC_EnableIT_TXF>:
{
 8003626:	b480      	push	{r7}
 8003628:	b083      	sub	sp, #12
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	601a      	str	r2, [r3, #0]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	43db      	mvns	r3, r3
 800367a:	401a      	ands	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_C1_IPCC_DisableTransmitChannel>:
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	041b      	lsls	r3, r3, #16
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	605a      	str	r2, [r3, #4]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	43db      	mvns	r3, r3
 80036c2:	401a      	ands	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	605a      	str	r2, [r3, #4]
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	609a      	str	r2, [r3, #8]
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <LL_C1_IPCC_SetFlag_CHx>:
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	041a      	lsls	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	609a      	str	r2, [r3, #8]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4013      	ands	r3, r2
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d101      	bne.n	800372a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	4013      	ands	r3, r2
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d101      	bne.n	8003754 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003768:	2102      	movs	r1, #2
 800376a:	4819      	ldr	r0, [pc, #100]	; (80037d0 <HW_IPCC_Rx_Handler+0x6c>)
 800376c:	f7ff ffe4 	bl	8003738 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <HW_IPCC_Rx_Handler+0x26>
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HW_IPCC_Rx_Handler+0x6c>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	43db      	mvns	r3, r3
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d002      	beq.n	800378a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003784:	f000 f8ea 	bl	800395c <HW_IPCC_SYS_EvtHandler>
 8003788:	e01f      	b.n	80037ca <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800378a:	2101      	movs	r1, #1
 800378c:	4810      	ldr	r0, [pc, #64]	; (80037d0 <HW_IPCC_Rx_Handler+0x6c>)
 800378e:	f7ff ffd3 	bl	8003738 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d008      	beq.n	80037aa <HW_IPCC_Rx_Handler+0x46>
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HW_IPCC_Rx_Handler+0x6c>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d102      	bne.n	80037aa <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80037a4:	f000 f89e 	bl	80038e4 <HW_IPCC_BLE_EvtHandler>
 80037a8:	e00f      	b.n	80037ca <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80037aa:	2108      	movs	r1, #8
 80037ac:	4808      	ldr	r0, [pc, #32]	; (80037d0 <HW_IPCC_Rx_Handler+0x6c>)
 80037ae:	f7ff ffc3 	bl	8003738 <LL_C2_IPCC_IsActiveFlag_CHx>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <HW_IPCC_Rx_Handler+0x68>
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HW_IPCC_Rx_Handler+0x6c>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	43db      	mvns	r3, r3
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80037c6:	f000 f915 	bl	80039f4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
}
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	58000c00 	.word	0x58000c00

080037d4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80037d8:	2102      	movs	r1, #2
 80037da:	4822      	ldr	r0, [pc, #136]	; (8003864 <HW_IPCC_Tx_Handler+0x90>)
 80037dc:	f7ff ff97 	bl	800370e <LL_C1_IPCC_IsActiveFlag_CHx>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HW_IPCC_Tx_Handler+0x26>
 80037e6:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <HW_IPCC_Tx_Handler+0x90>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	43db      	mvns	r3, r3
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80037f4:	f000 f8a6 	bl	8003944 <HW_IPCC_SYS_CmdEvtHandler>
 80037f8:	e031      	b.n	800385e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80037fa:	2102      	movs	r1, #2
 80037fc:	4819      	ldr	r0, [pc, #100]	; (8003864 <HW_IPCC_Tx_Handler+0x90>)
 80037fe:	f7ff ff86 	bl	800370e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d109      	bne.n	800381c <HW_IPCC_Tx_Handler+0x48>
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <HW_IPCC_Tx_Handler+0x90>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	43db      	mvns	r3, r3
 800380e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003816:	f000 f895 	bl	8003944 <HW_IPCC_SYS_CmdEvtHandler>
 800381a:	e020      	b.n	800385e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800381c:	2108      	movs	r1, #8
 800381e:	4811      	ldr	r0, [pc, #68]	; (8003864 <HW_IPCC_Tx_Handler+0x90>)
 8003820:	f7ff ff75 	bl	800370e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <HW_IPCC_Tx_Handler+0x6a>
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <HW_IPCC_Tx_Handler+0x90>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	43db      	mvns	r3, r3
 8003830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8003838:	f000 f8be 	bl	80039b8 <HW_IPCC_MM_FreeBufHandler>
 800383c:	e00f      	b.n	800385e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800383e:	2120      	movs	r1, #32
 8003840:	4808      	ldr	r0, [pc, #32]	; (8003864 <HW_IPCC_Tx_Handler+0x90>)
 8003842:	f7ff ff64 	bl	800370e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d109      	bne.n	8003860 <HW_IPCC_Tx_Handler+0x8c>
 800384c:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HW_IPCC_Tx_Handler+0x90>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	43db      	mvns	r3, r3
 8003852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800385a:	f000 f84f 	bl	80038fc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800385e:	bf00      	nop
 8003860:	bf00      	nop
}
 8003862:	bd80      	pop	{r7, pc}
 8003864:	58000c00 	.word	0x58000c00

08003868 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800386c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003870:	f7ff febd 	bl	80035ee <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003874:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003878:	f7ff fe7a 	bl	8003570 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800387c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003880:	f7ff fe8a 	bl	8003598 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003884:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003886:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003888:	f7ff fe62 	bl	8003550 <LL_PWR_EnableBootC2>

  return;
 800388c:	bf00      	nop
}
 800388e:	bd80      	pop	{r7, pc}

08003890 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003894:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003898:	f7ff fe90 	bl	80035bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800389c:	4806      	ldr	r0, [pc, #24]	; (80038b8 <HW_IPCC_Init+0x28>)
 800389e:	f7ff fed2 	bl	8003646 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80038a2:	4805      	ldr	r0, [pc, #20]	; (80038b8 <HW_IPCC_Init+0x28>)
 80038a4:	f7ff febf 	bl	8003626 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80038a8:	202c      	movs	r0, #44	; 0x2c
 80038aa:	f000 fc48 	bl	800413e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80038ae:	202d      	movs	r0, #45	; 0x2d
 80038b0:	f000 fc45 	bl	800413e <HAL_NVIC_EnableIRQ>

  return;
 80038b4:	bf00      	nop
}
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	58000c00 	.word	0x58000c00

080038bc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80038c0:	2101      	movs	r1, #1
 80038c2:	4802      	ldr	r0, [pc, #8]	; (80038cc <HW_IPCC_BLE_Init+0x10>)
 80038c4:	f7ff fef4 	bl	80036b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80038c8:	bf00      	nop
}
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	58000c00 	.word	0x58000c00

080038d0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80038d4:	2101      	movs	r1, #1
 80038d6:	4802      	ldr	r0, [pc, #8]	; (80038e0 <HW_IPCC_BLE_SendCmd+0x10>)
 80038d8:	f7ff ff0a 	bl	80036f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80038dc:	bf00      	nop
}
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	58000c00 	.word	0x58000c00

080038e4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80038e8:	f007 fa4a 	bl	800ad80 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80038ec:	2101      	movs	r1, #1
 80038ee:	4802      	ldr	r0, [pc, #8]	; (80038f8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80038f0:	f7ff fef0 	bl	80036d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80038f4:	bf00      	nop
}
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	58000c00 	.word	0x58000c00

080038fc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003900:	2120      	movs	r1, #32
 8003902:	4803      	ldr	r0, [pc, #12]	; (8003910 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003904:	f7ff fec2 	bl	800368c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003908:	f007 fa6a 	bl	800ade0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800390c:	bf00      	nop
}
 800390e:	bd80      	pop	{r7, pc}
 8003910:	58000c00 	.word	0x58000c00

08003914 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003918:	2102      	movs	r1, #2
 800391a:	4802      	ldr	r0, [pc, #8]	; (8003924 <HW_IPCC_SYS_Init+0x10>)
 800391c:	f7ff fec8 	bl	80036b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003920:	bf00      	nop
}
 8003922:	bd80      	pop	{r7, pc}
 8003924:	58000c00 	.word	0x58000c00

08003928 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800392c:	2102      	movs	r1, #2
 800392e:	4804      	ldr	r0, [pc, #16]	; (8003940 <HW_IPCC_SYS_SendCmd+0x18>)
 8003930:	f7ff fede 	bl	80036f0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003934:	2102      	movs	r1, #2
 8003936:	4802      	ldr	r0, [pc, #8]	; (8003940 <HW_IPCC_SYS_SendCmd+0x18>)
 8003938:	f7ff fe95 	bl	8003666 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800393c:	bf00      	nop
}
 800393e:	bd80      	pop	{r7, pc}
 8003940:	58000c00 	.word	0x58000c00

08003944 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003948:	2102      	movs	r1, #2
 800394a:	4803      	ldr	r0, [pc, #12]	; (8003958 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800394c:	f7ff fe9e 	bl	800368c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003950:	f007 fa96 	bl	800ae80 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003954:	bf00      	nop
}
 8003956:	bd80      	pop	{r7, pc}
 8003958:	58000c00 	.word	0x58000c00

0800395c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003960:	f007 faa4 	bl	800aeac <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003964:	2102      	movs	r1, #2
 8003966:	4802      	ldr	r0, [pc, #8]	; (8003970 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003968:	f7ff feb4 	bl	80036d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800396c:	bf00      	nop
}
 800396e:	bd80      	pop	{r7, pc}
 8003970:	58000c00 	.word	0x58000c00

08003974 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800397c:	2108      	movs	r1, #8
 800397e:	480c      	ldr	r0, [pc, #48]	; (80039b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003980:	f7ff fec5 	bl	800370e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d007      	beq.n	800399a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003990:	2108      	movs	r1, #8
 8003992:	4807      	ldr	r0, [pc, #28]	; (80039b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003994:	f7ff fe67 	bl	8003666 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003998:	e006      	b.n	80039a8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800399e:	2108      	movs	r1, #8
 80039a0:	4803      	ldr	r0, [pc, #12]	; (80039b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80039a2:	f7ff fea5 	bl	80036f0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80039a6:	bf00      	nop
}
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	58000c00 	.word	0x58000c00
 80039b4:	20000260 	.word	0x20000260

080039b8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80039bc:	2108      	movs	r1, #8
 80039be:	4806      	ldr	r0, [pc, #24]	; (80039d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80039c0:	f7ff fe64 	bl	800368c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <HW_IPCC_MM_FreeBufHandler+0x24>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80039ca:	2108      	movs	r1, #8
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80039ce:	f7ff fe8f 	bl	80036f0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80039d2:	bf00      	nop
}
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	58000c00 	.word	0x58000c00
 80039dc:	20000260 	.word	0x20000260

080039e0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80039e4:	2108      	movs	r1, #8
 80039e6:	4802      	ldr	r0, [pc, #8]	; (80039f0 <HW_IPCC_TRACES_Init+0x10>)
 80039e8:	f7ff fe62 	bl	80036b0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80039ec:	bf00      	nop
}
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	58000c00 	.word	0x58000c00

080039f4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80039f8:	f007 fb00 	bl	800affc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80039fc:	2108      	movs	r1, #8
 80039fe:	4802      	ldr	r0, [pc, #8]	; (8003a08 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003a00:	f7ff fe68 	bl	80036d4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003a04:	bf00      	nop
}
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	58000c00 	.word	0x58000c00

08003a0c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003a0c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a0e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a10:	3304      	adds	r3, #4

08003a12 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a12:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a14:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003a16:	d3f9      	bcc.n	8003a0c <CopyDataInit>
  bx lr
 8003a18:	4770      	bx	lr

08003a1a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003a1a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003a1c:	3004      	adds	r0, #4

08003a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003a1e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003a20:	d3fb      	bcc.n	8003a1a <FillZerobss>
  bx lr
 8003a22:	4770      	bx	lr

08003a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a24:	480c      	ldr	r0, [pc, #48]	; (8003a58 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003a26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003a28:	480c      	ldr	r0, [pc, #48]	; (8003a5c <LoopForever+0x8>)
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <LoopForever+0xc>)
 8003a2c:	4a0d      	ldr	r2, [pc, #52]	; (8003a64 <LoopForever+0x10>)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f7ff ffef 	bl	8003a12 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003a34:	480c      	ldr	r0, [pc, #48]	; (8003a68 <LoopForever+0x14>)
 8003a36:	490d      	ldr	r1, [pc, #52]	; (8003a6c <LoopForever+0x18>)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f7ff fff0 	bl	8003a1e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003a3e:	480c      	ldr	r0, [pc, #48]	; (8003a70 <LoopForever+0x1c>)
 8003a40:	490c      	ldr	r1, [pc, #48]	; (8003a74 <LoopForever+0x20>)
 8003a42:	2300      	movs	r3, #0
 8003a44:	f7ff ffeb 	bl	8003a1e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003a48:	f000 f910 	bl	8003c6c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003a4c:	f007 fdb4 	bl	800b5b8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003a50:	f7fe f8f0 	bl	8001c34 <main>

08003a54 <LoopForever>:

LoopForever:
  b LoopForever
 8003a54:	e7fe      	b.n	8003a54 <LoopForever>
 8003a56:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003a58:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003a5c:	20000004 	.word	0x20000004
 8003a60:	200000ac 	.word	0x200000ac
 8003a64:	0800d084 	.word	0x0800d084
  INIT_BSS _sbss, _ebss
 8003a68:	2000022c 	.word	0x2000022c
 8003a6c:	20001694 	.word	0x20001694
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003a70:	200301e0 	.word	0x200301e0
 8003a74:	20030a57 	.word	0x20030a57

08003a78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC1_IRQHandler>

08003a7a <LL_AHB2_GRP1_EnableClock>:
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b085      	sub	sp, #20
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f7ff ffd7 	bl	8003a7a <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <BSP_LED_Init+0x6c>)
 8003ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ad4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <BSP_LED_Init+0x70>)
 8003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aea:	f107 020c 	add.w	r2, r7, #12
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fedb 	bl	80048ac <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003af6:	79fb      	ldrb	r3, [r7, #7]
 8003af8:	4a08      	ldr	r2, [pc, #32]	; (8003b1c <BSP_LED_Init+0x70>)
 8003afa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003afe:	79fb      	ldrb	r3, [r7, #7]
 8003b00:	4a05      	ldr	r2, [pc, #20]	; (8003b18 <BSP_LED_Init+0x6c>)
 8003b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b06:	2200      	movs	r2, #0
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f001 f83f 	bl	8004b8c <HAL_GPIO_WritePin>
}
 8003b0e:	bf00      	nop
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	0800cef0 	.word	0x0800cef0
 8003b1c:	2000001c 	.word	0x2000001c

08003b20 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	4603      	mov	r3, r0
 8003b28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <BSP_LED_On+0x2c>)
 8003b2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	4a06      	ldr	r2, [pc, #24]	; (8003b50 <BSP_LED_On+0x30>)
 8003b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f001 f825 	bl	8004b8c <HAL_GPIO_WritePin>
}
 8003b42:	bf00      	nop
 8003b44:	3708      	adds	r7, #8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	2000001c 	.word	0x2000001c
 8003b50:	0800cef0 	.word	0x0800cef0

08003b54 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	4a07      	ldr	r2, [pc, #28]	; (8003b80 <BSP_LED_Off+0x2c>)
 8003b62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	4a06      	ldr	r2, [pc, #24]	; (8003b84 <BSP_LED_Off+0x30>)
 8003b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	4619      	mov	r1, r3
 8003b72:	f001 f80b 	bl	8004b8c <HAL_GPIO_WritePin>
}
 8003b76:	bf00      	nop
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	2000001c 	.word	0x2000001c
 8003b84:	0800cef0 	.word	0x0800cef0

08003b88 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	460a      	mov	r2, r1
 8003b92:	71fb      	strb	r3, [r7, #7]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003b98:	f107 030c 	add.w	r3, r7, #12
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
 8003ba6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <BSP_PB_Init+0x2e>
 8003bae:	2004      	movs	r0, #4
 8003bb0:	f7ff ff63 	bl	8003a7a <LL_AHB2_GRP1_EnableClock>
 8003bb4:	e00c      	b.n	8003bd0 <BSP_PB_Init+0x48>
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d103      	bne.n	8003bc4 <BSP_PB_Init+0x3c>
 8003bbc:	2008      	movs	r0, #8
 8003bbe:	f7ff ff5c 	bl	8003a7a <LL_AHB2_GRP1_EnableClock>
 8003bc2:	e005      	b.n	8003bd0 <BSP_PB_Init+0x48>
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d102      	bne.n	8003bd0 <BSP_PB_Init+0x48>
 8003bca:	2008      	movs	r0, #8
 8003bcc:	f7ff ff55 	bl	8003a7a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003bd0:	79bb      	ldrb	r3, [r7, #6]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d117      	bne.n	8003c06 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <BSP_PB_Init+0xd4>)
 8003bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bde:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003be0:	2300      	movs	r3, #0
 8003be2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003be4:	2301      	movs	r3, #1
 8003be6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003be8:	2302      	movs	r3, #2
 8003bea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <BSP_PB_Init+0xd8>)
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	f107 020c 	add.w	r2, r7, #12
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fe56 	bl	80048ac <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f7fe faee 	bl	80021e2 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8003c06:	79bb      	ldrb	r3, [r7, #6]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d122      	bne.n	8003c52 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	4a13      	ldr	r2, [pc, #76]	; (8003c5c <BSP_PB_Init+0xd4>)
 8003c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c14:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003c16:	2301      	movs	r3, #1
 8003c18:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003c1a:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <BSP_PB_Init+0xdc>)
 8003c1c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	4a0f      	ldr	r2, [pc, #60]	; (8003c60 <BSP_PB_Init+0xd8>)
 8003c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c26:	f107 020c 	add.w	r2, r7, #12
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fe3d 	bl	80048ac <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	4a0c      	ldr	r2, [pc, #48]	; (8003c68 <BSP_PB_Init+0xe0>)
 8003c36:	5cd3      	ldrb	r3, [r2, r3]
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	210f      	movs	r1, #15
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fa63 	bl	800410a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <BSP_PB_Init+0xe0>)
 8003c48:	5cd3      	ldrb	r3, [r2, r3]
 8003c4a:	b25b      	sxtb	r3, r3
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 fa76 	bl	800413e <HAL_NVIC_EnableIRQ>
  }
}
 8003c52:	bf00      	nop
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	0800cef8 	.word	0x0800cef8
 8003c60:	20000028 	.word	0x20000028
 8003c64:	10210000 	.word	0x10210000
 8003c68:	0800cf00 	.word	0x0800cf00

08003c6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003c70:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <SystemInit+0xa0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003c76:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <SystemInit+0xa0>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	4a23      	ldr	r2, [pc, #140]	; (8003d0c <SystemInit+0xa0>)
 8003c7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <SystemInit+0xa4>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cbc:	f023 0305 	bic.w	r3, r3, #5
 8003cc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ccc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <SystemInit+0xa8>)
 8003cde:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce4:	4a0b      	ldr	r2, [pc, #44]	; (8003d14 <SystemInit+0xa8>)
 8003ce6:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	619a      	str	r2, [r3, #24]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000ed00 	.word	0xe000ed00
 8003d10:	faf6fefb 	.word	0xfaf6fefb
 8003d14:	22041000 	.word	0x22041000

08003d18 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	4a04      	ldr	r2, [pc, #16]	; (8003d34 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003d22:	f043 0301 	orr.w	r3, r3, #1
 8003d26:	6053      	str	r3, [r2, #4]
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e0042000 	.word	0xe0042000

08003d38 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a04      	ldr	r2, [pc, #16]	; (8003d54 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003d42:	f043 0302 	orr.w	r3, r3, #2
 8003d46:	6053      	str	r3, [r2, #4]
}
 8003d48:	bf00      	nop
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	e0042000 	.word	0xe0042000

08003d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d62:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_Init+0x3c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <HAL_Init+0x3c>)
 8003d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d6e:	2003      	movs	r0, #3
 8003d70:	f000 f9c0 	bl	80040f4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d74:	2000      	movs	r0, #0
 8003d76:	f000 f80f 	bl	8003d98 <HAL_InitTick>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	71fb      	strb	r3, [r7, #7]
 8003d84:	e001      	b.n	8003d8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d86:	f7fe fb20 	bl	80023ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3708      	adds	r7, #8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	58004000 	.word	0x58004000

08003d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <HAL_InitTick+0x6c>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d024      	beq.n	8003df6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003dac:	f002 f972 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <HAL_InitTick+0x6c>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	4619      	mov	r1, r3
 8003db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f9d6 	bl	8004176 <HAL_SYSTICK_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10f      	bne.n	8003df0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	d809      	bhi.n	8003dea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	f04f 30ff 	mov.w	r0, #4294967295
 8003dde:	f000 f994 	bl	800410a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003de2:	4a09      	ldr	r2, [pc, #36]	; (8003e08 <HAL_InitTick+0x70>)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6013      	str	r3, [r2, #0]
 8003de8:	e007      	b.n	8003dfa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
 8003dee:	e004      	b.n	8003dfa <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	e001      	b.n	8003dfa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	2000003c 	.word	0x2000003c
 8003e08:	20000038 	.word	0x20000038

08003e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e10:	4b06      	ldr	r3, [pc, #24]	; (8003e2c <HAL_IncTick+0x20>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <HAL_IncTick+0x24>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_IncTick+0x24>)
 8003e1e:	6013      	str	r3, [r2, #0]
}
 8003e20:	bf00      	nop
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	2000003c 	.word	0x2000003c
 8003e30:	20001680 	.word	0x20001680

08003e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return uwTick;
 8003e38:	4b03      	ldr	r3, [pc, #12]	; (8003e48 <HAL_GetTick+0x14>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	20001680 	.word	0x20001680

08003e4c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003e50:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <HAL_GetTickPrio+0x14>)
 8003e52:	681b      	ldr	r3, [r3, #0]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000038 	.word	0x20000038

08003e64 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_GetTickFreq+0x14>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	2000003c 	.word	0x2000003c

08003e7c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003e80:	f7ff ff4a 	bl	8003d18 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003e8c:	f7ff ff54 	bl	8003d38 <LL_DBGMCU_EnableDBGStopMode>
}
 8003e90:	bf00      	nop
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	60d3      	str	r3, [r2, #12]
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	f003 0307 	and.w	r3, r3, #7
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	e000ed00 	.word	0xe000ed00

08003ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	4603      	mov	r3, r0
 8003f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	db0b      	blt.n	8003f22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f0a:	79fb      	ldrb	r3, [r7, #7]
 8003f0c:	f003 021f 	and.w	r2, r3, #31
 8003f10:	4907      	ldr	r1, [pc, #28]	; (8003f30 <__NVIC_EnableIRQ+0x38>)
 8003f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2001      	movs	r0, #1
 8003f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	e000e100 	.word	0xe000e100

08003f34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	db12      	blt.n	8003f6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f46:	79fb      	ldrb	r3, [r7, #7]
 8003f48:	f003 021f 	and.w	r2, r3, #31
 8003f4c:	490a      	ldr	r1, [pc, #40]	; (8003f78 <__NVIC_DisableIRQ+0x44>)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	095b      	lsrs	r3, r3, #5
 8003f54:	2001      	movs	r0, #1
 8003f56:	fa00 f202 	lsl.w	r2, r0, r2
 8003f5a:	3320      	adds	r3, #32
 8003f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003f60:	f3bf 8f4f 	dsb	sy
}
 8003f64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003f66:	f3bf 8f6f 	isb	sy
}
 8003f6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	e000e100 	.word	0xe000e100

08003f7c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	4603      	mov	r3, r0
 8003f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	db0c      	blt.n	8003fa8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	f003 021f 	and.w	r2, r3, #31
 8003f94:	4907      	ldr	r1, [pc, #28]	; (8003fb4 <__NVIC_SetPendingIRQ+0x38>)
 8003f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003fa2:	3340      	adds	r3, #64	; 0x40
 8003fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	e000e100 	.word	0xe000e100

08003fb8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db0c      	blt.n	8003fe4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fca:	79fb      	ldrb	r3, [r7, #7]
 8003fcc:	f003 021f 	and.w	r2, r3, #31
 8003fd0:	4907      	ldr	r1, [pc, #28]	; (8003ff0 <__NVIC_ClearPendingIRQ+0x38>)
 8003fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd6:	095b      	lsrs	r3, r3, #5
 8003fd8:	2001      	movs	r0, #1
 8003fda:	fa00 f202 	lsl.w	r2, r0, r2
 8003fde:	3360      	adds	r3, #96	; 0x60
 8003fe0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr
 8003ff0:	e000e100 	.word	0xe000e100

08003ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004004:	2b00      	cmp	r3, #0
 8004006:	db0a      	blt.n	800401e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	490c      	ldr	r1, [pc, #48]	; (8004040 <__NVIC_SetPriority+0x4c>)
 800400e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004012:	0112      	lsls	r2, r2, #4
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	440b      	add	r3, r1
 8004018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800401c:	e00a      	b.n	8004034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	4908      	ldr	r1, [pc, #32]	; (8004044 <__NVIC_SetPriority+0x50>)
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	3b04      	subs	r3, #4
 800402c:	0112      	lsls	r2, r2, #4
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	440b      	add	r3, r1
 8004032:	761a      	strb	r2, [r3, #24]
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	e000e100 	.word	0xe000e100
 8004044:	e000ed00 	.word	0xe000ed00

08004048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004048:	b480      	push	{r7}
 800404a:	b089      	sub	sp, #36	; 0x24
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	f1c3 0307 	rsb	r3, r3, #7
 8004062:	2b04      	cmp	r3, #4
 8004064:	bf28      	it	cs
 8004066:	2304      	movcs	r3, #4
 8004068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3304      	adds	r3, #4
 800406e:	2b06      	cmp	r3, #6
 8004070:	d902      	bls.n	8004078 <NVIC_EncodePriority+0x30>
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3b03      	subs	r3, #3
 8004076:	e000      	b.n	800407a <NVIC_EncodePriority+0x32>
 8004078:	2300      	movs	r3, #0
 800407a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800407c:	f04f 32ff 	mov.w	r2, #4294967295
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	43da      	mvns	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	401a      	ands	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004090:	f04f 31ff 	mov.w	r1, #4294967295
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	fa01 f303 	lsl.w	r3, r1, r3
 800409a:	43d9      	mvns	r1, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a0:	4313      	orrs	r3, r2
         );
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3724      	adds	r7, #36	; 0x24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040c0:	d301      	bcc.n	80040c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040c2:	2301      	movs	r3, #1
 80040c4:	e00f      	b.n	80040e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040c6:	4a0a      	ldr	r2, [pc, #40]	; (80040f0 <SysTick_Config+0x40>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ce:	210f      	movs	r1, #15
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295
 80040d4:	f7ff ff8e 	bl	8003ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d8:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <SysTick_Config+0x40>)
 80040da:	2200      	movs	r2, #0
 80040dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040de:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <SysTick_Config+0x40>)
 80040e0:	2207      	movs	r2, #7
 80040e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	e000e010 	.word	0xe000e010

080040f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f7ff fec9 	bl	8003e94 <__NVIC_SetPriorityGrouping>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b086      	sub	sp, #24
 800410e:	af00      	add	r7, sp, #0
 8004110:	4603      	mov	r3, r0
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004118:	f7ff fee0 	bl	8003edc <__NVIC_GetPriorityGrouping>
 800411c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	6978      	ldr	r0, [r7, #20]
 8004124:	f7ff ff90 	bl	8004048 <NVIC_EncodePriority>
 8004128:	4602      	mov	r2, r0
 800412a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff5f 	bl	8003ff4 <__NVIC_SetPriority>
}
 8004136:	bf00      	nop
 8004138:	3718      	adds	r7, #24
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	4603      	mov	r3, r0
 8004146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fed3 	bl	8003ef8 <__NVIC_EnableIRQ>
}
 8004152:	bf00      	nop
 8004154:	3708      	adds	r7, #8
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b082      	sub	sp, #8
 800415e:	af00      	add	r7, sp, #0
 8004160:	4603      	mov	r3, r0
 8004162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fee3 	bl	8003f34 <__NVIC_DisableIRQ>
}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff ff96 	bl	80040b0 <SysTick_Config>
 8004184:	4603      	mov	r3, r0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	4603      	mov	r3, r0
 8004196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff feed 	bl	8003f7c <__NVIC_SetPendingIRQ>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	4603      	mov	r3, r0
 80041b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80041b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fefd 	bl	8003fb8 <__NVIC_ClearPendingIRQ>
}
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e08e      	b.n	80042f8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	4b47      	ldr	r3, [pc, #284]	; (8004300 <HAL_DMA_Init+0x138>)
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d80f      	bhi.n	8004206 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	4b45      	ldr	r3, [pc, #276]	; (8004304 <HAL_DMA_Init+0x13c>)
 80041ee:	4413      	add	r3, r2
 80041f0:	4a45      	ldr	r2, [pc, #276]	; (8004308 <HAL_DMA_Init+0x140>)
 80041f2:	fba2 2303 	umull	r2, r3, r2, r3
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	009a      	lsls	r2, r3, #2
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a42      	ldr	r2, [pc, #264]	; (800430c <HAL_DMA_Init+0x144>)
 8004202:	641a      	str	r2, [r3, #64]	; 0x40
 8004204:	e00e      	b.n	8004224 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	4b40      	ldr	r3, [pc, #256]	; (8004310 <HAL_DMA_Init+0x148>)
 800420e:	4413      	add	r3, r2
 8004210:	4a3d      	ldr	r2, [pc, #244]	; (8004308 <HAL_DMA_Init+0x140>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	091b      	lsrs	r3, r3, #4
 8004218:	009a      	lsls	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a3c      	ldr	r2, [pc, #240]	; (8004314 <HAL_DMA_Init+0x14c>)
 8004222:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2202      	movs	r2, #2
 8004228:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800423a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fa74 	bl	8004764 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004284:	d102      	bne.n	800428c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004298:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d010      	beq.n	80042ce <HAL_DMA_Init+0x106>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d80c      	bhi.n	80042ce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 fa93 	bl	80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042ca:	605a      	str	r2, [r3, #4]
 80042cc:	e008      	b.n	80042e0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40020407 	.word	0x40020407
 8004304:	bffdfff8 	.word	0xbffdfff8
 8004308:	cccccccd 	.word	0xcccccccd
 800430c:	40020000 	.word	0x40020000
 8004310:	bffdfbf8 	.word	0xbffdfbf8
 8004314:	40020400 	.word	0x40020400

08004318 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
 8004324:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_DMA_Start_IT+0x20>
 8004334:	2302      	movs	r3, #2
 8004336:	e066      	b.n	8004406 <HAL_DMA_Start_IT+0xee>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d155      	bne.n	80043f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0201 	bic.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	68b9      	ldr	r1, [r7, #8]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f9b9 	bl	80046e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	2b00      	cmp	r3, #0
 800437c:	d008      	beq.n	8004390 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 020e 	orr.w	r2, r2, #14
 800438c:	601a      	str	r2, [r3, #0]
 800438e:	e00f      	b.n	80043b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0204 	bic.w	r2, r2, #4
 800439e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 020a 	orr.w	r2, r2, #10
 80043ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d007      	beq.n	80043e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e005      	b.n	8004404 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004400:	2302      	movs	r3, #2
 8004402:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004404:	7dfb      	ldrb	r3, [r7, #23]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e04f      	b.n	80044c0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d008      	beq.n	800443e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e040      	b.n	80044c0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f022 020e 	bic.w	r2, r2, #14
 800444c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800445c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	f003 021c 	and.w	r2, r3, #28
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	2101      	movs	r1, #1
 800447c:	fa01 f202 	lsl.w	r2, r1, r2
 8004480:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800448a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00c      	beq.n	80044ae <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80044ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d005      	beq.n	80044f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2204      	movs	r2, #4
 80044e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
 80044ee:	e047      	b.n	8004580 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 020e 	bic.w	r2, r2, #14
 80044fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0201 	bic.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800451e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f003 021c 	and.w	r2, r3, #28
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2101      	movs	r1, #1
 800452e:	fa01 f202 	lsl.w	r2, r1, r2
 8004532:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800453c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004550:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004554:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800455e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004574:	2b00      	cmp	r3, #0
 8004576:	d003      	beq.n	8004580 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	4798      	blx	r3
    }
  }
  return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f003 031c 	and.w	r3, r3, #28
 80045aa:	2204      	movs	r2, #4
 80045ac:	409a      	lsls	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d026      	beq.n	8004604 <HAL_DMA_IRQHandler+0x7a>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d021      	beq.n	8004604 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d107      	bne.n	80045de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0204 	bic.w	r2, r2, #4
 80045dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e2:	f003 021c 	and.w	r2, r3, #28
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	2104      	movs	r1, #4
 80045ec:	fa01 f202 	lsl.w	r2, r1, r2
 80045f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d071      	beq.n	80046de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004602:	e06c      	b.n	80046de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	f003 031c 	and.w	r3, r3, #28
 800460c:	2202      	movs	r2, #2
 800460e:	409a      	lsls	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02e      	beq.n	8004676 <HAL_DMA_IRQHandler+0xec>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d029      	beq.n	8004676 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 020a 	bic.w	r2, r2, #10
 800463e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	f003 021c 	and.w	r2, r3, #28
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2102      	movs	r1, #2
 8004656:	fa01 f202 	lsl.w	r2, r1, r2
 800465a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	2b00      	cmp	r3, #0
 800466a:	d038      	beq.n	80046de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004674:	e033      	b.n	80046de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467a:	f003 031c 	and.w	r3, r3, #28
 800467e:	2208      	movs	r2, #8
 8004680:	409a      	lsls	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4013      	ands	r3, r2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d02a      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x156>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 0308 	and.w	r3, r3, #8
 8004690:	2b00      	cmp	r3, #0
 8004692:	d025      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 020e 	bic.w	r2, r2, #14
 80046a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a8:	f003 021c 	and.w	r2, r3, #28
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	2101      	movs	r1, #1
 80046b2:	fa01 f202 	lsl.w	r2, r1, r2
 80046b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
}
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	2b00      	cmp	r3, #0
 8004706:	d004      	beq.n	8004712 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004710:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004716:	f003 021c 	and.w	r2, r3, #28
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	2101      	movs	r1, #1
 8004720:	fa01 f202 	lsl.w	r2, r1, r2
 8004724:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b10      	cmp	r3, #16
 8004734:	d108      	bne.n	8004748 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004746:	e007      	b.n	8004758 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	60da      	str	r2, [r3, #12]
}
 8004758:	bf00      	nop
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004774:	429a      	cmp	r2, r3
 8004776:	d80a      	bhi.n	800478e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477c:	089b      	lsrs	r3, r3, #2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004784:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6493      	str	r3, [r2, #72]	; 0x48
 800478c:	e007      	b.n	800479e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	009a      	lsls	r2, r3, #2
 8004796:	4b0f      	ldr	r3, [pc, #60]	; (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004798:	4413      	add	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3b08      	subs	r3, #8
 80047a6:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a0a      	ldr	r2, [pc, #40]	; (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80047b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2201      	movs	r2, #1
 80047be:	409a      	lsls	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40020407 	.word	0x40020407
 80047d4:	4002081c 	.word	0x4002081c
 80047d8:	cccccccd 	.word	0xcccccccd
 80047dc:	40020880 	.word	0x40020880

080047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4b0b      	ldr	r3, [pc, #44]	; (8004824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	461a      	mov	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a09      	ldr	r2, [pc, #36]	; (8004828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004804:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3b01      	subs	r3, #1
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2201      	movs	r2, #1
 8004810:	409a      	lsls	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	1000823f 	.word	0x1000823f
 8004828:	40020940 	.word	0x40020940

0800482c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d12b      	bne.n	800489a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_DMAEx_ConfigMuxSync+0x24>
 800484c:	2302      	movs	r3, #2
 800484e:	e025      	b.n	800489c <HAL_DMAEx_ConfigMuxSync+0x70>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004860:	4013      	ands	r3, r2
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	6811      	ldr	r1, [r2, #0]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	3a01      	subs	r2, #1
 800486c:	04d2      	lsls	r2, r2, #19
 800486e:	4311      	orrs	r1, r2
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	6852      	ldr	r2, [r2, #4]
 8004874:	4311      	orrs	r1, r2
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	7a12      	ldrb	r2, [r2, #8]
 800487a:	0412      	lsls	r2, r2, #16
 800487c:	4311      	orrs	r1, r2
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	7a52      	ldrb	r2, [r2, #9]
 8004882:	0252      	lsls	r2, r2, #9
 8004884:	4311      	orrs	r1, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800488a:	430b      	orrs	r3, r1
 800488c:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000fdff 	.word	0xe000fdff

080048ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048b6:	2300      	movs	r3, #0
 80048b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048ba:	e14c      	b.n	8004b56 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	fa01 f303 	lsl.w	r3, r1, r3
 80048c8:	4013      	ands	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 813e 	beq.w	8004b50 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d00b      	beq.n	80048f4 <HAL_GPIO_Init+0x48>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d007      	beq.n	80048f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048e8:	2b11      	cmp	r3, #17
 80048ea:	d003      	beq.n	80048f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b12      	cmp	r3, #18
 80048f2:	d130      	bne.n	8004956 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	fa02 f303 	lsl.w	r3, r2, r3
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4313      	orrs	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800492a:	2201      	movs	r2, #1
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4013      	ands	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	091b      	lsrs	r3, r3, #4
 8004940:	f003 0201 	and.w	r2, r3, #1
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	2203      	movs	r2, #3
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	43db      	mvns	r3, r3
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4013      	ands	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	693a      	ldr	r2, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2b02      	cmp	r3, #2
 800498c:	d003      	beq.n	8004996 <HAL_GPIO_Init+0xea>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b12      	cmp	r3, #18
 8004994:	d123      	bne.n	80049de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	08da      	lsrs	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3208      	adds	r2, #8
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	220f      	movs	r2, #15
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	43db      	mvns	r3, r3
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	08da      	lsrs	r2, r3, #3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3208      	adds	r2, #8
 80049d8:	6939      	ldr	r1, [r7, #16]
 80049da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	2203      	movs	r2, #3
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	43db      	mvns	r3, r3
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 0203 	and.w	r2, r3, #3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fa02 f303 	lsl.w	r3, r2, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8098 	beq.w	8004b50 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004a20:	4a54      	ldr	r2, [pc, #336]	; (8004b74 <HAL_GPIO_Init+0x2c8>)
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	089b      	lsrs	r3, r3, #2
 8004a26:	3302      	adds	r3, #2
 8004a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0303 	and.w	r3, r3, #3
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	220f      	movs	r2, #15
 8004a38:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4013      	ands	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004a4a:	d019      	beq.n	8004a80 <HAL_GPIO_Init+0x1d4>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a4a      	ldr	r2, [pc, #296]	; (8004b78 <HAL_GPIO_Init+0x2cc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_GPIO_Init+0x1d0>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a49      	ldr	r2, [pc, #292]	; (8004b7c <HAL_GPIO_Init+0x2d0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00d      	beq.n	8004a78 <HAL_GPIO_Init+0x1cc>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a48      	ldr	r2, [pc, #288]	; (8004b80 <HAL_GPIO_Init+0x2d4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <HAL_GPIO_Init+0x1c8>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a47      	ldr	r2, [pc, #284]	; (8004b84 <HAL_GPIO_Init+0x2d8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_GPIO_Init+0x1c4>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	e008      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a70:	2307      	movs	r3, #7
 8004a72:	e006      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a74:	2303      	movs	r3, #3
 8004a76:	e004      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e002      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <HAL_GPIO_Init+0x1d6>
 8004a80:	2300      	movs	r3, #0
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	f002 0203 	and.w	r2, r2, #3
 8004a88:	0092      	lsls	r2, r2, #2
 8004a8a:	4093      	lsls	r3, r2
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a92:	4938      	ldr	r1, [pc, #224]	; (8004b74 <HAL_GPIO_Init+0x2c8>)
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	089b      	lsrs	r3, r3, #2
 8004a98:	3302      	adds	r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004aa0:	4b39      	ldr	r3, [pc, #228]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	43db      	mvns	r3, r3
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ac6:	4a30      	ldr	r2, [pc, #192]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004ace:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	43db      	mvns	r3, r3
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4013      	ands	r3, r2
 8004ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004af4:	4a24      	ldr	r2, [pc, #144]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004afc:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	43db      	mvns	r3, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b20:	4a19      	ldr	r2, [pc, #100]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b26:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4013      	ands	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <HAL_GPIO_Init+0x2dc>)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	3301      	adds	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f47f aeab 	bne.w	80048bc <HAL_GPIO_Init+0x10>
  }
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40010000 	.word	0x40010000
 8004b78:	48000400 	.word	0x48000400
 8004b7c:	48000800 	.word	0x48000800
 8004b80:	48000c00 	.word	0x48000c00
 8004b84:	48001000 	.word	0x48001000
 8004b88:	58000800 	.word	0x58000800

08004b8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b9c:	787b      	ldrb	r3, [r7, #1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ba2:	887a      	ldrh	r2, [r7, #2]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ba8:	e002      	b.n	8004bb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004baa:	887a      	ldrh	r2, [r7, #2]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d006      	beq.n	8004be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004bd2:	4a05      	ldr	r2, [pc, #20]	; (8004be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004bd4:	88fb      	ldrh	r3, [r7, #6]
 8004bd6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004bd8:	88fb      	ldrh	r3, [r7, #6]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fb fed1 	bl	8000982 <HAL_GPIO_EXTI_Callback>
  }
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	58000800 	.word	0x58000800

08004bec <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004bf2:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <HAL_HSEM_IRQHandler+0x30>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004bf8:	4b08      	ldr	r3, [pc, #32]	; (8004c1c <HAL_HSEM_IRQHandler+0x30>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	4906      	ldr	r1, [pc, #24]	; (8004c1c <HAL_HSEM_IRQHandler+0x30>)
 8004c02:	4013      	ands	r3, r2
 8004c04:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004c06:	4a05      	ldr	r2, [pc, #20]	; (8004c1c <HAL_HSEM_IRQHandler+0x30>)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f807 	bl	8004c20 <HAL_HSEM_FreeCallback>
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	58001500 	.word	0x58001500

08004c20 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d01e      	beq.n	8004c84 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_IPCC_Init+0x60>)
 8004c48:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd fbe0 	bl	800241c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004c5c:	68b8      	ldr	r0, [r7, #8]
 8004c5e:	f000 f85b 	bl	8004d18 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f82c 	bl	8004ccc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004c82:	e001      	b.n	8004c88 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	58000c00 	.word	0x58000c00

08004c98 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e00f      	b.n	8004cfa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	4a0b      	ldr	r2, [pc, #44]	; (8004d10 <IPCC_SetDefaultCallbacks+0x44>)
 8004ce4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3306      	adds	r3, #6
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	4a08      	ldr	r2, [pc, #32]	; (8004d14 <IPCC_SetDefaultCallbacks+0x48>)
 8004cf2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b05      	cmp	r3, #5
 8004cfe:	d9ec      	bls.n	8004cda <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	08004c99 	.word	0x08004c99
 8004d14:	08004cb3 	.word	0x08004cb3

08004d18 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004d2c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	223f      	movs	r2, #63	; 0x3f
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_EXTI_EnableIT_0_31>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004d48:	4b06      	ldr	r3, [pc, #24]	; (8004d64 <LL_EXTI_EnableIT_0_31+0x24>)
 8004d4a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d4e:	4905      	ldr	r1, [pc, #20]	; (8004d64 <LL_EXTI_EnableIT_0_31+0x24>)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	58000800 	.word	0x58000800

08004d68 <LL_EXTI_DisableIT_0_31>:
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <LL_EXTI_DisableIT_0_31+0x28>)
 8004d72:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	4905      	ldr	r1, [pc, #20]	; (8004d90 <LL_EXTI_DisableIT_0_31+0x28>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	58000800 	.word	0x58000800

08004d94 <LL_C2_EXTI_DisableIT_0_31>:
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8004d9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	4905      	ldr	r1, [pc, #20]	; (8004dbc <LL_C2_EXTI_DisableIT_0_31+0x28>)
 8004da8:	4013      	ands	r3, r2
 8004daa:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	58000800 	.word	0x58000800

08004dc0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4904      	ldr	r1, [pc, #16]	; (8004de0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	600b      	str	r3, [r1, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	58000800 	.word	0x58000800

08004de4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	4904      	ldr	r1, [pc, #16]	; (8004e08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]

}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	58000800 	.word	0x58000800

08004e0c <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	4904      	ldr	r1, [pc, #16]	; (8004e2c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	58000800 	.word	0x58000800

08004e30 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	4904      	ldr	r1, [pc, #16]	; (8004e54 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	604b      	str	r3, [r1, #4]
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	58000800 	.word	0x58000800

08004e58 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e66:	6013      	str	r3, [r2, #0]
}
 8004e68:	bf00      	nop
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop
 8004e74:	58000400 	.word	0x58000400

08004e78 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8004e80:	4b1d      	ldr	r3, [pc, #116]	; (8004ef8 <HAL_PWR_ConfigPVD+0x80>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f023 020e 	bic.w	r2, r3, #14
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	491a      	ldr	r1, [pc, #104]	; (8004ef8 <HAL_PWR_ConfigPVD+0x80>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB serie, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 8004e92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004e96:	f7ff ff67 	bl	8004d68 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 8004e9a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004e9e:	f7ff ff79 	bl	8004d94 <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004ea2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ea6:	f7ff ffc3 	bl	8004e30 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8004eaa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004eae:	f7ff ff99 	bl	8004de4 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004ebe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ec2:	f7ff ff3d 	bl	8004d40 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004ed2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ed6:	f7ff ff73 	bl	8004dc0 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004ee6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004eea:	f7ff ff8f 	bl	8004e0c <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	58000400 	.word	0x58000400

08004efc <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004f00:	4b05      	ldr	r3, [pc, #20]	; (8004f18 <HAL_PWR_EnablePVD+0x1c>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	4a04      	ldr	r2, [pc, #16]	; (8004f18 <HAL_PWR_EnablePVD+0x1c>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6053      	str	r3, [r2, #4]
}
 8004f0c:	bf00      	nop
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	58000400 	.word	0x58000400

08004f1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f20:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	58000400 	.word	0x58000400

08004f38 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4a:	d101      	bne.n	8004f50 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_RCC_HSE_Enable>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6e:	6013      	str	r3, [r2, #0]
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <LL_RCC_HSE_Disable>:
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <LL_RCC_HSE_IsReady>:
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004faa:	d101      	bne.n	8004fb0 <LL_RCC_HSE_IsReady+0x18>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <LL_RCC_HSE_IsReady+0x1a>
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <LL_RCC_HSI_Enable>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fce:	6013      	str	r3, [r2, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <LL_RCC_HSI_Disable>:
{
 8004fda:	b480      	push	{r7}
 8004fdc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fec:	6013      	str	r3, [r2, #0]
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_RCC_HSI_IsReady>:
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800500a:	d101      	bne.n	8005010 <LL_RCC_HSI_IsReady+0x18>
 800500c:	2301      	movs	r3, #1
 800500e:	e000      	b.n	8005012 <LL_RCC_HSI_IsReady+0x1a>
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <LL_RCC_HSI_SetCalibTrimming>:
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	061b      	lsls	r3, r3, #24
 8005032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005036:	4313      	orrs	r3, r2
 8005038:	604b      	str	r3, [r1, #4]
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <LL_RCC_HSI48_Enable>:
{
 8005046:	b480      	push	{r7}
 8005048:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800504a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005056:	f043 0301 	orr.w	r3, r3, #1
 800505a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800505e:	bf00      	nop
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <LL_RCC_HSI48_Disable>:
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800506c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <LL_RCC_HSI48_IsReady>:
{
 800508a:	b480      	push	{r7}
 800508c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800508e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005092:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b02      	cmp	r3, #2
 800509c:	d101      	bne.n	80050a2 <LL_RCC_HSI48_IsReady+0x18>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <LL_RCC_HSI48_IsReady+0x1a>
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <LL_RCC_LSE_Enable>:
{
 80050ae:	b480      	push	{r7}
 80050b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050be:	f043 0301 	orr.w	r3, r3, #1
 80050c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80050c6:	bf00      	nop
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <LL_RCC_LSE_Disable>:
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80050e8:	bf00      	nop
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <LL_RCC_LSE_EnableBypass>:
{
 80050f2:	b480      	push	{r7}
 80050f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005102:	f043 0304 	orr.w	r3, r3, #4
 8005106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800510a:	bf00      	nop
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_RCC_LSE_DisableBypass>:
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005124:	f023 0304 	bic.w	r3, r3, #4
 8005128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <LL_RCC_LSE_IsReady>:
{
 8005136:	b480      	push	{r7}
 8005138:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800513e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b02      	cmp	r3, #2
 8005148:	d101      	bne.n	800514e <LL_RCC_LSE_IsReady+0x18>
 800514a:	2301      	movs	r3, #1
 800514c:	e000      	b.n	8005150 <LL_RCC_LSE_IsReady+0x1a>
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_RCC_LSI1_Enable>:
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <LL_RCC_LSI1_Disable>:
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005194:	bf00      	nop
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <LL_RCC_LSI1_IsReady>:
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80051a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d101      	bne.n	80051b6 <LL_RCC_LSI1_IsReady+0x18>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <LL_RCC_LSI1_IsReady+0x1a>
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_LSI2_Enable>:
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051d2:	f043 0304 	orr.w	r3, r3, #4
 80051d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051da:	bf00      	nop
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <LL_RCC_LSI2_Disable>:
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80051e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f4:	f023 0304 	bic.w	r3, r3, #4
 80051f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_RCC_LSI2_IsReady>:
{
 8005206:	b480      	push	{r7}
 8005208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800520a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b08      	cmp	r3, #8
 8005218:	d101      	bne.n	800521e <LL_RCC_LSI2_IsReady+0x18>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <LL_RCC_LSI2_IsReady+0x1a>
 800521e:	2300      	movs	r3, #0
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <LL_RCC_LSI2_SetTrimming>:
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800523a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <LL_RCC_MSI_Enable>:
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	6013      	str	r3, [r2, #0]
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <LL_RCC_MSI_Disable>:
{
 8005276:	b480      	push	{r7}
 8005278:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005284:	f023 0301 	bic.w	r3, r3, #1
 8005288:	6013      	str	r3, [r2, #0]
}
 800528a:	bf00      	nop
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <LL_RCC_MSI_IsReady>:
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0302 	and.w	r3, r3, #2
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d101      	bne.n	80052aa <LL_RCC_MSI_IsReady+0x16>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <LL_RCC_MSI_IsReady+0x18>
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LL_RCC_MSI_SetRange>:
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80052be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	600b      	str	r3, [r1, #0]
}
 80052d2:	bf00      	nop
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <LL_RCC_MSI_GetRange>:
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80052e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ee:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2bb0      	cmp	r3, #176	; 0xb0
 80052f4:	d901      	bls.n	80052fa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80052f6:	23b0      	movs	r3, #176	; 0xb0
 80052f8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80052fa:	687b      	ldr	r3, [r7, #4]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	021b      	lsls	r3, r3, #8
 800531e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005322:	4313      	orrs	r3, r2
 8005324:	604b      	str	r3, [r1, #4]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <LL_RCC_SetSysClkSource>:
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800533a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 0203 	bic.w	r2, r3, #3
 8005344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <LL_RCC_GetSysClkSource>:
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <LL_RCC_SetAHBPrescaler>:
{
 8005372:	b480      	push	{r7}
 8005374:	b083      	sub	sp, #12
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800537a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4313      	orrs	r3, r2
 800538c:	608b      	str	r3, [r1, #8]
}
 800538e:	bf00      	nop
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <LL_C2_RCC_SetAHBPrescaler>:
{
 800539a:	b480      	push	{r7}
 800539c:	b083      	sub	sp, #12
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80053a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_SetAHB4Prescaler>:
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80053ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053d6:	f023 020f 	bic.w	r2, r3, #15
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	091b      	lsrs	r3, r3, #4
 80053de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <LL_RCC_SetAPB1Prescaler>:
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4313      	orrs	r3, r2
 800540e:	608b      	str	r3, [r1, #8]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <LL_RCC_SetAPB2Prescaler>:
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800542e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4313      	orrs	r3, r2
 8005436:	608b      	str	r3, [r1, #8]
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <LL_RCC_GetAHBPrescaler>:
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005452:	4618      	mov	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <LL_RCC_GetAHB4Prescaler>:
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005464:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005468:	011b      	lsls	r3, r3, #4
 800546a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800546e:	4618      	mov	r0, r3
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <LL_RCC_GetAPB1Prescaler>:
{
 8005478:	b480      	push	{r7}
 800547a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800547c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005486:	4618      	mov	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <LL_RCC_GetAPB2Prescaler>:
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800549e:	4618      	mov	r0, r3
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <LL_RCC_PLL_Enable>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80054ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054ba:	6013      	str	r3, [r2, #0]
}
 80054bc:	bf00      	nop
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <LL_RCC_PLL_Disable>:
{
 80054c6:	b480      	push	{r7}
 80054c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80054ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054d8:	6013      	str	r3, [r2, #0]
}
 80054da:	bf00      	nop
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <LL_RCC_PLL_IsReady>:
{
 80054e4:	b480      	push	{r7}
 80054e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80054e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054f6:	d101      	bne.n	80054fc <LL_RCC_PLL_IsReady+0x18>
 80054f8:	2301      	movs	r3, #1
 80054fa:	e000      	b.n	80054fe <LL_RCC_PLL_IsReady+0x1a>
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <LL_RCC_PLL_GetN>:
{
 8005508:	b480      	push	{r7}
 800550a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800550c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	0a1b      	lsrs	r3, r3, #8
 8005514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005518:	4618      	mov	r0, r3
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <LL_RCC_PLL_GetR>:
{
 8005522:	b480      	push	{r7}
 8005524:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005530:	4618      	mov	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <LL_RCC_PLL_GetDivider>:
{
 800553a:	b480      	push	{r7}
 800553c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800553e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005548:	4618      	mov	r0, r3
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <LL_RCC_PLL_GetMainSource>:
{
 8005552:	b480      	push	{r7}
 8005554:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0303 	and.w	r3, r3, #3
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_RCC_IsActiveFlag_HPRE>:
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800556e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800557c:	d101      	bne.n	8005582 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800558e:	b480      	push	{r7}
 8005590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005596:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a2:	d101      	bne.n	80055a8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e000      	b.n	80055aa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80055c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	d101      	bne.n	80055ce <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <LL_RCC_IsActiveFlag_PPRE1>:
{
 80055da:	b480      	push	{r7}
 80055dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80055de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ec:	d101      	bne.n	80055f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <LL_RCC_IsActiveFlag_PPRE2>:
{
 80055fe:	b480      	push	{r7}
 8005600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005610:	d101      	bne.n	8005616 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005624:	b590      	push	{r4, r7, lr}
 8005626:	b08d      	sub	sp, #52	; 0x34
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e37e      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0320 	and.w	r3, r3, #32
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8092 	beq.w	8005768 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005644:	f7ff fe89 	bl	800535a <LL_RCC_GetSysClkSource>
 8005648:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800564a:	f7ff ff82 	bl	8005552 <LL_RCC_PLL_GetMainSource>
 800564e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_RCC_OscConfig+0x3e>
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2b0c      	cmp	r3, #12
 800565a:	d14c      	bne.n	80056f6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	2b01      	cmp	r3, #1
 8005660:	d149      	bne.n	80056f6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005662:	f7ff fe17 	bl	8005294 <LL_RCC_MSI_IsReady>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_OscConfig+0x54>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e35d      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800567c:	f7ff fe2f 	bl	80052de <LL_RCC_MSI_GetRange>
 8005680:	4603      	mov	r3, r0
 8005682:	429c      	cmp	r4, r3
 8005684:	d914      	bls.n	80056b0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fd42 	bl	8006114 <RCC_SetFlashLatencyFromMSIRange>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e34c      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fe09 	bl	80052b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fe2d 	bl	8005308 <LL_RCC_MSI_SetCalibTrimming>
 80056ae:	e013      	b.n	80056d8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff fdfe 	bl	80052b6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fe22 	bl	8005308 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fd23 	bl	8006114 <RCC_SetFlashLatencyFromMSIRange>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e32d      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80056d8:	f000 fcdc 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80056dc:	4603      	mov	r3, r0
 80056de:	4ab3      	ldr	r2, [pc, #716]	; (80059ac <HAL_RCC_OscConfig+0x388>)
 80056e0:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056e2:	4bb3      	ldr	r3, [pc, #716]	; (80059b0 <HAL_RCC_OscConfig+0x38c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fb56 	bl	8003d98 <HAL_InitTick>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d039      	beq.n	8005766 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e31e      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d01e      	beq.n	800573c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80056fe:	f7ff fdab 	bl	8005258 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005702:	f7fe fb97 	bl	8003e34 <HAL_GetTick>
 8005706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800570a:	f7fe fb93 	bl	8003e34 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e30b      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 800571c:	f7ff fdba 	bl	8005294 <LL_RCC_MSI_IsReady>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f1      	beq.n	800570a <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff fdc3 	bl	80052b6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fde7 	bl	8005308 <LL_RCC_MSI_SetCalibTrimming>
 800573a:	e015      	b.n	8005768 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800573c:	f7ff fd9b 	bl	8005276 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005740:	f7fe fb78 	bl	8003e34 <HAL_GetTick>
 8005744:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005748:	f7fe fb74 	bl	8003e34 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e2ec      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 800575a:	f7ff fd9b 	bl	8005294 <LL_RCC_MSI_IsReady>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f1      	bne.n	8005748 <HAL_RCC_OscConfig+0x124>
 8005764:	e000      	b.n	8005768 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005766:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d04e      	beq.n	8005812 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005774:	f7ff fdf1 	bl	800535a <LL_RCC_GetSysClkSource>
 8005778:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800577a:	f7ff feea 	bl	8005552 <LL_RCC_PLL_GetMainSource>
 800577e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005780:	6a3b      	ldr	r3, [r7, #32]
 8005782:	2b08      	cmp	r3, #8
 8005784:	d005      	beq.n	8005792 <HAL_RCC_OscConfig+0x16e>
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	2b0c      	cmp	r3, #12
 800578a:	d10d      	bne.n	80057a8 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	2b03      	cmp	r3, #3
 8005790:	d10a      	bne.n	80057a8 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005792:	f7ff fc01 	bl	8004f98 <LL_RCC_HSE_IsReady>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d039      	beq.n	8005810 <HAL_RCC_OscConfig+0x1ec>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d135      	bne.n	8005810 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e2c5      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d102      	bne.n	80057b8 <HAL_RCC_OscConfig+0x194>
 80057b2:	f7ff fbd3 	bl	8004f5c <LL_RCC_HSE_Enable>
 80057b6:	e001      	b.n	80057bc <HAL_RCC_OscConfig+0x198>
 80057b8:	f7ff fbdf 	bl	8004f7a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d012      	beq.n	80057ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fe fb36 	bl	8003e34 <HAL_GetTick>
 80057c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fe fb32 	bl	8003e34 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	; 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e2aa      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 80057de:	f7ff fbdb 	bl	8004f98 <LL_RCC_HSE_IsReady>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0f1      	beq.n	80057cc <HAL_RCC_OscConfig+0x1a8>
 80057e8:	e013      	b.n	8005812 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ea:	f7fe fb23 	bl	8003e34 <HAL_GetTick>
 80057ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80057f0:	e008      	b.n	8005804 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f2:	f7fe fb1f 	bl	8003e34 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b64      	cmp	r3, #100	; 0x64
 80057fe:	d901      	bls.n	8005804 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e297      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005804:	f7ff fbc8 	bl	8004f98 <LL_RCC_HSE_IsReady>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f1      	bne.n	80057f2 <HAL_RCC_OscConfig+0x1ce>
 800580e:	e000      	b.n	8005812 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d051      	beq.n	80058c2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800581e:	f7ff fd9c 	bl	800535a <LL_RCC_GetSysClkSource>
 8005822:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005824:	f7ff fe95 	bl	8005552 <LL_RCC_PLL_GetMainSource>
 8005828:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b04      	cmp	r3, #4
 800582e:	d005      	beq.n	800583c <HAL_RCC_OscConfig+0x218>
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d113      	bne.n	800585e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2b02      	cmp	r3, #2
 800583a:	d110      	bne.n	800585e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800583c:	f7ff fbdc 	bl	8004ff8 <LL_RCC_HSI_IsReady>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <HAL_RCC_OscConfig+0x22e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e270      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fbe0 	bl	800501c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800585c:	e031      	b.n	80058c2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d019      	beq.n	800589a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005866:	f7ff fba9 	bl	8004fbc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fe fae3 	bl	8003e34 <HAL_GetTick>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005872:	f7fe fadf 	bl	8003e34 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e257      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005884:	f7ff fbb8 	bl	8004ff8 <LL_RCC_HSI_IsReady>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f1      	beq.n	8005872 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff fbc2 	bl	800501c <LL_RCC_HSI_SetCalibTrimming>
 8005898:	e013      	b.n	80058c2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800589a:	f7ff fb9e 	bl	8004fda <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7fe fac9 	bl	8003e34 <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a6:	f7fe fac5 	bl	8003e34 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e23d      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80058b8:	f7ff fb9e 	bl	8004ff8 <LL_RCC_HSI_IsReady>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f1      	bne.n	80058a6 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0308 	and.w	r3, r3, #8
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 80a3 	beq.w	8005a22 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d076      	beq.n	80059d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0310 	and.w	r3, r3, #16
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d046      	beq.n	800597e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80058f0:	f7ff fc55 	bl	800519e <LL_RCC_LSI1_IsReady>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d113      	bne.n	8005922 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80058fa:	f7ff fc2e 	bl	800515a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058fe:	f7fe fa99 	bl	8003e34 <HAL_GetTick>
 8005902:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005906:	f7fe fa95 	bl	8003e34 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e20d      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005918:	f7ff fc41 	bl	800519e <LL_RCC_LSI1_IsReady>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0f1      	beq.n	8005906 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005922:	f7ff fc4e 	bl	80051c2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005926:	f7fe fa85 	bl	8003e34 <HAL_GetTick>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800592c:	e008      	b.n	8005940 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800592e:	f7fe fa81 	bl	8003e34 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b03      	cmp	r3, #3
 800593a:	d901      	bls.n	8005940 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e1f9      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005940:	f7ff fc61 	bl	8005206 <LL_RCC_LSI2_IsReady>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f1      	beq.n	800592e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	4618      	mov	r0, r3
 8005950:	f7ff fc6b 	bl	800522a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005954:	f7ff fc12 	bl	800517c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fe fa6c 	bl	8003e34 <HAL_GetTick>
 800595c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005960:	f7fe fa68 	bl	8003e34 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e1e0      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005972:	f7ff fc14 	bl	800519e <LL_RCC_LSI1_IsReady>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f1      	bne.n	8005960 <HAL_RCC_OscConfig+0x33c>
 800597c:	e051      	b.n	8005a22 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800597e:	f7ff fbec 	bl	800515a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005982:	f7fe fa57 	bl	8003e34 <HAL_GetTick>
 8005986:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800598a:	f7fe fa53 	bl	8003e34 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e1cb      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800599c:	f7ff fbff 	bl	800519e <LL_RCC_LSI1_IsReady>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d0f1      	beq.n	800598a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80059a6:	f7ff fc1d 	bl	80051e4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80059aa:	e00c      	b.n	80059c6 <HAL_RCC_OscConfig+0x3a2>
 80059ac:	20000034 	.word	0x20000034
 80059b0:	20000038 	.word	0x20000038
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80059b4:	f7fe fa3e 	bl	8003e34 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d901      	bls.n	80059c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e1b6      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80059c6:	f7ff fc1e 	bl	8005206 <LL_RCC_LSI2_IsReady>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1f1      	bne.n	80059b4 <HAL_RCC_OscConfig+0x390>
 80059d0:	e027      	b.n	8005a22 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80059d2:	f7ff fc07 	bl	80051e4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d6:	f7fe fa2d 	bl	8003e34 <HAL_GetTick>
 80059da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80059de:	f7fe fa29 	bl	8003e34 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b03      	cmp	r3, #3
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e1a1      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80059f0:	f7ff fc09 	bl	8005206 <LL_RCC_LSI2_IsReady>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f1      	bne.n	80059de <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80059fa:	f7ff fbbf 	bl	800517c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fe:	f7fe fa19 	bl	8003e34 <HAL_GetTick>
 8005a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005a06:	f7fe fa15 	bl	8003e34 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e18d      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005a18:	f7ff fbc1 	bl	800519e <LL_RCC_LSI1_IsReady>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f1      	bne.n	8005a06 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0304 	and.w	r3, r3, #4
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d05b      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a2e:	4bb5      	ldr	r3, [pc, #724]	; (8005d04 <HAL_RCC_OscConfig+0x6e0>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d114      	bne.n	8005a64 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a3a:	f7ff fa0d 	bl	8004e58 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3e:	f7fe f9f9 	bl	8003e34 <HAL_GetTick>
 8005a42:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a46:	f7fe f9f5 	bl	8003e34 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e16d      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a58:	4baa      	ldr	r3, [pc, #680]	; (8005d04 <HAL_RCC_OscConfig+0x6e0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d102      	bne.n	8005a72 <HAL_RCC_OscConfig+0x44e>
 8005a6c:	f7ff fb1f 	bl	80050ae <LL_RCC_LSE_Enable>
 8005a70:	e00c      	b.n	8005a8c <HAL_RCC_OscConfig+0x468>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d104      	bne.n	8005a84 <HAL_RCC_OscConfig+0x460>
 8005a7a:	f7ff fb3a 	bl	80050f2 <LL_RCC_LSE_EnableBypass>
 8005a7e:	f7ff fb16 	bl	80050ae <LL_RCC_LSE_Enable>
 8005a82:	e003      	b.n	8005a8c <HAL_RCC_OscConfig+0x468>
 8005a84:	f7ff fb24 	bl	80050d0 <LL_RCC_LSE_Disable>
 8005a88:	f7ff fb44 	bl	8005114 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d014      	beq.n	8005abe <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a94:	f7fe f9ce 	bl	8003e34 <HAL_GetTick>
 8005a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005a9a:	e00a      	b.n	8005ab2 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9c:	f7fe f9ca 	bl	8003e34 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e140      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ab2:	f7ff fb40 	bl	8005136 <LL_RCC_LSE_IsReady>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0ef      	beq.n	8005a9c <HAL_RCC_OscConfig+0x478>
 8005abc:	e013      	b.n	8005ae6 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005abe:	f7fe f9b9 	bl	8003e34 <HAL_GetTick>
 8005ac2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005ac4:	e00a      	b.n	8005adc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f7fe f9b5 	bl	8003e34 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e12b      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005adc:	f7ff fb2b 	bl	8005136 <LL_RCC_LSE_IsReady>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1ef      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d02c      	beq.n	8005b4c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d014      	beq.n	8005b24 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005afa:	f7ff faa4 	bl	8005046 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afe:	f7fe f999 	bl	8003e34 <HAL_GetTick>
 8005b02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b06:	f7fe f995 	bl	8003e34 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e10d      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005b18:	f7ff fab7 	bl	800508a <LL_RCC_HSI48_IsReady>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0f1      	beq.n	8005b06 <HAL_RCC_OscConfig+0x4e2>
 8005b22:	e013      	b.n	8005b4c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b24:	f7ff faa0 	bl	8005068 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fe f984 	bl	8003e34 <HAL_GetTick>
 8005b2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b30:	f7fe f980 	bl	8003e34 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e0f8      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005b42:	f7ff faa2 	bl	800508a <LL_RCC_HSI48_IsReady>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1f1      	bne.n	8005b30 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80ee 	beq.w	8005d32 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b56:	f7ff fc00 	bl	800535a <LL_RCC_GetSysClkSource>
 8005b5a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	f040 80af 	bne.w	8005ccc <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f003 0203 	and.w	r2, r3, #3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d123      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d11c      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d114      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d10d      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d106      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d05d      	beq.n	8005c80 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	2b0c      	cmp	r3, #12
 8005bc8:	d058      	beq.n	8005c7c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0ab      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005bdc:	f7ff fc73 	bl	80054c6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005be0:	f7fe f928 	bl	8003e34 <HAL_GetTick>
 8005be4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be8:	f7fe f924 	bl	8003e34 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e09c      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1ef      	bne.n	8005be8 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	4b3e      	ldr	r3, [pc, #248]	; (8005d08 <HAL_RCC_OscConfig+0x6e4>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c1a:	4311      	orrs	r1, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c20:	0212      	lsls	r2, r2, #8
 8005c22:	4311      	orrs	r1, r2
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c28:	4311      	orrs	r1, r2
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c2e:	4311      	orrs	r1, r2
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005c34:	430a      	orrs	r2, r1
 8005c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005c3e:	f7ff fc33 	bl	80054a8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c50:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c52:	f7fe f8ef 	bl	8003e34 <HAL_GetTick>
 8005c56:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c58:	e008      	b.n	8005c6c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c5a:	f7fe f8eb 	bl	8003e34 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d901      	bls.n	8005c6c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	e063      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0ef      	beq.n	8005c5a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c7a:	e05a      	b.n	8005d32 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e059      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d151      	bne.n	8005d32 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c8e:	f7ff fc0b 	bl	80054a8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ca2:	f7fe f8c7 	bl	8003e34 <HAL_GetTick>
 8005ca6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005caa:	f7fe f8c3 	bl	8003e34 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e03b      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d0ef      	beq.n	8005caa <HAL_RCC_OscConfig+0x686>
 8005cca:	e032      	b.n	8005d32 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2b0c      	cmp	r3, #12
 8005cd0:	d02d      	beq.n	8005d2e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	f7ff fbf8 	bl	80054c6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005cd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ce0:	f023 0303 	bic.w	r3, r3, #3
 8005ce4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8005ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cf0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005cf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cf8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cfa:	f7fe f89b 	bl	8003e34 <HAL_GetTick>
 8005cfe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d00:	e00d      	b.n	8005d1e <HAL_RCC_OscConfig+0x6fa>
 8005d02:	bf00      	nop
 8005d04:	58000400 	.word	0x58000400
 8005d08:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0c:	f7fe f892 	bl	8003e34 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00a      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1ef      	bne.n	8005d0c <HAL_RCC_OscConfig+0x6e8>
 8005d2c:	e001      	b.n	8005d32 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3734      	adds	r7, #52	; 0x34
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd90      	pop	{r4, r7, pc}

08005d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e12d      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d50:	4b98      	ldr	r3, [pc, #608]	; (8005fb4 <HAL_RCC_ClockConfig+0x278>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d91b      	bls.n	8005d96 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5e:	4b95      	ldr	r3, [pc, #596]	; (8005fb4 <HAL_RCC_ClockConfig+0x278>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f023 0207 	bic.w	r2, r3, #7
 8005d66:	4993      	ldr	r1, [pc, #588]	; (8005fb4 <HAL_RCC_ClockConfig+0x278>)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d6e:	f7fe f861 	bl	8003e34 <HAL_GetTick>
 8005d72:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d74:	e008      	b.n	8005d88 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d76:	f7fe f85d 	bl	8003e34 <HAL_GetTick>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d901      	bls.n	8005d88 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e111      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d88:	4b8a      	ldr	r3, [pc, #552]	; (8005fb4 <HAL_RCC_ClockConfig+0x278>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d1ef      	bne.n	8005d76 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d016      	beq.n	8005dd0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fae3 	bl	8005372 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dac:	f7fe f842 	bl	8003e34 <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005db4:	f7fe f83e 	bl	8003e34 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e0f2      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dc6:	f7ff fbd0 	bl	800556a <LL_RCC_IsActiveFlag_HPRE>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0f1      	beq.n	8005db4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0320 	and.w	r3, r3, #32
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d016      	beq.n	8005e0a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7ff fada 	bl	800539a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005de6:	f7fe f825 	bl	8003e34 <HAL_GetTick>
 8005dea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005dec:	e008      	b.n	8005e00 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005dee:	f7fe f821 	bl	8003e34 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e0d5      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e00:	f7ff fbc5 	bl	800558e <LL_RCC_IsActiveFlag_C2HPRE>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0f1      	beq.n	8005dee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d016      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fad3 	bl	80053c6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e20:	f7fe f808 	bl	8003e34 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e28:	f7fe f804 	bl	8003e34 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e0b8      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e3a:	f7ff fbbb 	bl	80055b4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f1      	beq.n	8005e28 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d016      	beq.n	8005e7e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff facd 	bl	80053f4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e5a:	f7fd ffeb 	bl	8003e34 <HAL_GetTick>
 8005e5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e62:	f7fd ffe7 	bl	8003e34 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e09b      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e74:	f7ff fbb1 	bl	80055da <LL_RCC_IsActiveFlag_PPRE1>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f1      	beq.n	8005e62 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0308 	and.w	r3, r3, #8
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d017      	beq.n	8005eba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fac3 	bl	800541c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e96:	f7fd ffcd 	bl	8003e34 <HAL_GetTick>
 8005e9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e9e:	f7fd ffc9 	bl	8003e34 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e07d      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005eb0:	f7ff fba5 	bl	80055fe <LL_RCC_IsActiveFlag_PPRE2>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0f1      	beq.n	8005e9e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d043      	beq.n	8005f4e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d106      	bne.n	8005edc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005ece:	f7ff f863 	bl	8004f98 <LL_RCC_HSE_IsReady>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d11e      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e067      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b03      	cmp	r3, #3
 8005ee2:	d106      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005ee4:	f7ff fafe 	bl	80054e4 <LL_RCC_PLL_IsReady>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d113      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e05c      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005efa:	f7ff f9cb 	bl	8005294 <LL_RCC_MSI_IsReady>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d108      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e051      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f08:	f7ff f876 	bl	8004ff8 <LL_RCC_HSI_IsReady>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e04a      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fa09 	bl	8005332 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f20:	f7fd ff88 	bl	8003e34 <HAL_GetTick>
 8005f24:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f26:	e00a      	b.n	8005f3e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f28:	f7fd ff84 	bl	8003e34 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d901      	bls.n	8005f3e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005f3a:	2303      	movs	r3, #3
 8005f3c:	e036      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f3e:	f7ff fa0c 	bl	800535a <LL_RCC_GetSysClkSource>
 8005f42:	4602      	mov	r2, r0
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d1ec      	bne.n	8005f28 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f4e:	4b19      	ldr	r3, [pc, #100]	; (8005fb4 <HAL_RCC_ClockConfig+0x278>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d21b      	bcs.n	8005f94 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f5c:	4b15      	ldr	r3, [pc, #84]	; (8005fb4 <HAL_RCC_ClockConfig+0x278>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f023 0207 	bic.w	r2, r3, #7
 8005f64:	4913      	ldr	r1, [pc, #76]	; (8005fb4 <HAL_RCC_ClockConfig+0x278>)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f6c:	f7fd ff62 	bl	8003e34 <HAL_GetTick>
 8005f70:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f74:	f7fd ff5e 	bl	8003e34 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e012      	b.n	8005fac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_ClockConfig+0x278>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d1ef      	bne.n	8005f74 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f94:	f000 f87e 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	4a07      	ldr	r2, [pc, #28]	; (8005fb8 <HAL_RCC_ClockConfig+0x27c>)
 8005f9c:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005f9e:	f7fd ff55 	bl	8003e4c <HAL_GetTickPrio>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fd fef7 	bl	8003d98 <HAL_InitTick>
 8005faa:	4603      	mov	r3, r0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	58004000 	.word	0x58004000
 8005fb8:	20000034 	.word	0x20000034

08005fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fbc:	b590      	push	{r4, r7, lr}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc2:	f7ff f9ca 	bl	800535a <LL_RCC_GetSysClkSource>
 8005fc6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005fce:	f7ff f986 	bl	80052de <LL_RCC_MSI_GetRange>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	091b      	lsrs	r3, r3, #4
 8005fd6:	f003 030f 	and.w	r3, r3, #15
 8005fda:	4a2b      	ldr	r2, [pc, #172]	; (8006088 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e04b      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d102      	bne.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fea:	4b28      	ldr	r3, [pc, #160]	; (800608c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	e045      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d10a      	bne.n	800600c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005ff6:	f7fe ff9f 	bl	8004f38 <LL_RCC_HSE_IsEnabledDiv2>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d102      	bne.n	8006006 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006000:	4b22      	ldr	r3, [pc, #136]	; (800608c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e03a      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006006:	4b22      	ldr	r3, [pc, #136]	; (8006090 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	e037      	b.n	800607c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800600c:	f7ff faa1 	bl	8005552 <LL_RCC_PLL_GetMainSource>
 8006010:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b02      	cmp	r3, #2
 8006016:	d003      	beq.n	8006020 <HAL_RCC_GetSysClockFreq+0x64>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	2b03      	cmp	r3, #3
 800601c:	d003      	beq.n	8006026 <HAL_RCC_GetSysClockFreq+0x6a>
 800601e:	e00d      	b.n	800603c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006022:	60bb      	str	r3, [r7, #8]
        break;
 8006024:	e015      	b.n	8006052 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006026:	f7fe ff87 	bl	8004f38 <LL_RCC_HSE_IsEnabledDiv2>
 800602a:	4603      	mov	r3, r0
 800602c:	2b01      	cmp	r3, #1
 800602e:	d102      	bne.n	8006036 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006030:	4b16      	ldr	r3, [pc, #88]	; (800608c <HAL_RCC_GetSysClockFreq+0xd0>)
 8006032:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006034:	e00d      	b.n	8006052 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006036:	4b16      	ldr	r3, [pc, #88]	; (8006090 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006038:	60bb      	str	r3, [r7, #8]
        break;
 800603a:	e00a      	b.n	8006052 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800603c:	f7ff f94f 	bl	80052de <LL_RCC_MSI_GetRange>
 8006040:	4603      	mov	r3, r0
 8006042:	091b      	lsrs	r3, r3, #4
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <HAL_RCC_GetSysClockFreq+0xcc>)
 800604a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604e:	60bb      	str	r3, [r7, #8]
        break;
 8006050:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8006052:	f7ff fa59 	bl	8005508 <LL_RCC_PLL_GetN>
 8006056:	4602      	mov	r2, r0
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	fb03 f402 	mul.w	r4, r3, r2
 800605e:	f7ff fa6c 	bl	800553a <LL_RCC_PLL_GetDivider>
 8006062:	4603      	mov	r3, r0
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	3301      	adds	r3, #1
 8006068:	fbb4 f4f3 	udiv	r4, r4, r3
 800606c:	f7ff fa59 	bl	8005522 <LL_RCC_PLL_GetR>
 8006070:	4603      	mov	r3, r0
 8006072:	0f5b      	lsrs	r3, r3, #29
 8006074:	3301      	adds	r3, #1
 8006076:	fbb4 f3f3 	udiv	r3, r4, r3
 800607a:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800607c:	68fb      	ldr	r3, [r7, #12]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}
 8006086:	bf00      	nop
 8006088:	0800cf64 	.word	0x0800cf64
 800608c:	00f42400 	.word	0x00f42400
 8006090:	01e84800 	.word	0x01e84800

08006094 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b598      	push	{r3, r4, r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006098:	f7ff ff90 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 800609c:	4604      	mov	r4, r0
 800609e:	f7ff f9d1 	bl	8005444 <LL_RCC_GetAHBPrescaler>
 80060a2:	4603      	mov	r3, r0
 80060a4:	091b      	lsrs	r3, r3, #4
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	4a03      	ldr	r2, [pc, #12]	; (80060b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80060ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	bd98      	pop	{r3, r4, r7, pc}
 80060b8:	0800cf04 	.word	0x0800cf04

080060bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060bc:	b598      	push	{r3, r4, r7, lr}
 80060be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80060c0:	f7ff ffe8 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060c4:	4604      	mov	r4, r0
 80060c6:	f7ff f9d7 	bl	8005478 <LL_RCC_GetAPB1Prescaler>
 80060ca:	4603      	mov	r3, r0
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	4a04      	ldr	r2, [pc, #16]	; (80060e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80060d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	bd98      	pop	{r3, r4, r7, pc}
 80060e4:	0800cf44 	.word	0x0800cf44

080060e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060e8:	b598      	push	{r3, r4, r7, lr}
 80060ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80060ec:	f7ff ffd2 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060f0:	4604      	mov	r4, r0
 80060f2:	f7ff f9cd 	bl	8005490 <LL_RCC_GetAPB2Prescaler>
 80060f6:	4603      	mov	r3, r0
 80060f8:	0adb      	lsrs	r3, r3, #11
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	4a04      	ldr	r2, [pc, #16]	; (8006110 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006104:	f003 031f 	and.w	r3, r3, #31
 8006108:	fa24 f303 	lsr.w	r3, r4, r3
}
 800610c:	4618      	mov	r0, r3
 800610e:	bd98      	pop	{r3, r4, r7, pc}
 8006110:	0800cf44 	.word	0x0800cf44

08006114 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006114:	b590      	push	{r4, r7, lr}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2bb0      	cmp	r3, #176	; 0xb0
 8006120:	d903      	bls.n	800612a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006122:	4b15      	ldr	r3, [pc, #84]	; (8006178 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e007      	b.n	800613a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	4a11      	ldr	r2, [pc, #68]	; (8006178 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006138:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800613a:	f7ff f98f 	bl	800545c <LL_RCC_GetAHB4Prescaler>
 800613e:	4603      	mov	r3, r0
 8006140:	091b      	lsrs	r3, r3, #4
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	4a0d      	ldr	r2, [pc, #52]	; (800617c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006152:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4a0a      	ldr	r2, [pc, #40]	; (8006180 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	0c9c      	lsrs	r4, r3, #18
 800615e:	f7fe fedd 	bl	8004f1c <HAL_PWREx_GetVoltageRange>
 8006162:	4603      	mov	r3, r0
 8006164:	4619      	mov	r1, r3
 8006166:	4620      	mov	r0, r4
 8006168:	f000 f80c 	bl	8006184 <RCC_SetFlashLatency>
 800616c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	bd90      	pop	{r4, r7, pc}
 8006176:	bf00      	nop
 8006178:	0800cf64 	.word	0x0800cf64
 800617c:	0800cf04 	.word	0x0800cf04
 8006180:	431bde83 	.word	0x431bde83

08006184 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b093      	sub	sp, #76	; 0x4c
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800618e:	4b39      	ldr	r3, [pc, #228]	; (8006274 <RCC_SetFlashLatency+0xf0>)
 8006190:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006194:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800619a:	4a37      	ldr	r2, [pc, #220]	; (8006278 <RCC_SetFlashLatency+0xf4>)
 800619c:	f107 031c 	add.w	r3, r7, #28
 80061a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80061a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80061a6:	4b35      	ldr	r3, [pc, #212]	; (800627c <RCC_SetFlashLatency+0xf8>)
 80061a8:	f107 040c 	add.w	r4, r7, #12
 80061ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80061ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80061b2:	2300      	movs	r3, #0
 80061b4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061bc:	d11c      	bne.n	80061f8 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80061be:	2300      	movs	r3, #0
 80061c0:	643b      	str	r3, [r7, #64]	; 0x40
 80061c2:	e015      	b.n	80061f0 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80061c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061cc:	4413      	add	r3, r2
 80061ce:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d808      	bhi.n	80061ea <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80061d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061e0:	4413      	add	r3, r2
 80061e2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80061e6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80061e8:	e022      	b.n	8006230 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80061ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ec:	3301      	adds	r3, #1
 80061ee:	643b      	str	r3, [r7, #64]	; 0x40
 80061f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d9e6      	bls.n	80061c4 <RCC_SetFlashLatency+0x40>
 80061f6:	e01b      	b.n	8006230 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80061f8:	2300      	movs	r3, #0
 80061fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fc:	e015      	b.n	800622a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80061fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006206:	4413      	add	r3, r2
 8006208:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	429a      	cmp	r2, r3
 8006210:	d808      	bhi.n	8006224 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800621a:	4413      	add	r3, r2
 800621c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006220:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006222:	e005      	b.n	8006230 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006226:	3301      	adds	r3, #1
 8006228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	2b02      	cmp	r3, #2
 800622e:	d9e6      	bls.n	80061fe <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8006230:	4b13      	ldr	r3, [pc, #76]	; (8006280 <RCC_SetFlashLatency+0xfc>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f023 0207 	bic.w	r2, r3, #7
 8006238:	4911      	ldr	r1, [pc, #68]	; (8006280 <RCC_SetFlashLatency+0xfc>)
 800623a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006240:	f7fd fdf8 	bl	8003e34 <HAL_GetTick>
 8006244:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006246:	e008      	b.n	800625a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006248:	f7fd fdf4 	bl	8003e34 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e007      	b.n	800626a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800625a:	4b09      	ldr	r3, [pc, #36]	; (8006280 <RCC_SetFlashLatency+0xfc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006264:	429a      	cmp	r2, r3
 8006266:	d1ef      	bne.n	8006248 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	374c      	adds	r7, #76	; 0x4c
 800626e:	46bd      	mov	sp, r7
 8006270:	bd90      	pop	{r4, r7, pc}
 8006272:	bf00      	nop
 8006274:	0800cd5c 	.word	0x0800cd5c
 8006278:	0800cd6c 	.word	0x0800cd6c
 800627c:	0800cd78 	.word	0x0800cd78
 8006280:	58004000 	.word	0x58004000

08006284 <LL_RCC_LSE_IsEnabled>:
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <LL_RCC_LSE_IsEnabled+0x18>
 8006298:	2301      	movs	r3, #1
 800629a:	e000      	b.n	800629e <LL_RCC_LSE_IsEnabled+0x1a>
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <LL_RCC_LSE_IsReady>:
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80062ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b4:	f003 0302 	and.w	r3, r3, #2
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d101      	bne.n	80062c0 <LL_RCC_LSE_IsReady+0x18>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <LL_RCC_LSE_IsReady+0x1a>
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <LL_RCC_SetRFWKPClockSource>:
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80062d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <LL_RCC_SetSMPSClockSource>:
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f023 0203 	bic.w	r2, r3, #3
 800630a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4313      	orrs	r3, r2
 8006312:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_RCC_SetSMPSPrescaler>:
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4313      	orrs	r3, r2
 800633a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <LL_RCC_SetUSARTClockSource>:
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f023 0203 	bic.w	r2, r3, #3
 800635c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <LL_RCC_SetLPUARTClockSource>:
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800637c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006384:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006388:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4313      	orrs	r3, r2
 8006390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <LL_RCC_SetI2CClockSource>:
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80063a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	091b      	lsrs	r3, r3, #4
 80063b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80063b8:	43db      	mvns	r3, r3
 80063ba:	401a      	ands	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80063c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80063ce:	bf00      	nop
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <LL_RCC_SetLPTIMClockSource>:
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80063e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	43db      	mvns	r3, r3
 80063f2:	401a      	ands	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	041b      	lsls	r3, r3, #16
 80063f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006402:	bf00      	nop
 8006404:	370c      	adds	r7, #12
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr

0800640e <LL_RCC_SetSAIClockSource>:
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4313      	orrs	r3, r2
 800642a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <LL_RCC_SetRNGClockSource>:
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800644e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <LL_RCC_SetCLK48ClockSource>:
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800646e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006476:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800647a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4313      	orrs	r3, r2
 8006482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <LL_RCC_SetUSBClockSource>:
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b082      	sub	sp, #8
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ffe3 	bl	8006466 <LL_RCC_SetCLK48ClockSource>
}
 80064a0:	bf00      	nop
 80064a2:	3708      	adds	r7, #8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <LL_RCC_SetADCClockSource>:
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80064b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <LL_RCC_SetRTCClockSource>:
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80064dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80064f4:	bf00      	nop
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <LL_RCC_GetRTCClockSource>:
{
 8006500:	b480      	push	{r7}
 8006502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800650c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006510:	4618      	mov	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <LL_RCC_ForceBackupDomainReset>:
{
 800651a:	b480      	push	{r7}
 800651c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800651e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006526:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800652a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800652e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006532:	bf00      	nop
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <LL_RCC_ReleaseBackupDomainReset>:
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800654c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006554:	bf00      	nop
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <LL_RCC_PLLSAI1_Enable>:
{
 800655e:	b480      	push	{r7}
 8006560:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800656c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006570:	6013      	str	r3, [r2, #0]
}
 8006572:	bf00      	nop
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <LL_RCC_PLLSAI1_Disable>:
{
 800657c:	b480      	push	{r7}
 800657e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800658a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800658e:	6013      	str	r3, [r2, #0]
}
 8006590:	bf00      	nop
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr

0800659a <LL_RCC_PLLSAI1_IsReady>:
{
 800659a:	b480      	push	{r7}
 800659c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065ac:	d101      	bne.n	80065b2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80065ae:	2301      	movs	r3, #1
 80065b0:	e000      	b.n	80065b4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b088      	sub	sp, #32
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80065c6:	2300      	movs	r3, #0
 80065c8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80065ca:	2300      	movs	r3, #0
 80065cc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d034      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065e2:	d021      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80065e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065e8:	d81b      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065ee:	d01d      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80065f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065f4:	d815      	bhi.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00b      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80065fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065fe:	d110      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800660a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800660e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006610:	e00d      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3304      	adds	r3, #4
 8006616:	4618      	mov	r0, r3
 8006618:	f000 f947 	bl	80068aa <RCCEx_PLLSAI1_ConfigNP>
 800661c:	4603      	mov	r3, r0
 800661e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006620:	e005      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	77fb      	strb	r3, [r7, #31]
        break;
 8006626:	e002      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006628:	bf00      	nop
 800662a:	e000      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800662c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800662e:	7ffb      	ldrb	r3, [r7, #31]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d105      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fee8 	bl	800640e <LL_RCC_SetSAIClockSource>
 800663e:	e001      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	7ffb      	ldrb	r3, [r7, #31]
 8006642:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800664c:	2b00      	cmp	r3, #0
 800664e:	d046      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006650:	f7ff ff56 	bl	8006500 <LL_RCC_GetRTCClockSource>
 8006654:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	429a      	cmp	r2, r3
 800665e:	d03c      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006660:	f7fe fbfa 	bl	8004e58 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d105      	bne.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff ff30 	bl	80064d4 <LL_RCC_SetRTCClockSource>
 8006674:	e02e      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800667e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006680:	f7ff ff4b 	bl	800651a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006684:	f7ff ff5a 	bl	800653c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80066a0:	f7ff fdf0 	bl	8006284 <LL_RCC_LSE_IsEnabled>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d114      	bne.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80066aa:	f7fd fbc3 	bl	8003e34 <HAL_GetTick>
 80066ae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80066b0:	e00b      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066b2:	f7fd fbbf 	bl	8003e34 <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d902      	bls.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	77fb      	strb	r3, [r7, #31]
              break;
 80066c8:	e004      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80066ca:	f7ff fded 	bl	80062a8 <LL_RCC_LSE_IsReady>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d1ee      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80066d4:	7ffb      	ldrb	r3, [r7, #31]
 80066d6:	77bb      	strb	r3, [r7, #30]
 80066d8:	e001      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	7ffb      	ldrb	r3, [r7, #31]
 80066dc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fe2a 	bl	8006348 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	69db      	ldr	r3, [r3, #28]
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fe35 	bl	8006374 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	d004      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fe5d 	bl	80063da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0320 	and.w	r3, r3, #32
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fe52 	bl	80063da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	4618      	mov	r0, r3
 8006748:	f7ff fe2a 	bl	80063a0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0308 	and.w	r3, r3, #8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fe1f 	bl	80063a0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d022      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff fe8d 	bl	8006492 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006780:	d107      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800678c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006790:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006796:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800679a:	d10b      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3304      	adds	r3, #4
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f8dd 	bl	8006960 <RCCEx_PLLSAI1_ConfigNQ>
 80067a6:	4603      	mov	r3, r0
 80067a8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80067aa:	7ffb      	ldrb	r3, [r7, #31]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80067b0:	7ffb      	ldrb	r3, [r7, #31]
 80067b2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d02b      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067c8:	d008      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d2:	d003      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d105      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fe2a 	bl	800643a <LL_RCC_SetRNGClockSource>
 80067e6:	e00a      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x240>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	2000      	movs	r0, #0
 80067f4:	f7ff fe21 	bl	800643a <LL_RCC_SetRNGClockSource>
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7ff fe34 	bl	8006466 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006802:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006806:	d107      	bne.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006816:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006820:	2b00      	cmp	r3, #0
 8006822:	d022      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff fe3d 	bl	80064a8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006836:	d107      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006842:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006846:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006850:	d10b      	bne.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3304      	adds	r3, #4
 8006856:	4618      	mov	r0, r3
 8006858:	f000 f8dd 	bl	8006a16 <RCCEx_PLLSAI1_ConfigNR>
 800685c:	4603      	mov	r3, r0
 800685e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8006860:	7ffb      	ldrb	r3, [r7, #31]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d001      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8006866:	7ffb      	ldrb	r3, [r7, #31]
 8006868:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d004      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687a:	4618      	mov	r0, r3
 800687c:	f7ff fd26 	bl	80062cc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fd45 	bl	8006320 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff fd2c 	bl	80062f8 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80068a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3720      	adds	r7, #32
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80068b6:	f7ff fe61 	bl	800657c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068ba:	f7fd fabb 	bl	8003e34 <HAL_GetTick>
 80068be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068c0:	e009      	b.n	80068d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068c2:	f7fd fab7 	bl	8003e34 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b02      	cmp	r3, #2
 80068ce:	d902      	bls.n	80068d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	73fb      	strb	r3, [r7, #15]
      break;
 80068d4:	e004      	b.n	80068e0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80068d6:	f7ff fe60 	bl	800659a <LL_RCC_PLLSAI1_IsReady>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1f0      	bne.n	80068c2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80068e0:	7bfb      	ldrb	r3, [r7, #15]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d137      	bne.n	8006956 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80068e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068fa:	4313      	orrs	r3, r2
 80068fc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80068fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006910:	4313      	orrs	r3, r2
 8006912:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006914:	f7ff fe23 	bl	800655e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006918:	f7fd fa8c 	bl	8003e34 <HAL_GetTick>
 800691c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800691e:	e009      	b.n	8006934 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006920:	f7fd fa88 	bl	8003e34 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d902      	bls.n	8006934 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	73fb      	strb	r3, [r7, #15]
        break;
 8006932:	e004      	b.n	800693e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006934:	f7ff fe31 	bl	800659a <LL_RCC_PLLSAI1_IsReady>
 8006938:	4603      	mov	r3, r0
 800693a:	2b01      	cmp	r3, #1
 800693c:	d1f0      	bne.n	8006920 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800693e:	7bfb      	ldrb	r3, [r7, #15]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d108      	bne.n	8006956 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006952:	4313      	orrs	r3, r2
 8006954:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800696c:	f7ff fe06 	bl	800657c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006970:	f7fd fa60 	bl	8003e34 <HAL_GetTick>
 8006974:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006976:	e009      	b.n	800698c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006978:	f7fd fa5c 	bl	8003e34 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d902      	bls.n	800698c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	73fb      	strb	r3, [r7, #15]
      break;
 800698a:	e004      	b.n	8006996 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800698c:	f7ff fe05 	bl	800659a <LL_RCC_PLLSAI1_IsReady>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f0      	bne.n	8006978 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d137      	bne.n	8006a0c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800699c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	021b      	lsls	r3, r3, #8
 80069ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069b0:	4313      	orrs	r3, r2
 80069b2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80069b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069c6:	4313      	orrs	r3, r2
 80069c8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80069ca:	f7ff fdc8 	bl	800655e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ce:	f7fd fa31 	bl	8003e34 <HAL_GetTick>
 80069d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069d4:	e009      	b.n	80069ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069d6:	f7fd fa2d 	bl	8003e34 <HAL_GetTick>
 80069da:	4602      	mov	r2, r0
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d902      	bls.n	80069ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	73fb      	strb	r3, [r7, #15]
        break;
 80069e8:	e004      	b.n	80069f4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80069ea:	f7ff fdd6 	bl	800659a <LL_RCC_PLLSAI1_IsReady>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d1f0      	bne.n	80069d6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d108      	bne.n	8006a0c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80069fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006a22:	f7ff fdab 	bl	800657c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006a26:	f7fd fa05 	bl	8003e34 <HAL_GetTick>
 8006a2a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a2c:	e009      	b.n	8006a42 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a2e:	f7fd fa01 	bl	8003e34 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d902      	bls.n	8006a42 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a40:	e004      	b.n	8006a4c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006a42:	f7ff fdaa 	bl	800659a <LL_RCC_PLLSAI1_IsReady>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1f0      	bne.n	8006a2e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d137      	bne.n	8006ac2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	021b      	lsls	r3, r3, #8
 8006a62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a66:	4313      	orrs	r3, r2
 8006a68:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006a80:	f7ff fd6d 	bl	800655e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a84:	f7fd f9d6 	bl	8003e34 <HAL_GetTick>
 8006a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006a8a:	e009      	b.n	8006aa0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a8c:	f7fd f9d2 	bl	8003e34 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d902      	bls.n	8006aa0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8006a9e:	e004      	b.n	8006aaa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006aa0:	f7ff fd7b 	bl	800659a <LL_RCC_PLLSAI1_IsReady>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d1f0      	bne.n	8006a8c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d108      	bne.n	8006ac2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d101      	bne.n	8006ade <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e0b4      	b.n	8006c48 <HAL_RTC_Init+0x17c>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d12a      	bne.n	8006b40 <HAL_RTC_Init+0x74>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2020 	strb.w	r2, [r3, #32]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a56      	ldr	r2, [pc, #344]	; (8006c50 <HAL_RTC_Init+0x184>)
 8006af6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a56      	ldr	r2, [pc, #344]	; (8006c54 <HAL_RTC_Init+0x188>)
 8006afc:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a55      	ldr	r2, [pc, #340]	; (8006c58 <HAL_RTC_Init+0x18c>)
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a55      	ldr	r2, [pc, #340]	; (8006c5c <HAL_RTC_Init+0x190>)
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER1_SUPPORT)
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a54      	ldr	r2, [pc, #336]	; (8006c60 <HAL_RTC_Init+0x194>)
 8006b0e:	635a      	str	r2, [r3, #52]	; 0x34
#endif
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a54      	ldr	r2, [pc, #336]	; (8006c64 <HAL_RTC_Init+0x198>)
 8006b14:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(RTC_TAMPER3_SUPPORT)
    hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamper3EventCallback     */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a53      	ldr	r2, [pc, #332]	; (8006c68 <HAL_RTC_Init+0x19c>)
 8006b1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

    if(hrtc->MspInitCallback == NULL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d102      	bne.n	8006b2a <HAL_RTC_Init+0x5e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a51      	ldr	r2, [pc, #324]	; (8006c6c <HAL_RTC_Init+0x1a0>)
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d102      	bne.n	8006b40 <HAL_RTC_Init+0x74>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a4c      	ldr	r2, [pc, #304]	; (8006c70 <HAL_RTC_Init+0x1a4>)
 8006b3e:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	22ca      	movs	r2, #202	; 0xca
 8006b4e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2253      	movs	r2, #83	; 0x53
 8006b56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa2d 	bl	8006fb8 <RTC_EnterInitMode>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d009      	beq.n	8006b78 <HAL_RTC_Init+0xac>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	22ff      	movs	r2, #255	; 0xff
 8006b6a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2204      	movs	r2, #4
 8006b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e067      	b.n	8006c48 <HAL_RTC_Init+0x17c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b8a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6899      	ldr	r1, [r3, #8]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	685a      	ldr	r2, [r3, #4]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	68d2      	ldr	r2, [r2, #12]
 8006bb2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	6919      	ldr	r1, [r3, #16]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	041a      	lsls	r2, r3, #16
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68da      	ldr	r2, [r3, #12]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bd6:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f022 0203 	bic.w	r2, r2, #3
 8006be6:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 0320 	and.w	r3, r3, #32
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d113      	bne.n	8006c36 <HAL_RTC_Init+0x16a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f9ac 	bl	8006f6c <HAL_RTC_WaitForSynchro>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00d      	beq.n	8006c36 <HAL_RTC_Init+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	22ff      	movs	r2, #255	; 0xff
 8006c20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2204      	movs	r2, #4
 8006c26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e008      	b.n	8006c48 <HAL_RTC_Init+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	22ff      	movs	r2, #255	; 0xff
 8006c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006c46:	2300      	movs	r3, #0
  }
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	08006f59 	.word	0x08006f59
 8006c54:	080072af 	.word	0x080072af
 8006c58:	0800704d 	.word	0x0800704d
 8006c5c:	080071d3 	.word	0x080071d3
 8006c60:	08007061 	.word	0x08007061
 8006c64:	08007075 	.word	0x08007075
 8006c68:	08007089 	.word	0x08007089
 8006c6c:	08002605 	.word	0x08002605
 8006c70:	08002645 	.word	0x08002645

08006c74 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b087      	sub	sp, #28
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d101      	bne.n	8006c8e <HAL_RTC_SetTime+0x1a>
 8006c8a:	2302      	movs	r3, #2
 8006c8c:	e0b2      	b.n	8006df4 <HAL_RTC_SetTime+0x180>
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d126      	bne.n	8006cf2 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 f9a5 	bl	800700c <RTC_ByteToBcd2>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	785b      	ldrb	r3, [r3, #1]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f99e 	bl	800700c <RTC_ByteToBcd2>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006cd4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	789b      	ldrb	r3, [r3, #2]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 f996 	bl	800700c <RTC_ByteToBcd2>
 8006ce0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006ce2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	78db      	ldrb	r3, [r3, #3]
 8006cea:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006cec:	4313      	orrs	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]
 8006cf0:	e018      	b.n	8006d24 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d102      	bne.n	8006d06 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006d12:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006d18:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	78db      	ldrb	r3, [r3, #3]
 8006d1e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	22ca      	movs	r2, #202	; 0xca
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2253      	movs	r2, #83	; 0x53
 8006d32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 f93f 	bl	8006fb8 <RTC_EnterInitMode>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00d      	beq.n	8006d5c <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	22ff      	movs	r2, #255	; 0xff
 8006d46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e04b      	b.n	8006df4 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d6a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6899      	ldr	r1, [r3, #8]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	68da      	ldr	r2, [r3, #12]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	430a      	orrs	r2, r1
 8006d92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006da2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d113      	bne.n	8006dda <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006db2:	68f8      	ldr	r0, [r7, #12]
 8006db4:	f000 f8da 	bl	8006f6c <HAL_RTC_WaitForSynchro>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00d      	beq.n	8006dda <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	22ff      	movs	r2, #255	; 0xff
 8006dc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e00c      	b.n	8006df4 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	22ff      	movs	r2, #255	; 0xff
 8006de0:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 8006df2:	2300      	movs	r3, #0
  }
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}

08006dfc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006dfc:	b590      	push	{r4, r7, lr}
 8006dfe:	b087      	sub	sp, #28
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d101      	bne.n	8006e16 <HAL_RTC_SetDate+0x1a>
 8006e12:	2302      	movs	r3, #2
 8006e14:	e09c      	b.n	8006f50 <HAL_RTC_SetDate+0x154>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10e      	bne.n	8006e4a <HAL_RTC_SetDate+0x4e>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d008      	beq.n	8006e4a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	f023 0310 	bic.w	r3, r3, #16
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	330a      	adds	r3, #10
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d11c      	bne.n	8006e8a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	78db      	ldrb	r3, [r3, #3]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 f8d9 	bl	800700c <RTC_ByteToBcd2>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	785b      	ldrb	r3, [r3, #1]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 f8d2 	bl	800700c <RTC_ByteToBcd2>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006e6c:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	789b      	ldrb	r3, [r3, #2]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f000 f8ca 	bl	800700c <RTC_ByteToBcd2>
 8006e78:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006e7a:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	e00e      	b.n	8006ea8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	78db      	ldrb	r3, [r3, #3]
 8006e8e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	785b      	ldrb	r3, [r3, #1]
 8006e94:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006e96:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006e9c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	22ca      	movs	r2, #202	; 0xca
 8006eae:	625a      	str	r2, [r3, #36]	; 0x24
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2253      	movs	r2, #83	; 0x53
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f87d 	bl	8006fb8 <RTC_EnterInitMode>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00d      	beq.n	8006ee0 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	22ff      	movs	r2, #255	; 0xff
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2204      	movs	r2, #4
 8006ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e037      	b.n	8006f50 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006eea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006eee:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0320 	and.w	r3, r3, #32
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d113      	bne.n	8006f36 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f82c 	bl	8006f6c <HAL_RTC_WaitForSynchro>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00d      	beq.n	8006f36 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	22ff      	movs	r2, #255	; 0xff
 8006f20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2204      	movs	r2, #4
 8006f26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e00c      	b.n	8006f50 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	22ff      	movs	r2, #255	; 0xff
 8006f3c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2201      	movs	r2, #1
 8006f42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
  }
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd90      	pop	{r4, r7, pc}

08006f58 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f82:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006f84:	f7fc ff56 	bl	8003e34 <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f8a:	e009      	b.n	8006fa0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006f8c:	f7fc ff52 	bl	8003e34 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e007      	b.n	8006fb0 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0ee      	beq.n	8006f8c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d119      	bne.n	8007002 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006fd8:	f7fc ff2c 	bl	8003e34 <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fde:	e009      	b.n	8006ff4 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8006fe0:	f7fc ff28 	bl	8003e34 <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fee:	d901      	bls.n	8006ff4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e007      	b.n	8007004 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0ee      	beq.n	8006fe0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800701e:	e005      	b.n	800702c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3301      	adds	r3, #1
 8007024:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007026:	7afb      	ldrb	r3, [r7, #11]
 8007028:	3b0a      	subs	r3, #10
 800702a:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	2b09      	cmp	r3, #9
 8007030:	d8f6      	bhi.n	8007020 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	b2da      	uxtb	r2, r3
 800703a:	7afb      	ldrb	r3, [r7, #11]
 800703c:	4313      	orrs	r3, r2
 800703e:	b2db      	uxtb	r3, r3
}
 8007040:	4618      	mov	r0, r3
 8007042:	3714      	adds	r7, #20
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e089      	b.n	80071ca <HAL_RTCEx_SetWakeUpTimer+0x12e>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2202      	movs	r2, #2
 80070c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	22ca      	movs	r2, #202	; 0xca
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2253      	movs	r2, #83	; 0x53
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d020      	beq.n	8007126 <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 80070e4:	f7fc fea6 	bl	8003e34 <HAL_GetTick>
 80070e8:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80070ea:	e015      	b.n	8007118 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80070ec:	f7fc fea2 	bl	8003e34 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070fa:	d90d      	bls.n	8007118 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	22ff      	movs	r2, #255	; 0xff
 8007102:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2203      	movs	r2, #3
 8007108:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e058      	b.n	80071ca <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1e2      	bne.n	80070ec <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007134:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8007136:	f7fc fe7d 	bl	8003e34 <HAL_GetTick>
 800713a:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800713c:	e015      	b.n	800716a <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800713e:	f7fc fe79 	bl	8003e34 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800714c:	d90d      	bls.n	800716a <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	22ff      	movs	r2, #255	; 0xff
 8007154:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2203      	movs	r2, #3
 800715a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	e02f      	b.n	80071ca <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0e2      	beq.n	800713e <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689a      	ldr	r2, [r3, #8]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0207 	bic.w	r2, r2, #7
 8007186:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6899      	ldr	r1, [r3, #8]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	430a      	orrs	r2, r1
 8007196:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	22ff      	movs	r2, #255	; 0xff
 80071b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b087      	sub	sp, #28
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3350      	adds	r3, #80	; 0x50
 80071f8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4413      	add	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	601a      	str	r2, [r3, #0]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8007216:	b480      	push	{r7}
 8007218:	b085      	sub	sp, #20
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
 800721e:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3350      	adds	r3, #80	; 0x50
 8007226:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007254:	2302      	movs	r3, #2
 8007256:	e024      	b.n	80072a2 <HAL_RTCEx_EnableBypassShadow+0x60>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	22ca      	movs	r2, #202	; 0xca
 800726e:	625a      	str	r2, [r3, #36]	; 0x24
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2253      	movs	r2, #83	; 0x53
 8007276:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0220 	orr.w	r2, r2, #32
 8007286:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	22ff      	movs	r2, #255	; 0xff
 800728e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80072b6:	bf00      	nop
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e095      	b.n	8007400 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d108      	bne.n	80072ee <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072e4:	d009      	beq.n	80072fa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	61da      	str	r2, [r3, #28]
 80072ec:	e005      	b.n	80072fa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007306:	b2db      	uxtb	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	d106      	bne.n	800731a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f7fb f9ab 	bl	8002670 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2202      	movs	r2, #2
 800731e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007330:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800733a:	d902      	bls.n	8007342 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e002      	b.n	8007348 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007346:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007350:	d007      	beq.n	8007362 <HAL_SPI_Init+0xa0>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800735a:	d002      	beq.n	8007362 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007390:	431a      	orrs	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073a4:	ea42 0103 	orr.w	r1, r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	430a      	orrs	r2, r1
 80073b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	0c1b      	lsrs	r3, r3, #16
 80073be:	f003 0204 	and.w	r2, r3, #4
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80073de:	ea42 0103 	orr.w	r1, r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <LL_RCC_GetUSARTClockSource>:
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007414:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4013      	ands	r3, r2
}
 800741c:	4618      	mov	r0, r3
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <LL_RCC_GetLPUARTClockSource>:
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007434:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4013      	ands	r3, r2
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e042      	b.n	80074e0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7fa fff9 	bl	8002464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2224      	movs	r2, #36	; 0x24
 8007476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fb00 	bl	8007a90 <UART_SetConfig>
 8007490:	4603      	mov	r3, r0
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e022      	b.n	80074e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 fcfa 	bl	8007e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f042 0201 	orr.w	r2, r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fd81 	bl	8007fe0 <UART_CheckIdleState>
 80074de:	4603      	mov	r3, r0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3708      	adds	r7, #8
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d168      	bne.n	80075d2 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <HAL_UART_Transmit_DMA+0x24>
 8007506:	88fb      	ldrh	r3, [r7, #6]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e061      	b.n	80075d4 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007516:	2b01      	cmp	r3, #1
 8007518:	d101      	bne.n	800751e <HAL_UART_Transmit_DMA+0x36>
 800751a:	2302      	movs	r3, #2
 800751c:	e05a      	b.n	80075d4 <HAL_UART_Transmit_DMA+0xec>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	88fa      	ldrh	r2, [r7, #6]
 8007530:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	88fa      	ldrh	r2, [r7, #6]
 8007538:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2221      	movs	r2, #33	; 0x21
 8007548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007550:	2b00      	cmp	r3, #0
 8007552:	d02c      	beq.n	80075ae <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007558:	4a20      	ldr	r2, [pc, #128]	; (80075dc <HAL_UART_Transmit_DMA+0xf4>)
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007560:	4a1f      	ldr	r2, [pc, #124]	; (80075e0 <HAL_UART_Transmit_DMA+0xf8>)
 8007562:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007568:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <HAL_UART_Transmit_DMA+0xfc>)
 800756a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007570:	2200      	movs	r2, #0
 8007572:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757c:	4619      	mov	r1, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3328      	adds	r3, #40	; 0x28
 8007584:	461a      	mov	r2, r3
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	f7fc fec6 	bl	8004318 <HAL_DMA_Start_IT>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00d      	beq.n	80075ae <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2210      	movs	r2, #16
 8007596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e012      	b.n	80075d4 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2240      	movs	r2, #64	; 0x40
 80075b4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075cc:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80075ce:	2300      	movs	r3, #0
 80075d0:	e000      	b.n	80075d4 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 80075d2:	2302      	movs	r3, #2
  }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	08008217 	.word	0x08008217
 80075e0:	0800826b 	.word	0x0800826b
 80075e4:	08008287 	.word	0x08008287

080075e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b088      	sub	sp, #32
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	f640 030f 	movw	r3, #2063	; 0x80f
 800760e:	4013      	ands	r3, r2
 8007610:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d118      	bne.n	800764a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d013      	beq.n	800764a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	f003 0320 	and.w	r3, r3, #32
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d009      	beq.n	800764a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 81fb 	beq.w	8007a36 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
      }
      return;
 8007648:	e1f5      	b.n	8007a36 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 80ef 	beq.w	8007830 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	4b73      	ldr	r3, [pc, #460]	; (8007824 <HAL_UART_IRQHandler+0x23c>)
 8007656:	4013      	ands	r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d105      	bne.n	8007668 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	4b72      	ldr	r3, [pc, #456]	; (8007828 <HAL_UART_IRQHandler+0x240>)
 8007660:	4013      	ands	r3, r2
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80e4 	beq.w	8007830 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	2b00      	cmp	r3, #0
 8007670:	d010      	beq.n	8007694 <HAL_UART_IRQHandler+0xac>
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00b      	beq.n	8007694 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2201      	movs	r2, #1
 8007682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768a:	f043 0201 	orr.w	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b00      	cmp	r3, #0
 800769c:	d010      	beq.n	80076c0 <HAL_UART_IRQHandler+0xd8>
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00b      	beq.n	80076c0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2202      	movs	r2, #2
 80076ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076b6:	f043 0204 	orr.w	r2, r3, #4
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d010      	beq.n	80076ec <HAL_UART_IRQHandler+0x104>
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00b      	beq.n	80076ec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2204      	movs	r2, #4
 80076da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e2:	f043 0202 	orr.w	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d015      	beq.n	8007722 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	4b48      	ldr	r3, [pc, #288]	; (8007824 <HAL_UART_IRQHandler+0x23c>)
 8007704:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00b      	beq.n	8007722 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2208      	movs	r2, #8
 8007710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007718:	f043 0208 	orr.w	r2, r3, #8
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007728:	2b00      	cmp	r3, #0
 800772a:	d011      	beq.n	8007750 <HAL_UART_IRQHandler+0x168>
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00c      	beq.n	8007750 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800773e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	f043 0220 	orr.w	r2, r3, #32
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 816f 	beq.w	8007a3a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800775c:	69fb      	ldr	r3, [r7, #28]
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d011      	beq.n	800778a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 0320 	and.w	r3, r3, #32
 800776c:	2b00      	cmp	r3, #0
 800776e:	d104      	bne.n	800777a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007790:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800779c:	2b40      	cmp	r3, #64	; 0x40
 800779e:	d004      	beq.n	80077aa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d031      	beq.n	800780e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fd01 	bl	80081b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d123      	bne.n	8007806 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d013      	beq.n	80077fe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077da:	4a14      	ldr	r2, [pc, #80]	; (800782c <HAL_UART_IRQHandler+0x244>)
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fc fe72 	bl	80044cc <HAL_DMA_Abort_IT>
 80077e8:	4603      	mov	r3, r0
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d017      	beq.n	800781e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80077f8:	4610      	mov	r0, r2
 80077fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077fc:	e00f      	b.n	800781e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f930 	bl	8007a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007804:	e00b      	b.n	800781e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f92c 	bl	8007a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780c:	e007      	b.n	800781e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f928 	bl	8007a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800781c:	e10d      	b.n	8007a3a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800781e:	bf00      	nop
    return;
 8007820:	e10b      	b.n	8007a3a <HAL_UART_IRQHandler+0x452>
 8007822:	bf00      	nop
 8007824:	10000001 	.word	0x10000001
 8007828:	04000120 	.word	0x04000120
 800782c:	08008307 	.word	0x08008307

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007834:	2b01      	cmp	r3, #1
 8007836:	f040 80ab 	bne.w	8007990 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	f003 0310 	and.w	r3, r3, #16
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80a5 	beq.w	8007990 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	f003 0310 	and.w	r3, r3, #16
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 809f 	beq.w	8007990 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2210      	movs	r2, #16
 8007858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007864:	2b40      	cmp	r3, #64	; 0x40
 8007866:	d155      	bne.n	8007914 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8007872:	893b      	ldrh	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f000 80e2 	beq.w	8007a3e <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007880:	893a      	ldrh	r2, [r7, #8]
 8007882:	429a      	cmp	r2, r3
 8007884:	f080 80db 	bcs.w	8007a3e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	893a      	ldrh	r2, [r7, #8]
 800788c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0320 	and.w	r3, r3, #32
 800789c:	2b00      	cmp	r3, #0
 800789e:	d12b      	bne.n	80078f8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80078ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689a      	ldr	r2, [r3, #8]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f022 0201 	bic.w	r2, r2, #1
 80078be:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	681a      	ldr	r2, [r3, #0]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f022 0210 	bic.w	r2, r2, #16
 80078ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fc fd8b 	bl	800440e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007904:	b29b      	uxth	r3, r3
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	b29b      	uxth	r3, r3
 800790a:	4619      	mov	r1, r3
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f8b3 	bl	8007a78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007912:	e094      	b.n	8007a3e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007920:	b29b      	uxth	r3, r3
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800792c:	b29b      	uxth	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8087 	beq.w	8007a42 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8007934:	897b      	ldrh	r3, [r7, #10]
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 8083 	beq.w	8007a42 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800794a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	6812      	ldr	r2, [r2, #0]
 8007956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0210 	bic.w	r2, r2, #16
 8007982:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007984:	897b      	ldrh	r3, [r7, #10]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f875 	bl	8007a78 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800798e:	e058      	b.n	8007a42 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00d      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3ce>
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80079ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fcd9 	bl	8008366 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079b4:	e048      	b.n	8007a48 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d012      	beq.n	80079e6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079c0:	69bb      	ldr	r3, [r7, #24]
 80079c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d104      	bne.n	80079d4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d034      	beq.n	8007a46 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	4798      	blx	r3
    }
    return;
 80079e4:	e02f      	b.n	8007a46 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d008      	beq.n	8007a02 <HAL_UART_IRQHandler+0x41a>
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d003      	beq.n	8007a02 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 fc99 	bl	8008332 <UART_EndTransmit_IT>
    return;
 8007a00:	e022      	b.n	8007a48 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d008      	beq.n	8007a1e <HAL_UART_IRQHandler+0x436>
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fcb9 	bl	800838e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a1c:	e014      	b.n	8007a48 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00f      	beq.n	8007a48 <HAL_UART_IRQHandler+0x460>
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	da0c      	bge.n	8007a48 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fca3 	bl	800837a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a34:	e008      	b.n	8007a48 <HAL_UART_IRQHandler+0x460>
      return;
 8007a36:	bf00      	nop
 8007a38:	e006      	b.n	8007a48 <HAL_UART_IRQHandler+0x460>
    return;
 8007a3a:	bf00      	nop
 8007a3c:	e004      	b.n	8007a48 <HAL_UART_IRQHandler+0x460>
      return;
 8007a3e:	bf00      	nop
 8007a40:	e002      	b.n	8007a48 <HAL_UART_IRQHandler+0x460>
      return;
 8007a42:	bf00      	nop
 8007a44:	e000      	b.n	8007a48 <HAL_UART_IRQHandler+0x460>
    return;
 8007a46:	bf00      	nop
  }
}
 8007a48:	3720      	adds	r7, #32
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop

08007a50 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a58:	bf00      	nop
 8007a5a:	370c      	adds	r7, #12
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a62:	4770      	bx	lr

08007a64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b083      	sub	sp, #12
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	460b      	mov	r3, r1
 8007a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a90:	b5b0      	push	{r4, r5, r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689a      	ldr	r2, [r3, #8]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4ba3      	ldr	r3, [pc, #652]	; (8007d48 <UART_SetConfig+0x2b8>)
 8007abc:	4013      	ands	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	69f9      	ldr	r1, [r7, #28]
 8007ac4:	430b      	orrs	r3, r1
 8007ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	430a      	orrs	r2, r1
 8007adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a98      	ldr	r2, [pc, #608]	; (8007d4c <UART_SetConfig+0x2bc>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007b02:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6812      	ldr	r2, [r2, #0]
 8007b0a:	69f9      	ldr	r1, [r7, #28]
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	f023 010f 	bic.w	r1, r3, #15
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a89      	ldr	r2, [pc, #548]	; (8007d50 <UART_SetConfig+0x2c0>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d120      	bne.n	8007b72 <UART_SetConfig+0xe2>
 8007b30:	2003      	movs	r0, #3
 8007b32:	f7ff fc69 	bl	8007408 <LL_RCC_GetUSARTClockSource>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d817      	bhi.n	8007b6c <UART_SetConfig+0xdc>
 8007b3c:	a201      	add	r2, pc, #4	; (adr r2, 8007b44 <UART_SetConfig+0xb4>)
 8007b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b42:	bf00      	nop
 8007b44:	08007b55 	.word	0x08007b55
 8007b48:	08007b61 	.word	0x08007b61
 8007b4c:	08007b5b 	.word	0x08007b5b
 8007b50:	08007b67 	.word	0x08007b67
 8007b54:	2301      	movs	r3, #1
 8007b56:	76fb      	strb	r3, [r7, #27]
 8007b58:	e038      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007b5a:	2302      	movs	r3, #2
 8007b5c:	76fb      	strb	r3, [r7, #27]
 8007b5e:	e035      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007b60:	2304      	movs	r3, #4
 8007b62:	76fb      	strb	r3, [r7, #27]
 8007b64:	e032      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007b66:	2308      	movs	r3, #8
 8007b68:	76fb      	strb	r3, [r7, #27]
 8007b6a:	e02f      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	76fb      	strb	r3, [r7, #27]
 8007b70:	e02c      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a75      	ldr	r2, [pc, #468]	; (8007d4c <UART_SetConfig+0x2bc>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d125      	bne.n	8007bc8 <UART_SetConfig+0x138>
 8007b7c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007b80:	f7ff fc52 	bl	8007428 <LL_RCC_GetLPUARTClockSource>
 8007b84:	4603      	mov	r3, r0
 8007b86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b8a:	d017      	beq.n	8007bbc <UART_SetConfig+0x12c>
 8007b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b90:	d817      	bhi.n	8007bc2 <UART_SetConfig+0x132>
 8007b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b96:	d00b      	beq.n	8007bb0 <UART_SetConfig+0x120>
 8007b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b9c:	d811      	bhi.n	8007bc2 <UART_SetConfig+0x132>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <UART_SetConfig+0x11a>
 8007ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba6:	d006      	beq.n	8007bb6 <UART_SetConfig+0x126>
 8007ba8:	e00b      	b.n	8007bc2 <UART_SetConfig+0x132>
 8007baa:	2300      	movs	r3, #0
 8007bac:	76fb      	strb	r3, [r7, #27]
 8007bae:	e00d      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	76fb      	strb	r3, [r7, #27]
 8007bb4:	e00a      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007bb6:	2304      	movs	r3, #4
 8007bb8:	76fb      	strb	r3, [r7, #27]
 8007bba:	e007      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	76fb      	strb	r3, [r7, #27]
 8007bc0:	e004      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007bc2:	2310      	movs	r3, #16
 8007bc4:	76fb      	strb	r3, [r7, #27]
 8007bc6:	e001      	b.n	8007bcc <UART_SetConfig+0x13c>
 8007bc8:	2310      	movs	r3, #16
 8007bca:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a5e      	ldr	r2, [pc, #376]	; (8007d4c <UART_SetConfig+0x2bc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	f040 808b 	bne.w	8007cee <UART_SetConfig+0x25e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bd8:	7efb      	ldrb	r3, [r7, #27]
 8007bda:	2b08      	cmp	r3, #8
 8007bdc:	d823      	bhi.n	8007c26 <UART_SetConfig+0x196>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <UART_SetConfig+0x154>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c09 	.word	0x08007c09
 8007be8:	08007c27 	.word	0x08007c27
 8007bec:	08007c11 	.word	0x08007c11
 8007bf0:	08007c27 	.word	0x08007c27
 8007bf4:	08007c17 	.word	0x08007c17
 8007bf8:	08007c27 	.word	0x08007c27
 8007bfc:	08007c27 	.word	0x08007c27
 8007c00:	08007c27 	.word	0x08007c27
 8007c04:	08007c1f 	.word	0x08007c1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c08:	f7fe fa58 	bl	80060bc <HAL_RCC_GetPCLK1Freq>
 8007c0c:	6178      	str	r0, [r7, #20]
        break;
 8007c0e:	e00f      	b.n	8007c30 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c10:	4b50      	ldr	r3, [pc, #320]	; (8007d54 <UART_SetConfig+0x2c4>)
 8007c12:	617b      	str	r3, [r7, #20]
        break;
 8007c14:	e00c      	b.n	8007c30 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c16:	f7fe f9d1 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8007c1a:	6178      	str	r0, [r7, #20]
        break;
 8007c1c:	e008      	b.n	8007c30 <UART_SetConfig+0x1a0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c22:	617b      	str	r3, [r7, #20]
        break;
 8007c24:	e004      	b.n	8007c30 <UART_SetConfig+0x1a0>
      default:
        pclk = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	76bb      	strb	r3, [r7, #26]
        break;
 8007c2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 811a 	beq.w	8007e6c <UART_SetConfig+0x3dc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	4a46      	ldr	r2, [pc, #280]	; (8007d58 <UART_SetConfig+0x2c8>)
 8007c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c42:	461a      	mov	r2, r3
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c4a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4613      	mov	r3, r2
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	4413      	add	r3, r2
 8007c56:	68ba      	ldr	r2, [r7, #8]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d305      	bcc.n	8007c68 <UART_SetConfig+0x1d8>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d902      	bls.n	8007c6e <UART_SetConfig+0x1de>
      {
        ret = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	76bb      	strb	r3, [r7, #26]
 8007c6c:	e0fe      	b.n	8007e6c <UART_SetConfig+0x3dc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f04f 0100 	mov.w	r1, #0
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7a:	4a37      	ldr	r2, [pc, #220]	; (8007d58 <UART_SetConfig+0x2c8>)
 8007c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	f7f8 fad3 	bl	8000230 <__aeabi_uldivmod>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	f04f 0300 	mov.w	r3, #0
 8007c9a:	020b      	lsls	r3, r1, #8
 8007c9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ca0:	0202      	lsls	r2, r0, #8
 8007ca2:	6879      	ldr	r1, [r7, #4]
 8007ca4:	6849      	ldr	r1, [r1, #4]
 8007ca6:	0849      	lsrs	r1, r1, #1
 8007ca8:	4608      	mov	r0, r1
 8007caa:	f04f 0100 	mov.w	r1, #0
 8007cae:	1814      	adds	r4, r2, r0
 8007cb0:	eb43 0501 	adc.w	r5, r3, r1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	f04f 0300 	mov.w	r3, #0
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	f7f8 fab5 	bl	8000230 <__aeabi_uldivmod>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4613      	mov	r3, r2
 8007ccc:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd4:	d308      	bcc.n	8007ce8 <UART_SetConfig+0x258>
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cdc:	d204      	bcs.n	8007ce8 <UART_SetConfig+0x258>
        {
          huart->Instance->BRR = usartdiv;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	693a      	ldr	r2, [r7, #16]
 8007ce4:	60da      	str	r2, [r3, #12]
 8007ce6:	e0c1      	b.n	8007e6c <UART_SetConfig+0x3dc>
        }
        else
        {
          ret = HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	76bb      	strb	r3, [r7, #26]
 8007cec:	e0be      	b.n	8007e6c <UART_SetConfig+0x3dc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	69db      	ldr	r3, [r3, #28]
 8007cf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf6:	d16a      	bne.n	8007dce <UART_SetConfig+0x33e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007cf8:	7efb      	ldrb	r3, [r7, #27]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	2b07      	cmp	r3, #7
 8007cfe:	d82d      	bhi.n	8007d5c <UART_SetConfig+0x2cc>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <UART_SetConfig+0x278>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d29 	.word	0x08007d29
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d5d 	.word	0x08007d5d
 8007d14:	08007d37 	.word	0x08007d37
 8007d18:	08007d5d 	.word	0x08007d5d
 8007d1c:	08007d5d 	.word	0x08007d5d
 8007d20:	08007d5d 	.word	0x08007d5d
 8007d24:	08007d3f 	.word	0x08007d3f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d28:	f7fe f9de 	bl	80060e8 <HAL_RCC_GetPCLK2Freq>
 8007d2c:	6178      	str	r0, [r7, #20]
        break;
 8007d2e:	e01a      	b.n	8007d66 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d30:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <UART_SetConfig+0x2c4>)
 8007d32:	617b      	str	r3, [r7, #20]
        break;
 8007d34:	e017      	b.n	8007d66 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d36:	f7fe f941 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8007d3a:	6178      	str	r0, [r7, #20]
        break;
 8007d3c:	e013      	b.n	8007d66 <UART_SetConfig+0x2d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d42:	617b      	str	r3, [r7, #20]
        break;
 8007d44:	e00f      	b.n	8007d66 <UART_SetConfig+0x2d6>
 8007d46:	bf00      	nop
 8007d48:	cfff69f3 	.word	0xcfff69f3
 8007d4c:	40008000 	.word	0x40008000
 8007d50:	40013800 	.word	0x40013800
 8007d54:	00f42400 	.word	0x00f42400
 8007d58:	0800cfa4 	.word	0x0800cfa4
      default:
        pclk = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	76bb      	strb	r3, [r7, #26]
        break;
 8007d64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d07f      	beq.n	8007e6c <UART_SetConfig+0x3dc>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	4a48      	ldr	r2, [pc, #288]	; (8007e94 <UART_SetConfig+0x404>)
 8007d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d76:	461a      	mov	r2, r3
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d7e:	005a      	lsls	r2, r3, #1
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	441a      	add	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b0f      	cmp	r3, #15
 8007d98:	d916      	bls.n	8007dc8 <UART_SetConfig+0x338>
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da0:	d212      	bcs.n	8007dc8 <UART_SetConfig+0x338>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f023 030f 	bic.w	r3, r3, #15
 8007daa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	085b      	lsrs	r3, r3, #1
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	f003 0307 	and.w	r3, r3, #7
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	89fb      	ldrh	r3, [r7, #14]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	89fa      	ldrh	r2, [r7, #14]
 8007dc4:	60da      	str	r2, [r3, #12]
 8007dc6:	e051      	b.n	8007e6c <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	76bb      	strb	r3, [r7, #26]
 8007dcc:	e04e      	b.n	8007e6c <UART_SetConfig+0x3dc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007dce:	7efb      	ldrb	r3, [r7, #27]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	2b07      	cmp	r3, #7
 8007dd4:	d821      	bhi.n	8007e1a <UART_SetConfig+0x38a>
 8007dd6:	a201      	add	r2, pc, #4	; (adr r2, 8007ddc <UART_SetConfig+0x34c>)
 8007dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ddc:	08007dfd 	.word	0x08007dfd
 8007de0:	08007e05 	.word	0x08007e05
 8007de4:	08007e1b 	.word	0x08007e1b
 8007de8:	08007e0b 	.word	0x08007e0b
 8007dec:	08007e1b 	.word	0x08007e1b
 8007df0:	08007e1b 	.word	0x08007e1b
 8007df4:	08007e1b 	.word	0x08007e1b
 8007df8:	08007e13 	.word	0x08007e13
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dfc:	f7fe f974 	bl	80060e8 <HAL_RCC_GetPCLK2Freq>
 8007e00:	6178      	str	r0, [r7, #20]
        break;
 8007e02:	e00f      	b.n	8007e24 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e04:	4b24      	ldr	r3, [pc, #144]	; (8007e98 <UART_SetConfig+0x408>)
 8007e06:	617b      	str	r3, [r7, #20]
        break;
 8007e08:	e00c      	b.n	8007e24 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e0a:	f7fe f8d7 	bl	8005fbc <HAL_RCC_GetSysClockFreq>
 8007e0e:	6178      	str	r0, [r7, #20]
        break;
 8007e10:	e008      	b.n	8007e24 <UART_SetConfig+0x394>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e16:	617b      	str	r3, [r7, #20]
        break;
 8007e18:	e004      	b.n	8007e24 <UART_SetConfig+0x394>
      default:
        pclk = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	76bb      	strb	r3, [r7, #26]
        break;
 8007e22:	bf00      	nop
    }

    if (pclk != 0U)
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d020      	beq.n	8007e6c <UART_SetConfig+0x3dc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	4a19      	ldr	r2, [pc, #100]	; (8007e94 <UART_SetConfig+0x404>)
 8007e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e34:	461a      	mov	r2, r3
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	085b      	lsrs	r3, r3, #1
 8007e42:	441a      	add	r2, r3
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	2b0f      	cmp	r3, #15
 8007e54:	d908      	bls.n	8007e68 <UART_SetConfig+0x3d8>
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e5c:	d204      	bcs.n	8007e68 <UART_SetConfig+0x3d8>
      {
        huart->Instance->BRR = usartdiv;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	e001      	b.n	8007e6c <UART_SetConfig+0x3dc>
      }
      else
      {
        ret = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007e88:	7ebb      	ldrb	r3, [r7, #26]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3720      	adds	r7, #32
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bdb0      	pop	{r4, r5, r7, pc}
 8007e92:	bf00      	nop
 8007e94:	0800cfa4 	.word	0x0800cfa4
 8007e98:	00f42400 	.word	0x00f42400

08007e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea8:	f003 0301 	and.w	r3, r3, #1
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00a      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eec:	f003 0304 	and.w	r3, r3, #4
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f30:	f003 0310 	and.w	r3, r3, #16
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d01a      	beq.n	8007fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f9a:	d10a      	bne.n	8007fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	430a      	orrs	r2, r1
 8007fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00a      	beq.n	8007fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	605a      	str	r2, [r3, #4]
  }
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ff0:	f7fb ff20 	bl	8003e34 <HAL_GetTick>
 8007ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0308 	and.w	r3, r3, #8
 8008000:	2b08      	cmp	r3, #8
 8008002:	d10e      	bne.n	8008022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f82f 	bl	8008076 <UART_WaitOnFlagUntilTimeout>
 8008018:	4603      	mov	r3, r0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d001      	beq.n	8008022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e025      	b.n	800806e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b04      	cmp	r3, #4
 800802e:	d10e      	bne.n	800804e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008034:	9300      	str	r3, [sp, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f819 	bl	8008076 <UART_WaitOnFlagUntilTimeout>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d001      	beq.n	800804e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e00f      	b.n	800806e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	603b      	str	r3, [r7, #0]
 8008082:	4613      	mov	r3, r2
 8008084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008086:	e062      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808e:	d05e      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008090:	f7fb fed0 	bl	8003e34 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	429a      	cmp	r2, r3
 800809e:	d302      	bcc.n	80080a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d11d      	bne.n	80080e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	689a      	ldr	r2, [r3, #8]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0201 	bic.w	r2, r2, #1
 80080c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e045      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 0304 	and.w	r3, r3, #4
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d02e      	beq.n	800814e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	69db      	ldr	r3, [r3, #28]
 80080f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080fe:	d126      	bne.n	800814e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008108:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008118:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 0201 	bic.w	r2, r2, #1
 8008128:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2220      	movs	r2, #32
 800812e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2220      	movs	r2, #32
 800813e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e00f      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4013      	ands	r3, r2
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	429a      	cmp	r2, r3
 800815c:	bf0c      	ite	eq
 800815e:	2301      	moveq	r3, #1
 8008160:	2300      	movne	r3, #0
 8008162:	b2db      	uxtb	r3, r3
 8008164:	461a      	mov	r2, r3
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	429a      	cmp	r2, r3
 800816a:	d08d      	beq.n	8008088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800818c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689a      	ldr	r2, [r3, #8]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800819c:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80081a6:	bf00      	nop
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b083      	sub	sp, #12
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081c8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	6812      	ldr	r2, [r2, #0]
 80081d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081d8:	f023 0301 	bic.w	r3, r3, #1
 80081dc:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d107      	bne.n	80081f6 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0210 	bic.w	r2, r2, #16
 80081f4:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	671a      	str	r2, [r3, #112]	; 0x70
}
 800820a:	bf00      	nop
 800820c:	370c      	adds	r7, #12
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0320 	and.w	r3, r3, #32
 800822e:	2b00      	cmp	r3, #0
 8008230:	d114      	bne.n	800825c <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008248:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008258:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800825a:	e002      	b.n	8008262 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7f9 fab7 	bl	80017d0 <HAL_UART_TxCpltCallback>
}
 8008262:	bf00      	nop
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008276:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff fbe9 	bl	8007a50 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b086      	sub	sp, #24
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008292:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ae:	2b80      	cmp	r3, #128	; 0x80
 80082b0:	d109      	bne.n	80082c6 <UART_DMAError+0x40>
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	2b21      	cmp	r3, #33	; 0x21
 80082b6:	d106      	bne.n	80082c6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80082c0:	6978      	ldr	r0, [r7, #20]
 80082c2:	f7ff ff58 	bl	8008176 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d0:	2b40      	cmp	r3, #64	; 0x40
 80082d2:	d109      	bne.n	80082e8 <UART_DMAError+0x62>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2b22      	cmp	r3, #34	; 0x22
 80082d8:	d106      	bne.n	80082e8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2200      	movs	r2, #0
 80082de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80082e2:	6978      	ldr	r0, [r7, #20]
 80082e4:	f7ff ff65 	bl	80081b2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ee:	f043 0210 	orr.w	r2, r3, #16
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082f8:	6978      	ldr	r0, [r7, #20]
 80082fa:	f7ff fbb3 	bl	8007a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082fe:	bf00      	nop
 8008300:	3718      	adds	r7, #24
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b084      	sub	sp, #16
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2200      	movs	r2, #0
 8008320:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008324:	68f8      	ldr	r0, [r7, #12]
 8008326:	f7ff fb9d 	bl	8007a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800832a:	bf00      	nop
 800832c:	3710      	adds	r7, #16
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008348:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2220      	movs	r2, #32
 800834e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f7f9 fa39 	bl	80017d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800836e:	bf00      	nop
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b085      	sub	sp, #20
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d101      	bne.n	80083b8 <HAL_UARTEx_DisableFifoMode+0x16>
 80083b4:	2302      	movs	r3, #2
 80083b6:	e027      	b.n	8008408 <HAL_UARTEx_DisableFifoMode+0x66>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2224      	movs	r2, #36	; 0x24
 80083c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 0201 	bic.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083e6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008428:	2302      	movs	r3, #2
 800842a:	e02d      	b.n	8008488 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2224      	movs	r2, #36	; 0x24
 8008438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 0201 	bic.w	r2, r2, #1
 8008452:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f84f 	bl	800850c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d101      	bne.n	80084a8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084a4:	2302      	movs	r3, #2
 80084a6:	e02d      	b.n	8008504 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2224      	movs	r2, #36	; 0x24
 80084b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f022 0201 	bic.w	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	689b      	ldr	r3, [r3, #8]
 80084d6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 f811 	bl	800850c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2220      	movs	r2, #32
 80084f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008518:	2b00      	cmp	r3, #0
 800851a:	d108      	bne.n	800852e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800852c:	e031      	b.n	8008592 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800852e:	2308      	movs	r3, #8
 8008530:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008532:	2308      	movs	r3, #8
 8008534:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	0e5b      	lsrs	r3, r3, #25
 800853e:	b2db      	uxtb	r3, r3
 8008540:	f003 0307 	and.w	r3, r3, #7
 8008544:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	0f5b      	lsrs	r3, r3, #29
 800854e:	b2db      	uxtb	r3, r3
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	7b3a      	ldrb	r2, [r7, #12]
 800855a:	4911      	ldr	r1, [pc, #68]	; (80085a0 <UARTEx_SetNbDataToProcess+0x94>)
 800855c:	5c8a      	ldrb	r2, [r1, r2]
 800855e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008562:	7b3a      	ldrb	r2, [r7, #12]
 8008564:	490f      	ldr	r1, [pc, #60]	; (80085a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008566:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008568:	fb93 f3f2 	sdiv	r3, r3, r2
 800856c:	b29a      	uxth	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008574:	7bfb      	ldrb	r3, [r7, #15]
 8008576:	7b7a      	ldrb	r2, [r7, #13]
 8008578:	4909      	ldr	r1, [pc, #36]	; (80085a0 <UARTEx_SetNbDataToProcess+0x94>)
 800857a:	5c8a      	ldrb	r2, [r1, r2]
 800857c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008580:	7b7a      	ldrb	r2, [r7, #13]
 8008582:	4908      	ldr	r1, [pc, #32]	; (80085a4 <UARTEx_SetNbDataToProcess+0x98>)
 8008584:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008586:	fb93 f3f2 	sdiv	r3, r3, r2
 800858a:	b29a      	uxth	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008592:	bf00      	nop
 8008594:	3714      	adds	r7, #20
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	0800cfbc 	.word	0x0800cfbc
 80085a4:	0800cfc4 	.word	0x0800cfc4

080085a8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085b2:	f107 0308 	add.w	r3, r7, #8
 80085b6:	2218      	movs	r2, #24
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fab6 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 80085c0:	233f      	movs	r3, #63	; 0x3f
 80085c2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80085c4:	2381      	movs	r3, #129	; 0x81
 80085c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80085c8:	1dfb      	adds	r3, r7, #7
 80085ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80085cc:	2301      	movs	r3, #1
 80085ce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80085d0:	f107 0308 	add.w	r3, r7, #8
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f001 f96c 	bl	80098b4 <hci_send_req>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	da01      	bge.n	80085e6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80085e2:	23ff      	movs	r3, #255	; 0xff
 80085e4:	e000      	b.n	80085e8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80085e6:	79fb      	ldrb	r3, [r7, #7]
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3720      	adds	r7, #32
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80085f0:	b5b0      	push	{r4, r5, r7, lr}
 80085f2:	b0ce      	sub	sp, #312	; 0x138
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4605      	mov	r5, r0
 80085f8:	460c      	mov	r4, r1
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	1dfb      	adds	r3, r7, #7
 8008600:	462a      	mov	r2, r5
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	1d3b      	adds	r3, r7, #4
 8008606:	4622      	mov	r2, r4
 8008608:	801a      	strh	r2, [r3, #0]
 800860a:	1cbb      	adds	r3, r7, #2
 800860c:	4602      	mov	r2, r0
 800860e:	801a      	strh	r2, [r3, #0]
 8008610:	1dbb      	adds	r3, r7, #6
 8008612:	460a      	mov	r2, r1
 8008614:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008616:	f107 0310 	add.w	r3, r7, #16
 800861a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800861e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008622:	3308      	adds	r3, #8
 8008624:	f107 0210 	add.w	r2, r7, #16
 8008628:	4413      	add	r3, r2
 800862a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800862e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008632:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008636:	4413      	add	r3, r2
 8008638:	3309      	adds	r3, #9
 800863a:	f107 0210 	add.w	r2, r7, #16
 800863e:	4413      	add	r3, r2
 8008640:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008644:	f107 030f 	add.w	r3, r7, #15
 8008648:	2200      	movs	r2, #0
 800864a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800864c:	2300      	movs	r3, #0
 800864e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008652:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008656:	1dfa      	adds	r2, r7, #7
 8008658:	7812      	ldrb	r2, [r2, #0]
 800865a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800865c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008660:	3301      	adds	r3, #1
 8008662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008666:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800866a:	1d3a      	adds	r2, r7, #4
 800866c:	8812      	ldrh	r2, [r2, #0]
 800866e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008672:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008676:	3302      	adds	r3, #2
 8008678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800867c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008680:	1cba      	adds	r2, r7, #2
 8008682:	8812      	ldrh	r2, [r2, #0]
 8008684:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800868c:	3302      	adds	r3, #2
 800868e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008692:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008696:	1dba      	adds	r2, r7, #6
 8008698:	7812      	ldrb	r2, [r2, #0]
 800869a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800869c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086a0:	3301      	adds	r3, #1
 80086a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80086a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086aa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80086ae:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80086b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086b4:	3301      	adds	r3, #1
 80086b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80086ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086be:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80086c2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80086c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086c8:	3301      	adds	r3, #1
 80086ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80086ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80086d2:	3308      	adds	r3, #8
 80086d4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80086d8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 fa15 	bl	8009b0c <Osal_MemCpy>
    index_input += Local_Name_Length;
 80086e2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80086e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80086ea:	4413      	add	r3, r2
 80086ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80086f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80086f4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80086f8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80086fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086fe:	3301      	adds	r3, #1
 8008700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008704:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008708:	3301      	adds	r3, #1
 800870a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800870e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008712:	4618      	mov	r0, r3
 8008714:	f001 f9fa 	bl	8009b0c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008718:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800871c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008720:	4413      	add	r3, r2
 8008722:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8008726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800872a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800872e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008730:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008734:	3302      	adds	r3, #2
 8008736:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800873a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800873e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008742:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008748:	3302      	adds	r3, #2
 800874a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800874e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008752:	2218      	movs	r2, #24
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f9e8 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800875c:	233f      	movs	r3, #63	; 0x3f
 800875e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008762:	2383      	movs	r3, #131	; 0x83
 8008764:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008768:	f107 0310 	add.w	r3, r7, #16
 800876c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008778:	f107 030f 	add.w	r3, r7, #15
 800877c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008780:	2301      	movs	r3, #1
 8008782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800878a:	2100      	movs	r1, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f001 f891 	bl	80098b4 <hci_send_req>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	da01      	bge.n	800879c <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8008798:	23ff      	movs	r3, #255	; 0xff
 800879a:	e002      	b.n	80087a2 <aci_gap_set_discoverable+0x1b2>
  return status;
 800879c:	f107 030f 	add.w	r3, r7, #15
 80087a0:	781b      	ldrb	r3, [r3, #0]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bdb0      	pop	{r4, r5, r7, pc}

080087ac <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b0cc      	sub	sp, #304	; 0x130
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4602      	mov	r2, r0
 80087b4:	1dfb      	adds	r3, r7, #7
 80087b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80087b8:	f107 0310 	add.w	r3, r7, #16
 80087bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087c0:	f107 030f 	add.w	r3, r7, #15
 80087c4:	2200      	movs	r2, #0
 80087c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80087ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d2:	1dfa      	adds	r2, r7, #7
 80087d4:	7812      	ldrb	r2, [r2, #0]
 80087d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80087d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087dc:	3301      	adds	r3, #1
 80087de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80087e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80087e6:	2218      	movs	r2, #24
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f001 f99e 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 80087f0:	233f      	movs	r3, #63	; 0x3f
 80087f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80087f6:	2385      	movs	r3, #133	; 0x85
 80087f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80087fc:	f107 0310 	add.w	r3, r7, #16
 8008800:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008804:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008808:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800880c:	f107 030f 	add.w	r3, r7, #15
 8008810:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008814:	2301      	movs	r3, #1
 8008816:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800881a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800881e:	2100      	movs	r1, #0
 8008820:	4618      	mov	r0, r3
 8008822:	f001 f847 	bl	80098b4 <hci_send_req>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	da01      	bge.n	8008830 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800882c:	23ff      	movs	r3, #255	; 0xff
 800882e:	e002      	b.n	8008836 <aci_gap_set_io_capability+0x8a>
  return status;
 8008830:	f107 030f 	add.w	r3, r7, #15
 8008834:	781b      	ldrb	r3, [r3, #0]
}
 8008836:	4618      	mov	r0, r3
 8008838:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008840:	b5b0      	push	{r4, r5, r7, lr}
 8008842:	b0cc      	sub	sp, #304	; 0x130
 8008844:	af00      	add	r7, sp, #0
 8008846:	4605      	mov	r5, r0
 8008848:	460c      	mov	r4, r1
 800884a:	4610      	mov	r0, r2
 800884c:	4619      	mov	r1, r3
 800884e:	1dfb      	adds	r3, r7, #7
 8008850:	462a      	mov	r2, r5
 8008852:	701a      	strb	r2, [r3, #0]
 8008854:	1dbb      	adds	r3, r7, #6
 8008856:	4622      	mov	r2, r4
 8008858:	701a      	strb	r2, [r3, #0]
 800885a:	1d7b      	adds	r3, r7, #5
 800885c:	4602      	mov	r2, r0
 800885e:	701a      	strb	r2, [r3, #0]
 8008860:	1d3b      	adds	r3, r7, #4
 8008862:	460a      	mov	r2, r1
 8008864:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008866:	f107 0310 	add.w	r3, r7, #16
 800886a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800886e:	f107 030f 	add.w	r3, r7, #15
 8008872:	2200      	movs	r2, #0
 8008874:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800887c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008880:	1dfa      	adds	r2, r7, #7
 8008882:	7812      	ldrb	r2, [r2, #0]
 8008884:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800888a:	3301      	adds	r3, #1
 800888c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008894:	1dba      	adds	r2, r7, #6
 8008896:	7812      	ldrb	r2, [r2, #0]
 8008898:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800889a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800889e:	3301      	adds	r3, #1
 80088a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80088a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088a8:	1d7a      	adds	r2, r7, #5
 80088aa:	7812      	ldrb	r2, [r2, #0]
 80088ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80088ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088b2:	3301      	adds	r3, #1
 80088b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80088b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088bc:	1d3a      	adds	r2, r7, #4
 80088be:	7812      	ldrb	r2, [r2, #0]
 80088c0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80088c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088c6:	3301      	adds	r3, #1
 80088c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80088cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088d0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80088d4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80088d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088da:	3301      	adds	r3, #1
 80088dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80088e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088e4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80088e8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80088ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088ee:	3301      	adds	r3, #1
 80088f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80088f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80088fc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80088fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008902:	3301      	adds	r3, #1
 8008904:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008908:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008910:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008918:	3304      	adds	r3, #4
 800891a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800891e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008922:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008926:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008928:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800892c:	3301      	adds	r3, #1
 800892e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008936:	2218      	movs	r2, #24
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f8f6 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008940:	233f      	movs	r3, #63	; 0x3f
 8008942:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008946:	2386      	movs	r3, #134	; 0x86
 8008948:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800894c:	f107 0310 	add.w	r3, r7, #16
 8008950:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008954:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008958:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800895c:	f107 030f 	add.w	r3, r7, #15
 8008960:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008964:	2301      	movs	r3, #1
 8008966:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800896a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800896e:	2100      	movs	r1, #0
 8008970:	4618      	mov	r0, r3
 8008972:	f000 ff9f 	bl	80098b4 <hci_send_req>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	da01      	bge.n	8008980 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800897c:	23ff      	movs	r3, #255	; 0xff
 800897e:	e002      	b.n	8008986 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8008980:	f107 030f 	add.w	r3, r7, #15
 8008984:	781b      	ldrb	r3, [r3, #0]
}
 8008986:	4618      	mov	r0, r3
 8008988:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800898c:	46bd      	mov	sp, r7
 800898e:	bdb0      	pop	{r4, r5, r7, pc}

08008990 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b0cd      	sub	sp, #308	; 0x134
 8008994:	af00      	add	r7, sp, #0
 8008996:	4604      	mov	r4, r0
 8008998:	4608      	mov	r0, r1
 800899a:	4611      	mov	r1, r2
 800899c:	463a      	mov	r2, r7
 800899e:	6013      	str	r3, [r2, #0]
 80089a0:	1dfb      	adds	r3, r7, #7
 80089a2:	4622      	mov	r2, r4
 80089a4:	701a      	strb	r2, [r3, #0]
 80089a6:	1dbb      	adds	r3, r7, #6
 80089a8:	4602      	mov	r2, r0
 80089aa:	701a      	strb	r2, [r3, #0]
 80089ac:	1d7b      	adds	r3, r7, #5
 80089ae:	460a      	mov	r2, r1
 80089b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80089b2:	f107 0310 	add.w	r3, r7, #16
 80089b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80089ba:	f107 0308 	add.w	r3, r7, #8
 80089be:	2207      	movs	r2, #7
 80089c0:	2100      	movs	r1, #0
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 f8b2 	bl	8009b2c <Osal_MemSet>
  int index_input = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80089ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089d2:	1dfa      	adds	r2, r7, #7
 80089d4:	7812      	ldrb	r2, [r2, #0]
 80089d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089dc:	3301      	adds	r3, #1
 80089de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80089e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e6:	1dba      	adds	r2, r7, #6
 80089e8:	7812      	ldrb	r2, [r2, #0]
 80089ea:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80089ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089f0:	3301      	adds	r3, #1
 80089f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80089f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fa:	1d7a      	adds	r2, r7, #5
 80089fc:	7812      	ldrb	r2, [r2, #0]
 80089fe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008a00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a04:	3301      	adds	r3, #1
 8008a06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a0a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a0e:	2218      	movs	r2, #24
 8008a10:	2100      	movs	r1, #0
 8008a12:	4618      	mov	r0, r3
 8008a14:	f001 f88a 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a18:	233f      	movs	r3, #63	; 0x3f
 8008a1a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008a1e:	238a      	movs	r3, #138	; 0x8a
 8008a20:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a24:	f107 0310 	add.w	r3, r7, #16
 8008a28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008a34:	f107 0308 	add.w	r3, r7, #8
 8008a38:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008a3c:	2307      	movs	r3, #7
 8008a3e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008a42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a46:	2100      	movs	r1, #0
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 ff33 	bl	80098b4 <hci_send_req>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	da01      	bge.n	8008a58 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8008a54:	23ff      	movs	r3, #255	; 0xff
 8008a56:	e021      	b.n	8008a9c <aci_gap_init+0x10c>
  if ( resp.Status )
 8008a58:	f107 0308 	add.w	r3, r7, #8
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <aci_gap_init+0xda>
    return resp.Status;
 8008a62:	f107 0308 	add.w	r3, r7, #8
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	e018      	b.n	8008a9c <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8008a6a:	f107 0308 	add.w	r3, r7, #8
 8008a6e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	463b      	mov	r3, r7
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008a7a:	f107 0308 	add.w	r3, r7, #8
 8008a7e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008a88:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008a8a:	f107 0308 	add.w	r3, r7, #8
 8008a8e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008a98:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd90      	pop	{r4, r7, pc}

08008aa6 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008aa6:	b580      	push	{r7, lr}
 8008aa8:	b0cc      	sub	sp, #304	; 0x130
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	4602      	mov	r2, r0
 8008aae:	463b      	mov	r3, r7
 8008ab0:	6019      	str	r1, [r3, #0]
 8008ab2:	1dfb      	adds	r3, r7, #7
 8008ab4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008ab6:	f107 0310 	add.w	r3, r7, #16
 8008aba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008abe:	f107 030f 	add.w	r3, r7, #15
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ad0:	1dfa      	adds	r2, r7, #7
 8008ad2:	7812      	ldrb	r2, [r2, #0]
 8008ad4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ada:	3301      	adds	r3, #1
 8008adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae4:	1c58      	adds	r0, r3, #1
 8008ae6:	1dfb      	adds	r3, r7, #7
 8008ae8:	781a      	ldrb	r2, [r3, #0]
 8008aea:	463b      	mov	r3, r7
 8008aec:	6819      	ldr	r1, [r3, #0]
 8008aee:	f001 f80d 	bl	8009b0c <Osal_MemCpy>
  index_input += AdvDataLen;
 8008af2:	1dfb      	adds	r3, r7, #7
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008afa:	4413      	add	r3, r2
 8008afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b04:	2218      	movs	r2, #24
 8008b06:	2100      	movs	r1, #0
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 f80f 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b0e:	233f      	movs	r3, #63	; 0x3f
 8008b10:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008b14:	238e      	movs	r3, #142	; 0x8e
 8008b16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b1a:	f107 0310 	add.w	r3, r7, #16
 8008b1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b2a:	f107 030f 	add.w	r3, r7, #15
 8008b2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f000 feb8 	bl	80098b4 <hci_send_req>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	da01      	bge.n	8008b4e <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8008b4a:	23ff      	movs	r3, #255	; 0xff
 8008b4c:	e002      	b.n	8008b54 <aci_gap_update_adv_data+0xae>
  return status;
 8008b4e:	f107 030f 	add.w	r3, r7, #15
 8008b52:	781b      	ldrb	r3, [r3, #0]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b088      	sub	sp, #32
 8008b62:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b68:	f107 0308 	add.w	r3, r7, #8
 8008b6c:	2218      	movs	r2, #24
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 ffdb 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b76:	233f      	movs	r3, #63	; 0x3f
 8008b78:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008b7a:	2392      	movs	r3, #146	; 0x92
 8008b7c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008b7e:	1dfb      	adds	r3, r7, #7
 8008b80:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008b82:	2301      	movs	r3, #1
 8008b84:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008b86:	f107 0308 	add.w	r3, r7, #8
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 fe91 	bl	80098b4 <hci_send_req>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	da01      	bge.n	8008b9c <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008b98:	23ff      	movs	r3, #255	; 0xff
 8008b9a:	e000      	b.n	8008b9e <aci_gap_configure_whitelist+0x40>
  return status;
 8008b9c:	79fb      	ldrb	r3, [r7, #7]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3720      	adds	r7, #32
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b0cc      	sub	sp, #304	; 0x130
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	4602      	mov	r2, r0
 8008bae:	1dbb      	adds	r3, r7, #6
 8008bb0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8008bb2:	f107 0310 	add.w	r3, r7, #16
 8008bb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bba:	f107 030f 	add.w	r3, r7, #15
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008bc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bcc:	1dba      	adds	r2, r7, #6
 8008bce:	8812      	ldrh	r2, [r2, #0]
 8008bd0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008bd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008be0:	2218      	movs	r2, #24
 8008be2:	2100      	movs	r1, #0
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 ffa1 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bea:	233f      	movs	r3, #63	; 0x3f
 8008bec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8008bf0:	2395      	movs	r3, #149	; 0x95
 8008bf2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008bf6:	f107 0310 	add.w	r3, r7, #16
 8008bfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c06:	f107 030f 	add.w	r3, r7, #15
 8008c0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c18:	2100      	movs	r1, #0
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fe4a 	bl	80098b4 <hci_send_req>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	da01      	bge.n	8008c2a <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 8008c26:	23ff      	movs	r3, #255	; 0xff
 8008c28:	e002      	b.n	8008c30 <aci_gap_allow_rebond+0x8a>
  return status;
 8008c2a:	f107 030f 	add.w	r3, r7, #15
 8008c2e:	781b      	ldrb	r3, [r3, #0]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b0cc      	sub	sp, #304	; 0x130
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	4602      	mov	r2, r0
 8008c42:	1dbb      	adds	r3, r7, #6
 8008c44:	801a      	strh	r2, [r3, #0]
 8008c46:	1d7b      	adds	r3, r7, #5
 8008c48:	460a      	mov	r2, r1
 8008c4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008c4c:	f107 0310 	add.w	r3, r7, #16
 8008c50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c54:	f107 030f 	add.w	r3, r7, #15
 8008c58:	2200      	movs	r2, #0
 8008c5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c66:	1dba      	adds	r2, r7, #6
 8008c68:	8812      	ldrh	r2, [r2, #0]
 8008c6a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c70:	3302      	adds	r3, #2
 8008c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c7a:	1d7a      	adds	r2, r7, #5
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c84:	3301      	adds	r3, #1
 8008c86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c8e:	2218      	movs	r2, #24
 8008c90:	2100      	movs	r1, #0
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 ff4a 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c98:	233f      	movs	r3, #63	; 0x3f
 8008c9a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008c9e:	23a5      	movs	r3, #165	; 0xa5
 8008ca0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ca4:	f107 0310 	add.w	r3, r7, #16
 8008ca8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008cac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cb0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cb4:	f107 030f 	add.w	r3, r7, #15
 8008cb8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008cc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 fdf3 	bl	80098b4 <hci_send_req>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	da01      	bge.n	8008cd8 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8008cd4:	23ff      	movs	r3, #255	; 0xff
 8008cd6:	e002      	b.n	8008cde <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8008cd8:	f107 030f 	add.w	r3, r7, #15
 8008cdc:	781b      	ldrb	r3, [r3, #0]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b088      	sub	sp, #32
 8008cec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cf2:	f107 0308 	add.w	r3, r7, #8
 8008cf6:	2218      	movs	r2, #24
 8008cf8:	2100      	movs	r1, #0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 ff16 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d00:	233f      	movs	r3, #63	; 0x3f
 8008d02:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008d04:	f240 1301 	movw	r3, #257	; 0x101
 8008d08:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008d0a:	1dfb      	adds	r3, r7, #7
 8008d0c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d12:	f107 0308 	add.w	r3, r7, #8
 8008d16:	2100      	movs	r1, #0
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 fdcb 	bl	80098b4 <hci_send_req>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	da01      	bge.n	8008d28 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008d24:	23ff      	movs	r3, #255	; 0xff
 8008d26:	e000      	b.n	8008d2a <aci_gatt_init+0x42>
  return status;
 8008d28:	79fb      	ldrb	r3, [r7, #7]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008d32:	b590      	push	{r4, r7, lr}
 8008d34:	b0cf      	sub	sp, #316	; 0x13c
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	4604      	mov	r4, r0
 8008d3a:	4638      	mov	r0, r7
 8008d3c:	6001      	str	r1, [r0, #0]
 8008d3e:	4610      	mov	r0, r2
 8008d40:	4619      	mov	r1, r3
 8008d42:	1dfb      	adds	r3, r7, #7
 8008d44:	4622      	mov	r2, r4
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	1dbb      	adds	r3, r7, #6
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	701a      	strb	r2, [r3, #0]
 8008d4e:	1d7b      	adds	r3, r7, #5
 8008d50:	460a      	mov	r2, r1
 8008d52:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008d54:	f107 0310 	add.w	r3, r7, #16
 8008d58:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008d5c:	1dfb      	adds	r3, r7, #7
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d007      	beq.n	8008d74 <aci_gatt_add_service+0x42>
 8008d64:	1dfb      	adds	r3, r7, #7
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	2b02      	cmp	r3, #2
 8008d6a:	d101      	bne.n	8008d70 <aci_gatt_add_service+0x3e>
 8008d6c:	2311      	movs	r3, #17
 8008d6e:	e002      	b.n	8008d76 <aci_gatt_add_service+0x44>
 8008d70:	2301      	movs	r3, #1
 8008d72:	e000      	b.n	8008d76 <aci_gatt_add_service+0x44>
 8008d74:	2303      	movs	r3, #3
 8008d76:	f107 0210 	add.w	r2, r7, #16
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008d80:	f107 030c 	add.w	r3, r7, #12
 8008d84:	2203      	movs	r2, #3
 8008d86:	2100      	movs	r1, #0
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 fecf 	bl	8009b2c <Osal_MemSet>
  int index_input = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008d94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008d98:	1dfa      	adds	r2, r7, #7
 8008d9a:	7812      	ldrb	r2, [r2, #0]
 8008d9c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008da2:	3301      	adds	r3, #1
 8008da4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008da8:	1dfb      	adds	r3, r7, #7
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d002      	beq.n	8008db6 <aci_gatt_add_service+0x84>
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d004      	beq.n	8008dbe <aci_gatt_add_service+0x8c>
 8008db4:	e007      	b.n	8008dc6 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8008db6:	2302      	movs	r3, #2
 8008db8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008dbc:	e005      	b.n	8008dca <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8008dbe:	2310      	movs	r3, #16
 8008dc0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008dc4:	e001      	b.n	8008dca <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8008dc6:	2347      	movs	r3, #71	; 0x47
 8008dc8:	e05d      	b.n	8008e86 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008dca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008dce:	1c58      	adds	r0, r3, #1
 8008dd0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008dd4:	463b      	mov	r3, r7
 8008dd6:	6819      	ldr	r1, [r3, #0]
 8008dd8:	f000 fe98 	bl	8009b0c <Osal_MemCpy>
    index_input += size;
 8008ddc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008de0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008de4:	4413      	add	r3, r2
 8008de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008dee:	1dba      	adds	r2, r7, #6
 8008df0:	7812      	ldrb	r2, [r2, #0]
 8008df2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008df4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008df8:	3301      	adds	r3, #1
 8008dfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e02:	1d7a      	adds	r2, r7, #5
 8008e04:	7812      	ldrb	r2, [r2, #0]
 8008e06:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008e08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e12:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e16:	2218      	movs	r2, #24
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 fe86 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e20:	233f      	movs	r3, #63	; 0x3f
 8008e22:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008e26:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008e2a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e2e:	f107 0310 	add.w	r3, r7, #16
 8008e32:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008e3e:	f107 030c 	add.w	r3, r7, #12
 8008e42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008e46:	2303      	movs	r3, #3
 8008e48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e50:	2100      	movs	r1, #0
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 fd2e 	bl	80098b4 <hci_send_req>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	da01      	bge.n	8008e62 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8008e5e:	23ff      	movs	r3, #255	; 0xff
 8008e60:	e011      	b.n	8008e86 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8008e62:	f107 030c 	add.w	r3, r7, #12
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <aci_gatt_add_service+0x142>
    return resp.Status;
 8008e6c:	f107 030c 	add.w	r3, r7, #12
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	e008      	b.n	8008e86 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8008e74:	f107 030c 	add.w	r3, r7, #12
 8008e78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008e7c:	b29a      	uxth	r2, r3
 8008e7e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008e82:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd90      	pop	{r4, r7, pc}

08008e90 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008e90:	b590      	push	{r4, r7, lr}
 8008e92:	b0d1      	sub	sp, #324	; 0x144
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	f107 0108 	add.w	r1, r7, #8
 8008e9e:	600a      	str	r2, [r1, #0]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	f107 030e 	add.w	r3, r7, #14
 8008ea6:	4622      	mov	r2, r4
 8008ea8:	801a      	strh	r2, [r3, #0]
 8008eaa:	f107 030d 	add.w	r3, r7, #13
 8008eae:	4602      	mov	r2, r0
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	1dbb      	adds	r3, r7, #6
 8008eb4:	460a      	mov	r2, r1
 8008eb6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8008eb8:	f107 0318 	add.w	r3, r7, #24
 8008ebc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8008ec0:	f107 030d 	add.w	r3, r7, #13
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d008      	beq.n	8008edc <aci_gatt_add_char+0x4c>
 8008eca:	f107 030d 	add.w	r3, r7, #13
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d101      	bne.n	8008ed8 <aci_gatt_add_char+0x48>
 8008ed4:	2313      	movs	r3, #19
 8008ed6:	e002      	b.n	8008ede <aci_gatt_add_char+0x4e>
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e000      	b.n	8008ede <aci_gatt_add_char+0x4e>
 8008edc:	2305      	movs	r3, #5
 8008ede:	f107 0218 	add.w	r2, r7, #24
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008ee8:	f107 0314 	add.w	r3, r7, #20
 8008eec:	2203      	movs	r2, #3
 8008eee:	2100      	movs	r1, #0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fe1b 	bl	8009b2c <Osal_MemSet>
  int index_input = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8008efc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008f00:	f107 020e 	add.w	r2, r7, #14
 8008f04:	8812      	ldrh	r2, [r2, #0]
 8008f06:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008f08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f0c:	3302      	adds	r3, #2
 8008f0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8008f12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008f16:	f107 020d 	add.w	r2, r7, #13
 8008f1a:	7812      	ldrb	r2, [r2, #0]
 8008f1c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008f1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f22:	3301      	adds	r3, #1
 8008f24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8008f28:	f107 030d 	add.w	r3, r7, #13
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d002      	beq.n	8008f38 <aci_gatt_add_char+0xa8>
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d004      	beq.n	8008f40 <aci_gatt_add_char+0xb0>
 8008f36:	e007      	b.n	8008f48 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008f3e:	e005      	b.n	8008f4c <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8008f40:	2310      	movs	r3, #16
 8008f42:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8008f46:	e001      	b.n	8008f4c <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8008f48:	2347      	movs	r3, #71	; 0x47
 8008f4a:	e086      	b.n	800905a <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8008f4c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008f50:	1cd8      	adds	r0, r3, #3
 8008f52:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8008f56:	f107 0308 	add.w	r3, r7, #8
 8008f5a:	6819      	ldr	r1, [r3, #0]
 8008f5c:	f000 fdd6 	bl	8009b0c <Osal_MemCpy>
    index_input += size;
 8008f60:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8008f64:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008f68:	4413      	add	r3, r2
 8008f6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8008f6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f72:	1dba      	adds	r2, r7, #6
 8008f74:	8812      	ldrh	r2, [r2, #0]
 8008f76:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008f78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8008f82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f86:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008f8a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8008f8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008f90:	3301      	adds	r3, #1
 8008f92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8008f96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008f9a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008f9e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8008fa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8008faa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fae:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8008fb2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8008fb4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fb8:	3301      	adds	r3, #1
 8008fba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8008fbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fc2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8008fc6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8008fc8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fcc:	3301      	adds	r3, #1
 8008fce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8008fd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008fd6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8008fda:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8008fdc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008fe6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008fea:	2218      	movs	r2, #24
 8008fec:	2100      	movs	r1, #0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f000 fd9c 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ff4:	233f      	movs	r3, #63	; 0x3f
 8008ff6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8008ffa:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008ffe:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009002:	f107 0318 	add.w	r3, r7, #24
 8009006:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800900a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800900e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009012:	f107 0314 	add.w	r3, r7, #20
 8009016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800901a:	2303      	movs	r3, #3
 800901c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009020:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009024:	2100      	movs	r1, #0
 8009026:	4618      	mov	r0, r3
 8009028:	f000 fc44 	bl	80098b4 <hci_send_req>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	da01      	bge.n	8009036 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8009032:	23ff      	movs	r3, #255	; 0xff
 8009034:	e011      	b.n	800905a <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8009036:	f107 0314 	add.w	r3, r7, #20
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8009040:	f107 0314 	add.w	r3, r7, #20
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	e008      	b.n	800905a <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8009048:	f107 0314 	add.w	r3, r7, #20
 800904c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009050:	b29a      	uxth	r2, r3
 8009052:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009056:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009058:	2300      	movs	r3, #0
}
 800905a:	4618      	mov	r0, r3
 800905c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009060:	46bd      	mov	sp, r7
 8009062:	bd90      	pop	{r4, r7, pc}

08009064 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009064:	b5b0      	push	{r4, r5, r7, lr}
 8009066:	b0cc      	sub	sp, #304	; 0x130
 8009068:	af00      	add	r7, sp, #0
 800906a:	4605      	mov	r5, r0
 800906c:	460c      	mov	r4, r1
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	1dbb      	adds	r3, r7, #6
 8009074:	462a      	mov	r2, r5
 8009076:	801a      	strh	r2, [r3, #0]
 8009078:	1d3b      	adds	r3, r7, #4
 800907a:	4622      	mov	r2, r4
 800907c:	801a      	strh	r2, [r3, #0]
 800907e:	1cfb      	adds	r3, r7, #3
 8009080:	4602      	mov	r2, r0
 8009082:	701a      	strb	r2, [r3, #0]
 8009084:	1cbb      	adds	r3, r7, #2
 8009086:	460a      	mov	r2, r1
 8009088:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800908a:	f107 0310 	add.w	r3, r7, #16
 800908e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009092:	f107 030f 	add.w	r3, r7, #15
 8009096:	2200      	movs	r2, #0
 8009098:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800909a:	2300      	movs	r3, #0
 800909c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80090a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090a4:	1dba      	adds	r2, r7, #6
 80090a6:	8812      	ldrh	r2, [r2, #0]
 80090a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ae:	3302      	adds	r3, #2
 80090b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80090b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090b8:	1d3a      	adds	r2, r7, #4
 80090ba:	8812      	ldrh	r2, [r2, #0]
 80090bc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80090be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090c2:	3302      	adds	r3, #2
 80090c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80090c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090cc:	1cfa      	adds	r2, r7, #3
 80090ce:	7812      	ldrb	r2, [r2, #0]
 80090d0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80090d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090d6:	3301      	adds	r3, #1
 80090d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80090dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e0:	1cba      	adds	r2, r7, #2
 80090e2:	7812      	ldrb	r2, [r2, #0]
 80090e4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80090e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090ea:	3301      	adds	r3, #1
 80090ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80090f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090f4:	1d98      	adds	r0, r3, #6
 80090f6:	1cbb      	adds	r3, r7, #2
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009100:	f000 fd04 	bl	8009b0c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009104:	1cbb      	adds	r3, r7, #2
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800910c:	4413      	add	r3, r2
 800910e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009116:	2218      	movs	r2, #24
 8009118:	2100      	movs	r1, #0
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fd06 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009120:	233f      	movs	r3, #63	; 0x3f
 8009122:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009126:	f44f 7383 	mov.w	r3, #262	; 0x106
 800912a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800912e:	f107 0310 	add.w	r3, r7, #16
 8009132:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009136:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800913a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800913e:	f107 030f 	add.w	r3, r7, #15
 8009142:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009146:	2301      	movs	r3, #1
 8009148:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800914c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fbae 	bl	80098b4 <hci_send_req>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	da01      	bge.n	8009162 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800915e:	23ff      	movs	r3, #255	; 0xff
 8009160:	e002      	b.n	8009168 <aci_gatt_update_char_value+0x104>
  return status;
 8009162:	f107 030f 	add.w	r3, r7, #15
 8009166:	781b      	ldrb	r3, [r3, #0]
}
 8009168:	4618      	mov	r0, r3
 800916a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800916e:	46bd      	mov	sp, r7
 8009170:	bdb0      	pop	{r4, r5, r7, pc}

08009172 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b0cc      	sub	sp, #304	; 0x130
 8009176:	af00      	add	r7, sp, #0
 8009178:	463b      	mov	r3, r7
 800917a:	601a      	str	r2, [r3, #0]
 800917c:	1dfb      	adds	r3, r7, #7
 800917e:	4602      	mov	r2, r0
 8009180:	701a      	strb	r2, [r3, #0]
 8009182:	1dbb      	adds	r3, r7, #6
 8009184:	460a      	mov	r2, r1
 8009186:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009188:	f107 0310 	add.w	r3, r7, #16
 800918c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009190:	f107 030f 	add.w	r3, r7, #15
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800919e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091a2:	1dfa      	adds	r2, r7, #7
 80091a4:	7812      	ldrb	r2, [r2, #0]
 80091a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80091a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091ac:	3301      	adds	r3, #1
 80091ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80091b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091b6:	1dba      	adds	r2, r7, #6
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80091bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091c0:	3301      	adds	r3, #1
 80091c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80091c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80091ca:	1c98      	adds	r0, r3, #2
 80091cc:	1dbb      	adds	r3, r7, #6
 80091ce:	781a      	ldrb	r2, [r3, #0]
 80091d0:	463b      	mov	r3, r7
 80091d2:	6819      	ldr	r1, [r3, #0]
 80091d4:	f000 fc9a 	bl	8009b0c <Osal_MemCpy>
  index_input += Length;
 80091d8:	1dbb      	adds	r3, r7, #6
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80091e0:	4413      	add	r3, r2
 80091e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091ea:	2218      	movs	r2, #24
 80091ec:	2100      	movs	r1, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fc9c 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 80091f4:	233f      	movs	r3, #63	; 0x3f
 80091f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80091fa:	230c      	movs	r3, #12
 80091fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009200:	f107 0310 	add.w	r3, r7, #16
 8009204:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009208:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800920c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009210:	f107 030f 	add.w	r3, r7, #15
 8009214:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009218:	2301      	movs	r3, #1
 800921a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800921e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f000 fb45 	bl	80098b4 <hci_send_req>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	da01      	bge.n	8009234 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8009230:	23ff      	movs	r3, #255	; 0xff
 8009232:	e002      	b.n	800923a <aci_hal_write_config_data+0xc8>
  return status;
 8009234:	f107 030f 	add.w	r3, r7, #15
 8009238:	781b      	ldrb	r3, [r3, #0]
}
 800923a:	4618      	mov	r0, r3
 800923c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b0cc      	sub	sp, #304	; 0x130
 8009248:	af00      	add	r7, sp, #0
 800924a:	4602      	mov	r2, r0
 800924c:	1dfb      	adds	r3, r7, #7
 800924e:	701a      	strb	r2, [r3, #0]
 8009250:	1dbb      	adds	r3, r7, #6
 8009252:	460a      	mov	r2, r1
 8009254:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009256:	f107 0310 	add.w	r3, r7, #16
 800925a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800925e:	f107 030f 	add.w	r3, r7, #15
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800926c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009270:	1dfa      	adds	r2, r7, #7
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009276:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800927a:	3301      	adds	r3, #1
 800927c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009284:	1dba      	adds	r2, r7, #6
 8009286:	7812      	ldrb	r2, [r2, #0]
 8009288:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800928a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800928e:	3301      	adds	r3, #1
 8009290:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009294:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009298:	2218      	movs	r2, #24
 800929a:	2100      	movs	r1, #0
 800929c:	4618      	mov	r0, r3
 800929e:	f000 fc45 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 80092a2:	233f      	movs	r3, #63	; 0x3f
 80092a4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80092a8:	230f      	movs	r3, #15
 80092aa:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092ae:	f107 0310 	add.w	r3, r7, #16
 80092b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80092be:	f107 030f 	add.w	r3, r7, #15
 80092c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80092c6:	2301      	movs	r3, #1
 80092c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80092cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 faee 	bl	80098b4 <hci_send_req>
 80092d8:	4603      	mov	r3, r0
 80092da:	2b00      	cmp	r3, #0
 80092dc:	da01      	bge.n	80092e2 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80092de:	23ff      	movs	r3, #255	; 0xff
 80092e0:	e002      	b.n	80092e8 <aci_hal_set_tx_power_level+0xa4>
  return status;
 80092e2:	f107 030f 	add.w	r3, r7, #15
 80092e6:	781b      	ldrb	r3, [r3, #0]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}

080092f2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b0cc      	sub	sp, #304	; 0x130
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	4602      	mov	r2, r0
 80092fa:	1dbb      	adds	r3, r7, #6
 80092fc:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80092fe:	f107 0310 	add.w	r3, r7, #16
 8009302:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009306:	f107 030f 	add.w	r3, r7, #15
 800930a:	2200      	movs	r2, #0
 800930c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009314:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009318:	1dba      	adds	r2, r7, #6
 800931a:	8812      	ldrh	r2, [r2, #0]
 800931c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800931e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009322:	3302      	adds	r3, #2
 8009324:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009328:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800932c:	2218      	movs	r2, #24
 800932e:	2100      	movs	r1, #0
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fbfb 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009336:	233f      	movs	r3, #63	; 0x3f
 8009338:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800933c:	2318      	movs	r3, #24
 800933e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009342:	f107 0310 	add.w	r3, r7, #16
 8009346:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800934a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800934e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009352:	f107 030f 	add.w	r3, r7, #15
 8009356:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800935a:	2301      	movs	r3, #1
 800935c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009360:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009364:	2100      	movs	r1, #0
 8009366:	4618      	mov	r0, r3
 8009368:	f000 faa4 	bl	80098b4 <hci_send_req>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	da01      	bge.n	8009376 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8009372:	23ff      	movs	r3, #255	; 0xff
 8009374:	e002      	b.n	800937c <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8009376:	f107 030f 	add.w	r3, r7, #15
 800937a:	781b      	ldrb	r3, [r3, #0]
}
 800937c:	4618      	mov	r0, r3
 800937e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b088      	sub	sp, #32
 800938a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009390:	f107 0308 	add.w	r3, r7, #8
 8009394:	2218      	movs	r2, #24
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fbc7 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x03;
 800939e:	2303      	movs	r3, #3
 80093a0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80093a2:	2303      	movs	r3, #3
 80093a4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80093a6:	1dfb      	adds	r3, r7, #7
 80093a8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80093aa:	2301      	movs	r3, #1
 80093ac:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093ae:	f107 0308 	add.w	r3, r7, #8
 80093b2:	2100      	movs	r1, #0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 fa7d 	bl	80098b4 <hci_send_req>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	da01      	bge.n	80093c4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80093c0:	23ff      	movs	r3, #255	; 0xff
 80093c2:	e000      	b.n	80093c6 <hci_reset+0x40>
  return status;
 80093c4:	79fb      	ldrb	r3, [r7, #7]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3720      	adds	r7, #32
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b0ce      	sub	sp, #312	; 0x138
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	f107 0308 	add.w	r3, r7, #8
 80093d8:	6019      	str	r1, [r3, #0]
 80093da:	1d3b      	adds	r3, r7, #4
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	f107 030e 	add.w	r3, r7, #14
 80093e2:	4602      	mov	r2, r0
 80093e4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80093e6:	f107 0318 	add.w	r3, r7, #24
 80093ea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80093ee:	f107 0310 	add.w	r3, r7, #16
 80093f2:	2205      	movs	r2, #5
 80093f4:	2100      	movs	r1, #0
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 fb98 	bl	8009b2c <Osal_MemSet>
  int index_input = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009402:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009406:	f107 020e 	add.w	r2, r7, #14
 800940a:	8812      	ldrh	r2, [r2, #0]
 800940c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800940e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009412:	3302      	adds	r3, #2
 8009414:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009418:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800941c:	2218      	movs	r2, #24
 800941e:	2100      	movs	r1, #0
 8009420:	4618      	mov	r0, r3
 8009422:	f000 fb83 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x08;
 8009426:	2308      	movs	r3, #8
 8009428:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800942c:	2330      	movs	r3, #48	; 0x30
 800942e:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009432:	f107 0318 	add.w	r3, r7, #24
 8009436:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800943a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800943e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8009442:	f107 0310 	add.w	r3, r7, #16
 8009446:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800944a:	2305      	movs	r3, #5
 800944c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009450:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009454:	2100      	movs	r1, #0
 8009456:	4618      	mov	r0, r3
 8009458:	f000 fa2c 	bl	80098b4 <hci_send_req>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	da01      	bge.n	8009466 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8009462:	23ff      	movs	r3, #255	; 0xff
 8009464:	e016      	b.n	8009494 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8009466:	f107 0310 	add.w	r3, r7, #16
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <hci_le_read_phy+0xaa>
    return resp.Status;
 8009470:	f107 0310 	add.w	r3, r7, #16
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	e00d      	b.n	8009494 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8009478:	f107 0310 	add.w	r3, r7, #16
 800947c:	78da      	ldrb	r2, [r3, #3]
 800947e:	f107 0308 	add.w	r3, r7, #8
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8009486:	f107 0310 	add.w	r3, r7, #16
 800948a:	791a      	ldrb	r2, [r3, #4]
 800948c:	1d3b      	adds	r3, r7, #4
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800949e:	b590      	push	{r4, r7, lr}
 80094a0:	b0cd      	sub	sp, #308	; 0x134
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	4604      	mov	r4, r0
 80094a6:	4608      	mov	r0, r1
 80094a8:	4611      	mov	r1, r2
 80094aa:	1dfb      	adds	r3, r7, #7
 80094ac:	4622      	mov	r2, r4
 80094ae:	701a      	strb	r2, [r3, #0]
 80094b0:	1dbb      	adds	r3, r7, #6
 80094b2:	4602      	mov	r2, r0
 80094b4:	701a      	strb	r2, [r3, #0]
 80094b6:	1d7b      	adds	r3, r7, #5
 80094b8:	460a      	mov	r2, r1
 80094ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80094bc:	f107 0310 	add.w	r3, r7, #16
 80094c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80094c4:	f107 030f 	add.w	r3, r7, #15
 80094c8:	2200      	movs	r2, #0
 80094ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80094cc:	2300      	movs	r3, #0
 80094ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80094d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094d6:	1dfa      	adds	r2, r7, #7
 80094d8:	7812      	ldrb	r2, [r2, #0]
 80094da:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80094dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094e0:	3301      	adds	r3, #1
 80094e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80094e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094ea:	1dba      	adds	r2, r7, #6
 80094ec:	7812      	ldrb	r2, [r2, #0]
 80094ee:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80094f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094f4:	3301      	adds	r3, #1
 80094f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80094fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80094fe:	1d7a      	adds	r2, r7, #5
 8009500:	7812      	ldrb	r2, [r2, #0]
 8009502:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009508:	3301      	adds	r3, #1
 800950a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800950e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009512:	2218      	movs	r2, #24
 8009514:	2100      	movs	r1, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f000 fb08 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x08;
 800951c:	2308      	movs	r3, #8
 800951e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009522:	2331      	movs	r3, #49	; 0x31
 8009524:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009528:	f107 0310 	add.w	r3, r7, #16
 800952c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009534:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009538:	f107 030f 	add.w	r3, r7, #15
 800953c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009540:	2301      	movs	r3, #1
 8009542:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009546:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f000 f9b1 	bl	80098b4 <hci_send_req>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	da01      	bge.n	800955c <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8009558:	23ff      	movs	r3, #255	; 0xff
 800955a:	e002      	b.n	8009562 <hci_le_set_default_phy+0xc4>
  return status;
 800955c:	f107 030f 	add.w	r3, r7, #15
 8009560:	781b      	ldrb	r3, [r3, #0]
}
 8009562:	4618      	mov	r0, r3
 8009564:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009568:	46bd      	mov	sp, r7
 800956a:	bd90      	pop	{r4, r7, pc}

0800956c <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 800956c:	b5b0      	push	{r4, r5, r7, lr}
 800956e:	b0cc      	sub	sp, #304	; 0x130
 8009570:	af00      	add	r7, sp, #0
 8009572:	4605      	mov	r5, r0
 8009574:	460c      	mov	r4, r1
 8009576:	4610      	mov	r0, r2
 8009578:	4619      	mov	r1, r3
 800957a:	1dbb      	adds	r3, r7, #6
 800957c:	462a      	mov	r2, r5
 800957e:	801a      	strh	r2, [r3, #0]
 8009580:	1d3b      	adds	r3, r7, #4
 8009582:	4622      	mov	r2, r4
 8009584:	801a      	strh	r2, [r3, #0]
 8009586:	1cbb      	adds	r3, r7, #2
 8009588:	4602      	mov	r2, r0
 800958a:	801a      	strh	r2, [r3, #0]
 800958c:	463b      	mov	r3, r7
 800958e:	460a      	mov	r2, r1
 8009590:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8009592:	f107 0310 	add.w	r3, r7, #16
 8009596:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800959a:	f107 030f 	add.w	r3, r7, #15
 800959e:	2200      	movs	r2, #0
 80095a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095a2:	2300      	movs	r3, #0
 80095a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80095a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095ac:	1dba      	adds	r2, r7, #6
 80095ae:	8812      	ldrh	r2, [r2, #0]
 80095b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095b6:	3302      	adds	r3, #2
 80095b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80095bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095c0:	1d3a      	adds	r2, r7, #4
 80095c2:	8812      	ldrh	r2, [r2, #0]
 80095c4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80095c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095ca:	3302      	adds	r3, #2
 80095cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80095d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095d4:	1cba      	adds	r2, r7, #2
 80095d6:	8812      	ldrh	r2, [r2, #0]
 80095d8:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80095da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095de:	3302      	adds	r3, #2
 80095e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 80095e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095e8:	463a      	mov	r2, r7
 80095ea:	8812      	ldrh	r2, [r2, #0]
 80095ec:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 80095ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095f2:	3302      	adds	r3, #2
 80095f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 80095f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095fc:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8009600:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8009602:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009606:	3302      	adds	r3, #2
 8009608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800960c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009610:	2218      	movs	r2, #24
 8009612:	2100      	movs	r1, #0
 8009614:	4618      	mov	r0, r3
 8009616:	f000 fa89 	bl	8009b2c <Osal_MemSet>
  rq.ogf = 0x3f;
 800961a:	233f      	movs	r3, #63	; 0x3f
 800961c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8009620:	f240 1381 	movw	r3, #385	; 0x181
 8009624:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009628:	230f      	movs	r3, #15
 800962a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800962e:	f107 0310 	add.w	r3, r7, #16
 8009632:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009636:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800963a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800963e:	f107 030f 	add.w	r3, r7, #15
 8009642:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009646:	2301      	movs	r3, #1
 8009648:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800964c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009650:	2100      	movs	r1, #0
 8009652:	4618      	mov	r0, r3
 8009654:	f000 f92e 	bl	80098b4 <hci_send_req>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	da01      	bge.n	8009662 <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 800965e:	23ff      	movs	r3, #255	; 0xff
 8009660:	e002      	b.n	8009668 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 8009662:	f107 030f 	add.w	r3, r7, #15
 8009666:	781b      	ldrb	r3, [r3, #0]
}
 8009668:	4618      	mov	r0, r3
 800966a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800966e:	46bd      	mov	sp, r7
 8009670:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009674 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800967a:	f3ef 8310 	mrs	r3, PRIMASK
 800967e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009680:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8009682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009684:	b672      	cpsid	i
}
 8009686:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8009688:	1cbb      	adds	r3, r7, #2
 800968a:	4619      	mov	r1, r3
 800968c:	4812      	ldr	r0, [pc, #72]	; (80096d8 <DbgTrace_TxCpltCallback+0x64>)
 800968e:	f001 f82a 	bl	800a6e6 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8009692:	1cbb      	adds	r3, r7, #2
 8009694:	4619      	mov	r1, r3
 8009696:	4810      	ldr	r0, [pc, #64]	; (80096d8 <DbgTrace_TxCpltCallback+0x64>)
 8009698:	f001 f919 	bl	800a8ce <CircularQueue_Sense>
 800969c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00c      	beq.n	80096be <DbgTrace_TxCpltCallback+0x4a>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	f383 8810 	msr	PRIMASK, r3
}
 80096ae:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80096b0:	887b      	ldrh	r3, [r7, #2]
 80096b2:	4a0a      	ldr	r2, [pc, #40]	; (80096dc <DbgTrace_TxCpltCallback+0x68>)
 80096b4:	4619      	mov	r1, r3
 80096b6:	6938      	ldr	r0, [r7, #16]
 80096b8:	f7f7 f85f 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80096bc:	e008      	b.n	80096d0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80096be:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <DbgTrace_TxCpltCallback+0x6c>)
 80096c0:	2201      	movs	r2, #1
 80096c2:	701a      	strb	r2, [r3, #0]
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f383 8810 	msr	PRIMASK, r3
}
 80096ce:	bf00      	nop
}
 80096d0:	bf00      	nop
 80096d2:	3718      	adds	r7, #24
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000264 	.word	0x20000264
 80096dc:	08009675 	.word	0x08009675
 80096e0:	2000003d 	.word	0x2000003d

080096e4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b082      	sub	sp, #8
 80096e8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80096ea:	f7f7 f840 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80096ee:	2302      	movs	r3, #2
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	2300      	movs	r3, #0
 80096f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096f8:	4903      	ldr	r1, [pc, #12]	; (8009708 <DbgTraceInit+0x24>)
 80096fa:	4804      	ldr	r0, [pc, #16]	; (800970c <DbgTraceInit+0x28>)
 80096fc:	f000 fd9a 	bl	800a234 <CircularQueue_Init>
#endif 
#endif
  return;
 8009700:	bf00      	nop
}
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20000284 	.word	0x20000284
 800970c:	20000264 	.word	0x20000264

08009710 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	68b9      	ldr	r1, [r7, #8]
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f805 	bl	8009730 <DbgTraceWrite>
 8009726:	4603      	mov	r3, r0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08a      	sub	sp, #40	; 0x28
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800973c:	2300      	movs	r3, #0
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009740:	f3ef 8310 	mrs	r3, PRIMASK
 8009744:	61bb      	str	r3, [r7, #24]
  return(result);
 8009746:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8009748:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009750:	d102      	bne.n	8009758 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8009752:	2300      	movs	r3, #0
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
 8009756:	e037      	b.n	80097c8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2b01      	cmp	r3, #1
 800975c:	d006      	beq.n	800976c <DbgTraceWrite+0x3c>
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b02      	cmp	r3, #2
 8009762:	d003      	beq.n	800976c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8009764:	f04f 33ff 	mov.w	r3, #4294967295
 8009768:	627b      	str	r3, [r7, #36]	; 0x24
 800976a:	e02d      	b.n	80097c8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d02a      	beq.n	80097c8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8009776:	b672      	cpsid	i
}
 8009778:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	b29a      	uxth	r2, r3
 800977e:	2301      	movs	r3, #1
 8009780:	68b9      	ldr	r1, [r7, #8]
 8009782:	4814      	ldr	r0, [pc, #80]	; (80097d4 <DbgTraceWrite+0xa4>)
 8009784:	f000 fd88 	bl	800a298 <CircularQueue_Add>
 8009788:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d015      	beq.n	80097bc <DbgTraceWrite+0x8c>
 8009790:	4b11      	ldr	r3, [pc, #68]	; (80097d8 <DbgTraceWrite+0xa8>)
 8009792:	781b      	ldrb	r3, [r3, #0]
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d010      	beq.n	80097bc <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800979a:	4b0f      	ldr	r3, [pc, #60]	; (80097d8 <DbgTraceWrite+0xa8>)
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]
 80097a0:	6a3b      	ldr	r3, [r7, #32]
 80097a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f383 8810 	msr	PRIMASK, r3
}
 80097aa:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <DbgTraceWrite+0xac>)
 80097b2:	4619      	mov	r1, r3
 80097b4:	69f8      	ldr	r0, [r7, #28]
 80097b6:	f7f6 ffe0 	bl	800077a <DbgOutputTraces>
 80097ba:	e005      	b.n	80097c8 <DbgTraceWrite+0x98>
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f383 8810 	msr	PRIMASK, r3
}
 80097c6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3728      	adds	r7, #40	; 0x28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000264 	.word	0x20000264
 80097d8:	2000003d 	.word	0x2000003d
 80097dc:	08009675 	.word	0x08009675

080097e0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	4a08      	ldr	r2, [pc, #32]	; (8009810 <hci_init+0x30>)
 80097f0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80097f2:	4a08      	ldr	r2, [pc, #32]	; (8009814 <hci_init+0x34>)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80097f8:	4806      	ldr	r0, [pc, #24]	; (8009814 <hci_init+0x34>)
 80097fa:	f000 f973 	bl	8009ae4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4618      	mov	r0, r3
 8009804:	f000 f8d4 	bl	80099b0 <TlInit>

  return;
 8009808:	bf00      	nop
}
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	200012ac 	.word	0x200012ac
 8009814:	20001284 	.word	0x20001284

08009818 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800981e:	4822      	ldr	r0, [pc, #136]	; (80098a8 <hci_user_evt_proc+0x90>)
 8009820:	f000 fc5a 	bl	800a0d8 <LST_is_empty>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d12b      	bne.n	8009882 <hci_user_evt_proc+0x6a>
 800982a:	4b20      	ldr	r3, [pc, #128]	; (80098ac <hci_user_evt_proc+0x94>)
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d027      	beq.n	8009882 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009832:	f107 030c 	add.w	r3, r7, #12
 8009836:	4619      	mov	r1, r3
 8009838:	481b      	ldr	r0, [pc, #108]	; (80098a8 <hci_user_evt_proc+0x90>)
 800983a:	f000 fcdc 	bl	800a1f6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800983e:	4b1c      	ldr	r3, [pc, #112]	; (80098b0 <hci_user_evt_proc+0x98>)
 8009840:	69db      	ldr	r3, [r3, #28]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00c      	beq.n	8009860 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800984a:	2301      	movs	r3, #1
 800984c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800984e:	4b18      	ldr	r3, [pc, #96]	; (80098b0 <hci_user_evt_proc+0x98>)
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	1d3a      	adds	r2, r7, #4
 8009854:	4610      	mov	r0, r2
 8009856:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009858:	793a      	ldrb	r2, [r7, #4]
 800985a:	4b14      	ldr	r3, [pc, #80]	; (80098ac <hci_user_evt_proc+0x94>)
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	e002      	b.n	8009866 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009860:	4b12      	ldr	r3, [pc, #72]	; (80098ac <hci_user_evt_proc+0x94>)
 8009862:	2201      	movs	r2, #1
 8009864:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009866:	4b11      	ldr	r3, [pc, #68]	; (80098ac <hci_user_evt_proc+0x94>)
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d004      	beq.n	8009878 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	4618      	mov	r0, r3
 8009872:	f001 fb79 	bl	800af68 <TL_MM_EvtDone>
 8009876:	e004      	b.n	8009882 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4619      	mov	r1, r3
 800987c:	480a      	ldr	r0, [pc, #40]	; (80098a8 <hci_user_evt_proc+0x90>)
 800987e:	f000 fc4d 	bl	800a11c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009882:	4809      	ldr	r0, [pc, #36]	; (80098a8 <hci_user_evt_proc+0x90>)
 8009884:	f000 fc28 	bl	800a0d8 <LST_is_empty>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d107      	bne.n	800989e <hci_user_evt_proc+0x86>
 800988e:	4b07      	ldr	r3, [pc, #28]	; (80098ac <hci_user_evt_proc+0x94>)
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009896:	4804      	ldr	r0, [pc, #16]	; (80098a8 <hci_user_evt_proc+0x90>)
 8009898:	f7f9 fd02 	bl	80032a0 <hci_notify_asynch_evt>
  }


  return;
 800989c:	bf00      	nop
 800989e:	bf00      	nop
}
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	200001dc 	.word	0x200001dc
 80098ac:	200001e8 	.word	0x200001e8
 80098b0:	20001284 	.word	0x20001284

080098b4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80098c0:	2000      	movs	r0, #0
 80098c2:	f000 f8cb 	bl	8009a5c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80098c6:	2300      	movs	r3, #0
 80098c8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	885b      	ldrh	r3, [r3, #2]
 80098ce:	b21b      	sxth	r3, r3
 80098d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098d4:	b21a      	sxth	r2, r3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	029b      	lsls	r3, r3, #10
 80098dc:	b21b      	sxth	r3, r3
 80098de:	4313      	orrs	r3, r2
 80098e0:	b21b      	sxth	r3, r3
 80098e2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	b2d9      	uxtb	r1, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	689a      	ldr	r2, [r3, #8]
 80098ee:	8bbb      	ldrh	r3, [r7, #28]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f000 f88d 	bl	8009a10 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80098f6:	e04e      	b.n	8009996 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80098f8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80098fc:	f7f9 fce7 	bl	80032ce <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009900:	e043      	b.n	800998a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009902:	f107 030c 	add.w	r3, r7, #12
 8009906:	4619      	mov	r1, r3
 8009908:	4828      	ldr	r0, [pc, #160]	; (80099ac <hci_send_req+0xf8>)
 800990a:	f000 fc74 	bl	800a1f6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	7a5b      	ldrb	r3, [r3, #9]
 8009912:	2b0f      	cmp	r3, #15
 8009914:	d114      	bne.n	8009940 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	330b      	adds	r3, #11
 800991a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	885b      	ldrh	r3, [r3, #2]
 8009920:	b29b      	uxth	r3, r3
 8009922:	8bba      	ldrh	r2, [r7, #28]
 8009924:	429a      	cmp	r2, r3
 8009926:	d104      	bne.n	8009932 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	693a      	ldr	r2, [r7, #16]
 800992e:	7812      	ldrb	r2, [r2, #0]
 8009930:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d027      	beq.n	800998a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800993a:	2301      	movs	r3, #1
 800993c:	77fb      	strb	r3, [r7, #31]
 800993e:	e024      	b.n	800998a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	330b      	adds	r3, #11
 8009944:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800994c:	b29b      	uxth	r3, r3
 800994e:	8bba      	ldrh	r2, [r7, #28]
 8009950:	429a      	cmp	r2, r3
 8009952:	d114      	bne.n	800997e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	7a9b      	ldrb	r3, [r3, #10]
 8009958:	3b03      	subs	r3, #3
 800995a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	695a      	ldr	r2, [r3, #20]
 8009960:	7dfb      	ldrb	r3, [r7, #23]
 8009962:	429a      	cmp	r2, r3
 8009964:	bfa8      	it	ge
 8009966:	461a      	movge	r2, r3
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6918      	ldr	r0, [r3, #16]
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	1cd9      	adds	r1, r3, #3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	461a      	mov	r2, r3
 800997a:	f001 fe41 	bl	800b600 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d001      	beq.n	800998a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009986:	2301      	movs	r3, #1
 8009988:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800998a:	4808      	ldr	r0, [pc, #32]	; (80099ac <hci_send_req+0xf8>)
 800998c:	f000 fba4 	bl	800a0d8 <LST_is_empty>
 8009990:	4603      	mov	r3, r0
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0b5      	beq.n	8009902 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009996:	7ffb      	ldrb	r3, [r7, #31]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0ad      	beq.n	80098f8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800999c:	2001      	movs	r0, #1
 800999e:	f000 f85d 	bl	8009a5c <NotifyCmdStatus>

  return 0;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3720      	adds	r7, #32
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	200012a4 	.word	0x200012a4

080099b0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80099b8:	480f      	ldr	r0, [pc, #60]	; (80099f8 <TlInit+0x48>)
 80099ba:	f000 fb7d 	bl	800a0b8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80099be:	4a0f      	ldr	r2, [pc, #60]	; (80099fc <TlInit+0x4c>)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80099c4:	480e      	ldr	r0, [pc, #56]	; (8009a00 <TlInit+0x50>)
 80099c6:	f000 fb77 	bl	800a0b8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80099ca:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <TlInit+0x54>)
 80099cc:	2201      	movs	r2, #1
 80099ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80099d0:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <TlInit+0x58>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00a      	beq.n	80099ee <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80099dc:	4b0b      	ldr	r3, [pc, #44]	; (8009a0c <TlInit+0x5c>)
 80099de:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80099e0:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <TlInit+0x58>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f107 0208 	add.w	r2, r7, #8
 80099e8:	4610      	mov	r0, r2
 80099ea:	4798      	blx	r3
  }

  return;
 80099ec:	bf00      	nop
 80099ee:	bf00      	nop
}
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	200012a4 	.word	0x200012a4
 80099fc:	200001e4 	.word	0x200001e4
 8009a00:	200001dc 	.word	0x200001dc
 8009a04:	200001e8 	.word	0x200001e8
 8009a08:	20001284 	.word	0x20001284
 8009a0c:	08009a9d 	.word	0x08009a9d

08009a10 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	603a      	str	r2, [r7, #0]
 8009a1a:	80fb      	strh	r3, [r7, #6]
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009a20:	4b0c      	ldr	r3, [pc, #48]	; (8009a54 <SendCmd+0x44>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	88fa      	ldrh	r2, [r7, #6]
 8009a26:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009a2a:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <SendCmd+0x44>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	797a      	ldrb	r2, [r7, #5]
 8009a30:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009a32:	4b08      	ldr	r3, [pc, #32]	; (8009a54 <SendCmd+0x44>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	330c      	adds	r3, #12
 8009a38:	797a      	ldrb	r2, [r7, #5]
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f001 fddf 	bl	800b600 <memcpy>

  hciContext.io.Send(0,0);
 8009a42:	4b05      	ldr	r3, [pc, #20]	; (8009a58 <SendCmd+0x48>)
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	2100      	movs	r1, #0
 8009a48:	2000      	movs	r0, #0
 8009a4a:	4798      	blx	r3

  return;
 8009a4c:	bf00      	nop
}
 8009a4e:	3708      	adds	r7, #8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	200001e4 	.word	0x200001e4
 8009a58:	20001284 	.word	0x20001284

08009a5c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009a66:	79fb      	ldrb	r3, [r7, #7]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d108      	bne.n	8009a7e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <NotifyCmdStatus+0x3c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00d      	beq.n	8009a90 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009a74:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <NotifyCmdStatus+0x3c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2000      	movs	r0, #0
 8009a7a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009a7c:	e008      	b.n	8009a90 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009a7e:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <NotifyCmdStatus+0x3c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d004      	beq.n	8009a90 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009a86:	4b04      	ldr	r3, [pc, #16]	; (8009a98 <NotifyCmdStatus+0x3c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	4798      	blx	r3
  return;
 8009a8e:	bf00      	nop
 8009a90:	bf00      	nop
}
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	200012ac 	.word	0x200012ac

08009a9c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	7a5b      	ldrb	r3, [r3, #9]
 8009aa8:	2b0f      	cmp	r3, #15
 8009aaa:	d003      	beq.n	8009ab4 <TlEvtReceived+0x18>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	7a5b      	ldrb	r3, [r3, #9]
 8009ab0:	2b0e      	cmp	r3, #14
 8009ab2:	d107      	bne.n	8009ac4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009ab4:	6879      	ldr	r1, [r7, #4]
 8009ab6:	4809      	ldr	r0, [pc, #36]	; (8009adc <TlEvtReceived+0x40>)
 8009ab8:	f000 fb56 	bl	800a168 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009abc:	2000      	movs	r0, #0
 8009abe:	f7f9 fbfb 	bl	80032b8 <hci_cmd_resp_release>
 8009ac2:	e006      	b.n	8009ad2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	4806      	ldr	r0, [pc, #24]	; (8009ae0 <TlEvtReceived+0x44>)
 8009ac8:	f000 fb4e 	bl	800a168 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009acc:	4804      	ldr	r0, [pc, #16]	; (8009ae0 <TlEvtReceived+0x44>)
 8009ace:	f7f9 fbe7 	bl	80032a0 <hci_notify_asynch_evt>
  }

  return;
 8009ad2:	bf00      	nop
}
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	200012a4 	.word	0x200012a4
 8009ae0:	200001dc 	.word	0x200001dc

08009ae4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a05      	ldr	r2, [pc, #20]	; (8009b04 <hci_register_io_bus+0x20>)
 8009af0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a04      	ldr	r2, [pc, #16]	; (8009b08 <hci_register_io_bus+0x24>)
 8009af6:	611a      	str	r2, [r3, #16]

  return;
 8009af8:	bf00      	nop
}
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	0800ace1 	.word	0x0800ace1
 8009b08:	0800ad49 	.word	0x0800ad49

08009b0c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f001 fd6f 	bl	800b600 <memcpy>
 8009b22:	4603      	mov	r3, r0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	68b9      	ldr	r1, [r7, #8]
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f001 fd6d 	bl	800b61c <memset>
 8009b42:	4603      	mov	r3, r0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	4603      	mov	r3, r0
 8009b54:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009b56:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <OTP_Read+0x48>)
 8009b58:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009b5a:	e002      	b.n	8009b62 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3b08      	subs	r3, #8
 8009b60:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	3307      	adds	r3, #7
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	79fa      	ldrb	r2, [r7, #7]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d003      	beq.n	8009b76 <OTP_Read+0x2a>
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	4a09      	ldr	r2, [pc, #36]	; (8009b98 <OTP_Read+0x4c>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d1f2      	bne.n	8009b5c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3307      	adds	r3, #7
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	79fa      	ldrb	r2, [r7, #7]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d001      	beq.n	8009b86 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009b82:	2300      	movs	r3, #0
 8009b84:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3714      	adds	r7, #20
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b92:	4770      	bx	lr
 8009b94:	1fff73f8 	.word	0x1fff73f8
 8009b98:	1fff7000 	.word	0x1fff7000

08009b9c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	; 0x28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	3301      	adds	r3, #1
 8009bae:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2bff      	cmp	r3, #255	; 0xff
 8009bb6:	d14f      	bne.n	8009c58 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009bb8:	6a3b      	ldr	r3, [r7, #32]
 8009bba:	3302      	adds	r3, #2
 8009bbc:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	881b      	ldrh	r3, [r3, #0]
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	f640 4301 	movw	r3, #3073	; 0xc01
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d140      	bne.n	8009c50 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	3302      	adds	r3, #2
 8009bd2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	885b      	ldrh	r3, [r3, #2]
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	461a      	mov	r2, r3
 8009bdc:	4b22      	ldr	r3, [pc, #136]	; (8009c68 <PeerToPeer_Event_Handler+0xcc>)
 8009bde:	889b      	ldrh	r3, [r3, #4]
 8009be0:	3302      	adds	r3, #2
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d118      	bne.n	8009c18 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8009bec:	69bb      	ldr	r3, [r7, #24]
 8009bee:	7a1b      	ldrb	r3, [r3, #8]
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d007      	beq.n	8009c08 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009bfc:	f107 0308 	add.w	r3, r7, #8
 8009c00:	4618      	mov	r0, r3
 8009c02:	f7f9 fba7 	bl	8003354 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8009c06:	e025      	b.n	8009c54 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8009c0c:	f107 0308 	add.w	r3, r7, #8
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7f9 fb9f 	bl	8003354 <P2PS_STM_App_Notification>
        break;
 8009c16:	e01d      	b.n	8009c54 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	885b      	ldrh	r3, [r3, #2]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	461a      	mov	r2, r3
 8009c20:	4b11      	ldr	r3, [pc, #68]	; (8009c68 <PeerToPeer_Event_Handler+0xcc>)
 8009c22:	885b      	ldrh	r3, [r3, #2]
 8009c24:	3301      	adds	r3, #1
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d114      	bne.n	8009c54 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8009c2a:	4810      	ldr	r0, [pc, #64]	; (8009c6c <PeerToPeer_Event_Handler+0xd0>)
 8009c2c:	f001 fd84 	bl	800b738 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009c34:	69bb      	ldr	r3, [r7, #24]
 8009c36:	88db      	ldrh	r3, [r3, #6]
 8009c38:	b29b      	uxth	r3, r3
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	3308      	adds	r3, #8
 8009c42:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8009c44:	f107 0308 	add.w	r3, r7, #8
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f7f9 fb83 	bl	8003354 <P2PS_STM_App_Notification>
        break;
 8009c4e:	e001      	b.n	8009c54 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 8009c50:	bf00      	nop
 8009c52:	e002      	b.n	8009c5a <PeerToPeer_Event_Handler+0xbe>
        break;
 8009c54:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009c56:	e000      	b.n	8009c5a <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 8009c58:	bf00      	nop
  }

  return(return_value);
 8009c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3728      	adds	r7, #40	; 0x28
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	200001ec 	.word	0x200001ec
 8009c6c:	0800cd88 	.word	0x0800cd88

08009c70 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b08a      	sub	sp, #40	; 0x28
 8009c74:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8009c76:	484a      	ldr	r0, [pc, #296]	; (8009da0 <P2PS_STM_Init+0x130>)
 8009c78:	f000 ff84 	bl	800ab84 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8009c7c:	238f      	movs	r3, #143	; 0x8f
 8009c7e:	703b      	strb	r3, [r7, #0]
 8009c80:	23e5      	movs	r3, #229	; 0xe5
 8009c82:	707b      	strb	r3, [r7, #1]
 8009c84:	23b3      	movs	r3, #179	; 0xb3
 8009c86:	70bb      	strb	r3, [r7, #2]
 8009c88:	23d5      	movs	r3, #213	; 0xd5
 8009c8a:	70fb      	strb	r3, [r7, #3]
 8009c8c:	232e      	movs	r3, #46	; 0x2e
 8009c8e:	713b      	strb	r3, [r7, #4]
 8009c90:	237f      	movs	r3, #127	; 0x7f
 8009c92:	717b      	strb	r3, [r7, #5]
 8009c94:	234a      	movs	r3, #74	; 0x4a
 8009c96:	71bb      	strb	r3, [r7, #6]
 8009c98:	2398      	movs	r3, #152	; 0x98
 8009c9a:	71fb      	strb	r3, [r7, #7]
 8009c9c:	232a      	movs	r3, #42	; 0x2a
 8009c9e:	723b      	strb	r3, [r7, #8]
 8009ca0:	2348      	movs	r3, #72	; 0x48
 8009ca2:	727b      	strb	r3, [r7, #9]
 8009ca4:	237a      	movs	r3, #122	; 0x7a
 8009ca6:	72bb      	strb	r3, [r7, #10]
 8009ca8:	23cc      	movs	r3, #204	; 0xcc
 8009caa:	72fb      	strb	r3, [r7, #11]
 8009cac:	2340      	movs	r3, #64	; 0x40
 8009cae:	733b      	strb	r3, [r7, #12]
 8009cb0:	23fe      	movs	r3, #254	; 0xfe
 8009cb2:	737b      	strb	r3, [r7, #13]
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	73bb      	strb	r3, [r7, #14]
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8009cbc:	4639      	mov	r1, r7
 8009cbe:	4b39      	ldr	r3, [pc, #228]	; (8009da4 <P2PS_STM_Init+0x134>)
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	2308      	movs	r3, #8
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	2002      	movs	r0, #2
 8009cc8:	f7ff f833 	bl	8008d32 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8009ccc:	2319      	movs	r3, #25
 8009cce:	703b      	strb	r3, [r7, #0]
 8009cd0:	23ed      	movs	r3, #237	; 0xed
 8009cd2:	707b      	strb	r3, [r7, #1]
 8009cd4:	2382      	movs	r3, #130	; 0x82
 8009cd6:	70bb      	strb	r3, [r7, #2]
 8009cd8:	23ae      	movs	r3, #174	; 0xae
 8009cda:	70fb      	strb	r3, [r7, #3]
 8009cdc:	23ed      	movs	r3, #237	; 0xed
 8009cde:	713b      	strb	r3, [r7, #4]
 8009ce0:	2321      	movs	r3, #33	; 0x21
 8009ce2:	717b      	strb	r3, [r7, #5]
 8009ce4:	234c      	movs	r3, #76	; 0x4c
 8009ce6:	71bb      	strb	r3, [r7, #6]
 8009ce8:	239d      	movs	r3, #157	; 0x9d
 8009cea:	71fb      	strb	r3, [r7, #7]
 8009cec:	2341      	movs	r3, #65	; 0x41
 8009cee:	723b      	strb	r3, [r7, #8]
 8009cf0:	2345      	movs	r3, #69	; 0x45
 8009cf2:	727b      	strb	r3, [r7, #9]
 8009cf4:	2322      	movs	r3, #34	; 0x22
 8009cf6:	72bb      	strb	r3, [r7, #10]
 8009cf8:	238e      	movs	r3, #142	; 0x8e
 8009cfa:	72fb      	strb	r3, [r7, #11]
 8009cfc:	2341      	movs	r3, #65	; 0x41
 8009cfe:	733b      	strb	r3, [r7, #12]
 8009d00:	23fe      	movs	r3, #254	; 0xfe
 8009d02:	737b      	strb	r3, [r7, #13]
 8009d04:	2300      	movs	r3, #0
 8009d06:	73bb      	strb	r3, [r7, #14]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009d0c:	4b25      	ldr	r3, [pc, #148]	; (8009da4 <P2PS_STM_Init+0x134>)
 8009d0e:	8818      	ldrh	r0, [r3, #0]
 8009d10:	463a      	mov	r2, r7
 8009d12:	4b25      	ldr	r3, [pc, #148]	; (8009da8 <P2PS_STM_Init+0x138>)
 8009d14:	9305      	str	r3, [sp, #20]
 8009d16:	2301      	movs	r3, #1
 8009d18:	9304      	str	r3, [sp, #16]
 8009d1a:	230a      	movs	r3, #10
 8009d1c:	9303      	str	r3, [sp, #12]
 8009d1e:	2301      	movs	r3, #1
 8009d20:	9302      	str	r3, [sp, #8]
 8009d22:	2300      	movs	r3, #0
 8009d24:	9301      	str	r3, [sp, #4]
 8009d26:	2306      	movs	r3, #6
 8009d28:	9300      	str	r3, [sp, #0]
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	2102      	movs	r1, #2
 8009d2e:	f7ff f8af 	bl	8008e90 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8009d32:	2319      	movs	r3, #25
 8009d34:	703b      	strb	r3, [r7, #0]
 8009d36:	23ed      	movs	r3, #237	; 0xed
 8009d38:	707b      	strb	r3, [r7, #1]
 8009d3a:	2382      	movs	r3, #130	; 0x82
 8009d3c:	70bb      	strb	r3, [r7, #2]
 8009d3e:	23ae      	movs	r3, #174	; 0xae
 8009d40:	70fb      	strb	r3, [r7, #3]
 8009d42:	23ed      	movs	r3, #237	; 0xed
 8009d44:	713b      	strb	r3, [r7, #4]
 8009d46:	2321      	movs	r3, #33	; 0x21
 8009d48:	717b      	strb	r3, [r7, #5]
 8009d4a:	234c      	movs	r3, #76	; 0x4c
 8009d4c:	71bb      	strb	r3, [r7, #6]
 8009d4e:	239d      	movs	r3, #157	; 0x9d
 8009d50:	71fb      	strb	r3, [r7, #7]
 8009d52:	2341      	movs	r3, #65	; 0x41
 8009d54:	723b      	strb	r3, [r7, #8]
 8009d56:	2345      	movs	r3, #69	; 0x45
 8009d58:	727b      	strb	r3, [r7, #9]
 8009d5a:	2322      	movs	r3, #34	; 0x22
 8009d5c:	72bb      	strb	r3, [r7, #10]
 8009d5e:	238e      	movs	r3, #142	; 0x8e
 8009d60:	72fb      	strb	r3, [r7, #11]
 8009d62:	2342      	movs	r3, #66	; 0x42
 8009d64:	733b      	strb	r3, [r7, #12]
 8009d66:	23fe      	movs	r3, #254	; 0xfe
 8009d68:	737b      	strb	r3, [r7, #13]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73bb      	strb	r3, [r7, #14]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009d72:	4b0c      	ldr	r3, [pc, #48]	; (8009da4 <P2PS_STM_Init+0x134>)
 8009d74:	8818      	ldrh	r0, [r3, #0]
 8009d76:	463a      	mov	r2, r7
 8009d78:	4b0c      	ldr	r3, [pc, #48]	; (8009dac <P2PS_STM_Init+0x13c>)
 8009d7a:	9305      	str	r3, [sp, #20]
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	9304      	str	r3, [sp, #16]
 8009d80:	230a      	movs	r3, #10
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	2301      	movs	r3, #1
 8009d86:	9302      	str	r3, [sp, #8]
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9301      	str	r3, [sp, #4]
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	9300      	str	r3, [sp, #0]
 8009d90:	2302      	movs	r3, #2
 8009d92:	2102      	movs	r1, #2
 8009d94:	f7ff f87c 	bl	8008e90 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8009d98:	bf00      	nop
}
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	08009b9d 	.word	0x08009b9d
 8009da4:	200001ec 	.word	0x200001ec
 8009da8:	200001ee 	.word	0x200001ee
 8009dac:	200001f0 	.word	0x200001f0

08009db0 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af02      	add	r7, sp, #8
 8009db6:	4603      	mov	r3, r0
 8009db8:	6039      	str	r1, [r7, #0]
 8009dba:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8009dbc:	2342      	movs	r3, #66	; 0x42
 8009dbe:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8009dc0:	88fb      	ldrh	r3, [r7, #6]
 8009dc2:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d10c      	bne.n	8009de4 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009dca:	4b09      	ldr	r3, [pc, #36]	; (8009df0 <P2PS_STM_App_Update_Char+0x40>)
 8009dcc:	8818      	ldrh	r0, [r3, #0]
 8009dce:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <P2PS_STM_App_Update_Char+0x40>)
 8009dd0:	8899      	ldrh	r1, [r3, #4]
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f7ff f943 	bl	8009064 <aci_gatt_update_char_value>
 8009dde:	4603      	mov	r3, r0
 8009de0:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8009de2:	e000      	b.n	8009de6 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8009de4:	bf00      	nop
  }

  return result;
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	200001ec 	.word	0x200001ec

08009df4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b088      	sub	sp, #32
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009dfc:	f107 030c 	add.w	r3, r7, #12
 8009e00:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	2124      	movs	r1, #36	; 0x24
 8009e0c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009e10:	f000 f888 	bl	8009f24 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	330b      	adds	r3, #11
 8009e18:	78db      	ldrb	r3, [r3, #3]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3720      	adds	r7, #32
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b088      	sub	sp, #32
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009e2a:	f107 030c 	add.w	r3, r7, #12
 8009e2e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	210f      	movs	r1, #15
 8009e3a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009e3e:	f000 f871 	bl	8009f24 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	330b      	adds	r3, #11
 8009e46:	78db      	ldrb	r3, [r3, #3]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3720      	adds	r7, #32
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	4a08      	ldr	r2, [pc, #32]	; (8009e80 <shci_init+0x30>)
 8009e60:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009e62:	4a08      	ldr	r2, [pc, #32]	; (8009e84 <shci_init+0x34>)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009e68:	4806      	ldr	r0, [pc, #24]	; (8009e84 <shci_init+0x34>)
 8009e6a:	f000 f911 	bl	800a090 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 f894 	bl	8009fa0 <TlInit>

  return;
 8009e78:	bf00      	nop
}
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	200012d0 	.word	0x200012d0
 8009e84:	200012b0 	.word	0x200012b0

08009e88 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009e8e:	4822      	ldr	r0, [pc, #136]	; (8009f18 <shci_user_evt_proc+0x90>)
 8009e90:	f000 f922 	bl	800a0d8 <LST_is_empty>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d12b      	bne.n	8009ef2 <shci_user_evt_proc+0x6a>
 8009e9a:	4b20      	ldr	r3, [pc, #128]	; (8009f1c <shci_user_evt_proc+0x94>)
 8009e9c:	781b      	ldrb	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d027      	beq.n	8009ef2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009ea2:	f107 030c 	add.w	r3, r7, #12
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	481b      	ldr	r0, [pc, #108]	; (8009f18 <shci_user_evt_proc+0x90>)
 8009eaa:	f000 f9a4 	bl	800a1f6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009eae:	4b1c      	ldr	r3, [pc, #112]	; (8009f20 <shci_user_evt_proc+0x98>)
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00c      	beq.n	8009ed0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009ebe:	4b18      	ldr	r3, [pc, #96]	; (8009f20 <shci_user_evt_proc+0x98>)
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	1d3a      	adds	r2, r7, #4
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009ec8:	793a      	ldrb	r2, [r7, #4]
 8009eca:	4b14      	ldr	r3, [pc, #80]	; (8009f1c <shci_user_evt_proc+0x94>)
 8009ecc:	701a      	strb	r2, [r3, #0]
 8009ece:	e002      	b.n	8009ed6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009ed0:	4b12      	ldr	r3, [pc, #72]	; (8009f1c <shci_user_evt_proc+0x94>)
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009ed6:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <shci_user_evt_proc+0x94>)
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d004      	beq.n	8009ee8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f001 f841 	bl	800af68 <TL_MM_EvtDone>
 8009ee6:	e004      	b.n	8009ef2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4619      	mov	r1, r3
 8009eec:	480a      	ldr	r0, [pc, #40]	; (8009f18 <shci_user_evt_proc+0x90>)
 8009eee:	f000 f915 	bl	800a11c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009ef2:	4809      	ldr	r0, [pc, #36]	; (8009f18 <shci_user_evt_proc+0x90>)
 8009ef4:	f000 f8f0 	bl	800a0d8 <LST_is_empty>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d107      	bne.n	8009f0e <shci_user_evt_proc+0x86>
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <shci_user_evt_proc+0x94>)
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d003      	beq.n	8009f0e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009f06:	4804      	ldr	r0, [pc, #16]	; (8009f18 <shci_user_evt_proc+0x90>)
 8009f08:	f7f6 fd19 	bl	800093e <shci_notify_asynch_evt>
  }


  return;
 8009f0c:	bf00      	nop
 8009f0e:	bf00      	nop
}
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20000218 	.word	0x20000218
 8009f1c:	20000228 	.word	0x20000228
 8009f20:	200012b0 	.word	0x200012b0

08009f24 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	60ba      	str	r2, [r7, #8]
 8009f2c:	607b      	str	r3, [r7, #4]
 8009f2e:	4603      	mov	r3, r0
 8009f30:	81fb      	strh	r3, [r7, #14]
 8009f32:	460b      	mov	r3, r1
 8009f34:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009f36:	2000      	movs	r0, #0
 8009f38:	f000 f864 	bl	800a004 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009f3c:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <shci_send+0x74>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	89fa      	ldrh	r2, [r7, #14]
 8009f42:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009f46:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <shci_send+0x74>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	7b7a      	ldrb	r2, [r7, #13]
 8009f4c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009f4e:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <shci_send+0x74>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	330c      	adds	r3, #12
 8009f54:	7b7a      	ldrb	r2, [r7, #13]
 8009f56:	68b9      	ldr	r1, [r7, #8]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f001 fb51 	bl	800b600 <memcpy>

  shciContext.io.Send(0,0);
 8009f5e:	4b0f      	ldr	r3, [pc, #60]	; (8009f9c <shci_send+0x78>)
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	2100      	movs	r1, #0
 8009f64:	2000      	movs	r0, #0
 8009f66:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009f68:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009f6c:	f7f6 fcfe 	bl	800096c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f103 0008 	add.w	r0, r3, #8
 8009f76:	4b08      	ldr	r3, [pc, #32]	; (8009f98 <shci_send+0x74>)
 8009f78:	6819      	ldr	r1, [r3, #0]
 8009f7a:	4b07      	ldr	r3, [pc, #28]	; (8009f98 <shci_send+0x74>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	789b      	ldrb	r3, [r3, #2]
 8009f80:	3303      	adds	r3, #3
 8009f82:	461a      	mov	r2, r3
 8009f84:	f001 fb3c 	bl	800b600 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009f88:	2001      	movs	r0, #1
 8009f8a:	f000 f83b 	bl	800a004 <Cmd_SetStatus>

  return;
 8009f8e:	bf00      	nop
}
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	20000224 	.word	0x20000224
 8009f9c:	200012b0 	.word	0x200012b0

08009fa0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8009fa8:	4a10      	ldr	r2, [pc, #64]	; (8009fec <TlInit+0x4c>)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8009fae:	4810      	ldr	r0, [pc, #64]	; (8009ff0 <TlInit+0x50>)
 8009fb0:	f000 f882 	bl	800a0b8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8009fb4:	2001      	movs	r0, #1
 8009fb6:	f000 f825 	bl	800a004 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009fba:	4b0e      	ldr	r3, [pc, #56]	; (8009ff4 <TlInit+0x54>)
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <TlInit+0x58>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d00c      	beq.n	8009fe2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8009fcc:	4b0b      	ldr	r3, [pc, #44]	; (8009ffc <TlInit+0x5c>)
 8009fce:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <TlInit+0x60>)
 8009fd2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8009fd4:	4b08      	ldr	r3, [pc, #32]	; (8009ff8 <TlInit+0x58>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f107 020c 	add.w	r2, r7, #12
 8009fdc:	4610      	mov	r0, r2
 8009fde:	4798      	blx	r3
  }

  return;
 8009fe0:	bf00      	nop
 8009fe2:	bf00      	nop
}
 8009fe4:	3718      	adds	r7, #24
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	20000224 	.word	0x20000224
 8009ff0:	20000218 	.word	0x20000218
 8009ff4:	20000228 	.word	0x20000228
 8009ff8:	200012b0 	.word	0x200012b0
 8009ffc:	0800a055 	.word	0x0800a055
 800a000:	0800a06d 	.word	0x0800a06d

0800a004 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b082      	sub	sp, #8
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4603      	mov	r3, r0
 800a00c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a00e:	79fb      	ldrb	r3, [r7, #7]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10b      	bne.n	800a02c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a014:	4b0d      	ldr	r3, [pc, #52]	; (800a04c <Cmd_SetStatus+0x48>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a01c:	4b0b      	ldr	r3, [pc, #44]	; (800a04c <Cmd_SetStatus+0x48>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2000      	movs	r0, #0
 800a022:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a024:	4b0a      	ldr	r3, [pc, #40]	; (800a050 <Cmd_SetStatus+0x4c>)
 800a026:	2200      	movs	r2, #0
 800a028:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a02a:	e00b      	b.n	800a044 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a02c:	4b08      	ldr	r3, [pc, #32]	; (800a050 <Cmd_SetStatus+0x4c>)
 800a02e:	2201      	movs	r2, #1
 800a030:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a032:	4b06      	ldr	r3, [pc, #24]	; (800a04c <Cmd_SetStatus+0x48>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d004      	beq.n	800a044 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a03a:	4b04      	ldr	r3, [pc, #16]	; (800a04c <Cmd_SetStatus+0x48>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2001      	movs	r0, #1
 800a040:	4798      	blx	r3
  return;
 800a042:	bf00      	nop
 800a044:	bf00      	nop
}
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	200012d0 	.word	0x200012d0
 800a050:	20000220 	.word	0x20000220

0800a054 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b082      	sub	sp, #8
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a05c:	2000      	movs	r0, #0
 800a05e:	f7f6 fc7a 	bl	8000956 <shci_cmd_resp_release>

  return;
 800a062:	bf00      	nop
}
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
	...

0800a06c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	4805      	ldr	r0, [pc, #20]	; (800a08c <TlUserEvtReceived+0x20>)
 800a078:	f000 f876 	bl	800a168 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a07c:	4803      	ldr	r0, [pc, #12]	; (800a08c <TlUserEvtReceived+0x20>)
 800a07e:	f7f6 fc5e 	bl	800093e <shci_notify_asynch_evt>

  return;
 800a082:	bf00      	nop
}
 800a084:	3708      	adds	r7, #8
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20000218 	.word	0x20000218

0800a090 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	4a05      	ldr	r2, [pc, #20]	; (800a0b0 <shci_register_io_bus+0x20>)
 800a09c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a04      	ldr	r2, [pc, #16]	; (800a0b4 <shci_register_io_bus+0x24>)
 800a0a2:	611a      	str	r2, [r3, #16]

  return;
 800a0a4:	bf00      	nop
}
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	0800adf5 	.word	0x0800adf5
 800a0b4:	0800ae49 	.word	0x0800ae49

0800a0b8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	687a      	ldr	r2, [r7, #4]
 800a0ca:	605a      	str	r2, [r3, #4]
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0e0:	f3ef 8310 	mrs	r3, PRIMASK
 800a0e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a0e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0ea:	b672      	cpsid	i
}
 800a0ec:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d102      	bne.n	800a0fe <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	75fb      	strb	r3, [r7, #23]
 800a0fc:	e001      	b.n	800a102 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a0fe:	2300      	movs	r3, #0
 800a100:	75fb      	strb	r3, [r7, #23]
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	f383 8810 	msr	PRIMASK, r3
}
 800a10c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a10e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a110:	4618      	mov	r0, r3
 800a112:	371c      	adds	r7, #28
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a126:	f3ef 8310 	mrs	r3, PRIMASK
 800a12a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a12c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a12e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a130:	b672      	cpsid	i
}
 800a132:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	683a      	ldr	r2, [r7, #0]
 800a14e:	605a      	str	r2, [r3, #4]
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	f383 8810 	msr	PRIMASK, r3
}
 800a15a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a15c:	bf00      	nop
 800a15e:	371c      	adds	r7, #28
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a172:	f3ef 8310 	mrs	r3, PRIMASK
 800a176:	60fb      	str	r3, [r7, #12]
  return(result);
 800a178:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a17a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a17c:	b672      	cpsid	i
}
 800a17e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685a      	ldr	r2, [r3, #4]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	683a      	ldr	r2, [r7, #0]
 800a19a:	601a      	str	r2, [r3, #0]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	f383 8810 	msr	PRIMASK, r3
}
 800a1a6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a1a8:	bf00      	nop
 800a1aa:	371c      	adds	r7, #28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1c6:	b672      	cpsid	i
}
 800a1c8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	6812      	ldr	r2, [r2, #0]
 800a1d2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	6852      	ldr	r2, [r2, #4]
 800a1dc:	605a      	str	r2, [r3, #4]
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f383 8810 	msr	PRIMASK, r3
}
 800a1e8:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a1ea:	bf00      	nop
 800a1ec:	371c      	adds	r7, #28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b086      	sub	sp, #24
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a200:	f3ef 8310 	mrs	r3, PRIMASK
 800a204:	60fb      	str	r3, [r7, #12]
  return(result);
 800a206:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a20a:	b672      	cpsid	i
}
 800a20c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff ffca 	bl	800a1b4 <LST_remove_node>
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f383 8810 	msr	PRIMASK, r3
}
 800a22a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a22c:	bf00      	nop
 800a22e:	3718      	adds	r7, #24
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68ba      	ldr	r2, [r7, #8]
 800a246:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2200      	movs	r2, #0
 800a252:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	2200      	movs	r2, #0
 800a25e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	887a      	ldrh	r2, [r7, #2]
 800a26a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	7e3a      	ldrb	r2, [r7, #24]
 800a270:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a272:	7e3b      	ldrb	r3, [r7, #24]
 800a274:	f003 0302 	and.w	r3, r3, #2
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d006      	beq.n	800a28a <CircularQueue_Init+0x56>
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	891b      	ldrh	r3, [r3, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a284:	f04f 33ff 	mov.w	r3, #4294967295
 800a288:	e000      	b.n	800a28c <CircularQueue_Init+0x58>
  }
  return 0;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3714      	adds	r7, #20
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08e      	sub	sp, #56	; 0x38
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	603b      	str	r3, [r7, #0]
 800a2a4:	4613      	mov	r3, r2
 800a2a6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a2bc:	2300      	movs	r3, #0
 800a2be:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	891b      	ldrh	r3, [r3, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <CircularQueue_Add+0x38>
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	e000      	b.n	800a2d2 <CircularQueue_Add+0x3a>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d02a      	beq.n	800a332 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	891b      	ldrh	r3, [r3, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d123      	bne.n	800a32c <CircularQueue_Add+0x94>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6819      	ldr	r1, [r3, #0]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	1c58      	adds	r0, r3, #1
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	4298      	cmp	r0, r3
 800a302:	d306      	bcc.n	800a312 <CircularQueue_Add+0x7a>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6918      	ldr	r0, [r3, #16]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	1ac3      	subs	r3, r0, r3
 800a30e:	3301      	adds	r3, #1
 800a310:	e002      	b.n	800a318 <CircularQueue_Add+0x80>
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	3301      	adds	r3, #1
 800a318:	440b      	add	r3, r1
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	021b      	lsls	r3, r3, #8
 800a320:	b29b      	uxth	r3, r3
 800a322:	4413      	add	r3, r2
 800a324:	b29b      	uxth	r3, r3
 800a326:	3302      	adds	r3, #2
 800a328:	b29b      	uxth	r3, r3
 800a32a:	e001      	b.n	800a330 <CircularQueue_Add+0x98>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	891b      	ldrh	r3, [r3, #8]
 800a330:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	891b      	ldrh	r3, [r3, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	891b      	ldrh	r3, [r3, #8]
 800a33e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d307      	bcc.n	800a35c <CircularQueue_Add+0xc4>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6919      	ldr	r1, [r3, #16]
 800a354:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a356:	440b      	add	r3, r1
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	e000      	b.n	800a35e <CircularQueue_Add+0xc6>
 800a35c:	2300      	movs	r3, #0
 800a35e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a360:	88fa      	ldrh	r2, [r7, #6]
 800a362:	7ffb      	ldrb	r3, [r7, #31]
 800a364:	4413      	add	r3, r2
 800a366:	461a      	mov	r2, r3
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	fb03 f302 	mul.w	r3, r3, r2
 800a36e:	69ba      	ldr	r2, [r7, #24]
 800a370:	429a      	cmp	r2, r3
 800a372:	d80b      	bhi.n	800a38c <CircularQueue_Add+0xf4>
 800a374:	88fa      	ldrh	r2, [r7, #6]
 800a376:	7ffb      	ldrb	r3, [r7, #31]
 800a378:	4413      	add	r3, r2
 800a37a:	461a      	mov	r2, r3
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a382:	fb02 f201 	mul.w	r2, r2, r1
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	e000      	b.n	800a38e <CircularQueue_Add+0xf6>
 800a38c:	2300      	movs	r3, #0
 800a38e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a390:	7dfa      	ldrb	r2, [r7, #23]
 800a392:	7ffb      	ldrb	r3, [r7, #31]
 800a394:	429a      	cmp	r2, r3
 800a396:	bf8c      	ite	hi
 800a398:	2301      	movhi	r3, #1
 800a39a:	2300      	movls	r3, #0
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a3a0:	7fbb      	ldrb	r3, [r7, #30]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d008      	beq.n	800a3b8 <CircularQueue_Add+0x120>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	7f1b      	ldrb	r3, [r3, #28]
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d002      	beq.n	800a3b8 <CircularQueue_Add+0x120>
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	e000      	b.n	800a3ba <CircularQueue_Add+0x122>
 800a3b8:	8bbb      	ldrh	r3, [r7, #28]
 800a3ba:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a3bc:	7fbb      	ldrb	r3, [r7, #30]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d008      	beq.n	800a3d4 <CircularQueue_Add+0x13c>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	7f1b      	ldrb	r3, [r3, #28]
 800a3c6:	f003 0302 	and.w	r3, r3, #2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d002      	beq.n	800a3d4 <CircularQueue_Add+0x13c>
 800a3ce:	7ffb      	ldrb	r3, [r7, #31]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	e000      	b.n	800a3d6 <CircularQueue_Add+0x13e>
 800a3d4:	8bbb      	ldrh	r3, [r7, #28]
 800a3d6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a3d8:	88fb      	ldrh	r3, [r7, #6]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 817e 	beq.w	800a6dc <CircularQueue_Add+0x444>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	695a      	ldr	r2, [r3, #20]
 800a3e4:	88f9      	ldrh	r1, [r7, #6]
 800a3e6:	7ffb      	ldrb	r3, [r7, #31]
 800a3e8:	440b      	add	r3, r1
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	fb03 f301 	mul.w	r3, r3, r1
 800a3f2:	441a      	add	r2, r3
 800a3f4:	8bbb      	ldrh	r3, [r7, #28]
 800a3f6:	441a      	add	r2, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	f200 816d 	bhi.w	800a6dc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a402:	2300      	movs	r3, #0
 800a404:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a406:	e14a      	b.n	800a69e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a40e:	441a      	add	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	429a      	cmp	r2, r3
 800a416:	d307      	bcc.n	800a428 <CircularQueue_Add+0x190>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	691a      	ldr	r2, [r3, #16]
 800a41c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a41e:	441a      	add	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	1ad3      	subs	r3, r2, r3
 800a426:	e003      	b.n	800a430 <CircularQueue_Add+0x198>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	691a      	ldr	r2, [r3, #16]
 800a42c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a42e:	4413      	add	r3, r2
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	691b      	ldr	r3, [r3, #16]
 800a438:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	891b      	ldrh	r3, [r3, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d130      	bne.n	800a4a4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	1c59      	adds	r1, r3, #1
 800a44a:	6339      	str	r1, [r7, #48]	; 0x30
 800a44c:	4413      	add	r3, r2
 800a44e:	88fa      	ldrh	r2, [r7, #6]
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d304      	bcc.n	800a468 <CircularQueue_Add+0x1d0>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a464:	1ad3      	subs	r3, r2, r3
 800a466:	e000      	b.n	800a46a <CircularQueue_Add+0x1d2>
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a46c:	88fb      	ldrh	r3, [r7, #6]
 800a46e:	0a1b      	lsrs	r3, r3, #8
 800a470:	b298      	uxth	r0, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	1c59      	adds	r1, r3, #1
 800a47a:	6339      	str	r1, [r7, #48]	; 0x30
 800a47c:	4413      	add	r3, r2
 800a47e:	b2c2      	uxtb	r2, r0
 800a480:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a488:	429a      	cmp	r2, r3
 800a48a:	d304      	bcc.n	800a496 <CircularQueue_Add+0x1fe>
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	e000      	b.n	800a498 <CircularQueue_Add+0x200>
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	1c9a      	adds	r2, r3, #2
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a4a4:	88fa      	ldrh	r2, [r7, #6]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6859      	ldr	r1, [r3, #4]
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	1acb      	subs	r3, r1, r3
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	bf28      	it	cs
 800a4b2:	4613      	movcs	r3, r2
 800a4b4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a4b6:	88fb      	ldrh	r3, [r7, #6]
 800a4b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d007      	beq.n	800a4ce <CircularQueue_Add+0x236>
 800a4be:	88fb      	ldrh	r3, [r7, #6]
 800a4c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d225      	bcs.n	800a512 <CircularQueue_Add+0x27a>
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	7f1b      	ldrb	r3, [r3, #28]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d121      	bne.n	800a512 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	18d0      	adds	r0, r2, r3
 800a4d6:	88fb      	ldrh	r3, [r7, #6]
 800a4d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4da:	fb02 f303 	mul.w	r3, r2, r3
 800a4de:	68ba      	ldr	r2, [r7, #8]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	f001 f88b 	bl	800b600 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	695a      	ldr	r2, [r3, #20]
 800a4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f0:	441a      	add	r2, r3
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a4fe:	88fa      	ldrh	r2, [r7, #6]
 800a500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a502:	1ad3      	subs	r3, r2, r3
 800a504:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a506:	7ffb      	ldrb	r3, [r7, #31]
 800a508:	b29a      	uxth	r2, r3
 800a50a:	88fb      	ldrh	r3, [r7, #6]
 800a50c:	4413      	add	r3, r2
 800a50e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a510:	e0a4      	b.n	800a65c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a514:	2b00      	cmp	r3, #0
 800a516:	f000 80a1 	beq.w	800a65c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	7f1b      	ldrb	r3, [r3, #28]
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	2b00      	cmp	r3, #0
 800a524:	d03a      	beq.n	800a59c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	891b      	ldrh	r3, [r3, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10d      	bne.n	800a54a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	3b02      	subs	r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	22ff      	movs	r2, #255	; 0xff
 800a53a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a542:	3b01      	subs	r3, #1
 800a544:	4413      	add	r3, r2
 800a546:	22ff      	movs	r2, #255	; 0xff
 800a548:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	695a      	ldr	r2, [r3, #20]
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	441a      	add	r2, r3
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a55a:	88fb      	ldrh	r3, [r7, #6]
 800a55c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a55e:	2300      	movs	r3, #0
 800a560:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	891b      	ldrh	r3, [r3, #8]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d16f      	bne.n	800a64a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	1c59      	adds	r1, r3, #1
 800a572:	6339      	str	r1, [r7, #48]	; 0x30
 800a574:	4413      	add	r3, r2
 800a576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a578:	b2d2      	uxtb	r2, r2
 800a57a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a57e:	0a18      	lsrs	r0, r3, #8
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a586:	1c59      	adds	r1, r3, #1
 800a588:	6339      	str	r1, [r7, #48]	; 0x30
 800a58a:	4413      	add	r3, r2
 800a58c:	b2c2      	uxtb	r2, r0
 800a58e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	695b      	ldr	r3, [r3, #20]
 800a594:	1c9a      	adds	r2, r3, #2
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	615a      	str	r2, [r3, #20]
 800a59a:	e056      	b.n	800a64a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	7f1b      	ldrb	r3, [r3, #28]
 800a5a0:	f003 0302 	and.w	r3, r3, #2
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d050      	beq.n	800a64a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	891b      	ldrh	r3, [r3, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d14a      	bne.n	800a646 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b6:	3b02      	subs	r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5bc:	b2d2      	uxtb	r2, r2
 800a5be:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c2:	0a19      	lsrs	r1, r3, #8
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	4413      	add	r3, r2
 800a5ce:	b2ca      	uxtb	r2, r1
 800a5d0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	18d0      	adds	r0, r2, r3
 800a5da:	88fb      	ldrh	r3, [r7, #6]
 800a5dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5de:	fb02 f303 	mul.w	r3, r2, r3
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f001 f809 	bl	800b600 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	695a      	ldr	r2, [r3, #20]
 800a5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f4:	441a      	add	r2, r3
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a5fe:	88fa      	ldrh	r2, [r7, #6]
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	1ad3      	subs	r3, r2, r3
 800a604:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	1c5a      	adds	r2, r3, #1
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a610:	2300      	movs	r3, #0
 800a612:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	1c59      	adds	r1, r3, #1
 800a61c:	6339      	str	r1, [r7, #48]	; 0x30
 800a61e:	4413      	add	r3, r2
 800a620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	0a18      	lsrs	r0, r3, #8
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a630:	1c59      	adds	r1, r3, #1
 800a632:	6339      	str	r1, [r7, #48]	; 0x30
 800a634:	4413      	add	r3, r2
 800a636:	b2c2      	uxtb	r2, r0
 800a638:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	695b      	ldr	r3, [r3, #20]
 800a63e:	1c9a      	adds	r2, r3, #2
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	615a      	str	r2, [r3, #20]
 800a644:	e001      	b.n	800a64a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	e049      	b.n	800a6de <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a64a:	7ffb      	ldrb	r3, [r7, #31]
 800a64c:	b29a      	uxth	r2, r3
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	b29b      	uxth	r3, r3
 800a652:	4413      	add	r3, r2
 800a654:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2200      	movs	r2, #0
 800a65a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d015      	beq.n	800a68e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	18d0      	adds	r0, r2, r3
 800a66a:	88fb      	ldrh	r3, [r7, #6]
 800a66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66e:	fb02 f203 	mul.w	r2, r2, r3
 800a672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a674:	4413      	add	r3, r2
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	4413      	add	r3, r2
 800a67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a67c:	4619      	mov	r1, r3
 800a67e:	f000 ffbf 	bl	800b600 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	695a      	ldr	r2, [r3, #20]
 800a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a688:	441a      	add	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	3301      	adds	r3, #1
 800a69c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	f4ff aeb0 	bcc.w	800a408 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6919      	ldr	r1, [r3, #16]
 800a6b0:	7ffb      	ldrb	r3, [r7, #31]
 800a6b2:	4419      	add	r1, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	4299      	cmp	r1, r3
 800a6ba:	d307      	bcc.n	800a6cc <CircularQueue_Add+0x434>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6919      	ldr	r1, [r3, #16]
 800a6c0:	7ffb      	ldrb	r3, [r7, #31]
 800a6c2:	4419      	add	r1, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	1acb      	subs	r3, r1, r3
 800a6ca:	e003      	b.n	800a6d4 <CircularQueue_Add+0x43c>
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6919      	ldr	r1, [r3, #16]
 800a6d0:	7ffb      	ldrb	r3, [r7, #31]
 800a6d2:	440b      	add	r3, r1
 800a6d4:	4413      	add	r3, r2
 800a6d6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a6d8:	6a3b      	ldr	r3, [r7, #32]
 800a6da:	e000      	b.n	800a6de <CircularQueue_Add+0x446>
    return NULL;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3738      	adds	r7, #56	; 0x38
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b085      	sub	sp, #20
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	891b      	ldrh	r3, [r3, #8]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d101      	bne.n	800a704 <CircularQueue_Remove+0x1e>
 800a700:	2302      	movs	r3, #2
 800a702:	e000      	b.n	800a706 <CircularQueue_Remove+0x20>
 800a704:	2300      	movs	r3, #0
 800a706:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2200      	movs	r2, #0
 800a70c:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f000 80d4 	beq.w	800a8c0 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	891b      	ldrh	r3, [r3, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d121      	bne.n	800a764 <CircularQueue_Remove+0x7e>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4413      	add	r3, r2
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6819      	ldr	r1, [r3, #0]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	1c58      	adds	r0, r3, #1
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	4298      	cmp	r0, r3
 800a73e:	d306      	bcc.n	800a74e <CircularQueue_Remove+0x68>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	68d8      	ldr	r0, [r3, #12]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	1ac3      	subs	r3, r0, r3
 800a74a:	3301      	adds	r3, #1
 800a74c:	e002      	b.n	800a754 <CircularQueue_Remove+0x6e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	3301      	adds	r3, #1
 800a754:	440b      	add	r3, r1
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	021b      	lsls	r3, r3, #8
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	4413      	add	r3, r2
 800a760:	b29b      	uxth	r3, r3
 800a762:	e001      	b.n	800a768 <CircularQueue_Remove+0x82>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	891b      	ldrh	r3, [r3, #8]
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	7f1b      	ldrb	r3, [r3, #28]
 800a770:	f003 0301 	and.w	r3, r3, #1
 800a774:	2b00      	cmp	r3, #0
 800a776:	d059      	beq.n	800a82c <CircularQueue_Remove+0x146>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	7f1b      	ldrb	r3, [r3, #28]
 800a77c:	f003 0302 	and.w	r3, r3, #2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d153      	bne.n	800a82c <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d103      	bne.n	800a798 <CircularQueue_Remove+0xb2>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	891b      	ldrh	r3, [r3, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d012      	beq.n	800a7be <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68da      	ldr	r2, [r3, #12]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d943      	bls.n	800a82c <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	891b      	ldrh	r3, [r3, #8]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d03f      	beq.n	800a82c <CircularQueue_Remove+0x146>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	8912      	ldrh	r2, [r2, #8]
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d236      	bcs.n	800a82c <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	695a      	ldr	r2, [r3, #20]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	68d9      	ldr	r1, [r3, #12]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	1acb      	subs	r3, r1, r3
 800a7cc:	441a      	add	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	891b      	ldrh	r3, [r3, #8]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d121      	bne.n	800a824 <CircularQueue_Remove+0x13e>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6819      	ldr	r1, [r3, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	68db      	ldr	r3, [r3, #12]
 800a7f6:	1c58      	adds	r0, r3, #1
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	4298      	cmp	r0, r3
 800a7fe:	d306      	bcc.n	800a80e <CircularQueue_Remove+0x128>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68d8      	ldr	r0, [r3, #12]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	685b      	ldr	r3, [r3, #4]
 800a808:	1ac3      	subs	r3, r0, r3
 800a80a:	3301      	adds	r3, #1
 800a80c:	e002      	b.n	800a814 <CircularQueue_Remove+0x12e>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	3301      	adds	r3, #1
 800a814:	440b      	add	r3, r1
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	b29b      	uxth	r3, r3
 800a81a:	021b      	lsls	r3, r3, #8
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	4413      	add	r3, r2
 800a820:	b29b      	uxth	r3, r3
 800a822:	e001      	b.n	800a828 <CircularQueue_Remove+0x142>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	891b      	ldrh	r3, [r3, #8]
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68d9      	ldr	r1, [r3, #12]
 800a834:	7afb      	ldrb	r3, [r7, #11]
 800a836:	4419      	add	r1, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	4299      	cmp	r1, r3
 800a83e:	d307      	bcc.n	800a850 <CircularQueue_Remove+0x16a>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68d9      	ldr	r1, [r3, #12]
 800a844:	7afb      	ldrb	r3, [r7, #11]
 800a846:	4419      	add	r1, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	1acb      	subs	r3, r1, r3
 800a84e:	e003      	b.n	800a858 <CircularQueue_Remove+0x172>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68d9      	ldr	r1, [r3, #12]
 800a854:	7afb      	ldrb	r3, [r7, #11]
 800a856:	440b      	add	r3, r1
 800a858:	4413      	add	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	695b      	ldr	r3, [r3, #20]
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	8812      	ldrh	r2, [r2, #0]
 800a864:	4611      	mov	r1, r2
 800a866:	7afa      	ldrb	r2, [r7, #11]
 800a868:	440a      	add	r2, r1
 800a86a:	1a9a      	subs	r2, r3, r2
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	695b      	ldr	r3, [r3, #20]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d01e      	beq.n	800a8b6 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	8812      	ldrh	r2, [r2, #0]
 800a880:	441a      	add	r2, r3
 800a882:	7afb      	ldrb	r3, [r7, #11]
 800a884:	441a      	add	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d30a      	bcc.n	800a8a4 <CircularQueue_Remove+0x1be>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	683a      	ldr	r2, [r7, #0]
 800a894:	8812      	ldrh	r2, [r2, #0]
 800a896:	441a      	add	r2, r3
 800a898:	7afb      	ldrb	r3, [r7, #11]
 800a89a:	441a      	add	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	e006      	b.n	800a8b2 <CircularQueue_Remove+0x1cc>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	68db      	ldr	r3, [r3, #12]
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	8812      	ldrh	r2, [r2, #0]
 800a8ac:	441a      	add	r2, r3
 800a8ae:	7afb      	ldrb	r3, [r7, #11]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	1e5a      	subs	r2, r3, #1
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b087      	sub	sp, #28
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	891b      	ldrh	r3, [r3, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <CircularQueue_Sense+0x1e>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e000      	b.n	800a8ee <CircularQueue_Sense+0x20>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	695b      	ldr	r3, [r3, #20]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 8093 	beq.w	800aa2a <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	891b      	ldrh	r3, [r3, #8]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d121      	bne.n	800a956 <CircularQueue_Sense+0x88>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	4413      	add	r3, r2
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	b29a      	uxth	r2, r3
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6819      	ldr	r1, [r3, #0]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	1c58      	adds	r0, r3, #1
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4298      	cmp	r0, r3
 800a930:	d306      	bcc.n	800a940 <CircularQueue_Sense+0x72>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68d8      	ldr	r0, [r3, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	1ac3      	subs	r3, r0, r3
 800a93c:	3301      	adds	r3, #1
 800a93e:	e002      	b.n	800a946 <CircularQueue_Sense+0x78>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	3301      	adds	r3, #1
 800a946:	440b      	add	r3, r1
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	021b      	lsls	r3, r3, #8
 800a94e:	b29b      	uxth	r3, r3
 800a950:	4413      	add	r3, r2
 800a952:	b29b      	uxth	r3, r3
 800a954:	e001      	b.n	800a95a <CircularQueue_Sense+0x8c>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	891b      	ldrh	r3, [r3, #8]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	7f1b      	ldrb	r3, [r3, #28]
 800a962:	f003 0301 	and.w	r3, r3, #1
 800a966:	2b00      	cmp	r3, #0
 800a968:	d04a      	beq.n	800aa00 <CircularQueue_Sense+0x132>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	7f1b      	ldrb	r3, [r3, #28]
 800a96e:	f003 0302 	and.w	r3, r3, #2
 800a972:	2b00      	cmp	r3, #0
 800a974:	d144      	bne.n	800aa00 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	881b      	ldrh	r3, [r3, #0]
 800a97a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a97e:	4293      	cmp	r3, r2
 800a980:	d103      	bne.n	800a98a <CircularQueue_Sense+0xbc>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	891b      	ldrh	r3, [r3, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d012      	beq.n	800a9b0 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	68da      	ldr	r2, [r3, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800a992:	429a      	cmp	r2, r3
 800a994:	d934      	bls.n	800aa00 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	891b      	ldrh	r3, [r3, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d030      	beq.n	800aa00 <CircularQueue_Sense+0x132>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	1ad3      	subs	r3, r2, r3
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	8912      	ldrh	r2, [r2, #8]
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d227      	bcs.n	800aa00 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	891b      	ldrh	r3, [r3, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d11d      	bne.n	800a9f8 <CircularQueue_Sense+0x12a>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6819      	ldr	r1, [r3, #0]
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	1c58      	adds	r0, r3, #1
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	4298      	cmp	r0, r3
 800a9d6:	d305      	bcc.n	800a9e4 <CircularQueue_Sense+0x116>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	6938      	ldr	r0, [r7, #16]
 800a9de:	1ac3      	subs	r3, r0, r3
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	e001      	b.n	800a9e8 <CircularQueue_Sense+0x11a>
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	440b      	add	r3, r1
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	021b      	lsls	r3, r3, #8
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	4413      	add	r3, r2
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	e001      	b.n	800a9fc <CircularQueue_Sense+0x12e>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	891b      	ldrh	r3, [r3, #8]
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	7bf9      	ldrb	r1, [r7, #15]
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	4419      	add	r1, r3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	4299      	cmp	r1, r3
 800aa10:	d306      	bcc.n	800aa20 <CircularQueue_Sense+0x152>
 800aa12:	7bf9      	ldrb	r1, [r7, #15]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	4419      	add	r1, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	1acb      	subs	r3, r1, r3
 800aa1e:	e002      	b.n	800aa26 <CircularQueue_Sense+0x158>
 800aa20:	7bf9      	ldrb	r1, [r7, #15]
 800aa22:	693b      	ldr	r3, [r7, #16]
 800aa24:	440b      	add	r3, r1
 800aa26:	4413      	add	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
  }
  return x;
 800aa2a:	697b      	ldr	r3, [r7, #20]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	371c      	adds	r7, #28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
  return;
 800aa3c:	bf00      	nop
}
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <BLS_Init>:

__weak void BLS_Init( void )
{
 800aa46:	b480      	push	{r7}
 800aa48:	af00      	add	r7, sp, #0
  return;
 800aa4a:	bf00      	nop
}
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr

0800aa54 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800aa54:	b480      	push	{r7}
 800aa56:	af00      	add	r7, sp, #0
  return;
 800aa58:	bf00      	nop
}
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <DIS_Init>:
__weak void DIS_Init( void )
{
 800aa62:	b480      	push	{r7}
 800aa64:	af00      	add	r7, sp, #0
  return;
 800aa66:	bf00      	nop
}
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	af00      	add	r7, sp, #0
  return;
 800aa74:	bf00      	nop
}
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr

0800aa7e <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800aa7e:	b480      	push	{r7}
 800aa80:	af00      	add	r7, sp, #0
  return;
 800aa82:	bf00      	nop
}
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HRS_Init>:
__weak void HRS_Init( void )
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
  return;
 800aa90:	bf00      	nop
}
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <HTS_Init>:
__weak void HTS_Init( void )
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	af00      	add	r7, sp, #0
  return;
 800aa9e:	bf00      	nop
}
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <IAS_Init>:
__weak void IAS_Init( void )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
  return;
 800aaac:	bf00      	nop
}
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <LLS_Init>:
__weak void LLS_Init( void )
{
 800aab6:	b480      	push	{r7}
 800aab8:	af00      	add	r7, sp, #0
  return;
 800aaba:	bf00      	nop
}
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <TPS_Init>:
__weak void TPS_Init( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	af00      	add	r7, sp, #0
  return;
 800aac8:	bf00      	nop
}
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr

0800aad2 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800aad2:	b480      	push	{r7}
 800aad4:	af00      	add	r7, sp, #0
  return;
 800aad6:	bf00      	nop
}
 800aad8:	46bd      	mov	sp, r7
 800aada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aade:	4770      	bx	lr

0800aae0 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800aae0:	b480      	push	{r7}
 800aae2:	af00      	add	r7, sp, #0
  return;
 800aae4:	bf00      	nop
}
 800aae6:	46bd      	mov	sp, r7
 800aae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <MESH_Init>:
__weak void MESH_Init( void )
{
 800aaee:	b480      	push	{r7}
 800aaf0:	af00      	add	r7, sp, #0
  return;
 800aaf2:	bf00      	nop
}
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800aafc:	b480      	push	{r7}
 800aafe:	af00      	add	r7, sp, #0
  return;
 800ab00:	bf00      	nop
}
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	af00      	add	r7, sp, #0
  return;
 800ab0e:	bf00      	nop
}
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ab1c:	4b04      	ldr	r3, [pc, #16]	; (800ab30 <SVCCTL_Init+0x18>)
 800ab1e:	2200      	movs	r2, #0
 800ab20:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ab22:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <SVCCTL_Init+0x1c>)
 800ab24:	2200      	movs	r2, #0
 800ab26:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ab28:	f000 f806 	bl	800ab38 <SVCCTL_SvcInit>

  return;
 800ab2c:	bf00      	nop
}
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	200001f4 	.word	0x200001f4
 800ab34:	20000214 	.word	0x20000214

0800ab38 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0
  BAS_Init();
 800ab3c:	f7ff ff7c 	bl	800aa38 <BAS_Init>

  BLS_Init();
 800ab40:	f7ff ff81 	bl	800aa46 <BLS_Init>

  CRS_STM_Init();
 800ab44:	f7ff ff86 	bl	800aa54 <CRS_STM_Init>

  DIS_Init();
 800ab48:	f7ff ff8b 	bl	800aa62 <DIS_Init>

  EDS_STM_Init();
 800ab4c:	f7ff ff90 	bl	800aa70 <EDS_STM_Init>

  HIDS_Init();
 800ab50:	f7ff ff95 	bl	800aa7e <HIDS_Init>

  HRS_Init();
 800ab54:	f7ff ff9a 	bl	800aa8c <HRS_Init>

  HTS_Init();
 800ab58:	f7ff ff9f 	bl	800aa9a <HTS_Init>

  IAS_Init();
 800ab5c:	f7ff ffa4 	bl	800aaa8 <IAS_Init>

  LLS_Init();
 800ab60:	f7ff ffa9 	bl	800aab6 <LLS_Init>

  TPS_Init();
 800ab64:	f7ff ffae 	bl	800aac4 <TPS_Init>

  MOTENV_STM_Init();
 800ab68:	f7ff ffb3 	bl	800aad2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ab6c:	f7ff f880 	bl	8009c70 <P2PS_STM_Init>

  OTAS_STM_Init();
 800ab70:	f7ff ffb6 	bl	800aae0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ab74:	f7ff ffc2 	bl	800aafc <BVOPUS_STM_Init>

  MESH_Init();
 800ab78:	f7ff ffb9 	bl	800aaee <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ab7c:	f7ff ffc5 	bl	800ab0a <SVCCTL_InitCustomSvc>
  
  return;
 800ab80:	bf00      	nop
}
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800ab8c:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab8e:	7f1b      	ldrb	r3, [r3, #28]
 800ab90:	4619      	mov	r1, r3
 800ab92:	4a08      	ldr	r2, [pc, #32]	; (800abb4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ab9a:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <SVCCTL_RegisterSvcHandler+0x30>)
 800ab9c:	7f1b      	ldrb	r3, [r3, #28]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	b2da      	uxtb	r2, r3
 800aba2:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <SVCCTL_RegisterSvcHandler+0x30>)
 800aba4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800aba6:	bf00      	nop
}
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	200001f4 	.word	0x200001f4

0800abb8 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3301      	adds	r3, #1
 800abc4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800abc6:	2300      	movs	r3, #0
 800abc8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	2bff      	cmp	r3, #255	; 0xff
 800abd0:	d125      	bne.n	800ac1e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	3302      	adds	r3, #2
 800abd6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	881b      	ldrh	r3, [r3, #0]
 800abdc:	b29b      	uxth	r3, r3
 800abde:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800abe2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800abe6:	d118      	bne.n	800ac1a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800abe8:	2300      	movs	r3, #0
 800abea:	757b      	strb	r3, [r7, #21]
 800abec:	e00d      	b.n	800ac0a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800abee:	7d7b      	ldrb	r3, [r7, #21]
 800abf0:	4a1a      	ldr	r2, [pc, #104]	; (800ac5c <SVCCTL_UserEvtRx+0xa4>)
 800abf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	4798      	blx	r3
 800abfa:	4603      	mov	r3, r0
 800abfc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800abfe:	7dfb      	ldrb	r3, [r7, #23]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d108      	bne.n	800ac16 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ac04:	7d7b      	ldrb	r3, [r7, #21]
 800ac06:	3301      	adds	r3, #1
 800ac08:	757b      	strb	r3, [r7, #21]
 800ac0a:	4b14      	ldr	r3, [pc, #80]	; (800ac5c <SVCCTL_UserEvtRx+0xa4>)
 800ac0c:	7f1b      	ldrb	r3, [r3, #28]
 800ac0e:	7d7a      	ldrb	r2, [r7, #21]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d3ec      	bcc.n	800abee <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ac14:	e002      	b.n	800ac1c <SVCCTL_UserEvtRx+0x64>
              break;
 800ac16:	bf00      	nop
          break;
 800ac18:	e000      	b.n	800ac1c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ac1a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ac1c:	e000      	b.n	800ac20 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800ac1e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800ac20:	7dfb      	ldrb	r3, [r7, #23]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d00f      	beq.n	800ac46 <SVCCTL_UserEvtRx+0x8e>
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	dc10      	bgt.n	800ac4c <SVCCTL_UserEvtRx+0x94>
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d002      	beq.n	800ac34 <SVCCTL_UserEvtRx+0x7c>
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d006      	beq.n	800ac40 <SVCCTL_UserEvtRx+0x88>
 800ac32:	e00b      	b.n	800ac4c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7f7 fef7 	bl	8002a28 <SVCCTL_App_Notification>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75bb      	strb	r3, [r7, #22]
      break;
 800ac3e:	e008      	b.n	800ac52 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ac40:	2301      	movs	r3, #1
 800ac42:	75bb      	strb	r3, [r7, #22]
      break;
 800ac44:	e005      	b.n	800ac52 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ac46:	2300      	movs	r3, #0
 800ac48:	75bb      	strb	r3, [r7, #22]
      break;
 800ac4a:	e002      	b.n	800ac52 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	75bb      	strb	r3, [r7, #22]
      break;
 800ac50:	bf00      	nop
  }

  return (return_status);
 800ac52:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	200001f4 	.word	0x200001f4

0800ac60 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ac64:	f7f8 fe00 	bl	8003868 <HW_IPCC_Enable>

  return;
 800ac68:	bf00      	nop
}
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <TL_Init>:


void TL_Init( void )
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ac70:	4b10      	ldr	r3, [pc, #64]	; (800acb4 <TL_Init+0x48>)
 800ac72:	4a11      	ldr	r2, [pc, #68]	; (800acb8 <TL_Init+0x4c>)
 800ac74:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ac76:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <TL_Init+0x48>)
 800ac78:	4a10      	ldr	r2, [pc, #64]	; (800acbc <TL_Init+0x50>)
 800ac7a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ac7c:	4b0d      	ldr	r3, [pc, #52]	; (800acb4 <TL_Init+0x48>)
 800ac7e:	4a10      	ldr	r2, [pc, #64]	; (800acc0 <TL_Init+0x54>)
 800ac80:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ac82:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <TL_Init+0x48>)
 800ac84:	4a0f      	ldr	r2, [pc, #60]	; (800acc4 <TL_Init+0x58>)
 800ac86:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ac88:	4b0a      	ldr	r3, [pc, #40]	; (800acb4 <TL_Init+0x48>)
 800ac8a:	4a0f      	ldr	r2, [pc, #60]	; (800acc8 <TL_Init+0x5c>)
 800ac8c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ac8e:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <TL_Init+0x48>)
 800ac90:	4a0e      	ldr	r2, [pc, #56]	; (800accc <TL_Init+0x60>)
 800ac92:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ac94:	4b07      	ldr	r3, [pc, #28]	; (800acb4 <TL_Init+0x48>)
 800ac96:	4a0e      	ldr	r2, [pc, #56]	; (800acd0 <TL_Init+0x64>)
 800ac98:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ac9a:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <TL_Init+0x48>)
 800ac9c:	4a0d      	ldr	r2, [pc, #52]	; (800acd4 <TL_Init+0x68>)
 800ac9e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800aca0:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <TL_Init+0x48>)
 800aca2:	4a0d      	ldr	r2, [pc, #52]	; (800acd8 <TL_Init+0x6c>)
 800aca4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800aca6:	4b03      	ldr	r3, [pc, #12]	; (800acb4 <TL_Init+0x48>)
 800aca8:	4a0c      	ldr	r2, [pc, #48]	; (800acdc <TL_Init+0x70>)
 800acaa:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800acac:	f7f8 fdf0 	bl	8003890 <HW_IPCC_Init>

  return;
 800acb0:	bf00      	nop
}
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20030000 	.word	0x20030000
 800acb8:	20030134 	.word	0x20030134
 800acbc:	20030154 	.word	0x20030154
 800acc0:	20030164 	.word	0x20030164
 800acc4:	20030170 	.word	0x20030170
 800acc8:	20030178 	.word	0x20030178
 800accc:	20030180 	.word	0x20030180
 800acd0:	20030188 	.word	0x20030188
 800acd4:	200301a4 	.word	0x200301a4
 800acd8:	200301a8 	.word	0x200301a8
 800acdc:	200301b4 	.word	0x200301b4

0800ace0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800acec:	4811      	ldr	r0, [pc, #68]	; (800ad34 <TL_BLE_Init+0x54>)
 800acee:	f7ff f9e3 	bl	800a0b8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800acf2:	4b11      	ldr	r3, [pc, #68]	; (800ad38 <TL_BLE_Init+0x58>)
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	689a      	ldr	r2, [r3, #8]
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68da      	ldr	r2, [r3, #12]
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	4a0c      	ldr	r2, [pc, #48]	; (800ad3c <TL_BLE_Init+0x5c>)
 800ad0c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	4a08      	ldr	r2, [pc, #32]	; (800ad34 <TL_BLE_Init+0x54>)
 800ad12:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ad14:	f7f8 fdd2 	bl	80038bc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a08      	ldr	r2, [pc, #32]	; (800ad40 <TL_BLE_Init+0x60>)
 800ad1e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	4a07      	ldr	r2, [pc, #28]	; (800ad44 <TL_BLE_Init+0x64>)
 800ad26:	6013      	str	r3, [r2, #0]

  return 0;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	200301d0 	.word	0x200301d0
 800ad38:	20030000 	.word	0x20030000
 800ad3c:	20030a48 	.word	0x20030a48
 800ad40:	200012dc 	.word	0x200012dc
 800ad44:	200012e0 	.word	0x200012e0

0800ad48 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	460b      	mov	r3, r1
 800ad52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ad54:	4b09      	ldr	r3, [pc, #36]	; (800ad7c <TL_BLE_SendCmd+0x34>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ad5e:	4b07      	ldr	r3, [pc, #28]	; (800ad7c <TL_BLE_SendCmd+0x34>)
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4619      	mov	r1, r3
 800ad66:	2001      	movs	r0, #1
 800ad68:	f000 f96c 	bl	800b044 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ad6c:	f7f8 fdb0 	bl	80038d0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20030000 	.word	0x20030000

0800ad80 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ad86:	e01c      	b.n	800adc2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ad88:	1d3b      	adds	r3, r7, #4
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	4812      	ldr	r0, [pc, #72]	; (800add8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ad8e:	f7ff fa32 	bl	800a1f6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	7a5b      	ldrb	r3, [r3, #9]
 800ad96:	2b0f      	cmp	r3, #15
 800ad98:	d003      	beq.n	800ada2 <HW_IPCC_BLE_RxEvtNot+0x22>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	7a5b      	ldrb	r3, [r3, #9]
 800ad9e:	2b0e      	cmp	r3, #14
 800ada0:	d105      	bne.n	800adae <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4619      	mov	r1, r3
 800ada6:	2002      	movs	r0, #2
 800ada8:	f000 f94c 	bl	800b044 <OutputDbgTrace>
 800adac:	e004      	b.n	800adb8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	4619      	mov	r1, r3
 800adb2:	2003      	movs	r0, #3
 800adb4:	f000 f946 	bl	800b044 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800adb8:	4b08      	ldr	r3, [pc, #32]	; (800addc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	4610      	mov	r0, r2
 800adc0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800adc2:	4805      	ldr	r0, [pc, #20]	; (800add8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800adc4:	f7ff f988 	bl	800a0d8 <LST_is_empty>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d0dc      	beq.n	800ad88 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800adce:	bf00      	nop
}
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	200301d0 	.word	0x200301d0
 800addc:	200012dc 	.word	0x200012dc

0800ade0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ade4:	4b02      	ldr	r3, [pc, #8]	; (800adf0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4798      	blx	r3

  return;
 800adea:	bf00      	nop
}
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	200012e0 	.word	0x200012e0

0800adf4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ae00:	480d      	ldr	r0, [pc, #52]	; (800ae38 <TL_SYS_Init+0x44>)
 800ae02:	f7ff f959 	bl	800a0b8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ae06:	4b0d      	ldr	r3, [pc, #52]	; (800ae3c <TL_SYS_Init+0x48>)
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	689a      	ldr	r2, [r3, #8]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	4a08      	ldr	r2, [pc, #32]	; (800ae38 <TL_SYS_Init+0x44>)
 800ae18:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ae1a:	f7f8 fd7b 	bl	8003914 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a07      	ldr	r2, [pc, #28]	; (800ae40 <TL_SYS_Init+0x4c>)
 800ae24:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	4a06      	ldr	r2, [pc, #24]	; (800ae44 <TL_SYS_Init+0x50>)
 800ae2c:	6013      	str	r3, [r2, #0]

  return 0;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	200301d8 	.word	0x200301d8
 800ae3c:	20030000 	.word	0x20030000
 800ae40:	200012e4 	.word	0x200012e4
 800ae44:	200012e8 	.word	0x200012e8

0800ae48 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ae54:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <TL_SYS_SendCmd+0x34>)
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2210      	movs	r2, #16
 800ae5c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ae5e:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <TL_SYS_SendCmd+0x34>)
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4619      	mov	r1, r3
 800ae66:	2004      	movs	r0, #4
 800ae68:	f000 f8ec 	bl	800b044 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ae6c:	f7f8 fd5c 	bl	8003928 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3708      	adds	r7, #8
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20030000 	.word	0x20030000

0800ae80 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ae84:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	2005      	movs	r0, #5
 800ae8e:	f000 f8d9 	bl	800b044 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ae92:	4b05      	ldr	r3, [pc, #20]	; (800aea8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a03      	ldr	r2, [pc, #12]	; (800aea4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ae98:	68d2      	ldr	r2, [r2, #12]
 800ae9a:	6812      	ldr	r2, [r2, #0]
 800ae9c:	4610      	mov	r0, r2
 800ae9e:	4798      	blx	r3

  return;
 800aea0:	bf00      	nop
}
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	20030000 	.word	0x20030000
 800aea8:	200012e4 	.word	0x200012e4

0800aeac <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aeb2:	e00e      	b.n	800aed2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800aeb4:	1d3b      	adds	r3, r7, #4
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	480b      	ldr	r0, [pc, #44]	; (800aee8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aeba:	f7ff f99c 	bl	800a1f6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4619      	mov	r1, r3
 800aec2:	2006      	movs	r0, #6
 800aec4:	f000 f8be 	bl	800b044 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800aec8:	4b08      	ldr	r3, [pc, #32]	; (800aeec <HW_IPCC_SYS_EvtNot+0x40>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	4610      	mov	r0, r2
 800aed0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aed2:	4805      	ldr	r0, [pc, #20]	; (800aee8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aed4:	f7ff f900 	bl	800a0d8 <LST_is_empty>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d0ea      	beq.n	800aeb4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800aede:	bf00      	nop
}
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}
 800aee6:	bf00      	nop
 800aee8:	200301d8 	.word	0x200301d8
 800aeec:	200012e8 	.word	0x200012e8

0800aef0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800aef8:	4817      	ldr	r0, [pc, #92]	; (800af58 <TL_MM_Init+0x68>)
 800aefa:	f7ff f8dd 	bl	800a0b8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800aefe:	4817      	ldr	r0, [pc, #92]	; (800af5c <TL_MM_Init+0x6c>)
 800af00:	f7ff f8da 	bl	800a0b8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800af04:	4b16      	ldr	r3, [pc, #88]	; (800af60 <TL_MM_Init+0x70>)
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	4a16      	ldr	r2, [pc, #88]	; (800af64 <TL_MM_Init+0x74>)
 800af0a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800af0c:	4b15      	ldr	r3, [pc, #84]	; (800af64 <TL_MM_Init+0x74>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	6892      	ldr	r2, [r2, #8]
 800af14:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800af16:	4b13      	ldr	r3, [pc, #76]	; (800af64 <TL_MM_Init+0x74>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	68d2      	ldr	r2, [r2, #12]
 800af1e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800af20:	4b10      	ldr	r3, [pc, #64]	; (800af64 <TL_MM_Init+0x74>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a0c      	ldr	r2, [pc, #48]	; (800af58 <TL_MM_Init+0x68>)
 800af26:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800af28:	4b0e      	ldr	r3, [pc, #56]	; (800af64 <TL_MM_Init+0x74>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	6812      	ldr	r2, [r2, #0]
 800af30:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800af32:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <TL_MM_Init+0x74>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	6852      	ldr	r2, [r2, #4]
 800af3a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800af3c:	4b09      	ldr	r3, [pc, #36]	; (800af64 <TL_MM_Init+0x74>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6912      	ldr	r2, [r2, #16]
 800af44:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800af46:	4b07      	ldr	r3, [pc, #28]	; (800af64 <TL_MM_Init+0x74>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	6952      	ldr	r2, [r2, #20]
 800af4e:	619a      	str	r2, [r3, #24]

  return;
 800af50:	bf00      	nop
}
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	200301c0 	.word	0x200301c0
 800af5c:	200012d4 	.word	0x200012d4
 800af60:	20030000 	.word	0x20030000
 800af64:	200012ec 	.word	0x200012ec

0800af68 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800af70:	6879      	ldr	r1, [r7, #4]
 800af72:	4807      	ldr	r0, [pc, #28]	; (800af90 <TL_MM_EvtDone+0x28>)
 800af74:	f7ff f8f8 	bl	800a168 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800af78:	6879      	ldr	r1, [r7, #4]
 800af7a:	2000      	movs	r0, #0
 800af7c:	f000 f862 	bl	800b044 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800af80:	4804      	ldr	r0, [pc, #16]	; (800af94 <TL_MM_EvtDone+0x2c>)
 800af82:	f7f8 fcf7 	bl	8003974 <HW_IPCC_MM_SendFreeBuf>

  return;
 800af86:	bf00      	nop
}
 800af88:	3708      	adds	r7, #8
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	200012d4 	.word	0x200012d4
 800af94:	0800af99 	.word	0x0800af99

0800af98 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800af9e:	e00c      	b.n	800afba <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800afa0:	1d3b      	adds	r3, r7, #4
 800afa2:	4619      	mov	r1, r3
 800afa4:	480a      	ldr	r0, [pc, #40]	; (800afd0 <SendFreeBuf+0x38>)
 800afa6:	f7ff f926 	bl	800a1f6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800afaa:	4b0a      	ldr	r3, [pc, #40]	; (800afd4 <SendFreeBuf+0x3c>)
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	691b      	ldr	r3, [r3, #16]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	4611      	mov	r1, r2
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff f8d7 	bl	800a168 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800afba:	4805      	ldr	r0, [pc, #20]	; (800afd0 <SendFreeBuf+0x38>)
 800afbc:	f7ff f88c 	bl	800a0d8 <LST_is_empty>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d0ec      	beq.n	800afa0 <SendFreeBuf+0x8>
  }

  return;
 800afc6:	bf00      	nop
}
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	200012d4 	.word	0x200012d4
 800afd4:	20030000 	.word	0x20030000

0800afd8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800afdc:	4805      	ldr	r0, [pc, #20]	; (800aff4 <TL_TRACES_Init+0x1c>)
 800afde:	f7ff f86b 	bl	800a0b8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800afe2:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <TL_TRACES_Init+0x20>)
 800afe4:	695b      	ldr	r3, [r3, #20]
 800afe6:	4a03      	ldr	r2, [pc, #12]	; (800aff4 <TL_TRACES_Init+0x1c>)
 800afe8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800afea:	f7f8 fcf9 	bl	80039e0 <HW_IPCC_TRACES_Init>

  return;
 800afee:	bf00      	nop
}
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	200301c8 	.word	0x200301c8
 800aff8:	20030000 	.word	0x20030000

0800affc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b002:	e008      	b.n	800b016 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b004:	1d3b      	adds	r3, r7, #4
 800b006:	4619      	mov	r1, r3
 800b008:	4808      	ldr	r0, [pc, #32]	; (800b02c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b00a:	f7ff f8f4 	bl	800a1f6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	f000 f80d 	bl	800b030 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b016:	4805      	ldr	r0, [pc, #20]	; (800b02c <HW_IPCC_TRACES_EvtNot+0x30>)
 800b018:	f7ff f85e 	bl	800a0d8 <LST_is_empty>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d0f0      	beq.n	800b004 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b022:	bf00      	nop
}
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	200301c8 	.word	0x200301c8

0800b030 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b044:	b480      	push	{r7}
 800b046:	b085      	sub	sp, #20
 800b048:	af00      	add	r7, sp, #0
 800b04a:	4603      	mov	r3, r0
 800b04c:	6039      	str	r1, [r7, #0]
 800b04e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b050:	79fb      	ldrb	r3, [r7, #7]
 800b052:	2b06      	cmp	r3, #6
 800b054:	d845      	bhi.n	800b0e2 <OutputDbgTrace+0x9e>
 800b056:	a201      	add	r2, pc, #4	; (adr r2, 800b05c <OutputDbgTrace+0x18>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b079 	.word	0x0800b079
 800b060:	0800b09d 	.word	0x0800b09d
 800b064:	0800b0a3 	.word	0x0800b0a3
 800b068:	0800b0b7 	.word	0x0800b0b7
 800b06c:	0800b0c3 	.word	0x0800b0c3
 800b070:	0800b0c9 	.word	0x0800b0c9
 800b074:	0800b0d7 	.word	0x0800b0d7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	7a5b      	ldrb	r3, [r3, #9]
 800b080:	2bff      	cmp	r3, #255	; 0xff
 800b082:	d005      	beq.n	800b090 <OutputDbgTrace+0x4c>
 800b084:	2bff      	cmp	r3, #255	; 0xff
 800b086:	dc05      	bgt.n	800b094 <OutputDbgTrace+0x50>
 800b088:	2b0e      	cmp	r3, #14
 800b08a:	d005      	beq.n	800b098 <OutputDbgTrace+0x54>
 800b08c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b08e:	e001      	b.n	800b094 <OutputDbgTrace+0x50>
          break;
 800b090:	bf00      	nop
 800b092:	e027      	b.n	800b0e4 <OutputDbgTrace+0xa0>
          break;
 800b094:	bf00      	nop
 800b096:	e025      	b.n	800b0e4 <OutputDbgTrace+0xa0>
          break;
 800b098:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b09a:	e023      	b.n	800b0e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b0a0:	e020      	b.n	800b0e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	7a5b      	ldrb	r3, [r3, #9]
 800b0aa:	2b0e      	cmp	r3, #14
 800b0ac:	d001      	beq.n	800b0b2 <OutputDbgTrace+0x6e>
 800b0ae:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b0b0:	e000      	b.n	800b0b4 <OutputDbgTrace+0x70>
          break;
 800b0b2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b0b4:	e016      	b.n	800b0e4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	7a5b      	ldrb	r3, [r3, #9]
 800b0be:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b0c0:	e010      	b.n	800b0e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b0c6:	e00d      	b.n	800b0e4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	7a5b      	ldrb	r3, [r3, #9]
 800b0d0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b0d2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b0d4:	e006      	b.n	800b0e4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	7a5b      	ldrb	r3, [r3, #9]
 800b0de:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b0e0:	e000      	b.n	800b0e4 <OutputDbgTrace+0xa0>

    default:
      break;
 800b0e2:	bf00      	nop
  }

  return;
 800b0e4:	bf00      	nop
}
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b0f4:	4b05      	ldr	r3, [pc, #20]	; (800b10c <UTIL_LPM_Init+0x1c>)
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b0fa:	4b05      	ldr	r3, [pc, #20]	; (800b110 <UTIL_LPM_Init+0x20>)
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b100:	bf00      	nop
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop
 800b10c:	200012f0 	.word	0x200012f0
 800b110:	200012f4 	.word	0x200012f4

0800b114 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b120:	f3ef 8310 	mrs	r3, PRIMASK
 800b124:	613b      	str	r3, [r7, #16]
  return(result);
 800b126:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b128:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b12a:	b672      	cpsid	i
}
 800b12c:	bf00      	nop
  
  switch(state)
 800b12e:	78fb      	ldrb	r3, [r7, #3]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d008      	beq.n	800b146 <UTIL_LPM_SetOffMode+0x32>
 800b134:	2b01      	cmp	r3, #1
 800b136:	d10e      	bne.n	800b156 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b138:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <UTIL_LPM_SetOffMode+0x5c>)
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4313      	orrs	r3, r2
 800b140:	4a0b      	ldr	r2, [pc, #44]	; (800b170 <UTIL_LPM_SetOffMode+0x5c>)
 800b142:	6013      	str	r3, [r2, #0]
      break;
 800b144:	e008      	b.n	800b158 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	43da      	mvns	r2, r3
 800b14a:	4b09      	ldr	r3, [pc, #36]	; (800b170 <UTIL_LPM_SetOffMode+0x5c>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4013      	ands	r3, r2
 800b150:	4a07      	ldr	r2, [pc, #28]	; (800b170 <UTIL_LPM_SetOffMode+0x5c>)
 800b152:	6013      	str	r3, [r2, #0]
      break;
 800b154:	e000      	b.n	800b158 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b156:	bf00      	nop
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f383 8810 	msr	PRIMASK, r3
}
 800b162:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b164:	bf00      	nop
 800b166:	371c      	adds	r7, #28
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	200012f4 	.word	0x200012f4

0800b174 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b08c      	sub	sp, #48	; 0x30
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b17c:	4b67      	ldr	r3, [pc, #412]	; (800b31c <UTIL_SEQ_Run+0x1a8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b182:	4b66      	ldr	r3, [pc, #408]	; (800b31c <UTIL_SEQ_Run+0x1a8>)
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4013      	ands	r3, r2
 800b18a:	4a64      	ldr	r2, [pc, #400]	; (800b31c <UTIL_SEQ_Run+0x1a8>)
 800b18c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b18e:	e083      	b.n	800b298 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800b190:	2300      	movs	r3, #0
 800b192:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b194:	e002      	b.n	800b19c <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	3301      	adds	r3, #1
 800b19a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800b19c:	4a60      	ldr	r2, [pc, #384]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b1a4:	4b5f      	ldr	r3, [pc, #380]	; (800b324 <UTIL_SEQ_Run+0x1b0>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	401a      	ands	r2, r3
 800b1aa:	4b5c      	ldr	r3, [pc, #368]	; (800b31c <UTIL_SEQ_Run+0x1a8>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d0f0      	beq.n	800b196 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800b1b4:	4a5a      	ldr	r2, [pc, #360]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b1bc:	4b59      	ldr	r3, [pc, #356]	; (800b324 <UTIL_SEQ_Run+0x1b0>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	401a      	ands	r2, r3
 800b1c2:	4b56      	ldr	r3, [pc, #344]	; (800b31c <UTIL_SEQ_Run+0x1a8>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b1ca:	4a55      	ldr	r2, [pc, #340]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	4413      	add	r3, r2
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d106      	bne.n	800b1ea <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b1dc:	4a50      	ldr	r2, [pc, #320]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1e8:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b1ea:	4a4d      	ldr	r2, [pc, #308]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ee:	00db      	lsls	r3, r3, #3
 800b1f0:	4413      	add	r3, r2
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	4013      	ands	r3, r2
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f000 f99d 	bl	800b538 <SEQ_BitPosition>
 800b1fe:	4603      	mov	r3, r0
 800b200:	461a      	mov	r2, r3
 800b202:	4b49      	ldr	r3, [pc, #292]	; (800b328 <UTIL_SEQ_Run+0x1b4>)
 800b204:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b206:	4a46      	ldr	r2, [pc, #280]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20a:	00db      	lsls	r3, r3, #3
 800b20c:	4413      	add	r3, r2
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	4b45      	ldr	r3, [pc, #276]	; (800b328 <UTIL_SEQ_Run+0x1b4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2101      	movs	r1, #1
 800b216:	fa01 f303 	lsl.w	r3, r1, r3
 800b21a:	43db      	mvns	r3, r3
 800b21c:	401a      	ands	r2, r3
 800b21e:	4940      	ldr	r1, [pc, #256]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b222:	00db      	lsls	r3, r3, #3
 800b224:	440b      	add	r3, r1
 800b226:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b228:	f3ef 8310 	mrs	r3, PRIMASK
 800b22c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b22e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b230:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b232:	b672      	cpsid	i
}
 800b234:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b236:	4b3c      	ldr	r3, [pc, #240]	; (800b328 <UTIL_SEQ_Run+0x1b4>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	2201      	movs	r2, #1
 800b23c:	fa02 f303 	lsl.w	r3, r2, r3
 800b240:	43da      	mvns	r2, r3
 800b242:	4b3a      	ldr	r3, [pc, #232]	; (800b32c <UTIL_SEQ_Run+0x1b8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4013      	ands	r3, r2
 800b248:	4a38      	ldr	r2, [pc, #224]	; (800b32c <UTIL_SEQ_Run+0x1b8>)
 800b24a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b24c:	2302      	movs	r3, #2
 800b24e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b250:	e013      	b.n	800b27a <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b254:	3b01      	subs	r3, #1
 800b256:	4a32      	ldr	r2, [pc, #200]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b258:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b25c:	4b32      	ldr	r3, [pc, #200]	; (800b328 <UTIL_SEQ_Run+0x1b4>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2201      	movs	r2, #1
 800b262:	fa02 f303 	lsl.w	r3, r2, r3
 800b266:	43da      	mvns	r2, r3
 800b268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26a:	3b01      	subs	r3, #1
 800b26c:	400a      	ands	r2, r1
 800b26e:	492c      	ldr	r1, [pc, #176]	; (800b320 <UTIL_SEQ_Run+0x1ac>)
 800b270:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b276:	3b01      	subs	r3, #1
 800b278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1e8      	bne.n	800b252 <UTIL_SEQ_Run+0xde>
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f383 8810 	msr	PRIMASK, r3
}
 800b28a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b28c:	4b26      	ldr	r3, [pc, #152]	; (800b328 <UTIL_SEQ_Run+0x1b4>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a27      	ldr	r2, [pc, #156]	; (800b330 <UTIL_SEQ_Run+0x1bc>)
 800b292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b296:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800b298:	4b24      	ldr	r3, [pc, #144]	; (800b32c <UTIL_SEQ_Run+0x1b8>)
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	4b21      	ldr	r3, [pc, #132]	; (800b324 <UTIL_SEQ_Run+0x1b0>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	401a      	ands	r2, r3
 800b2a2:	4b1e      	ldr	r3, [pc, #120]	; (800b31c <UTIL_SEQ_Run+0x1a8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d007      	beq.n	800b2bc <UTIL_SEQ_Run+0x148>
 800b2ac:	4b21      	ldr	r3, [pc, #132]	; (800b334 <UTIL_SEQ_Run+0x1c0>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4b21      	ldr	r3, [pc, #132]	; (800b338 <UTIL_SEQ_Run+0x1c4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4013      	ands	r3, r2
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	f43f af6a 	beq.w	800b190 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b2bc:	4b1a      	ldr	r3, [pc, #104]	; (800b328 <UTIL_SEQ_Run+0x1b4>)
 800b2be:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b2c4:	f000 f92a 	bl	800b51c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2c8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2cc:	613b      	str	r3, [r7, #16]
  return(result);
 800b2ce:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b2d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2d2:	b672      	cpsid	i
}
 800b2d4:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800b2d6:	4b15      	ldr	r3, [pc, #84]	; (800b32c <UTIL_SEQ_Run+0x1b8>)
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	4b12      	ldr	r3, [pc, #72]	; (800b324 <UTIL_SEQ_Run+0x1b0>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	401a      	ands	r2, r3
 800b2e0:	4b0e      	ldr	r3, [pc, #56]	; (800b31c <UTIL_SEQ_Run+0x1a8>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4013      	ands	r3, r2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d108      	bne.n	800b2fc <UTIL_SEQ_Run+0x188>
 800b2ea:	4b12      	ldr	r3, [pc, #72]	; (800b334 <UTIL_SEQ_Run+0x1c0>)
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	4b12      	ldr	r3, [pc, #72]	; (800b338 <UTIL_SEQ_Run+0x1c4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800b2f8:	f7f5 fb0d 	bl	8000916 <UTIL_SEQ_Idle>
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f383 8810 	msr	PRIMASK, r3
}
 800b306:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800b308:	f000 f90f 	bl	800b52a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b30c:	4a03      	ldr	r2, [pc, #12]	; (800b31c <UTIL_SEQ_Run+0x1a8>)
 800b30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b310:	6013      	str	r3, [r2, #0]

  return;
 800b312:	bf00      	nop
}
 800b314:	3730      	adds	r7, #48	; 0x30
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	bf00      	nop
 800b31c:	20000044 	.word	0x20000044
 800b320:	20001388 	.word	0x20001388
 800b324:	20000040 	.word	0x20000040
 800b328:	20001304 	.word	0x20001304
 800b32c:	200012f8 	.word	0x200012f8
 800b330:	20001308 	.word	0x20001308
 800b334:	200012fc 	.word	0x200012fc
 800b338:	20001300 	.word	0x20001300

0800b33c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b348:	f3ef 8310 	mrs	r3, PRIMASK
 800b34c:	617b      	str	r3, [r7, #20]
  return(result);
 800b34e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b350:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b352:	b672      	cpsid	i
}
 800b354:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 f8ee 	bl	800b538 <SEQ_BitPosition>
 800b35c:	4603      	mov	r3, r0
 800b35e:	4619      	mov	r1, r3
 800b360:	4a06      	ldr	r2, [pc, #24]	; (800b37c <UTIL_SEQ_RegTask+0x40>)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b36c:	69bb      	ldr	r3, [r7, #24]
 800b36e:	f383 8810 	msr	PRIMASK, r3
}
 800b372:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b374:	bf00      	nop
}
 800b376:	3720      	adds	r7, #32
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	20001308 	.word	0x20001308

0800b380 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b380:	b480      	push	{r7}
 800b382:	b087      	sub	sp, #28
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b38a:	f3ef 8310 	mrs	r3, PRIMASK
 800b38e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b390:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b392:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b394:	b672      	cpsid	i
}
 800b396:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b398:	4b0d      	ldr	r3, [pc, #52]	; (800b3d0 <UTIL_SEQ_SetTask+0x50>)
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	4a0b      	ldr	r2, [pc, #44]	; (800b3d0 <UTIL_SEQ_SetTask+0x50>)
 800b3a2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b3a4:	4a0b      	ldr	r2, [pc, #44]	; (800b3d4 <UTIL_SEQ_SetTask+0x54>)
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	431a      	orrs	r2, r3
 800b3b0:	4908      	ldr	r1, [pc, #32]	; (800b3d4 <UTIL_SEQ_SetTask+0x54>)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f383 8810 	msr	PRIMASK, r3
}
 800b3c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b3c4:	bf00      	nop
}
 800b3c6:	371c      	adds	r7, #28
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	200012f8 	.word	0x200012f8
 800b3d4:	20001388 	.word	0x20001388

0800b3d8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3e0:	f3ef 8310 	mrs	r3, PRIMASK
 800b3e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b3e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3ea:	b672      	cpsid	i
}
 800b3ec:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	43da      	mvns	r2, r3
 800b3f2:	4b08      	ldr	r3, [pc, #32]	; (800b414 <UTIL_SEQ_PauseTask+0x3c>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4013      	ands	r3, r2
 800b3f8:	4a06      	ldr	r2, [pc, #24]	; (800b414 <UTIL_SEQ_PauseTask+0x3c>)
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	f383 8810 	msr	PRIMASK, r3
}
 800b406:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b408:	bf00      	nop
}
 800b40a:	371c      	adds	r7, #28
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr
 800b414:	20000040 	.word	0x20000040

0800b418 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b418:	b480      	push	{r7}
 800b41a:	b087      	sub	sp, #28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b420:	f3ef 8310 	mrs	r3, PRIMASK
 800b424:	60fb      	str	r3, [r7, #12]
  return(result);
 800b426:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b428:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b42a:	b672      	cpsid	i
}
 800b42c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b42e:	4b09      	ldr	r3, [pc, #36]	; (800b454 <UTIL_SEQ_ResumeTask+0x3c>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4313      	orrs	r3, r2
 800b436:	4a07      	ldr	r2, [pc, #28]	; (800b454 <UTIL_SEQ_ResumeTask+0x3c>)
 800b438:	6013      	str	r3, [r2, #0]
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f383 8810 	msr	PRIMASK, r3
}
 800b444:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b446:	bf00      	nop
}
 800b448:	371c      	adds	r7, #28
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	20000040 	.word	0x20000040

0800b458 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b460:	f3ef 8310 	mrs	r3, PRIMASK
 800b464:	60fb      	str	r3, [r7, #12]
  return(result);
 800b466:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b468:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b46a:	b672      	cpsid	i
}
 800b46c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b46e:	4b09      	ldr	r3, [pc, #36]	; (800b494 <UTIL_SEQ_SetEvt+0x3c>)
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4313      	orrs	r3, r2
 800b476:	4a07      	ldr	r2, [pc, #28]	; (800b494 <UTIL_SEQ_SetEvt+0x3c>)
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f383 8810 	msr	PRIMASK, r3
}
 800b484:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b486:	bf00      	nop
}
 800b488:	371c      	adds	r7, #28
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	200012fc 	.word	0x200012fc

0800b498 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b086      	sub	sp, #24
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b4a0:	4b1b      	ldr	r3, [pc, #108]	; (800b510 <UTIL_SEQ_WaitEvt+0x78>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b4a6:	4b1a      	ldr	r3, [pc, #104]	; (800b510 <UTIL_SEQ_WaitEvt+0x78>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ae:	d102      	bne.n	800b4b6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	617b      	str	r3, [r7, #20]
 800b4b4:	e005      	b.n	800b4c2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800b4b6:	4b16      	ldr	r3, [pc, #88]	; (800b510 <UTIL_SEQ_WaitEvt+0x78>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c0:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b4c2:	4b14      	ldr	r3, [pc, #80]	; (800b514 <UTIL_SEQ_WaitEvt+0x7c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800b4c8:	4a12      	ldr	r2, [pc, #72]	; (800b514 <UTIL_SEQ_WaitEvt+0x7c>)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800b4ce:	e005      	b.n	800b4dc <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800b4d0:	4b10      	ldr	r3, [pc, #64]	; (800b514 <UTIL_SEQ_WaitEvt+0x7c>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6978      	ldr	r0, [r7, #20]
 800b4d8:	f7f5 fa24 	bl	8000924 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800b4dc:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <UTIL_SEQ_WaitEvt+0x80>)
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <UTIL_SEQ_WaitEvt+0x7c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d0f2      	beq.n	800b4d0 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b4ea:	4a09      	ldr	r2, [pc, #36]	; (800b510 <UTIL_SEQ_WaitEvt+0x78>)
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800b4f0:	4b08      	ldr	r3, [pc, #32]	; (800b514 <UTIL_SEQ_WaitEvt+0x7c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	43da      	mvns	r2, r3
 800b4f6:	4b08      	ldr	r3, [pc, #32]	; (800b518 <UTIL_SEQ_WaitEvt+0x80>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4013      	ands	r3, r2
 800b4fc:	4a06      	ldr	r2, [pc, #24]	; (800b518 <UTIL_SEQ_WaitEvt+0x80>)
 800b4fe:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800b500:	4a04      	ldr	r2, [pc, #16]	; (800b514 <UTIL_SEQ_WaitEvt+0x7c>)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6013      	str	r3, [r2, #0]

  return;
 800b506:	bf00      	nop
}
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20001304 	.word	0x20001304
 800b514:	20001300 	.word	0x20001300
 800b518:	200012fc 	.word	0x200012fc

0800b51c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b520:	bf00      	nop
}
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b52a:	b480      	push	{r7}
 800b52c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b52e:	bf00      	nop
}
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	0c1b      	lsrs	r3, r3, #16
 800b548:	041b      	lsls	r3, r3, #16
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d104      	bne.n	800b558 <SEQ_BitPosition+0x20>
 800b54e:	2310      	movs	r3, #16
 800b550:	73fb      	strb	r3, [r7, #15]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	041b      	lsls	r3, r3, #16
 800b556:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d105      	bne.n	800b56e <SEQ_BitPosition+0x36>
 800b562:	7bfb      	ldrb	r3, [r7, #15]
 800b564:	3308      	adds	r3, #8
 800b566:	73fb      	strb	r3, [r7, #15]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	021b      	lsls	r3, r3, #8
 800b56c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b574:	2b00      	cmp	r3, #0
 800b576:	d105      	bne.n	800b584 <SEQ_BitPosition+0x4c>
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	3304      	adds	r3, #4
 800b57c:	73fb      	strb	r3, [r7, #15]
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	0f1b      	lsrs	r3, r3, #28
 800b588:	4a07      	ldr	r2, [pc, #28]	; (800b5a8 <SEQ_BitPosition+0x70>)
 800b58a:	5cd2      	ldrb	r2, [r2, r3]
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	4413      	add	r3, r2
 800b590:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b592:	7bfb      	ldrb	r3, [r7, #15]
 800b594:	f1c3 031f 	rsb	r3, r3, #31
 800b598:	b2db      	uxtb	r3, r3
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	0800cfcc 	.word	0x0800cfcc

0800b5ac <__errno>:
 800b5ac:	4b01      	ldr	r3, [pc, #4]	; (800b5b4 <__errno+0x8>)
 800b5ae:	6818      	ldr	r0, [r3, #0]
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20000048 	.word	0x20000048

0800b5b8 <__libc_init_array>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	4d0d      	ldr	r5, [pc, #52]	; (800b5f0 <__libc_init_array+0x38>)
 800b5bc:	4c0d      	ldr	r4, [pc, #52]	; (800b5f4 <__libc_init_array+0x3c>)
 800b5be:	1b64      	subs	r4, r4, r5
 800b5c0:	10a4      	asrs	r4, r4, #2
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	42a6      	cmp	r6, r4
 800b5c6:	d109      	bne.n	800b5dc <__libc_init_array+0x24>
 800b5c8:	4d0b      	ldr	r5, [pc, #44]	; (800b5f8 <__libc_init_array+0x40>)
 800b5ca:	4c0c      	ldr	r4, [pc, #48]	; (800b5fc <__libc_init_array+0x44>)
 800b5cc:	f000 fffa 	bl	800c5c4 <_init>
 800b5d0:	1b64      	subs	r4, r4, r5
 800b5d2:	10a4      	asrs	r4, r4, #2
 800b5d4:	2600      	movs	r6, #0
 800b5d6:	42a6      	cmp	r6, r4
 800b5d8:	d105      	bne.n	800b5e6 <__libc_init_array+0x2e>
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e0:	4798      	blx	r3
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	e7ee      	b.n	800b5c4 <__libc_init_array+0xc>
 800b5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ea:	4798      	blx	r3
 800b5ec:	3601      	adds	r6, #1
 800b5ee:	e7f2      	b.n	800b5d6 <__libc_init_array+0x1e>
 800b5f0:	0800d07c 	.word	0x0800d07c
 800b5f4:	0800d07c 	.word	0x0800d07c
 800b5f8:	0800d07c 	.word	0x0800d07c
 800b5fc:	0800d080 	.word	0x0800d080

0800b600 <memcpy>:
 800b600:	440a      	add	r2, r1
 800b602:	4291      	cmp	r1, r2
 800b604:	f100 33ff 	add.w	r3, r0, #4294967295
 800b608:	d100      	bne.n	800b60c <memcpy+0xc>
 800b60a:	4770      	bx	lr
 800b60c:	b510      	push	{r4, lr}
 800b60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b616:	4291      	cmp	r1, r2
 800b618:	d1f9      	bne.n	800b60e <memcpy+0xe>
 800b61a:	bd10      	pop	{r4, pc}

0800b61c <memset>:
 800b61c:	4402      	add	r2, r0
 800b61e:	4603      	mov	r3, r0
 800b620:	4293      	cmp	r3, r2
 800b622:	d100      	bne.n	800b626 <memset+0xa>
 800b624:	4770      	bx	lr
 800b626:	f803 1b01 	strb.w	r1, [r3], #1
 800b62a:	e7f9      	b.n	800b620 <memset+0x4>

0800b62c <iprintf>:
 800b62c:	b40f      	push	{r0, r1, r2, r3}
 800b62e:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <iprintf+0x2c>)
 800b630:	b513      	push	{r0, r1, r4, lr}
 800b632:	681c      	ldr	r4, [r3, #0]
 800b634:	b124      	cbz	r4, 800b640 <iprintf+0x14>
 800b636:	69a3      	ldr	r3, [r4, #24]
 800b638:	b913      	cbnz	r3, 800b640 <iprintf+0x14>
 800b63a:	4620      	mov	r0, r4
 800b63c:	f000 fa5e 	bl	800bafc <__sinit>
 800b640:	ab05      	add	r3, sp, #20
 800b642:	9a04      	ldr	r2, [sp, #16]
 800b644:	68a1      	ldr	r1, [r4, #8]
 800b646:	9301      	str	r3, [sp, #4]
 800b648:	4620      	mov	r0, r4
 800b64a:	f000 fc2f 	bl	800beac <_vfiprintf_r>
 800b64e:	b002      	add	sp, #8
 800b650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b654:	b004      	add	sp, #16
 800b656:	4770      	bx	lr
 800b658:	20000048 	.word	0x20000048

0800b65c <_puts_r>:
 800b65c:	b570      	push	{r4, r5, r6, lr}
 800b65e:	460e      	mov	r6, r1
 800b660:	4605      	mov	r5, r0
 800b662:	b118      	cbz	r0, 800b66c <_puts_r+0x10>
 800b664:	6983      	ldr	r3, [r0, #24]
 800b666:	b90b      	cbnz	r3, 800b66c <_puts_r+0x10>
 800b668:	f000 fa48 	bl	800bafc <__sinit>
 800b66c:	69ab      	ldr	r3, [r5, #24]
 800b66e:	68ac      	ldr	r4, [r5, #8]
 800b670:	b913      	cbnz	r3, 800b678 <_puts_r+0x1c>
 800b672:	4628      	mov	r0, r5
 800b674:	f000 fa42 	bl	800bafc <__sinit>
 800b678:	4b2c      	ldr	r3, [pc, #176]	; (800b72c <_puts_r+0xd0>)
 800b67a:	429c      	cmp	r4, r3
 800b67c:	d120      	bne.n	800b6c0 <_puts_r+0x64>
 800b67e:	686c      	ldr	r4, [r5, #4]
 800b680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b682:	07db      	lsls	r3, r3, #31
 800b684:	d405      	bmi.n	800b692 <_puts_r+0x36>
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	0598      	lsls	r0, r3, #22
 800b68a:	d402      	bmi.n	800b692 <_puts_r+0x36>
 800b68c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b68e:	f000 fad3 	bl	800bc38 <__retarget_lock_acquire_recursive>
 800b692:	89a3      	ldrh	r3, [r4, #12]
 800b694:	0719      	lsls	r1, r3, #28
 800b696:	d51d      	bpl.n	800b6d4 <_puts_r+0x78>
 800b698:	6923      	ldr	r3, [r4, #16]
 800b69a:	b1db      	cbz	r3, 800b6d4 <_puts_r+0x78>
 800b69c:	3e01      	subs	r6, #1
 800b69e:	68a3      	ldr	r3, [r4, #8]
 800b6a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	60a3      	str	r3, [r4, #8]
 800b6a8:	bb39      	cbnz	r1, 800b6fa <_puts_r+0x9e>
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	da38      	bge.n	800b720 <_puts_r+0xc4>
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	210a      	movs	r1, #10
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	f000 f848 	bl	800b748 <__swbuf_r>
 800b6b8:	3001      	adds	r0, #1
 800b6ba:	d011      	beq.n	800b6e0 <_puts_r+0x84>
 800b6bc:	250a      	movs	r5, #10
 800b6be:	e011      	b.n	800b6e4 <_puts_r+0x88>
 800b6c0:	4b1b      	ldr	r3, [pc, #108]	; (800b730 <_puts_r+0xd4>)
 800b6c2:	429c      	cmp	r4, r3
 800b6c4:	d101      	bne.n	800b6ca <_puts_r+0x6e>
 800b6c6:	68ac      	ldr	r4, [r5, #8]
 800b6c8:	e7da      	b.n	800b680 <_puts_r+0x24>
 800b6ca:	4b1a      	ldr	r3, [pc, #104]	; (800b734 <_puts_r+0xd8>)
 800b6cc:	429c      	cmp	r4, r3
 800b6ce:	bf08      	it	eq
 800b6d0:	68ec      	ldreq	r4, [r5, #12]
 800b6d2:	e7d5      	b.n	800b680 <_puts_r+0x24>
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f000 f888 	bl	800b7ec <__swsetup_r>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d0dd      	beq.n	800b69c <_puts_r+0x40>
 800b6e0:	f04f 35ff 	mov.w	r5, #4294967295
 800b6e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6e6:	07da      	lsls	r2, r3, #31
 800b6e8:	d405      	bmi.n	800b6f6 <_puts_r+0x9a>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	059b      	lsls	r3, r3, #22
 800b6ee:	d402      	bmi.n	800b6f6 <_puts_r+0x9a>
 800b6f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6f2:	f000 faa2 	bl	800bc3a <__retarget_lock_release_recursive>
 800b6f6:	4628      	mov	r0, r5
 800b6f8:	bd70      	pop	{r4, r5, r6, pc}
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	da04      	bge.n	800b708 <_puts_r+0xac>
 800b6fe:	69a2      	ldr	r2, [r4, #24]
 800b700:	429a      	cmp	r2, r3
 800b702:	dc06      	bgt.n	800b712 <_puts_r+0xb6>
 800b704:	290a      	cmp	r1, #10
 800b706:	d004      	beq.n	800b712 <_puts_r+0xb6>
 800b708:	6823      	ldr	r3, [r4, #0]
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	6022      	str	r2, [r4, #0]
 800b70e:	7019      	strb	r1, [r3, #0]
 800b710:	e7c5      	b.n	800b69e <_puts_r+0x42>
 800b712:	4622      	mov	r2, r4
 800b714:	4628      	mov	r0, r5
 800b716:	f000 f817 	bl	800b748 <__swbuf_r>
 800b71a:	3001      	adds	r0, #1
 800b71c:	d1bf      	bne.n	800b69e <_puts_r+0x42>
 800b71e:	e7df      	b.n	800b6e0 <_puts_r+0x84>
 800b720:	6823      	ldr	r3, [r4, #0]
 800b722:	250a      	movs	r5, #10
 800b724:	1c5a      	adds	r2, r3, #1
 800b726:	6022      	str	r2, [r4, #0]
 800b728:	701d      	strb	r5, [r3, #0]
 800b72a:	e7db      	b.n	800b6e4 <_puts_r+0x88>
 800b72c:	0800d000 	.word	0x0800d000
 800b730:	0800d020 	.word	0x0800d020
 800b734:	0800cfe0 	.word	0x0800cfe0

0800b738 <puts>:
 800b738:	4b02      	ldr	r3, [pc, #8]	; (800b744 <puts+0xc>)
 800b73a:	4601      	mov	r1, r0
 800b73c:	6818      	ldr	r0, [r3, #0]
 800b73e:	f7ff bf8d 	b.w	800b65c <_puts_r>
 800b742:	bf00      	nop
 800b744:	20000048 	.word	0x20000048

0800b748 <__swbuf_r>:
 800b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b74a:	460e      	mov	r6, r1
 800b74c:	4614      	mov	r4, r2
 800b74e:	4605      	mov	r5, r0
 800b750:	b118      	cbz	r0, 800b75a <__swbuf_r+0x12>
 800b752:	6983      	ldr	r3, [r0, #24]
 800b754:	b90b      	cbnz	r3, 800b75a <__swbuf_r+0x12>
 800b756:	f000 f9d1 	bl	800bafc <__sinit>
 800b75a:	4b21      	ldr	r3, [pc, #132]	; (800b7e0 <__swbuf_r+0x98>)
 800b75c:	429c      	cmp	r4, r3
 800b75e:	d12b      	bne.n	800b7b8 <__swbuf_r+0x70>
 800b760:	686c      	ldr	r4, [r5, #4]
 800b762:	69a3      	ldr	r3, [r4, #24]
 800b764:	60a3      	str	r3, [r4, #8]
 800b766:	89a3      	ldrh	r3, [r4, #12]
 800b768:	071a      	lsls	r2, r3, #28
 800b76a:	d52f      	bpl.n	800b7cc <__swbuf_r+0x84>
 800b76c:	6923      	ldr	r3, [r4, #16]
 800b76e:	b36b      	cbz	r3, 800b7cc <__swbuf_r+0x84>
 800b770:	6923      	ldr	r3, [r4, #16]
 800b772:	6820      	ldr	r0, [r4, #0]
 800b774:	1ac0      	subs	r0, r0, r3
 800b776:	6963      	ldr	r3, [r4, #20]
 800b778:	b2f6      	uxtb	r6, r6
 800b77a:	4283      	cmp	r3, r0
 800b77c:	4637      	mov	r7, r6
 800b77e:	dc04      	bgt.n	800b78a <__swbuf_r+0x42>
 800b780:	4621      	mov	r1, r4
 800b782:	4628      	mov	r0, r5
 800b784:	f000 f926 	bl	800b9d4 <_fflush_r>
 800b788:	bb30      	cbnz	r0, 800b7d8 <__swbuf_r+0x90>
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	60a3      	str	r3, [r4, #8]
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	1c5a      	adds	r2, r3, #1
 800b794:	6022      	str	r2, [r4, #0]
 800b796:	701e      	strb	r6, [r3, #0]
 800b798:	6963      	ldr	r3, [r4, #20]
 800b79a:	3001      	adds	r0, #1
 800b79c:	4283      	cmp	r3, r0
 800b79e:	d004      	beq.n	800b7aa <__swbuf_r+0x62>
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	07db      	lsls	r3, r3, #31
 800b7a4:	d506      	bpl.n	800b7b4 <__swbuf_r+0x6c>
 800b7a6:	2e0a      	cmp	r6, #10
 800b7a8:	d104      	bne.n	800b7b4 <__swbuf_r+0x6c>
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f000 f911 	bl	800b9d4 <_fflush_r>
 800b7b2:	b988      	cbnz	r0, 800b7d8 <__swbuf_r+0x90>
 800b7b4:	4638      	mov	r0, r7
 800b7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7b8:	4b0a      	ldr	r3, [pc, #40]	; (800b7e4 <__swbuf_r+0x9c>)
 800b7ba:	429c      	cmp	r4, r3
 800b7bc:	d101      	bne.n	800b7c2 <__swbuf_r+0x7a>
 800b7be:	68ac      	ldr	r4, [r5, #8]
 800b7c0:	e7cf      	b.n	800b762 <__swbuf_r+0x1a>
 800b7c2:	4b09      	ldr	r3, [pc, #36]	; (800b7e8 <__swbuf_r+0xa0>)
 800b7c4:	429c      	cmp	r4, r3
 800b7c6:	bf08      	it	eq
 800b7c8:	68ec      	ldreq	r4, [r5, #12]
 800b7ca:	e7ca      	b.n	800b762 <__swbuf_r+0x1a>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4628      	mov	r0, r5
 800b7d0:	f000 f80c 	bl	800b7ec <__swsetup_r>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	d0cb      	beq.n	800b770 <__swbuf_r+0x28>
 800b7d8:	f04f 37ff 	mov.w	r7, #4294967295
 800b7dc:	e7ea      	b.n	800b7b4 <__swbuf_r+0x6c>
 800b7de:	bf00      	nop
 800b7e0:	0800d000 	.word	0x0800d000
 800b7e4:	0800d020 	.word	0x0800d020
 800b7e8:	0800cfe0 	.word	0x0800cfe0

0800b7ec <__swsetup_r>:
 800b7ec:	4b32      	ldr	r3, [pc, #200]	; (800b8b8 <__swsetup_r+0xcc>)
 800b7ee:	b570      	push	{r4, r5, r6, lr}
 800b7f0:	681d      	ldr	r5, [r3, #0]
 800b7f2:	4606      	mov	r6, r0
 800b7f4:	460c      	mov	r4, r1
 800b7f6:	b125      	cbz	r5, 800b802 <__swsetup_r+0x16>
 800b7f8:	69ab      	ldr	r3, [r5, #24]
 800b7fa:	b913      	cbnz	r3, 800b802 <__swsetup_r+0x16>
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	f000 f97d 	bl	800bafc <__sinit>
 800b802:	4b2e      	ldr	r3, [pc, #184]	; (800b8bc <__swsetup_r+0xd0>)
 800b804:	429c      	cmp	r4, r3
 800b806:	d10f      	bne.n	800b828 <__swsetup_r+0x3c>
 800b808:	686c      	ldr	r4, [r5, #4]
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b810:	0719      	lsls	r1, r3, #28
 800b812:	d42c      	bmi.n	800b86e <__swsetup_r+0x82>
 800b814:	06dd      	lsls	r5, r3, #27
 800b816:	d411      	bmi.n	800b83c <__swsetup_r+0x50>
 800b818:	2309      	movs	r3, #9
 800b81a:	6033      	str	r3, [r6, #0]
 800b81c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b820:	81a3      	strh	r3, [r4, #12]
 800b822:	f04f 30ff 	mov.w	r0, #4294967295
 800b826:	e03e      	b.n	800b8a6 <__swsetup_r+0xba>
 800b828:	4b25      	ldr	r3, [pc, #148]	; (800b8c0 <__swsetup_r+0xd4>)
 800b82a:	429c      	cmp	r4, r3
 800b82c:	d101      	bne.n	800b832 <__swsetup_r+0x46>
 800b82e:	68ac      	ldr	r4, [r5, #8]
 800b830:	e7eb      	b.n	800b80a <__swsetup_r+0x1e>
 800b832:	4b24      	ldr	r3, [pc, #144]	; (800b8c4 <__swsetup_r+0xd8>)
 800b834:	429c      	cmp	r4, r3
 800b836:	bf08      	it	eq
 800b838:	68ec      	ldreq	r4, [r5, #12]
 800b83a:	e7e6      	b.n	800b80a <__swsetup_r+0x1e>
 800b83c:	0758      	lsls	r0, r3, #29
 800b83e:	d512      	bpl.n	800b866 <__swsetup_r+0x7a>
 800b840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b842:	b141      	cbz	r1, 800b856 <__swsetup_r+0x6a>
 800b844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b848:	4299      	cmp	r1, r3
 800b84a:	d002      	beq.n	800b852 <__swsetup_r+0x66>
 800b84c:	4630      	mov	r0, r6
 800b84e:	f000 fa59 	bl	800bd04 <_free_r>
 800b852:	2300      	movs	r3, #0
 800b854:	6363      	str	r3, [r4, #52]	; 0x34
 800b856:	89a3      	ldrh	r3, [r4, #12]
 800b858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b85c:	81a3      	strh	r3, [r4, #12]
 800b85e:	2300      	movs	r3, #0
 800b860:	6063      	str	r3, [r4, #4]
 800b862:	6923      	ldr	r3, [r4, #16]
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	f043 0308 	orr.w	r3, r3, #8
 800b86c:	81a3      	strh	r3, [r4, #12]
 800b86e:	6923      	ldr	r3, [r4, #16]
 800b870:	b94b      	cbnz	r3, 800b886 <__swsetup_r+0x9a>
 800b872:	89a3      	ldrh	r3, [r4, #12]
 800b874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b87c:	d003      	beq.n	800b886 <__swsetup_r+0x9a>
 800b87e:	4621      	mov	r1, r4
 800b880:	4630      	mov	r0, r6
 800b882:	f000 f9ff 	bl	800bc84 <__smakebuf_r>
 800b886:	89a0      	ldrh	r0, [r4, #12]
 800b888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b88c:	f010 0301 	ands.w	r3, r0, #1
 800b890:	d00a      	beq.n	800b8a8 <__swsetup_r+0xbc>
 800b892:	2300      	movs	r3, #0
 800b894:	60a3      	str	r3, [r4, #8]
 800b896:	6963      	ldr	r3, [r4, #20]
 800b898:	425b      	negs	r3, r3
 800b89a:	61a3      	str	r3, [r4, #24]
 800b89c:	6923      	ldr	r3, [r4, #16]
 800b89e:	b943      	cbnz	r3, 800b8b2 <__swsetup_r+0xc6>
 800b8a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8a4:	d1ba      	bne.n	800b81c <__swsetup_r+0x30>
 800b8a6:	bd70      	pop	{r4, r5, r6, pc}
 800b8a8:	0781      	lsls	r1, r0, #30
 800b8aa:	bf58      	it	pl
 800b8ac:	6963      	ldrpl	r3, [r4, #20]
 800b8ae:	60a3      	str	r3, [r4, #8]
 800b8b0:	e7f4      	b.n	800b89c <__swsetup_r+0xb0>
 800b8b2:	2000      	movs	r0, #0
 800b8b4:	e7f7      	b.n	800b8a6 <__swsetup_r+0xba>
 800b8b6:	bf00      	nop
 800b8b8:	20000048 	.word	0x20000048
 800b8bc:	0800d000 	.word	0x0800d000
 800b8c0:	0800d020 	.word	0x0800d020
 800b8c4:	0800cfe0 	.word	0x0800cfe0

0800b8c8 <__sflush_r>:
 800b8c8:	898a      	ldrh	r2, [r1, #12]
 800b8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	0710      	lsls	r0, r2, #28
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	d458      	bmi.n	800b988 <__sflush_r+0xc0>
 800b8d6:	684b      	ldr	r3, [r1, #4]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	dc05      	bgt.n	800b8e8 <__sflush_r+0x20>
 800b8dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	dc02      	bgt.n	800b8e8 <__sflush_r+0x20>
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8ea:	2e00      	cmp	r6, #0
 800b8ec:	d0f9      	beq.n	800b8e2 <__sflush_r+0x1a>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8f4:	682f      	ldr	r7, [r5, #0]
 800b8f6:	602b      	str	r3, [r5, #0]
 800b8f8:	d032      	beq.n	800b960 <__sflush_r+0x98>
 800b8fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8fc:	89a3      	ldrh	r3, [r4, #12]
 800b8fe:	075a      	lsls	r2, r3, #29
 800b900:	d505      	bpl.n	800b90e <__sflush_r+0x46>
 800b902:	6863      	ldr	r3, [r4, #4]
 800b904:	1ac0      	subs	r0, r0, r3
 800b906:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b908:	b10b      	cbz	r3, 800b90e <__sflush_r+0x46>
 800b90a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b90c:	1ac0      	subs	r0, r0, r3
 800b90e:	2300      	movs	r3, #0
 800b910:	4602      	mov	r2, r0
 800b912:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b914:	6a21      	ldr	r1, [r4, #32]
 800b916:	4628      	mov	r0, r5
 800b918:	47b0      	blx	r6
 800b91a:	1c43      	adds	r3, r0, #1
 800b91c:	89a3      	ldrh	r3, [r4, #12]
 800b91e:	d106      	bne.n	800b92e <__sflush_r+0x66>
 800b920:	6829      	ldr	r1, [r5, #0]
 800b922:	291d      	cmp	r1, #29
 800b924:	d82c      	bhi.n	800b980 <__sflush_r+0xb8>
 800b926:	4a2a      	ldr	r2, [pc, #168]	; (800b9d0 <__sflush_r+0x108>)
 800b928:	40ca      	lsrs	r2, r1
 800b92a:	07d6      	lsls	r6, r2, #31
 800b92c:	d528      	bpl.n	800b980 <__sflush_r+0xb8>
 800b92e:	2200      	movs	r2, #0
 800b930:	6062      	str	r2, [r4, #4]
 800b932:	04d9      	lsls	r1, r3, #19
 800b934:	6922      	ldr	r2, [r4, #16]
 800b936:	6022      	str	r2, [r4, #0]
 800b938:	d504      	bpl.n	800b944 <__sflush_r+0x7c>
 800b93a:	1c42      	adds	r2, r0, #1
 800b93c:	d101      	bne.n	800b942 <__sflush_r+0x7a>
 800b93e:	682b      	ldr	r3, [r5, #0]
 800b940:	b903      	cbnz	r3, 800b944 <__sflush_r+0x7c>
 800b942:	6560      	str	r0, [r4, #84]	; 0x54
 800b944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b946:	602f      	str	r7, [r5, #0]
 800b948:	2900      	cmp	r1, #0
 800b94a:	d0ca      	beq.n	800b8e2 <__sflush_r+0x1a>
 800b94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b950:	4299      	cmp	r1, r3
 800b952:	d002      	beq.n	800b95a <__sflush_r+0x92>
 800b954:	4628      	mov	r0, r5
 800b956:	f000 f9d5 	bl	800bd04 <_free_r>
 800b95a:	2000      	movs	r0, #0
 800b95c:	6360      	str	r0, [r4, #52]	; 0x34
 800b95e:	e7c1      	b.n	800b8e4 <__sflush_r+0x1c>
 800b960:	6a21      	ldr	r1, [r4, #32]
 800b962:	2301      	movs	r3, #1
 800b964:	4628      	mov	r0, r5
 800b966:	47b0      	blx	r6
 800b968:	1c41      	adds	r1, r0, #1
 800b96a:	d1c7      	bne.n	800b8fc <__sflush_r+0x34>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d0c4      	beq.n	800b8fc <__sflush_r+0x34>
 800b972:	2b1d      	cmp	r3, #29
 800b974:	d001      	beq.n	800b97a <__sflush_r+0xb2>
 800b976:	2b16      	cmp	r3, #22
 800b978:	d101      	bne.n	800b97e <__sflush_r+0xb6>
 800b97a:	602f      	str	r7, [r5, #0]
 800b97c:	e7b1      	b.n	800b8e2 <__sflush_r+0x1a>
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b984:	81a3      	strh	r3, [r4, #12]
 800b986:	e7ad      	b.n	800b8e4 <__sflush_r+0x1c>
 800b988:	690f      	ldr	r7, [r1, #16]
 800b98a:	2f00      	cmp	r7, #0
 800b98c:	d0a9      	beq.n	800b8e2 <__sflush_r+0x1a>
 800b98e:	0793      	lsls	r3, r2, #30
 800b990:	680e      	ldr	r6, [r1, #0]
 800b992:	bf08      	it	eq
 800b994:	694b      	ldreq	r3, [r1, #20]
 800b996:	600f      	str	r7, [r1, #0]
 800b998:	bf18      	it	ne
 800b99a:	2300      	movne	r3, #0
 800b99c:	eba6 0807 	sub.w	r8, r6, r7
 800b9a0:	608b      	str	r3, [r1, #8]
 800b9a2:	f1b8 0f00 	cmp.w	r8, #0
 800b9a6:	dd9c      	ble.n	800b8e2 <__sflush_r+0x1a>
 800b9a8:	6a21      	ldr	r1, [r4, #32]
 800b9aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9ac:	4643      	mov	r3, r8
 800b9ae:	463a      	mov	r2, r7
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	47b0      	blx	r6
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	dc06      	bgt.n	800b9c6 <__sflush_r+0xfe>
 800b9b8:	89a3      	ldrh	r3, [r4, #12]
 800b9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9be:	81a3      	strh	r3, [r4, #12]
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c4:	e78e      	b.n	800b8e4 <__sflush_r+0x1c>
 800b9c6:	4407      	add	r7, r0
 800b9c8:	eba8 0800 	sub.w	r8, r8, r0
 800b9cc:	e7e9      	b.n	800b9a2 <__sflush_r+0xda>
 800b9ce:	bf00      	nop
 800b9d0:	20400001 	.word	0x20400001

0800b9d4 <_fflush_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	690b      	ldr	r3, [r1, #16]
 800b9d8:	4605      	mov	r5, r0
 800b9da:	460c      	mov	r4, r1
 800b9dc:	b913      	cbnz	r3, 800b9e4 <_fflush_r+0x10>
 800b9de:	2500      	movs	r5, #0
 800b9e0:	4628      	mov	r0, r5
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	b118      	cbz	r0, 800b9ee <_fflush_r+0x1a>
 800b9e6:	6983      	ldr	r3, [r0, #24]
 800b9e8:	b90b      	cbnz	r3, 800b9ee <_fflush_r+0x1a>
 800b9ea:	f000 f887 	bl	800bafc <__sinit>
 800b9ee:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <_fflush_r+0x6c>)
 800b9f0:	429c      	cmp	r4, r3
 800b9f2:	d11b      	bne.n	800ba2c <_fflush_r+0x58>
 800b9f4:	686c      	ldr	r4, [r5, #4]
 800b9f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0ef      	beq.n	800b9de <_fflush_r+0xa>
 800b9fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba00:	07d0      	lsls	r0, r2, #31
 800ba02:	d404      	bmi.n	800ba0e <_fflush_r+0x3a>
 800ba04:	0599      	lsls	r1, r3, #22
 800ba06:	d402      	bmi.n	800ba0e <_fflush_r+0x3a>
 800ba08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba0a:	f000 f915 	bl	800bc38 <__retarget_lock_acquire_recursive>
 800ba0e:	4628      	mov	r0, r5
 800ba10:	4621      	mov	r1, r4
 800ba12:	f7ff ff59 	bl	800b8c8 <__sflush_r>
 800ba16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba18:	07da      	lsls	r2, r3, #31
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	d4e0      	bmi.n	800b9e0 <_fflush_r+0xc>
 800ba1e:	89a3      	ldrh	r3, [r4, #12]
 800ba20:	059b      	lsls	r3, r3, #22
 800ba22:	d4dd      	bmi.n	800b9e0 <_fflush_r+0xc>
 800ba24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba26:	f000 f908 	bl	800bc3a <__retarget_lock_release_recursive>
 800ba2a:	e7d9      	b.n	800b9e0 <_fflush_r+0xc>
 800ba2c:	4b05      	ldr	r3, [pc, #20]	; (800ba44 <_fflush_r+0x70>)
 800ba2e:	429c      	cmp	r4, r3
 800ba30:	d101      	bne.n	800ba36 <_fflush_r+0x62>
 800ba32:	68ac      	ldr	r4, [r5, #8]
 800ba34:	e7df      	b.n	800b9f6 <_fflush_r+0x22>
 800ba36:	4b04      	ldr	r3, [pc, #16]	; (800ba48 <_fflush_r+0x74>)
 800ba38:	429c      	cmp	r4, r3
 800ba3a:	bf08      	it	eq
 800ba3c:	68ec      	ldreq	r4, [r5, #12]
 800ba3e:	e7da      	b.n	800b9f6 <_fflush_r+0x22>
 800ba40:	0800d000 	.word	0x0800d000
 800ba44:	0800d020 	.word	0x0800d020
 800ba48:	0800cfe0 	.word	0x0800cfe0

0800ba4c <std>:
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	b510      	push	{r4, lr}
 800ba50:	4604      	mov	r4, r0
 800ba52:	e9c0 3300 	strd	r3, r3, [r0]
 800ba56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ba5a:	6083      	str	r3, [r0, #8]
 800ba5c:	8181      	strh	r1, [r0, #12]
 800ba5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ba60:	81c2      	strh	r2, [r0, #14]
 800ba62:	6183      	str	r3, [r0, #24]
 800ba64:	4619      	mov	r1, r3
 800ba66:	2208      	movs	r2, #8
 800ba68:	305c      	adds	r0, #92	; 0x5c
 800ba6a:	f7ff fdd7 	bl	800b61c <memset>
 800ba6e:	4b05      	ldr	r3, [pc, #20]	; (800ba84 <std+0x38>)
 800ba70:	6263      	str	r3, [r4, #36]	; 0x24
 800ba72:	4b05      	ldr	r3, [pc, #20]	; (800ba88 <std+0x3c>)
 800ba74:	62a3      	str	r3, [r4, #40]	; 0x28
 800ba76:	4b05      	ldr	r3, [pc, #20]	; (800ba8c <std+0x40>)
 800ba78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ba7a:	4b05      	ldr	r3, [pc, #20]	; (800ba90 <std+0x44>)
 800ba7c:	6224      	str	r4, [r4, #32]
 800ba7e:	6323      	str	r3, [r4, #48]	; 0x30
 800ba80:	bd10      	pop	{r4, pc}
 800ba82:	bf00      	nop
 800ba84:	0800c455 	.word	0x0800c455
 800ba88:	0800c477 	.word	0x0800c477
 800ba8c:	0800c4af 	.word	0x0800c4af
 800ba90:	0800c4d3 	.word	0x0800c4d3

0800ba94 <_cleanup_r>:
 800ba94:	4901      	ldr	r1, [pc, #4]	; (800ba9c <_cleanup_r+0x8>)
 800ba96:	f000 b8af 	b.w	800bbf8 <_fwalk_reent>
 800ba9a:	bf00      	nop
 800ba9c:	0800b9d5 	.word	0x0800b9d5

0800baa0 <__sfmoreglue>:
 800baa0:	b570      	push	{r4, r5, r6, lr}
 800baa2:	1e4a      	subs	r2, r1, #1
 800baa4:	2568      	movs	r5, #104	; 0x68
 800baa6:	4355      	muls	r5, r2
 800baa8:	460e      	mov	r6, r1
 800baaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800baae:	f000 f979 	bl	800bda4 <_malloc_r>
 800bab2:	4604      	mov	r4, r0
 800bab4:	b140      	cbz	r0, 800bac8 <__sfmoreglue+0x28>
 800bab6:	2100      	movs	r1, #0
 800bab8:	e9c0 1600 	strd	r1, r6, [r0]
 800babc:	300c      	adds	r0, #12
 800babe:	60a0      	str	r0, [r4, #8]
 800bac0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bac4:	f7ff fdaa 	bl	800b61c <memset>
 800bac8:	4620      	mov	r0, r4
 800baca:	bd70      	pop	{r4, r5, r6, pc}

0800bacc <__sfp_lock_acquire>:
 800bacc:	4801      	ldr	r0, [pc, #4]	; (800bad4 <__sfp_lock_acquire+0x8>)
 800bace:	f000 b8b3 	b.w	800bc38 <__retarget_lock_acquire_recursive>
 800bad2:	bf00      	nop
 800bad4:	2000168c 	.word	0x2000168c

0800bad8 <__sfp_lock_release>:
 800bad8:	4801      	ldr	r0, [pc, #4]	; (800bae0 <__sfp_lock_release+0x8>)
 800bada:	f000 b8ae 	b.w	800bc3a <__retarget_lock_release_recursive>
 800bade:	bf00      	nop
 800bae0:	2000168c 	.word	0x2000168c

0800bae4 <__sinit_lock_acquire>:
 800bae4:	4801      	ldr	r0, [pc, #4]	; (800baec <__sinit_lock_acquire+0x8>)
 800bae6:	f000 b8a7 	b.w	800bc38 <__retarget_lock_acquire_recursive>
 800baea:	bf00      	nop
 800baec:	20001687 	.word	0x20001687

0800baf0 <__sinit_lock_release>:
 800baf0:	4801      	ldr	r0, [pc, #4]	; (800baf8 <__sinit_lock_release+0x8>)
 800baf2:	f000 b8a2 	b.w	800bc3a <__retarget_lock_release_recursive>
 800baf6:	bf00      	nop
 800baf8:	20001687 	.word	0x20001687

0800bafc <__sinit>:
 800bafc:	b510      	push	{r4, lr}
 800bafe:	4604      	mov	r4, r0
 800bb00:	f7ff fff0 	bl	800bae4 <__sinit_lock_acquire>
 800bb04:	69a3      	ldr	r3, [r4, #24]
 800bb06:	b11b      	cbz	r3, 800bb10 <__sinit+0x14>
 800bb08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb0c:	f7ff bff0 	b.w	800baf0 <__sinit_lock_release>
 800bb10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb14:	6523      	str	r3, [r4, #80]	; 0x50
 800bb16:	4b13      	ldr	r3, [pc, #76]	; (800bb64 <__sinit+0x68>)
 800bb18:	4a13      	ldr	r2, [pc, #76]	; (800bb68 <__sinit+0x6c>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb1e:	42a3      	cmp	r3, r4
 800bb20:	bf04      	itt	eq
 800bb22:	2301      	moveq	r3, #1
 800bb24:	61a3      	streq	r3, [r4, #24]
 800bb26:	4620      	mov	r0, r4
 800bb28:	f000 f820 	bl	800bb6c <__sfp>
 800bb2c:	6060      	str	r0, [r4, #4]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	f000 f81c 	bl	800bb6c <__sfp>
 800bb34:	60a0      	str	r0, [r4, #8]
 800bb36:	4620      	mov	r0, r4
 800bb38:	f000 f818 	bl	800bb6c <__sfp>
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	60e0      	str	r0, [r4, #12]
 800bb40:	2104      	movs	r1, #4
 800bb42:	6860      	ldr	r0, [r4, #4]
 800bb44:	f7ff ff82 	bl	800ba4c <std>
 800bb48:	68a0      	ldr	r0, [r4, #8]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	2109      	movs	r1, #9
 800bb4e:	f7ff ff7d 	bl	800ba4c <std>
 800bb52:	68e0      	ldr	r0, [r4, #12]
 800bb54:	2202      	movs	r2, #2
 800bb56:	2112      	movs	r1, #18
 800bb58:	f7ff ff78 	bl	800ba4c <std>
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	61a3      	str	r3, [r4, #24]
 800bb60:	e7d2      	b.n	800bb08 <__sinit+0xc>
 800bb62:	bf00      	nop
 800bb64:	0800cfdc 	.word	0x0800cfdc
 800bb68:	0800ba95 	.word	0x0800ba95

0800bb6c <__sfp>:
 800bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6e:	4607      	mov	r7, r0
 800bb70:	f7ff ffac 	bl	800bacc <__sfp_lock_acquire>
 800bb74:	4b1e      	ldr	r3, [pc, #120]	; (800bbf0 <__sfp+0x84>)
 800bb76:	681e      	ldr	r6, [r3, #0]
 800bb78:	69b3      	ldr	r3, [r6, #24]
 800bb7a:	b913      	cbnz	r3, 800bb82 <__sfp+0x16>
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	f7ff ffbd 	bl	800bafc <__sinit>
 800bb82:	3648      	adds	r6, #72	; 0x48
 800bb84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	d503      	bpl.n	800bb94 <__sfp+0x28>
 800bb8c:	6833      	ldr	r3, [r6, #0]
 800bb8e:	b30b      	cbz	r3, 800bbd4 <__sfp+0x68>
 800bb90:	6836      	ldr	r6, [r6, #0]
 800bb92:	e7f7      	b.n	800bb84 <__sfp+0x18>
 800bb94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bb98:	b9d5      	cbnz	r5, 800bbd0 <__sfp+0x64>
 800bb9a:	4b16      	ldr	r3, [pc, #88]	; (800bbf4 <__sfp+0x88>)
 800bb9c:	60e3      	str	r3, [r4, #12]
 800bb9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bba2:	6665      	str	r5, [r4, #100]	; 0x64
 800bba4:	f000 f847 	bl	800bc36 <__retarget_lock_init_recursive>
 800bba8:	f7ff ff96 	bl	800bad8 <__sfp_lock_release>
 800bbac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bbb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bbb4:	6025      	str	r5, [r4, #0]
 800bbb6:	61a5      	str	r5, [r4, #24]
 800bbb8:	2208      	movs	r2, #8
 800bbba:	4629      	mov	r1, r5
 800bbbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bbc0:	f7ff fd2c 	bl	800b61c <memset>
 800bbc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bbc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bbcc:	4620      	mov	r0, r4
 800bbce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbd0:	3468      	adds	r4, #104	; 0x68
 800bbd2:	e7d9      	b.n	800bb88 <__sfp+0x1c>
 800bbd4:	2104      	movs	r1, #4
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	f7ff ff62 	bl	800baa0 <__sfmoreglue>
 800bbdc:	4604      	mov	r4, r0
 800bbde:	6030      	str	r0, [r6, #0]
 800bbe0:	2800      	cmp	r0, #0
 800bbe2:	d1d5      	bne.n	800bb90 <__sfp+0x24>
 800bbe4:	f7ff ff78 	bl	800bad8 <__sfp_lock_release>
 800bbe8:	230c      	movs	r3, #12
 800bbea:	603b      	str	r3, [r7, #0]
 800bbec:	e7ee      	b.n	800bbcc <__sfp+0x60>
 800bbee:	bf00      	nop
 800bbf0:	0800cfdc 	.word	0x0800cfdc
 800bbf4:	ffff0001 	.word	0xffff0001

0800bbf8 <_fwalk_reent>:
 800bbf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	4688      	mov	r8, r1
 800bc00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc04:	2700      	movs	r7, #0
 800bc06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc0a:	f1b9 0901 	subs.w	r9, r9, #1
 800bc0e:	d505      	bpl.n	800bc1c <_fwalk_reent+0x24>
 800bc10:	6824      	ldr	r4, [r4, #0]
 800bc12:	2c00      	cmp	r4, #0
 800bc14:	d1f7      	bne.n	800bc06 <_fwalk_reent+0xe>
 800bc16:	4638      	mov	r0, r7
 800bc18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc1c:	89ab      	ldrh	r3, [r5, #12]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d907      	bls.n	800bc32 <_fwalk_reent+0x3a>
 800bc22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc26:	3301      	adds	r3, #1
 800bc28:	d003      	beq.n	800bc32 <_fwalk_reent+0x3a>
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	47c0      	blx	r8
 800bc30:	4307      	orrs	r7, r0
 800bc32:	3568      	adds	r5, #104	; 0x68
 800bc34:	e7e9      	b.n	800bc0a <_fwalk_reent+0x12>

0800bc36 <__retarget_lock_init_recursive>:
 800bc36:	4770      	bx	lr

0800bc38 <__retarget_lock_acquire_recursive>:
 800bc38:	4770      	bx	lr

0800bc3a <__retarget_lock_release_recursive>:
 800bc3a:	4770      	bx	lr

0800bc3c <__swhatbuf_r>:
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	460e      	mov	r6, r1
 800bc40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc44:	2900      	cmp	r1, #0
 800bc46:	b096      	sub	sp, #88	; 0x58
 800bc48:	4614      	mov	r4, r2
 800bc4a:	461d      	mov	r5, r3
 800bc4c:	da07      	bge.n	800bc5e <__swhatbuf_r+0x22>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	602b      	str	r3, [r5, #0]
 800bc52:	89b3      	ldrh	r3, [r6, #12]
 800bc54:	061a      	lsls	r2, r3, #24
 800bc56:	d410      	bmi.n	800bc7a <__swhatbuf_r+0x3e>
 800bc58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc5c:	e00e      	b.n	800bc7c <__swhatbuf_r+0x40>
 800bc5e:	466a      	mov	r2, sp
 800bc60:	f000 fc5e 	bl	800c520 <_fstat_r>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	dbf2      	blt.n	800bc4e <__swhatbuf_r+0x12>
 800bc68:	9a01      	ldr	r2, [sp, #4]
 800bc6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bc6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bc72:	425a      	negs	r2, r3
 800bc74:	415a      	adcs	r2, r3
 800bc76:	602a      	str	r2, [r5, #0]
 800bc78:	e7ee      	b.n	800bc58 <__swhatbuf_r+0x1c>
 800bc7a:	2340      	movs	r3, #64	; 0x40
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	b016      	add	sp, #88	; 0x58
 800bc82:	bd70      	pop	{r4, r5, r6, pc}

0800bc84 <__smakebuf_r>:
 800bc84:	898b      	ldrh	r3, [r1, #12]
 800bc86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bc88:	079d      	lsls	r5, r3, #30
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	d507      	bpl.n	800bca0 <__smakebuf_r+0x1c>
 800bc90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bc94:	6023      	str	r3, [r4, #0]
 800bc96:	6123      	str	r3, [r4, #16]
 800bc98:	2301      	movs	r3, #1
 800bc9a:	6163      	str	r3, [r4, #20]
 800bc9c:	b002      	add	sp, #8
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}
 800bca0:	ab01      	add	r3, sp, #4
 800bca2:	466a      	mov	r2, sp
 800bca4:	f7ff ffca 	bl	800bc3c <__swhatbuf_r>
 800bca8:	9900      	ldr	r1, [sp, #0]
 800bcaa:	4605      	mov	r5, r0
 800bcac:	4630      	mov	r0, r6
 800bcae:	f000 f879 	bl	800bda4 <_malloc_r>
 800bcb2:	b948      	cbnz	r0, 800bcc8 <__smakebuf_r+0x44>
 800bcb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcb8:	059a      	lsls	r2, r3, #22
 800bcba:	d4ef      	bmi.n	800bc9c <__smakebuf_r+0x18>
 800bcbc:	f023 0303 	bic.w	r3, r3, #3
 800bcc0:	f043 0302 	orr.w	r3, r3, #2
 800bcc4:	81a3      	strh	r3, [r4, #12]
 800bcc6:	e7e3      	b.n	800bc90 <__smakebuf_r+0xc>
 800bcc8:	4b0d      	ldr	r3, [pc, #52]	; (800bd00 <__smakebuf_r+0x7c>)
 800bcca:	62b3      	str	r3, [r6, #40]	; 0x28
 800bccc:	89a3      	ldrh	r3, [r4, #12]
 800bcce:	6020      	str	r0, [r4, #0]
 800bcd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd4:	81a3      	strh	r3, [r4, #12]
 800bcd6:	9b00      	ldr	r3, [sp, #0]
 800bcd8:	6163      	str	r3, [r4, #20]
 800bcda:	9b01      	ldr	r3, [sp, #4]
 800bcdc:	6120      	str	r0, [r4, #16]
 800bcde:	b15b      	cbz	r3, 800bcf8 <__smakebuf_r+0x74>
 800bce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bce4:	4630      	mov	r0, r6
 800bce6:	f000 fc2d 	bl	800c544 <_isatty_r>
 800bcea:	b128      	cbz	r0, 800bcf8 <__smakebuf_r+0x74>
 800bcec:	89a3      	ldrh	r3, [r4, #12]
 800bcee:	f023 0303 	bic.w	r3, r3, #3
 800bcf2:	f043 0301 	orr.w	r3, r3, #1
 800bcf6:	81a3      	strh	r3, [r4, #12]
 800bcf8:	89a0      	ldrh	r0, [r4, #12]
 800bcfa:	4305      	orrs	r5, r0
 800bcfc:	81a5      	strh	r5, [r4, #12]
 800bcfe:	e7cd      	b.n	800bc9c <__smakebuf_r+0x18>
 800bd00:	0800ba95 	.word	0x0800ba95

0800bd04 <_free_r>:
 800bd04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bd06:	2900      	cmp	r1, #0
 800bd08:	d048      	beq.n	800bd9c <_free_r+0x98>
 800bd0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd0e:	9001      	str	r0, [sp, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f1a1 0404 	sub.w	r4, r1, #4
 800bd16:	bfb8      	it	lt
 800bd18:	18e4      	addlt	r4, r4, r3
 800bd1a:	f000 fc35 	bl	800c588 <__malloc_lock>
 800bd1e:	4a20      	ldr	r2, [pc, #128]	; (800bda0 <_free_r+0x9c>)
 800bd20:	9801      	ldr	r0, [sp, #4]
 800bd22:	6813      	ldr	r3, [r2, #0]
 800bd24:	4615      	mov	r5, r2
 800bd26:	b933      	cbnz	r3, 800bd36 <_free_r+0x32>
 800bd28:	6063      	str	r3, [r4, #4]
 800bd2a:	6014      	str	r4, [r2, #0]
 800bd2c:	b003      	add	sp, #12
 800bd2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd32:	f000 bc2f 	b.w	800c594 <__malloc_unlock>
 800bd36:	42a3      	cmp	r3, r4
 800bd38:	d90b      	bls.n	800bd52 <_free_r+0x4e>
 800bd3a:	6821      	ldr	r1, [r4, #0]
 800bd3c:	1862      	adds	r2, r4, r1
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	bf04      	itt	eq
 800bd42:	681a      	ldreq	r2, [r3, #0]
 800bd44:	685b      	ldreq	r3, [r3, #4]
 800bd46:	6063      	str	r3, [r4, #4]
 800bd48:	bf04      	itt	eq
 800bd4a:	1852      	addeq	r2, r2, r1
 800bd4c:	6022      	streq	r2, [r4, #0]
 800bd4e:	602c      	str	r4, [r5, #0]
 800bd50:	e7ec      	b.n	800bd2c <_free_r+0x28>
 800bd52:	461a      	mov	r2, r3
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	b10b      	cbz	r3, 800bd5c <_free_r+0x58>
 800bd58:	42a3      	cmp	r3, r4
 800bd5a:	d9fa      	bls.n	800bd52 <_free_r+0x4e>
 800bd5c:	6811      	ldr	r1, [r2, #0]
 800bd5e:	1855      	adds	r5, r2, r1
 800bd60:	42a5      	cmp	r5, r4
 800bd62:	d10b      	bne.n	800bd7c <_free_r+0x78>
 800bd64:	6824      	ldr	r4, [r4, #0]
 800bd66:	4421      	add	r1, r4
 800bd68:	1854      	adds	r4, r2, r1
 800bd6a:	42a3      	cmp	r3, r4
 800bd6c:	6011      	str	r1, [r2, #0]
 800bd6e:	d1dd      	bne.n	800bd2c <_free_r+0x28>
 800bd70:	681c      	ldr	r4, [r3, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	6053      	str	r3, [r2, #4]
 800bd76:	4421      	add	r1, r4
 800bd78:	6011      	str	r1, [r2, #0]
 800bd7a:	e7d7      	b.n	800bd2c <_free_r+0x28>
 800bd7c:	d902      	bls.n	800bd84 <_free_r+0x80>
 800bd7e:	230c      	movs	r3, #12
 800bd80:	6003      	str	r3, [r0, #0]
 800bd82:	e7d3      	b.n	800bd2c <_free_r+0x28>
 800bd84:	6825      	ldr	r5, [r4, #0]
 800bd86:	1961      	adds	r1, r4, r5
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	bf04      	itt	eq
 800bd8c:	6819      	ldreq	r1, [r3, #0]
 800bd8e:	685b      	ldreq	r3, [r3, #4]
 800bd90:	6063      	str	r3, [r4, #4]
 800bd92:	bf04      	itt	eq
 800bd94:	1949      	addeq	r1, r1, r5
 800bd96:	6021      	streq	r1, [r4, #0]
 800bd98:	6054      	str	r4, [r2, #4]
 800bd9a:	e7c7      	b.n	800bd2c <_free_r+0x28>
 800bd9c:	b003      	add	sp, #12
 800bd9e:	bd30      	pop	{r4, r5, pc}
 800bda0:	20001398 	.word	0x20001398

0800bda4 <_malloc_r>:
 800bda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda6:	1ccd      	adds	r5, r1, #3
 800bda8:	f025 0503 	bic.w	r5, r5, #3
 800bdac:	3508      	adds	r5, #8
 800bdae:	2d0c      	cmp	r5, #12
 800bdb0:	bf38      	it	cc
 800bdb2:	250c      	movcc	r5, #12
 800bdb4:	2d00      	cmp	r5, #0
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	db01      	blt.n	800bdbe <_malloc_r+0x1a>
 800bdba:	42a9      	cmp	r1, r5
 800bdbc:	d903      	bls.n	800bdc6 <_malloc_r+0x22>
 800bdbe:	230c      	movs	r3, #12
 800bdc0:	6033      	str	r3, [r6, #0]
 800bdc2:	2000      	movs	r0, #0
 800bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc6:	f000 fbdf 	bl	800c588 <__malloc_lock>
 800bdca:	4921      	ldr	r1, [pc, #132]	; (800be50 <_malloc_r+0xac>)
 800bdcc:	680a      	ldr	r2, [r1, #0]
 800bdce:	4614      	mov	r4, r2
 800bdd0:	b99c      	cbnz	r4, 800bdfa <_malloc_r+0x56>
 800bdd2:	4f20      	ldr	r7, [pc, #128]	; (800be54 <_malloc_r+0xb0>)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	b923      	cbnz	r3, 800bde2 <_malloc_r+0x3e>
 800bdd8:	4621      	mov	r1, r4
 800bdda:	4630      	mov	r0, r6
 800bddc:	f000 fb2a 	bl	800c434 <_sbrk_r>
 800bde0:	6038      	str	r0, [r7, #0]
 800bde2:	4629      	mov	r1, r5
 800bde4:	4630      	mov	r0, r6
 800bde6:	f000 fb25 	bl	800c434 <_sbrk_r>
 800bdea:	1c43      	adds	r3, r0, #1
 800bdec:	d123      	bne.n	800be36 <_malloc_r+0x92>
 800bdee:	230c      	movs	r3, #12
 800bdf0:	6033      	str	r3, [r6, #0]
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f000 fbce 	bl	800c594 <__malloc_unlock>
 800bdf8:	e7e3      	b.n	800bdc2 <_malloc_r+0x1e>
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	1b5b      	subs	r3, r3, r5
 800bdfe:	d417      	bmi.n	800be30 <_malloc_r+0x8c>
 800be00:	2b0b      	cmp	r3, #11
 800be02:	d903      	bls.n	800be0c <_malloc_r+0x68>
 800be04:	6023      	str	r3, [r4, #0]
 800be06:	441c      	add	r4, r3
 800be08:	6025      	str	r5, [r4, #0]
 800be0a:	e004      	b.n	800be16 <_malloc_r+0x72>
 800be0c:	6863      	ldr	r3, [r4, #4]
 800be0e:	42a2      	cmp	r2, r4
 800be10:	bf0c      	ite	eq
 800be12:	600b      	streq	r3, [r1, #0]
 800be14:	6053      	strne	r3, [r2, #4]
 800be16:	4630      	mov	r0, r6
 800be18:	f000 fbbc 	bl	800c594 <__malloc_unlock>
 800be1c:	f104 000b 	add.w	r0, r4, #11
 800be20:	1d23      	adds	r3, r4, #4
 800be22:	f020 0007 	bic.w	r0, r0, #7
 800be26:	1ac2      	subs	r2, r0, r3
 800be28:	d0cc      	beq.n	800bdc4 <_malloc_r+0x20>
 800be2a:	1a1b      	subs	r3, r3, r0
 800be2c:	50a3      	str	r3, [r4, r2]
 800be2e:	e7c9      	b.n	800bdc4 <_malloc_r+0x20>
 800be30:	4622      	mov	r2, r4
 800be32:	6864      	ldr	r4, [r4, #4]
 800be34:	e7cc      	b.n	800bdd0 <_malloc_r+0x2c>
 800be36:	1cc4      	adds	r4, r0, #3
 800be38:	f024 0403 	bic.w	r4, r4, #3
 800be3c:	42a0      	cmp	r0, r4
 800be3e:	d0e3      	beq.n	800be08 <_malloc_r+0x64>
 800be40:	1a21      	subs	r1, r4, r0
 800be42:	4630      	mov	r0, r6
 800be44:	f000 faf6 	bl	800c434 <_sbrk_r>
 800be48:	3001      	adds	r0, #1
 800be4a:	d1dd      	bne.n	800be08 <_malloc_r+0x64>
 800be4c:	e7cf      	b.n	800bdee <_malloc_r+0x4a>
 800be4e:	bf00      	nop
 800be50:	20001398 	.word	0x20001398
 800be54:	2000139c 	.word	0x2000139c

0800be58 <__sfputc_r>:
 800be58:	6893      	ldr	r3, [r2, #8]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	b410      	push	{r4}
 800be60:	6093      	str	r3, [r2, #8]
 800be62:	da08      	bge.n	800be76 <__sfputc_r+0x1e>
 800be64:	6994      	ldr	r4, [r2, #24]
 800be66:	42a3      	cmp	r3, r4
 800be68:	db01      	blt.n	800be6e <__sfputc_r+0x16>
 800be6a:	290a      	cmp	r1, #10
 800be6c:	d103      	bne.n	800be76 <__sfputc_r+0x1e>
 800be6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be72:	f7ff bc69 	b.w	800b748 <__swbuf_r>
 800be76:	6813      	ldr	r3, [r2, #0]
 800be78:	1c58      	adds	r0, r3, #1
 800be7a:	6010      	str	r0, [r2, #0]
 800be7c:	7019      	strb	r1, [r3, #0]
 800be7e:	4608      	mov	r0, r1
 800be80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <__sfputs_r>:
 800be86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be88:	4606      	mov	r6, r0
 800be8a:	460f      	mov	r7, r1
 800be8c:	4614      	mov	r4, r2
 800be8e:	18d5      	adds	r5, r2, r3
 800be90:	42ac      	cmp	r4, r5
 800be92:	d101      	bne.n	800be98 <__sfputs_r+0x12>
 800be94:	2000      	movs	r0, #0
 800be96:	e007      	b.n	800bea8 <__sfputs_r+0x22>
 800be98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be9c:	463a      	mov	r2, r7
 800be9e:	4630      	mov	r0, r6
 800bea0:	f7ff ffda 	bl	800be58 <__sfputc_r>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d1f3      	bne.n	800be90 <__sfputs_r+0xa>
 800bea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800beac <_vfiprintf_r>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	460d      	mov	r5, r1
 800beb2:	b09d      	sub	sp, #116	; 0x74
 800beb4:	4614      	mov	r4, r2
 800beb6:	4698      	mov	r8, r3
 800beb8:	4606      	mov	r6, r0
 800beba:	b118      	cbz	r0, 800bec4 <_vfiprintf_r+0x18>
 800bebc:	6983      	ldr	r3, [r0, #24]
 800bebe:	b90b      	cbnz	r3, 800bec4 <_vfiprintf_r+0x18>
 800bec0:	f7ff fe1c 	bl	800bafc <__sinit>
 800bec4:	4b89      	ldr	r3, [pc, #548]	; (800c0ec <_vfiprintf_r+0x240>)
 800bec6:	429d      	cmp	r5, r3
 800bec8:	d11b      	bne.n	800bf02 <_vfiprintf_r+0x56>
 800beca:	6875      	ldr	r5, [r6, #4]
 800becc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bece:	07d9      	lsls	r1, r3, #31
 800bed0:	d405      	bmi.n	800bede <_vfiprintf_r+0x32>
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	059a      	lsls	r2, r3, #22
 800bed6:	d402      	bmi.n	800bede <_vfiprintf_r+0x32>
 800bed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800beda:	f7ff fead 	bl	800bc38 <__retarget_lock_acquire_recursive>
 800bede:	89ab      	ldrh	r3, [r5, #12]
 800bee0:	071b      	lsls	r3, r3, #28
 800bee2:	d501      	bpl.n	800bee8 <_vfiprintf_r+0x3c>
 800bee4:	692b      	ldr	r3, [r5, #16]
 800bee6:	b9eb      	cbnz	r3, 800bf24 <_vfiprintf_r+0x78>
 800bee8:	4629      	mov	r1, r5
 800beea:	4630      	mov	r0, r6
 800beec:	f7ff fc7e 	bl	800b7ec <__swsetup_r>
 800bef0:	b1c0      	cbz	r0, 800bf24 <_vfiprintf_r+0x78>
 800bef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef4:	07dc      	lsls	r4, r3, #31
 800bef6:	d50e      	bpl.n	800bf16 <_vfiprintf_r+0x6a>
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	b01d      	add	sp, #116	; 0x74
 800befe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf02:	4b7b      	ldr	r3, [pc, #492]	; (800c0f0 <_vfiprintf_r+0x244>)
 800bf04:	429d      	cmp	r5, r3
 800bf06:	d101      	bne.n	800bf0c <_vfiprintf_r+0x60>
 800bf08:	68b5      	ldr	r5, [r6, #8]
 800bf0a:	e7df      	b.n	800becc <_vfiprintf_r+0x20>
 800bf0c:	4b79      	ldr	r3, [pc, #484]	; (800c0f4 <_vfiprintf_r+0x248>)
 800bf0e:	429d      	cmp	r5, r3
 800bf10:	bf08      	it	eq
 800bf12:	68f5      	ldreq	r5, [r6, #12]
 800bf14:	e7da      	b.n	800becc <_vfiprintf_r+0x20>
 800bf16:	89ab      	ldrh	r3, [r5, #12]
 800bf18:	0598      	lsls	r0, r3, #22
 800bf1a:	d4ed      	bmi.n	800bef8 <_vfiprintf_r+0x4c>
 800bf1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf1e:	f7ff fe8c 	bl	800bc3a <__retarget_lock_release_recursive>
 800bf22:	e7e9      	b.n	800bef8 <_vfiprintf_r+0x4c>
 800bf24:	2300      	movs	r3, #0
 800bf26:	9309      	str	r3, [sp, #36]	; 0x24
 800bf28:	2320      	movs	r3, #32
 800bf2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf32:	2330      	movs	r3, #48	; 0x30
 800bf34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c0f8 <_vfiprintf_r+0x24c>
 800bf38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf3c:	f04f 0901 	mov.w	r9, #1
 800bf40:	4623      	mov	r3, r4
 800bf42:	469a      	mov	sl, r3
 800bf44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf48:	b10a      	cbz	r2, 800bf4e <_vfiprintf_r+0xa2>
 800bf4a:	2a25      	cmp	r2, #37	; 0x25
 800bf4c:	d1f9      	bne.n	800bf42 <_vfiprintf_r+0x96>
 800bf4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bf52:	d00b      	beq.n	800bf6c <_vfiprintf_r+0xc0>
 800bf54:	465b      	mov	r3, fp
 800bf56:	4622      	mov	r2, r4
 800bf58:	4629      	mov	r1, r5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	f7ff ff93 	bl	800be86 <__sfputs_r>
 800bf60:	3001      	adds	r0, #1
 800bf62:	f000 80aa 	beq.w	800c0ba <_vfiprintf_r+0x20e>
 800bf66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf68:	445a      	add	r2, fp
 800bf6a:	9209      	str	r2, [sp, #36]	; 0x24
 800bf6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f000 80a2 	beq.w	800c0ba <_vfiprintf_r+0x20e>
 800bf76:	2300      	movs	r3, #0
 800bf78:	f04f 32ff 	mov.w	r2, #4294967295
 800bf7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf80:	f10a 0a01 	add.w	sl, sl, #1
 800bf84:	9304      	str	r3, [sp, #16]
 800bf86:	9307      	str	r3, [sp, #28]
 800bf88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf8c:	931a      	str	r3, [sp, #104]	; 0x68
 800bf8e:	4654      	mov	r4, sl
 800bf90:	2205      	movs	r2, #5
 800bf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf96:	4858      	ldr	r0, [pc, #352]	; (800c0f8 <_vfiprintf_r+0x24c>)
 800bf98:	f7f4 f8fa 	bl	8000190 <memchr>
 800bf9c:	9a04      	ldr	r2, [sp, #16]
 800bf9e:	b9d8      	cbnz	r0, 800bfd8 <_vfiprintf_r+0x12c>
 800bfa0:	06d1      	lsls	r1, r2, #27
 800bfa2:	bf44      	itt	mi
 800bfa4:	2320      	movmi	r3, #32
 800bfa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfaa:	0713      	lsls	r3, r2, #28
 800bfac:	bf44      	itt	mi
 800bfae:	232b      	movmi	r3, #43	; 0x2b
 800bfb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bfb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bfba:	d015      	beq.n	800bfe8 <_vfiprintf_r+0x13c>
 800bfbc:	9a07      	ldr	r2, [sp, #28]
 800bfbe:	4654      	mov	r4, sl
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	f04f 0c0a 	mov.w	ip, #10
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfcc:	3b30      	subs	r3, #48	; 0x30
 800bfce:	2b09      	cmp	r3, #9
 800bfd0:	d94e      	bls.n	800c070 <_vfiprintf_r+0x1c4>
 800bfd2:	b1b0      	cbz	r0, 800c002 <_vfiprintf_r+0x156>
 800bfd4:	9207      	str	r2, [sp, #28]
 800bfd6:	e014      	b.n	800c002 <_vfiprintf_r+0x156>
 800bfd8:	eba0 0308 	sub.w	r3, r0, r8
 800bfdc:	fa09 f303 	lsl.w	r3, r9, r3
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	46a2      	mov	sl, r4
 800bfe6:	e7d2      	b.n	800bf8e <_vfiprintf_r+0xe2>
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	1d19      	adds	r1, r3, #4
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	9103      	str	r1, [sp, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	bfbb      	ittet	lt
 800bff4:	425b      	neglt	r3, r3
 800bff6:	f042 0202 	orrlt.w	r2, r2, #2
 800bffa:	9307      	strge	r3, [sp, #28]
 800bffc:	9307      	strlt	r3, [sp, #28]
 800bffe:	bfb8      	it	lt
 800c000:	9204      	strlt	r2, [sp, #16]
 800c002:	7823      	ldrb	r3, [r4, #0]
 800c004:	2b2e      	cmp	r3, #46	; 0x2e
 800c006:	d10c      	bne.n	800c022 <_vfiprintf_r+0x176>
 800c008:	7863      	ldrb	r3, [r4, #1]
 800c00a:	2b2a      	cmp	r3, #42	; 0x2a
 800c00c:	d135      	bne.n	800c07a <_vfiprintf_r+0x1ce>
 800c00e:	9b03      	ldr	r3, [sp, #12]
 800c010:	1d1a      	adds	r2, r3, #4
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	9203      	str	r2, [sp, #12]
 800c016:	2b00      	cmp	r3, #0
 800c018:	bfb8      	it	lt
 800c01a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c01e:	3402      	adds	r4, #2
 800c020:	9305      	str	r3, [sp, #20]
 800c022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c108 <_vfiprintf_r+0x25c>
 800c026:	7821      	ldrb	r1, [r4, #0]
 800c028:	2203      	movs	r2, #3
 800c02a:	4650      	mov	r0, sl
 800c02c:	f7f4 f8b0 	bl	8000190 <memchr>
 800c030:	b140      	cbz	r0, 800c044 <_vfiprintf_r+0x198>
 800c032:	2340      	movs	r3, #64	; 0x40
 800c034:	eba0 000a 	sub.w	r0, r0, sl
 800c038:	fa03 f000 	lsl.w	r0, r3, r0
 800c03c:	9b04      	ldr	r3, [sp, #16]
 800c03e:	4303      	orrs	r3, r0
 800c040:	3401      	adds	r4, #1
 800c042:	9304      	str	r3, [sp, #16]
 800c044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c048:	482c      	ldr	r0, [pc, #176]	; (800c0fc <_vfiprintf_r+0x250>)
 800c04a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c04e:	2206      	movs	r2, #6
 800c050:	f7f4 f89e 	bl	8000190 <memchr>
 800c054:	2800      	cmp	r0, #0
 800c056:	d03f      	beq.n	800c0d8 <_vfiprintf_r+0x22c>
 800c058:	4b29      	ldr	r3, [pc, #164]	; (800c100 <_vfiprintf_r+0x254>)
 800c05a:	bb1b      	cbnz	r3, 800c0a4 <_vfiprintf_r+0x1f8>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	3307      	adds	r3, #7
 800c060:	f023 0307 	bic.w	r3, r3, #7
 800c064:	3308      	adds	r3, #8
 800c066:	9303      	str	r3, [sp, #12]
 800c068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06a:	443b      	add	r3, r7
 800c06c:	9309      	str	r3, [sp, #36]	; 0x24
 800c06e:	e767      	b.n	800bf40 <_vfiprintf_r+0x94>
 800c070:	fb0c 3202 	mla	r2, ip, r2, r3
 800c074:	460c      	mov	r4, r1
 800c076:	2001      	movs	r0, #1
 800c078:	e7a5      	b.n	800bfc6 <_vfiprintf_r+0x11a>
 800c07a:	2300      	movs	r3, #0
 800c07c:	3401      	adds	r4, #1
 800c07e:	9305      	str	r3, [sp, #20]
 800c080:	4619      	mov	r1, r3
 800c082:	f04f 0c0a 	mov.w	ip, #10
 800c086:	4620      	mov	r0, r4
 800c088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c08c:	3a30      	subs	r2, #48	; 0x30
 800c08e:	2a09      	cmp	r2, #9
 800c090:	d903      	bls.n	800c09a <_vfiprintf_r+0x1ee>
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0c5      	beq.n	800c022 <_vfiprintf_r+0x176>
 800c096:	9105      	str	r1, [sp, #20]
 800c098:	e7c3      	b.n	800c022 <_vfiprintf_r+0x176>
 800c09a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c09e:	4604      	mov	r4, r0
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e7f0      	b.n	800c086 <_vfiprintf_r+0x1da>
 800c0a4:	ab03      	add	r3, sp, #12
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4b16      	ldr	r3, [pc, #88]	; (800c104 <_vfiprintf_r+0x258>)
 800c0ac:	a904      	add	r1, sp, #16
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	f3af 8000 	nop.w
 800c0b4:	4607      	mov	r7, r0
 800c0b6:	1c78      	adds	r0, r7, #1
 800c0b8:	d1d6      	bne.n	800c068 <_vfiprintf_r+0x1bc>
 800c0ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0bc:	07d9      	lsls	r1, r3, #31
 800c0be:	d405      	bmi.n	800c0cc <_vfiprintf_r+0x220>
 800c0c0:	89ab      	ldrh	r3, [r5, #12]
 800c0c2:	059a      	lsls	r2, r3, #22
 800c0c4:	d402      	bmi.n	800c0cc <_vfiprintf_r+0x220>
 800c0c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0c8:	f7ff fdb7 	bl	800bc3a <__retarget_lock_release_recursive>
 800c0cc:	89ab      	ldrh	r3, [r5, #12]
 800c0ce:	065b      	lsls	r3, r3, #25
 800c0d0:	f53f af12 	bmi.w	800bef8 <_vfiprintf_r+0x4c>
 800c0d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0d6:	e711      	b.n	800befc <_vfiprintf_r+0x50>
 800c0d8:	ab03      	add	r3, sp, #12
 800c0da:	9300      	str	r3, [sp, #0]
 800c0dc:	462a      	mov	r2, r5
 800c0de:	4b09      	ldr	r3, [pc, #36]	; (800c104 <_vfiprintf_r+0x258>)
 800c0e0:	a904      	add	r1, sp, #16
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f000 f880 	bl	800c1e8 <_printf_i>
 800c0e8:	e7e4      	b.n	800c0b4 <_vfiprintf_r+0x208>
 800c0ea:	bf00      	nop
 800c0ec:	0800d000 	.word	0x0800d000
 800c0f0:	0800d020 	.word	0x0800d020
 800c0f4:	0800cfe0 	.word	0x0800cfe0
 800c0f8:	0800d040 	.word	0x0800d040
 800c0fc:	0800d04a 	.word	0x0800d04a
 800c100:	00000000 	.word	0x00000000
 800c104:	0800be87 	.word	0x0800be87
 800c108:	0800d046 	.word	0x0800d046

0800c10c <_printf_common>:
 800c10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c110:	4616      	mov	r6, r2
 800c112:	4699      	mov	r9, r3
 800c114:	688a      	ldr	r2, [r1, #8]
 800c116:	690b      	ldr	r3, [r1, #16]
 800c118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c11c:	4293      	cmp	r3, r2
 800c11e:	bfb8      	it	lt
 800c120:	4613      	movlt	r3, r2
 800c122:	6033      	str	r3, [r6, #0]
 800c124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c128:	4607      	mov	r7, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	b10a      	cbz	r2, 800c132 <_printf_common+0x26>
 800c12e:	3301      	adds	r3, #1
 800c130:	6033      	str	r3, [r6, #0]
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	0699      	lsls	r1, r3, #26
 800c136:	bf42      	ittt	mi
 800c138:	6833      	ldrmi	r3, [r6, #0]
 800c13a:	3302      	addmi	r3, #2
 800c13c:	6033      	strmi	r3, [r6, #0]
 800c13e:	6825      	ldr	r5, [r4, #0]
 800c140:	f015 0506 	ands.w	r5, r5, #6
 800c144:	d106      	bne.n	800c154 <_printf_common+0x48>
 800c146:	f104 0a19 	add.w	sl, r4, #25
 800c14a:	68e3      	ldr	r3, [r4, #12]
 800c14c:	6832      	ldr	r2, [r6, #0]
 800c14e:	1a9b      	subs	r3, r3, r2
 800c150:	42ab      	cmp	r3, r5
 800c152:	dc26      	bgt.n	800c1a2 <_printf_common+0x96>
 800c154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c158:	1e13      	subs	r3, r2, #0
 800c15a:	6822      	ldr	r2, [r4, #0]
 800c15c:	bf18      	it	ne
 800c15e:	2301      	movne	r3, #1
 800c160:	0692      	lsls	r2, r2, #26
 800c162:	d42b      	bmi.n	800c1bc <_printf_common+0xb0>
 800c164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c168:	4649      	mov	r1, r9
 800c16a:	4638      	mov	r0, r7
 800c16c:	47c0      	blx	r8
 800c16e:	3001      	adds	r0, #1
 800c170:	d01e      	beq.n	800c1b0 <_printf_common+0xa4>
 800c172:	6823      	ldr	r3, [r4, #0]
 800c174:	68e5      	ldr	r5, [r4, #12]
 800c176:	6832      	ldr	r2, [r6, #0]
 800c178:	f003 0306 	and.w	r3, r3, #6
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	bf08      	it	eq
 800c180:	1aad      	subeq	r5, r5, r2
 800c182:	68a3      	ldr	r3, [r4, #8]
 800c184:	6922      	ldr	r2, [r4, #16]
 800c186:	bf0c      	ite	eq
 800c188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c18c:	2500      	movne	r5, #0
 800c18e:	4293      	cmp	r3, r2
 800c190:	bfc4      	itt	gt
 800c192:	1a9b      	subgt	r3, r3, r2
 800c194:	18ed      	addgt	r5, r5, r3
 800c196:	2600      	movs	r6, #0
 800c198:	341a      	adds	r4, #26
 800c19a:	42b5      	cmp	r5, r6
 800c19c:	d11a      	bne.n	800c1d4 <_printf_common+0xc8>
 800c19e:	2000      	movs	r0, #0
 800c1a0:	e008      	b.n	800c1b4 <_printf_common+0xa8>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4652      	mov	r2, sl
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	4638      	mov	r0, r7
 800c1aa:	47c0      	blx	r8
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d103      	bne.n	800c1b8 <_printf_common+0xac>
 800c1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	e7c6      	b.n	800c14a <_printf_common+0x3e>
 800c1bc:	18e1      	adds	r1, r4, r3
 800c1be:	1c5a      	adds	r2, r3, #1
 800c1c0:	2030      	movs	r0, #48	; 0x30
 800c1c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1c6:	4422      	add	r2, r4
 800c1c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1d0:	3302      	adds	r3, #2
 800c1d2:	e7c7      	b.n	800c164 <_printf_common+0x58>
 800c1d4:	2301      	movs	r3, #1
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	4649      	mov	r1, r9
 800c1da:	4638      	mov	r0, r7
 800c1dc:	47c0      	blx	r8
 800c1de:	3001      	adds	r0, #1
 800c1e0:	d0e6      	beq.n	800c1b0 <_printf_common+0xa4>
 800c1e2:	3601      	adds	r6, #1
 800c1e4:	e7d9      	b.n	800c19a <_printf_common+0x8e>
	...

0800c1e8 <_printf_i>:
 800c1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1ec:	460c      	mov	r4, r1
 800c1ee:	4691      	mov	r9, r2
 800c1f0:	7e27      	ldrb	r7, [r4, #24]
 800c1f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1f4:	2f78      	cmp	r7, #120	; 0x78
 800c1f6:	4680      	mov	r8, r0
 800c1f8:	469a      	mov	sl, r3
 800c1fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1fe:	d807      	bhi.n	800c210 <_printf_i+0x28>
 800c200:	2f62      	cmp	r7, #98	; 0x62
 800c202:	d80a      	bhi.n	800c21a <_printf_i+0x32>
 800c204:	2f00      	cmp	r7, #0
 800c206:	f000 80d8 	beq.w	800c3ba <_printf_i+0x1d2>
 800c20a:	2f58      	cmp	r7, #88	; 0x58
 800c20c:	f000 80a3 	beq.w	800c356 <_printf_i+0x16e>
 800c210:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c218:	e03a      	b.n	800c290 <_printf_i+0xa8>
 800c21a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c21e:	2b15      	cmp	r3, #21
 800c220:	d8f6      	bhi.n	800c210 <_printf_i+0x28>
 800c222:	a001      	add	r0, pc, #4	; (adr r0, 800c228 <_printf_i+0x40>)
 800c224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c228:	0800c281 	.word	0x0800c281
 800c22c:	0800c295 	.word	0x0800c295
 800c230:	0800c211 	.word	0x0800c211
 800c234:	0800c211 	.word	0x0800c211
 800c238:	0800c211 	.word	0x0800c211
 800c23c:	0800c211 	.word	0x0800c211
 800c240:	0800c295 	.word	0x0800c295
 800c244:	0800c211 	.word	0x0800c211
 800c248:	0800c211 	.word	0x0800c211
 800c24c:	0800c211 	.word	0x0800c211
 800c250:	0800c211 	.word	0x0800c211
 800c254:	0800c3a1 	.word	0x0800c3a1
 800c258:	0800c2c5 	.word	0x0800c2c5
 800c25c:	0800c383 	.word	0x0800c383
 800c260:	0800c211 	.word	0x0800c211
 800c264:	0800c211 	.word	0x0800c211
 800c268:	0800c3c3 	.word	0x0800c3c3
 800c26c:	0800c211 	.word	0x0800c211
 800c270:	0800c2c5 	.word	0x0800c2c5
 800c274:	0800c211 	.word	0x0800c211
 800c278:	0800c211 	.word	0x0800c211
 800c27c:	0800c38b 	.word	0x0800c38b
 800c280:	680b      	ldr	r3, [r1, #0]
 800c282:	1d1a      	adds	r2, r3, #4
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	600a      	str	r2, [r1, #0]
 800c288:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c28c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c290:	2301      	movs	r3, #1
 800c292:	e0a3      	b.n	800c3dc <_printf_i+0x1f4>
 800c294:	6825      	ldr	r5, [r4, #0]
 800c296:	6808      	ldr	r0, [r1, #0]
 800c298:	062e      	lsls	r6, r5, #24
 800c29a:	f100 0304 	add.w	r3, r0, #4
 800c29e:	d50a      	bpl.n	800c2b6 <_printf_i+0xce>
 800c2a0:	6805      	ldr	r5, [r0, #0]
 800c2a2:	600b      	str	r3, [r1, #0]
 800c2a4:	2d00      	cmp	r5, #0
 800c2a6:	da03      	bge.n	800c2b0 <_printf_i+0xc8>
 800c2a8:	232d      	movs	r3, #45	; 0x2d
 800c2aa:	426d      	negs	r5, r5
 800c2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2b0:	485e      	ldr	r0, [pc, #376]	; (800c42c <_printf_i+0x244>)
 800c2b2:	230a      	movs	r3, #10
 800c2b4:	e019      	b.n	800c2ea <_printf_i+0x102>
 800c2b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c2ba:	6805      	ldr	r5, [r0, #0]
 800c2bc:	600b      	str	r3, [r1, #0]
 800c2be:	bf18      	it	ne
 800c2c0:	b22d      	sxthne	r5, r5
 800c2c2:	e7ef      	b.n	800c2a4 <_printf_i+0xbc>
 800c2c4:	680b      	ldr	r3, [r1, #0]
 800c2c6:	6825      	ldr	r5, [r4, #0]
 800c2c8:	1d18      	adds	r0, r3, #4
 800c2ca:	6008      	str	r0, [r1, #0]
 800c2cc:	0628      	lsls	r0, r5, #24
 800c2ce:	d501      	bpl.n	800c2d4 <_printf_i+0xec>
 800c2d0:	681d      	ldr	r5, [r3, #0]
 800c2d2:	e002      	b.n	800c2da <_printf_i+0xf2>
 800c2d4:	0669      	lsls	r1, r5, #25
 800c2d6:	d5fb      	bpl.n	800c2d0 <_printf_i+0xe8>
 800c2d8:	881d      	ldrh	r5, [r3, #0]
 800c2da:	4854      	ldr	r0, [pc, #336]	; (800c42c <_printf_i+0x244>)
 800c2dc:	2f6f      	cmp	r7, #111	; 0x6f
 800c2de:	bf0c      	ite	eq
 800c2e0:	2308      	moveq	r3, #8
 800c2e2:	230a      	movne	r3, #10
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2ea:	6866      	ldr	r6, [r4, #4]
 800c2ec:	60a6      	str	r6, [r4, #8]
 800c2ee:	2e00      	cmp	r6, #0
 800c2f0:	bfa2      	ittt	ge
 800c2f2:	6821      	ldrge	r1, [r4, #0]
 800c2f4:	f021 0104 	bicge.w	r1, r1, #4
 800c2f8:	6021      	strge	r1, [r4, #0]
 800c2fa:	b90d      	cbnz	r5, 800c300 <_printf_i+0x118>
 800c2fc:	2e00      	cmp	r6, #0
 800c2fe:	d04d      	beq.n	800c39c <_printf_i+0x1b4>
 800c300:	4616      	mov	r6, r2
 800c302:	fbb5 f1f3 	udiv	r1, r5, r3
 800c306:	fb03 5711 	mls	r7, r3, r1, r5
 800c30a:	5dc7      	ldrb	r7, [r0, r7]
 800c30c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c310:	462f      	mov	r7, r5
 800c312:	42bb      	cmp	r3, r7
 800c314:	460d      	mov	r5, r1
 800c316:	d9f4      	bls.n	800c302 <_printf_i+0x11a>
 800c318:	2b08      	cmp	r3, #8
 800c31a:	d10b      	bne.n	800c334 <_printf_i+0x14c>
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	07df      	lsls	r7, r3, #31
 800c320:	d508      	bpl.n	800c334 <_printf_i+0x14c>
 800c322:	6923      	ldr	r3, [r4, #16]
 800c324:	6861      	ldr	r1, [r4, #4]
 800c326:	4299      	cmp	r1, r3
 800c328:	bfde      	ittt	le
 800c32a:	2330      	movle	r3, #48	; 0x30
 800c32c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c330:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c334:	1b92      	subs	r2, r2, r6
 800c336:	6122      	str	r2, [r4, #16]
 800c338:	f8cd a000 	str.w	sl, [sp]
 800c33c:	464b      	mov	r3, r9
 800c33e:	aa03      	add	r2, sp, #12
 800c340:	4621      	mov	r1, r4
 800c342:	4640      	mov	r0, r8
 800c344:	f7ff fee2 	bl	800c10c <_printf_common>
 800c348:	3001      	adds	r0, #1
 800c34a:	d14c      	bne.n	800c3e6 <_printf_i+0x1fe>
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	b004      	add	sp, #16
 800c352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c356:	4835      	ldr	r0, [pc, #212]	; (800c42c <_printf_i+0x244>)
 800c358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	680e      	ldr	r6, [r1, #0]
 800c360:	061f      	lsls	r7, r3, #24
 800c362:	f856 5b04 	ldr.w	r5, [r6], #4
 800c366:	600e      	str	r6, [r1, #0]
 800c368:	d514      	bpl.n	800c394 <_printf_i+0x1ac>
 800c36a:	07d9      	lsls	r1, r3, #31
 800c36c:	bf44      	itt	mi
 800c36e:	f043 0320 	orrmi.w	r3, r3, #32
 800c372:	6023      	strmi	r3, [r4, #0]
 800c374:	b91d      	cbnz	r5, 800c37e <_printf_i+0x196>
 800c376:	6823      	ldr	r3, [r4, #0]
 800c378:	f023 0320 	bic.w	r3, r3, #32
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	2310      	movs	r3, #16
 800c380:	e7b0      	b.n	800c2e4 <_printf_i+0xfc>
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	f043 0320 	orr.w	r3, r3, #32
 800c388:	6023      	str	r3, [r4, #0]
 800c38a:	2378      	movs	r3, #120	; 0x78
 800c38c:	4828      	ldr	r0, [pc, #160]	; (800c430 <_printf_i+0x248>)
 800c38e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c392:	e7e3      	b.n	800c35c <_printf_i+0x174>
 800c394:	065e      	lsls	r6, r3, #25
 800c396:	bf48      	it	mi
 800c398:	b2ad      	uxthmi	r5, r5
 800c39a:	e7e6      	b.n	800c36a <_printf_i+0x182>
 800c39c:	4616      	mov	r6, r2
 800c39e:	e7bb      	b.n	800c318 <_printf_i+0x130>
 800c3a0:	680b      	ldr	r3, [r1, #0]
 800c3a2:	6826      	ldr	r6, [r4, #0]
 800c3a4:	6960      	ldr	r0, [r4, #20]
 800c3a6:	1d1d      	adds	r5, r3, #4
 800c3a8:	600d      	str	r5, [r1, #0]
 800c3aa:	0635      	lsls	r5, r6, #24
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	d501      	bpl.n	800c3b4 <_printf_i+0x1cc>
 800c3b0:	6018      	str	r0, [r3, #0]
 800c3b2:	e002      	b.n	800c3ba <_printf_i+0x1d2>
 800c3b4:	0671      	lsls	r1, r6, #25
 800c3b6:	d5fb      	bpl.n	800c3b0 <_printf_i+0x1c8>
 800c3b8:	8018      	strh	r0, [r3, #0]
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	6123      	str	r3, [r4, #16]
 800c3be:	4616      	mov	r6, r2
 800c3c0:	e7ba      	b.n	800c338 <_printf_i+0x150>
 800c3c2:	680b      	ldr	r3, [r1, #0]
 800c3c4:	1d1a      	adds	r2, r3, #4
 800c3c6:	600a      	str	r2, [r1, #0]
 800c3c8:	681e      	ldr	r6, [r3, #0]
 800c3ca:	6862      	ldr	r2, [r4, #4]
 800c3cc:	2100      	movs	r1, #0
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	f7f3 fede 	bl	8000190 <memchr>
 800c3d4:	b108      	cbz	r0, 800c3da <_printf_i+0x1f2>
 800c3d6:	1b80      	subs	r0, r0, r6
 800c3d8:	6060      	str	r0, [r4, #4]
 800c3da:	6863      	ldr	r3, [r4, #4]
 800c3dc:	6123      	str	r3, [r4, #16]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3e4:	e7a8      	b.n	800c338 <_printf_i+0x150>
 800c3e6:	6923      	ldr	r3, [r4, #16]
 800c3e8:	4632      	mov	r2, r6
 800c3ea:	4649      	mov	r1, r9
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	47d0      	blx	sl
 800c3f0:	3001      	adds	r0, #1
 800c3f2:	d0ab      	beq.n	800c34c <_printf_i+0x164>
 800c3f4:	6823      	ldr	r3, [r4, #0]
 800c3f6:	079b      	lsls	r3, r3, #30
 800c3f8:	d413      	bmi.n	800c422 <_printf_i+0x23a>
 800c3fa:	68e0      	ldr	r0, [r4, #12]
 800c3fc:	9b03      	ldr	r3, [sp, #12]
 800c3fe:	4298      	cmp	r0, r3
 800c400:	bfb8      	it	lt
 800c402:	4618      	movlt	r0, r3
 800c404:	e7a4      	b.n	800c350 <_printf_i+0x168>
 800c406:	2301      	movs	r3, #1
 800c408:	4632      	mov	r2, r6
 800c40a:	4649      	mov	r1, r9
 800c40c:	4640      	mov	r0, r8
 800c40e:	47d0      	blx	sl
 800c410:	3001      	adds	r0, #1
 800c412:	d09b      	beq.n	800c34c <_printf_i+0x164>
 800c414:	3501      	adds	r5, #1
 800c416:	68e3      	ldr	r3, [r4, #12]
 800c418:	9903      	ldr	r1, [sp, #12]
 800c41a:	1a5b      	subs	r3, r3, r1
 800c41c:	42ab      	cmp	r3, r5
 800c41e:	dcf2      	bgt.n	800c406 <_printf_i+0x21e>
 800c420:	e7eb      	b.n	800c3fa <_printf_i+0x212>
 800c422:	2500      	movs	r5, #0
 800c424:	f104 0619 	add.w	r6, r4, #25
 800c428:	e7f5      	b.n	800c416 <_printf_i+0x22e>
 800c42a:	bf00      	nop
 800c42c:	0800d051 	.word	0x0800d051
 800c430:	0800d062 	.word	0x0800d062

0800c434 <_sbrk_r>:
 800c434:	b538      	push	{r3, r4, r5, lr}
 800c436:	4d06      	ldr	r5, [pc, #24]	; (800c450 <_sbrk_r+0x1c>)
 800c438:	2300      	movs	r3, #0
 800c43a:	4604      	mov	r4, r0
 800c43c:	4608      	mov	r0, r1
 800c43e:	602b      	str	r3, [r5, #0]
 800c440:	f7f6 fa1c 	bl	800287c <_sbrk>
 800c444:	1c43      	adds	r3, r0, #1
 800c446:	d102      	bne.n	800c44e <_sbrk_r+0x1a>
 800c448:	682b      	ldr	r3, [r5, #0]
 800c44a:	b103      	cbz	r3, 800c44e <_sbrk_r+0x1a>
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	20001690 	.word	0x20001690

0800c454 <__sread>:
 800c454:	b510      	push	{r4, lr}
 800c456:	460c      	mov	r4, r1
 800c458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c45c:	f000 f8a0 	bl	800c5a0 <_read_r>
 800c460:	2800      	cmp	r0, #0
 800c462:	bfab      	itete	ge
 800c464:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c466:	89a3      	ldrhlt	r3, [r4, #12]
 800c468:	181b      	addge	r3, r3, r0
 800c46a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c46e:	bfac      	ite	ge
 800c470:	6563      	strge	r3, [r4, #84]	; 0x54
 800c472:	81a3      	strhlt	r3, [r4, #12]
 800c474:	bd10      	pop	{r4, pc}

0800c476 <__swrite>:
 800c476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c47a:	461f      	mov	r7, r3
 800c47c:	898b      	ldrh	r3, [r1, #12]
 800c47e:	05db      	lsls	r3, r3, #23
 800c480:	4605      	mov	r5, r0
 800c482:	460c      	mov	r4, r1
 800c484:	4616      	mov	r6, r2
 800c486:	d505      	bpl.n	800c494 <__swrite+0x1e>
 800c488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48c:	2302      	movs	r3, #2
 800c48e:	2200      	movs	r2, #0
 800c490:	f000 f868 	bl	800c564 <_lseek_r>
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c49a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c49e:	81a3      	strh	r3, [r4, #12]
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	463b      	mov	r3, r7
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4aa:	f000 b817 	b.w	800c4dc <_write_r>

0800c4ae <__sseek>:
 800c4ae:	b510      	push	{r4, lr}
 800c4b0:	460c      	mov	r4, r1
 800c4b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b6:	f000 f855 	bl	800c564 <_lseek_r>
 800c4ba:	1c43      	adds	r3, r0, #1
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	bf15      	itete	ne
 800c4c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4ca:	81a3      	strheq	r3, [r4, #12]
 800c4cc:	bf18      	it	ne
 800c4ce:	81a3      	strhne	r3, [r4, #12]
 800c4d0:	bd10      	pop	{r4, pc}

0800c4d2 <__sclose>:
 800c4d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4d6:	f000 b813 	b.w	800c500 <_close_r>
	...

0800c4dc <_write_r>:
 800c4dc:	b538      	push	{r3, r4, r5, lr}
 800c4de:	4d07      	ldr	r5, [pc, #28]	; (800c4fc <_write_r+0x20>)
 800c4e0:	4604      	mov	r4, r0
 800c4e2:	4608      	mov	r0, r1
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	602a      	str	r2, [r5, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	f7fd f910 	bl	8009710 <_write>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_write_r+0x1e>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_write_r+0x1e>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	20001690 	.word	0x20001690

0800c500 <_close_r>:
 800c500:	b538      	push	{r3, r4, r5, lr}
 800c502:	4d06      	ldr	r5, [pc, #24]	; (800c51c <_close_r+0x1c>)
 800c504:	2300      	movs	r3, #0
 800c506:	4604      	mov	r4, r0
 800c508:	4608      	mov	r0, r1
 800c50a:	602b      	str	r3, [r5, #0]
 800c50c:	f7f6 f981 	bl	8002812 <_close>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_close_r+0x1a>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_close_r+0x1a>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	20001690 	.word	0x20001690

0800c520 <_fstat_r>:
 800c520:	b538      	push	{r3, r4, r5, lr}
 800c522:	4d07      	ldr	r5, [pc, #28]	; (800c540 <_fstat_r+0x20>)
 800c524:	2300      	movs	r3, #0
 800c526:	4604      	mov	r4, r0
 800c528:	4608      	mov	r0, r1
 800c52a:	4611      	mov	r1, r2
 800c52c:	602b      	str	r3, [r5, #0]
 800c52e:	f7f6 f97c 	bl	800282a <_fstat>
 800c532:	1c43      	adds	r3, r0, #1
 800c534:	d102      	bne.n	800c53c <_fstat_r+0x1c>
 800c536:	682b      	ldr	r3, [r5, #0]
 800c538:	b103      	cbz	r3, 800c53c <_fstat_r+0x1c>
 800c53a:	6023      	str	r3, [r4, #0]
 800c53c:	bd38      	pop	{r3, r4, r5, pc}
 800c53e:	bf00      	nop
 800c540:	20001690 	.word	0x20001690

0800c544 <_isatty_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4d06      	ldr	r5, [pc, #24]	; (800c560 <_isatty_r+0x1c>)
 800c548:	2300      	movs	r3, #0
 800c54a:	4604      	mov	r4, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	602b      	str	r3, [r5, #0]
 800c550:	f7f6 f97b 	bl	800284a <_isatty>
 800c554:	1c43      	adds	r3, r0, #1
 800c556:	d102      	bne.n	800c55e <_isatty_r+0x1a>
 800c558:	682b      	ldr	r3, [r5, #0]
 800c55a:	b103      	cbz	r3, 800c55e <_isatty_r+0x1a>
 800c55c:	6023      	str	r3, [r4, #0]
 800c55e:	bd38      	pop	{r3, r4, r5, pc}
 800c560:	20001690 	.word	0x20001690

0800c564 <_lseek_r>:
 800c564:	b538      	push	{r3, r4, r5, lr}
 800c566:	4d07      	ldr	r5, [pc, #28]	; (800c584 <_lseek_r+0x20>)
 800c568:	4604      	mov	r4, r0
 800c56a:	4608      	mov	r0, r1
 800c56c:	4611      	mov	r1, r2
 800c56e:	2200      	movs	r2, #0
 800c570:	602a      	str	r2, [r5, #0]
 800c572:	461a      	mov	r2, r3
 800c574:	f7f6 f974 	bl	8002860 <_lseek>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_lseek_r+0x1e>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_lseek_r+0x1e>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	20001690 	.word	0x20001690

0800c588 <__malloc_lock>:
 800c588:	4801      	ldr	r0, [pc, #4]	; (800c590 <__malloc_lock+0x8>)
 800c58a:	f7ff bb55 	b.w	800bc38 <__retarget_lock_acquire_recursive>
 800c58e:	bf00      	nop
 800c590:	20001688 	.word	0x20001688

0800c594 <__malloc_unlock>:
 800c594:	4801      	ldr	r0, [pc, #4]	; (800c59c <__malloc_unlock+0x8>)
 800c596:	f7ff bb50 	b.w	800bc3a <__retarget_lock_release_recursive>
 800c59a:	bf00      	nop
 800c59c:	20001688 	.word	0x20001688

0800c5a0 <_read_r>:
 800c5a0:	b538      	push	{r3, r4, r5, lr}
 800c5a2:	4d07      	ldr	r5, [pc, #28]	; (800c5c0 <_read_r+0x20>)
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	4608      	mov	r0, r1
 800c5a8:	4611      	mov	r1, r2
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	602a      	str	r2, [r5, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	f7f6 f912 	bl	80027d8 <_read>
 800c5b4:	1c43      	adds	r3, r0, #1
 800c5b6:	d102      	bne.n	800c5be <_read_r+0x1e>
 800c5b8:	682b      	ldr	r3, [r5, #0]
 800c5ba:	b103      	cbz	r3, 800c5be <_read_r+0x1e>
 800c5bc:	6023      	str	r3, [r4, #0]
 800c5be:	bd38      	pop	{r3, r4, r5, pc}
 800c5c0:	20001690 	.word	0x20001690

0800c5c4 <_init>:
 800c5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5c6:	bf00      	nop
 800c5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5ca:	bc08      	pop	{r3}
 800c5cc:	469e      	mov	lr, r3
 800c5ce:	4770      	bx	lr

0800c5d0 <_fini>:
 800c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d2:	bf00      	nop
 800c5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d6:	bc08      	pop	{r3}
 800c5d8:	469e      	mov	lr, r3
 800c5da:	4770      	bx	lr
