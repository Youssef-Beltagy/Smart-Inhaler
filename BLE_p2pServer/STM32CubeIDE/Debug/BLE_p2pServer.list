
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac0c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  0800ad4c  0800ad4c  0001ad4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b254  0800b254  0001b254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b258  0800b258  0001b258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000120  20000008  0800b25c  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000128  0800b37c  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_APP_CONTEXT 0000008e  200001c4  0800b415  000201c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003d  20000254  0800b4a3  00020254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000294  0800b4e0  00020294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004c0  200002a8  0800b4f1  000202a8  2**3
                  ALLOC
 11 ._user_heap_stack 00001400  20000768  0800b4f1  00020768  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   00040d68  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000075e4  00000000  00000000  0006103d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002ad0  00000000  00000000  00068628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000027f8  00000000  00000000  0006b0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002e1ce  00000000  00000000  0006d8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002eaa4  00000000  00000000  0009babe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000faee3  00000000  00000000  000ca562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001c5445  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ba38  00000000  00000000  001c5498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002a8 	.word	0x200002a8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800ad34 	.word	0x0800ad34

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002ac 	.word	0x200002ac
 800017c:	0800ad34 	.word	0x0800ad34

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <strcmp>:
 8000190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000198:	2a01      	cmp	r2, #1
 800019a:	bf28      	it	cs
 800019c:	429a      	cmpcs	r2, r3
 800019e:	d0f7      	beq.n	8000190 <strcmp>
 80001a0:	1ad0      	subs	r0, r2, r3
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800025c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800025e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4313      	orrs	r3, r2
 8000266:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800026c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4013      	ands	r3, r2
 8000272:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000274:	68fb      	ldr	r3, [r7, #12]
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr

08000282 <LL_AHB2_GRP1_DisableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000282:	b480      	push	{r7}
 8000284:	b083      	sub	sp, #12
 8000286:	af00      	add	r7, sp, #0
 8000288:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 800028a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800028e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	43db      	mvns	r3, r3
 8000294:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000298:	4013      	ands	r3, r2
 800029a:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr

080002a8 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 80002b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002b4:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80002b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4313      	orrs	r3, r2
 80002c0:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80002c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002c8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4013      	ands	r3, r2
 80002d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002d2:	68fb      	ldr	r3, [r7, #12]
}
 80002d4:	bf00      	nop
 80002d6:	3714      	adds	r7, #20
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);

#else
  GPIO_InitTypeDef gpio_config = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]

  gpio_config.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_ANALOG;
 80002f8:	2303      	movs	r3, #3
 80002fa:	60bb      	str	r3, [r7, #8]

  gpio_config.Pin = GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13;
 80002fc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000300:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000302:	2001      	movs	r0, #1
 8000304:	f7ff ffa4 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOA, &gpio_config);
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	4619      	mov	r1, r3
 800030c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000310:	f003 fd56 	bl	8003dc0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000314:	2001      	movs	r0, #1
 8000316:	f7ff ffb4 	bl	8000282 <LL_AHB2_GRP1_DisableClock>

  gpio_config.Pin = GPIO_PIN_4 | GPIO_PIN_3;
 800031a:	2318      	movs	r3, #24
 800031c:	607b      	str	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	2002      	movs	r0, #2
 8000320:	f7ff ff96 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
  HAL_GPIO_Init(GPIOB, &gpio_config);
 8000324:	1d3b      	adds	r3, r7, #4
 8000326:	4619      	mov	r1, r3
 8000328:	4809      	ldr	r0, [pc, #36]	; (8000350 <APPD_Init+0x70>)
 800032a:	f003 fd49 	bl	8003dc0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOB_CLK_DISABLE();
 800032e:	2002      	movs	r0, #2
 8000330:	f7ff ffa7 	bl	8000282 <LL_AHB2_GRP1_DisableClock>

  HAL_DBGMCU_DisableDBGSleepMode();
 8000334:	f003 fa2c 	bl	8003790 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000338:	f003 fa30 	bl	800379c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800033c:	f003 fa34 	bl	80037a8 <HAL_DBGMCU_DisableDBGStandbyMode>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000340:	f000 f824 	bl	800038c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000344:	f000 f8c6 	bl	80004d4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000348:	bf00      	nop
}
 800034a:	3718      	adds	r7, #24
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	48000400 	.word	0x48000400

08000354 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000354:	b5b0      	push	{r4, r5, r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <APPD_EnableCPU2+0x34>)
 800035c:	1d3c      	adds	r4, r7, #4
 800035e:	461d      	mov	r5, r3
 8000360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000368:	c403      	stmia	r4!, {r0, r1}
 800036a:	8022      	strh	r2, [r4, #0]
 800036c:	3402      	adds	r4, #2
 800036e:	0c13      	lsrs	r3, r2, #16
 8000370:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000372:	f008 fe7d 	bl	8009070 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4618      	mov	r0, r3
 800037a:	f008 f9a0 	bl	80086be <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800037e:	bf00      	nop
}
 8000380:	3720      	adds	r7, #32
 8000382:	46bd      	mov	sp, r7
 8000384:	bdb0      	pop	{r4, r5, r7, pc}
 8000386:	bf00      	nop
 8000388:	0800ad4c 	.word	0x0800ad4c

0800038c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	605a      	str	r2, [r3, #4]
 800039a:	609a      	str	r2, [r3, #8]
 800039c:	60da      	str	r2, [r3, #12]
 800039e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	77fb      	strb	r3, [r7, #31]
 80003b0:	e038      	b.n	8000424 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80003b2:	7ffb      	ldrb	r3, [r7, #31]
 80003b4:	4a44      	ldr	r2, [pc, #272]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	4413      	add	r3, r2
 80003ba:	799b      	ldrb	r3, [r3, #6]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d02b      	beq.n	8000418 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80003c0:	7ffb      	ldrb	r3, [r7, #31]
 80003c2:	4a41      	ldr	r2, [pc, #260]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003c8:	4a40      	ldr	r2, [pc, #256]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d01b      	beq.n	8000406 <APPD_SetCPU2GpioConfig+0x7a>
 80003ce:	4a3f      	ldr	r2, [pc, #252]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d823      	bhi.n	800041c <APPD_SetCPU2GpioConfig+0x90>
 80003d4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003d8:	d003      	beq.n	80003e2 <APPD_SetCPU2GpioConfig+0x56>
 80003da:	4a3d      	ldr	r2, [pc, #244]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d009      	beq.n	80003f4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 80003e0:	e01c      	b.n	800041c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 80003e2:	7ffb      	ldrb	r3, [r7, #31]
 80003e4:	4a38      	ldr	r2, [pc, #224]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003e6:	00db      	lsls	r3, r3, #3
 80003e8:	4413      	add	r3, r2
 80003ea:	889a      	ldrh	r2, [r3, #4]
 80003ec:	8bbb      	ldrh	r3, [r7, #28]
 80003ee:	4313      	orrs	r3, r2
 80003f0:	83bb      	strh	r3, [r7, #28]
          break;
 80003f2:	e014      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 80003f4:	7ffb      	ldrb	r3, [r7, #31]
 80003f6:	4a34      	ldr	r2, [pc, #208]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4413      	add	r3, r2
 80003fc:	889a      	ldrh	r2, [r3, #4]
 80003fe:	8b7b      	ldrh	r3, [r7, #26]
 8000400:	4313      	orrs	r3, r2
 8000402:	837b      	strh	r3, [r7, #26]
          break;
 8000404:	e00b      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000406:	7ffb      	ldrb	r3, [r7, #31]
 8000408:	4a2f      	ldr	r2, [pc, #188]	; (80004c8 <APPD_SetCPU2GpioConfig+0x13c>)
 800040a:	00db      	lsls	r3, r3, #3
 800040c:	4413      	add	r3, r2
 800040e:	889a      	ldrh	r2, [r3, #4]
 8000410:	8b3b      	ldrh	r3, [r7, #24]
 8000412:	4313      	orrs	r3, r2
 8000414:	833b      	strh	r3, [r7, #24]
          break;
 8000416:	e002      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000418:	bf00      	nop
 800041a:	e000      	b.n	800041e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800041c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800041e:	7ffb      	ldrb	r3, [r7, #31]
 8000420:	3301      	adds	r3, #1
 8000422:	77fb      	strb	r3, [r7, #31]
 8000424:	7ffb      	ldrb	r3, [r7, #31]
 8000426:	2b21      	cmp	r3, #33	; 0x21
 8000428:	d9c3      	bls.n	80003b2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	2301      	movs	r3, #1
 8000430:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000432:	2303      	movs	r3, #3
 8000434:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000436:	8bbb      	ldrh	r3, [r7, #28]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d014      	beq.n	8000466 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800043c:	8bbb      	ldrh	r3, [r7, #28]
 800043e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000440:	2001      	movs	r0, #1
 8000442:	f7ff ff05 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000446:	2001      	movs	r0, #1
 8000448:	f7ff ff2e 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	4619      	mov	r1, r3
 8000450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000454:	f003 fcb4 	bl	8003dc0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000458:	8bbb      	ldrh	r3, [r7, #28]
 800045a:	2200      	movs	r2, #0
 800045c:	4619      	mov	r1, r3
 800045e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000462:	f003 fe1d 	bl	80040a0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000466:	8b7b      	ldrh	r3, [r7, #26]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d012      	beq.n	8000492 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800046c:	8b7b      	ldrh	r3, [r7, #26]
 800046e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000470:	2002      	movs	r0, #2
 8000472:	f7ff feed 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000476:	2002      	movs	r0, #2
 8000478:	f7ff ff16 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800047c:	1d3b      	adds	r3, r7, #4
 800047e:	4619      	mov	r1, r3
 8000480:	4813      	ldr	r0, [pc, #76]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 8000482:	f003 fc9d 	bl	8003dc0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000486:	8b7b      	ldrh	r3, [r7, #26]
 8000488:	2200      	movs	r2, #0
 800048a:	4619      	mov	r1, r3
 800048c:	4810      	ldr	r0, [pc, #64]	; (80004d0 <APPD_SetCPU2GpioConfig+0x144>)
 800048e:	f003 fe07 	bl	80040a0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000492:	8b3b      	ldrh	r3, [r7, #24]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d013      	beq.n	80004c0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000498:	8b3b      	ldrh	r3, [r7, #24]
 800049a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800049c:	2004      	movs	r0, #4
 800049e:	f7ff fed7 	bl	8000250 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80004a2:	2004      	movs	r0, #4
 80004a4:	f7ff ff00 	bl	80002a8 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	4619      	mov	r1, r3
 80004ac:	4807      	ldr	r0, [pc, #28]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80004ae:	f003 fc87 	bl	8003dc0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80004b2:	8b3b      	ldrh	r3, [r7, #24]
 80004b4:	2200      	movs	r2, #0
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <APPD_SetCPU2GpioConfig+0x140>)
 80004ba:	f003 fdf1 	bl	80040a0 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
}
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	0800add8 	.word	0x0800add8
 80004cc:	48000800 	.word	0x48000800
 80004d0:	48000400 	.word	0x48000400

080004d4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80004d8:	bf00      	nop
}
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
	...

080004e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <LL_C2_PWR_SetPowerMode+0x28>)
 80004ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004f2:	f023 0207 	bic.w	r2, r3, #7
 80004f6:	4905      	ldr	r1, [pc, #20]	; (800050c <LL_C2_PWR_SetPowerMode+0x28>)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4313      	orrs	r3, r2
 80004fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	58000400 	.word	0x58000400

08000510 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000522:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	608b      	str	r3, [r1, #8]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800053c:	f000 f814 	bl	8000568 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000540:	4908      	ldr	r1, [pc, #32]	; (8000564 <APPE_Init+0x2c>)
 8000542:	2000      	movs	r0, #0
 8000544:	f000 fd58 	bl	8000ff8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000548:	f7ff feca 	bl	80002e0 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800054c:	2101      	movs	r1, #1
 800054e:	2001      	movs	r0, #1
 8000550:	f008 fe2c 	bl	80091ac <UTIL_LPM_SetOffMode>

  Led_Init();
 8000554:	f000 f867 	bl	8000626 <Led_Init>

  Button_Init();
 8000558:	f000 f87e 	bl	8000658 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800055c:	f000 f812 	bl	8000584 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000560:	bf00      	nop
}
 8000562:	bd80      	pop	{r7, pc}
 8000564:	20000640 	.word	0x20000640

08000568 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800056c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000570:	f7ff ffce 	bl	8000510 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000574:	f008 fe08 	bl	8009188 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000578:	2004      	movs	r0, #4
 800057a:	f7ff ffb3 	bl	80004e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800057e:	bf00      	nop
}
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800058a:	f008 fbbb 	bl	8008d04 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <appe_Tl_Init+0x50>)
 8000590:	2100      	movs	r1, #0
 8000592:	2020      	movs	r0, #32
 8000594:	f008 ff54 	bl	8009440 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <appe_Tl_Init+0x54>)
 800059a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <appe_Tl_Init+0x58>)
 800059e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005a0:	463b      	mov	r3, r7
 80005a2:	4619      	mov	r1, r3
 80005a4:	480e      	ldr	r0, [pc, #56]	; (80005e0 <appe_Tl_Init+0x5c>)
 80005a6:	f008 f8a1 	bl	80086ec <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <appe_Tl_Init+0x60>)
 80005ac:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <appe_Tl_Init+0x64>)
 80005b0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <appe_Tl_Init+0x68>)
 80005b4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005b6:	f240 533c 	movw	r3, #1340	; 0x53c
 80005ba:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	4618      	mov	r0, r3
 80005c2:	f008 fce1 	bl	8008f88 <TL_MM_Init>

  TL_Enable();
 80005c6:	f008 fb97 	bl	8008cf8 <TL_Enable>

  return;
 80005ca:	bf00      	nop
}
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	08008725 	.word	0x08008725
 80005d8:	20030724 	.word	0x20030724
 80005dc:	080005f1 	.word	0x080005f1
 80005e0:	08000607 	.word	0x08000607
 80005e4:	2003093c 	.word	0x2003093c
 80005e8:	20030830 	.word	0x20030830
 80005ec:	200301e8 	.word	0x200301e8

080005f0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80005fa:	bf00      	nop
}
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800060e:	f7ff fea1 	bl	8000354 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000612:	f001 ff5b 	bl	80024cc <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000616:	2100      	movs	r1, #0
 8000618:	2001      	movs	r0, #1
 800061a:	f008 fdc7 	bl	80091ac <UTIL_LPM_SetOffMode>
  return;
 800061e:	bf00      	nop
}
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800062a:	2000      	movs	r0, #0
 800062c:	f002 fe7e 	bl	800332c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000630:	2001      	movs	r0, #1
 8000632:	f002 fe7b 	bl	800332c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000636:	2002      	movs	r0, #2
 8000638:	f002 fe78 	bl	800332c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN_BR);
 800063c:	2003      	movs	r0, #3
 800063e:	f002 fe75 	bl	800332c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW_BR);
 8000642:	2004      	movs	r0, #4
 8000644:	f002 fe72 	bl	800332c <BSP_LED_Init>
  BSP_LED_Init(LED_RED_BR);
 8000648:	2005      	movs	r0, #5
 800064a:	f002 fe6f 	bl	800332c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 800064e:	2001      	movs	r0, #1
 8000650:	f002 fea6 	bl	80033a0 <BSP_LED_On>
#endif

  return;
 8000654:	bf00      	nop
}
 8000656:	bd80      	pop	{r7, pc}

08000658 <Button_Init>:

static void Button_Init( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800065c:	2101      	movs	r1, #1
 800065e:	2000      	movs	r0, #0
 8000660:	f002 feec 	bl	800343c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000664:	2101      	movs	r1, #1
 8000666:	2001      	movs	r0, #1
 8000668:	f002 fee8 	bl	800343c <BSP_PB_Init>
#endif

  return;
 800066c:	bf00      	nop
}
 800066e:	bd80      	pop	{r7, pc}

08000670 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000674:	f008 fdca 	bl	800920c <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000678:	bf00      	nop
}
 800067a:	bd80      	pop	{r7, pc}

0800067c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	f008 fdf5 	bl	8009278 <UTIL_SEQ_Run>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800069e:	2100      	movs	r1, #0
 80006a0:	2020      	movs	r0, #32
 80006a2:	f008 feef 	bl	8009484 <UTIL_SEQ_SetTask>
  return;
 80006a6:	bf00      	nop
}
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006b6:	2002      	movs	r0, #2
 80006b8:	f008 ff50 	bl	800955c <UTIL_SEQ_SetEvt>
  return;
 80006bc:	bf00      	nop
}
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006cc:	2002      	movs	r0, #2
 80006ce:	f008 ff65 	bl	800959c <UTIL_SEQ_WaitEvt>
  return;
 80006d2:	bf00      	nop
}
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d149      	bne.n	8000780 <HAL_GPIO_EXTI_Callback+0xa4>
//    case BUTTON_SW1_PIN:
//     APP_BLE_Key_Button1_Action();
//      break;

    case BUTTON_SW2_PIN:
    	APP_BLE_Key_Button2_Action();
 80006ec:	f002 f856 	bl	800279c <APP_BLE_Key_Button2_Action>
    	//BSP_LED_Toggle(LED1);
    	//BSP_LED_Toggle(LED_GREEN_BR);
    	if (flag == 2) {
 80006f0:	4b26      	ldr	r3, [pc, #152]	; (800078c <HAL_GPIO_EXTI_Callback+0xb0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b02      	cmp	r3, #2
 80006f6:	d103      	bne.n	8000700 <HAL_GPIO_EXTI_Callback+0x24>
    		BSP_LED_Toggle(LED_GREEN_BR);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f002 fe85 	bl	8003408 <BSP_LED_Toggle>
 80006fe:	e00e      	b.n	800071e <HAL_GPIO_EXTI_Callback+0x42>
    	} else if (flag == 1) {
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d103      	bne.n	8000710 <HAL_GPIO_EXTI_Callback+0x34>
    		BSP_LED_Toggle(LED_YELLOW_BR);
 8000708:	2004      	movs	r0, #4
 800070a:	f002 fe7d 	bl	8003408 <BSP_LED_Toggle>
 800070e:	e006      	b.n	800071e <HAL_GPIO_EXTI_Callback+0x42>
    	} else if (flag == 0) {
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <HAL_GPIO_EXTI_Callback+0x42>
    		BSP_LED_Toggle(LED_RED_BR);
 8000718:	2005      	movs	r0, #5
 800071a:	f002 fe75 	bl	8003408 <BSP_LED_Toggle>
    	}

    	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800071e:	2200      	movs	r2, #0
 8000720:	491b      	ldr	r1, [pc, #108]	; (8000790 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000722:	481c      	ldr	r0, [pc, #112]	; (8000794 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000724:	f005 fe50 	bl	80063c8 <HAL_RTC_GetTime>
    	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000728:	2200      	movs	r2, #0
 800072a:	491b      	ldr	r1, [pc, #108]	; (8000798 <HAL_GPIO_EXTI_Callback+0xbc>)
 800072c:	4819      	ldr	r0, [pc, #100]	; (8000794 <HAL_GPIO_EXTI_Callback+0xb8>)
 800072e:	f005 ff55 	bl	80065dc <HAL_RTC_GetDate>

    	currTime.tm_year = currentDate.Year + 100;  // In fact: 2000 + 18 - 1900
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000734:	78db      	ldrb	r3, [r3, #3]
 8000736:	3364      	adds	r3, #100	; 0x64
 8000738:	4a18      	ldr	r2, [pc, #96]	; (800079c <HAL_GPIO_EXTI_Callback+0xc0>)
 800073a:	6153      	str	r3, [r2, #20]
    	currTime.tm_mday = currentDate.Date;
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_GPIO_EXTI_Callback+0xbc>)
 800073e:	789b      	ldrb	r3, [r3, #2]
 8000740:	461a      	mov	r2, r3
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000744:	60da      	str	r2, [r3, #12]
    	currTime.tm_mon  = currentDate.Month - 1;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000748:	785b      	ldrb	r3, [r3, #1]
 800074a:	3b01      	subs	r3, #1
 800074c:	4a13      	ldr	r2, [pc, #76]	; (800079c <HAL_GPIO_EXTI_Callback+0xc0>)
 800074e:	6113      	str	r3, [r2, #16]

    	currTime.tm_hour = currentTime.Hours;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000758:	609a      	str	r2, [r3, #8]
    	currTime.tm_min  = currentTime.Minutes;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <HAL_GPIO_EXTI_Callback+0xb4>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	461a      	mov	r2, r3
 8000760:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000762:	605a      	str	r2, [r3, #4]
    	currTime.tm_sec  = currentTime.Seconds;
 8000764:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <HAL_GPIO_EXTI_Callback+0xb4>)
 8000766:	789b      	ldrb	r3, [r3, #2]
 8000768:	461a      	mov	r2, r3
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <HAL_GPIO_EXTI_Callback+0xc0>)
 800076c:	601a      	str	r2, [r3, #0]

    	timestamp = mktime(&currTime);
 800076e:	480b      	ldr	r0, [pc, #44]	; (800079c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000770:	f009 f8b6 	bl	80098e0 <mktime>
 8000774:	4602      	mov	r2, r0
 8000776:	460b      	mov	r3, r1
 8000778:	4909      	ldr	r1, [pc, #36]	; (80007a0 <HAL_GPIO_EXTI_Callback+0xc4>)
 800077a:	e9c1 2300 	strd	r2, r3, [r1]
    	break;
 800077e:	e000      	b.n	8000782 <HAL_GPIO_EXTI_Callback+0xa6>
//    case BUTTON_SW3_PIN:
//      APP_BLE_Key_Button3_Action();
//      break;

    default:
      break;
 8000780:	bf00      	nop

  }
  return;
 8000782:	bf00      	nop
}
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000008 	.word	0x20000008
 8000790:	20000434 	.word	0x20000434
 8000794:	20000640 	.word	0x20000640
 8000798:	20000430 	.word	0x20000430
 800079c:	20000448 	.word	0x20000448
 80007a0:	20000428 	.word	0x20000428

080007a4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80007ae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80007b2:	4905      	ldr	r1, [pc, #20]	; (80007c8 <LL_EXTI_EnableIT_0_31+0x24>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	58000800 	.word	0x58000800

080007cc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4904      	ldr	r1, [pc, #16]	; (80007ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4313      	orrs	r3, r2
 80007de:	600b      	str	r3, [r1, #0]

}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	58000800 	.word	0x58000800

080007f0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <ReadRtcSsrValue+0x3c>)
 80007f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <ReadRtcSsrValue+0x3c>)
 8000800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000802:	b29b      	uxth	r3, r3
 8000804:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000806:	e005      	b.n	8000814 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <ReadRtcSsrValue+0x3c>)
 800080e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000810:	b29b      	uxth	r3, r3
 8000812:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	429a      	cmp	r2, r3
 800081a:	d1f5      	bne.n	8000808 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800081c:	683b      	ldr	r3, [r7, #0]
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40002800 	.word	0x40002800

08000830 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	460a      	mov	r2, r1
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	4613      	mov	r3, r2
 800083e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000840:	79ba      	ldrb	r2, [r7, #6]
 8000842:	491d      	ldr	r1, [pc, #116]	; (80008b8 <LinkTimerAfter+0x88>)
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	440b      	add	r3, r1
 800084e:	3315      	adds	r3, #21
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	2b06      	cmp	r3, #6
 8000858:	d009      	beq.n	800086e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800085a:	7bfa      	ldrb	r2, [r7, #15]
 800085c:	4916      	ldr	r1, [pc, #88]	; (80008b8 <LinkTimerAfter+0x88>)
 800085e:	4613      	mov	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	4413      	add	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	440b      	add	r3, r1
 8000868:	3314      	adds	r3, #20
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	4911      	ldr	r1, [pc, #68]	; (80008b8 <LinkTimerAfter+0x88>)
 8000872:	4613      	mov	r3, r2
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4413      	add	r3, r2
 8000878:	00db      	lsls	r3, r3, #3
 800087a:	440b      	add	r3, r1
 800087c:	3315      	adds	r3, #21
 800087e:	7bfa      	ldrb	r2, [r7, #15]
 8000880:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <LinkTimerAfter+0x88>)
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	440b      	add	r3, r1
 8000890:	3314      	adds	r3, #20
 8000892:	79ba      	ldrb	r2, [r7, #6]
 8000894:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000896:	79ba      	ldrb	r2, [r7, #6]
 8000898:	4907      	ldr	r1, [pc, #28]	; (80008b8 <LinkTimerAfter+0x88>)
 800089a:	4613      	mov	r3, r2
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	4413      	add	r3, r2
 80008a0:	00db      	lsls	r3, r3, #3
 80008a2:	440b      	add	r3, r1
 80008a4:	3315      	adds	r3, #21
 80008a6:	79fa      	ldrb	r2, [r7, #7]
 80008a8:	701a      	strb	r2, [r3, #0]

  return;
 80008aa:	bf00      	nop
}
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000128 	.word	0x20000128

080008bc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	460a      	mov	r2, r1
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	4613      	mov	r3, r2
 80008ca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <LinkTimerBefore+0xb8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	79ba      	ldrb	r2, [r7, #6]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d032      	beq.n	800093e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80008d8:	79ba      	ldrb	r2, [r7, #6]
 80008da:	4927      	ldr	r1, [pc, #156]	; (8000978 <LinkTimerBefore+0xbc>)
 80008dc:	4613      	mov	r3, r2
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	4413      	add	r3, r2
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	440b      	add	r3, r1
 80008e6:	3314      	adds	r3, #20
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	4922      	ldr	r1, [pc, #136]	; (8000978 <LinkTimerBefore+0xbc>)
 80008f0:	4613      	mov	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	440b      	add	r3, r1
 80008fa:	3315      	adds	r3, #21
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000900:	79fa      	ldrb	r2, [r7, #7]
 8000902:	491d      	ldr	r1, [pc, #116]	; (8000978 <LinkTimerBefore+0xbc>)
 8000904:	4613      	mov	r3, r2
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	4413      	add	r3, r2
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	440b      	add	r3, r1
 800090e:	3315      	adds	r3, #21
 8000910:	79ba      	ldrb	r2, [r7, #6]
 8000912:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	4918      	ldr	r1, [pc, #96]	; (8000978 <LinkTimerBefore+0xbc>)
 8000918:	4613      	mov	r3, r2
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	4413      	add	r3, r2
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	440b      	add	r3, r1
 8000922:	3314      	adds	r3, #20
 8000924:	7bfa      	ldrb	r2, [r7, #15]
 8000926:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000928:	79ba      	ldrb	r2, [r7, #6]
 800092a:	4913      	ldr	r1, [pc, #76]	; (8000978 <LinkTimerBefore+0xbc>)
 800092c:	4613      	mov	r3, r2
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	4413      	add	r3, r2
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	440b      	add	r3, r1
 8000936:	3314      	adds	r3, #20
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800093c:	e014      	b.n	8000968 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800093e:	79fa      	ldrb	r2, [r7, #7]
 8000940:	490d      	ldr	r1, [pc, #52]	; (8000978 <LinkTimerBefore+0xbc>)
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	440b      	add	r3, r1
 800094c:	3315      	adds	r3, #21
 800094e:	79ba      	ldrb	r2, [r7, #6]
 8000950:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000952:	79ba      	ldrb	r2, [r7, #6]
 8000954:	4908      	ldr	r1, [pc, #32]	; (8000978 <LinkTimerBefore+0xbc>)
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	00db      	lsls	r3, r3, #3
 800095e:	440b      	add	r3, r1
 8000960:	3314      	adds	r3, #20
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	701a      	strb	r2, [r3, #0]
  return;
 8000966:	bf00      	nop
}
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	200001b8 	.word	0x200001b8
 8000978:	20000128 	.word	0x20000128

0800097c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000986:	4b4e      	ldr	r3, [pc, #312]	; (8000ac0 <linkTimer+0x144>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b06      	cmp	r3, #6
 800098e:	d118      	bne.n	80009c2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000990:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <linkTimer+0x144>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b4b      	ldr	r3, [pc, #300]	; (8000ac4 <linkTimer+0x148>)
 8000998:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800099a:	4a49      	ldr	r2, [pc, #292]	; (8000ac0 <linkTimer+0x144>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	4949      	ldr	r1, [pc, #292]	; (8000ac8 <linkTimer+0x14c>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3315      	adds	r3, #21
 80009b0:	2206      	movs	r2, #6
 80009b2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009b4:	4b45      	ldr	r3, [pc, #276]	; (8000acc <linkTimer+0x150>)
 80009b6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80009bc:	2300      	movs	r3, #0
 80009be:	81fb      	strh	r3, [r7, #14]
 80009c0:	e078      	b.n	8000ab4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80009c2:	f000 f909 	bl	8000bd8 <ReturnTimeElapsed>
 80009c6:	4603      	mov	r3, r0
 80009c8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	493e      	ldr	r1, [pc, #248]	; (8000ac8 <linkTimer+0x14c>)
 80009ce:	4613      	mov	r3, r2
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	4413      	add	r3, r2
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	440b      	add	r3, r1
 80009d8:	3308      	adds	r3, #8
 80009da:	6819      	ldr	r1, [r3, #0]
 80009dc:	89fb      	ldrh	r3, [r7, #14]
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	4419      	add	r1, r3
 80009e2:	4839      	ldr	r0, [pc, #228]	; (8000ac8 <linkTimer+0x14c>)
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	4403      	add	r3, r0
 80009ee:	3308      	adds	r3, #8
 80009f0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80009f2:	79fa      	ldrb	r2, [r7, #7]
 80009f4:	4934      	ldr	r1, [pc, #208]	; (8000ac8 <linkTimer+0x14c>)
 80009f6:	4613      	mov	r3, r2
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	4413      	add	r3, r2
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	440b      	add	r3, r1
 8000a00:	3308      	adds	r3, #8
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a06:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <linkTimer+0x144>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ac8 <linkTimer+0x14c>)
 8000a10:	460b      	mov	r3, r1
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	440b      	add	r3, r1
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	4413      	add	r3, r2
 8000a1a:	3308      	adds	r3, #8
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	d337      	bcc.n	8000a94 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a24:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <linkTimer+0x144>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a2a:	7b7a      	ldrb	r2, [r7, #13]
 8000a2c:	4926      	ldr	r1, [pc, #152]	; (8000ac8 <linkTimer+0x14c>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3315      	adds	r3, #21
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a3e:	e013      	b.n	8000a68 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a40:	7b7a      	ldrb	r2, [r7, #13]
 8000a42:	4921      	ldr	r1, [pc, #132]	; (8000ac8 <linkTimer+0x14c>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	440b      	add	r3, r1
 8000a4e:	3315      	adds	r3, #21
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a54:	7b7a      	ldrb	r2, [r7, #13]
 8000a56:	491c      	ldr	r1, [pc, #112]	; (8000ac8 <linkTimer+0x14c>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3315      	adds	r3, #21
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a68:	7b3b      	ldrb	r3, [r7, #12]
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d00b      	beq.n	8000a86 <linkTimer+0x10a>
 8000a6e:	7b3a      	ldrb	r2, [r7, #12]
 8000a70:	4915      	ldr	r1, [pc, #84]	; (8000ac8 <linkTimer+0x14c>)
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3308      	adds	r3, #8
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	d2dc      	bcs.n	8000a40 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000a86:	7b7a      	ldrb	r2, [r7, #13]
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fecf 	bl	8000830 <LinkTimerAfter>
 8000a92:	e00f      	b.n	8000ab4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <linkTimer+0x144>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4611      	mov	r1, r2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff0c 	bl	80008bc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <linkTimer+0x144>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <linkTimer+0x148>)
 8000aac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <linkTimer+0x144>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ab4:	89fb      	ldrh	r3, [r7, #14]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3710      	adds	r7, #16
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	200001b8 	.word	0x200001b8
 8000ac4:	200001b9 	.word	0x200001b9
 8000ac8:	20000128 	.word	0x20000128
 8000acc:	200001bc 	.word	0x200001bc

08000ad0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000ae0:	4b39      	ldr	r3, [pc, #228]	; (8000bc8 <UnlinkTimer+0xf8>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d111      	bne.n	8000b10 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000aec:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <UnlinkTimer+0xf8>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <UnlinkTimer+0xfc>)
 8000af4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000af6:	79fa      	ldrb	r2, [r7, #7]
 8000af8:	4935      	ldr	r1, [pc, #212]	; (8000bd0 <UnlinkTimer+0x100>)
 8000afa:	4613      	mov	r3, r2
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	4413      	add	r3, r2
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	440b      	add	r3, r1
 8000b04:	3315      	adds	r3, #21
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <UnlinkTimer+0xf8>)
 8000b0c:	701a      	strb	r2, [r3, #0]
 8000b0e:	e03e      	b.n	8000b8e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b10:	79fa      	ldrb	r2, [r7, #7]
 8000b12:	492f      	ldr	r1, [pc, #188]	; (8000bd0 <UnlinkTimer+0x100>)
 8000b14:	4613      	mov	r3, r2
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	4413      	add	r3, r2
 8000b1a:	00db      	lsls	r3, r3, #3
 8000b1c:	440b      	add	r3, r1
 8000b1e:	3314      	adds	r3, #20
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b24:	79fa      	ldrb	r2, [r7, #7]
 8000b26:	492a      	ldr	r1, [pc, #168]	; (8000bd0 <UnlinkTimer+0x100>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	440b      	add	r3, r1
 8000b32:	3315      	adds	r3, #21
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b38:	79f9      	ldrb	r1, [r7, #7]
 8000b3a:	7bfa      	ldrb	r2, [r7, #15]
 8000b3c:	4824      	ldr	r0, [pc, #144]	; (8000bd0 <UnlinkTimer+0x100>)
 8000b3e:	460b      	mov	r3, r1
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	440b      	add	r3, r1
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4403      	add	r3, r0
 8000b48:	3315      	adds	r3, #21
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2d8      	uxtb	r0, r3
 8000b4e:	4920      	ldr	r1, [pc, #128]	; (8000bd0 <UnlinkTimer+0x100>)
 8000b50:	4613      	mov	r3, r2
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	4413      	add	r3, r2
 8000b56:	00db      	lsls	r3, r3, #3
 8000b58:	440b      	add	r3, r1
 8000b5a:	3315      	adds	r3, #21
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b60:	7bbb      	ldrb	r3, [r7, #14]
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d013      	beq.n	8000b8e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b66:	79f9      	ldrb	r1, [r7, #7]
 8000b68:	7bba      	ldrb	r2, [r7, #14]
 8000b6a:	4819      	ldr	r0, [pc, #100]	; (8000bd0 <UnlinkTimer+0x100>)
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	440b      	add	r3, r1
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	4403      	add	r3, r0
 8000b76:	3314      	adds	r3, #20
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b2d8      	uxtb	r0, r3
 8000b7c:	4914      	ldr	r1, [pc, #80]	; (8000bd0 <UnlinkTimer+0x100>)
 8000b7e:	4613      	mov	r3, r2
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	4413      	add	r3, r2
 8000b84:	00db      	lsls	r3, r3, #3
 8000b86:	440b      	add	r3, r1
 8000b88:	3314      	adds	r3, #20
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000b8e:	79fa      	ldrb	r2, [r7, #7]
 8000b90:	490f      	ldr	r1, [pc, #60]	; (8000bd0 <UnlinkTimer+0x100>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	330c      	adds	r3, #12
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <UnlinkTimer+0xf8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b06      	cmp	r3, #6
 8000baa:	d107      	bne.n	8000bbc <UnlinkTimer+0xec>
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d104      	bne.n	8000bbc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <UnlinkTimer+0x104>)
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  return;
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
}
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	200001b8 	.word	0x200001b8
 8000bcc:	200001b9 	.word	0x200001b9
 8000bd0:	20000128 	.word	0x20000128
 8000bd4:	200001bc 	.word	0x200001bc

08000bd8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <ReturnTimeElapsed+0x70>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be6:	d026      	beq.n	8000c36 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000be8:	f7ff fe02 	bl	80007f0 <ReadRtcSsrValue>
 8000bec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000bee:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <ReturnTimeElapsed+0x70>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d805      	bhi.n	8000c04 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <ReturnTimeElapsed+0x70>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	1ad3      	subs	r3, r2, r3
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	e00a      	b.n	8000c1a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <ReturnTimeElapsed+0x74>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <ReturnTimeElapsed+0x70>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <ReturnTimeElapsed+0x78>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	fb02 f303 	mul.w	r3, r2, r3
 8000c26:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <ReturnTimeElapsed+0x7c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	40d3      	lsrs	r3, r2
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	e001      	b.n	8000c3a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	b29b      	uxth	r3, r3
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200001bc 	.word	0x200001bc
 8000c4c:	200002ca 	.word	0x200002ca
 8000c50:	200002c9 	.word	0x200002c9
 8000c54:	200002c8 	.word	0x200002c8

08000c58 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d108      	bne.n	8000c7a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c68:	f7ff fdc2 	bl	80007f0 <ReadRtcSsrValue>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <RestartWakeupCounter+0xa8>)
 8000c70:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f002 ff1b 	bl	8003aae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000c78:	e03e      	b.n	8000cf8 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000c7a:	88fb      	ldrh	r3, [r7, #6]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d803      	bhi.n	8000c88 <RestartWakeupCounter+0x30>
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <RestartWakeupCounter+0xac>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d002      	beq.n	8000c8e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000c8e:	bf00      	nop
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <RestartWakeupCounter+0xb0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f7      	beq.n	8000c90 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <RestartWakeupCounter+0xb0>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <RestartWakeupCounter+0xb0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000cb4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <RestartWakeupCounter+0xb4>)
 8000cb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cbc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000cbe:	2003      	movs	r0, #3
 8000cc0:	f002 ff03 	bl	8003aca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <RestartWakeupCounter+0xb8>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	0c1b      	lsrs	r3, r3, #16
 8000cca:	041b      	lsls	r3, r3, #16
 8000ccc:	88fa      	ldrh	r2, [r7, #6]
 8000cce:	4910      	ldr	r1, [pc, #64]	; (8000d10 <RestartWakeupCounter+0xb8>)
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000cd4:	f7ff fd8c 	bl	80007f0 <ReadRtcSsrValue>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <RestartWakeupCounter+0xa8>)
 8000cdc:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <RestartWakeupCounter+0xb0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <RestartWakeupCounter+0xb0>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cf0:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000cf2:	f3af 8000 	nop.w
  return ;
 8000cf6:	bf00      	nop
}
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001bc 	.word	0x200001bc
 8000d04:	200002c8 	.word	0x200002c8
 8000d08:	200002c4 	.word	0x200002c4
 8000d0c:	58000800 	.word	0x58000800
 8000d10:	40002800 	.word	0x40002800

08000d14 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <RescheduleTimerList+0x124>)
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d26:	d108      	bne.n	8000d3a <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d28:	bf00      	nop
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <RescheduleTimerList+0x128>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f003 0304 	and.w	r3, r3, #4
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f7      	bne.n	8000d2a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d3a:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <RescheduleTimerList+0x128>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	4b3e      	ldr	r3, [pc, #248]	; (8000e3c <RescheduleTimerList+0x128>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d4c:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d4e:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <RescheduleTimerList+0x12c>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d54:	7bfa      	ldrb	r2, [r7, #15]
 8000d56:	493b      	ldr	r1, [pc, #236]	; (8000e44 <RescheduleTimerList+0x130>)
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	3308      	adds	r3, #8
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000d68:	f7ff ff36 	bl	8000bd8 <ReturnTimeElapsed>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d205      	bcs.n	8000d84 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d7c:	4b32      	ldr	r3, [pc, #200]	; (8000e48 <RescheduleTimerList+0x134>)
 8000d7e:	2201      	movs	r2, #1
 8000d80:	701a      	strb	r2, [r3, #0]
 8000d82:	e04d      	b.n	8000e20 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000d84:	88fb      	ldrh	r3, [r7, #6]
 8000d86:	4a31      	ldr	r2, [pc, #196]	; (8000e4c <RescheduleTimerList+0x138>)
 8000d88:	8812      	ldrh	r2, [r2, #0]
 8000d8a:	b292      	uxth	r2, r2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d906      	bls.n	8000da4 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000d96:	4b2d      	ldr	r3, [pc, #180]	; (8000e4c <RescheduleTimerList+0x138>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <RescheduleTimerList+0x134>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	e03d      	b.n	8000e20 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <RescheduleTimerList+0x134>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000db4:	e034      	b.n	8000e20 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000db6:	7bfa      	ldrb	r2, [r7, #15]
 8000db8:	4922      	ldr	r1, [pc, #136]	; (8000e44 <RescheduleTimerList+0x130>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3308      	adds	r3, #8
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	88fb      	ldrh	r3, [r7, #6]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d20a      	bcs.n	8000de4 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000dce:	7bfa      	ldrb	r2, [r7, #15]
 8000dd0:	491c      	ldr	r1, [pc, #112]	; (8000e44 <RescheduleTimerList+0x130>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	440b      	add	r3, r1
 8000ddc:	3308      	adds	r3, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e013      	b.n	8000e0c <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	4917      	ldr	r1, [pc, #92]	; (8000e44 <RescheduleTimerList+0x130>)
 8000de8:	4613      	mov	r3, r2
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	4413      	add	r3, r2
 8000dee:	00db      	lsls	r3, r3, #3
 8000df0:	440b      	add	r3, r1
 8000df2:	3308      	adds	r3, #8
 8000df4:	6819      	ldr	r1, [r3, #0]
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	7bfa      	ldrb	r2, [r7, #15]
 8000dfa:	1ac9      	subs	r1, r1, r3
 8000dfc:	4811      	ldr	r0, [pc, #68]	; (8000e44 <RescheduleTimerList+0x130>)
 8000dfe:	4613      	mov	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4413      	add	r3, r2
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4403      	add	r3, r0
 8000e08:	3308      	adds	r3, #8
 8000e0a:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e0c:	7bfa      	ldrb	r2, [r7, #15]
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <RescheduleTimerList+0x130>)
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	440b      	add	r3, r1
 8000e1a:	3315      	adds	r3, #21
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d1c7      	bne.n	8000db6 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e26:	89bb      	ldrh	r3, [r7, #12]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff15 	bl	8000c58 <RestartWakeupCounter>

  return ;
 8000e2e:	bf00      	nop
}
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40002800 	.word	0x40002800
 8000e3c:	200002c4 	.word	0x200002c4
 8000e40:	200001b8 	.word	0x200001b8
 8000e44:	20000128 	.word	0x20000128
 8000e48:	200001c0 	.word	0x200001c0
 8000e4c:	200002cc 	.word	0x200002cc

08000e50 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e56:	f3ef 8310 	mrs	r3, PRIMASK
 8000e5a:	617b      	str	r3, [r7, #20]
  return(result);
 8000e5c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e64:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	22ca      	movs	r2, #202	; 0xca
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e6e:	4b5d      	ldr	r3, [pc, #372]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2253      	movs	r2, #83	; 0x53
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000e78:	4b5a      	ldr	r3, [pc, #360]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	4b58      	ldr	r3, [pc, #352]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e8a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000e8c:	4b56      	ldr	r3, [pc, #344]	; (8000fe8 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000e94:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e98:	4954      	ldr	r1, [pc, #336]	; (8000fec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	330c      	adds	r3, #12
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d172      	bne.n	8000f94 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000eae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000eb2:	494e      	ldr	r1, [pc, #312]	; (8000fec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	440b      	add	r3, r1
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ec2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ec6:	4949      	ldr	r1, [pc, #292]	; (8000fec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3310      	adds	r3, #16
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000ed8:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d050      	beq.n	8000f84 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000ee2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ee6:	4941      	ldr	r1, [pc, #260]	; (8000fec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ee8:	4613      	mov	r3, r2
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	4413      	add	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	330d      	adds	r3, #13
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d126      	bne.n	8000f4a <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f00:	2101      	movs	r1, #1
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fde4 	bl	8000ad0 <UnlinkTimer>
 8000f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	f383 8810 	msr	PRIMASK, r3
}
 8000f12:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f14:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f18:	4934      	ldr	r1, [pc, #208]	; (8000fec <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	3304      	adds	r3, #4
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa4e 	bl	80013d0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f34:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	22ca      	movs	r2, #202	; 0xca
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2253      	movs	r2, #83	; 0x53
 8000f46:	625a      	str	r2, [r3, #36]	; 0x24
 8000f48:	e014      	b.n	8000f74 <HW_TS_RTC_Wakeup_Handler+0x124>
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f383 8810 	msr	PRIMASK, r3
}
 8000f54:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f9ac 	bl	80012b8 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	22ca      	movs	r2, #202	; 0xca
 8000f68:	625a      	str	r2, [r3, #36]	; 0x24
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2253      	movs	r2, #83	; 0x53
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	69b8      	ldr	r0, [r7, #24]
 8000f7e:	f000 faaf 	bl	80014e0 <HW_TS_RTC_Int_AppNot>
 8000f82:	e025      	b.n	8000fd0 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000f84:	f7ff fec6 	bl	8000d14 <RescheduleTimerList>
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f383 8810 	msr	PRIMASK, r3
}
 8000f92:	e01d      	b.n	8000fd0 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f94:	bf00      	nop
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d0f7      	beq.n	8000f96 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68db      	ldr	r3, [r3, #12]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fba:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000fbc:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000fbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f383 8810 	msr	PRIMASK, r3
}
 8000fce:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	22ff      	movs	r2, #255	; 0xff
 8000fd8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000fda:	bf00      	nop
}
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002c4 	.word	0x200002c4
 8000fe8:	200001b8 	.word	0x200001b8
 8000fec:	20000128 	.word	0x20000128
 8000ff0:	200001c0 	.word	0x200001c0
 8000ff4:	58000800 	.word	0x58000800

08000ff8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001004:	4a64      	ldr	r2, [pc, #400]	; (8001198 <HW_TS_Init+0x1a0>)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800100a:	4b63      	ldr	r3, [pc, #396]	; (8001198 <HW_TS_Init+0x1a0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	22ca      	movs	r2, #202	; 0xca
 8001012:	625a      	str	r2, [r3, #36]	; 0x24
 8001014:	4b60      	ldr	r3, [pc, #384]	; (8001198 <HW_TS_Init+0x1a0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2253      	movs	r2, #83	; 0x53
 800101c:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800101e:	4b5f      	ldr	r3, [pc, #380]	; (800119c <HW_TS_Init+0x1a4>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4a5e      	ldr	r2, [pc, #376]	; (800119c <HW_TS_Init+0x1a4>)
 8001024:	f043 0320 	orr.w	r3, r3, #32
 8001028:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800102a:	4b5c      	ldr	r3, [pc, #368]	; (800119c <HW_TS_Init+0x1a4>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	b2db      	uxtb	r3, r3
 8001036:	f1c3 0304 	rsb	r3, r3, #4
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <HW_TS_Init+0x1a8>)
 800103e:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001040:	4b56      	ldr	r3, [pc, #344]	; (800119c <HW_TS_Init+0x1a4>)
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001048:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800104c:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	fa92 f2a2 	rbit	r2, r2
 8001054:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	2a00      	cmp	r2, #0
 800105e:	d101      	bne.n	8001064 <HW_TS_Init+0x6c>
  {
    return 32U;
 8001060:	2220      	movs	r2, #32
 8001062:	e003      	b.n	800106c <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	fab2 f282 	clz	r2, r2
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	40d3      	lsrs	r3, r2
 800106e:	b2db      	uxtb	r3, r3
 8001070:	3301      	adds	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <HW_TS_Init+0x1ac>)
 8001076:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001078:	4b48      	ldr	r3, [pc, #288]	; (800119c <HW_TS_Init+0x1a4>)
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	b29b      	uxth	r3, r3
 800107e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001082:	b29b      	uxth	r3, r3
 8001084:	3301      	adds	r3, #1
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HW_TS_Init+0x1b0>)
 800108a:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HW_TS_Init+0x1b0>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a44      	ldr	r2, [pc, #272]	; (80011a4 <HW_TS_Init+0x1ac>)
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800109e:	4a40      	ldr	r2, [pc, #256]	; (80011a0 <HW_TS_Init+0x1a8>)
 80010a0:	7812      	ldrb	r2, [r2, #0]
 80010a2:	40d3      	lsrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d904      	bls.n	80010ba <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80010b0:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <HW_TS_Init+0x1b4>)
 80010b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b6:	801a      	strh	r2, [r3, #0]
 80010b8:	e003      	b.n	80010c2 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <HW_TS_Init+0x1b4>)
 80010c0:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010c6:	f7ff fb81 	bl	80007cc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010ce:	f7ff fb69 	bl	80007a4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d143      	bne.n	8001160 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010d8:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <HW_TS_Init+0x1b8>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HW_TS_Init+0x1bc>)
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	77fb      	strb	r3, [r7, #31]
 80010ea:	e00c      	b.n	8001106 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80010ec:	7ffa      	ldrb	r2, [r7, #31]
 80010ee:	4932      	ldr	r1, [pc, #200]	; (80011b8 <HW_TS_Init+0x1c0>)
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	440b      	add	r3, r1
 80010fa:	330c      	adds	r3, #12
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	3301      	adds	r3, #1
 8001104:	77fb      	strb	r3, [r7, #31]
 8001106:	7ffb      	ldrb	r3, [r7, #31]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d9ef      	bls.n	80010ec <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HW_TS_Init+0x1c4>)
 800110e:	2206      	movs	r2, #6
 8001110:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8001112:	4b21      	ldr	r3, [pc, #132]	; (8001198 <HW_TS_Init+0x1a0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689a      	ldr	r2, [r3, #8]
 800111a:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <HW_TS_Init+0x1a0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001124:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001126:	4b1c      	ldr	r3, [pc, #112]	; (8001198 <HW_TS_Init+0x1a0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HW_TS_Init+0x1a0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800113a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <HW_TS_Init+0x1c8>)
 800113e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001142:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001144:	2003      	movs	r0, #3
 8001146:	f002 fcc0 	bl	8003aca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800114a:	4b13      	ldr	r3, [pc, #76]	; (8001198 <HW_TS_Init+0x1a0>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HW_TS_Init+0x1a0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	e00a      	b.n	8001176 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001160:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <HW_TS_Init+0x1a0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001170:	2003      	movs	r0, #3
 8001172:	f002 fc9c 	bl	8003aae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HW_TS_Init+0x1a0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001180:	2200      	movs	r2, #0
 8001182:	2103      	movs	r1, #3
 8001184:	2003      	movs	r0, #3
 8001186:	f002 fc50 	bl	8003a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800118a:	2003      	movs	r0, #3
 800118c:	f002 fc67 	bl	8003a5e <HAL_NVIC_EnableIRQ>

  return;
 8001190:	bf00      	nop
}
 8001192:	3720      	adds	r7, #32
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200002c4 	.word	0x200002c4
 800119c:	40002800 	.word	0x40002800
 80011a0:	200002c8 	.word	0x200002c8
 80011a4:	200002c9 	.word	0x200002c9
 80011a8:	200002ca 	.word	0x200002ca
 80011ac:	200002cc 	.word	0x200002cc
 80011b0:	200001c0 	.word	0x200001c0
 80011b4:	200001bc 	.word	0x200001bc
 80011b8:	20000128 	.word	0x20000128
 80011bc:	200001b8 	.word	0x200001b8
 80011c0:	58000800 	.word	0x58000800

080011c4 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b08b      	sub	sp, #44	; 0x2c
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011da:	f3ef 8310 	mrs	r3, PRIMASK
 80011de:	61fb      	str	r3, [r7, #28]
  return(result);
 80011e0:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80011e4:	b672      	cpsid	i
}
 80011e6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011e8:	e004      	b.n	80011f4 <HW_TS_Create+0x30>
  {
    loop++;
 80011ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ee:	3301      	adds	r3, #1
 80011f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d80c      	bhi.n	8001216 <HW_TS_Create+0x52>
 80011fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001200:	492c      	ldr	r1, [pc, #176]	; (80012b4 <HW_TS_Create+0xf0>)
 8001202:	4613      	mov	r3, r2
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	330c      	adds	r3, #12
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1e9      	bne.n	80011ea <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001216:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800121a:	2b06      	cmp	r3, #6
 800121c:	d038      	beq.n	8001290 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800121e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001222:	4924      	ldr	r1, [pc, #144]	; (80012b4 <HW_TS_Create+0xf0>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	440b      	add	r3, r1
 800122e:	330c      	adds	r3, #12
 8001230:	2201      	movs	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	6a3b      	ldr	r3, [r7, #32]
 8001236:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	f383 8810 	msr	PRIMASK, r3
}
 800123e:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001240:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001244:	491b      	ldr	r1, [pc, #108]	; (80012b4 <HW_TS_Create+0xf0>)
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	440b      	add	r3, r1
 8001250:	3310      	adds	r3, #16
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001256:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800125a:	4916      	ldr	r1, [pc, #88]	; (80012b4 <HW_TS_Create+0xf0>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	330d      	adds	r3, #13
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 800126c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001270:	4910      	ldr	r1, [pc, #64]	; (80012b4 <HW_TS_Create+0xf0>)
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	440b      	add	r3, r1
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001286:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800128e:	e008      	b.n	80012a2 <HW_TS_Create+0xde>
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f383 8810 	msr	PRIMASK, r3
}
 800129a:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800129c:	2301      	movs	r3, #1
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80012a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	372c      	adds	r7, #44	; 0x2c
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20000128 	.word	0x20000128

080012b8 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012c2:	f3ef 8310 	mrs	r3, PRIMASK
 80012c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80012c8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012d0:	2003      	movs	r0, #3
 80012d2:	f002 fbd2 	bl	8003a7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HW_TS_Stop+0x100>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	22ca      	movs	r2, #202	; 0xca
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <HW_TS_Stop+0x100>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2253      	movs	r2, #83	; 0x53
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012ea:	79fa      	ldrb	r2, [r7, #7]
 80012ec:	4933      	ldr	r1, [pc, #204]	; (80013bc <HW_TS_Stop+0x104>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	440b      	add	r3, r1
 80012f8:	330c      	adds	r3, #12
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d148      	bne.n	8001394 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fbe2 	bl	8000ad0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800130c:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <HW_TS_Stop+0x108>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001312:	7cfb      	ldrb	r3, [r7, #19]
 8001314:	2b06      	cmp	r3, #6
 8001316:	d135      	bne.n	8001384 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HW_TS_Stop+0x10c>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001324:	d108      	bne.n	8001338 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001326:	bf00      	nop
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HW_TS_Stop+0x100>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f7      	bne.n	8001328 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HW_TS_Stop+0x100>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HW_TS_Stop+0x100>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800134a:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800134c:	bf00      	nop
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HW_TS_Stop+0x100>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f7      	beq.n	800134e <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HW_TS_Stop+0x100>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HW_TS_Stop+0x100>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001372:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HW_TS_Stop+0x110>)
 8001376:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800137a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800137c:	2003      	movs	r0, #3
 800137e:	f002 fba4 	bl	8003aca <HAL_NVIC_ClearPendingIRQ>
 8001382:	e007      	b.n	8001394 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HW_TS_Stop+0x114>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	7cfa      	ldrb	r2, [r7, #19]
 800138c:	429a      	cmp	r2, r3
 800138e:	d001      	beq.n	8001394 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001390:	f7ff fcc0 	bl	8000d14 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HW_TS_Stop+0x100>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800139e:	2003      	movs	r0, #3
 80013a0:	f002 fb5d 	bl	8003a5e <HAL_NVIC_EnableIRQ>
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	f383 8810 	msr	PRIMASK, r3
}
 80013ae:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013b0:	bf00      	nop
}
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200002c4 	.word	0x200002c4
 80013bc:	20000128 	.word	0x20000128
 80013c0:	200001b8 	.word	0x200001b8
 80013c4:	40002800 	.word	0x40002800
 80013c8:	58000800 	.word	0x58000800
 80013cc:	200001b9 	.word	0x200001b9

080013d0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013dc:	79fa      	ldrb	r2, [r7, #7]
 80013de:	493c      	ldr	r1, [pc, #240]	; (80014d0 <HW_TS_Start+0x100>)
 80013e0:	4613      	mov	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	4413      	add	r3, r2
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	440b      	add	r3, r1
 80013ea:	330c      	adds	r3, #12
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d103      	bne.n	80013fc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff5e 	bl	80012b8 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001400:	60fb      	str	r3, [r7, #12]
  return(result);
 8001402:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001404:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001406:	b672      	cpsid	i
}
 8001408:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800140a:	2003      	movs	r0, #3
 800140c:	f002 fb35 	bl	8003a7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HW_TS_Start+0x104>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	22ca      	movs	r2, #202	; 0xca
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HW_TS_Start+0x104>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2253      	movs	r2, #83	; 0x53
 8001422:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001424:	79fa      	ldrb	r2, [r7, #7]
 8001426:	492a      	ldr	r1, [pc, #168]	; (80014d0 <HW_TS_Start+0x100>)
 8001428:	4613      	mov	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	440b      	add	r3, r1
 8001432:	330c      	adds	r3, #12
 8001434:	2202      	movs	r2, #2
 8001436:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	4925      	ldr	r1, [pc, #148]	; (80014d0 <HW_TS_Start+0x100>)
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	440b      	add	r3, r1
 8001446:	3308      	adds	r3, #8
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	4920      	ldr	r1, [pc, #128]	; (80014d0 <HW_TS_Start+0x100>)
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	3304      	adds	r3, #4
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fa8a 	bl	800097c <linkTimer>
 8001468:	4603      	mov	r3, r0
 800146a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HW_TS_Start+0x108>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HW_TS_Start+0x10c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	7c7a      	ldrb	r2, [r7, #17]
 800147a:	429a      	cmp	r2, r3
 800147c:	d002      	beq.n	8001484 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800147e:	f7ff fc49 	bl	8000d14 <RescheduleTimerList>
 8001482:	e013      	b.n	80014ac <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001484:	79fa      	ldrb	r2, [r7, #7]
 8001486:	4912      	ldr	r1, [pc, #72]	; (80014d0 <HW_TS_Start+0x100>)
 8001488:	4613      	mov	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	440b      	add	r3, r1
 8001492:	3308      	adds	r3, #8
 8001494:	6819      	ldr	r1, [r3, #0]
 8001496:	8a7b      	ldrh	r3, [r7, #18]
 8001498:	79fa      	ldrb	r2, [r7, #7]
 800149a:	1ac9      	subs	r1, r1, r3
 800149c:	480c      	ldr	r0, [pc, #48]	; (80014d0 <HW_TS_Start+0x100>)
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	4403      	add	r3, r0
 80014a8:	3308      	adds	r3, #8
 80014aa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HW_TS_Start+0x104>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014b6:	2003      	movs	r0, #3
 80014b8:	f002 fad1 	bl	8003a5e <HAL_NVIC_EnableIRQ>
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	f383 8810 	msr	PRIMASK, r3
}
 80014c6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014c8:	bf00      	nop
}
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000128 	.word	0x20000128
 80014d4:	200002c4 	.word	0x200002c4
 80014d8:	200001b8 	.word	0x200001b8
 80014dc:	200001b9 	.word	0x200001b9

080014e0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	460b      	mov	r3, r1
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4798      	blx	r3

  return;
 80014f2:	bf00      	nop
}
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0f      	ldr	r2, [pc, #60]	; (8001548 <HAL_UART_TxCpltCallback+0x4c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00a      	beq.n	8001524 <HAL_UART_TxCpltCallback+0x28>
 800150e:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_UART_TxCpltCallback+0x50>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d10f      	bne.n	8001534 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_UART_TxCpltCallback+0x54>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d00d      	beq.n	8001538 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <HAL_UART_TxCpltCallback+0x54>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4798      	blx	r3
            }
            break;
 8001522:	e009      	b.n	8001538 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_UART_TxCpltCallback+0x58>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d007      	beq.n	800153c <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <HAL_UART_TxCpltCallback+0x58>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4798      	blx	r3
            }
            break;
 8001532:	e003      	b.n	800153c <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8001534:	bf00      	nop
 8001536:	e002      	b.n	800153e <HAL_UART_TxCpltCallback+0x42>
            break;
 8001538:	bf00      	nop
 800153a:	e000      	b.n	800153e <HAL_UART_TxCpltCallback+0x42>
            break;
 800153c:	bf00      	nop
    }

    return;
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40008000 	.word	0x40008000
 800154c:	40013800 	.word	0x40013800
 8001550:	20000478 	.word	0x20000478
 8001554:	2000046c 	.word	0x2000046c

08001558 <LL_PWR_SMPS_Enable>:
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <LL_PWR_SMPS_Enable+0x1c>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	4a04      	ldr	r2, [pc, #16]	; (8001574 <LL_PWR_SMPS_Enable+0x1c>)
 8001562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001566:	61d3      	str	r3, [r2, #28]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	58000400 	.word	0x58000400

08001578 <LL_PWR_SMPS_SetStartupCurrent>:
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001588:	4904      	ldr	r1, [pc, #16]	; (800159c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4313      	orrs	r3, r2
 800158e:	61cb      	str	r3, [r1, #28]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	58000400 	.word	0x58000400

080015a0 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f023 020f 	bic.w	r2, r3, #15
 80015c2:	4913      	ldr	r1, [pc, #76]	; (8001610 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61cb      	str	r3, [r1, #28]
}
 80015ca:	e019      	b.n	8001600 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3b06      	subs	r3, #6
 80015d0:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4413      	add	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	da02      	bge.n	80015e6 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	e004      	b.n	80015f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	dd01      	ble.n	80015f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80015ec:	230f      	movs	r3, #15
 80015ee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	f023 020f 	bic.w	r2, r3, #15
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	4905      	ldr	r1, [pc, #20]	; (8001610 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61cb      	str	r3, [r1, #28]
}
 8001600:	bf00      	nop
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	1fff7558 	.word	0x1fff7558
 8001610:	58000400 	.word	0x58000400

08001614 <LL_EXTI_DisableIT_0_31>:
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <LL_EXTI_DisableIT_0_31+0x28>)
 800161e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	43db      	mvns	r3, r3
 8001626:	4905      	ldr	r1, [pc, #20]	; (800163c <LL_EXTI_DisableIT_0_31+0x28>)
 8001628:	4013      	ands	r3, r2
 800162a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	58000800 	.word	0x58000800

08001640 <LL_EXTI_DisableIT_32_63>:
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001648:	4b07      	ldr	r3, [pc, #28]	; (8001668 <LL_EXTI_DisableIT_32_63+0x28>)
 800164a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	43db      	mvns	r3, r3
 8001652:	4905      	ldr	r1, [pc, #20]	; (8001668 <LL_EXTI_DisableIT_32_63+0x28>)
 8001654:	4013      	ands	r3, r2
 8001656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	58000800 	.word	0x58000800

0800166c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001678:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800167a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800167e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001686:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001692:	4313      	orrs	r3, r2
 8001694:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	cafecafe 	.word	0xcafecafe

080016a8 <LL_RCC_LSE_SetDriveCapability>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b8:	f023 0218 	bic.w	r2, r3, #24
 80016bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <LL_AHB1_GRP1_EnableClock>:
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001702:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4313      	orrs	r3, r2
 800170c:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4013      	ands	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_AHB2_GRP1_EnableClock>:
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001744:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4013      	ands	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800174c:	68fb      	ldr	r3, [r7, #12]
}
 800174e:	bf00      	nop
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <LL_LPM_EnableSleep+0x1c>)
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <LL_LPM_EnableSleep+0x1c>)
 8001766:	f023 0304 	bic.w	r3, r3, #4
 800176a:	6113      	str	r3, [r2, #16]
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	22ff      	movs	r2, #255	; 0xff
 8001788:	625a      	str	r2, [r3, #36]	; 0x24
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	22ca      	movs	r2, #202	; 0xca
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2253      	movs	r2, #83	; 0x53
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f023 0207 	bic.w	r2, r3, #7
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0

	/**
	 * The OPTVERR flag is wrongly set at power on
	 * It shall be cleared before using any HAL_FLASH_xxx() api
	 */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017e0:	4b12      	ldr	r3, [pc, #72]	; (800182c <main+0x50>)
 80017e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017e6:	611a      	str	r2, [r3, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80017e8:	f001 ff20 	bl	800362c <HAL_Init>

	/* USER CODE BEGIN Init */
	Reset_Device();
 80017ec:	f000 fa54 	bl	8001c98 <Reset_Device>
	Config_HSE();
 80017f0:	f000 fa3e 	bl	8001c70 <Config_HSE>
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80017f4:	f000 f81c 	bl	8001830 <SystemClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 80017f8:	f000 f8a2 	bl	8001940 <MX_IPCC_Init>

	/* USER CODE BEGIN SysInit */
	Init_Exti(); /**< Configure the system Power Mode */
 80017fc:	f000 fa53 	bl	8001ca6 <Init_Exti>
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001800:	f000 f990 	bl	8001b24 <MX_GPIO_Init>
	MX_DMA_Init();
 8001804:	f000 f970 	bl	8001ae8 <MX_DMA_Init>
	MX_RF_Init();
 8001808:	f000 f8ae 	bl	8001968 <MX_RF_Init>
	MX_RTC_Init();
 800180c:	f000 f8b4 	bl	8001978 <MX_RTC_Init>
	MX_SPI1_Init();
 8001810:	f000 f92c 	bl	8001a6c <MX_SPI1_Init>

	/* -1- Initialize LEDs */
//	BSP_LED_Init(LED_GREEN_BR);
//	BSP_LED_Init(LED_YELLOW_BR);
//	BSP_LED_Init(LED_RED_BR);
	BSP_LED_Init(LED3);
 8001814:	2002      	movs	r0, #2
 8001816:	f001 fd89 	bl	800332c <BSP_LED_Init>

	/* Configure the PVD */
	PVD_Config();
 800181a:	f000 f9e1 	bl	8001be0 <PVD_Config>

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	APPE_Init();
 800181e:	f7fe fe8b 	bl	8000538 <APPE_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001822:	f04f 30ff 	mov.w	r0, #4294967295
 8001826:	f007 fd27 	bl	8009278 <UTIL_SEQ_Run>
 800182a:	e7fa      	b.n	8001822 <main+0x46>
 800182c:	58004000 	.word	0x58004000

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ae      	sub	sp, #184	; 0xb8
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800183a:	2248      	movs	r2, #72	; 0x48
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f007 ff6e 	bl	8009720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	2250      	movs	r2, #80	; 0x50
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f007 ff5e 	bl	8009720 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001864:	f002 fd9c 	bl	80043a0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff ff1d 	bl	80016a8 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186e:	4b33      	ldr	r3, [pc, #204]	; (800193c <SystemClock_Config+0x10c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001876:	4a31      	ldr	r2, [pc, #196]	; (800193c <SystemClock_Config+0x10c>)
 8001878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b2f      	ldr	r3, [pc, #188]	; (800193c <SystemClock_Config+0x10c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800188a:	2307      	movs	r3, #7
 800188c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800188e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001892:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001894:	2301      	movs	r3, #1
 8001896:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800189e:	2340      	movs	r3, #64	; 0x40
 80018a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f9ca 	bl	8004c48 <HAL_RCC_OscConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80018ba:	f000 fa25 	bl	8001d08 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80018be:	236f      	movs	r3, #111	; 0x6f
 80018c0:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80018c2:	2302      	movs	r3, #2
 80018c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018de:	2101      	movs	r1, #1
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fd3d 	bl	8005360 <HAL_RCC_ClockConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018ec:	f000 fa0c 	bl	8001d08 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80018f0:	f643 0303 	movw	r3, #14339	; 0x3803
 80018f4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001902:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001908:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800190a:	2302      	movs	r3, #2
 800190c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800190e:	2310      	movs	r3, #16
 8001910:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4618      	mov	r0, r3
 8001916:	f004 f938 	bl	8005b8a <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001920:	f000 f9f2 	bl	8001d08 <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fe27 	bl	8001578 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 800192a:	2004      	movs	r0, #4
 800192c:	f7ff fe38 	bl	80015a0 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001930:	f7ff fe12 	bl	8001558 <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 8001934:	bf00      	nop
 8001936:	37b8      	adds	r7, #184	; 0xb8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58000400 	.word	0x58000400

08001940 <MX_IPCC_Init>:
/**
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_Init 0 */
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */
  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_IPCC_Init+0x20>)
 8001946:	4a07      	ldr	r2, [pc, #28]	; (8001964 <MX_IPCC_Init+0x24>)
 8001948:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_IPCC_Init+0x20>)
 800194c:	f002 fc16 	bl	800417c <HAL_IPCC_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001956:	f000 f9d7 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */
  /* USER CODE END IPCC_Init 2 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000484 	.word	0x20000484
 8001964:	58000c00 	.word	0x58000c00

08001968 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */

  /* USER CODE BEGIN RF_Init 2 */
  /* USER CODE END RF_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]

  /* USER CODE BEGIN RTC_Init 1 */
  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001990:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <MX_RTC_Init+0xec>)
 8001992:	4a35      	ldr	r2, [pc, #212]	; (8001a68 <MX_RTC_Init+0xf0>)
 8001994:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001996:	4b33      	ldr	r3, [pc, #204]	; (8001a64 <MX_RTC_Init+0xec>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800199c:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <MX_RTC_Init+0xec>)
 800199e:	227f      	movs	r2, #127	; 0x7f
 80019a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80019a2:	4b30      	ldr	r3, [pc, #192]	; (8001a64 <MX_RTC_Init+0xec>)
 80019a4:	22ff      	movs	r2, #255	; 0xff
 80019a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019a8:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <MX_RTC_Init+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <MX_RTC_Init+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b4:	4b2b      	ldr	r3, [pc, #172]	; (8001a64 <MX_RTC_Init+0xec>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <MX_RTC_Init+0xec>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019c0:	4828      	ldr	r0, [pc, #160]	; (8001a64 <MX_RTC_Init+0xec>)
 80019c2:	f004 fb69 	bl	8006098 <HAL_RTC_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80019cc:	f000 f99c 	bl	8001d08 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
  /* Set Date and Time (if not already done before)*/
  	/* Read the Back Up Register 0 Data */
  	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2)
 80019d0:	2100      	movs	r1, #0
 80019d2:	4824      	ldr	r0, [pc, #144]	; (8001a64 <MX_RTC_Init+0xec>)
 80019d4:	f004 ff2f 	bl	8006836 <HAL_RTCEx_BKUPRead>
 80019d8:	4603      	mov	r3, r0
 80019da:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80019de:	4293      	cmp	r3, r2
 80019e0:	d02f      	beq.n	8001a42 <MX_RTC_Init+0xca>
  	{
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x19;
 80019e2:	2319      	movs	r3, #25
 80019e4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x27;
 80019e6:	2327      	movs	r3, #39	; 0x27
 80019e8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x20;
 80019ea:	2320      	movs	r3, #32
 80019ec:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2201      	movs	r2, #1
 80019fe:	4619      	mov	r1, r3
 8001a00:	4818      	ldr	r0, [pc, #96]	; (8001a64 <MX_RTC_Init+0xec>)
 8001a02:	f004 fc1d 	bl	8006240 <HAL_RTC_SetTime>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_RTC_Init+0x98>
    Error_Handler();
 8001a0c:	f000 f97c 	bl	8001d08 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001a10:	2301      	movs	r3, #1
 8001a12:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001a14:	2305      	movs	r3, #5
 8001a16:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x24;
 8001a18:	2324      	movs	r3, #36	; 0x24
 8001a1a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8001a1c:	2321      	movs	r3, #33	; 0x21
 8001a1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)   {
 8001a20:	463b      	mov	r3, r7
 8001a22:	2201      	movs	r2, #1
 8001a24:	4619      	mov	r1, r3
 8001a26:	480f      	ldr	r0, [pc, #60]	; (8001a64 <MX_RTC_Init+0xec>)
 8001a28:	f004 fd2a 	bl	8006480 <HAL_RTC_SetDate>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_RTC_Init+0xbe>
    Error_Handler();
 8001a32:	f000 f969 	bl	8001d08 <Error_Handler>
//  {
//    Error_Handler();
//  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Writes a data in a RTC Backup data Register0 */
  		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001a36:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4809      	ldr	r0, [pc, #36]	; (8001a64 <MX_RTC_Init+0xec>)
 8001a3e:	f004 fee2 	bl	8006806 <HAL_RTCEx_BKUPWrite>
  	}

  	/* Clear source Reset Flag */
  	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001a42:	f7ff fe47 	bl	80016d4 <LL_RCC_ClearResetFlags>
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001a46:	4808      	ldr	r0, [pc, #32]	; (8001a68 <MX_RTC_Init+0xf0>)
 8001a48:	f7ff fea5 	bl	8001796 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4806      	ldr	r0, [pc, #24]	; (8001a68 <MX_RTC_Init+0xf0>)
 8001a50:	f7ff feb1 	bl	80017b6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001a54:	4804      	ldr	r0, [pc, #16]	; (8001a68 <MX_RTC_Init+0xf0>)
 8001a56:	f7ff fe91 	bl	800177c <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000640 	.word	0x20000640
 8001a68:	40002800 	.word	0x40002800

08001a6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <MX_SPI1_Init+0x78>)
 8001a74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a8a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001a9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a9e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001aba:	2207      	movs	r2, #7
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_SPI1_Init+0x74>)
 8001acc:	f004 ff09 	bl	80068e2 <HAL_SPI_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001ad6:	f000 f917 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200006e8 	.word	0x200006e8
 8001ae4:	40013000 	.word	0x40013000

08001ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001aec:	2004      	movs	r0, #4
 8001aee:	f7ff fe02 	bl	80016f6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001af2:	2001      	movs	r0, #1
 8001af4:	f7ff fdff 	bl	80016f6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001af8:	2002      	movs	r0, #2
 8001afa:	f7ff fdfc 	bl	80016f6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	210f      	movs	r1, #15
 8001b02:	200e      	movs	r0, #14
 8001b04:	f001 ff91 	bl	8003a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001b08:	200e      	movs	r0, #14
 8001b0a:	f001 ffa8 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	210f      	movs	r1, #15
 8001b12:	203a      	movs	r0, #58	; 0x3a
 8001b14:	f001 ff89 	bl	8003a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001b18:	203a      	movs	r0, #58	; 0x3a
 8001b1a:	f001 ffa0 	bl	8003a5e <HAL_NVIC_EnableIRQ>

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b38:	2004      	movs	r0, #4
 8001b3a:	f7ff fdf5 	bl	8001728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff fdf2 	bl	8001728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b44:	2002      	movs	r0, #2
 8001b46:	f7ff fdef 	bl	8001728 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b4a:	2008      	movs	r0, #8
 8001b4c:	f7ff fdec 	bl	8001728 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001b50:	2200      	movs	r2, #0
 8001b52:	f247 0123 	movw	r1, #28707	; 0x7023
 8001b56:	481e      	ldr	r0, [pc, #120]	; (8001bd0 <MX_GPIO_Init+0xac>)
 8001b58:	f002 faa2 	bl	80040a0 <HAL_GPIO_WritePin>
                          |LED2_BR_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_SW1_Pin SW1_BR_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin|SW1_BR_Pin;
 8001b5c:	f241 0310 	movw	r3, #4112	; 0x1010
 8001b60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_GPIO_Init+0xb0>)
 8001b64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b66:	2301      	movs	r3, #1
 8001b68:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	481a      	ldr	r0, [pc, #104]	; (8001bd8 <MX_GPIO_Init+0xb4>)
 8001b70:	f002 f926 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED3_BR_Pin LED1_BR_Pin
                           LED2_BR_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001b74:	f247 0323 	movw	r3, #28707	; 0x7023
 8001b78:	607b      	str	r3, [r7, #4]
                          |LED2_BR_Pin|LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <MX_GPIO_Init+0xac>)
 8001b8c:	f002 f918 	bl	8003dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 8001b90:	2301      	movs	r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_GPIO_Init+0xb0>)
 8001b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480e      	ldr	r0, [pc, #56]	; (8001bdc <MX_GPIO_Init+0xb8>)
 8001ba2:	f002 f90d 	bl	8003dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2006      	movs	r0, #6
 8001bac:	f001 ff3d 	bl	8003a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bb0:	2006      	movs	r0, #6
 8001bb2:	f001 ff54 	bl	8003a5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2100      	movs	r1, #0
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f001 ff35 	bl	8003a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001bc0:	200a      	movs	r0, #10
 8001bc2:	f001 ff4c 	bl	8003a5e <HAL_NVIC_EnableIRQ>

}
 8001bc6:	bf00      	nop
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	48000400 	.word	0x48000400
 8001bd4:	10110000 	.word	0x10110000
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	48000c00 	.word	0x48000c00

08001be0 <PVD_Config>:
/**
  * @brief  Configures the PVD resources.
  * @param  None
  * @retval None
  */
static void PVD_Config(void) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	/*##-1- Enable Power Clock #################################################*/
	/* Note: On this STM32 series, Power Clock is enabled automatically */

	/*##-2- Configure the NVIC for PVD #########################################*/
	HAL_NVIC_SetPriority(PVD_PVM_IRQn, 1, 1);
 8001be4:	2201      	movs	r2, #1
 8001be6:	2101      	movs	r1, #1
 8001be8:	2001      	movs	r0, #1
 8001bea:	f001 ff1e 	bl	8003a2a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f001 ff35 	bl	8003a5e <HAL_NVIC_EnableIRQ>

	/* Configure the PVD Level to 5 and generate an interrupt on rising and falling
     edges(PVD detection level set to 2.8V */
	sConfigPVD.PVDLevel = PWR_PVDLEVEL_5; //2.8 V
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <PVD_Config+0x30>)
 8001bf6:	220a      	movs	r2, #10
 8001bf8:	601a      	str	r2, [r3, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING_FALLING;
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <PVD_Config+0x30>)
 8001bfc:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <PVD_Config+0x34>)
 8001bfe:	605a      	str	r2, [r3, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <PVD_Config+0x30>)
 8001c02:	f002 fbdd 	bl	80043c0 <HAL_PWR_ConfigPVD>

	/* Enable the PVD Output */
	HAL_PWR_EnablePVD();
 8001c06:	f002 fc1d 	bl	8004444 <HAL_PWR_EnablePVD>
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000047c 	.word	0x2000047c
 8001c14:	00010003 	.word	0x00010003

08001c18 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @param  none
  * @retval none
  */
void HAL_PWR_PVDCallback(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	flag = flag-1;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_PWR_PVDCallback+0x4c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_PWR_PVDCallback+0x4c>)
 8001c24:	6013      	str	r3, [r2, #0]
	HAL_PWR_DisablePVD(); //check to see if this is necessary
 8001c26:	f002 fc1d 	bl	8004464 <HAL_PWR_DisablePVD>

	if (flag == 1) {
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_PWR_PVDCallback+0x4c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d113      	bne.n	8001c5a <HAL_PWR_PVDCallback+0x42>
		HAL_NVIC_SetPriority(PVD_PVM_IRQn, 1, 1);
 8001c32:	2201      	movs	r2, #1
 8001c34:	2101      	movs	r1, #1
 8001c36:	2001      	movs	r0, #1
 8001c38:	f001 fef7 	bl	8003a2a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f001 ff0e 	bl	8003a5e <HAL_NVIC_EnableIRQ>
		sConfigPVD.PVDLevel = PWR_PVDLEVEL_4; //2.6 V
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_PWR_PVDCallback+0x50>)
 8001c44:	2208      	movs	r2, #8
 8001c46:	601a      	str	r2, [r3, #0]
		sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING_FALLING;
 8001c48:	4b07      	ldr	r3, [pc, #28]	; (8001c68 <HAL_PWR_PVDCallback+0x50>)
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_PWR_PVDCallback+0x54>)
 8001c4c:	605a      	str	r2, [r3, #4]
		HAL_PWR_ConfigPVD(&sConfigPVD);
 8001c4e:	4806      	ldr	r0, [pc, #24]	; (8001c68 <HAL_PWR_PVDCallback+0x50>)
 8001c50:	f002 fbb6 	bl	80043c0 <HAL_PWR_ConfigPVD>
		HAL_PWR_EnablePVD();
 8001c54:	f002 fbf6 	bl	8004444 <HAL_PWR_EnablePVD>
		//BSP_LED_Toggle(LED3);
	} else if (flag == 0) {
		//BSP_LED_Off(LED3);
	}
}
 8001c58:	e001      	b.n	8001c5e <HAL_PWR_PVDCallback+0x46>
	} else if (flag == 0) {
 8001c5a:	4b02      	ldr	r3, [pc, #8]	; (8001c64 <HAL_PWR_PVDCallback+0x4c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008
 8001c68:	2000047c 	.word	0x2000047c
 8001c6c:	00010003 	.word	0x00010003

08001c70 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f006 fbbc 	bl	80083f4 <OTP_Read>
 8001c7c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	799b      	ldrb	r3, [r3, #6]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fcef 	bl	800166c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
}
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <Reset_Device>:

static void Reset_Device( void )
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
	Reset_BackupDomain();

	Reset_IPCC();
#endif

	return;
 8001c9c:	bf00      	nop
}
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <Init_Exti>:
//
//	return;
//}

static void Init_Exti( void )
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001caa:	f04f 30ff 	mov.w	r0, #4294967295
 8001cae:	f7ff fcb1 	bl	8001614 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001cb2:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001cb6:	f7ff fcc3 	bl	8001640 <LL_EXTI_DisableIT_32_63>

  return;
 8001cba:	bf00      	nop
}
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc6:	f001 fd1f 	bl	8003708 <HAL_GetTick>
 8001cca:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)   {
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd6:	d00a      	beq.n	8001cee <HAL_Delay+0x30>
    wait += HAL_GetTickFreq();
 8001cd8:	f001 fd2e 	bl	8003738 <HAL_GetTickFreq>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)   {
 8001ce6:	e002      	b.n	8001cee <HAL_Delay+0x30>
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ce8:	f7ff fd38 	bl	800175c <LL_LPM_EnableSleep>

    /**
     * This option is used to ensure that store operations are completed
     */

    __WFI( );
 8001cec:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)   {
 8001cee:	f001 fd0b 	bl	8003708 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d8f4      	bhi.n	8001ce8 <HAL_Delay+0x2a>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <LL_PWR_SetPowerMode>:
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <LL_PWR_SetPowerMode+0x24>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 0207 	bic.w	r2, r3, #7
 8001d28:	4904      	ldr	r1, [pc, #16]	; (8001d3c <LL_PWR_SetPowerMode+0x24>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	600b      	str	r3, [r1, #0]
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	58000400 	.word	0x58000400

08001d40 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001d44:	4b03      	ldr	r3, [pc, #12]	; (8001d54 <LL_PWR_ClearFlag_WU+0x14>)
 8001d46:	221f      	movs	r2, #31
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	58000400 	.word	0x58000400

08001d58 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6a:	d101      	bne.n	8001d70 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	58000400 	.word	0x58000400

08001d80 <LL_RCC_HSE_Enable>:
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_HSE_IsReady>:
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001db0:	d101      	bne.n	8001db6 <LL_RCC_HSE_IsReady+0x18>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_RCC_HSE_IsReady+0x1a>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_HSI_Enable>:
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_RCC_HSI_IsReady>:
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df2:	d101      	bne.n	8001df8 <LL_RCC_HSI_IsReady+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_RCC_HSI_IsReady+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_RCC_SetSysClkSource>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f023 0203 	bic.w	r2, r3, #3
 8001e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_RCC_GetSysClkSource>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <LL_RCC_SetSMPSClockSource>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f023 0203 	bic.w	r2, r3, #3
 8001e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <LL_LPM_EnableSleep>:
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <LL_LPM_EnableSleep+0x1c>)
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <LL_LPM_EnableSleep+0x1c>)
 8001e76:	f023 0304 	bic.w	r3, r3, #4
 8001e7a:	6113      	str	r3, [r2, #16]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <LL_LPM_EnableDeepSleep+0x1c>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <LL_LPM_EnableDeepSleep+0x1c>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6113      	str	r3, [r2, #16]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	3220      	adds	r2, #32
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <LL_HSEM_1StepLock+0x2c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d001      	beq.n	8001eca <LL_HSEM_1StepLock+0x1e>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <LL_HSEM_1StepLock+0x20>
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	80000400 	.word	0x80000400

08001edc <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	af00      	add	r7, sp, #0

  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001f06:	f001 fc23 	bl	8003750 <HAL_SuspendTick>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU( );
 8001f0a:	f7ff ff19 	bl	8001d40 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 8001f0e:	2003      	movs	r0, #3
 8001f10:	f7ff ff02 	bl	8001d18 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001f14:	f7ff ffba 	bl	8001e8c <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI( );
 8001f18:	bf30      	wfi
/* USER CODE END PWR_EnterOffMode */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

  HAL_ResumeTick();
 8001f22:	f001 fc25 	bl	8003770 <HAL_ResumeTick>

/* USER CODE END PWR_ExitOffMode */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode ( this will abort the Stop Mode entry ).
   */
  HAL_SuspendTick();
 8001f30:	f001 fc0e 	bl	8003750 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001f34:	bf00      	nop
 8001f36:	2103      	movs	r1, #3
 8001f38:	4814      	ldr	r0, [pc, #80]	; (8001f8c <PWR_EnterStopMode+0x60>)
 8001f3a:	f7ff ffb7 	bl	8001eac <LL_HSEM_1StepLock>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f8      	bne.n	8001f36 <PWR_EnterStopMode+0xa>

  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 8001f44:	2104      	movs	r1, #4
 8001f46:	4811      	ldr	r0, [pc, #68]	; (8001f8c <PWR_EnterStopMode+0x60>)
 8001f48:	f7ff ffb0 	bl	8001eac <LL_HSEM_1StepLock>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <PWR_EnterStopMode+0x40>
  {
    if( LL_PWR_IsActiveFlag_C2DS( ) )
 8001f52:	f7ff ff01 	bl	8001d58 <LL_PWR_IsActiveFlag_C2DS>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d009      	beq.n	8001f70 <PWR_EnterStopMode+0x44>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	2104      	movs	r1, #4
 8001f60:	480a      	ldr	r0, [pc, #40]	; (8001f8c <PWR_EnterStopMode+0x60>)
 8001f62:	f7ff ffbb 	bl	8001edc <LL_HSEM_ReleaseLock>

      /**
       * The switch on HSI before entering Stop Mode is required 
       */
      Switch_On_HSI( );
 8001f66:	f000 f852 	bl	800200e <Switch_On_HSI>
 8001f6a:	e001      	b.n	8001f70 <PWR_EnterStopMode+0x44>
  else
  {
    /**
     * The switch on HSI before entering Stop Mode is required 
     */
    Switch_On_HSI( );
 8001f6c:	f000 f84f 	bl	800200e <Switch_On_HSI>
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001f70:	2200      	movs	r2, #0
 8001f72:	2103      	movs	r1, #3
 8001f74:	4805      	ldr	r0, [pc, #20]	; (8001f8c <PWR_EnterStopMode+0x60>)
 8001f76:	f7ff ffb1 	bl	8001edc <LL_HSEM_ReleaseLock>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode( LL_PWR_MODE_STOP2 );
 8001f7a:	2002      	movs	r0, #2
 8001f7c:	f7ff fecc 	bl	8001d18 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001f80:	f7ff ff84 	bl	8001e8c <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 8001f84:	bf30      	wfi
/* USER CODE END PWR_EnterStopMode */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	58001400 	.word	0x58001400

08001f90 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8001f94:	2200      	movs	r2, #0
 8001f96:	2104      	movs	r1, #4
 8001f98:	4814      	ldr	r0, [pc, #80]	; (8001fec <PWR_ExitStopMode+0x5c>)
 8001f9a:	f7ff ff9f 	bl	8001edc <LL_HSEM_ReleaseLock>

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8001f9e:	bf00      	nop
 8001fa0:	2103      	movs	r1, #3
 8001fa2:	4812      	ldr	r0, [pc, #72]	; (8001fec <PWR_ExitStopMode+0x5c>)
 8001fa4:	f7ff ff82 	bl	8001eac <LL_HSEM_1StepLock>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f8      	bne.n	8001fa0 <PWR_ExitStopMode+0x10>

  if(LL_RCC_GetSysClkSource( ) == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001fae:	f7ff ff3d 	bl	8001e2c <LL_RCC_GetSysClkSource>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d110      	bne.n	8001fda <PWR_ExitStopMode+0x4a>
  {
    LL_RCC_HSE_Enable( );
 8001fb8:	f7ff fee2 	bl	8001d80 <LL_RCC_HSE_Enable>
    while(!LL_RCC_HSE_IsReady( ));
 8001fbc:	bf00      	nop
 8001fbe:	f7ff feee 	bl	8001d9e <LL_RCC_HSE_IsReady>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0fa      	beq.n	8001fbe <PWR_ExitStopMode+0x2e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7ff ff1b 	bl	8001e04 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001fce:	bf00      	nop
 8001fd0:	f7ff ff2c 	bl	8001e2c <LL_RCC_GetSysClkSource>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b08      	cmp	r3, #8
 8001fd8:	d1fa      	bne.n	8001fd0 <PWR_ExitStopMode+0x40>
     * there is nothing to do here
     */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2103      	movs	r1, #3
 8001fde:	4803      	ldr	r0, [pc, #12]	; (8001fec <PWR_ExitStopMode+0x5c>)
 8001fe0:	f7ff ff7c 	bl	8001edc <LL_HSEM_ReleaseLock>

  HAL_ResumeTick();
 8001fe4:	f001 fbc4 	bl	8003770 <HAL_ResumeTick>

/* USER CODE END PWR_ExitStopMode */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	58001400 	.word	0x58001400

08001ff0 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

  HAL_SuspendTick();
 8001ff4:	f001 fbac 	bl	8003750 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ff8:	f7ff ff38 	bl	8001e6c <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI( );
 8001ffc:	bf30      	wfi
/* USER CODE END PWR_EnterSleepMode */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}

08002002 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

  HAL_ResumeTick();
 8002006:	f001 fbb3 	bl	8003770 <HAL_ResumeTick>

/* USER CODE END PWR_ExitSleepMode */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}

0800200e <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8002012:	f7ff fed6 	bl	8001dc2 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 8002016:	bf00      	nop
 8002018:	f7ff fee2 	bl	8001de0 <LL_RCC_HSI_IsReady>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0fa      	beq.n	8002018 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff feee 	bl	8001e04 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff ff0b 	bl	8001e44 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 800202e:	bf00      	nop
 8002030:	f7ff fefc 	bl	8001e2c <LL_RCC_GetSysClkSource>
 8002034:	4603      	mov	r3, r0
 8002036:	2b04      	cmp	r3, #4
 8002038:	d1fa      	bne.n	8002030 <Switch_On_HSI+0x22>
}
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}

08002040 <LL_RCC_SetRTCClockSource>:
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_RCC_EnableRTC>:
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_RCC_DisableRTC>:
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800209e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_AHB2_GRP1_EnableClock>:
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020d4:	68fb      	ldr	r3, [r7, #12]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <LL_AHB3_GRP1_EnableClock>:
{
 80020e2:	b480      	push	{r7}
 80020e4:	b085      	sub	sp, #20
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80020fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4013      	ands	r3, r2
 8002104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_APB1_GRP1_EnableClock>:
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800211c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002120:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4313      	orrs	r3, r2
 800212a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800212c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4013      	ands	r3, r2
 8002136:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002138:	68fb      	ldr	r3, [r7, #12]
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_APB1_GRP1_DisableClock>:
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	43db      	mvns	r3, r3
 8002158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215c:	4013      	ands	r3, r2
 800215e:	658b      	str	r3, [r1, #88]	; 0x58
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_APB2_GRP1_EnableClock>:
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800217a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4313      	orrs	r3, r2
 8002182:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002190:	68fb      	ldr	r3, [r7, #12]
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]

  __HAL_RCC_HSEM_CLK_ENABLE();
 80021ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80021b0:	f7ff ff97 	bl	80020e2 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 80021b4:	2200      	movs	r2, #0
 80021b6:	2100      	movs	r1, #0
 80021b8:	202b      	movs	r0, #43	; 0x2b
 80021ba:	f001 fc36 	bl	8003a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 80021be:	202b      	movs	r0, #43	; 0x2b
 80021c0:	f001 fc4d 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	2100      	movs	r1, #0
 80021c8:	202e      	movs	r0, #46	; 0x2e
 80021ca:	f001 fc2e 	bl	8003a2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80021ce:	202e      	movs	r0, #46	; 0x2e
 80021d0:	f001 fc45 	bl	8003a5e <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80021d4:	2300      	movs	r3, #0
 80021d6:	603b      	str	r3, [r7, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80021d8:	2300      	movs	r3, #0
 80021da:	607b      	str	r3, [r7, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80021dc:	463b      	mov	r3, r7
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 f8ee 	bl	80043c0 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80021e4:	f002 f92e 	bl	8004444 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021e8:	bf00      	nop
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	; (8002234 <HAL_IPCC_MspInit+0x44>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d113      	bne.n	800222a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002202:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002206:	f7ff ff6c 	bl	80020e2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	202c      	movs	r0, #44	; 0x2c
 8002210:	f001 fc0b 	bl	8003a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002214:	202c      	movs	r0, #44	; 0x2c
 8002216:	f001 fc22 	bl	8003a5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	202d      	movs	r0, #45	; 0x2d
 8002220:	f001 fc03 	bl	8003a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002224:	202d      	movs	r0, #45	; 0x2d
 8002226:	f001 fc1a 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	58000c00 	.word	0x58000c00

08002238 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_RTC_MspInit+0x3c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d110      	bne.n	800226c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 800224a:	f002 f8a9 	bl	80043a0 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800224e:	f002 f8a7 	bl	80043a0 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002252:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002256:	f7ff fef3 	bl	8002040 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800225a:	f7ff ff07 	bl	800206c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800225e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002262:	f7ff ff57 	bl	8002114 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f004 fafb 	bl	8006862 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40002800 	.word	0x40002800

08002278 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_RTC_MspDeInit+0x28>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d105      	bne.n	8002296 <HAL_RTC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800228a:	f7ff ff00 	bl	800208e <LL_RCC_DisableRTC>
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 800228e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002292:	f7ff ff58 	bl	8002146 <LL_APB1_GRP1_DisableClock>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	40002800 	.word	0x40002800

080022a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a0f      	ldr	r2, [pc, #60]	; (8002300 <HAL_SPI_MspInit+0x5c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d117      	bne.n	80022f6 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80022ca:	f7ff ff4f 	bl	800216c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ce:	2001      	movs	r0, #1
 80022d0:	f7ff feee 	bl	80020b0 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022d4:	23f0      	movs	r3, #240	; 0xf0
 80022d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022e4:	2305      	movs	r3, #5
 80022e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	4619      	mov	r1, r3
 80022ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022f2:	f001 fd65 	bl	8003dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	40013000 	.word	0x40013000

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002358:	f001 f9c2 	bl	80036e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002364:	2001      	movs	r0, #1
 8002366:	f001 fecd 	bl	8004104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}

0800236e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002372:	2010      	movs	r0, #16
 8002374:	f001 fec6 	bl	8004104 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	bd80      	pop	{r7, pc}

0800237c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002380:	4802      	ldr	r0, [pc, #8]	; (800238c <DMA1_Channel4_IRQHandler+0x10>)
 8002382:	f001 fc6e 	bl	8003c62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000688 	.word	0x20000688

08002390 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002394:	4802      	ldr	r0, [pc, #8]	; (80023a0 <USART1_IRQHandler+0x10>)
 8002396:	f004 fb47 	bl	8006a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200005b0 	.word	0x200005b0

080023a4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80023a8:	4802      	ldr	r0, [pc, #8]	; (80023b4 <LPUART1_IRQHandler+0x10>)
 80023aa:	f004 fb3d 	bl	8006a28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200004c0 	.word	0x200004c0

080023b8 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80023ca:	f000 fe0b 	bl	8002fe4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80023d6:	f000 fe3d 	bl	8003054 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}

080023de <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80023e2:	f001 fea7 	bl	8004134 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <DMA2_Channel4_IRQHandler+0x10>)
 80023f2:	f001 fc36 	bl	8003c62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000550 	.word	0x20000550

08002400 <PVD_PVM_IRQHandler>:
  * @brief  This function handles the PVD Output interrupt request.
  * @param  None
  * @retval None
  */
void PVD_PVM_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  HAL_PWREx_PVD_PVM_IRQHandler();
 8002404:	f002 f88c 	bl	8004520 <HAL_PWREx_PVD_PVM_IRQHandler>
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}

0800240c <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002410:	f7fe fd1e 	bl	8000e50 <HW_TS_RTC_Wakeup_Handler>
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <_sbrk+0x5c>)
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <_sbrk+0x60>)
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <_sbrk+0x64>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <_sbrk+0x64>)
 8002436:	4a12      	ldr	r2, [pc, #72]	; (8002480 <_sbrk+0x68>)
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	693a      	ldr	r2, [r7, #16]
 8002444:	429a      	cmp	r2, r3
 8002446:	d207      	bcs.n	8002458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002448:	f007 f932 	bl	80096b0 <__errno>
 800244c:	4603      	mov	r3, r0
 800244e:	220c      	movs	r2, #12
 8002450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
 8002456:	e009      	b.n	800246c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <_sbrk+0x64>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800245e:	4b07      	ldr	r3, [pc, #28]	; (800247c <_sbrk+0x64>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	4a05      	ldr	r2, [pc, #20]	; (800247c <_sbrk+0x64>)
 8002468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800246a:	68fb      	ldr	r3, [r7, #12]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20030000 	.word	0x20030000
 8002478:	00001000 	.word	0x00001000
 800247c:	200002d4 	.word	0x200002d4
 8002480:	20000768 	.word	0x20000768

08002484 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <LL_FLASH_GetUDN+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	1fff7580 	.word	0x1fff7580

0800249c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <LL_FLASH_GetDeviceID+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	1fff7584 	.word	0x1fff7584

080024b4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <LL_FLASH_GetSTCompanyID+0x14>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0a1b      	lsrs	r3, r3, #8
}
 80024be:	4618      	mov	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	1fff7584 	.word	0x1fff7584

080024cc <APP_BLE_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80024cc:	b5b0      	push	{r4, r5, r7, lr}
 80024ce:	b08c      	sub	sp, #48	; 0x30
 80024d0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */
/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80024d2:	4b2f      	ldr	r3, [pc, #188]	; (8002590 <APP_BLE_Init+0xc4>)
 80024d4:	463c      	mov	r4, r7
 80024d6:	461d      	mov	r5, r3
 80024d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80024e8:	f000 f964 	bl	80027b4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80024ec:	2101      	movs	r1, #1
 80024ee:	2002      	movs	r0, #2
 80024f0:	f006 fe5c 	bl	80091ac <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80024f4:	4a27      	ldr	r2, [pc, #156]	; (8002594 <APP_BLE_Init+0xc8>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	2008      	movs	r0, #8
 80024fa:	f006 ffa1 	bl	8009440 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80024fe:	463b      	mov	r3, r7
 8002500:	4618      	mov	r0, r3
 8002502:	f006 f8c5 	bl	8008690 <SHCI_C2_BLE_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 800250c:	f7ff fbfc 	bl	8001d08 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002510:	f000 f966 	bl	80027e0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002514:	f006 fb4c 	bl	8008bb0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002518:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <APP_BLE_Init+0xcc>)
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <APP_BLE_Init+0xcc>)
 8002522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002526:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8002528:	4a1c      	ldr	r2, [pc, #112]	; (800259c <APP_BLE_Init+0xd0>)
 800252a:	2100      	movs	r1, #0
 800252c:	2001      	movs	r0, #1
 800252e:	f006 ff87 	bl	8009440 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8002532:	4a1b      	ldr	r2, [pc, #108]	; (80025a0 <APP_BLE_Init+0xd4>)
 8002534:	2100      	movs	r1, #0
 8002536:	2004      	movs	r0, #4
 8002538:	f006 ff82 	bl	8009440 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 800253c:	2006      	movs	r0, #6
 800253e:	f005 fbe2 	bl	8007d06 <aci_hal_set_radio_activity_mask>
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 8002542:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <APP_BLE_Init+0xd8>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <APP_BLE_Init+0xdc>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800254e:	f000 fbed 	bl	8002d2c <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8002552:	4b16      	ldr	r3, [pc, #88]	; (80025ac <APP_BLE_Init+0xe0>)
 8002554:	2200      	movs	r2, #0
 8002556:	4916      	ldr	r1, [pc, #88]	; (80025b0 <APP_BLE_Init+0xe4>)
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe fe33 	bl	80011c4 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <APP_BLE_Init+0xe8>)
 8002560:	2200      	movs	r2, #0
 8002562:	4915      	ldr	r1, [pc, #84]	; (80025b8 <APP_BLE_Init+0xec>)
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe fe2d 	bl	80011c4 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <APP_BLE_Init+0xcc>)
 800256c:	2200      	movs	r2, #0
 800256e:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <APP_BLE_Init+0xcc>)
 8002572:	2200      	movs	r2, #0
 8002574:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <APP_BLE_Init+0xf0>)
 8002578:	2280      	movs	r2, #128	; 0x80
 800257a:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <APP_BLE_Init+0xf4>)
 800257e:	22a0      	movs	r2, #160	; 0xa0
 8002580:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_LP_ADV);
 8002582:	2002      	movs	r0, #2
 8002584:	f000 f9ee 	bl	8002964 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */
/* USER CODE END APP_BLE_Init_2 */
  return;
 8002588:	bf00      	nop
}
 800258a:	3730      	adds	r7, #48	; 0x30
 800258c:	46bd      	mov	sp, r7
 800258e:	bdb0      	pop	{r4, r5, r7, pc}
 8002590:	0800ad68 	.word	0x0800ad68
 8002594:	080080c1 	.word	0x080080c1
 8002598:	200001c4 	.word	0x200001c4
 800259c:	08002add 	.word	0x08002add
 80025a0:	08002be1 	.word	0x08002be1
 80025a4:	20000751 	.word	0x20000751
 80025a8:	20000750 	.word	0x20000750
 80025ac:	08002b15 	.word	0x08002b15
 80025b0:	20000245 	.word	0x20000245
 80025b4:	08002b25 	.word	0x08002b25
 80025b8:	20000246 	.word	0x20000246
 80025bc:	20000248 	.word	0x20000248
 80025c0:	2000024a 	.word	0x2000024a

080025c4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08c      	sub	sp, #48	; 0x30
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80025cc:	2342      	movs	r3, #66	; 0x42
 80025ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	3301      	adds	r3, #1
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */
  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2bff      	cmp	r3, #255	; 0xff
 80025de:	d078      	beq.n	80026d2 <SVCCTL_App_Notification+0x10e>
 80025e0:	2bff      	cmp	r3, #255	; 0xff
 80025e2:	f300 80cd 	bgt.w	8002780 <SVCCTL_App_Notification+0x1bc>
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d002      	beq.n	80025f0 <SVCCTL_App_Notification+0x2c>
 80025ea:	2b3e      	cmp	r3, #62	; 0x3e
 80025ec:	d020      	beq.n	8002630 <SVCCTL_App_Notification+0x6c>
      /* USER CODE END EVENT_PCKT */

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/
      /* USER CODE END ECODE_DEFAULT*/
      break;
 80025ee:	e0c7      	b.n	8002780 <SVCCTL_App_Notification+0x1bc>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	3302      	adds	r3, #2
 80025f4:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	4b64      	ldr	r3, [pc, #400]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 8002600:	8adb      	ldrh	r3, [r3, #22]
 8002602:	429a      	cmp	r2, r3
 8002604:	d106      	bne.n	8002614 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8002606:	4b62      	ldr	r3, [pc, #392]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 8002608:	2200      	movs	r2, #0
 800260a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800260c:	4b60      	ldr	r3, [pc, #384]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_LP_ADV);
 8002614:	2002      	movs	r0, #2
 8002616:	f000 f9a5 	bl	8002964 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800261a:	4b5e      	ldr	r3, [pc, #376]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002620:	4b5b      	ldr	r3, [pc, #364]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 8002622:	8ada      	ldrh	r2, [r3, #22]
 8002624:	4b5b      	ldr	r3, [pc, #364]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 8002626:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8002628:	485a      	ldr	r0, [pc, #360]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 800262a:	f000 fb6b 	bl	8002d04 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800262e:	e0aa      	b.n	8002786 <SVCCTL_App_Notification+0x1c2>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	3302      	adds	r3, #2
 8002634:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b0c      	cmp	r3, #12
 800263c:	d005      	beq.n	800264a <SVCCTL_App_Notification+0x86>
 800263e:	2b0c      	cmp	r3, #12
 8002640:	dc45      	bgt.n	80026ce <SVCCTL_App_Notification+0x10a>
 8002642:	2b01      	cmp	r3, #1
 8002644:	d011      	beq.n	800266a <SVCCTL_App_Notification+0xa6>
 8002646:	2b03      	cmp	r3, #3
          break;
 8002648:	e041      	b.n	80026ce <SVCCTL_App_Notification+0x10a>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3301      	adds	r3, #1
 800264e:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8002650:	4b4f      	ldr	r3, [pc, #316]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 8002652:	8adb      	ldrh	r3, [r3, #22]
 8002654:	f107 020e 	add.w	r2, r7, #14
 8002658:	f107 010f 	add.w	r1, r7, #15
 800265c:	4618      	mov	r0, r3
 800265e:	f005 fbc0 	bl	8007de2 <hci_le_read_phy>
 8002662:	4603      	mov	r3, r0
 8002664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          break;
 8002668:	e032      	b.n	80026d0 <SVCCTL_App_Notification+0x10c>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002670:	4b47      	ldr	r3, [pc, #284]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 8002672:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fe1e 	bl	80012b8 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800267c:	4b44      	ldr	r3, [pc, #272]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 800267e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002682:	2b04      	cmp	r3, #4
 8002684:	d104      	bne.n	8002690 <SVCCTL_App_Notification+0xcc>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002686:	4b42      	ldr	r3, [pc, #264]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 8002688:	2206      	movs	r2, #6
 800268a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800268e:	e003      	b.n	8002698 <SVCCTL_App_Notification+0xd4>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8002690:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 8002692:	2205      	movs	r2, #5
 8002694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 80026a2:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80026a4:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 80026ac:	8ada      	ldrh	r2, [r3, #22]
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 80026b0:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80026b2:	4838      	ldr	r0, [pc, #224]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 80026b4:	f000 fb26 	bl	8002d04 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80026b8:	4b36      	ldr	r3, [pc, #216]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80026be:	4b34      	ldr	r3, [pc, #208]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 80026c0:	8ada      	ldrh	r2, [r3, #22]
 80026c2:	4b34      	ldr	r3, [pc, #208]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 80026c4:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80026c6:	4833      	ldr	r0, [pc, #204]	; (8002794 <SVCCTL_App_Notification+0x1d0>)
 80026c8:	f000 fb1c 	bl	8002d04 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80026cc:	e000      	b.n	80026d0 <SVCCTL_App_Notification+0x10c>
          break;
 80026ce:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80026d0:	e059      	b.n	8002786 <SVCCTL_App_Notification+0x1c2>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	3302      	adds	r3, #2
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	b29b      	uxth	r3, r3
 80026de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e2:	d03c      	beq.n	800275e <SVCCTL_App_Notification+0x19a>
 80026e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026e8:	dc4c      	bgt.n	8002784 <SVCCTL_App_Notification+0x1c0>
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d03b      	beq.n	8002766 <SVCCTL_App_Notification+0x1a2>
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	db48      	blt.n	8002784 <SVCCTL_App_Notification+0x1c0>
 80026f2:	f240 420a 	movw	r2, #1034	; 0x40a
 80026f6:	4293      	cmp	r3, r2
 80026f8:	dc44      	bgt.n	8002784 <SVCCTL_App_Notification+0x1c0>
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	db41      	blt.n	8002784 <SVCCTL_App_Notification+0x1c0>
 8002700:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002704:	2b0a      	cmp	r3, #10
 8002706:	d83d      	bhi.n	8002784 <SVCCTL_App_Notification+0x1c0>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <SVCCTL_App_Notification+0x14c>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	0800277d 	.word	0x0800277d
 8002714:	08002757 	.word	0x08002757
 8002718:	0800277d 	.word	0x0800277d
 800271c:	0800277d 	.word	0x0800277d
 8002720:	0800277d 	.word	0x0800277d
 8002724:	0800273d 	.word	0x0800273d
 8002728:	08002785 	.word	0x08002785
 800272c:	0800277d 	.word	0x0800277d
 8002730:	0800277d 	.word	0x0800277d
 8002734:	08002749 	.word	0x08002749
 8002738:	0800277d 	.word	0x0800277d
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 800273e:	8adb      	ldrh	r3, [r3, #22]
 8002740:	4618      	mov	r0, r3
 8002742:	f004 ff3a 	bl	80075ba <aci_gap_allow_rebond>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8002746:	e01a      	b.n	800277e <SVCCTL_App_Notification+0x1ba>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 800274a:	8adb      	ldrh	r3, [r3, #22]
 800274c:	2101      	movs	r1, #1
 800274e:	4618      	mov	r0, r3
 8002750:	f004 ff7d 	bl	800764e <aci_gap_numeric_comparison_value_confirm_yesno>
      break;
 8002754:	e013      	b.n	800277e <SVCCTL_App_Notification+0x1ba>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	3302      	adds	r3, #2
 800275a:	623b      	str	r3, [r7, #32]
           break;    
 800275c:	e00f      	b.n	800277e <SVCCTL_App_Notification+0x1ba>
          mutex = 1;
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <SVCCTL_App_Notification+0x1d4>)
 8002760:	2201      	movs	r2, #1
 8002762:	701a      	strb	r2, [r3, #0]
      break;
 8002764:	e00b      	b.n	800277e <SVCCTL_App_Notification+0x1ba>
          BSP_LED_On(LED_GREEN);
 8002766:	2001      	movs	r0, #1
 8002768:	f000 fe1a 	bl	80033a0 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <SVCCTL_App_Notification+0x1cc>)
 800276e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8002772:	210a      	movs	r1, #10
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fe2b 	bl	80013d0 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800277a:	e000      	b.n	800277e <SVCCTL_App_Notification+0x1ba>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800277c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800277e:	e001      	b.n	8002784 <SVCCTL_App_Notification+0x1c0>
      break;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <SVCCTL_App_Notification+0x1c2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8002784:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8002786:	2301      	movs	r3, #1
}
 8002788:	4618      	mov	r0, r3
 800278a:	3730      	adds	r7, #48	; 0x30
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	200001c4 	.word	0x200001c4
 8002794:	2000074c 	.word	0x2000074c
 8002798:	20000750 	.word	0x20000750

0800279c <APP_BLE_Key_Button2_Action>:
void APP_BLE_Key_Button1_Action(void) {
  P2PS_APP_SW1_Button_Action();
}

void APP_BLE_Key_Button2_Action(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 80027a0:	2100      	movs	r1, #0
 80027a2:	2010      	movs	r0, #16
 80027a4:	f006 fe6e 	bl	8009484 <UTIL_SEQ_SetTask>
	Adv_Request(APP_BLE_LP_ADV);
 80027a8:	2002      	movs	r0, #2
 80027aa:	f000 f8db 	bl	8002964 <Adv_Request>
	return;
 80027ae:	bf00      	nop
}
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <Ble_Tl_Init+0x20>)
 80027bc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <Ble_Tl_Init+0x24>)
 80027c0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80027c2:	463b      	mov	r3, r7
 80027c4:	4619      	mov	r1, r3
 80027c6:	4805      	ldr	r0, [pc, #20]	; (80027dc <Ble_Tl_Init+0x28>)
 80027c8:	f005 fc5e 	bl	8008088 <hci_init>

  return;
 80027cc:	bf00      	nop
}
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20030028 	.word	0x20030028
 80027d8:	08002c89 	.word	0x08002c89
 80027dc:	08002c51 	.word	0x08002c51

080027e0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80027e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e2:	b08f      	sub	sp, #60	; 0x3c
 80027e4:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80027e6:	2300      	movs	r3, #0
 80027e8:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80027ea:	f005 fad6 	bl	8007d9a <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80027ee:	f000 f931 	bl	8002a54 <BleGetBdAddress>
 80027f2:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	2106      	movs	r1, #6
 80027f8:	2000      	movs	r0, #0
 80027fa:	f005 f9c4 	bl	8007b86 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	795a      	ldrb	r2, [r3, #5]
 8002802:	4b52      	ldr	r3, [pc, #328]	; (800294c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002804:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	791a      	ldrb	r2, [r3, #4]
 800280a:	4b50      	ldr	r3, [pc, #320]	; (800294c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800280c:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	78da      	ldrb	r2, [r3, #3]
 8002812:	4b4e      	ldr	r3, [pc, #312]	; (800294c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002814:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	789a      	ldrb	r2, [r3, #2]
 800281a:	4b4c      	ldr	r3, [pc, #304]	; (800294c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800281c:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	785a      	ldrb	r2, [r3, #1]
 8002822:	4b4a      	ldr	r3, [pc, #296]	; (800294c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8002824:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	4b48      	ldr	r3, [pc, #288]	; (800294c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800282c:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800282e:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8002832:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8002834:	f7ff fe26 	bl	8002484 <LL_FLASH_GetUDN>
 8002838:	4603      	mov	r3, r0
 800283a:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800283c:	1d3b      	adds	r3, r7, #4
 800283e:	461a      	mov	r2, r3
 8002840:	2106      	movs	r1, #6
 8002842:	202e      	movs	r0, #46	; 0x2e
 8002844:	f005 f99f 	bl	8007b86 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002848:	4a41      	ldr	r2, [pc, #260]	; (8002950 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800284a:	2110      	movs	r1, #16
 800284c:	2018      	movs	r0, #24
 800284e:	f005 f99a 	bl	8007b86 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002852:	4a40      	ldr	r2, [pc, #256]	; (8002954 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8002854:	2110      	movs	r1, #16
 8002856:	2008      	movs	r0, #8
 8002858:	f005 f995 	bl	8007b86 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800285c:	2118      	movs	r1, #24
 800285e:	2001      	movs	r0, #1
 8002860:	f005 f9fa 	bl	8007c58 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8002864:	f004 ff4a 	bl	80076fc <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800286c:	7efb      	ldrb	r3, [r7, #27]
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8002874:	7efb      	ldrb	r3, [r7, #27]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d01e      	beq.n	80028b8 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "BREATHE";
 800287a:	4b37      	ldr	r3, [pc, #220]	; (8002958 <Ble_Hci_Gap_Gatt_Init+0x178>)
 800287c:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 800287e:	f107 0212 	add.w	r2, r7, #18
 8002882:	7ef8      	ldrb	r0, [r7, #27]
 8002884:	f107 030e 	add.w	r3, r7, #14
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	2207      	movs	r2, #7
 8002894:	2100      	movs	r1, #0
 8002896:	f004 fd85 	bl	80073a4 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800289a:	8a7c      	ldrh	r4, [r7, #18]
 800289c:	8a3d      	ldrh	r5, [r7, #16]
 800289e:	6978      	ldr	r0, [r7, #20]
 80028a0:	f7fd fc6e 	bl	8000180 <strlen>
 80028a4:	4603      	mov	r3, r0
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	4613      	mov	r3, r2
 80028ae:	2200      	movs	r2, #0
 80028b0:	4629      	mov	r1, r5
 80028b2:	4620      	mov	r0, r4
 80028b4:	f005 f8e0 	bl	8007a78 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80028b8:	8a78      	ldrh	r0, [r7, #18]
 80028ba:	89f9      	ldrh	r1, [r7, #14]
 80028bc:	463b      	mov	r3, r7
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2302      	movs	r3, #2
 80028c2:	2200      	movs	r2, #0
 80028c4:	f005 f8d8 	bl	8007a78 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80028c8:	2202      	movs	r2, #2
 80028ca:	2102      	movs	r1, #2
 80028cc:	2000      	movs	r0, #0
 80028ce:	f005 faf0 	bl	8007eb2 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80028d2:	4b22      	ldr	r3, [pc, #136]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80028d8:	4b20      	ldr	r3, [pc, #128]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 fc6f 	bl	80071c0 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80028ea:	2208      	movs	r2, #8
 80028ec:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80028f0:	2210      	movs	r2, #16
 80028f2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80028fc:	4a18      	ldr	r2, [pc, #96]	; (8002960 <Ble_Hci_Gap_Gatt_Init+0x180>)
 80028fe:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002902:	2201      	movs	r2, #1
 8002904:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002908:	789c      	ldrb	r4, [r3, #2]
 800290a:	4b14      	ldr	r3, [pc, #80]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800290c:	785d      	ldrb	r5, [r3, #1]
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002910:	791b      	ldrb	r3, [r3, #4]
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002914:	7952      	ldrb	r2, [r2, #5]
 8002916:	4911      	ldr	r1, [pc, #68]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002918:	78c9      	ldrb	r1, [r1, #3]
 800291a:	4810      	ldr	r0, [pc, #64]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800291c:	6880      	ldr	r0, [r0, #8]
 800291e:	2600      	movs	r6, #0
 8002920:	9604      	str	r6, [sp, #16]
 8002922:	9003      	str	r0, [sp, #12]
 8002924:	9102      	str	r1, [sp, #8]
 8002926:	9201      	str	r2, [sp, #4]
 8002928:	9300      	str	r3, [sp, #0]
 800292a:	2300      	movs	r3, #0
 800292c:	2201      	movs	r2, #1
 800292e:	4629      	mov	r1, r5
 8002930:	4620      	mov	r0, r4
 8002932:	f004 fc8f 	bl	8007254 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002936:	4b09      	ldr	r3, [pc, #36]	; (800295c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002938:	789b      	ldrb	r3, [r3, #2]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 800293e:	f004 fe18 	bl	8007572 <aci_gap_configure_whitelist>
   }
}
 8002942:	bf00      	nop
 8002944:	3724      	adds	r7, #36	; 0x24
 8002946:	46bd      	mov	sp, r7
 8002948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800294a:	bf00      	nop
 800294c:	20000018 	.word	0x20000018
 8002950:	0800af08 	.word	0x0800af08
 8002954:	0800af18 	.word	0x0800af18
 8002958:	0800ad98 	.word	0x0800ad98
 800295c:	200001c4 	.word	0x200001c4
 8002960:	0001b207 	.word	0x0001b207

08002964 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af08      	add	r7, sp, #32
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800296e:	2342      	movs	r3, #66	; 0x42
 8002970:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d106      	bne.n	8002986 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002978:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <Adv_Request+0xd4>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800297e:	4b2f      	ldr	r3, [pc, #188]	; (8002a3c <Adv_Request+0xd8>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	81bb      	strh	r3, [r7, #12]
 8002984:	e005      	b.n	8002992 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002986:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800298a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800298c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002990:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002992:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <Adv_Request+0xdc>)
 8002994:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fc8d 	bl	80012b8 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d10d      	bne.n	80029c0 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80029a4:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <Adv_Request+0xdc>)
 80029a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d004      	beq.n	80029b8 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <Adv_Request+0xdc>)
 80029b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d103      	bne.n	80029c0 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80029b8:	f004 fb00 	bl	8006fbc <aci_gap_set_non_discoverable>
 80029bc:	4603      	mov	r3, r0
 80029be:	72fb      	strb	r3, [r7, #11]
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80029c0:	4a1f      	ldr	r2, [pc, #124]	; (8002a40 <Adv_Request+0xdc>)
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80029c8:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <Adv_Request+0xdc>)
 80029ca:	7e1b      	ldrb	r3, [r3, #24]
 80029cc:	89ba      	ldrh	r2, [r7, #12]
 80029ce:	89f9      	ldrh	r1, [r7, #14]
 80029d0:	2000      	movs	r0, #0
 80029d2:	9006      	str	r0, [sp, #24]
 80029d4:	2000      	movs	r0, #0
 80029d6:	9005      	str	r0, [sp, #20]
 80029d8:	481a      	ldr	r0, [pc, #104]	; (8002a44 <Adv_Request+0xe0>)
 80029da:	9004      	str	r0, [sp, #16]
 80029dc:	9303      	str	r3, [sp, #12]
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <Adv_Request+0xe4>)
 80029e0:	9302      	str	r3, [sp, #8]
 80029e2:	2308      	movs	r3, #8
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	2300      	movs	r3, #0
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	2300      	movs	r3, #0
 80029ec:	2000      	movs	r0, #0
 80029ee:	f004 fb09 	bl	8007004 <aci_gap_set_discoverable>
 80029f2:	4603      	mov	r3, r0
 80029f4:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80029f6:	4915      	ldr	r1, [pc, #84]	; (8002a4c <Adv_Request+0xe8>)
 80029f8:	200e      	movs	r0, #14
 80029fa:	f004 fd5e 	bl	80074ba <aci_gap_update_adv_data>
 80029fe:	4603      	mov	r3, r0
 8002a00:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8002a02:	7afb      	ldrb	r3, [r7, #11]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d113      	bne.n	8002a30 <Adv_Request+0xcc>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <Adv_Request+0xdc>)
 8002a10:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002a14:	490e      	ldr	r1, [pc, #56]	; (8002a50 <Adv_Request+0xec>)
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe fcda 	bl	80013d0 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8002a1c:	e008      	b.n	8002a30 <Adv_Request+0xcc>
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, LP_ADV_TIMEOUT);
 8002a1e:	4b08      	ldr	r3, [pc, #32]	; (8002a40 <Adv_Request+0xdc>)
 8002a20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002a24:	f24f 0123 	movw	r1, #61475	; 0xf023
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fcd1 	bl	80013d0 <HW_TS_Start>
  return;
 8002a2e:	bf00      	nop
 8002a30:	bf00      	nop
}
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000248 	.word	0x20000248
 8002a3c:	2000024a 	.word	0x2000024a
 8002a40:	200001c4 	.word	0x200001c4
 8002a44:	200001dd 	.word	0x200001dd
 8002a48:	0800af28 	.word	0x0800af28
 8002a4c:	20000018 	.word	0x20000018
 8002a50:	0001e046 	.word	0x0001e046

08002a54 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002a5a:	f7ff fd13 	bl	8002484 <LL_FLASH_GetUDN>
 8002a5e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d023      	beq.n	8002ab0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002a68:	f7ff fd24 	bl	80024b4 <LL_FLASH_GetSTCompanyID>
 8002a6c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002a6e:	f7ff fd15 	bl	800249c <LL_FLASH_GetDeviceID>
 8002a72:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <BleGetBdAddress+0x80>)
 8002a7a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <BleGetBdAddress+0x80>)
 8002a84:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <BleGetBdAddress+0x80>)
 8002a8c:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <BleGetBdAddress+0x80>)
 8002a94:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <BleGetBdAddress+0x80>)
 8002a9e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	0c1b      	lsrs	r3, r3, #16
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <BleGetBdAddress+0x80>)
 8002aa8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <BleGetBdAddress+0x80>)
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e00b      	b.n	8002ac8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f005 fc9f 	bl	80083f4 <OTP_Read>
 8002ab6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	e001      	b.n	8002ac8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <BleGetBdAddress+0x84>)
 8002ac6:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8002ac8:	697b      	ldr	r3, [r7, #20]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200002d8 	.word	0x200002d8
 8002ad8:	0800af00 	.word	0x0800af00

08002adc <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 fc76 	bl	80033d4 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <Adv_Cancel+0x34>)
 8002aea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d00a      	beq.n	8002b08 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 8002af2:	2300      	movs	r3, #0
 8002af4:	71fb      	strb	r3, [r7, #7]
    result = aci_gap_set_non_discoverable();
 8002af6:	f004 fa61 	bl	8006fbc <aci_gap_set_non_discoverable>
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002afe:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <Adv_Cancel+0x34>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  }

/* USER CODE BEGIN Adv_Cancel_2 */
/* USER CODE END Adv_Cancel_2 */
  return;
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
}
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200001c4 	.word	0x200001c4

08002b14 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f006 fcb2 	bl	8009484 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8002b20:	bf00      	nop
}
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8002b28:	2001      	movs	r0, #1
 8002b2a:	f000 fc53 	bl	80033d4 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
	...

08002b34 <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) {
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d13f      	bne.n	8002bc6 <BLE_SVC_L2CAP_Conn_Update+0x92>
    mutex = 0;
 8002b46:	4b22      	ldr	r3, [pc, #136]	; (8002bd0 <BLE_SVC_L2CAP_Conn_Update+0x9c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	3301      	adds	r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	bfb8      	it	lt
 8002b5a:	425b      	neglt	r3, r3
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002b60:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b7c:	ee17 3a90 	vmov	r3, s15
 8002b80:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <BLE_SVC_L2CAP_Conn_Update+0xa0>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <BLE_SVC_L2CAP_Conn_Update+0xa4>)
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	ed93 7a00 	vldr	s14, [r3]
 8002b90:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002b94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9c:	ee17 3a90 	vmov	r3, s15
 8002ba0:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8002ba6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002baa:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <BLE_SVC_L2CAP_Conn_Update+0xa8>)
 8002bae:	8ad8      	ldrh	r0, [r3, #22]
 8002bb0:	8a7c      	ldrh	r4, [r7, #18]
 8002bb2:	8aba      	ldrh	r2, [r7, #20]
 8002bb4:	8af9      	ldrh	r1, [r7, #22]
 8002bb6:	8a3b      	ldrh	r3, [r7, #16]
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	4623      	mov	r3, r4
 8002bbc:	f005 f9e0 	bl	8007f80 <aci_l2cap_connection_parameter_update_req>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	73fb      	strb	r3, [r7, #15]
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
}
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd90      	pop	{r4, r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000750 	.word	0x20000750
 8002bd4:	20000751 	.word	0x20000751
 8002bd8:	20000010 	.word	0x20000010
 8002bdc:	200001c4 	.word	0x200001c4

08002be0 <Connection_Interval_Update_Req>:
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
static void Connection_Interval_Update_Req( void )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8002be4:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <Connection_Interval_Update_Req+0x28>)
 8002be6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d00a      	beq.n	8002c04 <Connection_Interval_Update_Req+0x24>
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <Connection_Interval_Update_Req+0x28>)
 8002bf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d005      	beq.n	8002c04 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002bf8:	4b03      	ldr	r3, [pc, #12]	; (8002c08 <Connection_Interval_Update_Req+0x28>)
 8002bfa:	8adb      	ldrh	r3, [r3, #22]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff99 	bl	8002b34 <BLE_SVC_L2CAP_Conn_Update>
  }
  return;
 8002c02:	bf00      	nop
 8002c04:	bf00      	nop
}
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	200001c4 	.word	0x200001c4

08002c0c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002c14:	2100      	movs	r1, #0
 8002c16:	2008      	movs	r0, #8
 8002c18:	f006 fc34 	bl	8009484 <UTIL_SEQ_SetTask>
  return;
 8002c1c:	bf00      	nop
}
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	f006 fc95 	bl	800955c <UTIL_SEQ_SetEvt>
  return;
 8002c32:	bf00      	nop
}
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f006 fcaa 	bl	800959c <UTIL_SEQ_WaitEvt>
  return;
 8002c48:	bf00      	nop
}
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	3308      	adds	r3, #8
 8002c62:	4618      	mov	r0, r3
 8002c64:	f005 fff4 	bl	8008c50 <SVCCTL_UserEvtRx>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002c78:	e002      	b.n	8002c80 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <BLE_StatusNot+0x16>
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d006      	beq.n	8002caa <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002c9c:	e00b      	b.n	8002cb6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002c9e:	231f      	movs	r3, #31
 8002ca0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f006 fc1a 	bl	80094dc <UTIL_SEQ_PauseTask>
      break;
 8002ca8:	e005      	b.n	8002cb6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002caa:	231f      	movs	r3, #31
 8002cac:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f006 fc34 	bl	800951c <UTIL_SEQ_ResumeTask>
      break;
 8002cb4:	bf00      	nop
  }
  return;
 8002cb6:	bf00      	nop
}
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <P2PS_STM_App_Notification>:
/* USER CODE BEGIN PFP */
static void P2PS_Send_Notification(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification) {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN P2PS_STM_App_Notification_1 */
	/* USER CODE END P2PS_STM_App_Notification_1 */
	switch(pNotification->P2P_Evt_Opcode) {
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d00e      	beq.n	8002cee <P2PS_STM_App_Notification+0x2e>
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	dc0e      	bgt.n	8002cf2 <P2PS_STM_App_Notification+0x32>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <P2PS_STM_App_Notification+0x1e>
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d004      	beq.n	8002ce6 <P2PS_STM_App_Notification+0x26>
    	break;

    	default:
			/* USER CODE BEGIN P2PS_STM_App_Notification_default */
			/* USER CODE END P2PS_STM_App_Notification_default */
    	break;
 8002cdc:	e009      	b.n	8002cf2 <P2PS_STM_App_Notification+0x32>
    		P2P_Server_App_Context.Notification_Status = 1;
 8002cde:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <P2PS_STM_App_Notification+0x40>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
    	break;
 8002ce4:	e006      	b.n	8002cf4 <P2PS_STM_App_Notification+0x34>
    		P2P_Server_App_Context.Notification_Status = 0;
 8002ce6:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <P2PS_STM_App_Notification+0x40>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    	break;
 8002cec:	e002      	b.n	8002cf4 <P2PS_STM_App_Notification+0x34>
    	break;
 8002cee:	bf00      	nop
 8002cf0:	e000      	b.n	8002cf4 <P2PS_STM_App_Notification+0x34>
    	break;
 8002cf2:	bf00      	nop
	}
	/* USER CODE BEGIN P2PS_STM_App_Notification_2 */
	/* USER CODE END P2PS_STM_App_Notification_2 */
	return;
 8002cf4:	bf00      	nop
}
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	2000024c 	.word	0x2000024c

08002d04 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification) {
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN P2PS_APP_Notification_1 */
	/* USER CODE END P2PS_APP_Notification_1 */
	switch(pNotification->P2P_Evt_Opcode) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <P2PS_APP_Notification+0x16>
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d002      	beq.n	8002d1e <P2PS_APP_Notification+0x1a>
		break;

		default:
			/* USER CODE BEGIN P2PS_APP_Notification_default */
			/* USER CODE END P2PS_APP_Notification_default */
			break;
 8002d18:	e002      	b.n	8002d20 <P2PS_APP_Notification+0x1c>
		break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <P2PS_APP_Notification+0x1c>
		break;
 8002d1e:	bf00      	nop
	}
	/* USER CODE BEGIN P2PS_APP_Notification_2 */
	/* USER CODE END P2PS_APP_Notification_2 */
	return;
 8002d20:	bf00      	nop
}
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <P2PS_APP_Init>:

void P2PS_APP_Init(void) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN P2PS_APP_Init */
	UTIL_SEQ_RegTask( 1<< CFG_MY_TASK_NOTIFY_TIME, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <P2PS_APP_Init+0x18>)
 8002d32:	2100      	movs	r1, #0
 8002d34:	2010      	movs	r0, #16
 8002d36:	f006 fb83 	bl	8009440 <UTIL_SEQ_RegTask>
	P2P_Server_App_Context.Notification_Status=0;
 8002d3a:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <P2PS_APP_Init+0x1c>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
	/* USER CODE END P2PS_APP_Init */
	return;
 8002d40:	bf00      	nop
}
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	08002d4d 	.word	0x08002d4d
 8002d48:	2000024c 	.word	0x2000024c

08002d4c <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/

void P2PS_Send_Notification(void) {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 	uint8_t value[4];

		value[0] = (uint8_t)(timestamp >> 24);
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <P2PS_Send_Notification+0x7c>)
 8002d54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	0e02      	lsrs	r2, r0, #24
 8002d62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d66:	160b      	asrs	r3, r1, #24
 8002d68:	b2d3      	uxtb	r3, r2
 8002d6a:	713b      	strb	r3, [r7, #4]
		value[1] = (uint8_t)(timestamp >> 16);
 8002d6c:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <P2PS_Send_Notification+0x7c>)
 8002d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	0c02      	lsrs	r2, r0, #16
 8002d7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d80:	140b      	asrs	r3, r1, #16
 8002d82:	b2d3      	uxtb	r3, r2
 8002d84:	717b      	strb	r3, [r7, #5]
		value[2] = (uint8_t)(timestamp >> 8);
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <P2PS_Send_Notification+0x7c>)
 8002d88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	0a02      	lsrs	r2, r0, #8
 8002d96:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d9a:	120b      	asrs	r3, r1, #8
 8002d9c:	b2d3      	uxtb	r3, r2
 8002d9e:	71bb      	strb	r3, [r7, #6]
		value[3] = (uint8_t)(timestamp);
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <P2PS_Send_Notification+0x7c>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	b2d3      	uxtb	r3, r2
 8002da8:	71fb      	strb	r3, [r7, #7]


	   if(P2P_Server_App_Context.Notification_Status){
 8002daa:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <P2PS_Send_Notification+0x80>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d006      	beq.n	8002dc0 <P2PS_Send_Notification+0x74>
	     P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&value);
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8002dba:	f005 fc47 	bl	800864c <P2PS_STM_App_Update_Char>

	   } else {
	    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
	   }

	  return;
 8002dbe:	bf00      	nop
 8002dc0:	bf00      	nop
}
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000428 	.word	0x20000428
 8002dcc:	2000024c 	.word	0x2000024c

08002dd0 <LL_PWR_EnableBootC2>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <LL_PWR_EnableBootC2+0x1c>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <LL_PWR_EnableBootC2+0x1c>)
 8002dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	58000400 	.word	0x58000400

08002df0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8002df8:	4b06      	ldr	r3, [pc, #24]	; (8002e14 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002dfa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002dfe:	4905      	ldr	r1, [pc, #20]	; (8002e14 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	58000800 	.word	0x58000800

08002e18 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	4904      	ldr	r1, [pc, #16]	; (8002e38 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	620b      	str	r3, [r1, #32]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	58000800 	.word	0x58000800

08002e3c <LL_AHB3_GRP1_EnableClock>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e60:	68fb      	ldr	r3, [r7, #12]
}
 8002e62:	bf00      	nop
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8002e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4013      	ands	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e98:	68fb      	ldr	r3, [r7, #12]
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f043 0201 	orr.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	041b      	lsls	r3, r3, #16
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	401a      	ands	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	605a      	str	r2, [r3, #4]
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	041b      	lsls	r3, r3, #16
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	605a      	str	r2, [r3, #4]
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	605a      	str	r2, [r3, #4]
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	609a      	str	r2, [r3, #8]
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	041a      	lsls	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	609a      	str	r2, [r3, #8]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d101      	bne.n	8002faa <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69da      	ldr	r2, [r3, #28]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d101      	bne.n	8002fd4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
	...

08002fe4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4819      	ldr	r0, [pc, #100]	; (8003050 <HW_IPCC_Rx_Handler+0x6c>)
 8002fec:	f7ff ffe4 	bl	8002fb8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HW_IPCC_Rx_Handler+0x26>
 8002ff6:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HW_IPCC_Rx_Handler+0x6c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d002      	beq.n	800300a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003004:	f000 f8ea 	bl	80031dc <HW_IPCC_SYS_EvtHandler>
 8003008:	e01f      	b.n	800304a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800300a:	2101      	movs	r1, #1
 800300c:	4810      	ldr	r0, [pc, #64]	; (8003050 <HW_IPCC_Rx_Handler+0x6c>)
 800300e:	f7ff ffd3 	bl	8002fb8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HW_IPCC_Rx_Handler+0x46>
 8003018:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <HW_IPCC_Rx_Handler+0x6c>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003024:	f000 f89e 	bl	8003164 <HW_IPCC_BLE_EvtHandler>
 8003028:	e00f      	b.n	800304a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800302a:	2108      	movs	r1, #8
 800302c:	4808      	ldr	r0, [pc, #32]	; (8003050 <HW_IPCC_Rx_Handler+0x6c>)
 800302e:	f7ff ffc3 	bl	8002fb8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d009      	beq.n	800304c <HW_IPCC_Rx_Handler+0x68>
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HW_IPCC_Rx_Handler+0x6c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	43db      	mvns	r3, r3
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003046:	f000 f915 	bl	8003274 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800304a:	bf00      	nop
 800304c:	bf00      	nop
}
 800304e:	bd80      	pop	{r7, pc}
 8003050:	58000c00 	.word	0x58000c00

08003054 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003058:	2102      	movs	r1, #2
 800305a:	4822      	ldr	r0, [pc, #136]	; (80030e4 <HW_IPCC_Tx_Handler+0x90>)
 800305c:	f7ff ff97 	bl	8002f8e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d109      	bne.n	800307a <HW_IPCC_Tx_Handler+0x26>
 8003066:	4b1f      	ldr	r3, [pc, #124]	; (80030e4 <HW_IPCC_Tx_Handler+0x90>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	43db      	mvns	r3, r3
 800306c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003074:	f000 f8a6 	bl	80031c4 <HW_IPCC_SYS_CmdEvtHandler>
 8003078:	e031      	b.n	80030de <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800307a:	2102      	movs	r1, #2
 800307c:	4819      	ldr	r0, [pc, #100]	; (80030e4 <HW_IPCC_Tx_Handler+0x90>)
 800307e:	f7ff ff86 	bl	8002f8e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <HW_IPCC_Tx_Handler+0x48>
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HW_IPCC_Tx_Handler+0x90>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	43db      	mvns	r3, r3
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8003096:	f000 f895 	bl	80031c4 <HW_IPCC_SYS_CmdEvtHandler>
 800309a:	e020      	b.n	80030de <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800309c:	2108      	movs	r1, #8
 800309e:	4811      	ldr	r0, [pc, #68]	; (80030e4 <HW_IPCC_Tx_Handler+0x90>)
 80030a0:	f7ff ff75 	bl	8002f8e <LL_C1_IPCC_IsActiveFlag_CHx>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HW_IPCC_Tx_Handler+0x6a>
 80030aa:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <HW_IPCC_Tx_Handler+0x90>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 80030b8:	f000 f8be 	bl	8003238 <HW_IPCC_MM_FreeBufHandler>
 80030bc:	e00f      	b.n	80030de <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80030be:	2120      	movs	r1, #32
 80030c0:	4808      	ldr	r0, [pc, #32]	; (80030e4 <HW_IPCC_Tx_Handler+0x90>)
 80030c2:	f7ff ff64 	bl	8002f8e <LL_C1_IPCC_IsActiveFlag_CHx>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HW_IPCC_Tx_Handler+0x8c>
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HW_IPCC_Tx_Handler+0x90>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	43db      	mvns	r3, r3
 80030d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80030da:	f000 f84f 	bl	800317c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
}
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	58000c00 	.word	0x58000c00

080030e8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80030ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80030f0:	f7ff febd 	bl	8002e6e <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80030f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030f8:	f7ff fe7a 	bl	8002df0 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80030fc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003100:	f7ff fe8a 	bl	8002e18 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003104:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003106:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003108:	f7ff fe62 	bl	8002dd0 <LL_PWR_EnableBootC2>

  return;
 800310c:	bf00      	nop
}
 800310e:	bd80      	pop	{r7, pc}

08003110 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003114:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003118:	f7ff fe90 	bl	8002e3c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800311c:	4806      	ldr	r0, [pc, #24]	; (8003138 <HW_IPCC_Init+0x28>)
 800311e:	f7ff fed2 	bl	8002ec6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8003122:	4805      	ldr	r0, [pc, #20]	; (8003138 <HW_IPCC_Init+0x28>)
 8003124:	f7ff febf 	bl	8002ea6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003128:	202c      	movs	r0, #44	; 0x2c
 800312a:	f000 fc98 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800312e:	202d      	movs	r0, #45	; 0x2d
 8003130:	f000 fc95 	bl	8003a5e <HAL_NVIC_EnableIRQ>

  return;
 8003134:	bf00      	nop
}
 8003136:	bd80      	pop	{r7, pc}
 8003138:	58000c00 	.word	0x58000c00

0800313c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003140:	2101      	movs	r1, #1
 8003142:	4802      	ldr	r0, [pc, #8]	; (800314c <HW_IPCC_BLE_Init+0x10>)
 8003144:	f7ff fef4 	bl	8002f30 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003148:	bf00      	nop
}
 800314a:	bd80      	pop	{r7, pc}
 800314c:	58000c00 	.word	0x58000c00

08003150 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003154:	2101      	movs	r1, #1
 8003156:	4802      	ldr	r0, [pc, #8]	; (8003160 <HW_IPCC_BLE_SendCmd+0x10>)
 8003158:	f7ff ff0a 	bl	8002f70 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800315c:	bf00      	nop
}
 800315e:	bd80      	pop	{r7, pc}
 8003160:	58000c00 	.word	0x58000c00

08003164 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003168:	f005 fe56 	bl	8008e18 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800316c:	2101      	movs	r1, #1
 800316e:	4802      	ldr	r0, [pc, #8]	; (8003178 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003170:	f7ff fef0 	bl	8002f54 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003174:	bf00      	nop
}
 8003176:	bd80      	pop	{r7, pc}
 8003178:	58000c00 	.word	0x58000c00

0800317c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003180:	2120      	movs	r1, #32
 8003182:	4803      	ldr	r0, [pc, #12]	; (8003190 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003184:	f7ff fec2 	bl	8002f0c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003188:	f005 fe76 	bl	8008e78 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800318c:	bf00      	nop
}
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58000c00 	.word	0x58000c00

08003194 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003198:	2102      	movs	r1, #2
 800319a:	4802      	ldr	r0, [pc, #8]	; (80031a4 <HW_IPCC_SYS_Init+0x10>)
 800319c:	f7ff fec8 	bl	8002f30 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80031a0:	bf00      	nop
}
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	58000c00 	.word	0x58000c00

080031a8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80031ac:	2102      	movs	r1, #2
 80031ae:	4804      	ldr	r0, [pc, #16]	; (80031c0 <HW_IPCC_SYS_SendCmd+0x18>)
 80031b0:	f7ff fede 	bl	8002f70 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80031b4:	2102      	movs	r1, #2
 80031b6:	4802      	ldr	r0, [pc, #8]	; (80031c0 <HW_IPCC_SYS_SendCmd+0x18>)
 80031b8:	f7ff fe95 	bl	8002ee6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80031bc:	bf00      	nop
}
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	58000c00 	.word	0x58000c00

080031c4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80031c8:	2102      	movs	r1, #2
 80031ca:	4803      	ldr	r0, [pc, #12]	; (80031d8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80031cc:	f7ff fe9e 	bl	8002f0c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80031d0:	f005 fea2 	bl	8008f18 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80031d4:	bf00      	nop
}
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	58000c00 	.word	0x58000c00

080031dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80031e0:	f005 feb0 	bl	8008f44 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80031e4:	2102      	movs	r1, #2
 80031e6:	4802      	ldr	r0, [pc, #8]	; (80031f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80031e8:	f7ff feb4 	bl	8002f54 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80031ec:	bf00      	nop
}
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	58000c00 	.word	0x58000c00

080031f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80031fc:	2108      	movs	r1, #8
 80031fe:	480c      	ldr	r0, [pc, #48]	; (8003230 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003200:	f7ff fec5 	bl	8002f8e <LL_C1_IPCC_IsActiveFlag_CHx>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003210:	2108      	movs	r1, #8
 8003212:	4807      	ldr	r0, [pc, #28]	; (8003230 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003214:	f7ff fe67 	bl	8002ee6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003218:	e006      	b.n	8003228 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800321e:	2108      	movs	r1, #8
 8003220:	4803      	ldr	r0, [pc, #12]	; (8003230 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003222:	f7ff fea5 	bl	8002f70 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003226:	bf00      	nop
}
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	58000c00 	.word	0x58000c00
 8003234:	200002e0 	.word	0x200002e0

08003238 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800323c:	2108      	movs	r1, #8
 800323e:	4806      	ldr	r0, [pc, #24]	; (8003258 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003240:	f7ff fe64 	bl	8002f0c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800324a:	2108      	movs	r1, #8
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800324e:	f7ff fe8f 	bl	8002f70 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003252:	bf00      	nop
}
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	58000c00 	.word	0x58000c00
 800325c:	200002e0 	.word	0x200002e0

08003260 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003264:	2108      	movs	r1, #8
 8003266:	4802      	ldr	r0, [pc, #8]	; (8003270 <HW_IPCC_TRACES_Init+0x10>)
 8003268:	f7ff fe62 	bl	8002f30 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800326c:	bf00      	nop
}
 800326e:	bd80      	pop	{r7, pc}
 8003270:	58000c00 	.word	0x58000c00

08003274 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003278:	f005 ff0c 	bl	8009094 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800327c:	2108      	movs	r1, #8
 800327e:	4802      	ldr	r0, [pc, #8]	; (8003288 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003280:	f7ff fe68 	bl	8002f54 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003284:	bf00      	nop
}
 8003286:	bd80      	pop	{r7, pc}
 8003288:	58000c00 	.word	0x58000c00

0800328c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800328c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800328e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003290:	3304      	adds	r3, #4

08003292 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003292:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003294:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003296:	d3f9      	bcc.n	800328c <CopyDataInit>
  bx lr
 8003298:	4770      	bx	lr

0800329a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800329a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800329c:	3004      	adds	r0, #4

0800329e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800329e:	4288      	cmp	r0, r1
  bcc FillZerobss
 80032a0:	d3fb      	bcc.n	800329a <FillZerobss>
  bx lr
 80032a2:	4770      	bx	lr

080032a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032a4:	480c      	ldr	r0, [pc, #48]	; (80032d8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80032a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80032a8:	480c      	ldr	r0, [pc, #48]	; (80032dc <LoopForever+0x8>)
 80032aa:	490d      	ldr	r1, [pc, #52]	; (80032e0 <LoopForever+0xc>)
 80032ac:	4a0d      	ldr	r2, [pc, #52]	; (80032e4 <LoopForever+0x10>)
 80032ae:	2300      	movs	r3, #0
 80032b0:	f7ff ffef 	bl	8003292 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80032b4:	480c      	ldr	r0, [pc, #48]	; (80032e8 <LoopForever+0x14>)
 80032b6:	490d      	ldr	r1, [pc, #52]	; (80032ec <LoopForever+0x18>)
 80032b8:	2300      	movs	r3, #0
 80032ba:	f7ff fff0 	bl	800329e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80032be:	480c      	ldr	r0, [pc, #48]	; (80032f0 <LoopForever+0x1c>)
 80032c0:	490c      	ldr	r1, [pc, #48]	; (80032f4 <LoopForever+0x20>)
 80032c2:	2300      	movs	r3, #0
 80032c4:	f7ff ffeb 	bl	800329e <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80032c8:	f000 f92a 	bl	8003520 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80032cc:	f006 f9f6 	bl	80096bc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80032d0:	f7fe fa84 	bl	80017dc <main>

080032d4 <LoopForever>:

LoopForever:
  b LoopForever
 80032d4:	e7fe      	b.n	80032d4 <LoopForever>
 80032d6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80032d8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80032dc:	20000008 	.word	0x20000008
 80032e0:	20000128 	.word	0x20000128
 80032e4:	0800b25c 	.word	0x0800b25c
  INIT_BSS _sbss, _ebss
 80032e8:	200002a8 	.word	0x200002a8
 80032ec:	20000768 	.word	0x20000768
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80032f0:	200301e0 	.word	0x200301e0
 80032f4:	20030a57 	.word	0x20030a57

080032f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80032f8:	e7fe      	b.n	80032f8 <ADC1_IRQHandler>

080032fa <LL_AHB2_GRP1_EnableClock>:
{
 80032fa:	b480      	push	{r7}
 80032fc:	b085      	sub	sp, #20
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003308:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4313      	orrs	r3, r2
 8003310:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003316:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4013      	ands	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800331e:	68fb      	ldr	r3, [r7, #12]
}
 8003320:	bf00      	nop
 8003322:	3714      	adds	r7, #20
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b088      	sub	sp, #32
 8003330:	af00      	add	r7, sp, #0
 8003332:	4603      	mov	r3, r0
 8003334:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003336:	f107 030c 	add.w	r3, r7, #12
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003346:	2002      	movs	r0, #2
 8003348:	f7ff ffd7 	bl	80032fa <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	4a12      	ldr	r2, [pc, #72]	; (8003398 <BSP_LED_Init+0x6c>)
 8003350:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003354:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003356:	2301      	movs	r3, #1
 8003358:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800335e:	2302      	movs	r3, #2
 8003360:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <BSP_LED_Init+0x70>)
 8003366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336a:	f107 020c 	add.w	r2, r7, #12
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fd25 	bl	8003dc0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <BSP_LED_Init+0x70>)
 800337a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	4a05      	ldr	r2, [pc, #20]	; (8003398 <BSP_LED_Init+0x6c>)
 8003382:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003386:	2200      	movs	r2, #0
 8003388:	4619      	mov	r1, r3
 800338a:	f000 fe89 	bl	80040a0 <HAL_GPIO_WritePin>
}
 800338e:	bf00      	nop
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	0800af30 	.word	0x0800af30
 800339c:	20000028 	.word	0x20000028

080033a0 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80033aa:	79fb      	ldrb	r3, [r7, #7]
 80033ac:	4a07      	ldr	r2, [pc, #28]	; (80033cc <BSP_LED_On+0x2c>)
 80033ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	4a06      	ldr	r2, [pc, #24]	; (80033d0 <BSP_LED_On+0x30>)
 80033b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4619      	mov	r1, r3
 80033be:	f000 fe6f 	bl	80040a0 <HAL_GPIO_WritePin>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000028 	.word	0x20000028
 80033d0:	0800af30 	.word	0x0800af30

080033d4 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	4a07      	ldr	r2, [pc, #28]	; (8003400 <BSP_LED_Off+0x2c>)
 80033e2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	4a06      	ldr	r2, [pc, #24]	; (8003404 <BSP_LED_Off+0x30>)
 80033ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ee:	2200      	movs	r2, #0
 80033f0:	4619      	mov	r1, r3
 80033f2:	f000 fe55 	bl	80040a0 <HAL_GPIO_WritePin>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000028 	.word	0x20000028
 8003404:	0800af30 	.word	0x0800af30

08003408 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	4a07      	ldr	r2, [pc, #28]	; (8003434 <BSP_LED_Toggle+0x2c>)
 8003416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	4906      	ldr	r1, [pc, #24]	; (8003438 <BSP_LED_Toggle+0x30>)
 800341e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003422:	4619      	mov	r1, r3
 8003424:	4610      	mov	r0, r2
 8003426:	f000 fe53 	bl	80040d0 <HAL_GPIO_TogglePin>
}
 800342a:	bf00      	nop
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000028 	.word	0x20000028
 8003438:	0800af30 	.word	0x0800af30

0800343c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	460a      	mov	r2, r1
 8003446:	71fb      	strb	r3, [r7, #7]
 8003448:	4613      	mov	r3, r2
 800344a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	609a      	str	r2, [r3, #8]
 8003458:	60da      	str	r2, [r3, #12]
 800345a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800345c:	79fb      	ldrb	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <BSP_PB_Init+0x2e>
 8003462:	2004      	movs	r0, #4
 8003464:	f7ff ff49 	bl	80032fa <LL_AHB2_GRP1_EnableClock>
 8003468:	e00c      	b.n	8003484 <BSP_PB_Init+0x48>
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d103      	bne.n	8003478 <BSP_PB_Init+0x3c>
 8003470:	2008      	movs	r0, #8
 8003472:	f7ff ff42 	bl	80032fa <LL_AHB2_GRP1_EnableClock>
 8003476:	e005      	b.n	8003484 <BSP_PB_Init+0x48>
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d102      	bne.n	8003484 <BSP_PB_Init+0x48>
 800347e:	2008      	movs	r0, #8
 8003480:	f7ff ff3b 	bl	80032fa <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003484:	79bb      	ldrb	r3, [r7, #6]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d117      	bne.n	80034ba <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	4a20      	ldr	r2, [pc, #128]	; (8003510 <BSP_PB_Init+0xd4>)
 800348e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003492:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003498:	2301      	movs	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349c:	2302      	movs	r3, #2
 800349e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80034a0:	79fb      	ldrb	r3, [r7, #7]
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <BSP_PB_Init+0xd8>)
 80034a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a8:	f107 020c 	add.w	r2, r7, #12
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fc86 	bl	8003dc0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80034b4:	2001      	movs	r0, #1
 80034b6:	f7fe fc02 	bl	8001cbe <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80034ba:	79bb      	ldrb	r3, [r7, #6]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d122      	bne.n	8003506 <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	4a13      	ldr	r2, [pc, #76]	; (8003510 <BSP_PB_Init+0xd4>)
 80034c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034c8:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80034ca:	2301      	movs	r3, #1
 80034cc:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80034ce:	4b12      	ldr	r3, [pc, #72]	; (8003518 <BSP_PB_Init+0xdc>)
 80034d0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	4a0f      	ldr	r2, [pc, #60]	; (8003514 <BSP_PB_Init+0xd8>)
 80034d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034da:	f107 020c 	add.w	r2, r7, #12
 80034de:	4611      	mov	r1, r2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 fc6d 	bl	8003dc0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	4a0c      	ldr	r2, [pc, #48]	; (800351c <BSP_PB_Init+0xe0>)
 80034ea:	5cd3      	ldrb	r3, [r2, r3]
 80034ec:	b25b      	sxtb	r3, r3
 80034ee:	2200      	movs	r2, #0
 80034f0:	210f      	movs	r1, #15
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fa99 	bl	8003a2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	4a08      	ldr	r2, [pc, #32]	; (800351c <BSP_PB_Init+0xe0>)
 80034fc:	5cd3      	ldrb	r3, [r2, r3]
 80034fe:	b25b      	sxtb	r3, r3
 8003500:	4618      	mov	r0, r3
 8003502:	f000 faac 	bl	8003a5e <HAL_NVIC_EnableIRQ>
  }
}
 8003506:	bf00      	nop
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	0800af3c 	.word	0x0800af3c
 8003514:	20000040 	.word	0x20000040
 8003518:	10210000 	.word	0x10210000
 800351c:	0800af44 	.word	0x0800af44

08003520 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003524:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <SystemInit+0xa0>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <SystemInit+0xa0>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <SystemInit+0xa0>)
 8003532:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003536:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800353a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003544:	f043 0301 	orr.w	r3, r3, #1
 8003548:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003552:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800355e:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <SystemInit+0xa4>)
 8003560:	4013      	ands	r3, r2
 8003562:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003570:	f023 0305 	bic.w	r3, r3, #5
 8003574:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003584:	f023 0301 	bic.w	r3, r3, #1
 8003588:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003590:	4a0d      	ldr	r2, [pc, #52]	; (80035c8 <SystemInit+0xa8>)
 8003592:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <SystemInit+0xa8>)
 800359a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
}
 80035b4:	bf00      	nop
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	e000ed00 	.word	0xe000ed00
 80035c4:	faf6fefb 	.word	0xfaf6fefb
 80035c8:	22041000 	.word	0x22041000

080035cc <LL_DBGMCU_DisableDBGSleepMode>:
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <LL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	6053      	str	r3, [r2, #4]
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	e0042000 	.word	0xe0042000

080035ec <LL_DBGMCU_DisableDBGStopMode>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	4a04      	ldr	r2, [pc, #16]	; (8003608 <LL_DBGMCU_DisableDBGStopMode+0x1c>)
 80035f6:	f023 0302 	bic.w	r3, r3, #2
 80035fa:	6053      	str	r3, [r2, #4]
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e0042000 	.word	0xe0042000

0800360c <LL_DBGMCU_DisableDBGStandbyMode>:
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4a04      	ldr	r2, [pc, #16]	; (8003628 <LL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8003616:	f023 0304 	bic.w	r3, r3, #4
 800361a:	6053      	str	r3, [r2, #4]
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e0042000 	.word	0xe0042000

0800362c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_Init+0x3c>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a0b      	ldr	r2, [pc, #44]	; (8003668 <HAL_Init+0x3c>)
 800363c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003640:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003642:	2003      	movs	r0, #3
 8003644:	f000 f9e6 	bl	8003a14 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003648:	2000      	movs	r0, #0
 800364a:	f000 f80f 	bl	800366c <HAL_InitTick>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	71fb      	strb	r3, [r7, #7]
 8003658:	e001      	b.n	800365e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800365a:	f7fe fda0 	bl	800219e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800365e:	79fb      	ldrb	r3, [r7, #7]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	58004000 	.word	0x58004000

0800366c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003678:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <HAL_InitTick+0x6c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d024      	beq.n	80036ca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003680:	f002 f81a 	bl	80056b8 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <HAL_InitTick+0x6c>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	4619      	mov	r1, r3
 800368c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003690:	fbb3 f3f1 	udiv	r3, r3, r1
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	4618      	mov	r0, r3
 800369a:	f000 f9fc 	bl	8003a96 <HAL_SYSTICK_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10f      	bne.n	80036c4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d809      	bhi.n	80036be <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036aa:	2200      	movs	r2, #0
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	f04f 30ff 	mov.w	r0, #4294967295
 80036b2:	f000 f9ba 	bl	8003a2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036b6:	4a09      	ldr	r2, [pc, #36]	; (80036dc <HAL_InitTick+0x70>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e007      	b.n	80036ce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	73fb      	strb	r3, [r7, #15]
 80036c2:	e004      	b.n	80036ce <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
 80036c8:	e001      	b.n	80036ce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000054 	.word	0x20000054
 80036dc:	20000050 	.word	0x20000050

080036e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036e4:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_IncTick+0x20>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <HAL_IncTick+0x24>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_IncTick+0x24>)
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000054 	.word	0x20000054
 8003704:	20000754 	.word	0x20000754

08003708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return uwTick;
 800370c:	4b03      	ldr	r3, [pc, #12]	; (800371c <HAL_GetTick+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	20000754 	.word	0x20000754

08003720 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <HAL_GetTickPrio+0x14>)
 8003726:	681b      	ldr	r3, [r3, #0]
}
 8003728:	4618      	mov	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000050 	.word	0x20000050

08003738 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800373c:	4b03      	ldr	r3, [pc, #12]	; (800374c <HAL_GetTickFreq+0x14>)
 800373e:	781b      	ldrb	r3, [r3, #0]
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	20000054 	.word	0x20000054

08003750 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_SuspendTick+0x1c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a04      	ldr	r2, [pc, #16]	; (800376c <HAL_SuspendTick+0x1c>)
 800375a:	f023 0302 	bic.w	r3, r3, #2
 800375e:	6013      	str	r3, [r2, #0]
}
 8003760:	bf00      	nop
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000e010 	.word	0xe000e010

08003770 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8003774:	4b05      	ldr	r3, [pc, #20]	; (800378c <HAL_ResumeTick+0x1c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a04      	ldr	r2, [pc, #16]	; (800378c <HAL_ResumeTick+0x1c>)
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e010 	.word	0xe000e010

08003790 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8003794:	f7ff ff1a 	bl	80035cc <LL_DBGMCU_DisableDBGSleepMode>
}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80037a0:	f7ff ff24 	bl	80035ec <LL_DBGMCU_DisableDBGStopMode>
}
 80037a4:	bf00      	nop
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80037ac:	f7ff ff2e 	bl	800360c <LL_DBGMCU_DisableDBGStandbyMode>
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <__NVIC_SetPriorityGrouping+0x44>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037d0:	4013      	ands	r3, r2
 80037d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037e6:	4a04      	ldr	r2, [pc, #16]	; (80037f8 <__NVIC_SetPriorityGrouping+0x44>)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	60d3      	str	r3, [r2, #12]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003800:	4b04      	ldr	r3, [pc, #16]	; (8003814 <__NVIC_GetPriorityGrouping+0x18>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	f003 0307 	and.w	r3, r3, #7
}
 800380a:	4618      	mov	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	2b00      	cmp	r3, #0
 8003828:	db0b      	blt.n	8003842 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	f003 021f 	and.w	r2, r3, #31
 8003830:	4907      	ldr	r1, [pc, #28]	; (8003850 <__NVIC_EnableIRQ+0x38>)
 8003832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2001      	movs	r0, #1
 800383a:	fa00 f202 	lsl.w	r2, r0, r2
 800383e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	e000e100 	.word	0xe000e100

08003854 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	2b00      	cmp	r3, #0
 8003864:	db12      	blt.n	800388c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	f003 021f 	and.w	r2, r3, #31
 800386c:	490a      	ldr	r1, [pc, #40]	; (8003898 <__NVIC_DisableIRQ+0x44>)
 800386e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2001      	movs	r0, #1
 8003876:	fa00 f202 	lsl.w	r2, r0, r2
 800387a:	3320      	adds	r3, #32
 800387c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003880:	f3bf 8f4f 	dsb	sy
}
 8003884:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003886:	f3bf 8f6f 	isb	sy
}
 800388a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	e000e100 	.word	0xe000e100

0800389c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	db0c      	blt.n	80038c8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	f003 021f 	and.w	r2, r3, #31
 80038b4:	4907      	ldr	r1, [pc, #28]	; (80038d4 <__NVIC_SetPendingIRQ+0x38>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2001      	movs	r0, #1
 80038be:	fa00 f202 	lsl.w	r2, r0, r2
 80038c2:	3340      	adds	r3, #64	; 0x40
 80038c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000e100 	.word	0xe000e100

080038d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	db0c      	blt.n	8003904 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038ea:	79fb      	ldrb	r3, [r7, #7]
 80038ec:	f003 021f 	and.w	r2, r3, #31
 80038f0:	4907      	ldr	r1, [pc, #28]	; (8003910 <__NVIC_ClearPendingIRQ+0x38>)
 80038f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	2001      	movs	r0, #1
 80038fa:	fa00 f202 	lsl.w	r2, r0, r2
 80038fe:	3360      	adds	r3, #96	; 0x60
 8003900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100

08003914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003924:	2b00      	cmp	r3, #0
 8003926:	db0a      	blt.n	800393e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	b2da      	uxtb	r2, r3
 800392c:	490c      	ldr	r1, [pc, #48]	; (8003960 <__NVIC_SetPriority+0x4c>)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	0112      	lsls	r2, r2, #4
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	440b      	add	r3, r1
 8003938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800393c:	e00a      	b.n	8003954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	4908      	ldr	r1, [pc, #32]	; (8003964 <__NVIC_SetPriority+0x50>)
 8003944:	79fb      	ldrb	r3, [r7, #7]
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	3b04      	subs	r3, #4
 800394c:	0112      	lsls	r2, r2, #4
 800394e:	b2d2      	uxtb	r2, r2
 8003950:	440b      	add	r3, r1
 8003952:	761a      	strb	r2, [r3, #24]
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	e000e100 	.word	0xe000e100
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003968:	b480      	push	{r7}
 800396a:	b089      	sub	sp, #36	; 0x24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f1c3 0307 	rsb	r3, r3, #7
 8003982:	2b04      	cmp	r3, #4
 8003984:	bf28      	it	cs
 8003986:	2304      	movcs	r3, #4
 8003988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3304      	adds	r3, #4
 800398e:	2b06      	cmp	r3, #6
 8003990:	d902      	bls.n	8003998 <NVIC_EncodePriority+0x30>
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3b03      	subs	r3, #3
 8003996:	e000      	b.n	800399a <NVIC_EncodePriority+0x32>
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800399c:	f04f 32ff 	mov.w	r2, #4294967295
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	43da      	mvns	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	401a      	ands	r2, r3
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b0:	f04f 31ff 	mov.w	r1, #4294967295
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	fa01 f303 	lsl.w	r3, r1, r3
 80039ba:	43d9      	mvns	r1, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c0:	4313      	orrs	r3, r2
         );
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3724      	adds	r7, #36	; 0x24
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3b01      	subs	r3, #1
 80039dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039e0:	d301      	bcc.n	80039e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039e2:	2301      	movs	r3, #1
 80039e4:	e00f      	b.n	8003a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039e6:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <SysTick_Config+0x40>)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ee:	210f      	movs	r1, #15
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	f7ff ff8e 	bl	8003914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <SysTick_Config+0x40>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039fe:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <SysTick_Config+0x40>)
 8003a00:	2207      	movs	r2, #7
 8003a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	e000e010 	.word	0xe000e010

08003a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7ff fec9 	bl	80037b4 <__NVIC_SetPriorityGrouping>
}
 8003a22:	bf00      	nop
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b086      	sub	sp, #24
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	4603      	mov	r3, r0
 8003a32:	60b9      	str	r1, [r7, #8]
 8003a34:	607a      	str	r2, [r7, #4]
 8003a36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a38:	f7ff fee0 	bl	80037fc <__NVIC_GetPriorityGrouping>
 8003a3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7ff ff90 	bl	8003968 <NVIC_EncodePriority>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ff5f 	bl	8003914 <__NVIC_SetPriority>
}
 8003a56:	bf00      	nop
 8003a58:	3718      	adds	r7, #24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b082      	sub	sp, #8
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	4603      	mov	r3, r0
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fed3 	bl	8003818 <__NVIC_EnableIRQ>
}
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4603      	mov	r3, r0
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fee3 	bl	8003854 <__NVIC_DisableIRQ>
}
 8003a8e:	bf00      	nop
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff96 	bl	80039d0 <SysTick_Config>
 8003aa4:	4603      	mov	r3, r0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b082      	sub	sp, #8
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff feed 	bl	800389c <__NVIC_SetPendingIRQ>
}
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fefd 	bl	80038d8 <__NVIC_ClearPendingIRQ>
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e04f      	b.n	8003b98 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d008      	beq.n	8003b16 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2204      	movs	r2, #4
 8003b08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e040      	b.n	8003b98 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 020e 	bic.w	r2, r2, #14
 8003b24:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f022 0201 	bic.w	r2, r2, #1
 8003b44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f003 021c 	and.w	r2, r3, #28
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	2101      	movs	r1, #1
 8003b54:	fa01 f202 	lsl.w	r2, r1, r2
 8003b58:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b62:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00c      	beq.n	8003b86 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b84:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d005      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
 8003bc6:	e047      	b.n	8003c58 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 020e 	bic.w	r2, r2, #14
 8003bd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfc:	f003 021c 	and.w	r2, r3, #28
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
    }
  }
  return status;
 8003c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c7e:	f003 031c 	and.w	r3, r3, #28
 8003c82:	2204      	movs	r2, #4
 8003c84:	409a      	lsls	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4013      	ands	r3, r2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d026      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x7a>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d021      	beq.n	8003cdc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d107      	bne.n	8003cb6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0204 	bic.w	r2, r2, #4
 8003cb4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	f003 021c 	and.w	r2, r3, #28
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	2104      	movs	r1, #4
 8003cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d071      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003cda:	e06c      	b.n	8003db6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	f003 031c 	and.w	r3, r3, #28
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	409a      	lsls	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d02e      	beq.n	8003d4e <HAL_DMA_IRQHandler+0xec>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d029      	beq.n	8003d4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 020a 	bic.w	r2, r2, #10
 8003d16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d24:	f003 021c 	and.w	r2, r3, #28
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d038      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d4c:	e033      	b.n	8003db6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	f003 031c 	and.w	r3, r3, #28
 8003d56:	2208      	movs	r2, #8
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02a      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x156>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d025      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 020e 	bic.w	r2, r2, #14
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f003 021c 	and.w	r2, r3, #28
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d88:	2101      	movs	r1, #1
 8003d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d004      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
}
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dce:	e14c      	b.n	800406a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 813e 	beq.w	8004064 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d00b      	beq.n	8003e08 <HAL_GPIO_Init+0x48>
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d007      	beq.n	8003e08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dfc:	2b11      	cmp	r3, #17
 8003dfe:	d003      	beq.n	8003e08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b12      	cmp	r3, #18
 8003e06:	d130      	bne.n	8003e6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	2203      	movs	r2, #3
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e3e:	2201      	movs	r2, #1
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43db      	mvns	r3, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f003 0201 	and.w	r2, r3, #1
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	2203      	movs	r2, #3
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0xea>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b12      	cmp	r3, #18
 8003ea8:	d123      	bne.n	8003ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	08da      	lsrs	r2, r3, #3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3208      	adds	r2, #8
 8003eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	220f      	movs	r2, #15
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691a      	ldr	r2, [r3, #16]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	08da      	lsrs	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3208      	adds	r2, #8
 8003eec:	6939      	ldr	r1, [r7, #16]
 8003eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	2203      	movs	r2, #3
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4013      	ands	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 0203 	and.w	r2, r3, #3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8098 	beq.w	8004064 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f34:	4a54      	ldr	r2, [pc, #336]	; (8004088 <HAL_GPIO_Init+0x2c8>)
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0303 	and.w	r3, r3, #3
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	220f      	movs	r2, #15
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4013      	ands	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f5e:	d019      	beq.n	8003f94 <HAL_GPIO_Init+0x1d4>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a4a      	ldr	r2, [pc, #296]	; (800408c <HAL_GPIO_Init+0x2cc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d013      	beq.n	8003f90 <HAL_GPIO_Init+0x1d0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a49      	ldr	r2, [pc, #292]	; (8004090 <HAL_GPIO_Init+0x2d0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00d      	beq.n	8003f8c <HAL_GPIO_Init+0x1cc>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a48      	ldr	r2, [pc, #288]	; (8004094 <HAL_GPIO_Init+0x2d4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <HAL_GPIO_Init+0x1c8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a47      	ldr	r2, [pc, #284]	; (8004098 <HAL_GPIO_Init+0x2d8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d101      	bne.n	8003f84 <HAL_GPIO_Init+0x1c4>
 8003f80:	2304      	movs	r3, #4
 8003f82:	e008      	b.n	8003f96 <HAL_GPIO_Init+0x1d6>
 8003f84:	2307      	movs	r3, #7
 8003f86:	e006      	b.n	8003f96 <HAL_GPIO_Init+0x1d6>
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e004      	b.n	8003f96 <HAL_GPIO_Init+0x1d6>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e002      	b.n	8003f96 <HAL_GPIO_Init+0x1d6>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_GPIO_Init+0x1d6>
 8003f94:	2300      	movs	r3, #0
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	f002 0203 	and.w	r2, r2, #3
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	4093      	lsls	r3, r2
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003fa6:	4938      	ldr	r1, [pc, #224]	; (8004088 <HAL_GPIO_Init+0x2c8>)
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3302      	adds	r3, #2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <HAL_GPIO_Init+0x2dc>)
 8003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003fda:	4a30      	ldr	r2, [pc, #192]	; (800409c <HAL_GPIO_Init+0x2dc>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_GPIO_Init+0x2dc>)
 8003fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d003      	beq.n	8004008 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004008:	4a24      	ldr	r2, [pc, #144]	; (800409c <HAL_GPIO_Init+0x2dc>)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_GPIO_Init+0x2dc>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <HAL_GPIO_Init+0x2dc>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800403a:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_GPIO_Init+0x2dc>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	43db      	mvns	r3, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800405e:	4a0f      	ldr	r2, [pc, #60]	; (800409c <HAL_GPIO_Init+0x2dc>)
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3301      	adds	r3, #1
 8004068:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	f47f aeab 	bne.w	8003dd0 <HAL_GPIO_Init+0x10>
  }
}
 800407a:	bf00      	nop
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	40010000 	.word	0x40010000
 800408c:	48000400 	.word	0x48000400
 8004090:	48000800 	.word	0x48000800
 8004094:	48000c00 	.word	0x48000c00
 8004098:	48001000 	.word	0x48001000
 800409c:	58000800 	.word	0x58000800

080040a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
 80040ac:	4613      	mov	r3, r2
 80040ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b0:	787b      	ldrb	r3, [r7, #1]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040bc:	e002      	b.n	80040c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4013      	ands	r3, r2
 80040e8:	041a      	lsls	r2, r3, #16
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	43d9      	mvns	r1, r3
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	400b      	ands	r3, r1
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	619a      	str	r2, [r3, #24]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800410e:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d006      	beq.n	8004128 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800411a:	4a05      	ldr	r2, [pc, #20]	; (8004130 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fada 	bl	80006dc <HAL_GPIO_EXTI_Callback>
  }
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	58000800 	.word	0x58000800

08004134 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <HAL_HSEM_IRQHandler+0x30>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004140:	4b08      	ldr	r3, [pc, #32]	; (8004164 <HAL_HSEM_IRQHandler+0x30>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	43db      	mvns	r3, r3
 8004148:	4906      	ldr	r1, [pc, #24]	; (8004164 <HAL_HSEM_IRQHandler+0x30>)
 800414a:	4013      	ands	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800414e:	4a05      	ldr	r2, [pc, #20]	; (8004164 <HAL_HSEM_IRQHandler+0x30>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f807 	bl	8004168 <HAL_HSEM_FreeCallback>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	58001500 	.word	0x58001500

08004168 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01e      	beq.n	80041cc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800418e:	4b13      	ldr	r3, [pc, #76]	; (80041dc <HAL_IPCC_Init+0x60>)
 8004190:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7fe f826 	bl	80021f0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80041a4:	68b8      	ldr	r0, [r7, #8]
 80041a6:	f000 f85b 	bl	8004260 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f82c 	bl	8004214 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80041ca:	e001      	b.n	80041d0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80041d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	58000c00 	.word	0x58000c00

080041e0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b085      	sub	sp, #20
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	4613      	mov	r3, r2
 8004206:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e00f      	b.n	8004242 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <IPCC_SetDefaultCallbacks+0x44>)
 800422c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3306      	adds	r3, #6
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	4a08      	ldr	r2, [pc, #32]	; (800425c <IPCC_SetDefaultCallbacks+0x48>)
 800423a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b05      	cmp	r3, #5
 8004246:	d9ec      	bls.n	8004222 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004248:	bf00      	nop
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	080041e1 	.word	0x080041e1
 800425c:	080041fb 	.word	0x080041fb

08004260 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004274:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	223f      	movs	r2, #63	; 0x3f
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_EXTI_EnableIT_0_31>:
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004290:	4b06      	ldr	r3, [pc, #24]	; (80042ac <LL_EXTI_EnableIT_0_31+0x24>)
 8004292:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004296:	4905      	ldr	r1, [pc, #20]	; (80042ac <LL_EXTI_EnableIT_0_31+0x24>)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	58000800 	.word	0x58000800

080042b0 <LL_EXTI_DisableIT_0_31>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <LL_EXTI_DisableIT_0_31+0x28>)
 80042ba:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	4905      	ldr	r1, [pc, #20]	; (80042d8 <LL_EXTI_DisableIT_0_31+0x28>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	58000800 	.word	0x58000800

080042dc <LL_C2_EXTI_DisableIT_0_31>:
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->C2IMR1, ExtiLine);
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80042e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	4905      	ldr	r1, [pc, #20]	; (8004304 <LL_C2_EXTI_DisableIT_0_31+0x28>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	f8c1 30c0 	str.w	r3, [r1, #192]	; 0xc0
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	58000800 	.word	0x58000800

08004308 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004310:	4b05      	ldr	r3, [pc, #20]	; (8004328 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	4904      	ldr	r1, [pc, #16]	; (8004328 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4313      	orrs	r3, r2
 800431a:	600b      	str	r3, [r1, #0]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	58000800 	.word	0x58000800

0800432c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	43db      	mvns	r3, r3
 800433c:	4904      	ldr	r1, [pc, #16]	; (8004350 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800433e:	4013      	ands	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	58000800 	.word	0x58000800

08004354 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	4904      	ldr	r1, [pc, #16]	; (8004374 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4313      	orrs	r3, r2
 8004366:	604b      	str	r3, [r1, #4]
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	58000800 	.word	0x58000800

08004378 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	43db      	mvns	r3, r3
 8004388:	4904      	ldr	r1, [pc, #16]	; (800439c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800438a:	4013      	ands	r3, r2
 800438c:	604b      	str	r3, [r1, #4]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	58000800 	.word	0x58000800

080043a0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a04      	ldr	r2, [pc, #16]	; (80043bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ae:	6013      	str	r3, [r2, #0]
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	58000400 	.word	0x58000400

080043c0 <HAL_PWR_ConfigPVD>:
  *         (and optionally, to select CPU2 only (not both CPU1 and CPU2):
  *         "__HAL_PWR_PVD_EXTI_DISABLE_IT()").
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80043c8:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <HAL_PWR_ConfigPVD+0x80>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 020e 	bic.w	r2, r3, #14
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	491a      	ldr	r1, [pc, #104]	; (8004440 <HAL_PWR_ConfigPVD+0x80>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	604b      	str	r3, [r1, #4]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  
  /* Note: On STM32WB serie, power PVD event is not available on AIEC lines   */
  /*       (only interruption is available through AIEC line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();      /*CPU1*/
 80043da:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80043de:	f7ff ff67 	bl	80042b0 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTIC2_DISABLE_IT();    /*CPU2*/
 80043e2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80043e6:	f7ff ff79 	bl	80042dc <LL_C2_EXTI_DisableIT_0_31>
    
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80043ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80043ee:	f7ff ffc3 	bl	8004378 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 80043f2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80043f6:	f7ff ff99 	bl	800432c <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_PWR_ConfigPVD+0x4e>
  {
    /* Set CPU1 as wakeup target */
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004406:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800440a:	f7ff ff3d 	bl	8004288 <LL_EXTI_EnableIT_0_31>
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800441a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800441e:	f7ff ff73 	bl	8004308 <LL_EXTI_EnableRisingTrig_0_31>
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_PWR_ConfigPVD+0x76>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800442e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004432:	f7ff ff8f 	bl	8004354 <LL_EXTI_EnableFallingTrig_0_31>
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	58000400 	.word	0x58000400

08004444 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_PWR_EnablePVD+0x1c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	4a04      	ldr	r2, [pc, #16]	; (8004460 <HAL_PWR_EnablePVD+0x1c>)
 800444e:	f043 0301 	orr.w	r3, r3, #1
 8004452:	6053      	str	r3, [r2, #4]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	58000400 	.word	0x58000400

08004464 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_PWR_DisablePVD+0x1c>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <HAL_PWR_DisablePVD+0x1c>)
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	6053      	str	r3, [r2, #4]
}
 8004474:	bf00      	nop
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	58000400 	.word	0x58000400

08004484 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <LL_EXTI_ReadFlag_0_31+0x1c>)
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4013      	ands	r3, r2
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	58000800 	.word	0x58000800

080044a4 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <LL_EXTI_ReadFlag_32_63+0x1c>)
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4013      	ands	r3, r2
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	58000800 	.word	0x58000800

080044c4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60d3      	str	r3, [r2, #12]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	58000800 	.word	0x58000800

080044e4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 80044ec:	4a04      	ldr	r2, [pc, #16]	; (8004500 <LL_EXTI_ClearFlag_32_63+0x1c>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	58000800 	.word	0x58000800

08004504 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <HAL_PWREx_GetVoltageRange+0x18>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004510:	4618      	mov	r0, r3
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	58000400 	.word	0x58000400

08004520 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().  
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 8004524:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004528:	f7ff ffac 	bl	8004484 <LL_EXTI_ReadFlag_0_31>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d005      	beq.n	800453e <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004532:	f7fd fb71 	bl	8001c18 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004536:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800453a:	f7ff ffc3 	bl	80044c4 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U) 
 800453e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004542:	f7ff ff9f 	bl	8004484 <LL_EXTI_ReadFlag_0_31>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d005      	beq.n	8004558 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800454c:	f000 f811 	bl	8004572 <HAL_PWREx_PVM1Callback>
   
    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 8004550:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004554:	f7ff ffb6 	bl	80044c4 <LL_EXTI_ClearFlag_0_31>
  }
#endif

  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U) 
 8004558:	2002      	movs	r0, #2
 800455a:	f7ff ffa3 	bl	80044a4 <LL_EXTI_ReadFlag_32_63>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004564:	f000 f80c 	bl	8004580 <HAL_PWREx_PVM3Callback>
   
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004568:	2002      	movs	r0, #2
 800456a:	f7ff ffbb 	bl	80044e4 <LL_EXTI_ClearFlag_32_63>
  }
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <LL_RCC_HSE_IsEnabledDiv2>:
{
 800458e:	b480      	push	{r7}
 8004590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800459c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a0:	d101      	bne.n	80045a6 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <LL_RCC_HSE_Enable>:
{
 80045b2:	b480      	push	{r7}
 80045b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80045b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
}
 80045c6:	bf00      	nop
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <LL_RCC_HSE_Disable>:
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80045d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045e2:	6013      	str	r3, [r2, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <LL_RCC_HSE_IsReady>:
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80045f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004600:	d101      	bne.n	8004606 <LL_RCC_HSE_IsReady+0x18>
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <LL_RCC_HSE_IsReady+0x1a>
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <LL_RCC_HSI_Enable>:
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <LL_RCC_HSI_Disable>:
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800463e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004642:	6013      	str	r3, [r2, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <LL_RCC_HSI_IsReady>:
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d101      	bne.n	8004666 <LL_RCC_HSI_IsReady+0x18>
 8004662:	2301      	movs	r3, #1
 8004664:	e000      	b.n	8004668 <LL_RCC_HSI_IsReady+0x1a>
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800467a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	061b      	lsls	r3, r3, #24
 8004688:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
}
 8004690:	bf00      	nop
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_RCC_HSI48_Enable>:
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_RCC_HSI48_Disable>:
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ce:	f023 0301 	bic.w	r3, r3, #1
 80046d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80046d6:	bf00      	nop
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <LL_RCC_HSI48_IsReady>:
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80046e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d101      	bne.n	80046f8 <LL_RCC_HSI48_IsReady+0x18>
 80046f4:	2301      	movs	r3, #1
 80046f6:	e000      	b.n	80046fa <LL_RCC_HSI48_IsReady+0x1a>
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_RCC_LSE_Enable>:
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004714:	f043 0301 	orr.w	r3, r3, #1
 8004718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_RCC_LSE_Disable>:
{
 8004726:	b480      	push	{r7}
 8004728:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800473e:	bf00      	nop
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <LL_RCC_LSE_EnableBypass>:
{
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800474c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004758:	f043 0304 	orr.w	r3, r3, #4
 800475c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004760:	bf00      	nop
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <LL_RCC_LSE_DisableBypass>:
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800477a:	f023 0304 	bic.w	r3, r3, #4
 800477e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004782:	bf00      	nop
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_RCC_LSE_IsReady>:
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b02      	cmp	r3, #2
 800479e:	d101      	bne.n	80047a4 <LL_RCC_LSE_IsReady+0x18>
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <LL_RCC_LSE_IsReady+0x1a>
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <LL_RCC_LSI1_Enable>:
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80047b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_RCC_LSI1_Disable>:
{
 80047d2:	b480      	push	{r7}
 80047d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80047d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047e2:	f023 0301 	bic.w	r3, r3, #1
 80047e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80047ea:	bf00      	nop
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_RCC_LSI1_IsReady>:
{
 80047f4:	b480      	push	{r7}
 80047f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80047f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004800:	f003 0302 	and.w	r3, r3, #2
 8004804:	2b02      	cmp	r3, #2
 8004806:	d101      	bne.n	800480c <LL_RCC_LSI1_IsReady+0x18>
 8004808:	2301      	movs	r3, #1
 800480a:	e000      	b.n	800480e <LL_RCC_LSI1_IsReady+0x1a>
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_LSI2_Enable>:
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004824:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <LL_RCC_LSI2_Disable>:
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004846:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800484a:	f023 0304 	bic.w	r3, r3, #4
 800484e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004852:	bf00      	nop
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <LL_RCC_LSI2_IsReady>:
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b08      	cmp	r3, #8
 800486e:	d101      	bne.n	8004874 <LL_RCC_LSI2_IsReady+0x18>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <LL_RCC_LSI2_IsReady+0x1a>
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_LSI2_SetTrimming>:
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004890:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80048a2:	bf00      	nop
 80048a4:	370c      	adds	r7, #12
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <LL_RCC_MSI_Enable>:
{
 80048ae:	b480      	push	{r7}
 80048b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80048b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	6013      	str	r3, [r2, #0]
}
 80048c2:	bf00      	nop
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <LL_RCC_MSI_Disable>:
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80048d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <LL_RCC_MSI_IsReady>:
{
 80048ea:	b480      	push	{r7}
 80048ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d101      	bne.n	8004900 <LL_RCC_MSI_IsReady+0x16>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <LL_RCC_MSI_IsReady+0x18>
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <LL_RCC_MSI_SetRange>:
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800491e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4313      	orrs	r3, r2
 8004926:	600b      	str	r3, [r1, #0]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_RCC_MSI_GetRange>:
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800493a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004944:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2bb0      	cmp	r3, #176	; 0xb0
 800494a:	d901      	bls.n	8004950 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800494c:	23b0      	movs	r3, #176	; 0xb0
 800494e:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004950:	687b      	ldr	r3, [r7, #4]
}
 8004952:	4618      	mov	r0, r3
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_RCC_MSI_SetCalibTrimming>:
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_RCC_SetSysClkSource>:
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0203 	bic.w	r2, r3, #3
 800499a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_GetSysClkSource>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_SetAHBPrescaler>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80049d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	608b      	str	r3, [r1, #8]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <LL_C2_RCC_SetAHBPrescaler>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <LL_RCC_SetAHB4Prescaler>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a2c:	f023 020f 	bic.w	r2, r3, #15
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004a3e:	bf00      	nop
 8004a40:	370c      	adds	r7, #12
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <LL_RCC_SetAPB1Prescaler>:
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_RCC_SetAPB2Prescaler>:
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_RCC_GetAHBPrescaler>:
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <LL_RCC_GetAHB4Prescaler>:
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_RCC_PLL_Enable>:
{
 8004ace:	b480      	push	{r7}
 8004ad0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	6013      	str	r3, [r2, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_RCC_PLL_Disable>:
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004afa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afe:	6013      	str	r3, [r2, #0]
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <LL_RCC_PLL_IsReady>:
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b1c:	d101      	bne.n	8004b22 <LL_RCC_PLL_IsReady+0x18>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <LL_RCC_PLL_IsReady+0x1a>
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <LL_RCC_PLL_GetN>:
{
 8004b2e:	b480      	push	{r7}
 8004b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <LL_RCC_PLL_GetR>:
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <LL_RCC_PLL_GetDivider>:
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_PLL_GetMainSource>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f003 0303 	and.w	r3, r3, #3
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_RCC_IsActiveFlag_HPRE>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba2:	d101      	bne.n	8004ba8 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e000      	b.n	8004baa <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bc8:	d101      	bne.n	8004bce <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bee:	d101      	bne.n	8004bf4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c12:	d101      	bne.n	8004c18 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c32:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c36:	d101      	bne.n	8004c3c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b08d      	sub	sp, #52	; 0x34
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e37e      	b.n	8005358 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8092 	beq.w	8004d8c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c68:	f7ff fea2 	bl	80049b0 <LL_RCC_GetSysClkSource>
 8004c6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c6e:	f7ff ff83 	bl	8004b78 <LL_RCC_PLL_GetMainSource>
 8004c72:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <HAL_RCC_OscConfig+0x3e>
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	2b0c      	cmp	r3, #12
 8004c7e:	d14c      	bne.n	8004d1a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d149      	bne.n	8004d1a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c86:	f7ff fe30 	bl	80048ea <LL_RCC_MSI_IsReady>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_OscConfig+0x54>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e35d      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004ca0:	f7ff fe48 	bl	8004934 <LL_RCC_MSI_GetRange>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	429c      	cmp	r4, r3
 8004ca8:	d914      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fd16 	bl	80056e0 <RCC_SetFlashLatencyFromMSIRange>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e34c      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fe22 	bl	800490c <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fe46 	bl	800495e <LL_RCC_MSI_SetCalibTrimming>
 8004cd2:	e013      	b.n	8004cfc <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fe17 	bl	800490c <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fe3b 	bl	800495e <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fcf7 	bl	80056e0 <RCC_SetFlashLatencyFromMSIRange>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e32d      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004cfc:	f000 fcdc 	bl	80056b8 <HAL_RCC_GetHCLKFreq>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4ab3      	ldr	r2, [pc, #716]	; (8004fd0 <HAL_RCC_OscConfig+0x388>)
 8004d04:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d06:	4bb3      	ldr	r3, [pc, #716]	; (8004fd4 <HAL_RCC_OscConfig+0x38c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe fcae 	bl	800366c <HAL_InitTick>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d039      	beq.n	8004d8a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e31e      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d01e      	beq.n	8004d60 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004d22:	f7ff fdc4 	bl	80048ae <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d26:	f7fe fcef 	bl	8003708 <HAL_GetTick>
 8004d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d2e:	f7fe fceb 	bl	8003708 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e30b      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004d40:	f7ff fdd3 	bl	80048ea <LL_RCC_MSI_IsReady>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f1      	beq.n	8004d2e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fddc 	bl	800490c <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7ff fe00 	bl	800495e <LL_RCC_MSI_SetCalibTrimming>
 8004d5e:	e015      	b.n	8004d8c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d60:	f7ff fdb4 	bl	80048cc <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d64:	f7fe fcd0 	bl	8003708 <HAL_GetTick>
 8004d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d6c:	f7fe fccc 	bl	8003708 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e2ec      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004d7e:	f7ff fdb4 	bl	80048ea <LL_RCC_MSI_IsReady>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f1      	bne.n	8004d6c <HAL_RCC_OscConfig+0x124>
 8004d88:	e000      	b.n	8004d8c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d8a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0301 	and.w	r3, r3, #1
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d04e      	beq.n	8004e36 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d98:	f7ff fe0a 	bl	80049b0 <LL_RCC_GetSysClkSource>
 8004d9c:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d9e:	f7ff feeb 	bl	8004b78 <LL_RCC_PLL_GetMainSource>
 8004da2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d005      	beq.n	8004db6 <HAL_RCC_OscConfig+0x16e>
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d10d      	bne.n	8004dcc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d10a      	bne.n	8004dcc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db6:	f7ff fc1a 	bl	80045ee <LL_RCC_HSE_IsReady>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d039      	beq.n	8004e34 <HAL_RCC_OscConfig+0x1ec>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d135      	bne.n	8004e34 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e2c5      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd4:	d102      	bne.n	8004ddc <HAL_RCC_OscConfig+0x194>
 8004dd6:	f7ff fbec 	bl	80045b2 <LL_RCC_HSE_Enable>
 8004dda:	e001      	b.n	8004de0 <HAL_RCC_OscConfig+0x198>
 8004ddc:	f7ff fbf8 	bl	80045d0 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d012      	beq.n	8004e0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de8:	f7fe fc8e 	bl	8003708 <HAL_GetTick>
 8004dec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df0:	f7fe fc8a 	bl	8003708 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b64      	cmp	r3, #100	; 0x64
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e2aa      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004e02:	f7ff fbf4 	bl	80045ee <LL_RCC_HSE_IsReady>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0f1      	beq.n	8004df0 <HAL_RCC_OscConfig+0x1a8>
 8004e0c:	e013      	b.n	8004e36 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0e:	f7fe fc7b 	bl	8003708 <HAL_GetTick>
 8004e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e16:	f7fe fc77 	bl	8003708 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b64      	cmp	r3, #100	; 0x64
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e297      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004e28:	f7ff fbe1 	bl	80045ee <LL_RCC_HSE_IsReady>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1f1      	bne.n	8004e16 <HAL_RCC_OscConfig+0x1ce>
 8004e32:	e000      	b.n	8004e36 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d051      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e42:	f7ff fdb5 	bl	80049b0 <LL_RCC_GetSysClkSource>
 8004e46:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e48:	f7ff fe96 	bl	8004b78 <LL_RCC_PLL_GetMainSource>
 8004e4c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d005      	beq.n	8004e60 <HAL_RCC_OscConfig+0x218>
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b0c      	cmp	r3, #12
 8004e58:	d113      	bne.n	8004e82 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d110      	bne.n	8004e82 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e60:	f7ff fbf5 	bl	800464e <LL_RCC_HSI_IsReady>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_RCC_OscConfig+0x22e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e270      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fbf9 	bl	8004672 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e80:	e031      	b.n	8004ee6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d019      	beq.n	8004ebe <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e8a:	f7ff fbc2 	bl	8004612 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e8e:	f7fe fc3b 	bl	8003708 <HAL_GetTick>
 8004e92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004e94:	e008      	b.n	8004ea8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e96:	f7fe fc37 	bl	8003708 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e257      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004ea8:	f7ff fbd1 	bl	800464e <LL_RCC_HSI_IsReady>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d0f1      	beq.n	8004e96 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fbdb 	bl	8004672 <LL_RCC_HSI_SetCalibTrimming>
 8004ebc:	e013      	b.n	8004ee6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ebe:	f7ff fbb7 	bl	8004630 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec2:	f7fe fc21 	bl	8003708 <HAL_GetTick>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eca:	f7fe fc1d 	bl	8003708 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e23d      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004edc:	f7ff fbb7 	bl	800464e <LL_RCC_HSI_IsReady>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f1      	bne.n	8004eca <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80a3 	beq.w	8005046 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d076      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d046      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004f14:	f7ff fc6e 	bl	80047f4 <LL_RCC_LSI1_IsReady>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d113      	bne.n	8004f46 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004f1e:	f7ff fc47 	bl	80047b0 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f22:	f7fe fbf1 	bl	8003708 <HAL_GetTick>
 8004f26:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f2a:	f7fe fbed 	bl	8003708 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e20d      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004f3c:	f7ff fc5a 	bl	80047f4 <LL_RCC_LSI1_IsReady>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f1      	beq.n	8004f2a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004f46:	f7ff fc67 	bl	8004818 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4a:	f7fe fbdd 	bl	8003708 <HAL_GetTick>
 8004f4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004f52:	f7fe fbd9 	bl	8003708 <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1f9      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004f64:	f7ff fc7a 	bl	800485c <LL_RCC_LSI2_IsReady>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f1      	beq.n	8004f52 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7ff fc84 	bl	8004880 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004f78:	f7ff fc2b 	bl	80047d2 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f7c:	f7fe fbc4 	bl	8003708 <HAL_GetTick>
 8004f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f84:	f7fe fbc0 	bl	8003708 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e1e0      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004f96:	f7ff fc2d 	bl	80047f4 <LL_RCC_LSI1_IsReady>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f1      	bne.n	8004f84 <HAL_RCC_OscConfig+0x33c>
 8004fa0:	e051      	b.n	8005046 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004fa2:	f7ff fc05 	bl	80047b0 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa6:	f7fe fbaf 	bl	8003708 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fae:	f7fe fbab 	bl	8003708 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e1cb      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004fc0:	f7ff fc18 	bl	80047f4 <LL_RCC_LSI1_IsReady>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f1      	beq.n	8004fae <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004fca:	f7ff fc36 	bl	800483a <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004fce:	e00c      	b.n	8004fea <HAL_RCC_OscConfig+0x3a2>
 8004fd0:	2000004c 	.word	0x2000004c
 8004fd4:	20000050 	.word	0x20000050
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004fd8:	f7fe fb96 	bl	8003708 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b03      	cmp	r3, #3
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e1b6      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004fea:	f7ff fc37 	bl	800485c <LL_RCC_LSI2_IsReady>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1f1      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x390>
 8004ff4:	e027      	b.n	8005046 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004ff6:	f7ff fc20 	bl	800483a <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffa:	f7fe fb85 	bl	8003708 <HAL_GetTick>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005002:	f7fe fb81 	bl	8003708 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b03      	cmp	r3, #3
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e1a1      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005014:	f7ff fc22 	bl	800485c <LL_RCC_LSI2_IsReady>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f1      	bne.n	8005002 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800501e:	f7ff fbd8 	bl	80047d2 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005022:	f7fe fb71 	bl	8003708 <HAL_GetTick>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800502a:	f7fe fb6d 	bl	8003708 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e18d      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800503c:	f7ff fbda 	bl	80047f4 <LL_RCC_LSI1_IsReady>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1f1      	bne.n	800502a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	2b00      	cmp	r3, #0
 8005050:	d05b      	beq.n	800510a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005052:	4bb5      	ldr	r3, [pc, #724]	; (8005328 <HAL_RCC_OscConfig+0x6e0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d114      	bne.n	8005088 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800505e:	f7ff f99f 	bl	80043a0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005062:	f7fe fb51 	bl	8003708 <HAL_GetTick>
 8005066:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800506a:	f7fe fb4d 	bl	8003708 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e16d      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800507c:	4baa      	ldr	r3, [pc, #680]	; (8005328 <HAL_RCC_OscConfig+0x6e0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005084:	2b00      	cmp	r3, #0
 8005086:	d0f0      	beq.n	800506a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	2b01      	cmp	r3, #1
 800508e:	d102      	bne.n	8005096 <HAL_RCC_OscConfig+0x44e>
 8005090:	f7ff fb38 	bl	8004704 <LL_RCC_LSE_Enable>
 8005094:	e00c      	b.n	80050b0 <HAL_RCC_OscConfig+0x468>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d104      	bne.n	80050a8 <HAL_RCC_OscConfig+0x460>
 800509e:	f7ff fb53 	bl	8004748 <LL_RCC_LSE_EnableBypass>
 80050a2:	f7ff fb2f 	bl	8004704 <LL_RCC_LSE_Enable>
 80050a6:	e003      	b.n	80050b0 <HAL_RCC_OscConfig+0x468>
 80050a8:	f7ff fb3d 	bl	8004726 <LL_RCC_LSE_Disable>
 80050ac:	f7ff fb5d 	bl	800476a <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d014      	beq.n	80050e2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fe fb26 	bl	8003708 <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050c0:	f7fe fb22 	bl	8003708 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e140      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80050d6:	f7ff fb59 	bl	800478c <LL_RCC_LSE_IsReady>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0ef      	beq.n	80050c0 <HAL_RCC_OscConfig+0x478>
 80050e0:	e013      	b.n	800510a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e2:	f7fe fb11 	bl	8003708 <HAL_GetTick>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80050e8:	e00a      	b.n	8005100 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ea:	f7fe fb0d 	bl	8003708 <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e12b      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005100:	f7ff fb44 	bl	800478c <LL_RCC_LSE_IsReady>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1ef      	bne.n	80050ea <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02c      	beq.n	8005170 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	2b00      	cmp	r3, #0
 800511c:	d014      	beq.n	8005148 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800511e:	f7ff fabd 	bl	800469c <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005122:	f7fe faf1 	bl	8003708 <HAL_GetTick>
 8005126:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800512a:	f7fe faed 	bl	8003708 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e10d      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800513c:	f7ff fad0 	bl	80046e0 <LL_RCC_HSI48_IsReady>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f1      	beq.n	800512a <HAL_RCC_OscConfig+0x4e2>
 8005146:	e013      	b.n	8005170 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005148:	f7ff fab9 	bl	80046be <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514c:	f7fe fadc 	bl	8003708 <HAL_GetTick>
 8005150:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005154:	f7fe fad8 	bl	8003708 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e0f8      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005166:	f7ff fabb 	bl	80046e0 <LL_RCC_HSI48_IsReady>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1f1      	bne.n	8005154 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80ee 	beq.w	8005356 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800517a:	f7ff fc19 	bl	80049b0 <LL_RCC_GetSysClkSource>
 800517e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	2b02      	cmp	r3, #2
 800518e:	f040 80af 	bne.w	80052f0 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f003 0203 	and.w	r2, r3, #3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	429a      	cmp	r2, r3
 800519e:	d123      	bne.n	80051e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d11c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	0a1b      	lsrs	r3, r3, #8
 80051b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d114      	bne.n	80051e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d10d      	bne.n	80051e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d106      	bne.n	80051e8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d05d      	beq.n	80052a4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d058      	beq.n	80052a0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e0ab      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005200:	f7ff fc74 	bl	8004aec <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005204:	f7fe fa80 	bl	8003708 <HAL_GetTick>
 8005208:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520c:	f7fe fa7c 	bl	8003708 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e09c      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ef      	bne.n	800520c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800522c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005230:	68da      	ldr	r2, [r3, #12]
 8005232:	4b3e      	ldr	r3, [pc, #248]	; (800532c <HAL_RCC_OscConfig+0x6e4>)
 8005234:	4013      	ands	r3, r2
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800523e:	4311      	orrs	r1, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005244:	0212      	lsls	r2, r2, #8
 8005246:	4311      	orrs	r1, r2
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800524c:	4311      	orrs	r1, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005252:	4311      	orrs	r1, r2
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005258:	430a      	orrs	r2, r1
 800525a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800525e:	4313      	orrs	r3, r2
 8005260:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005262:	f7ff fc34 	bl	8004ace <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005274:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005276:	f7fe fa47 	bl	8003708 <HAL_GetTick>
 800527a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800527e:	f7fe fa43 	bl	8003708 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e063      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0ef      	beq.n	800527e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800529e:	e05a      	b.n	8005356 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e059      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d151      	bne.n	8005356 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052b2:	f7ff fc0c 	bl	8004ace <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052c6:	f7fe fa1f 	bl	8003708 <HAL_GetTick>
 80052ca:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ce:	f7fe fa1b 	bl	8003708 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e03b      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d0ef      	beq.n	80052ce <HAL_RCC_OscConfig+0x686>
 80052ee:	e032      	b.n	8005356 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d02d      	beq.n	8005352 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f6:	f7ff fbf9 	bl	8004aec <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80052fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005314:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800531c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fe f9f3 	bl	8003708 <HAL_GetTick>
 8005322:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005324:	e00d      	b.n	8005342 <HAL_RCC_OscConfig+0x6fa>
 8005326:	bf00      	nop
 8005328:	58000400 	.word	0x58000400
 800532c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005330:	f7fe f9ea 	bl	8003708 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b02      	cmp	r3, #2
 800533c:	d901      	bls.n	8005342 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e00a      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ef      	bne.n	8005330 <HAL_RCC_OscConfig+0x6e8>
 8005350:	e001      	b.n	8005356 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3734      	adds	r7, #52	; 0x34
 800535c:	46bd      	mov	sp, r7
 800535e:	bd90      	pop	{r4, r7, pc}

08005360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e12d      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005374:	4b98      	ldr	r3, [pc, #608]	; (80055d8 <HAL_RCC_ClockConfig+0x278>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0307 	and.w	r3, r3, #7
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d91b      	bls.n	80053ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005382:	4b95      	ldr	r3, [pc, #596]	; (80055d8 <HAL_RCC_ClockConfig+0x278>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 0207 	bic.w	r2, r3, #7
 800538a:	4993      	ldr	r1, [pc, #588]	; (80055d8 <HAL_RCC_ClockConfig+0x278>)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005392:	f7fe f9b9 	bl	8003708 <HAL_GetTick>
 8005396:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005398:	e008      	b.n	80053ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800539a:	f7fe f9b5 	bl	8003708 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e111      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ac:	4b8a      	ldr	r3, [pc, #552]	; (80055d8 <HAL_RCC_ClockConfig+0x278>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d1ef      	bne.n	800539a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0302 	and.w	r3, r3, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d016      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fafc 	bl	80049c8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80053d0:	f7fe f99a 	bl	8003708 <HAL_GetTick>
 80053d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80053d8:	f7fe f996 	bl	8003708 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e0f2      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80053ea:	f7ff fbd1 	bl	8004b90 <LL_RCC_IsActiveFlag_HPRE>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0f1      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d016      	beq.n	800542e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff faf3 	bl	80049f0 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800540a:	f7fe f97d 	bl	8003708 <HAL_GetTick>
 800540e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005410:	e008      	b.n	8005424 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005412:	f7fe f979 	bl	8003708 <HAL_GetTick>
 8005416:	4602      	mov	r2, r0
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0d5      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005424:	f7ff fbc6 	bl	8004bb4 <LL_RCC_IsActiveFlag_C2HPRE>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f1      	beq.n	8005412 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d016      	beq.n	8005468 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff faec 	bl	8004a1c <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005444:	f7fe f960 	bl	8003708 <HAL_GetTick>
 8005448:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800544a:	e008      	b.n	800545e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800544c:	f7fe f95c 	bl	8003708 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d901      	bls.n	800545e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0b8      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800545e:	f7ff fbbc 	bl	8004bda <LL_RCC_IsActiveFlag_SHDHPRE>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d0f1      	beq.n	800544c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d016      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff fae6 	bl	8004a4a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800547e:	f7fe f943 	bl	8003708 <HAL_GetTick>
 8005482:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005484:	e008      	b.n	8005498 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005486:	f7fe f93f 	bl	8003708 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e09b      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005498:	f7ff fbb2 	bl	8004c00 <LL_RCC_IsActiveFlag_PPRE1>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0f1      	beq.n	8005486 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d017      	beq.n	80054de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fadc 	bl	8004a72 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054ba:	f7fe f925 	bl	8003708 <HAL_GetTick>
 80054be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054c2:	f7fe f921 	bl	8003708 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e07d      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054d4:	f7ff fba6 	bl	8004c24 <LL_RCC_IsActiveFlag_PPRE2>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f1      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d043      	beq.n	8005572 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80054f2:	f7ff f87c 	bl	80045ee <LL_RCC_HSE_IsReady>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d11e      	bne.n	800553a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e067      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b03      	cmp	r3, #3
 8005506:	d106      	bne.n	8005516 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005508:	f7ff faff 	bl	8004b0a <LL_RCC_PLL_IsReady>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d113      	bne.n	800553a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e05c      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800551e:	f7ff f9e4 	bl	80048ea <LL_RCC_MSI_IsReady>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d108      	bne.n	800553a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e051      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800552c:	f7ff f88f 	bl	800464e <LL_RCC_HSI_IsReady>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e04a      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fa22 	bl	8004988 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005544:	f7fe f8e0 	bl	8003708 <HAL_GetTick>
 8005548:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800554a:	e00a      	b.n	8005562 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800554c:	f7fe f8dc 	bl	8003708 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	; 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e036      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005562:	f7ff fa25 	bl	80049b0 <LL_RCC_GetSysClkSource>
 8005566:	4602      	mov	r2, r0
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	429a      	cmp	r2, r3
 8005570:	d1ec      	bne.n	800554c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005572:	4b19      	ldr	r3, [pc, #100]	; (80055d8 <HAL_RCC_ClockConfig+0x278>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	429a      	cmp	r2, r3
 800557e:	d21b      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005580:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_RCC_ClockConfig+0x278>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 0207 	bic.w	r2, r3, #7
 8005588:	4913      	ldr	r1, [pc, #76]	; (80055d8 <HAL_RCC_ClockConfig+0x278>)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005590:	f7fe f8ba 	bl	8003708 <HAL_GetTick>
 8005594:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005596:	e008      	b.n	80055aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005598:	f7fe f8b6 	bl	8003708 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e012      	b.n	80055d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_RCC_ClockConfig+0x278>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	683a      	ldr	r2, [r7, #0]
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d1ef      	bne.n	8005598 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80055b8:	f000 f87e 	bl	80056b8 <HAL_RCC_GetHCLKFreq>
 80055bc:	4603      	mov	r3, r0
 80055be:	4a07      	ldr	r2, [pc, #28]	; (80055dc <HAL_RCC_ClockConfig+0x27c>)
 80055c0:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80055c2:	f7fe f8ad 	bl	8003720 <HAL_GetTickPrio>
 80055c6:	4603      	mov	r3, r0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe f84f 	bl	800366c <HAL_InitTick>
 80055ce:	4603      	mov	r3, r0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	58004000 	.word	0x58004000
 80055dc:	2000004c 	.word	0x2000004c

080055e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e0:	b590      	push	{r4, r7, lr}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055e6:	f7ff f9e3 	bl	80049b0 <LL_RCC_GetSysClkSource>
 80055ea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80055f2:	f7ff f99f 	bl	8004934 <LL_RCC_MSI_GetRange>
 80055f6:	4603      	mov	r3, r0
 80055f8:	091b      	lsrs	r3, r3, #4
 80055fa:	f003 030f 	and.w	r3, r3, #15
 80055fe:	4a2b      	ldr	r2, [pc, #172]	; (80056ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8005600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	e04b      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b04      	cmp	r3, #4
 800560c:	d102      	bne.n	8005614 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800560e:	4b28      	ldr	r3, [pc, #160]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	e045      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b08      	cmp	r3, #8
 8005618:	d10a      	bne.n	8005630 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800561a:	f7fe ffb8 	bl	800458e <LL_RCC_HSE_IsEnabledDiv2>
 800561e:	4603      	mov	r3, r0
 8005620:	2b01      	cmp	r3, #1
 8005622:	d102      	bne.n	800562a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005624:	4b22      	ldr	r3, [pc, #136]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e03a      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800562a:	4b22      	ldr	r3, [pc, #136]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	e037      	b.n	80056a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005630:	f7ff faa2 	bl	8004b78 <LL_RCC_PLL_GetMainSource>
 8005634:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b02      	cmp	r3, #2
 800563a:	d003      	beq.n	8005644 <HAL_RCC_GetSysClockFreq+0x64>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b03      	cmp	r3, #3
 8005640:	d003      	beq.n	800564a <HAL_RCC_GetSysClockFreq+0x6a>
 8005642:	e00d      	b.n	8005660 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005644:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005646:	60bb      	str	r3, [r7, #8]
        break;
 8005648:	e015      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800564a:	f7fe ffa0 	bl	800458e <LL_RCC_HSE_IsEnabledDiv2>
 800564e:	4603      	mov	r3, r0
 8005650:	2b01      	cmp	r3, #1
 8005652:	d102      	bne.n	800565a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005654:	4b16      	ldr	r3, [pc, #88]	; (80056b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005656:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005658:	e00d      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800565a:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800565c:	60bb      	str	r3, [r7, #8]
        break;
 800565e:	e00a      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005660:	f7ff f968 	bl	8004934 <LL_RCC_MSI_GetRange>
 8005664:	4603      	mov	r3, r0
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	4a0f      	ldr	r2, [pc, #60]	; (80056ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800566e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005672:	60bb      	str	r3, [r7, #8]
        break;
 8005674:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005676:	f7ff fa5a 	bl	8004b2e <LL_RCC_PLL_GetN>
 800567a:	4602      	mov	r2, r0
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	fb03 f402 	mul.w	r4, r3, r2
 8005682:	f7ff fa6d 	bl	8004b60 <LL_RCC_PLL_GetDivider>
 8005686:	4603      	mov	r3, r0
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	3301      	adds	r3, #1
 800568c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005690:	f7ff fa5a 	bl	8004b48 <LL_RCC_PLL_GetR>
 8005694:	4603      	mov	r3, r0
 8005696:	0f5b      	lsrs	r3, r3, #29
 8005698:	3301      	adds	r3, #1
 800569a:	fbb4 f3f3 	udiv	r3, r4, r3
 800569e:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80056a0:	68fb      	ldr	r3, [r7, #12]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd90      	pop	{r4, r7, pc}
 80056aa:	bf00      	nop
 80056ac:	0800af88 	.word	0x0800af88
 80056b0:	00f42400 	.word	0x00f42400
 80056b4:	01e84800 	.word	0x01e84800

080056b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056b8:	b598      	push	{r3, r4, r7, lr}
 80056ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80056bc:	f7ff ff90 	bl	80055e0 <HAL_RCC_GetSysClockFreq>
 80056c0:	4604      	mov	r4, r0
 80056c2:	f7ff f9ea 	bl	8004a9a <LL_RCC_GetAHBPrescaler>
 80056c6:	4603      	mov	r3, r0
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	4a03      	ldr	r2, [pc, #12]	; (80056dc <HAL_RCC_GetHCLKFreq+0x24>)
 80056d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80056d8:	4618      	mov	r0, r3
 80056da:	bd98      	pop	{r3, r4, r7, pc}
 80056dc:	0800af48 	.word	0x0800af48

080056e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80056e0:	b590      	push	{r4, r7, lr}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2bb0      	cmp	r3, #176	; 0xb0
 80056ec:	d903      	bls.n	80056f6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e007      	b.n	8005706 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	4a11      	ldr	r2, [pc, #68]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005704:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005706:	f7ff f9d4 	bl	8004ab2 <LL_RCC_GetAHB4Prescaler>
 800570a:	4603      	mov	r3, r0
 800570c:	091b      	lsrs	r3, r3, #4
 800570e:	f003 030f 	and.w	r3, r3, #15
 8005712:	4a0d      	ldr	r2, [pc, #52]	; (8005748 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	fbb2 f3f3 	udiv	r3, r2, r3
 800571e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4a0a      	ldr	r2, [pc, #40]	; (800574c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	0c9c      	lsrs	r4, r3, #18
 800572a:	f7fe feeb 	bl	8004504 <HAL_PWREx_GetVoltageRange>
 800572e:	4603      	mov	r3, r0
 8005730:	4619      	mov	r1, r3
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f80c 	bl	8005750 <RCC_SetFlashLatency>
 8005738:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	bd90      	pop	{r4, r7, pc}
 8005742:	bf00      	nop
 8005744:	0800af88 	.word	0x0800af88
 8005748:	0800af48 	.word	0x0800af48
 800574c:	431bde83 	.word	0x431bde83

08005750 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005750:	b590      	push	{r4, r7, lr}
 8005752:	b093      	sub	sp, #76	; 0x4c
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800575a:	4b39      	ldr	r3, [pc, #228]	; (8005840 <RCC_SetFlashLatency+0xf0>)
 800575c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005760:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005762:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005766:	4a37      	ldr	r2, [pc, #220]	; (8005844 <RCC_SetFlashLatency+0xf4>)
 8005768:	f107 031c 	add.w	r3, r7, #28
 800576c:	ca07      	ldmia	r2, {r0, r1, r2}
 800576e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005772:	4b35      	ldr	r3, [pc, #212]	; (8005848 <RCC_SetFlashLatency+0xf8>)
 8005774:	f107 040c 	add.w	r4, r7, #12
 8005778:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800577a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800577e:	2300      	movs	r3, #0
 8005780:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005788:	d11c      	bne.n	80057c4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800578a:	2300      	movs	r3, #0
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
 800578e:	e015      	b.n	80057bc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005798:	4413      	add	r3, r2
 800579a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d808      	bhi.n	80057b6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80057a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80057ac:	4413      	add	r3, r2
 80057ae:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80057b2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80057b4:	e022      	b.n	80057fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b8:	3301      	adds	r3, #1
 80057ba:	643b      	str	r3, [r7, #64]	; 0x40
 80057bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057be:	2b03      	cmp	r3, #3
 80057c0:	d9e6      	bls.n	8005790 <RCC_SetFlashLatency+0x40>
 80057c2:	e01b      	b.n	80057fc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80057c4:	2300      	movs	r3, #0
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c8:	e015      	b.n	80057f6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80057d2:	4413      	add	r3, r2
 80057d4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d808      	bhi.n	80057f0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80057de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80057e6:	4413      	add	r3, r2
 80057e8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80057ec:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80057ee:	e005      	b.n	80057fc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	3301      	adds	r3, #1
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d9e6      	bls.n	80057ca <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80057fc:	4b13      	ldr	r3, [pc, #76]	; (800584c <RCC_SetFlashLatency+0xfc>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f023 0207 	bic.w	r2, r3, #7
 8005804:	4911      	ldr	r1, [pc, #68]	; (800584c <RCC_SetFlashLatency+0xfc>)
 8005806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005808:	4313      	orrs	r3, r2
 800580a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800580c:	f7fd ff7c 	bl	8003708 <HAL_GetTick>
 8005810:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005812:	e008      	b.n	8005826 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005814:	f7fd ff78 	bl	8003708 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e007      	b.n	8005836 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005826:	4b09      	ldr	r3, [pc, #36]	; (800584c <RCC_SetFlashLatency+0xfc>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005830:	429a      	cmp	r2, r3
 8005832:	d1ef      	bne.n	8005814 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	374c      	adds	r7, #76	; 0x4c
 800583a:	46bd      	mov	sp, r7
 800583c:	bd90      	pop	{r4, r7, pc}
 800583e:	bf00      	nop
 8005840:	0800ada0 	.word	0x0800ada0
 8005844:	0800adb0 	.word	0x0800adb0
 8005848:	0800adbc 	.word	0x0800adbc
 800584c:	58004000 	.word	0x58004000

08005850 <LL_RCC_LSE_IsEnabled>:
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <LL_RCC_LSE_IsEnabled+0x18>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <LL_RCC_LSE_IsEnabled+0x1a>
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <LL_RCC_LSE_IsReady>:
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b02      	cmp	r3, #2
 8005886:	d101      	bne.n	800588c <LL_RCC_LSE_IsReady+0x18>
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <LL_RCC_LSE_IsReady+0x1a>
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <LL_RCC_SetRFWKPClockSource>:
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80058a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80058b8:	bf00      	nop
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <LL_RCC_SetSMPSClockSource>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80058cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d2:	f023 0203 	bic.w	r2, r3, #3
 80058d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4313      	orrs	r3, r2
 80058de:	624b      	str	r3, [r1, #36]	; 0x24
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <LL_RCC_SetSMPSPrescaler>:
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80058f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4313      	orrs	r3, r2
 8005906:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <LL_RCC_SetUSARTClockSource>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f023 0203 	bic.w	r2, r3, #3
 8005928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <LL_RCC_SetLPUARTClockSource>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <LL_RCC_SetI2CClockSource>:
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005978:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005984:	43db      	mvns	r3, r3
 8005986:	401a      	ands	r2, r3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005994:	4313      	orrs	r3, r2
 8005996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <LL_RCC_SetLPTIMClockSource>:
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	041b      	lsls	r3, r3, #16
 80059bc:	43db      	mvns	r3, r3
 80059be:	401a      	ands	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	041b      	lsls	r3, r3, #16
 80059c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <LL_RCC_SetSAIClockSource>:
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_RCC_SetRNGClockSource>:
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_SetCLK48ClockSource>:
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <LL_RCC_SetUSBClockSource>:
{
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b082      	sub	sp, #8
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff ffe3 	bl	8005a32 <LL_RCC_SetCLK48ClockSource>
}
 8005a6c:	bf00      	nop
 8005a6e:	3708      	adds	r7, #8
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <LL_RCC_SetADCClockSource>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a84:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LL_RCC_SetRTCClockSource>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ab4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <LL_RCC_GetRTCClockSource>:
{
 8005acc:	b480      	push	{r7}
 8005ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <LL_RCC_ForceBackupDomainReset>:
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005afe:	bf00      	nop
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005b20:	bf00      	nop
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <LL_RCC_PLLSAI1_Enable>:
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b3c:	6013      	str	r3, [r2, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <LL_RCC_PLLSAI1_Disable>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b5a:	6013      	str	r3, [r2, #0]
}
 8005b5c:	bf00      	nop
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <LL_RCC_PLLSAI1_IsReady>:
{
 8005b66:	b480      	push	{r7}
 8005b68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b78:	d101      	bne.n	8005b7e <LL_RCC_PLLSAI1_IsReady+0x18>
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e000      	b.n	8005b80 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b088      	sub	sp, #32
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005b92:	2300      	movs	r3, #0
 8005b94:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005b96:	2300      	movs	r3, #0
 8005b98:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d034      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bae:	d021      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005bb0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005bb4:	d81b      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bba:	d01d      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005bbc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005bc0:	d815      	bhi.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bca:	d110      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bda:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bdc:	e00d      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 f947 	bl	8005e76 <RCCEx_PLLSAI1_ConfigNP>
 8005be8:	4603      	mov	r3, r0
 8005bea:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005bec:	e005      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	77fb      	strb	r3, [r7, #31]
        break;
 8005bf2:	e002      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bf4:	bf00      	nop
 8005bf6:	e000      	b.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005bf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bfa:	7ffb      	ldrb	r3, [r7, #31]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff fee8 	bl	80059da <LL_RCC_SetSAIClockSource>
 8005c0a:	e001      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c0c:	7ffb      	ldrb	r3, [r7, #31]
 8005c0e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d046      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005c1c:	f7ff ff56 	bl	8005acc <LL_RCC_GetRTCClockSource>
 8005c20:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d03c      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005c2c:	f7fe fbb8 	bl	80043a0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d105      	bne.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f7ff ff30 	bl	8005aa0 <LL_RCC_SetRTCClockSource>
 8005c40:	e02e      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005c4c:	f7ff ff4b 	bl	8005ae6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005c50:	f7ff ff5a 	bl	8005b08 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005c62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005c6c:	f7ff fdf0 	bl	8005850 <LL_RCC_LSE_IsEnabled>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d114      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c76:	f7fd fd47 	bl	8003708 <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c7c:	e00b      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c7e:	f7fd fd43 	bl	8003708 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d902      	bls.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	77fb      	strb	r3, [r7, #31]
              break;
 8005c94:	e004      	b.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005c96:	f7ff fded 	bl	8005874 <LL_RCC_LSE_IsReady>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d1ee      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005ca0:	7ffb      	ldrb	r3, [r7, #31]
 8005ca2:	77bb      	strb	r3, [r7, #30]
 8005ca4:	e001      	b.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca6:	7ffb      	ldrb	r3, [r7, #31]
 8005ca8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d004      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	699b      	ldr	r3, [r3, #24]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff fe2a 	bl	8005914 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d004      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	69db      	ldr	r3, [r3, #28]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fe35 	bl	8005940 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fe5d 	bl	80059a6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d004      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fe52 	bl	80059a6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d004      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fe2a 	bl	800596c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d004      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fe1f 	bl	800596c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d022      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fe8d 	bl	8005a5e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d5c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d66:	d10b      	bne.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f8dd 	bl	8005f2c <RCCEx_PLLSAI1_ConfigNQ>
 8005d72:	4603      	mov	r3, r0
 8005d74:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005d76:	7ffb      	ldrb	r3, [r7, #31]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8005d7c:	7ffb      	ldrb	r3, [r7, #31]
 8005d7e:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d02b      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d94:	d008      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d9e:	d003      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d105      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	4618      	mov	r0, r3
 8005dae:	f7ff fe2a 	bl	8005a06 <LL_RCC_SetRNGClockSource>
 8005db2:	e00a      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	f7ff fe21 	bl	8005a06 <LL_RCC_SetRNGClockSource>
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff fe34 	bl	8005a32 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dce:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005de2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d022      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7ff fe3d 	bl	8005a74 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e02:	d107      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e12:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e1c:	d10b      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 f8dd 	bl	8005fe2 <RCCEx_PLLSAI1_ConfigNR>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005e2c:	7ffb      	ldrb	r3, [r7, #31]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8005e32:	7ffb      	ldrb	r3, [r7, #31]
 8005e34:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fd26 	bl	8005898 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fd45 	bl	80058ec <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fd2c 	bl	80058c4 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8005e6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e82:	f7ff fe61 	bl	8005b48 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e86:	f7fd fc3f 	bl	8003708 <HAL_GetTick>
 8005e8a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e8c:	e009      	b.n	8005ea2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e8e:	f7fd fc3b 	bl	8003708 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d902      	bls.n	8005ea2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	e004      	b.n	8005eac <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ea2:	f7ff fe60 	bl	8005b66 <LL_RCC_PLLSAI1_IsReady>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f0      	bne.n	8005e8e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d137      	bne.n	8005f22 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	021b      	lsls	r3, r3, #8
 8005ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005edc:	4313      	orrs	r3, r2
 8005ede:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005ee0:	f7ff fe23 	bl	8005b2a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee4:	f7fd fc10 	bl	8003708 <HAL_GetTick>
 8005ee8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005eea:	e009      	b.n	8005f00 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005eec:	f7fd fc0c 	bl	8003708 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d902      	bls.n	8005f00 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	73fb      	strb	r3, [r7, #15]
        break;
 8005efe:	e004      	b.n	8005f0a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f00:	f7ff fe31 	bl	8005b66 <LL_RCC_PLLSAI1_IsReady>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d1f0      	bne.n	8005eec <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d108      	bne.n	8005f22 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f34:	2300      	movs	r3, #0
 8005f36:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f38:	f7ff fe06 	bl	8005b48 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f3c:	f7fd fbe4 	bl	8003708 <HAL_GetTick>
 8005f40:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f42:	e009      	b.n	8005f58 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f44:	f7fd fbe0 	bl	8003708 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d902      	bls.n	8005f58 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	73fb      	strb	r3, [r7, #15]
      break;
 8005f56:	e004      	b.n	8005f62 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f58:	f7ff fe05 	bl	8005b66 <LL_RCC_PLLSAI1_IsReady>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f0      	bne.n	8005f44 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d137      	bne.n	8005fd8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f92:	4313      	orrs	r3, r2
 8005f94:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f96:	f7ff fdc8 	bl	8005b2a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f9a:	f7fd fbb5 	bl	8003708 <HAL_GetTick>
 8005f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fa0:	e009      	b.n	8005fb6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fa2:	f7fd fbb1 	bl	8003708 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d902      	bls.n	8005fb6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	73fb      	strb	r3, [r7, #15]
        break;
 8005fb4:	e004      	b.n	8005fc0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fb6:	f7ff fdd6 	bl	8005b66 <LL_RCC_PLLSAI1_IsReady>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d1f0      	bne.n	8005fa2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d108      	bne.n	8005fd8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fea:	2300      	movs	r3, #0
 8005fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005fee:	f7ff fdab 	bl	8005b48 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ff2:	f7fd fb89 	bl	8003708 <HAL_GetTick>
 8005ff6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005ff8:	e009      	b.n	800600e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ffa:	f7fd fb85 	bl	8003708 <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b02      	cmp	r3, #2
 8006006:	d902      	bls.n	800600e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006008:	2303      	movs	r3, #3
 800600a:	73fb      	strb	r3, [r7, #15]
      break;
 800600c:	e004      	b.n	8006018 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800600e:	f7ff fdaa 	bl	8005b66 <LL_RCC_PLLSAI1_IsReady>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1f0      	bne.n	8005ffa <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d137      	bne.n	800608e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800601e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006048:	4313      	orrs	r3, r2
 800604a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800604c:	f7ff fd6d 	bl	8005b2a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006050:	f7fd fb5a 	bl	8003708 <HAL_GetTick>
 8006054:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006056:	e009      	b.n	800606c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006058:	f7fd fb56 	bl	8003708 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d902      	bls.n	800606c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	73fb      	strb	r3, [r7, #15]
        break;
 800606a:	e004      	b.n	8006076 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800606c:	f7ff fd7b 	bl	8005b66 <LL_RCC_PLLSAI1_IsReady>
 8006070:	4603      	mov	r3, r0
 8006072:	2b01      	cmp	r3, #1
 8006074:	d1f0      	bne.n	8006058 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d108      	bne.n	800608e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800607c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800608a:	4313      	orrs	r3, r2
 800608c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800608e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e0b4      	b.n	8006214 <HAL_RTC_Init+0x17c>
  assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d12a      	bne.n	800610c <HAL_RTC_Init+0x74>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2020 	strb.w	r2, [r3, #32]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a56      	ldr	r2, [pc, #344]	; (800621c <HAL_RTC_Init+0x184>)
 80060c2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;      /* Legacy weak AlarmBEventCallback      */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a56      	ldr	r2, [pc, #344]	; (8006220 <HAL_RTC_Init+0x188>)
 80060c8:	629a      	str	r2, [r3, #40]	; 0x28
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a55      	ldr	r2, [pc, #340]	; (8006224 <HAL_RTC_Init+0x18c>)
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a55      	ldr	r2, [pc, #340]	; (8006228 <HAL_RTC_Init+0x190>)
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER1_SUPPORT)
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a54      	ldr	r2, [pc, #336]	; (800622c <HAL_RTC_Init+0x194>)
 80060da:	635a      	str	r2, [r3, #52]	; 0x34
#endif
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a54      	ldr	r2, [pc, #336]	; (8006230 <HAL_RTC_Init+0x198>)
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(RTC_TAMPER3_SUPPORT)
    hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamper3EventCallback     */
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a53      	ldr	r2, [pc, #332]	; (8006234 <HAL_RTC_Init+0x19c>)
 80060e6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

    if(hrtc->MspInitCallback == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d102      	bne.n	80060f6 <HAL_RTC_Init+0x5e>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a51      	ldr	r2, [pc, #324]	; (8006238 <HAL_RTC_Init+0x1a0>)
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3

    if(hrtc->MspDeInitCallback == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <HAL_RTC_Init+0x74>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a4c      	ldr	r2, [pc, #304]	; (800623c <HAL_RTC_Init+0x1a4>)
 800610a:	645a      	str	r2, [r3, #68]	; 0x44
    HAL_RTC_MspInit(hrtc);
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2202      	movs	r2, #2
 8006110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	22ca      	movs	r2, #202	; 0xca
 800611a:	625a      	str	r2, [r3, #36]	; 0x24
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2253      	movs	r2, #83	; 0x53
 8006122:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 fad6 	bl	80066d6 <RTC_EnterInitMode>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <HAL_RTC_Init+0xac>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	22ff      	movs	r2, #255	; 0xff
 8006136:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2204      	movs	r2, #4
 800613c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e067      	b.n	8006214 <HAL_RTC_Init+0x17c>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6812      	ldr	r2, [r2, #0]
 800614e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006152:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006156:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	431a      	orrs	r2, r3
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	68d2      	ldr	r2, [r2, #12]
 800617e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6919      	ldr	r1, [r3, #16]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	041a      	lsls	r2, r3, #16
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	430a      	orrs	r2, r1
 8006192:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061a2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f022 0203 	bic.w	r2, r2, #3
 80061b2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69da      	ldr	r2, [r3, #28]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 0320 	and.w	r3, r3, #32
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d113      	bne.n	8006202 <HAL_RTC_Init+0x16a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fa55 	bl	800668a <HAL_RTC_WaitForSynchro>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <HAL_RTC_Init+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	22ff      	movs	r2, #255	; 0xff
 80061ec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2204      	movs	r2, #4
 80061f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e008      	b.n	8006214 <HAL_RTC_Init+0x17c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	22ff      	movs	r2, #255	; 0xff
 8006208:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8006212:	2300      	movs	r3, #0
  }
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	08006677 	.word	0x08006677
 8006220:	080068cf 	.word	0x080068cf
 8006224:	080067a3 	.word	0x080067a3
 8006228:	080067f3 	.word	0x080067f3
 800622c:	080067b7 	.word	0x080067b7
 8006230:	080067cb 	.word	0x080067cb
 8006234:	080067df 	.word	0x080067df
 8006238:	08002239 	.word	0x08002239
 800623c:	08002279 	.word	0x08002279

08006240 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_RTC_SetTime+0x1a>
 8006256:	2302      	movs	r3, #2
 8006258:	e0b2      	b.n	80063c0 <HAL_RTC_SetTime+0x180>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2202      	movs	r2, #2
 8006266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d126      	bne.n	80062be <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627a:	2b00      	cmp	r3, #0
 800627c:	d102      	bne.n	8006284 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	2200      	movs	r2, #0
 8006282:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	4618      	mov	r0, r3
 800628a:	f000 fa4e 	bl	800672a <RTC_ByteToBcd2>
 800628e:	4603      	mov	r3, r0
 8006290:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	785b      	ldrb	r3, [r3, #1]
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fa47 	bl	800672a <RTC_ByteToBcd2>
 800629c:	4603      	mov	r3, r0
 800629e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80062a0:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	789b      	ldrb	r3, [r3, #2]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fa3f 	bl	800672a <RTC_ByteToBcd2>
 80062ac:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80062ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	78db      	ldrb	r3, [r3, #3]
 80062b6:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e018      	b.n	80062f0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	785b      	ldrb	r3, [r3, #1]
 80062dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80062de:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80062e0:	68ba      	ldr	r2, [r7, #8]
 80062e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80062e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	22ca      	movs	r2, #202	; 0xca
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2253      	movs	r2, #83	; 0x53
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 f9e8 	bl	80066d6 <RTC_EnterInitMode>
 8006306:	4603      	mov	r3, r0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	22ff      	movs	r2, #255	; 0xff
 8006312:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2204      	movs	r2, #4
 8006318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e04b      	b.n	80063c0 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006332:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006336:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689a      	ldr	r2, [r3, #8]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006346:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6899      	ldr	r1, [r3, #8]
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	68da      	ldr	r2, [r3, #12]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	431a      	orrs	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800636e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b00      	cmp	r3, #0
 800637c:	d113      	bne.n	80063a6 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f983 	bl	800668a <HAL_RTC_WaitForSynchro>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00d      	beq.n	80063a6 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	22ff      	movs	r2, #255	; 0xff
 8006390:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2204      	movs	r2, #4
 8006396:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e00c      	b.n	80063c0 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	22ff      	movs	r2, #255	; 0xff
 80063ac:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 80063be:	2300      	movs	r3, #0
  }
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd90      	pop	{r4, r7, pc}

080063c8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80063f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80063fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	0c1b      	lsrs	r3, r3, #16
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006406:	b2da      	uxtb	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	0a1b      	lsrs	r3, r3, #8
 8006410:	b2db      	uxtb	r3, r3
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	b2da      	uxtb	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	b2da      	uxtb	r2, r3
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d11a      	bne.n	8006476 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f000 f990 	bl	800676a <RTC_Bcd2ToByte>
 800644a:	4603      	mov	r3, r0
 800644c:	461a      	mov	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f987 	bl	800676a <RTC_Bcd2ToByte>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	789b      	ldrb	r3, [r3, #2]
 8006468:	4618      	mov	r0, r3
 800646a:	f000 f97e 	bl	800676a <RTC_Bcd2ToByte>
 800646e:	4603      	mov	r3, r0
 8006470:	461a      	mov	r2, r3
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3718      	adds	r7, #24
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_RTC_SetDate+0x1a>
 8006496:	2302      	movs	r3, #2
 8006498:	e09c      	b.n	80065d4 <HAL_RTC_SetDate+0x154>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2202      	movs	r2, #2
 80064a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10e      	bne.n	80064ce <HAL_RTC_SetDate+0x4e>
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	f023 0310 	bic.w	r3, r3, #16
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	330a      	adds	r3, #10
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d11c      	bne.n	800650e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	78db      	ldrb	r3, [r3, #3]
 80064d8:	4618      	mov	r0, r3
 80064da:	f000 f926 	bl	800672a <RTC_ByteToBcd2>
 80064de:	4603      	mov	r3, r0
 80064e0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	785b      	ldrb	r3, [r3, #1]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f91f 	bl	800672a <RTC_ByteToBcd2>
 80064ec:	4603      	mov	r3, r0
 80064ee:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80064f0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	789b      	ldrb	r3, [r3, #2]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 f917 	bl	800672a <RTC_ByteToBcd2>
 80064fc:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80064fe:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
 800650c:	e00e      	b.n	800652c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	78db      	ldrb	r3, [r3, #3]
 8006512:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	785b      	ldrb	r3, [r3, #1]
 8006518:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800651a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006520:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006528:	4313      	orrs	r3, r2
 800652a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	22ca      	movs	r2, #202	; 0xca
 8006532:	625a      	str	r2, [r3, #36]	; 0x24
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2253      	movs	r2, #83	; 0x53
 800653a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f8ca 	bl	80066d6 <RTC_EnterInitMode>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00d      	beq.n	8006564 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	22ff      	movs	r2, #255	; 0xff
 800654e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2204      	movs	r2, #4
 8006554:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e037      	b.n	80065d4 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800656e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006572:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006582:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d113      	bne.n	80065ba <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f879 	bl	800668a <HAL_RTC_WaitForSynchro>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00d      	beq.n	80065ba <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	22ff      	movs	r2, #255	; 0xff
 80065a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2204      	movs	r2, #4
 80065aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e00c      	b.n	80065d4 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80065d2:	2300      	movs	r3, #0
  }
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd90      	pop	{r4, r7, pc}

080065dc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80065f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80065f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	0c1b      	lsrs	r3, r3, #16
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	0a1b      	lsrs	r3, r3, #8
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	b2da      	uxtb	r2, r3
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800661a:	b2da      	uxtb	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	0b5b      	lsrs	r3, r3, #13
 8006624:	b2db      	uxtb	r3, r3
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	b2da      	uxtb	r2, r3
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d11a      	bne.n	800666c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	78db      	ldrb	r3, [r3, #3]
 800663a:	4618      	mov	r0, r3
 800663c:	f000 f895 	bl	800676a <RTC_Bcd2ToByte>
 8006640:	4603      	mov	r3, r0
 8006642:	461a      	mov	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	785b      	ldrb	r3, [r3, #1]
 800664c:	4618      	mov	r0, r3
 800664e:	f000 f88c 	bl	800676a <RTC_Bcd2ToByte>
 8006652:	4603      	mov	r3, r0
 8006654:	461a      	mov	r2, r3
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	789b      	ldrb	r3, [r3, #2]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 f883 	bl	800676a <RTC_Bcd2ToByte>
 8006664:	4603      	mov	r3, r0
 8006666:	461a      	mov	r2, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68da      	ldr	r2, [r3, #12]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066a0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80066a2:	f7fd f831 	bl	8003708 <HAL_GetTick>
 80066a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066a8:	e009      	b.n	80066be <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80066aa:	f7fd f82d 	bl	8003708 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066b8:	d901      	bls.n	80066be <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e007      	b.n	80066ce <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0ee      	beq.n	80066aa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b084      	sub	sp, #16
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d119      	bne.n	8006720 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f04f 32ff 	mov.w	r2, #4294967295
 80066f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80066f6:	f7fd f807 	bl	8003708 <HAL_GetTick>
 80066fa:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80066fc:	e009      	b.n	8006712 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80066fe:	f7fd f803 	bl	8003708 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800670c:	d901      	bls.n	8006712 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e007      	b.n	8006722 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0ee      	beq.n	80066fe <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	4603      	mov	r3, r0
 8006732:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006738:	79fb      	ldrb	r3, [r7, #7]
 800673a:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800673c:	e005      	b.n	800674a <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006744:	7afb      	ldrb	r3, [r7, #11]
 8006746:	3b0a      	subs	r3, #10
 8006748:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800674a:	7afb      	ldrb	r3, [r7, #11]
 800674c:	2b09      	cmp	r3, #9
 800674e:	d8f6      	bhi.n	800673e <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	b2da      	uxtb	r2, r3
 8006758:	7afb      	ldrb	r3, [r7, #11]
 800675a:	4313      	orrs	r3, r2
 800675c:	b2db      	uxtb	r3, r3
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	4603      	mov	r3, r0
 8006772:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	091b      	lsrs	r3, r3, #4
 8006778:	b2db      	uxtb	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	005b      	lsls	r3, r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	79fb      	ldrb	r3, [r7, #7]
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	b2db      	uxtb	r3, r3
 8006792:	4413      	add	r3, r2
 8006794:	b2db      	uxtb	r3, r3
}
 8006796:	4618      	mov	r0, r3
 8006798:	3714      	adds	r7, #20
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr

080067a2 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006806:	b480      	push	{r7}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3350      	adds	r3, #80	; 0x50
 8006818:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4413      	add	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	371c      	adds	r7, #28
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006836:	b480      	push	{r7}
 8006838:	b085      	sub	sp, #20
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3350      	adds	r3, #80	; 0x50
 8006846:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8006862:	b480      	push	{r7}
 8006864:	b083      	sub	sp, #12
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006874:	2302      	movs	r3, #2
 8006876:	e024      	b.n	80068c2 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2201      	movs	r2, #1
 800687c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	22ca      	movs	r2, #202	; 0xca
 800688e:	625a      	str	r2, [r3, #36]	; 0x24
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2253      	movs	r2, #83	; 0x53
 8006896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f042 0220 	orr.w	r2, r2, #32
 80068a6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	22ff      	movs	r2, #255	; 0xff
 80068ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b083      	sub	sp, #12
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80068d6:	bf00      	nop
 80068d8:	370c      	adds	r7, #12
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr

080068e2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e095      	b.n	8006a20 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d108      	bne.n	800690e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006904:	d009      	beq.n	800691a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	61da      	str	r2, [r3, #28]
 800690c:	e005      	b.n	800691a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2200      	movs	r2, #0
 8006912:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d106      	bne.n	800693a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7fb fcb5 	bl	80022a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2202      	movs	r2, #2
 800693e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006950:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800695a:	d902      	bls.n	8006962 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e002      	b.n	8006968 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006966:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006970:	d007      	beq.n	8006982 <HAL_SPI_Init+0xa0>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800697a:	d002      	beq.n	8006982 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006992:	431a      	orrs	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f003 0302 	and.w	r3, r3, #2
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	431a      	orrs	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069b0:	431a      	orrs	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	69db      	ldr	r3, [r3, #28]
 80069b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c4:	ea42 0103 	orr.w	r1, r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	0c1b      	lsrs	r3, r3, #16
 80069de:	f003 0204 	and.w	r2, r3, #4
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f0:	f003 0308 	and.w	r3, r3, #8
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80069fe:	ea42 0103 	orr.w	r1, r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a4e:	4013      	ands	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d118      	bne.n	8006a8a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f003 0320 	and.w	r3, r3, #32
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d013      	beq.n	8006a8a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	f003 0320 	and.w	r3, r3, #32
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d009      	beq.n	8006a8a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 81fb 	beq.w	8006e76 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	4798      	blx	r3
      }
      return;
 8006a88:	e1f5      	b.n	8006e76 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 80ef 	beq.w	8006c70 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4b73      	ldr	r3, [pc, #460]	; (8006c64 <HAL_UART_IRQHandler+0x23c>)
 8006a96:	4013      	ands	r3, r2
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d105      	bne.n	8006aa8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	4b72      	ldr	r3, [pc, #456]	; (8006c68 <HAL_UART_IRQHandler+0x240>)
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f000 80e4 	beq.w	8006c70 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d010      	beq.n	8006ad4 <HAL_UART_IRQHandler+0xac>
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00b      	beq.n	8006ad4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aca:	f043 0201 	orr.w	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d010      	beq.n	8006b00 <HAL_UART_IRQHandler+0xd8>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00b      	beq.n	8006b00 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2202      	movs	r2, #2
 8006aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006af6:	f043 0204 	orr.w	r2, r3, #4
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d010      	beq.n	8006b2c <HAL_UART_IRQHandler+0x104>
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00b      	beq.n	8006b2c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2204      	movs	r2, #4
 8006b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b22:	f043 0202 	orr.w	r2, r3, #2
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d015      	beq.n	8006b62 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d104      	bne.n	8006b4a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4b48      	ldr	r3, [pc, #288]	; (8006c64 <HAL_UART_IRQHandler+0x23c>)
 8006b44:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00b      	beq.n	8006b62 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2208      	movs	r2, #8
 8006b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b58:	f043 0208 	orr.w	r2, r3, #8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d011      	beq.n	8006b90 <HAL_UART_IRQHandler+0x168>
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00c      	beq.n	8006b90 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b86:	f043 0220 	orr.w	r2, r3, #32
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	f000 816f 	beq.w	8006e7a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d011      	beq.n	8006bca <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d104      	bne.n	8006bba <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d004      	beq.n	8006bea <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d031      	beq.n	8006c4e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f966 	bl	8006ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d123      	bne.n	8006c46 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c0c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d013      	beq.n	8006c3e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c1a:	4a14      	ldr	r2, [pc, #80]	; (8006c6c <HAL_UART_IRQHandler+0x244>)
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fc ffbe 	bl	8003ba4 <HAL_DMA_Abort_IT>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d017      	beq.n	8006c5e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	e00f      	b.n	8006c5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f926 	bl	8006e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c44:	e00b      	b.n	8006c5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f922 	bl	8006e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4c:	e007      	b.n	8006c5e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f91e 	bl	8006e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006c5c:	e10d      	b.n	8006e7a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5e:	bf00      	nop
    return;
 8006c60:	e10b      	b.n	8006e7a <HAL_UART_IRQHandler+0x452>
 8006c62:	bf00      	nop
 8006c64:	10000001 	.word	0x10000001
 8006c68:	04000120 	.word	0x04000120
 8006c6c:	08006f21 	.word	0x08006f21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	f040 80ab 	bne.w	8006dd0 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 80a5 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	f003 0310 	and.w	r3, r3, #16
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 809f 	beq.w	8006dd0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2210      	movs	r2, #16
 8006c98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d155      	bne.n	8006d54 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8006cb2:	893b      	ldrh	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80e2 	beq.w	8006e7e <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006cc0:	893a      	ldrh	r2, [r7, #8]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	f080 80db 	bcs.w	8006e7e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	893a      	ldrh	r2, [r7, #8]
 8006ccc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d12b      	bne.n	8006d38 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0201 	bic.w	r2, r2, #1
 8006cfe:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689a      	ldr	r2, [r3, #8]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d0e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0210 	bic.w	r2, r2, #16
 8006d2c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fc fed7 	bl	8003ae6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8a9 	bl	8006ea4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006d52:	e094      	b.n	8006e7e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d60:	b29b      	uxth	r3, r3
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8087 	beq.w	8006e82 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8006d74:	897b      	ldrh	r3, [r7, #10]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 8083 	beq.w	8006e82 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d8a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6812      	ldr	r2, [r2, #0]
 8006d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	f023 0301 	bic.w	r3, r3, #1
 8006d9e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2220      	movs	r2, #32
 8006da4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0210 	bic.w	r2, r2, #16
 8006dc2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dc4:	897b      	ldrh	r3, [r7, #10]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f86b 	bl	8006ea4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006dce:	e058      	b.n	8006e82 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00d      	beq.n	8006df6 <HAL_UART_IRQHandler+0x3ce>
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d008      	beq.n	8006df6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f8c6 	bl	8006f80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006df4:	e048      	b.n	8006e88 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d012      	beq.n	8006e26 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d008      	beq.n	8006e26 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d034      	beq.n	8006e86 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	4798      	blx	r3
    }
    return;
 8006e24:	e02f      	b.n	8006e86 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d008      	beq.n	8006e42 <HAL_UART_IRQHandler+0x41a>
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f886 	bl	8006f4c <UART_EndTransmit_IT>
    return;
 8006e40:	e022      	b.n	8006e88 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_UART_IRQHandler+0x436>
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f8a6 	bl	8006fa8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e5c:	e014      	b.n	8006e88 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00f      	beq.n	8006e88 <HAL_UART_IRQHandler+0x460>
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	da0c      	bge.n	8006e88 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f890 	bl	8006f94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e74:	e008      	b.n	8006e88 <HAL_UART_IRQHandler+0x460>
      return;
 8006e76:	bf00      	nop
 8006e78:	e006      	b.n	8006e88 <HAL_UART_IRQHandler+0x460>
    return;
 8006e7a:	bf00      	nop
 8006e7c:	e004      	b.n	8006e88 <HAL_UART_IRQHandler+0x460>
      return;
 8006e7e:	bf00      	nop
 8006e80:	e002      	b.n	8006e88 <HAL_UART_IRQHandler+0x460>
      return;
 8006e82:	bf00      	nop
 8006e84:	e000      	b.n	8006e88 <HAL_UART_IRQHandler+0x460>
    return;
 8006e86:	bf00      	nop
  }
}
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop

08006e90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ed2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	f023 0301 	bic.w	r3, r3, #1
 8006ee6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d107      	bne.n	8006f00 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 0210 	bic.w	r2, r2, #16
 8006efe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff ffa6 	bl	8006e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f44:	bf00      	nop
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f62:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2220      	movs	r2, #32
 8006f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f7fa fac2 	bl	80014fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr

08006fbc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fc6:	f107 0308 	add.w	r3, r7, #8
 8006fca:	2218      	movs	r2, #24
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 fa00 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fd4:	233f      	movs	r3, #63	; 0x3f
 8006fd6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006fd8:	2381      	movs	r3, #129	; 0x81
 8006fda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006fdc:	1dfb      	adds	r3, r7, #7
 8006fde:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006fe4:	f107 0308 	add.w	r3, r7, #8
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 f8b6 	bl	800815c <hci_send_req>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	da01      	bge.n	8006ffa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006ff6:	23ff      	movs	r3, #255	; 0xff
 8006ff8:	e000      	b.n	8006ffc <aci_gap_set_non_discoverable+0x40>
  return status;
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3720      	adds	r7, #32
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8007004:	b5b0      	push	{r4, r5, r7, lr}
 8007006:	b0ce      	sub	sp, #312	; 0x138
 8007008:	af00      	add	r7, sp, #0
 800700a:	4605      	mov	r5, r0
 800700c:	460c      	mov	r4, r1
 800700e:	4610      	mov	r0, r2
 8007010:	4619      	mov	r1, r3
 8007012:	1dfb      	adds	r3, r7, #7
 8007014:	462a      	mov	r2, r5
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	1d3b      	adds	r3, r7, #4
 800701a:	4622      	mov	r2, r4
 800701c:	801a      	strh	r2, [r3, #0]
 800701e:	1cbb      	adds	r3, r7, #2
 8007020:	4602      	mov	r2, r0
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	1dbb      	adds	r3, r7, #6
 8007026:	460a      	mov	r2, r1
 8007028:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800702a:	f107 0310 	add.w	r3, r7, #16
 800702e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007032:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8007036:	3308      	adds	r3, #8
 8007038:	f107 0210 	add.w	r2, r7, #16
 800703c:	4413      	add	r3, r2
 800703e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007042:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007046:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800704a:	4413      	add	r3, r2
 800704c:	3309      	adds	r3, #9
 800704e:	f107 0210 	add.w	r2, r7, #16
 8007052:	4413      	add	r3, r2
 8007054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007058:	f107 030f 	add.w	r3, r7, #15
 800705c:	2200      	movs	r2, #0
 800705e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8007066:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800706a:	1dfa      	adds	r2, r7, #7
 800706c:	7812      	ldrb	r2, [r2, #0]
 800706e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007074:	3301      	adds	r3, #1
 8007076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800707a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800707e:	1d3a      	adds	r2, r7, #4
 8007080:	8812      	ldrh	r2, [r2, #0]
 8007082:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8007086:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800708a:	3302      	adds	r3, #2
 800708c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007090:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007094:	1cba      	adds	r2, r7, #2
 8007096:	8812      	ldrh	r2, [r2, #0]
 8007098:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800709c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070a0:	3302      	adds	r3, #2
 80070a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80070a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070aa:	1dba      	adds	r2, r7, #6
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80070b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070b4:	3301      	adds	r3, #1
 80070b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80070ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070be:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80070c2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80070c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070c8:	3301      	adds	r3, #1
 80070ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80070ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070d2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80070d6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80070d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070dc:	3301      	adds	r3, #1
 80070de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80070e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80070e6:	3308      	adds	r3, #8
 80070e8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80070ec:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 f95f 	bl	80083b4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80070f6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80070fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80070fe:	4413      	add	r3, r2
 8007100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007104:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007108:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800710c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800710e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007112:	3301      	adds	r3, #1
 8007114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007118:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800711c:	3301      	adds	r3, #1
 800711e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007122:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007126:	4618      	mov	r0, r3
 8007128:	f001 f944 	bl	80083b4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800712c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007130:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007134:	4413      	add	r3, r2
 8007136:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800713a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800713e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007142:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007148:	3302      	adds	r3, #2
 800714a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800714e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007152:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8007156:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800715c:	3302      	adds	r3, #2
 800715e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007166:	2218      	movs	r2, #24
 8007168:	2100      	movs	r1, #0
 800716a:	4618      	mov	r0, r3
 800716c:	f001 f932 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007170:	233f      	movs	r3, #63	; 0x3f
 8007172:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8007176:	2383      	movs	r3, #131	; 0x83
 8007178:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800717c:	f107 0310 	add.w	r3, r7, #16
 8007180:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007188:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800718c:	f107 030f 	add.w	r3, r7, #15
 8007190:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007194:	2301      	movs	r3, #1
 8007196:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800719a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800719e:	2100      	movs	r1, #0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 ffdb 	bl	800815c <hci_send_req>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	da01      	bge.n	80071b0 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 80071ac:	23ff      	movs	r3, #255	; 0xff
 80071ae:	e002      	b.n	80071b6 <aci_gap_set_discoverable+0x1b2>
  return status;
 80071b0:	f107 030f 	add.w	r3, r7, #15
 80071b4:	781b      	ldrb	r3, [r3, #0]
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80071bc:	46bd      	mov	sp, r7
 80071be:	bdb0      	pop	{r4, r5, r7, pc}

080071c0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b0cc      	sub	sp, #304	; 0x130
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	4602      	mov	r2, r0
 80071c8:	1dfb      	adds	r3, r7, #7
 80071ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80071cc:	f107 0310 	add.w	r3, r7, #16
 80071d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80071d4:	f107 030f 	add.w	r3, r7, #15
 80071d8:	2200      	movs	r2, #0
 80071da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80071e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e6:	1dfa      	adds	r2, r7, #7
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80071ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071f0:	3301      	adds	r3, #1
 80071f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071fa:	2218      	movs	r2, #24
 80071fc:	2100      	movs	r1, #0
 80071fe:	4618      	mov	r0, r3
 8007200:	f001 f8e8 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007204:	233f      	movs	r3, #63	; 0x3f
 8007206:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800720a:	2385      	movs	r3, #133	; 0x85
 800720c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007210:	f107 0310 	add.w	r3, r7, #16
 8007214:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007218:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800721c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007220:	f107 030f 	add.w	r3, r7, #15
 8007224:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007228:	2301      	movs	r3, #1
 800722a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800722e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007232:	2100      	movs	r1, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f000 ff91 	bl	800815c <hci_send_req>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	da01      	bge.n	8007244 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007240:	23ff      	movs	r3, #255	; 0xff
 8007242:	e002      	b.n	800724a <aci_gap_set_io_capability+0x8a>
  return status;
 8007244:	f107 030f 	add.w	r3, r7, #15
 8007248:	781b      	ldrb	r3, [r3, #0]
}
 800724a:	4618      	mov	r0, r3
 800724c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8007254:	b5b0      	push	{r4, r5, r7, lr}
 8007256:	b0cc      	sub	sp, #304	; 0x130
 8007258:	af00      	add	r7, sp, #0
 800725a:	4605      	mov	r5, r0
 800725c:	460c      	mov	r4, r1
 800725e:	4610      	mov	r0, r2
 8007260:	4619      	mov	r1, r3
 8007262:	1dfb      	adds	r3, r7, #7
 8007264:	462a      	mov	r2, r5
 8007266:	701a      	strb	r2, [r3, #0]
 8007268:	1dbb      	adds	r3, r7, #6
 800726a:	4622      	mov	r2, r4
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	1d7b      	adds	r3, r7, #5
 8007270:	4602      	mov	r2, r0
 8007272:	701a      	strb	r2, [r3, #0]
 8007274:	1d3b      	adds	r3, r7, #4
 8007276:	460a      	mov	r2, r1
 8007278:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800727a:	f107 0310 	add.w	r3, r7, #16
 800727e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007282:	f107 030f 	add.w	r3, r7, #15
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007294:	1dfa      	adds	r2, r7, #7
 8007296:	7812      	ldrb	r2, [r2, #0]
 8007298:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800729a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800729e:	3301      	adds	r3, #1
 80072a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80072a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a8:	1dba      	adds	r2, r7, #6
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80072ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072b2:	3301      	adds	r3, #1
 80072b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80072b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072bc:	1d7a      	adds	r2, r7, #5
 80072be:	7812      	ldrb	r2, [r2, #0]
 80072c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80072c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072c6:	3301      	adds	r3, #1
 80072c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80072cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d0:	1d3a      	adds	r2, r7, #4
 80072d2:	7812      	ldrb	r2, [r2, #0]
 80072d4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80072d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072da:	3301      	adds	r3, #1
 80072dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80072e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80072e8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80072ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072ee:	3301      	adds	r3, #1
 80072f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80072f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80072fc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80072fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007302:	3301      	adds	r3, #1
 8007304:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8007308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007310:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007316:	3301      	adds	r3, #1
 8007318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800731c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007320:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007324:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8007328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800732c:	3304      	adds	r3, #4
 800732e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8007332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007336:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800733a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800733c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007340:	3301      	adds	r3, #1
 8007342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800734a:	2218      	movs	r2, #24
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f001 f840 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007354:	233f      	movs	r3, #63	; 0x3f
 8007356:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800735a:	2386      	movs	r3, #134	; 0x86
 800735c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007360:	f107 0310 	add.w	r3, r7, #16
 8007364:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800736c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007370:	f107 030f 	add.w	r3, r7, #15
 8007374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007378:	2301      	movs	r3, #1
 800737a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800737e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007382:	2100      	movs	r1, #0
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fee9 	bl	800815c <hci_send_req>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	da01      	bge.n	8007394 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007390:	23ff      	movs	r3, #255	; 0xff
 8007392:	e002      	b.n	800739a <aci_gap_set_authentication_requirement+0x146>
  return status;
 8007394:	f107 030f 	add.w	r3, r7, #15
 8007398:	781b      	ldrb	r3, [r3, #0]
}
 800739a:	4618      	mov	r0, r3
 800739c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bdb0      	pop	{r4, r5, r7, pc}

080073a4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80073a4:	b590      	push	{r4, r7, lr}
 80073a6:	b0cd      	sub	sp, #308	; 0x134
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	463a      	mov	r2, r7
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	1dfb      	adds	r3, r7, #7
 80073b6:	4622      	mov	r2, r4
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	1dbb      	adds	r3, r7, #6
 80073bc:	4602      	mov	r2, r0
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	1d7b      	adds	r3, r7, #5
 80073c2:	460a      	mov	r2, r1
 80073c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80073c6:	f107 0310 	add.w	r3, r7, #16
 80073ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80073ce:	f107 0308 	add.w	r3, r7, #8
 80073d2:	2207      	movs	r2, #7
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f000 fffc 	bl	80083d4 <Osal_MemSet>
  int index_input = 0;
 80073dc:	2300      	movs	r3, #0
 80073de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80073e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e6:	1dfa      	adds	r2, r7, #7
 80073e8:	7812      	ldrb	r2, [r2, #0]
 80073ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80073ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073f0:	3301      	adds	r3, #1
 80073f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80073f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fa:	1dba      	adds	r2, r7, #6
 80073fc:	7812      	ldrb	r2, [r2, #0]
 80073fe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007404:	3301      	adds	r3, #1
 8007406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800740a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800740e:	1d7a      	adds	r2, r7, #5
 8007410:	7812      	ldrb	r2, [r2, #0]
 8007412:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007414:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007418:	3301      	adds	r3, #1
 800741a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800741e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007422:	2218      	movs	r2, #24
 8007424:	2100      	movs	r1, #0
 8007426:	4618      	mov	r0, r3
 8007428:	f000 ffd4 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800742c:	233f      	movs	r3, #63	; 0x3f
 800742e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8007432:	238a      	movs	r3, #138	; 0x8a
 8007434:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007438:	f107 0310 	add.w	r3, r7, #16
 800743c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007444:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007448:	f107 0308 	add.w	r3, r7, #8
 800744c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007450:	2307      	movs	r3, #7
 8007452:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fe7d 	bl	800815c <hci_send_req>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	da01      	bge.n	800746c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007468:	23ff      	movs	r3, #255	; 0xff
 800746a:	e021      	b.n	80074b0 <aci_gap_init+0x10c>
  if ( resp.Status )
 800746c:	f107 0308 	add.w	r3, r7, #8
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d003      	beq.n	800747e <aci_gap_init+0xda>
    return resp.Status;
 8007476:	f107 0308 	add.w	r3, r7, #8
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	e018      	b.n	80074b0 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800747e:	f107 0308 	add.w	r3, r7, #8
 8007482:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007486:	b29a      	uxth	r2, r3
 8007488:	463b      	mov	r3, r7
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800748e:	f107 0308 	add.w	r3, r7, #8
 8007492:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007496:	b29a      	uxth	r2, r3
 8007498:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800749c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800749e:	f107 0308 	add.w	r3, r7, #8
 80074a2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80074ac:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd90      	pop	{r4, r7, pc}

080074ba <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b0cc      	sub	sp, #304	; 0x130
 80074be:	af00      	add	r7, sp, #0
 80074c0:	4602      	mov	r2, r0
 80074c2:	463b      	mov	r3, r7
 80074c4:	6019      	str	r1, [r3, #0]
 80074c6:	1dfb      	adds	r3, r7, #7
 80074c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80074ca:	f107 0310 	add.w	r3, r7, #16
 80074ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80074d2:	f107 030f 	add.w	r3, r7, #15
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80074da:	2300      	movs	r3, #0
 80074dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80074e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e4:	1dfa      	adds	r2, r7, #7
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80074ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074ee:	3301      	adds	r3, #1
 80074f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80074f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074f8:	1c58      	adds	r0, r3, #1
 80074fa:	1dfb      	adds	r3, r7, #7
 80074fc:	781a      	ldrb	r2, [r3, #0]
 80074fe:	463b      	mov	r3, r7
 8007500:	6819      	ldr	r1, [r3, #0]
 8007502:	f000 ff57 	bl	80083b4 <Osal_MemCpy>
  index_input += AdvDataLen;
 8007506:	1dfb      	adds	r3, r7, #7
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800750e:	4413      	add	r3, r2
 8007510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007514:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007518:	2218      	movs	r2, #24
 800751a:	2100      	movs	r1, #0
 800751c:	4618      	mov	r0, r3
 800751e:	f000 ff59 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007522:	233f      	movs	r3, #63	; 0x3f
 8007524:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007528:	238e      	movs	r3, #142	; 0x8e
 800752a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800752e:	f107 0310 	add.w	r3, r7, #16
 8007532:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800753a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800753e:	f107 030f 	add.w	r3, r7, #15
 8007542:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007546:	2301      	movs	r3, #1
 8007548:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800754c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fe02 	bl	800815c <hci_send_req>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	da01      	bge.n	8007562 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800755e:	23ff      	movs	r3, #255	; 0xff
 8007560:	e002      	b.n	8007568 <aci_gap_update_adv_data+0xae>
  return status;
 8007562:	f107 030f 	add.w	r3, r7, #15
 8007566:	781b      	ldrb	r3, [r3, #0]
}
 8007568:	4618      	mov	r0, r3
 800756a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007578:	2300      	movs	r3, #0
 800757a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800757c:	f107 0308 	add.w	r3, r7, #8
 8007580:	2218      	movs	r2, #24
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f000 ff25 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800758a:	233f      	movs	r3, #63	; 0x3f
 800758c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800758e:	2392      	movs	r3, #146	; 0x92
 8007590:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007592:	1dfb      	adds	r3, r7, #7
 8007594:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007596:	2301      	movs	r3, #1
 8007598:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800759a:	f107 0308 	add.w	r3, r7, #8
 800759e:	2100      	movs	r1, #0
 80075a0:	4618      	mov	r0, r3
 80075a2:	f000 fddb 	bl	800815c <hci_send_req>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da01      	bge.n	80075b0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80075ac:	23ff      	movs	r3, #255	; 0xff
 80075ae:	e000      	b.n	80075b2 <aci_gap_configure_whitelist+0x40>
  return status;
 80075b0:	79fb      	ldrb	r3, [r7, #7]
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b0cc      	sub	sp, #304	; 0x130
 80075be:	af00      	add	r7, sp, #0
 80075c0:	4602      	mov	r2, r0
 80075c2:	1dbb      	adds	r3, r7, #6
 80075c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80075c6:	f107 0310 	add.w	r3, r7, #16
 80075ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80075ce:	f107 030f 	add.w	r3, r7, #15
 80075d2:	2200      	movs	r2, #0
 80075d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80075dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e0:	1dba      	adds	r2, r7, #6
 80075e2:	8812      	ldrh	r2, [r2, #0]
 80075e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80075e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075ea:	3302      	adds	r3, #2
 80075ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075f4:	2218      	movs	r2, #24
 80075f6:	2100      	movs	r1, #0
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 feeb 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075fe:	233f      	movs	r3, #63	; 0x3f
 8007600:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8007604:	2395      	movs	r3, #149	; 0x95
 8007606:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800760a:	f107 0310 	add.w	r3, r7, #16
 800760e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007616:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800761a:	f107 030f 	add.w	r3, r7, #15
 800761e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007622:	2301      	movs	r3, #1
 8007624:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800762c:	2100      	movs	r1, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fd94 	bl	800815c <hci_send_req>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	da01      	bge.n	800763e <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800763a:	23ff      	movs	r3, #255	; 0xff
 800763c:	e002      	b.n	8007644 <aci_gap_allow_rebond+0x8a>
  return status;
 800763e:	f107 030f 	add.w	r3, r7, #15
 8007642:	781b      	ldrb	r3, [r3, #0]
}
 8007644:	4618      	mov	r0, r3
 8007646:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b0cc      	sub	sp, #304	; 0x130
 8007652:	af00      	add	r7, sp, #0
 8007654:	4602      	mov	r2, r0
 8007656:	1dbb      	adds	r3, r7, #6
 8007658:	801a      	strh	r2, [r3, #0]
 800765a:	1d7b      	adds	r3, r7, #5
 800765c:	460a      	mov	r2, r1
 800765e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007660:	f107 0310 	add.w	r3, r7, #16
 8007664:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007668:	f107 030f 	add.w	r3, r7, #15
 800766c:	2200      	movs	r2, #0
 800766e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767a:	1dba      	adds	r2, r7, #6
 800767c:	8812      	ldrh	r2, [r2, #0]
 800767e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007684:	3302      	adds	r3, #2
 8007686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800768a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800768e:	1d7a      	adds	r2, r7, #5
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007698:	3301      	adds	r3, #1
 800769a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800769e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076a2:	2218      	movs	r2, #24
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fe94 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80076ac:	233f      	movs	r3, #63	; 0x3f
 80076ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80076b2:	23a5      	movs	r3, #165	; 0xa5
 80076b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80076b8:	f107 0310 	add.w	r3, r7, #16
 80076bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80076c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80076c8:	f107 030f 	add.w	r3, r7, #15
 80076cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80076d0:	2301      	movs	r3, #1
 80076d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076da:	2100      	movs	r1, #0
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fd3d 	bl	800815c <hci_send_req>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da01      	bge.n	80076ec <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80076e8:	23ff      	movs	r3, #255	; 0xff
 80076ea:	e002      	b.n	80076f2 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80076ec:	f107 030f 	add.w	r3, r7, #15
 80076f0:	781b      	ldrb	r3, [r3, #0]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b088      	sub	sp, #32
 8007700:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007702:	2300      	movs	r3, #0
 8007704:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007706:	f107 0308 	add.w	r3, r7, #8
 800770a:	2218      	movs	r2, #24
 800770c:	2100      	movs	r1, #0
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fe60 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007714:	233f      	movs	r3, #63	; 0x3f
 8007716:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007718:	f240 1301 	movw	r3, #257	; 0x101
 800771c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800771e:	1dfb      	adds	r3, r7, #7
 8007720:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007726:	f107 0308 	add.w	r3, r7, #8
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fd15 	bl	800815c <hci_send_req>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	da01      	bge.n	800773c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007738:	23ff      	movs	r3, #255	; 0xff
 800773a:	e000      	b.n	800773e <aci_gatt_init+0x42>
  return status;
 800773c:	79fb      	ldrb	r3, [r7, #7]
}
 800773e:	4618      	mov	r0, r3
 8007740:	3720      	adds	r7, #32
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007746:	b590      	push	{r4, r7, lr}
 8007748:	b0cf      	sub	sp, #316	; 0x13c
 800774a:	af00      	add	r7, sp, #0
 800774c:	4604      	mov	r4, r0
 800774e:	4638      	mov	r0, r7
 8007750:	6001      	str	r1, [r0, #0]
 8007752:	4610      	mov	r0, r2
 8007754:	4619      	mov	r1, r3
 8007756:	1dfb      	adds	r3, r7, #7
 8007758:	4622      	mov	r2, r4
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	1dbb      	adds	r3, r7, #6
 800775e:	4602      	mov	r2, r0
 8007760:	701a      	strb	r2, [r3, #0]
 8007762:	1d7b      	adds	r3, r7, #5
 8007764:	460a      	mov	r2, r1
 8007766:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007768:	f107 0310 	add.w	r3, r7, #16
 800776c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007770:	1dfb      	adds	r3, r7, #7
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b01      	cmp	r3, #1
 8007776:	d007      	beq.n	8007788 <aci_gatt_add_service+0x42>
 8007778:	1dfb      	adds	r3, r7, #7
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d101      	bne.n	8007784 <aci_gatt_add_service+0x3e>
 8007780:	2311      	movs	r3, #17
 8007782:	e002      	b.n	800778a <aci_gatt_add_service+0x44>
 8007784:	2301      	movs	r3, #1
 8007786:	e000      	b.n	800778a <aci_gatt_add_service+0x44>
 8007788:	2303      	movs	r3, #3
 800778a:	f107 0210 	add.w	r2, r7, #16
 800778e:	4413      	add	r3, r2
 8007790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007794:	f107 030c 	add.w	r3, r7, #12
 8007798:	2203      	movs	r2, #3
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fe19 	bl	80083d4 <Osal_MemSet>
  int index_input = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80077a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077ac:	1dfa      	adds	r2, r7, #7
 80077ae:	7812      	ldrb	r2, [r2, #0]
 80077b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80077b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077b6:	3301      	adds	r3, #1
 80077b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80077bc:	1dfb      	adds	r3, r7, #7
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d002      	beq.n	80077ca <aci_gatt_add_service+0x84>
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d004      	beq.n	80077d2 <aci_gatt_add_service+0x8c>
 80077c8:	e007      	b.n	80077da <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80077ca:	2302      	movs	r3, #2
 80077cc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80077d0:	e005      	b.n	80077de <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80077d2:	2310      	movs	r3, #16
 80077d4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80077d8:	e001      	b.n	80077de <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80077da:	2347      	movs	r3, #71	; 0x47
 80077dc:	e05d      	b.n	800789a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80077de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80077e2:	1c58      	adds	r0, r3, #1
 80077e4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80077e8:	463b      	mov	r3, r7
 80077ea:	6819      	ldr	r1, [r3, #0]
 80077ec:	f000 fde2 	bl	80083b4 <Osal_MemCpy>
    index_input += size;
 80077f0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80077f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80077f8:	4413      	add	r3, r2
 80077fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80077fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007802:	1dba      	adds	r2, r7, #6
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800780c:	3301      	adds	r3, #1
 800780e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007816:	1d7a      	adds	r2, r7, #5
 8007818:	7812      	ldrb	r2, [r2, #0]
 800781a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800781c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007820:	3301      	adds	r3, #1
 8007822:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007826:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800782a:	2218      	movs	r2, #24
 800782c:	2100      	movs	r1, #0
 800782e:	4618      	mov	r0, r3
 8007830:	f000 fdd0 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007834:	233f      	movs	r3, #63	; 0x3f
 8007836:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800783a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800783e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007842:	f107 0310 	add.w	r3, r7, #16
 8007846:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800784a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800784e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007852:	f107 030c 	add.w	r3, r7, #12
 8007856:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800785a:	2303      	movs	r3, #3
 800785c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007860:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fc78 	bl	800815c <hci_send_req>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	da01      	bge.n	8007876 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8007872:	23ff      	movs	r3, #255	; 0xff
 8007874:	e011      	b.n	800789a <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8007876:	f107 030c 	add.w	r3, r7, #12
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <aci_gatt_add_service+0x142>
    return resp.Status;
 8007880:	f107 030c 	add.w	r3, r7, #12
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	e008      	b.n	800789a <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8007888:	f107 030c 	add.w	r3, r7, #12
 800788c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007890:	b29a      	uxth	r2, r3
 8007892:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007896:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd90      	pop	{r4, r7, pc}

080078a4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80078a4:	b590      	push	{r4, r7, lr}
 80078a6:	b0d1      	sub	sp, #324	; 0x144
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	f107 0108 	add.w	r1, r7, #8
 80078b2:	600a      	str	r2, [r1, #0]
 80078b4:	4619      	mov	r1, r3
 80078b6:	f107 030e 	add.w	r3, r7, #14
 80078ba:	4622      	mov	r2, r4
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	f107 030d 	add.w	r3, r7, #13
 80078c2:	4602      	mov	r2, r0
 80078c4:	701a      	strb	r2, [r3, #0]
 80078c6:	1dbb      	adds	r3, r7, #6
 80078c8:	460a      	mov	r2, r1
 80078ca:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80078cc:	f107 0318 	add.w	r3, r7, #24
 80078d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80078d4:	f107 030d 	add.w	r3, r7, #13
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d008      	beq.n	80078f0 <aci_gatt_add_char+0x4c>
 80078de:	f107 030d 	add.w	r3, r7, #13
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d101      	bne.n	80078ec <aci_gatt_add_char+0x48>
 80078e8:	2313      	movs	r3, #19
 80078ea:	e002      	b.n	80078f2 <aci_gatt_add_char+0x4e>
 80078ec:	2303      	movs	r3, #3
 80078ee:	e000      	b.n	80078f2 <aci_gatt_add_char+0x4e>
 80078f0:	2305      	movs	r3, #5
 80078f2:	f107 0218 	add.w	r2, r7, #24
 80078f6:	4413      	add	r3, r2
 80078f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	2203      	movs	r2, #3
 8007902:	2100      	movs	r1, #0
 8007904:	4618      	mov	r0, r3
 8007906:	f000 fd65 	bl	80083d4 <Osal_MemSet>
  int index_input = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007910:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007914:	f107 020e 	add.w	r2, r7, #14
 8007918:	8812      	ldrh	r2, [r2, #0]
 800791a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800791c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007920:	3302      	adds	r3, #2
 8007922:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007926:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800792a:	f107 020d 	add.w	r2, r7, #13
 800792e:	7812      	ldrb	r2, [r2, #0]
 8007930:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007932:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007936:	3301      	adds	r3, #1
 8007938:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800793c:	f107 030d 	add.w	r3, r7, #13
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d002      	beq.n	800794c <aci_gatt_add_char+0xa8>
 8007946:	2b02      	cmp	r3, #2
 8007948:	d004      	beq.n	8007954 <aci_gatt_add_char+0xb0>
 800794a:	e007      	b.n	800795c <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800794c:	2302      	movs	r3, #2
 800794e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007952:	e005      	b.n	8007960 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8007954:	2310      	movs	r3, #16
 8007956:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800795a:	e001      	b.n	8007960 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800795c:	2347      	movs	r3, #71	; 0x47
 800795e:	e086      	b.n	8007a6e <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007960:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007964:	1cd8      	adds	r0, r3, #3
 8007966:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800796a:	f107 0308 	add.w	r3, r7, #8
 800796e:	6819      	ldr	r1, [r3, #0]
 8007970:	f000 fd20 	bl	80083b4 <Osal_MemCpy>
    index_input += size;
 8007974:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007978:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800797c:	4413      	add	r3, r2
 800797e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007982:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007986:	1dba      	adds	r2, r7, #6
 8007988:	8812      	ldrh	r2, [r2, #0]
 800798a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800798c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007990:	3302      	adds	r3, #2
 8007992:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007996:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800799a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800799e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80079a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079a4:	3301      	adds	r3, #1
 80079a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80079aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079ae:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80079b2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80079b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079b8:	3301      	adds	r3, #1
 80079ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80079be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079c2:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80079c6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80079c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079cc:	3301      	adds	r3, #1
 80079ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80079d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079d6:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80079da:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80079dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079e0:	3301      	adds	r3, #1
 80079e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80079e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80079ea:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80079ee:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80079f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80079f4:	3301      	adds	r3, #1
 80079f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80079fe:	2218      	movs	r2, #24
 8007a00:	2100      	movs	r1, #0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fce6 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a08:	233f      	movs	r3, #63	; 0x3f
 8007a0a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007a0e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007a12:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007a16:	f107 0318 	add.w	r3, r7, #24
 8007a1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007a1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007a22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007a26:	f107 0314 	add.w	r3, r7, #20
 8007a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007a2e:	2303      	movs	r3, #3
 8007a30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 fb8e 	bl	800815c <hci_send_req>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	da01      	bge.n	8007a4a <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8007a46:	23ff      	movs	r3, #255	; 0xff
 8007a48:	e011      	b.n	8007a6e <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8007a4a:	f107 0314 	add.w	r3, r7, #20
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8007a54:	f107 0314 	add.w	r3, r7, #20
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	e008      	b.n	8007a6e <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8007a5c:	f107 0314 	add.w	r3, r7, #20
 8007a60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007a6a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd90      	pop	{r4, r7, pc}

08007a78 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007a78:	b5b0      	push	{r4, r5, r7, lr}
 8007a7a:	b0cc      	sub	sp, #304	; 0x130
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	4605      	mov	r5, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	1dbb      	adds	r3, r7, #6
 8007a88:	462a      	mov	r2, r5
 8007a8a:	801a      	strh	r2, [r3, #0]
 8007a8c:	1d3b      	adds	r3, r7, #4
 8007a8e:	4622      	mov	r2, r4
 8007a90:	801a      	strh	r2, [r3, #0]
 8007a92:	1cfb      	adds	r3, r7, #3
 8007a94:	4602      	mov	r2, r0
 8007a96:	701a      	strb	r2, [r3, #0]
 8007a98:	1cbb      	adds	r3, r7, #2
 8007a9a:	460a      	mov	r2, r1
 8007a9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007a9e:	f107 0310 	add.w	r3, r7, #16
 8007aa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007aa6:	f107 030f 	add.w	r3, r7, #15
 8007aaa:	2200      	movs	r2, #0
 8007aac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab8:	1dba      	adds	r2, r7, #6
 8007aba:	8812      	ldrh	r2, [r2, #0]
 8007abc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ac2:	3302      	adds	r3, #2
 8007ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8007ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007acc:	1d3a      	adds	r2, r7, #4
 8007ace:	8812      	ldrh	r2, [r2, #0]
 8007ad0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8007adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae0:	1cfa      	adds	r2, r7, #3
 8007ae2:	7812      	ldrb	r2, [r2, #0]
 8007ae4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8007ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aea:	3301      	adds	r3, #1
 8007aec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af4:	1cba      	adds	r2, r7, #2
 8007af6:	7812      	ldrb	r2, [r2, #0]
 8007af8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007afe:	3301      	adds	r3, #1
 8007b00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b08:	1d98      	adds	r0, r3, #6
 8007b0a:	1cbb      	adds	r3, r7, #2
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007b14:	f000 fc4e 	bl	80083b4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8007b18:	1cbb      	adds	r3, r7, #2
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007b20:	4413      	add	r3, r2
 8007b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b2a:	2218      	movs	r2, #24
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 fc50 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b34:	233f      	movs	r3, #63	; 0x3f
 8007b36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007b3a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8007b3e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b42:	f107 0310 	add.w	r3, r7, #16
 8007b46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b52:	f107 030f 	add.w	r3, r7, #15
 8007b56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b64:	2100      	movs	r1, #0
 8007b66:	4618      	mov	r0, r3
 8007b68:	f000 faf8 	bl	800815c <hci_send_req>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	da01      	bge.n	8007b76 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8007b72:	23ff      	movs	r3, #255	; 0xff
 8007b74:	e002      	b.n	8007b7c <aci_gatt_update_char_value+0x104>
  return status;
 8007b76:	f107 030f 	add.w	r3, r7, #15
 8007b7a:	781b      	ldrb	r3, [r3, #0]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bdb0      	pop	{r4, r5, r7, pc}

08007b86 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b0cc      	sub	sp, #304	; 0x130
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	463b      	mov	r3, r7
 8007b8e:	601a      	str	r2, [r3, #0]
 8007b90:	1dfb      	adds	r3, r7, #7
 8007b92:	4602      	mov	r2, r0
 8007b94:	701a      	strb	r2, [r3, #0]
 8007b96:	1dbb      	adds	r3, r7, #6
 8007b98:	460a      	mov	r2, r1
 8007b9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007b9c:	f107 0310 	add.w	r3, r7, #16
 8007ba0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ba4:	f107 030f 	add.w	r3, r7, #15
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8007bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb6:	1dfa      	adds	r2, r7, #7
 8007bb8:	7812      	ldrb	r2, [r2, #0]
 8007bba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8007bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bca:	1dba      	adds	r2, r7, #6
 8007bcc:	7812      	ldrb	r2, [r2, #0]
 8007bce:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bde:	1c98      	adds	r0, r3, #2
 8007be0:	1dbb      	adds	r3, r7, #6
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	463b      	mov	r3, r7
 8007be6:	6819      	ldr	r1, [r3, #0]
 8007be8:	f000 fbe4 	bl	80083b4 <Osal_MemCpy>
  index_input += Length;
 8007bec:	1dbb      	adds	r3, r7, #6
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bfe:	2218      	movs	r2, #24
 8007c00:	2100      	movs	r1, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fbe6 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c08:	233f      	movs	r3, #63	; 0x3f
 8007c0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007c0e:	230c      	movs	r3, #12
 8007c10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c14:	f107 0310 	add.w	r3, r7, #16
 8007c18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c24:	f107 030f 	add.w	r3, r7, #15
 8007c28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c36:	2100      	movs	r1, #0
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fa8f 	bl	800815c <hci_send_req>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	da01      	bge.n	8007c48 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8007c44:	23ff      	movs	r3, #255	; 0xff
 8007c46:	e002      	b.n	8007c4e <aci_hal_write_config_data+0xc8>
  return status;
 8007c48:	f107 030f 	add.w	r3, r7, #15
 8007c4c:	781b      	ldrb	r3, [r3, #0]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b0cc      	sub	sp, #304	; 0x130
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	4602      	mov	r2, r0
 8007c60:	1dfb      	adds	r3, r7, #7
 8007c62:	701a      	strb	r2, [r3, #0]
 8007c64:	1dbb      	adds	r3, r7, #6
 8007c66:	460a      	mov	r2, r1
 8007c68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007c6a:	f107 0310 	add.w	r3, r7, #16
 8007c6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c72:	f107 030f 	add.w	r3, r7, #15
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c84:	1dfa      	adds	r2, r7, #7
 8007c86:	7812      	ldrb	r2, [r2, #0]
 8007c88:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8e:	3301      	adds	r3, #1
 8007c90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c98:	1dba      	adds	r2, r7, #6
 8007c9a:	7812      	ldrb	r2, [r2, #0]
 8007c9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007ca8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007cac:	2218      	movs	r2, #24
 8007cae:	2100      	movs	r1, #0
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f000 fb8f 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cb6:	233f      	movs	r3, #63	; 0x3f
 8007cb8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007cbc:	230f      	movs	r3, #15
 8007cbe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007cc2:	f107 0310 	add.w	r3, r7, #16
 8007cc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007cce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007cd2:	f107 030f 	add.w	r3, r7, #15
 8007cd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ce0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fa38 	bl	800815c <hci_send_req>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	da01      	bge.n	8007cf6 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007cf2:	23ff      	movs	r3, #255	; 0xff
 8007cf4:	e002      	b.n	8007cfc <aci_hal_set_tx_power_level+0xa4>
  return status;
 8007cf6:	f107 030f 	add.w	r3, r7, #15
 8007cfa:	781b      	ldrb	r3, [r3, #0]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b0cc      	sub	sp, #304	; 0x130
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	1dbb      	adds	r3, r7, #6
 8007d10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8007d12:	f107 0310 	add.w	r3, r7, #16
 8007d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007d1a:	f107 030f 	add.w	r3, r7, #15
 8007d1e:	2200      	movs	r2, #0
 8007d20:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d2c:	1dba      	adds	r2, r7, #6
 8007d2e:	8812      	ldrh	r2, [r2, #0]
 8007d30:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d36:	3302      	adds	r3, #2
 8007d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007d3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d40:	2218      	movs	r2, #24
 8007d42:	2100      	movs	r1, #0
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 fb45 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007d4a:	233f      	movs	r3, #63	; 0x3f
 8007d4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8007d50:	2318      	movs	r3, #24
 8007d52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007d66:	f107 030f 	add.w	r3, r7, #15
 8007d6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 f9ee 	bl	800815c <hci_send_req>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da01      	bge.n	8007d8a <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8007d86:	23ff      	movs	r3, #255	; 0xff
 8007d88:	e002      	b.n	8007d90 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8007d8a:	f107 030f 	add.w	r3, r7, #15
 8007d8e:	781b      	ldrb	r3, [r3, #0]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b088      	sub	sp, #32
 8007d9e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007da0:	2300      	movs	r3, #0
 8007da2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007da4:	f107 0308 	add.w	r3, r7, #8
 8007da8:	2218      	movs	r2, #24
 8007daa:	2100      	movs	r1, #0
 8007dac:	4618      	mov	r0, r3
 8007dae:	f000 fb11 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x03;
 8007db2:	2303      	movs	r3, #3
 8007db4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007db6:	2303      	movs	r3, #3
 8007db8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007dba:	1dfb      	adds	r3, r7, #7
 8007dbc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f000 f9c7 	bl	800815c <hci_send_req>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	da01      	bge.n	8007dd8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007dd4:	23ff      	movs	r3, #255	; 0xff
 8007dd6:	e000      	b.n	8007dda <hci_reset+0x40>
  return status;
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3720      	adds	r7, #32
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b0ce      	sub	sp, #312	; 0x138
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	f107 0308 	add.w	r3, r7, #8
 8007dec:	6019      	str	r1, [r3, #0]
 8007dee:	1d3b      	adds	r3, r7, #4
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	f107 030e 	add.w	r3, r7, #14
 8007df6:	4602      	mov	r2, r0
 8007df8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8007dfa:	f107 0318 	add.w	r3, r7, #24
 8007dfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007e02:	f107 0310 	add.w	r3, r7, #16
 8007e06:	2205      	movs	r2, #5
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 fae2 	bl	80083d4 <Osal_MemSet>
  int index_input = 0;
 8007e10:	2300      	movs	r3, #0
 8007e12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007e16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007e1a:	f107 020e 	add.w	r2, r7, #14
 8007e1e:	8812      	ldrh	r2, [r2, #0]
 8007e20:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007e22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007e26:	3302      	adds	r3, #2
 8007e28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007e2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007e30:	2218      	movs	r2, #24
 8007e32:	2100      	movs	r1, #0
 8007e34:	4618      	mov	r0, r3
 8007e36:	f000 facd 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x08;
 8007e3a:	2308      	movs	r3, #8
 8007e3c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8007e40:	2330      	movs	r3, #48	; 0x30
 8007e42:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007e46:	f107 0318 	add.w	r3, r7, #24
 8007e4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007e4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007e52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007e56:	f107 0310 	add.w	r3, r7, #16
 8007e5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007e5e:	2305      	movs	r3, #5
 8007e60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007e68:	2100      	movs	r1, #0
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f976 	bl	800815c <hci_send_req>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	da01      	bge.n	8007e7a <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8007e76:	23ff      	movs	r3, #255	; 0xff
 8007e78:	e016      	b.n	8007ea8 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8007e7a:	f107 0310 	add.w	r3, r7, #16
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d003      	beq.n	8007e8c <hci_le_read_phy+0xaa>
    return resp.Status;
 8007e84:	f107 0310 	add.w	r3, r7, #16
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	e00d      	b.n	8007ea8 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8007e8c:	f107 0310 	add.w	r3, r7, #16
 8007e90:	78da      	ldrb	r2, [r3, #3]
 8007e92:	f107 0308 	add.w	r3, r7, #8
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8007e9a:	f107 0310 	add.w	r3, r7, #16
 8007e9e:	791a      	ldrb	r2, [r3, #4]
 8007ea0:	1d3b      	adds	r3, r7, #4
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8007eb2:	b590      	push	{r4, r7, lr}
 8007eb4:	b0cd      	sub	sp, #308	; 0x134
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	4604      	mov	r4, r0
 8007eba:	4608      	mov	r0, r1
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	1dfb      	adds	r3, r7, #7
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	701a      	strb	r2, [r3, #0]
 8007ec4:	1dbb      	adds	r3, r7, #6
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	701a      	strb	r2, [r3, #0]
 8007eca:	1d7b      	adds	r3, r7, #5
 8007ecc:	460a      	mov	r2, r1
 8007ece:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8007ed0:	f107 0310 	add.w	r3, r7, #16
 8007ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ed8:	f107 030f 	add.w	r3, r7, #15
 8007edc:	2200      	movs	r2, #0
 8007ede:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eea:	1dfa      	adds	r2, r7, #7
 8007eec:	7812      	ldrb	r2, [r2, #0]
 8007eee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efe:	1dba      	adds	r2, r7, #6
 8007f00:	7812      	ldrb	r2, [r2, #0]
 8007f02:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f08:	3301      	adds	r3, #1
 8007f0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f12:	1d7a      	adds	r2, r7, #5
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007f22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f26:	2218      	movs	r2, #24
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fa52 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x08;
 8007f30:	2308      	movs	r3, #8
 8007f32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8007f36:	2331      	movs	r3, #49	; 0x31
 8007f38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007f3c:	f107 0310 	add.w	r3, r7, #16
 8007f40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007f48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007f4c:	f107 030f 	add.w	r3, r7, #15
 8007f50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007f54:	2301      	movs	r3, #1
 8007f56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007f5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007f5e:	2100      	movs	r1, #0
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f8fb 	bl	800815c <hci_send_req>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	da01      	bge.n	8007f70 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8007f6c:	23ff      	movs	r3, #255	; 0xff
 8007f6e:	e002      	b.n	8007f76 <hci_le_set_default_phy+0xc4>
  return status;
 8007f70:	f107 030f 	add.w	r3, r7, #15
 8007f74:	781b      	ldrb	r3, [r3, #0]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd90      	pop	{r4, r7, pc}

08007f80 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8007f80:	b5b0      	push	{r4, r5, r7, lr}
 8007f82:	b0cc      	sub	sp, #304	; 0x130
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4605      	mov	r5, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	1dbb      	adds	r3, r7, #6
 8007f90:	462a      	mov	r2, r5
 8007f92:	801a      	strh	r2, [r3, #0]
 8007f94:	1d3b      	adds	r3, r7, #4
 8007f96:	4622      	mov	r2, r4
 8007f98:	801a      	strh	r2, [r3, #0]
 8007f9a:	1cbb      	adds	r3, r7, #2
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	801a      	strh	r2, [r3, #0]
 8007fa0:	463b      	mov	r3, r7
 8007fa2:	460a      	mov	r2, r1
 8007fa4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8007fa6:	f107 0310 	add.w	r3, r7, #16
 8007faa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007fae:	f107 030f 	add.w	r3, r7, #15
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc0:	1dba      	adds	r2, r7, #6
 8007fc2:	8812      	ldrh	r2, [r2, #0]
 8007fc4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007fc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fca:	3302      	adds	r3, #2
 8007fcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8007fd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd4:	1d3a      	adds	r2, r7, #4
 8007fd6:	8812      	ldrh	r2, [r2, #0]
 8007fd8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007fda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007fde:	3302      	adds	r3, #2
 8007fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8007fe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fe8:	1cba      	adds	r2, r7, #2
 8007fea:	8812      	ldrh	r2, [r2, #0]
 8007fec:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8007fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8007ff8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ffc:	463a      	mov	r2, r7
 8007ffe:	8812      	ldrh	r2, [r2, #0]
 8008000:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8008002:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008006:	3302      	adds	r3, #2
 8008008:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800800c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008010:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8008014:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8008016:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800801a:	3302      	adds	r3, #2
 800801c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008020:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008024:	2218      	movs	r2, #24
 8008026:	2100      	movs	r1, #0
 8008028:	4618      	mov	r0, r3
 800802a:	f000 f9d3 	bl	80083d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800802e:	233f      	movs	r3, #63	; 0x3f
 8008030:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8008034:	f240 1381 	movw	r3, #385	; 0x181
 8008038:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800803c:	230f      	movs	r3, #15
 800803e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8008042:	f107 0310 	add.w	r3, r7, #16
 8008046:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800804a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800804e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008052:	f107 030f 	add.w	r3, r7, #15
 8008056:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800805a:	2301      	movs	r3, #1
 800805c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008060:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008064:	2100      	movs	r1, #0
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f878 	bl	800815c <hci_send_req>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	da01      	bge.n	8008076 <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 8008072:	23ff      	movs	r3, #255	; 0xff
 8008074:	e002      	b.n	800807c <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 8008076:	f107 030f 	add.w	r3, r7, #15
 800807a:	781b      	ldrb	r3, [r3, #0]
}
 800807c:	4618      	mov	r0, r3
 800807e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008082:	46bd      	mov	sp, r7
 8008084:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008088 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	4a08      	ldr	r2, [pc, #32]	; (80080b8 <hci_init+0x30>)
 8008098:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800809a:	4a08      	ldr	r2, [pc, #32]	; (80080bc <hci_init+0x34>)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80080a0:	4806      	ldr	r0, [pc, #24]	; (80080bc <hci_init+0x34>)
 80080a2:	f000 f973 	bl	800838c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 f8d4 	bl	8008258 <TlInit>

  return;
 80080b0:	bf00      	nop
}
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	2000030c 	.word	0x2000030c
 80080bc:	200002e4 	.word	0x200002e4

080080c0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80080c6:	4822      	ldr	r0, [pc, #136]	; (8008150 <hci_user_evt_proc+0x90>)
 80080c8:	f000 fc54 	bl	8008974 <LST_is_empty>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d12b      	bne.n	800812a <hci_user_evt_proc+0x6a>
 80080d2:	4b20      	ldr	r3, [pc, #128]	; (8008154 <hci_user_evt_proc+0x94>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d027      	beq.n	800812a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80080da:	f107 030c 	add.w	r3, r7, #12
 80080de:	4619      	mov	r1, r3
 80080e0:	481b      	ldr	r0, [pc, #108]	; (8008150 <hci_user_evt_proc+0x90>)
 80080e2:	f000 fcd6 	bl	8008a92 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80080e6:	4b1c      	ldr	r3, [pc, #112]	; (8008158 <hci_user_evt_proc+0x98>)
 80080e8:	69db      	ldr	r3, [r3, #28]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00c      	beq.n	8008108 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80080f2:	2301      	movs	r3, #1
 80080f4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80080f6:	4b18      	ldr	r3, [pc, #96]	; (8008158 <hci_user_evt_proc+0x98>)
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	1d3a      	adds	r2, r7, #4
 80080fc:	4610      	mov	r0, r2
 80080fe:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008100:	793a      	ldrb	r2, [r7, #4]
 8008102:	4b14      	ldr	r3, [pc, #80]	; (8008154 <hci_user_evt_proc+0x94>)
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	e002      	b.n	800810e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008108:	4b12      	ldr	r3, [pc, #72]	; (8008154 <hci_user_evt_proc+0x94>)
 800810a:	2201      	movs	r2, #1
 800810c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800810e:	4b11      	ldr	r3, [pc, #68]	; (8008154 <hci_user_evt_proc+0x94>)
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d004      	beq.n	8008120 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4618      	mov	r0, r3
 800811a:	f000 ff71 	bl	8009000 <TL_MM_EvtDone>
 800811e:	e004      	b.n	800812a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	4619      	mov	r1, r3
 8008124:	480a      	ldr	r0, [pc, #40]	; (8008150 <hci_user_evt_proc+0x90>)
 8008126:	f000 fc47 	bl	80089b8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800812a:	4809      	ldr	r0, [pc, #36]	; (8008150 <hci_user_evt_proc+0x90>)
 800812c:	f000 fc22 	bl	8008974 <LST_is_empty>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d107      	bne.n	8008146 <hci_user_evt_proc+0x86>
 8008136:	4b07      	ldr	r3, [pc, #28]	; (8008154 <hci_user_evt_proc+0x94>)
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800813e:	4804      	ldr	r0, [pc, #16]	; (8008150 <hci_user_evt_proc+0x90>)
 8008140:	f7fa fd64 	bl	8002c0c <hci_notify_asynch_evt>
  }


  return;
 8008144:	bf00      	nop
 8008146:	bf00      	nop
}
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	20000258 	.word	0x20000258
 8008154:	20000264 	.word	0x20000264
 8008158:	200002e4 	.word	0x200002e4

0800815c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008168:	2000      	movs	r0, #0
 800816a:	f000 f8cb 	bl	8008304 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800816e:	2300      	movs	r3, #0
 8008170:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	885b      	ldrh	r3, [r3, #2]
 8008176:	b21b      	sxth	r3, r3
 8008178:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800817c:	b21a      	sxth	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	881b      	ldrh	r3, [r3, #0]
 8008182:	029b      	lsls	r3, r3, #10
 8008184:	b21b      	sxth	r3, r3
 8008186:	4313      	orrs	r3, r2
 8008188:	b21b      	sxth	r3, r3
 800818a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	b2d9      	uxtb	r1, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	689a      	ldr	r2, [r3, #8]
 8008196:	8bbb      	ldrh	r3, [r7, #28]
 8008198:	4618      	mov	r0, r3
 800819a:	f000 f88d 	bl	80082b8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800819e:	e04e      	b.n	800823e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80081a0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80081a4:	f7fa fd49 	bl	8002c3a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80081a8:	e043      	b.n	8008232 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80081aa:	f107 030c 	add.w	r3, r7, #12
 80081ae:	4619      	mov	r1, r3
 80081b0:	4828      	ldr	r0, [pc, #160]	; (8008254 <hci_send_req+0xf8>)
 80081b2:	f000 fc6e 	bl	8008a92 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	7a5b      	ldrb	r3, [r3, #9]
 80081ba:	2b0f      	cmp	r3, #15
 80081bc:	d114      	bne.n	80081e8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	330b      	adds	r3, #11
 80081c2:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	885b      	ldrh	r3, [r3, #2]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	8bba      	ldrh	r2, [r7, #28]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d104      	bne.n	80081da <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	691b      	ldr	r3, [r3, #16]
 80081d4:	693a      	ldr	r2, [r7, #16]
 80081d6:	7812      	ldrb	r2, [r2, #0]
 80081d8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	785b      	ldrb	r3, [r3, #1]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d027      	beq.n	8008232 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80081e2:	2301      	movs	r3, #1
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e024      	b.n	8008232 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	330b      	adds	r3, #11
 80081ec:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	8bba      	ldrh	r2, [r7, #28]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d114      	bne.n	8008226 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	7a9b      	ldrb	r3, [r3, #10]
 8008200:	3b03      	subs	r3, #3
 8008202:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	695a      	ldr	r2, [r3, #20]
 8008208:	7dfb      	ldrb	r3, [r7, #23]
 800820a:	429a      	cmp	r2, r3
 800820c:	bfa8      	it	ge
 800820e:	461a      	movge	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6918      	ldr	r0, [r3, #16]
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	1cd9      	adds	r1, r3, #3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	461a      	mov	r2, r3
 8008222:	f001 fa6f 	bl	8009704 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800822e:	2301      	movs	r3, #1
 8008230:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008232:	4808      	ldr	r0, [pc, #32]	; (8008254 <hci_send_req+0xf8>)
 8008234:	f000 fb9e 	bl	8008974 <LST_is_empty>
 8008238:	4603      	mov	r3, r0
 800823a:	2b00      	cmp	r3, #0
 800823c:	d0b5      	beq.n	80081aa <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800823e:	7ffb      	ldrb	r3, [r7, #31]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0ad      	beq.n	80081a0 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008244:	2001      	movs	r0, #1
 8008246:	f000 f85d 	bl	8008304 <NotifyCmdStatus>

  return 0;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000304 	.word	0x20000304

08008258 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008260:	480f      	ldr	r0, [pc, #60]	; (80082a0 <TlInit+0x48>)
 8008262:	f000 fb77 	bl	8008954 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8008266:	4a0f      	ldr	r2, [pc, #60]	; (80082a4 <TlInit+0x4c>)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800826c:	480e      	ldr	r0, [pc, #56]	; (80082a8 <TlInit+0x50>)
 800826e:	f000 fb71 	bl	8008954 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008272:	4b0e      	ldr	r3, [pc, #56]	; (80082ac <TlInit+0x54>)
 8008274:	2201      	movs	r2, #1
 8008276:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8008278:	4b0d      	ldr	r3, [pc, #52]	; (80082b0 <TlInit+0x58>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00a      	beq.n	8008296 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008284:	4b0b      	ldr	r3, [pc, #44]	; (80082b4 <TlInit+0x5c>)
 8008286:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8008288:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <TlInit+0x58>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f107 0208 	add.w	r2, r7, #8
 8008290:	4610      	mov	r0, r2
 8008292:	4798      	blx	r3
  }

  return;
 8008294:	bf00      	nop
 8008296:	bf00      	nop
}
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	20000304 	.word	0x20000304
 80082a4:	20000260 	.word	0x20000260
 80082a8:	20000258 	.word	0x20000258
 80082ac:	20000264 	.word	0x20000264
 80082b0:	200002e4 	.word	0x200002e4
 80082b4:	08008345 	.word	0x08008345

080082b8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	4603      	mov	r3, r0
 80082c0:	603a      	str	r2, [r7, #0]
 80082c2:	80fb      	strh	r3, [r7, #6]
 80082c4:	460b      	mov	r3, r1
 80082c6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <SendCmd+0x44>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	88fa      	ldrh	r2, [r7, #6]
 80082ce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80082d2:	4b0a      	ldr	r3, [pc, #40]	; (80082fc <SendCmd+0x44>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	797a      	ldrb	r2, [r7, #5]
 80082d8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80082da:	4b08      	ldr	r3, [pc, #32]	; (80082fc <SendCmd+0x44>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	330c      	adds	r3, #12
 80082e0:	797a      	ldrb	r2, [r7, #5]
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f001 fa0d 	bl	8009704 <memcpy>

  hciContext.io.Send(0,0);
 80082ea:	4b05      	ldr	r3, [pc, #20]	; (8008300 <SendCmd+0x48>)
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	2100      	movs	r1, #0
 80082f0:	2000      	movs	r0, #0
 80082f2:	4798      	blx	r3

  return;
 80082f4:	bf00      	nop
}
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20000260 	.word	0x20000260
 8008300:	200002e4 	.word	0x200002e4

08008304 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b082      	sub	sp, #8
 8008308:	af00      	add	r7, sp, #0
 800830a:	4603      	mov	r3, r0
 800830c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800830e:	79fb      	ldrb	r3, [r7, #7]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d108      	bne.n	8008326 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008314:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <NotifyCmdStatus+0x3c>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00d      	beq.n	8008338 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800831c:	4b08      	ldr	r3, [pc, #32]	; (8008340 <NotifyCmdStatus+0x3c>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2000      	movs	r0, #0
 8008322:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008324:	e008      	b.n	8008338 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008326:	4b06      	ldr	r3, [pc, #24]	; (8008340 <NotifyCmdStatus+0x3c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d004      	beq.n	8008338 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800832e:	4b04      	ldr	r3, [pc, #16]	; (8008340 <NotifyCmdStatus+0x3c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2001      	movs	r0, #1
 8008334:	4798      	blx	r3
  return;
 8008336:	bf00      	nop
 8008338:	bf00      	nop
}
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	2000030c 	.word	0x2000030c

08008344 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7a5b      	ldrb	r3, [r3, #9]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d003      	beq.n	800835c <TlEvtReceived+0x18>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	7a5b      	ldrb	r3, [r3, #9]
 8008358:	2b0e      	cmp	r3, #14
 800835a:	d107      	bne.n	800836c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4809      	ldr	r0, [pc, #36]	; (8008384 <TlEvtReceived+0x40>)
 8008360:	f000 fb50 	bl	8008a04 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008364:	2000      	movs	r0, #0
 8008366:	f7fa fc5d 	bl	8002c24 <hci_cmd_resp_release>
 800836a:	e006      	b.n	800837a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800836c:	6879      	ldr	r1, [r7, #4]
 800836e:	4806      	ldr	r0, [pc, #24]	; (8008388 <TlEvtReceived+0x44>)
 8008370:	f000 fb48 	bl	8008a04 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008374:	4804      	ldr	r0, [pc, #16]	; (8008388 <TlEvtReceived+0x44>)
 8008376:	f7fa fc49 	bl	8002c0c <hci_notify_asynch_evt>
  }

  return;
 800837a:	bf00      	nop
}
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20000304 	.word	0x20000304
 8008388:	20000258 	.word	0x20000258

0800838c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a05      	ldr	r2, [pc, #20]	; (80083ac <hci_register_io_bus+0x20>)
 8008398:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a04      	ldr	r2, [pc, #16]	; (80083b0 <hci_register_io_bus+0x24>)
 800839e:	611a      	str	r2, [r3, #16]

  return;
 80083a0:	bf00      	nop
}
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	08008d79 	.word	0x08008d79
 80083b0:	08008de1 	.word	0x08008de1

080083b4 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	60b9      	str	r1, [r7, #8]
 80083be:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f001 f99d 	bl	8009704 <memcpy>
 80083ca:	4603      	mov	r3, r0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f001 f99b 	bl	8009720 <memset>
 80083ea:	4603      	mov	r3, r0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80083fe:	4b0f      	ldr	r3, [pc, #60]	; (800843c <OTP_Read+0x48>)
 8008400:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008402:	e002      	b.n	800840a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3b08      	subs	r3, #8
 8008408:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3307      	adds	r3, #7
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	79fa      	ldrb	r2, [r7, #7]
 8008412:	429a      	cmp	r2, r3
 8008414:	d003      	beq.n	800841e <OTP_Read+0x2a>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	4a09      	ldr	r2, [pc, #36]	; (8008440 <OTP_Read+0x4c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d1f2      	bne.n	8008404 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3307      	adds	r3, #7
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	79fa      	ldrb	r2, [r7, #7]
 8008426:	429a      	cmp	r2, r3
 8008428:	d001      	beq.n	800842e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800842e:	68fb      	ldr	r3, [r7, #12]
}
 8008430:	4618      	mov	r0, r3
 8008432:	3714      	adds	r7, #20
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	1fff73f8 	.word	0x1fff73f8
 8008440:	1fff7000 	.word	0x1fff7000

08008444 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b08a      	sub	sp, #40	; 0x28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800844c:	2300      	movs	r3, #0
 800844e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3301      	adds	r3, #1
 8008456:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2bff      	cmp	r3, #255	; 0xff
 800845e:	d14c      	bne.n	80084fa <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	3302      	adds	r3, #2
 8008464:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	461a      	mov	r2, r3
 800846e:	f640 4301 	movw	r3, #3073	; 0xc01
 8008472:	429a      	cmp	r2, r3
 8008474:	d13d      	bne.n	80084f2 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	3302      	adds	r3, #2
 800847a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	885b      	ldrh	r3, [r3, #2]
 8008480:	b29b      	uxth	r3, r3
 8008482:	461a      	mov	r2, r3
 8008484:	4b20      	ldr	r3, [pc, #128]	; (8008508 <PeerToPeer_Event_Handler+0xc4>)
 8008486:	889b      	ldrh	r3, [r3, #4]
 8008488:	3302      	adds	r3, #2
 800848a:	429a      	cmp	r2, r3
 800848c:	d118      	bne.n	80084c0 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800848e:	2301      	movs	r3, #1
 8008490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	7a1b      	ldrb	r3, [r3, #8]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d007      	beq.n	80084b0 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80084a0:	2300      	movs	r3, #0
 80084a2:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80084a4:	f107 0308 	add.w	r3, r7, #8
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fa fc09 	bl	8002cc0 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 80084ae:	e022      	b.n	80084f6 <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80084b0:	2301      	movs	r3, #1
 80084b2:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80084b4:	f107 0308 	add.w	r3, r7, #8
 80084b8:	4618      	mov	r0, r3
 80084ba:	f7fa fc01 	bl	8002cc0 <P2PS_STM_App_Notification>
        break;
 80084be:	e01a      	b.n	80084f6 <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	885b      	ldrh	r3, [r3, #2]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	461a      	mov	r2, r3
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <PeerToPeer_Event_Handler+0xc4>)
 80084ca:	885b      	ldrh	r3, [r3, #2]
 80084cc:	3301      	adds	r3, #1
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d111      	bne.n	80084f6 <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	88db      	ldrh	r3, [r3, #6]
 80084da:	b29b      	uxth	r3, r3
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	3308      	adds	r3, #8
 80084e4:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80084e6:	f107 0308 	add.w	r3, r7, #8
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fa fbe8 	bl	8002cc0 <P2PS_STM_App_Notification>
        break;
 80084f0:	e001      	b.n	80084f6 <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80084f2:	bf00      	nop
 80084f4:	e002      	b.n	80084fc <PeerToPeer_Event_Handler+0xb8>
        break;
 80084f6:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80084f8:	e000      	b.n	80084fc <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80084fa:	bf00      	nop
  }

  return(return_value);
 80084fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008500:	4618      	mov	r0, r3
 8008502:	3728      	adds	r7, #40	; 0x28
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	20000268 	.word	0x20000268

0800850c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08a      	sub	sp, #40	; 0x28
 8008510:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8008512:	484a      	ldr	r0, [pc, #296]	; (800863c <P2PS_STM_Init+0x130>)
 8008514:	f000 fb82 	bl	8008c1c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008518:	238f      	movs	r3, #143	; 0x8f
 800851a:	703b      	strb	r3, [r7, #0]
 800851c:	23e5      	movs	r3, #229	; 0xe5
 800851e:	707b      	strb	r3, [r7, #1]
 8008520:	23b3      	movs	r3, #179	; 0xb3
 8008522:	70bb      	strb	r3, [r7, #2]
 8008524:	23d5      	movs	r3, #213	; 0xd5
 8008526:	70fb      	strb	r3, [r7, #3]
 8008528:	232e      	movs	r3, #46	; 0x2e
 800852a:	713b      	strb	r3, [r7, #4]
 800852c:	237f      	movs	r3, #127	; 0x7f
 800852e:	717b      	strb	r3, [r7, #5]
 8008530:	234a      	movs	r3, #74	; 0x4a
 8008532:	71bb      	strb	r3, [r7, #6]
 8008534:	2398      	movs	r3, #152	; 0x98
 8008536:	71fb      	strb	r3, [r7, #7]
 8008538:	232a      	movs	r3, #42	; 0x2a
 800853a:	723b      	strb	r3, [r7, #8]
 800853c:	2348      	movs	r3, #72	; 0x48
 800853e:	727b      	strb	r3, [r7, #9]
 8008540:	237a      	movs	r3, #122	; 0x7a
 8008542:	72bb      	strb	r3, [r7, #10]
 8008544:	23cc      	movs	r3, #204	; 0xcc
 8008546:	72fb      	strb	r3, [r7, #11]
 8008548:	2340      	movs	r3, #64	; 0x40
 800854a:	733b      	strb	r3, [r7, #12]
 800854c:	23fe      	movs	r3, #254	; 0xfe
 800854e:	737b      	strb	r3, [r7, #13]
 8008550:	2300      	movs	r3, #0
 8008552:	73bb      	strb	r3, [r7, #14]
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8008558:	4639      	mov	r1, r7
 800855a:	4b39      	ldr	r3, [pc, #228]	; (8008640 <P2PS_STM_Init+0x134>)
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	2308      	movs	r3, #8
 8008560:	2201      	movs	r2, #1
 8008562:	2002      	movs	r0, #2
 8008564:	f7ff f8ef 	bl	8007746 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8008568:	2319      	movs	r3, #25
 800856a:	703b      	strb	r3, [r7, #0]
 800856c:	23ed      	movs	r3, #237	; 0xed
 800856e:	707b      	strb	r3, [r7, #1]
 8008570:	2382      	movs	r3, #130	; 0x82
 8008572:	70bb      	strb	r3, [r7, #2]
 8008574:	23ae      	movs	r3, #174	; 0xae
 8008576:	70fb      	strb	r3, [r7, #3]
 8008578:	23ed      	movs	r3, #237	; 0xed
 800857a:	713b      	strb	r3, [r7, #4]
 800857c:	2321      	movs	r3, #33	; 0x21
 800857e:	717b      	strb	r3, [r7, #5]
 8008580:	234c      	movs	r3, #76	; 0x4c
 8008582:	71bb      	strb	r3, [r7, #6]
 8008584:	239d      	movs	r3, #157	; 0x9d
 8008586:	71fb      	strb	r3, [r7, #7]
 8008588:	2341      	movs	r3, #65	; 0x41
 800858a:	723b      	strb	r3, [r7, #8]
 800858c:	2345      	movs	r3, #69	; 0x45
 800858e:	727b      	strb	r3, [r7, #9]
 8008590:	2322      	movs	r3, #34	; 0x22
 8008592:	72bb      	strb	r3, [r7, #10]
 8008594:	238e      	movs	r3, #142	; 0x8e
 8008596:	72fb      	strb	r3, [r7, #11]
 8008598:	2341      	movs	r3, #65	; 0x41
 800859a:	733b      	strb	r3, [r7, #12]
 800859c:	23fe      	movs	r3, #254	; 0xfe
 800859e:	737b      	strb	r3, [r7, #13]
 80085a0:	2300      	movs	r3, #0
 80085a2:	73bb      	strb	r3, [r7, #14]
 80085a4:	2300      	movs	r3, #0
 80085a6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80085a8:	4b25      	ldr	r3, [pc, #148]	; (8008640 <P2PS_STM_Init+0x134>)
 80085aa:	8818      	ldrh	r0, [r3, #0]
 80085ac:	463a      	mov	r2, r7
 80085ae:	4b25      	ldr	r3, [pc, #148]	; (8008644 <P2PS_STM_Init+0x138>)
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	2301      	movs	r3, #1
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	230a      	movs	r3, #10
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	2301      	movs	r3, #1
 80085bc:	9302      	str	r3, [sp, #8]
 80085be:	2300      	movs	r3, #0
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	2306      	movs	r3, #6
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	2302      	movs	r3, #2
 80085c8:	2102      	movs	r1, #2
 80085ca:	f7ff f96b 	bl	80078a4 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80085ce:	2319      	movs	r3, #25
 80085d0:	703b      	strb	r3, [r7, #0]
 80085d2:	23ed      	movs	r3, #237	; 0xed
 80085d4:	707b      	strb	r3, [r7, #1]
 80085d6:	2382      	movs	r3, #130	; 0x82
 80085d8:	70bb      	strb	r3, [r7, #2]
 80085da:	23ae      	movs	r3, #174	; 0xae
 80085dc:	70fb      	strb	r3, [r7, #3]
 80085de:	23ed      	movs	r3, #237	; 0xed
 80085e0:	713b      	strb	r3, [r7, #4]
 80085e2:	2321      	movs	r3, #33	; 0x21
 80085e4:	717b      	strb	r3, [r7, #5]
 80085e6:	234c      	movs	r3, #76	; 0x4c
 80085e8:	71bb      	strb	r3, [r7, #6]
 80085ea:	239d      	movs	r3, #157	; 0x9d
 80085ec:	71fb      	strb	r3, [r7, #7]
 80085ee:	2341      	movs	r3, #65	; 0x41
 80085f0:	723b      	strb	r3, [r7, #8]
 80085f2:	2345      	movs	r3, #69	; 0x45
 80085f4:	727b      	strb	r3, [r7, #9]
 80085f6:	2322      	movs	r3, #34	; 0x22
 80085f8:	72bb      	strb	r3, [r7, #10]
 80085fa:	238e      	movs	r3, #142	; 0x8e
 80085fc:	72fb      	strb	r3, [r7, #11]
 80085fe:	2342      	movs	r3, #66	; 0x42
 8008600:	733b      	strb	r3, [r7, #12]
 8008602:	23fe      	movs	r3, #254	; 0xfe
 8008604:	737b      	strb	r3, [r7, #13]
 8008606:	2300      	movs	r3, #0
 8008608:	73bb      	strb	r3, [r7, #14]
 800860a:	2300      	movs	r3, #0
 800860c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800860e:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <P2PS_STM_Init+0x134>)
 8008610:	8818      	ldrh	r0, [r3, #0]
 8008612:	463a      	mov	r2, r7
 8008614:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <P2PS_STM_Init+0x13c>)
 8008616:	9305      	str	r3, [sp, #20]
 8008618:	2301      	movs	r3, #1
 800861a:	9304      	str	r3, [sp, #16]
 800861c:	230a      	movs	r3, #10
 800861e:	9303      	str	r3, [sp, #12]
 8008620:	2301      	movs	r3, #1
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	2300      	movs	r3, #0
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	2310      	movs	r3, #16
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	2304      	movs	r3, #4
 800862e:	2102      	movs	r1, #2
 8008630:	f7ff f938 	bl	80078a4 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8008634:	bf00      	nop
}
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	08008445 	.word	0x08008445
 8008640:	20000268 	.word	0x20000268
 8008644:	2000026a 	.word	0x2000026a
 8008648:	2000026c 	.word	0x2000026c

0800864c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af02      	add	r7, sp, #8
 8008652:	4603      	mov	r3, r0
 8008654:	6039      	str	r1, [r7, #0]
 8008656:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8008658:	2342      	movs	r3, #66	; 0x42
 800865a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800865c:	88fb      	ldrh	r3, [r7, #6]
 800865e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8008662:	4293      	cmp	r3, r2
 8008664:	d10c      	bne.n	8008680 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008666:	4b09      	ldr	r3, [pc, #36]	; (800868c <P2PS_STM_App_Update_Char+0x40>)
 8008668:	8818      	ldrh	r0, [r3, #0]
 800866a:	4b08      	ldr	r3, [pc, #32]	; (800868c <P2PS_STM_App_Update_Char+0x40>)
 800866c:	8899      	ldrh	r1, [r3, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	9300      	str	r3, [sp, #0]
 8008672:	2304      	movs	r3, #4
 8008674:	2200      	movs	r2, #0
 8008676:	f7ff f9ff 	bl	8007a78 <aci_gatt_update_char_value>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             4, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 800867e:	e000      	b.n	8008682 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8008680:	bf00      	nop
  }

  return result;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000268 	.word	0x20000268

08008690 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008698:	f107 030c 	add.w	r3, r7, #12
 800869c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	2124      	movs	r1, #36	; 0x24
 80086a8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80086ac:	f000 f888 	bl	80087c0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	330b      	adds	r3, #11
 80086b4:	78db      	ldrb	r3, [r3, #3]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3720      	adds	r7, #32
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b088      	sub	sp, #32
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	210f      	movs	r1, #15
 80086d6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80086da:	f000 f871 	bl	80087c0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	330b      	adds	r3, #11
 80086e2:	78db      	ldrb	r3, [r3, #3]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3720      	adds	r7, #32
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}

080086ec <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	4a08      	ldr	r2, [pc, #32]	; (800871c <shci_init+0x30>)
 80086fc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80086fe:	4a08      	ldr	r2, [pc, #32]	; (8008720 <shci_init+0x34>)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008704:	4806      	ldr	r0, [pc, #24]	; (8008720 <shci_init+0x34>)
 8008706:	f000 f911 	bl	800892c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 f894 	bl	800883c <TlInit>

  return;
 8008714:	bf00      	nop
}
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000330 	.word	0x20000330
 8008720:	20000310 	.word	0x20000310

08008724 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800872a:	4822      	ldr	r0, [pc, #136]	; (80087b4 <shci_user_evt_proc+0x90>)
 800872c:	f000 f922 	bl	8008974 <LST_is_empty>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d12b      	bne.n	800878e <shci_user_evt_proc+0x6a>
 8008736:	4b20      	ldr	r3, [pc, #128]	; (80087b8 <shci_user_evt_proc+0x94>)
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d027      	beq.n	800878e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800873e:	f107 030c 	add.w	r3, r7, #12
 8008742:	4619      	mov	r1, r3
 8008744:	481b      	ldr	r0, [pc, #108]	; (80087b4 <shci_user_evt_proc+0x90>)
 8008746:	f000 f9a4 	bl	8008a92 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800874a:	4b1c      	ldr	r3, [pc, #112]	; (80087bc <shci_user_evt_proc+0x98>)
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00c      	beq.n	800876c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008756:	2301      	movs	r3, #1
 8008758:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800875a:	4b18      	ldr	r3, [pc, #96]	; (80087bc <shci_user_evt_proc+0x98>)
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	1d3a      	adds	r2, r7, #4
 8008760:	4610      	mov	r0, r2
 8008762:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008764:	793a      	ldrb	r2, [r7, #4]
 8008766:	4b14      	ldr	r3, [pc, #80]	; (80087b8 <shci_user_evt_proc+0x94>)
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e002      	b.n	8008772 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800876c:	4b12      	ldr	r3, [pc, #72]	; (80087b8 <shci_user_evt_proc+0x94>)
 800876e:	2201      	movs	r2, #1
 8008770:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008772:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <shci_user_evt_proc+0x94>)
 8008774:	781b      	ldrb	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4618      	mov	r0, r3
 800877e:	f000 fc3f 	bl	8009000 <TL_MM_EvtDone>
 8008782:	e004      	b.n	800878e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4619      	mov	r1, r3
 8008788:	480a      	ldr	r0, [pc, #40]	; (80087b4 <shci_user_evt_proc+0x90>)
 800878a:	f000 f915 	bl	80089b8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800878e:	4809      	ldr	r0, [pc, #36]	; (80087b4 <shci_user_evt_proc+0x90>)
 8008790:	f000 f8f0 	bl	8008974 <LST_is_empty>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d107      	bne.n	80087aa <shci_user_evt_proc+0x86>
 800879a:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <shci_user_evt_proc+0x94>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80087a2:	4804      	ldr	r0, [pc, #16]	; (80087b4 <shci_user_evt_proc+0x90>)
 80087a4:	f7f7 ff77 	bl	8000696 <shci_notify_asynch_evt>
  }


  return;
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
}
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	20000294 	.word	0x20000294
 80087b8:	200002a4 	.word	0x200002a4
 80087bc:	20000310 	.word	0x20000310

080087c0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60ba      	str	r2, [r7, #8]
 80087c8:	607b      	str	r3, [r7, #4]
 80087ca:	4603      	mov	r3, r0
 80087cc:	81fb      	strh	r3, [r7, #14]
 80087ce:	460b      	mov	r3, r1
 80087d0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80087d2:	2000      	movs	r0, #0
 80087d4:	f000 f864 	bl	80088a0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80087d8:	4b16      	ldr	r3, [pc, #88]	; (8008834 <shci_send+0x74>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	89fa      	ldrh	r2, [r7, #14]
 80087de:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80087e2:	4b14      	ldr	r3, [pc, #80]	; (8008834 <shci_send+0x74>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	7b7a      	ldrb	r2, [r7, #13]
 80087e8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80087ea:	4b12      	ldr	r3, [pc, #72]	; (8008834 <shci_send+0x74>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	330c      	adds	r3, #12
 80087f0:	7b7a      	ldrb	r2, [r7, #13]
 80087f2:	68b9      	ldr	r1, [r7, #8]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 ff85 	bl	8009704 <memcpy>

  shciContext.io.Send(0,0);
 80087fa:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <shci_send+0x78>)
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2100      	movs	r1, #0
 8008800:	2000      	movs	r0, #0
 8008802:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008804:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008808:	f7f7 ff5c 	bl	80006c4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f103 0008 	add.w	r0, r3, #8
 8008812:	4b08      	ldr	r3, [pc, #32]	; (8008834 <shci_send+0x74>)
 8008814:	6819      	ldr	r1, [r3, #0]
 8008816:	4b07      	ldr	r3, [pc, #28]	; (8008834 <shci_send+0x74>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	789b      	ldrb	r3, [r3, #2]
 800881c:	3303      	adds	r3, #3
 800881e:	461a      	mov	r2, r3
 8008820:	f000 ff70 	bl	8009704 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008824:	2001      	movs	r0, #1
 8008826:	f000 f83b 	bl	80088a0 <Cmd_SetStatus>

  return;
 800882a:	bf00      	nop
}
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	200002a0 	.word	0x200002a0
 8008838:	20000310 	.word	0x20000310

0800883c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008844:	4a10      	ldr	r2, [pc, #64]	; (8008888 <TlInit+0x4c>)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800884a:	4810      	ldr	r0, [pc, #64]	; (800888c <TlInit+0x50>)
 800884c:	f000 f882 	bl	8008954 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008850:	2001      	movs	r0, #1
 8008852:	f000 f825 	bl	80088a0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008856:	4b0e      	ldr	r3, [pc, #56]	; (8008890 <TlInit+0x54>)
 8008858:	2201      	movs	r2, #1
 800885a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800885c:	4b0d      	ldr	r3, [pc, #52]	; (8008894 <TlInit+0x58>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00c      	beq.n	800887e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <TlInit+0x5c>)
 800886a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800886c:	4b0b      	ldr	r3, [pc, #44]	; (800889c <TlInit+0x60>)
 800886e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008870:	4b08      	ldr	r3, [pc, #32]	; (8008894 <TlInit+0x58>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f107 020c 	add.w	r2, r7, #12
 8008878:	4610      	mov	r0, r2
 800887a:	4798      	blx	r3
  }

  return;
 800887c:	bf00      	nop
 800887e:	bf00      	nop
}
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	200002a0 	.word	0x200002a0
 800888c:	20000294 	.word	0x20000294
 8008890:	200002a4 	.word	0x200002a4
 8008894:	20000310 	.word	0x20000310
 8008898:	080088f1 	.word	0x080088f1
 800889c:	08008909 	.word	0x08008909

080088a0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b082      	sub	sp, #8
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d10b      	bne.n	80088c8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80088b0:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <Cmd_SetStatus+0x48>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80088b8:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <Cmd_SetStatus+0x48>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2000      	movs	r0, #0
 80088be:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80088c0:	4b0a      	ldr	r3, [pc, #40]	; (80088ec <Cmd_SetStatus+0x4c>)
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80088c6:	e00b      	b.n	80088e0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80088c8:	4b08      	ldr	r3, [pc, #32]	; (80088ec <Cmd_SetStatus+0x4c>)
 80088ca:	2201      	movs	r2, #1
 80088cc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80088ce:	4b06      	ldr	r3, [pc, #24]	; (80088e8 <Cmd_SetStatus+0x48>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80088d6:	4b04      	ldr	r3, [pc, #16]	; (80088e8 <Cmd_SetStatus+0x48>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2001      	movs	r0, #1
 80088dc:	4798      	blx	r3
  return;
 80088de:	bf00      	nop
 80088e0:	bf00      	nop
}
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	20000330 	.word	0x20000330
 80088ec:	2000029c 	.word	0x2000029c

080088f0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80088f8:	2000      	movs	r0, #0
 80088fa:	f7f7 fed8 	bl	80006ae <shci_cmd_resp_release>

  return;
 80088fe:	bf00      	nop
}
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008910:	6879      	ldr	r1, [r7, #4]
 8008912:	4805      	ldr	r0, [pc, #20]	; (8008928 <TlUserEvtReceived+0x20>)
 8008914:	f000 f876 	bl	8008a04 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008918:	4803      	ldr	r0, [pc, #12]	; (8008928 <TlUserEvtReceived+0x20>)
 800891a:	f7f7 febc 	bl	8000696 <shci_notify_asynch_evt>

  return;
 800891e:	bf00      	nop
}
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000294 	.word	0x20000294

0800892c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a05      	ldr	r2, [pc, #20]	; (800894c <shci_register_io_bus+0x20>)
 8008938:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a04      	ldr	r2, [pc, #16]	; (8008950 <shci_register_io_bus+0x24>)
 800893e:	611a      	str	r2, [r3, #16]

  return;
 8008940:	bf00      	nop
}
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	08008e8d 	.word	0x08008e8d
 8008950:	08008ee1 	.word	0x08008ee1

08008954 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	605a      	str	r2, [r3, #4]
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800897c:	f3ef 8310 	mrs	r3, PRIMASK
 8008980:	60fb      	str	r3, [r7, #12]
  return(result);
 8008982:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008986:	b672      	cpsid	i
}
 8008988:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d102      	bne.n	800899a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008994:	2301      	movs	r3, #1
 8008996:	75fb      	strb	r3, [r7, #23]
 8008998:	e001      	b.n	800899e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f383 8810 	msr	PRIMASK, r3
}
 80089a8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	371c      	adds	r7, #28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089c2:	f3ef 8310 	mrs	r3, PRIMASK
 80089c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80089c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80089ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80089cc:	b672      	cpsid	i
}
 80089ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	605a      	str	r2, [r3, #4]
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f383 8810 	msr	PRIMASK, r3
}
 80089f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80089f8:	bf00      	nop
 80089fa:	371c      	adds	r7, #28
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr

08008a04 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a12:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a14:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a18:	b672      	cpsid	i
}
 8008a1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	685a      	ldr	r2, [r3, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	683a      	ldr	r2, [r7, #0]
 8008a36:	601a      	str	r2, [r3, #0]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f383 8810 	msr	PRIMASK, r3
}
 8008a42:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a58:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a62:	b672      	cpsid	i
}
 8008a64:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	6812      	ldr	r2, [r2, #0]
 8008a6e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	6852      	ldr	r2, [r2, #4]
 8008a78:	605a      	str	r2, [r3, #4]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	f383 8810 	msr	PRIMASK, r3
}
 8008a84:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008a86:	bf00      	nop
 8008a88:	371c      	adds	r7, #28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b086      	sub	sp, #24
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008aa4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008aa6:	b672      	cpsid	i
}
 8008aa8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff ffca 	bl	8008a50 <LST_remove_node>
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	f383 8810 	msr	PRIMASK, r3
}
 8008ac6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008ac8:	bf00      	nop
 8008aca:	3718      	adds	r7, #24
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	af00      	add	r7, sp, #0
  return;
 8008ad4:	bf00      	nop
}
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr

08008ade <BLS_Init>:

__weak void BLS_Init( void )
{
 8008ade:	b480      	push	{r7}
 8008ae0:	af00      	add	r7, sp, #0
  return;
 8008ae2:	bf00      	nop
}
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
  return;
 8008af0:	bf00      	nop
}
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <DIS_Init>:
__weak void DIS_Init( void )
{
 8008afa:	b480      	push	{r7}
 8008afc:	af00      	add	r7, sp, #0
  return;
 8008afe:	bf00      	nop
}
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
  return;
 8008b0c:	bf00      	nop
}
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8008b16:	b480      	push	{r7}
 8008b18:	af00      	add	r7, sp, #0
  return;
 8008b1a:	bf00      	nop
}
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <HRS_Init>:
__weak void HRS_Init( void )
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  return;
 8008b28:	bf00      	nop
}
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <HTS_Init>:
__weak void HTS_Init( void )
{
 8008b32:	b480      	push	{r7}
 8008b34:	af00      	add	r7, sp, #0
  return;
 8008b36:	bf00      	nop
}
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <IAS_Init>:
__weak void IAS_Init( void )
{
 8008b40:	b480      	push	{r7}
 8008b42:	af00      	add	r7, sp, #0
  return;
 8008b44:	bf00      	nop
}
 8008b46:	46bd      	mov	sp, r7
 8008b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4c:	4770      	bx	lr

08008b4e <LLS_Init>:
__weak void LLS_Init( void )
{
 8008b4e:	b480      	push	{r7}
 8008b50:	af00      	add	r7, sp, #0
  return;
 8008b52:	bf00      	nop
}
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <TPS_Init>:
__weak void TPS_Init( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	af00      	add	r7, sp, #0
  return;
 8008b60:	bf00      	nop
}
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8008b6a:	b480      	push	{r7}
 8008b6c:	af00      	add	r7, sp, #0
  return;
 8008b6e:	bf00      	nop
}
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8008b78:	b480      	push	{r7}
 8008b7a:	af00      	add	r7, sp, #0
  return;
 8008b7c:	bf00      	nop
}
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <MESH_Init>:
__weak void MESH_Init( void )
{
 8008b86:	b480      	push	{r7}
 8008b88:	af00      	add	r7, sp, #0
  return;
 8008b8a:	bf00      	nop
}
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0
  return;
 8008b98:	bf00      	nop
}
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	af00      	add	r7, sp, #0
  return;
 8008ba6:	bf00      	nop
}
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8008bb4:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <SVCCTL_Init+0x18>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8008bba:	4b04      	ldr	r3, [pc, #16]	; (8008bcc <SVCCTL_Init+0x1c>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8008bc0:	f000 f806 	bl	8008bd0 <SVCCTL_SvcInit>

  return;
 8008bc4:	bf00      	nop
}
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	20000270 	.word	0x20000270
 8008bcc:	20000290 	.word	0x20000290

08008bd0 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  BAS_Init();
 8008bd4:	f7ff ff7c 	bl	8008ad0 <BAS_Init>

  BLS_Init();
 8008bd8:	f7ff ff81 	bl	8008ade <BLS_Init>

  CRS_STM_Init();
 8008bdc:	f7ff ff86 	bl	8008aec <CRS_STM_Init>

  DIS_Init();
 8008be0:	f7ff ff8b 	bl	8008afa <DIS_Init>

  EDS_STM_Init();
 8008be4:	f7ff ff90 	bl	8008b08 <EDS_STM_Init>

  HIDS_Init();
 8008be8:	f7ff ff95 	bl	8008b16 <HIDS_Init>

  HRS_Init();
 8008bec:	f7ff ff9a 	bl	8008b24 <HRS_Init>

  HTS_Init();
 8008bf0:	f7ff ff9f 	bl	8008b32 <HTS_Init>

  IAS_Init();
 8008bf4:	f7ff ffa4 	bl	8008b40 <IAS_Init>

  LLS_Init();
 8008bf8:	f7ff ffa9 	bl	8008b4e <LLS_Init>

  TPS_Init();
 8008bfc:	f7ff ffae 	bl	8008b5c <TPS_Init>

  MOTENV_STM_Init();
 8008c00:	f7ff ffb3 	bl	8008b6a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8008c04:	f7ff fc82 	bl	800850c <P2PS_STM_Init>

  OTAS_STM_Init();
 8008c08:	f7ff ffb6 	bl	8008b78 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8008c0c:	f7ff ffc2 	bl	8008b94 <BVOPUS_STM_Init>

  MESH_Init();
 8008c10:	f7ff ffb9 	bl	8008b86 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8008c14:	f7ff ffc5 	bl	8008ba2 <SVCCTL_InitCustomSvc>
  
  return;
 8008c18:	bf00      	nop
}
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8008c24:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <SVCCTL_RegisterSvcHandler+0x30>)
 8008c26:	7f1b      	ldrb	r3, [r3, #28]
 8008c28:	4619      	mov	r1, r3
 8008c2a:	4a08      	ldr	r2, [pc, #32]	; (8008c4c <SVCCTL_RegisterSvcHandler+0x30>)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8008c32:	4b06      	ldr	r3, [pc, #24]	; (8008c4c <SVCCTL_RegisterSvcHandler+0x30>)
 8008c34:	7f1b      	ldrb	r3, [r3, #28]
 8008c36:	3301      	adds	r3, #1
 8008c38:	b2da      	uxtb	r2, r3
 8008c3a:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <SVCCTL_RegisterSvcHandler+0x30>)
 8008c3c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8008c3e:	bf00      	nop
}
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	20000270 	.word	0x20000270

08008c50 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2bff      	cmp	r3, #255	; 0xff
 8008c68:	d125      	bne.n	8008cb6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	3302      	adds	r3, #2
 8008c6e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008c7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c7e:	d118      	bne.n	8008cb2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008c80:	2300      	movs	r3, #0
 8008c82:	757b      	strb	r3, [r7, #21]
 8008c84:	e00d      	b.n	8008ca2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8008c86:	7d7b      	ldrb	r3, [r7, #21]
 8008c88:	4a1a      	ldr	r2, [pc, #104]	; (8008cf4 <SVCCTL_UserEvtRx+0xa4>)
 8008c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	4798      	blx	r3
 8008c92:	4603      	mov	r3, r0
 8008c94:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8008c96:	7dfb      	ldrb	r3, [r7, #23]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d108      	bne.n	8008cae <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8008c9c:	7d7b      	ldrb	r3, [r7, #21]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	757b      	strb	r3, [r7, #21]
 8008ca2:	4b14      	ldr	r3, [pc, #80]	; (8008cf4 <SVCCTL_UserEvtRx+0xa4>)
 8008ca4:	7f1b      	ldrb	r3, [r3, #28]
 8008ca6:	7d7a      	ldrb	r2, [r7, #21]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d3ec      	bcc.n	8008c86 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8008cac:	e002      	b.n	8008cb4 <SVCCTL_UserEvtRx+0x64>
              break;
 8008cae:	bf00      	nop
          break;
 8008cb0:	e000      	b.n	8008cb4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8008cb2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8008cb4:	e000      	b.n	8008cb8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8008cb6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8008cb8:	7dfb      	ldrb	r3, [r7, #23]
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d00f      	beq.n	8008cde <SVCCTL_UserEvtRx+0x8e>
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	dc10      	bgt.n	8008ce4 <SVCCTL_UserEvtRx+0x94>
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d002      	beq.n	8008ccc <SVCCTL_UserEvtRx+0x7c>
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d006      	beq.n	8008cd8 <SVCCTL_UserEvtRx+0x88>
 8008cca:	e00b      	b.n	8008ce4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7f9 fc79 	bl	80025c4 <SVCCTL_App_Notification>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	75bb      	strb	r3, [r7, #22]
      break;
 8008cd6:	e008      	b.n	8008cea <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	75bb      	strb	r3, [r7, #22]
      break;
 8008cdc:	e005      	b.n	8008cea <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	75bb      	strb	r3, [r7, #22]
      break;
 8008ce2:	e002      	b.n	8008cea <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	75bb      	strb	r3, [r7, #22]
      break;
 8008ce8:	bf00      	nop
  }

  return (return_status);
 8008cea:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3718      	adds	r7, #24
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000270 	.word	0x20000270

08008cf8 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008cfc:	f7fa f9f4 	bl	80030e8 <HW_IPCC_Enable>

  return;
 8008d00:	bf00      	nop
}
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <TL_Init>:


void TL_Init( void )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008d08:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <TL_Init+0x48>)
 8008d0a:	4a11      	ldr	r2, [pc, #68]	; (8008d50 <TL_Init+0x4c>)
 8008d0c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <TL_Init+0x48>)
 8008d10:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <TL_Init+0x50>)
 8008d12:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008d14:	4b0d      	ldr	r3, [pc, #52]	; (8008d4c <TL_Init+0x48>)
 8008d16:	4a10      	ldr	r2, [pc, #64]	; (8008d58 <TL_Init+0x54>)
 8008d18:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <TL_Init+0x48>)
 8008d1c:	4a0f      	ldr	r2, [pc, #60]	; (8008d5c <TL_Init+0x58>)
 8008d1e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008d20:	4b0a      	ldr	r3, [pc, #40]	; (8008d4c <TL_Init+0x48>)
 8008d22:	4a0f      	ldr	r2, [pc, #60]	; (8008d60 <TL_Init+0x5c>)
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008d26:	4b09      	ldr	r3, [pc, #36]	; (8008d4c <TL_Init+0x48>)
 8008d28:	4a0e      	ldr	r2, [pc, #56]	; (8008d64 <TL_Init+0x60>)
 8008d2a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008d2c:	4b07      	ldr	r3, [pc, #28]	; (8008d4c <TL_Init+0x48>)
 8008d2e:	4a0e      	ldr	r2, [pc, #56]	; (8008d68 <TL_Init+0x64>)
 8008d30:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008d32:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <TL_Init+0x48>)
 8008d34:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <TL_Init+0x68>)
 8008d36:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008d38:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <TL_Init+0x48>)
 8008d3a:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <TL_Init+0x6c>)
 8008d3c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8008d3e:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <TL_Init+0x48>)
 8008d40:	4a0c      	ldr	r2, [pc, #48]	; (8008d74 <TL_Init+0x70>)
 8008d42:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008d44:	f7fa f9e4 	bl	8003110 <HW_IPCC_Init>

  return;
 8008d48:	bf00      	nop
}
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20030000 	.word	0x20030000
 8008d50:	20030134 	.word	0x20030134
 8008d54:	20030154 	.word	0x20030154
 8008d58:	20030164 	.word	0x20030164
 8008d5c:	20030170 	.word	0x20030170
 8008d60:	20030178 	.word	0x20030178
 8008d64:	20030180 	.word	0x20030180
 8008d68:	20030188 	.word	0x20030188
 8008d6c:	200301a4 	.word	0x200301a4
 8008d70:	200301a8 	.word	0x200301a8
 8008d74:	200301b4 	.word	0x200301b4

08008d78 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8008d84:	4811      	ldr	r0, [pc, #68]	; (8008dcc <TL_BLE_Init+0x54>)
 8008d86:	f7ff fde5 	bl	8008954 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8008d8a:	4b11      	ldr	r3, [pc, #68]	; (8008dd0 <TL_BLE_Init+0x58>)
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	4a0c      	ldr	r2, [pc, #48]	; (8008dd4 <TL_BLE_Init+0x5c>)
 8008da4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	4a08      	ldr	r2, [pc, #32]	; (8008dcc <TL_BLE_Init+0x54>)
 8008daa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8008dac:	f7fa f9c6 	bl	800313c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a08      	ldr	r2, [pc, #32]	; (8008dd8 <TL_BLE_Init+0x60>)
 8008db6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	4a07      	ldr	r2, [pc, #28]	; (8008ddc <TL_BLE_Init+0x64>)
 8008dbe:	6013      	str	r3, [r2, #0]

  return 0;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	200301d0 	.word	0x200301d0
 8008dd0:	20030000 	.word	0x20030000
 8008dd4:	20030a48 	.word	0x20030a48
 8008dd8:	2000033c 	.word	0x2000033c
 8008ddc:	20000340 	.word	0x20000340

08008de0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	460b      	mov	r3, r1
 8008dea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <TL_BLE_SendCmd+0x34>)
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2201      	movs	r2, #1
 8008df4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008df6:	4b07      	ldr	r3, [pc, #28]	; (8008e14 <TL_BLE_SendCmd+0x34>)
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	2001      	movs	r0, #1
 8008e00:	f000 f96c 	bl	80090dc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008e04:	f7fa f9a4 	bl	8003150 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20030000 	.word	0x20030000

08008e18 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8008e1e:	e01c      	b.n	8008e5a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008e20:	1d3b      	adds	r3, r7, #4
 8008e22:	4619      	mov	r1, r3
 8008e24:	4812      	ldr	r0, [pc, #72]	; (8008e70 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008e26:	f7ff fe34 	bl	8008a92 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	7a5b      	ldrb	r3, [r3, #9]
 8008e2e:	2b0f      	cmp	r3, #15
 8008e30:	d003      	beq.n	8008e3a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	7a5b      	ldrb	r3, [r3, #9]
 8008e36:	2b0e      	cmp	r3, #14
 8008e38:	d105      	bne.n	8008e46 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	2002      	movs	r0, #2
 8008e40:	f000 f94c 	bl	80090dc <OutputDbgTrace>
 8008e44:	e004      	b.n	8008e50 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	2003      	movs	r0, #3
 8008e4c:	f000 f946 	bl	80090dc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008e50:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	4610      	mov	r0, r2
 8008e58:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008e5a:	4805      	ldr	r0, [pc, #20]	; (8008e70 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008e5c:	f7ff fd8a 	bl	8008974 <LST_is_empty>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0dc      	beq.n	8008e20 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008e66:	bf00      	nop
}
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	200301d0 	.word	0x200301d0
 8008e74:	2000033c 	.word	0x2000033c

08008e78 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8008e7c:	4b02      	ldr	r3, [pc, #8]	; (8008e88 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4798      	blx	r3

  return;
 8008e82:	bf00      	nop
}
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20000340 	.word	0x20000340

08008e8c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008e98:	480d      	ldr	r0, [pc, #52]	; (8008ed0 <TL_SYS_Init+0x44>)
 8008e9a:	f7ff fd5b 	bl	8008954 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8008e9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <TL_SYS_Init+0x48>)
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	689a      	ldr	r2, [r3, #8]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	4a08      	ldr	r2, [pc, #32]	; (8008ed0 <TL_SYS_Init+0x44>)
 8008eb0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008eb2:	f7fa f96f 	bl	8003194 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a07      	ldr	r2, [pc, #28]	; (8008ed8 <TL_SYS_Init+0x4c>)
 8008ebc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	4a06      	ldr	r2, [pc, #24]	; (8008edc <TL_SYS_Init+0x50>)
 8008ec4:	6013      	str	r3, [r2, #0]

  return 0;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	200301d8 	.word	0x200301d8
 8008ed4:	20030000 	.word	0x20030000
 8008ed8:	20000344 	.word	0x20000344
 8008edc:	20000348 	.word	0x20000348

08008ee0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008eec:	4b09      	ldr	r3, [pc, #36]	; (8008f14 <TL_SYS_SendCmd+0x34>)
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2210      	movs	r2, #16
 8008ef4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008ef6:	4b07      	ldr	r3, [pc, #28]	; (8008f14 <TL_SYS_SendCmd+0x34>)
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4619      	mov	r1, r3
 8008efe:	2004      	movs	r0, #4
 8008f00:	f000 f8ec 	bl	80090dc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008f04:	f7fa f950 	bl	80031a8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	20030000 	.word	0x20030000

08008f18 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008f1c:	4b07      	ldr	r3, [pc, #28]	; (8008f3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4619      	mov	r1, r3
 8008f24:	2005      	movs	r0, #5
 8008f26:	f000 f8d9 	bl	80090dc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a03      	ldr	r2, [pc, #12]	; (8008f3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008f30:	68d2      	ldr	r2, [r2, #12]
 8008f32:	6812      	ldr	r2, [r2, #0]
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3

  return;
 8008f38:	bf00      	nop
}
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	20030000 	.word	0x20030000
 8008f40:	20000344 	.word	0x20000344

08008f44 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008f4a:	e00e      	b.n	8008f6a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008f4c:	1d3b      	adds	r3, r7, #4
 8008f4e:	4619      	mov	r1, r3
 8008f50:	480b      	ldr	r0, [pc, #44]	; (8008f80 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008f52:	f7ff fd9e 	bl	8008a92 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	2006      	movs	r0, #6
 8008f5c:	f000 f8be 	bl	80090dc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008f60:	4b08      	ldr	r3, [pc, #32]	; (8008f84 <HW_IPCC_SYS_EvtNot+0x40>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4610      	mov	r0, r2
 8008f68:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008f6a:	4805      	ldr	r0, [pc, #20]	; (8008f80 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008f6c:	f7ff fd02 	bl	8008974 <LST_is_empty>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d0ea      	beq.n	8008f4c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008f76:	bf00      	nop
}
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	200301d8 	.word	0x200301d8
 8008f84:	20000348 	.word	0x20000348

08008f88 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008f90:	4817      	ldr	r0, [pc, #92]	; (8008ff0 <TL_MM_Init+0x68>)
 8008f92:	f7ff fcdf 	bl	8008954 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008f96:	4817      	ldr	r0, [pc, #92]	; (8008ff4 <TL_MM_Init+0x6c>)
 8008f98:	f7ff fcdc 	bl	8008954 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008f9c:	4b16      	ldr	r3, [pc, #88]	; (8008ff8 <TL_MM_Init+0x70>)
 8008f9e:	691b      	ldr	r3, [r3, #16]
 8008fa0:	4a16      	ldr	r2, [pc, #88]	; (8008ffc <TL_MM_Init+0x74>)
 8008fa2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008fa4:	4b15      	ldr	r3, [pc, #84]	; (8008ffc <TL_MM_Init+0x74>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6892      	ldr	r2, [r2, #8]
 8008fac:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <TL_MM_Init+0x74>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	68d2      	ldr	r2, [r2, #12]
 8008fb6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008fb8:	4b10      	ldr	r3, [pc, #64]	; (8008ffc <TL_MM_Init+0x74>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a0c      	ldr	r2, [pc, #48]	; (8008ff0 <TL_MM_Init+0x68>)
 8008fbe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008fc0:	4b0e      	ldr	r3, [pc, #56]	; (8008ffc <TL_MM_Init+0x74>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6812      	ldr	r2, [r2, #0]
 8008fc8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8008fca:	4b0c      	ldr	r3, [pc, #48]	; (8008ffc <TL_MM_Init+0x74>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	6852      	ldr	r2, [r2, #4]
 8008fd2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008fd4:	4b09      	ldr	r3, [pc, #36]	; (8008ffc <TL_MM_Init+0x74>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	6912      	ldr	r2, [r2, #16]
 8008fdc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8008fde:	4b07      	ldr	r3, [pc, #28]	; (8008ffc <TL_MM_Init+0x74>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	6952      	ldr	r2, [r2, #20]
 8008fe6:	619a      	str	r2, [r3, #24]

  return;
 8008fe8:	bf00      	nop
}
 8008fea:	3708      	adds	r7, #8
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	200301c0 	.word	0x200301c0
 8008ff4:	20000334 	.word	0x20000334
 8008ff8:	20030000 	.word	0x20030000
 8008ffc:	2000034c 	.word	0x2000034c

08009000 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009008:	6879      	ldr	r1, [r7, #4]
 800900a:	4807      	ldr	r0, [pc, #28]	; (8009028 <TL_MM_EvtDone+0x28>)
 800900c:	f7ff fcfa 	bl	8008a04 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009010:	6879      	ldr	r1, [r7, #4]
 8009012:	2000      	movs	r0, #0
 8009014:	f000 f862 	bl	80090dc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009018:	4804      	ldr	r0, [pc, #16]	; (800902c <TL_MM_EvtDone+0x2c>)
 800901a:	f7fa f8eb 	bl	80031f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 800901e:	bf00      	nop
}
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000334 	.word	0x20000334
 800902c:	08009031 	.word	0x08009031

08009030 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009036:	e00c      	b.n	8009052 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009038:	1d3b      	adds	r3, r7, #4
 800903a:	4619      	mov	r1, r3
 800903c:	480a      	ldr	r0, [pc, #40]	; (8009068 <SendFreeBuf+0x38>)
 800903e:	f7ff fd28 	bl	8008a92 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009042:	4b0a      	ldr	r3, [pc, #40]	; (800906c <SendFreeBuf+0x3c>)
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff fcd9 	bl	8008a04 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009052:	4805      	ldr	r0, [pc, #20]	; (8009068 <SendFreeBuf+0x38>)
 8009054:	f7ff fc8e 	bl	8008974 <LST_is_empty>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0ec      	beq.n	8009038 <SendFreeBuf+0x8>
  }

  return;
 800905e:	bf00      	nop
}
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	20000334 	.word	0x20000334
 800906c:	20030000 	.word	0x20030000

08009070 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009074:	4805      	ldr	r0, [pc, #20]	; (800908c <TL_TRACES_Init+0x1c>)
 8009076:	f7ff fc6d 	bl	8008954 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <TL_TRACES_Init+0x20>)
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	4a03      	ldr	r2, [pc, #12]	; (800908c <TL_TRACES_Init+0x1c>)
 8009080:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009082:	f7fa f8ed 	bl	8003260 <HW_IPCC_TRACES_Init>

  return;
 8009086:	bf00      	nop
}
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	200301c8 	.word	0x200301c8
 8009090:	20030000 	.word	0x20030000

08009094 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800909a:	e008      	b.n	80090ae <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800909c:	1d3b      	adds	r3, r7, #4
 800909e:	4619      	mov	r1, r3
 80090a0:	4808      	ldr	r0, [pc, #32]	; (80090c4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80090a2:	f7ff fcf6 	bl	8008a92 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f000 f80d 	bl	80090c8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80090ae:	4805      	ldr	r0, [pc, #20]	; (80090c4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80090b0:	f7ff fc60 	bl	8008974 <LST_is_empty>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0f0      	beq.n	800909c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80090ba:	bf00      	nop
}
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	200301c8 	.word	0x200301c8

080090c8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80090d0:	bf00      	nop
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80090dc:	b480      	push	{r7}
 80090de:	b085      	sub	sp, #20
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	6039      	str	r1, [r7, #0]
 80090e6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80090e8:	79fb      	ldrb	r3, [r7, #7]
 80090ea:	2b06      	cmp	r3, #6
 80090ec:	d845      	bhi.n	800917a <OutputDbgTrace+0x9e>
 80090ee:	a201      	add	r2, pc, #4	; (adr r2, 80090f4 <OutputDbgTrace+0x18>)
 80090f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f4:	08009111 	.word	0x08009111
 80090f8:	08009135 	.word	0x08009135
 80090fc:	0800913b 	.word	0x0800913b
 8009100:	0800914f 	.word	0x0800914f
 8009104:	0800915b 	.word	0x0800915b
 8009108:	08009161 	.word	0x08009161
 800910c:	0800916f 	.word	0x0800916f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	7a5b      	ldrb	r3, [r3, #9]
 8009118:	2bff      	cmp	r3, #255	; 0xff
 800911a:	d005      	beq.n	8009128 <OutputDbgTrace+0x4c>
 800911c:	2bff      	cmp	r3, #255	; 0xff
 800911e:	dc05      	bgt.n	800912c <OutputDbgTrace+0x50>
 8009120:	2b0e      	cmp	r3, #14
 8009122:	d005      	beq.n	8009130 <OutputDbgTrace+0x54>
 8009124:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8009126:	e001      	b.n	800912c <OutputDbgTrace+0x50>
          break;
 8009128:	bf00      	nop
 800912a:	e027      	b.n	800917c <OutputDbgTrace+0xa0>
          break;
 800912c:	bf00      	nop
 800912e:	e025      	b.n	800917c <OutputDbgTrace+0xa0>
          break;
 8009130:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8009132:	e023      	b.n	800917c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8009138:	e020      	b.n	800917c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	7a5b      	ldrb	r3, [r3, #9]
 8009142:	2b0e      	cmp	r3, #14
 8009144:	d001      	beq.n	800914a <OutputDbgTrace+0x6e>
 8009146:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8009148:	e000      	b.n	800914c <OutputDbgTrace+0x70>
          break;
 800914a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800914c:	e016      	b.n	800917c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	7a5b      	ldrb	r3, [r3, #9]
 8009156:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009158:	e010      	b.n	800917c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800915e:	e00d      	b.n	800917c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	7a5b      	ldrb	r3, [r3, #9]
 8009168:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800916a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800916c:	e006      	b.n	800917c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	7a5b      	ldrb	r3, [r3, #9]
 8009176:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8009178:	e000      	b.n	800917c <OutputDbgTrace+0xa0>

    default:
      break;
 800917a:	bf00      	nop
  }

  return;
 800917c:	bf00      	nop
}
 800917e:	3714      	adds	r7, #20
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <UTIL_LPM_Init+0x1c>)
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009192:	4b05      	ldr	r3, [pc, #20]	; (80091a8 <UTIL_LPM_Init+0x20>)
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009198:	bf00      	nop
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000350 	.word	0x20000350
 80091a8:	20000354 	.word	0x20000354

080091ac <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	460b      	mov	r3, r1
 80091b6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091b8:	f3ef 8310 	mrs	r3, PRIMASK
 80091bc:	613b      	str	r3, [r7, #16]
  return(result);
 80091be:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80091c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091c2:	b672      	cpsid	i
}
 80091c4:	bf00      	nop
  
  switch(state)
 80091c6:	78fb      	ldrb	r3, [r7, #3]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d008      	beq.n	80091de <UTIL_LPM_SetOffMode+0x32>
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d10e      	bne.n	80091ee <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80091d0:	4b0d      	ldr	r3, [pc, #52]	; (8009208 <UTIL_LPM_SetOffMode+0x5c>)
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <UTIL_LPM_SetOffMode+0x5c>)
 80091da:	6013      	str	r3, [r2, #0]
      break;
 80091dc:	e008      	b.n	80091f0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	43da      	mvns	r2, r3
 80091e2:	4b09      	ldr	r3, [pc, #36]	; (8009208 <UTIL_LPM_SetOffMode+0x5c>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4013      	ands	r3, r2
 80091e8:	4a07      	ldr	r2, [pc, #28]	; (8009208 <UTIL_LPM_SetOffMode+0x5c>)
 80091ea:	6013      	str	r3, [r2, #0]
      break;
 80091ec:	e000      	b.n	80091f0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80091ee:	bf00      	nop
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f383 8810 	msr	PRIMASK, r3
}
 80091fa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80091fc:	bf00      	nop
 80091fe:	371c      	adds	r7, #28
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	20000354 	.word	0x20000354

0800920c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009212:	f3ef 8310 	mrs	r3, PRIMASK
 8009216:	60bb      	str	r3, [r7, #8]
  return(result);
 8009218:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800921a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800921c:	b672      	cpsid	i
}
 800921e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009220:	4b12      	ldr	r3, [pc, #72]	; (800926c <UTIL_LPM_EnterLowPower+0x60>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d006      	beq.n	8009236 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009228:	4b11      	ldr	r3, [pc, #68]	; (8009270 <UTIL_LPM_EnterLowPower+0x64>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800922e:	4b10      	ldr	r3, [pc, #64]	; (8009270 <UTIL_LPM_EnterLowPower+0x64>)
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	4798      	blx	r3
 8009234:	e010      	b.n	8009258 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009236:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <UTIL_LPM_EnterLowPower+0x68>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d006      	beq.n	800924c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800923e:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <UTIL_LPM_EnterLowPower+0x64>)
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8009244:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <UTIL_LPM_EnterLowPower+0x64>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	4798      	blx	r3
 800924a:	e005      	b.n	8009258 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800924c:	4b08      	ldr	r3, [pc, #32]	; (8009270 <UTIL_LPM_EnterLowPower+0x64>)
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8009252:	4b07      	ldr	r3, [pc, #28]	; (8009270 <UTIL_LPM_EnterLowPower+0x64>)
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	4798      	blx	r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f383 8810 	msr	PRIMASK, r3
}
 8009262:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009264:	bf00      	nop
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20000350 	.word	0x20000350
 8009270:	0800aee8 	.word	0x0800aee8
 8009274:	20000354 	.word	0x20000354

08009278 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08c      	sub	sp, #48	; 0x30
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009280:	4b67      	ldr	r3, [pc, #412]	; (8009420 <UTIL_SEQ_Run+0x1a8>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009286:	4b66      	ldr	r3, [pc, #408]	; (8009420 <UTIL_SEQ_Run+0x1a8>)
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4013      	ands	r3, r2
 800928e:	4a64      	ldr	r2, [pc, #400]	; (8009420 <UTIL_SEQ_Run+0x1a8>)
 8009290:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8009292:	e083      	b.n	800939c <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8009298:	e002      	b.n	80092a0 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	3301      	adds	r3, #1
 800929e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80092a0:	4a60      	ldr	r2, [pc, #384]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 80092a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80092a8:	4b5f      	ldr	r3, [pc, #380]	; (8009428 <UTIL_SEQ_Run+0x1b0>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	401a      	ands	r2, r3
 80092ae:	4b5c      	ldr	r3, [pc, #368]	; (8009420 <UTIL_SEQ_Run+0x1a8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4013      	ands	r3, r2
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d0f0      	beq.n	800929a <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80092b8:	4a5a      	ldr	r2, [pc, #360]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 80092ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092bc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80092c0:	4b59      	ldr	r3, [pc, #356]	; (8009428 <UTIL_SEQ_Run+0x1b0>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	401a      	ands	r2, r3
 80092c6:	4b56      	ldr	r3, [pc, #344]	; (8009420 <UTIL_SEQ_Run+0x1a8>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4013      	ands	r3, r2
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80092ce:	4a55      	ldr	r2, [pc, #340]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 80092d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d2:	00db      	lsls	r3, r3, #3
 80092d4:	4413      	add	r3, r2
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	4013      	ands	r3, r2
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d106      	bne.n	80092ee <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80092e0:	4a50      	ldr	r2, [pc, #320]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e4:	00db      	lsls	r3, r3, #3
 80092e6:	4413      	add	r3, r2
 80092e8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ec:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80092ee:	4a4d      	ldr	r2, [pc, #308]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 80092f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	4413      	add	r3, r2
 80092f6:	685a      	ldr	r2, [r3, #4]
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	4013      	ands	r3, r2
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 f99d 	bl	800963c <SEQ_BitPosition>
 8009302:	4603      	mov	r3, r0
 8009304:	461a      	mov	r2, r3
 8009306:	4b49      	ldr	r3, [pc, #292]	; (800942c <UTIL_SEQ_Run+0x1b4>)
 8009308:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800930a:	4a46      	ldr	r2, [pc, #280]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 800930c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	4413      	add	r3, r2
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	4b45      	ldr	r3, [pc, #276]	; (800942c <UTIL_SEQ_Run+0x1b4>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	2101      	movs	r1, #1
 800931a:	fa01 f303 	lsl.w	r3, r1, r3
 800931e:	43db      	mvns	r3, r3
 8009320:	401a      	ands	r2, r3
 8009322:	4940      	ldr	r1, [pc, #256]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	440b      	add	r3, r1
 800932a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800932c:	f3ef 8310 	mrs	r3, PRIMASK
 8009330:	61bb      	str	r3, [r7, #24]
  return(result);
 8009332:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009334:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009336:	b672      	cpsid	i
}
 8009338:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800933a:	4b3c      	ldr	r3, [pc, #240]	; (800942c <UTIL_SEQ_Run+0x1b4>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2201      	movs	r2, #1
 8009340:	fa02 f303 	lsl.w	r3, r2, r3
 8009344:	43da      	mvns	r2, r3
 8009346:	4b3a      	ldr	r3, [pc, #232]	; (8009430 <UTIL_SEQ_Run+0x1b8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4013      	ands	r3, r2
 800934c:	4a38      	ldr	r2, [pc, #224]	; (8009430 <UTIL_SEQ_Run+0x1b8>)
 800934e:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009350:	2302      	movs	r3, #2
 8009352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009354:	e013      	b.n	800937e <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009358:	3b01      	subs	r3, #1
 800935a:	4a32      	ldr	r2, [pc, #200]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 800935c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009360:	4b32      	ldr	r3, [pc, #200]	; (800942c <UTIL_SEQ_Run+0x1b4>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	2201      	movs	r2, #1
 8009366:	fa02 f303 	lsl.w	r3, r2, r3
 800936a:	43da      	mvns	r2, r3
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	3b01      	subs	r3, #1
 8009370:	400a      	ands	r2, r1
 8009372:	492c      	ldr	r1, [pc, #176]	; (8009424 <UTIL_SEQ_Run+0x1ac>)
 8009374:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937a:	3b01      	subs	r3, #1
 800937c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800937e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1e8      	bne.n	8009356 <UTIL_SEQ_Run+0xde>
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	f383 8810 	msr	PRIMASK, r3
}
 800938e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009390:	4b26      	ldr	r3, [pc, #152]	; (800942c <UTIL_SEQ_Run+0x1b4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a27      	ldr	r2, [pc, #156]	; (8009434 <UTIL_SEQ_Run+0x1bc>)
 8009396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800939a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800939c:	4b24      	ldr	r3, [pc, #144]	; (8009430 <UTIL_SEQ_Run+0x1b8>)
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	4b21      	ldr	r3, [pc, #132]	; (8009428 <UTIL_SEQ_Run+0x1b0>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	401a      	ands	r2, r3
 80093a6:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <UTIL_SEQ_Run+0x1a8>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4013      	ands	r3, r2
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d007      	beq.n	80093c0 <UTIL_SEQ_Run+0x148>
 80093b0:	4b21      	ldr	r3, [pc, #132]	; (8009438 <UTIL_SEQ_Run+0x1c0>)
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	4b21      	ldr	r3, [pc, #132]	; (800943c <UTIL_SEQ_Run+0x1c4>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4013      	ands	r3, r2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f43f af6a 	beq.w	8009294 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80093c0:	4b1a      	ldr	r3, [pc, #104]	; (800942c <UTIL_SEQ_Run+0x1b4>)
 80093c2:	f04f 32ff 	mov.w	r2, #4294967295
 80093c6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80093c8:	f000 f92a 	bl	8009620 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093cc:	f3ef 8310 	mrs	r3, PRIMASK
 80093d0:	613b      	str	r3, [r7, #16]
  return(result);
 80093d2:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80093d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80093d6:	b672      	cpsid	i
}
 80093d8:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 80093da:	4b15      	ldr	r3, [pc, #84]	; (8009430 <UTIL_SEQ_Run+0x1b8>)
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	4b12      	ldr	r3, [pc, #72]	; (8009428 <UTIL_SEQ_Run+0x1b0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	401a      	ands	r2, r3
 80093e4:	4b0e      	ldr	r3, [pc, #56]	; (8009420 <UTIL_SEQ_Run+0x1a8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4013      	ands	r3, r2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d108      	bne.n	8009400 <UTIL_SEQ_Run+0x188>
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <UTIL_SEQ_Run+0x1c0>)
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <UTIL_SEQ_Run+0x1c4>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4013      	ands	r3, r2
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d101      	bne.n	8009400 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 80093fc:	f7f7 f938 	bl	8000670 <UTIL_SEQ_Idle>
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f383 8810 	msr	PRIMASK, r3
}
 800940a:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800940c:	f000 f90f 	bl	800962e <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009410:	4a03      	ldr	r2, [pc, #12]	; (8009420 <UTIL_SEQ_Run+0x1a8>)
 8009412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009414:	6013      	str	r3, [r2, #0]

  return;
 8009416:	bf00      	nop
}
 8009418:	3730      	adds	r7, #48	; 0x30
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	2000005c 	.word	0x2000005c
 8009424:	200003e8 	.word	0x200003e8
 8009428:	20000058 	.word	0x20000058
 800942c:	20000364 	.word	0x20000364
 8009430:	20000358 	.word	0x20000358
 8009434:	20000368 	.word	0x20000368
 8009438:	2000035c 	.word	0x2000035c
 800943c:	20000360 	.word	0x20000360

08009440 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b088      	sub	sp, #32
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800944c:	f3ef 8310 	mrs	r3, PRIMASK
 8009450:	617b      	str	r3, [r7, #20]
  return(result);
 8009452:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009454:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009456:	b672      	cpsid	i
}
 8009458:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f8ee 	bl	800963c <SEQ_BitPosition>
 8009460:	4603      	mov	r3, r0
 8009462:	4619      	mov	r1, r3
 8009464:	4a06      	ldr	r2, [pc, #24]	; (8009480 <UTIL_SEQ_RegTask+0x40>)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	f383 8810 	msr	PRIMASK, r3
}
 8009476:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009478:	bf00      	nop
}
 800947a:	3720      	adds	r7, #32
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20000368 	.word	0x20000368

08009484 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800948e:	f3ef 8310 	mrs	r3, PRIMASK
 8009492:	60fb      	str	r3, [r7, #12]
  return(result);
 8009494:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009496:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009498:	b672      	cpsid	i
}
 800949a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800949c:	4b0d      	ldr	r3, [pc, #52]	; (80094d4 <UTIL_SEQ_SetTask+0x50>)
 800949e:	681a      	ldr	r2, [r3, #0]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	4a0b      	ldr	r2, [pc, #44]	; (80094d4 <UTIL_SEQ_SetTask+0x50>)
 80094a6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80094a8:	4a0b      	ldr	r2, [pc, #44]	; (80094d8 <UTIL_SEQ_SetTask+0x54>)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	4908      	ldr	r1, [pc, #32]	; (80094d8 <UTIL_SEQ_SetTask+0x54>)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f383 8810 	msr	PRIMASK, r3
}
 80094c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80094c8:	bf00      	nop
}
 80094ca:	371c      	adds	r7, #28
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	20000358 	.word	0x20000358
 80094d8:	200003e8 	.word	0x200003e8

080094dc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094e4:	f3ef 8310 	mrs	r3, PRIMASK
 80094e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80094ea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80094ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80094ee:	b672      	cpsid	i
}
 80094f0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	43da      	mvns	r2, r3
 80094f6:	4b08      	ldr	r3, [pc, #32]	; (8009518 <UTIL_SEQ_PauseTask+0x3c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4013      	ands	r3, r2
 80094fc:	4a06      	ldr	r2, [pc, #24]	; (8009518 <UTIL_SEQ_PauseTask+0x3c>)
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	f383 8810 	msr	PRIMASK, r3
}
 800950a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800950c:	bf00      	nop
}
 800950e:	371c      	adds	r7, #28
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	20000058 	.word	0x20000058

0800951c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800951c:	b480      	push	{r7}
 800951e:	b087      	sub	sp, #28
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009524:	f3ef 8310 	mrs	r3, PRIMASK
 8009528:	60fb      	str	r3, [r7, #12]
  return(result);
 800952a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800952c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800952e:	b672      	cpsid	i
}
 8009530:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009532:	4b09      	ldr	r3, [pc, #36]	; (8009558 <UTIL_SEQ_ResumeTask+0x3c>)
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4313      	orrs	r3, r2
 800953a:	4a07      	ldr	r2, [pc, #28]	; (8009558 <UTIL_SEQ_ResumeTask+0x3c>)
 800953c:	6013      	str	r3, [r2, #0]
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f383 8810 	msr	PRIMASK, r3
}
 8009548:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800954a:	bf00      	nop
}
 800954c:	371c      	adds	r7, #28
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	20000058 	.word	0x20000058

0800955c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009564:	f3ef 8310 	mrs	r3, PRIMASK
 8009568:	60fb      	str	r3, [r7, #12]
  return(result);
 800956a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800956c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800956e:	b672      	cpsid	i
}
 8009570:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009572:	4b09      	ldr	r3, [pc, #36]	; (8009598 <UTIL_SEQ_SetEvt+0x3c>)
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4313      	orrs	r3, r2
 800957a:	4a07      	ldr	r2, [pc, #28]	; (8009598 <UTIL_SEQ_SetEvt+0x3c>)
 800957c:	6013      	str	r3, [r2, #0]
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	f383 8810 	msr	PRIMASK, r3
}
 8009588:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800958a:	bf00      	nop
}
 800958c:	371c      	adds	r7, #28
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	2000035c 	.word	0x2000035c

0800959c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80095a4:	4b1b      	ldr	r3, [pc, #108]	; (8009614 <UTIL_SEQ_WaitEvt+0x78>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80095aa:	4b1a      	ldr	r3, [pc, #104]	; (8009614 <UTIL_SEQ_WaitEvt+0x78>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b2:	d102      	bne.n	80095ba <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	e005      	b.n	80095c6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 80095ba:	4b16      	ldr	r3, [pc, #88]	; (8009614 <UTIL_SEQ_WaitEvt+0x78>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2201      	movs	r2, #1
 80095c0:	fa02 f303 	lsl.w	r3, r2, r3
 80095c4:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80095c6:	4b14      	ldr	r3, [pc, #80]	; (8009618 <UTIL_SEQ_WaitEvt+0x7c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 80095cc:	4a12      	ldr	r2, [pc, #72]	; (8009618 <UTIL_SEQ_WaitEvt+0x7c>)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 80095d2:	e005      	b.n	80095e0 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 80095d4:	4b10      	ldr	r3, [pc, #64]	; (8009618 <UTIL_SEQ_WaitEvt+0x7c>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4619      	mov	r1, r3
 80095da:	6978      	ldr	r0, [r7, #20]
 80095dc:	f7f7 f84e 	bl	800067c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 80095e0:	4b0e      	ldr	r3, [pc, #56]	; (800961c <UTIL_SEQ_WaitEvt+0x80>)
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <UTIL_SEQ_WaitEvt+0x7c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4013      	ands	r3, r2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d0f2      	beq.n	80095d4 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80095ee:	4a09      	ldr	r2, [pc, #36]	; (8009614 <UTIL_SEQ_WaitEvt+0x78>)
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 80095f4:	4b08      	ldr	r3, [pc, #32]	; (8009618 <UTIL_SEQ_WaitEvt+0x7c>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	43da      	mvns	r2, r3
 80095fa:	4b08      	ldr	r3, [pc, #32]	; (800961c <UTIL_SEQ_WaitEvt+0x80>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4013      	ands	r3, r2
 8009600:	4a06      	ldr	r2, [pc, #24]	; (800961c <UTIL_SEQ_WaitEvt+0x80>)
 8009602:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8009604:	4a04      	ldr	r2, [pc, #16]	; (8009618 <UTIL_SEQ_WaitEvt+0x7c>)
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6013      	str	r3, [r2, #0]

  return;
 800960a:	bf00      	nop
}
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20000364 	.word	0x20000364
 8009618:	20000360 	.word	0x20000360
 800961c:	2000035c 	.word	0x2000035c

08009620 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009624:	bf00      	nop
}
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800962e:	b480      	push	{r7}
 8009630:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009632:	bf00      	nop
}
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8009644:	2300      	movs	r3, #0
 8009646:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	0c1b      	lsrs	r3, r3, #16
 800964c:	041b      	lsls	r3, r3, #16
 800964e:	2b00      	cmp	r3, #0
 8009650:	d104      	bne.n	800965c <SEQ_BitPosition+0x20>
 8009652:	2310      	movs	r3, #16
 8009654:	73fb      	strb	r3, [r7, #15]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	041b      	lsls	r3, r3, #16
 800965a:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d105      	bne.n	8009672 <SEQ_BitPosition+0x36>
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	3308      	adds	r3, #8
 800966a:	73fb      	strb	r3, [r7, #15]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	021b      	lsls	r3, r3, #8
 8009670:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d105      	bne.n	8009688 <SEQ_BitPosition+0x4c>
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	3304      	adds	r3, #4
 8009680:	73fb      	strb	r3, [r7, #15]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	011b      	lsls	r3, r3, #4
 8009686:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	0f1b      	lsrs	r3, r3, #28
 800968c:	4a07      	ldr	r2, [pc, #28]	; (80096ac <SEQ_BitPosition+0x70>)
 800968e:	5cd2      	ldrb	r2, [r2, r3]
 8009690:	7bfb      	ldrb	r3, [r7, #15]
 8009692:	4413      	add	r3, r2
 8009694:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009696:	7bfb      	ldrb	r3, [r7, #15]
 8009698:	f1c3 031f 	rsb	r3, r3, #31
 800969c:	b2db      	uxtb	r3, r3
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	0800afc8 	.word	0x0800afc8

080096b0 <__errno>:
 80096b0:	4b01      	ldr	r3, [pc, #4]	; (80096b8 <__errno+0x8>)
 80096b2:	6818      	ldr	r0, [r3, #0]
 80096b4:	4770      	bx	lr
 80096b6:	bf00      	nop
 80096b8:	20000060 	.word	0x20000060

080096bc <__libc_init_array>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	4d0d      	ldr	r5, [pc, #52]	; (80096f4 <__libc_init_array+0x38>)
 80096c0:	4c0d      	ldr	r4, [pc, #52]	; (80096f8 <__libc_init_array+0x3c>)
 80096c2:	1b64      	subs	r4, r4, r5
 80096c4:	10a4      	asrs	r4, r4, #2
 80096c6:	2600      	movs	r6, #0
 80096c8:	42a6      	cmp	r6, r4
 80096ca:	d109      	bne.n	80096e0 <__libc_init_array+0x24>
 80096cc:	4d0b      	ldr	r5, [pc, #44]	; (80096fc <__libc_init_array+0x40>)
 80096ce:	4c0c      	ldr	r4, [pc, #48]	; (8009700 <__libc_init_array+0x44>)
 80096d0:	f001 fb30 	bl	800ad34 <_init>
 80096d4:	1b64      	subs	r4, r4, r5
 80096d6:	10a4      	asrs	r4, r4, #2
 80096d8:	2600      	movs	r6, #0
 80096da:	42a6      	cmp	r6, r4
 80096dc:	d105      	bne.n	80096ea <__libc_init_array+0x2e>
 80096de:	bd70      	pop	{r4, r5, r6, pc}
 80096e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e4:	4798      	blx	r3
 80096e6:	3601      	adds	r6, #1
 80096e8:	e7ee      	b.n	80096c8 <__libc_init_array+0xc>
 80096ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ee:	4798      	blx	r3
 80096f0:	3601      	adds	r6, #1
 80096f2:	e7f2      	b.n	80096da <__libc_init_array+0x1e>
 80096f4:	0800b254 	.word	0x0800b254
 80096f8:	0800b254 	.word	0x0800b254
 80096fc:	0800b254 	.word	0x0800b254
 8009700:	0800b258 	.word	0x0800b258

08009704 <memcpy>:
 8009704:	440a      	add	r2, r1
 8009706:	4291      	cmp	r1, r2
 8009708:	f100 33ff 	add.w	r3, r0, #4294967295
 800970c:	d100      	bne.n	8009710 <memcpy+0xc>
 800970e:	4770      	bx	lr
 8009710:	b510      	push	{r4, lr}
 8009712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009716:	f803 4f01 	strb.w	r4, [r3, #1]!
 800971a:	4291      	cmp	r1, r2
 800971c:	d1f9      	bne.n	8009712 <memcpy+0xe>
 800971e:	bd10      	pop	{r4, pc}

08009720 <memset>:
 8009720:	4402      	add	r2, r0
 8009722:	4603      	mov	r3, r0
 8009724:	4293      	cmp	r3, r2
 8009726:	d100      	bne.n	800972a <memset+0xa>
 8009728:	4770      	bx	lr
 800972a:	f803 1b01 	strb.w	r1, [r3], #1
 800972e:	e7f9      	b.n	8009724 <memset+0x4>

08009730 <validate_structure>:
 8009730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009732:	6801      	ldr	r1, [r0, #0]
 8009734:	293b      	cmp	r1, #59	; 0x3b
 8009736:	4604      	mov	r4, r0
 8009738:	d911      	bls.n	800975e <validate_structure+0x2e>
 800973a:	223c      	movs	r2, #60	; 0x3c
 800973c:	4668      	mov	r0, sp
 800973e:	f000 fcab 	bl	800a098 <div>
 8009742:	9a01      	ldr	r2, [sp, #4]
 8009744:	6863      	ldr	r3, [r4, #4]
 8009746:	9900      	ldr	r1, [sp, #0]
 8009748:	2a00      	cmp	r2, #0
 800974a:	440b      	add	r3, r1
 800974c:	6063      	str	r3, [r4, #4]
 800974e:	bfbb      	ittet	lt
 8009750:	323c      	addlt	r2, #60	; 0x3c
 8009752:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009756:	6022      	strge	r2, [r4, #0]
 8009758:	6022      	strlt	r2, [r4, #0]
 800975a:	bfb8      	it	lt
 800975c:	6063      	strlt	r3, [r4, #4]
 800975e:	6861      	ldr	r1, [r4, #4]
 8009760:	293b      	cmp	r1, #59	; 0x3b
 8009762:	d911      	bls.n	8009788 <validate_structure+0x58>
 8009764:	223c      	movs	r2, #60	; 0x3c
 8009766:	4668      	mov	r0, sp
 8009768:	f000 fc96 	bl	800a098 <div>
 800976c:	9a01      	ldr	r2, [sp, #4]
 800976e:	68a3      	ldr	r3, [r4, #8]
 8009770:	9900      	ldr	r1, [sp, #0]
 8009772:	2a00      	cmp	r2, #0
 8009774:	440b      	add	r3, r1
 8009776:	60a3      	str	r3, [r4, #8]
 8009778:	bfbb      	ittet	lt
 800977a:	323c      	addlt	r2, #60	; 0x3c
 800977c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009780:	6062      	strge	r2, [r4, #4]
 8009782:	6062      	strlt	r2, [r4, #4]
 8009784:	bfb8      	it	lt
 8009786:	60a3      	strlt	r3, [r4, #8]
 8009788:	68a1      	ldr	r1, [r4, #8]
 800978a:	2917      	cmp	r1, #23
 800978c:	d911      	bls.n	80097b2 <validate_structure+0x82>
 800978e:	2218      	movs	r2, #24
 8009790:	4668      	mov	r0, sp
 8009792:	f000 fc81 	bl	800a098 <div>
 8009796:	9a01      	ldr	r2, [sp, #4]
 8009798:	68e3      	ldr	r3, [r4, #12]
 800979a:	9900      	ldr	r1, [sp, #0]
 800979c:	2a00      	cmp	r2, #0
 800979e:	440b      	add	r3, r1
 80097a0:	60e3      	str	r3, [r4, #12]
 80097a2:	bfbb      	ittet	lt
 80097a4:	3218      	addlt	r2, #24
 80097a6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80097aa:	60a2      	strge	r2, [r4, #8]
 80097ac:	60a2      	strlt	r2, [r4, #8]
 80097ae:	bfb8      	it	lt
 80097b0:	60e3      	strlt	r3, [r4, #12]
 80097b2:	6921      	ldr	r1, [r4, #16]
 80097b4:	290b      	cmp	r1, #11
 80097b6:	d911      	bls.n	80097dc <validate_structure+0xac>
 80097b8:	220c      	movs	r2, #12
 80097ba:	4668      	mov	r0, sp
 80097bc:	f000 fc6c 	bl	800a098 <div>
 80097c0:	9a01      	ldr	r2, [sp, #4]
 80097c2:	6963      	ldr	r3, [r4, #20]
 80097c4:	9900      	ldr	r1, [sp, #0]
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	440b      	add	r3, r1
 80097ca:	6163      	str	r3, [r4, #20]
 80097cc:	bfbb      	ittet	lt
 80097ce:	320c      	addlt	r2, #12
 80097d0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80097d4:	6122      	strge	r2, [r4, #16]
 80097d6:	6122      	strlt	r2, [r4, #16]
 80097d8:	bfb8      	it	lt
 80097da:	6163      	strlt	r3, [r4, #20]
 80097dc:	6963      	ldr	r3, [r4, #20]
 80097de:	0799      	lsls	r1, r3, #30
 80097e0:	d120      	bne.n	8009824 <validate_structure+0xf4>
 80097e2:	2164      	movs	r1, #100	; 0x64
 80097e4:	fb93 f2f1 	sdiv	r2, r3, r1
 80097e8:	fb01 3212 	mls	r2, r1, r2, r3
 80097ec:	b9e2      	cbnz	r2, 8009828 <validate_structure+0xf8>
 80097ee:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80097f2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80097f6:	fb93 f2f1 	sdiv	r2, r3, r1
 80097fa:	fb01 3312 	mls	r3, r1, r2, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bf14      	ite	ne
 8009802:	231c      	movne	r3, #28
 8009804:	231d      	moveq	r3, #29
 8009806:	68e2      	ldr	r2, [r4, #12]
 8009808:	2a00      	cmp	r2, #0
 800980a:	dc0f      	bgt.n	800982c <validate_structure+0xfc>
 800980c:	4f33      	ldr	r7, [pc, #204]	; (80098dc <validate_structure+0x1ac>)
 800980e:	260b      	movs	r6, #11
 8009810:	2064      	movs	r0, #100	; 0x64
 8009812:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009816:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800981a:	f1bc 0f00 	cmp.w	ip, #0
 800981e:	dd31      	ble.n	8009884 <validate_structure+0x154>
 8009820:	b003      	add	sp, #12
 8009822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009824:	231c      	movs	r3, #28
 8009826:	e7ee      	b.n	8009806 <validate_structure+0xd6>
 8009828:	231d      	movs	r3, #29
 800982a:	e7ec      	b.n	8009806 <validate_structure+0xd6>
 800982c:	4f2b      	ldr	r7, [pc, #172]	; (80098dc <validate_structure+0x1ac>)
 800982e:	f04f 0c00 	mov.w	ip, #0
 8009832:	2564      	movs	r5, #100	; 0x64
 8009834:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8009838:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800983c:	2a01      	cmp	r2, #1
 800983e:	bf14      	ite	ne
 8009840:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8009844:	4618      	moveq	r0, r3
 8009846:	4281      	cmp	r1, r0
 8009848:	ddea      	ble.n	8009820 <validate_structure+0xf0>
 800984a:	3201      	adds	r2, #1
 800984c:	1a09      	subs	r1, r1, r0
 800984e:	2a0c      	cmp	r2, #12
 8009850:	60e1      	str	r1, [r4, #12]
 8009852:	6122      	str	r2, [r4, #16]
 8009854:	d1f0      	bne.n	8009838 <validate_structure+0x108>
 8009856:	6963      	ldr	r3, [r4, #20]
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	0791      	lsls	r1, r2, #30
 800985c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8009860:	d137      	bne.n	80098d2 <validate_structure+0x1a2>
 8009862:	fb92 f1f5 	sdiv	r1, r2, r5
 8009866:	fb05 2211 	mls	r2, r5, r1, r2
 800986a:	2a00      	cmp	r2, #0
 800986c:	d133      	bne.n	80098d6 <validate_structure+0x1a6>
 800986e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009872:	fb93 f2f6 	sdiv	r2, r3, r6
 8009876:	fb06 3312 	mls	r3, r6, r2, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	bf14      	ite	ne
 800987e:	231c      	movne	r3, #28
 8009880:	231d      	moveq	r3, #29
 8009882:	e7d9      	b.n	8009838 <validate_structure+0x108>
 8009884:	6921      	ldr	r1, [r4, #16]
 8009886:	3901      	subs	r1, #1
 8009888:	6121      	str	r1, [r4, #16]
 800988a:	3101      	adds	r1, #1
 800988c:	d114      	bne.n	80098b8 <validate_structure+0x188>
 800988e:	6963      	ldr	r3, [r4, #20]
 8009890:	1e59      	subs	r1, r3, #1
 8009892:	078a      	lsls	r2, r1, #30
 8009894:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8009898:	d117      	bne.n	80098ca <validate_structure+0x19a>
 800989a:	fb91 f2f0 	sdiv	r2, r1, r0
 800989e:	fb00 1112 	mls	r1, r0, r2, r1
 80098a2:	b9a1      	cbnz	r1, 80098ce <validate_structure+0x19e>
 80098a4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80098a8:	fb93 f2f5 	sdiv	r2, r3, r5
 80098ac:	fb05 3312 	mls	r3, r5, r2, r3
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	bf14      	ite	ne
 80098b4:	231c      	movne	r3, #28
 80098b6:	231d      	moveq	r3, #29
 80098b8:	6922      	ldr	r2, [r4, #16]
 80098ba:	2a01      	cmp	r2, #1
 80098bc:	bf14      	ite	ne
 80098be:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80098c2:	461a      	moveq	r2, r3
 80098c4:	4462      	add	r2, ip
 80098c6:	60e2      	str	r2, [r4, #12]
 80098c8:	e7a5      	b.n	8009816 <validate_structure+0xe6>
 80098ca:	231c      	movs	r3, #28
 80098cc:	e7f4      	b.n	80098b8 <validate_structure+0x188>
 80098ce:	231d      	movs	r3, #29
 80098d0:	e7f2      	b.n	80098b8 <validate_structure+0x188>
 80098d2:	231c      	movs	r3, #28
 80098d4:	e7b0      	b.n	8009838 <validate_structure+0x108>
 80098d6:	231d      	movs	r3, #29
 80098d8:	e7ae      	b.n	8009838 <validate_structure+0x108>
 80098da:	bf00      	nop
 80098dc:	0800afd8 	.word	0x0800afd8

080098e0 <mktime>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	b08b      	sub	sp, #44	; 0x2c
 80098e6:	4605      	mov	r5, r0
 80098e8:	f000 fc2c 	bl	800a144 <__gettzinfo>
 80098ec:	4607      	mov	r7, r0
 80098ee:	4628      	mov	r0, r5
 80098f0:	f7ff ff1e 	bl	8009730 <validate_structure>
 80098f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098f8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80098fc:	68a8      	ldr	r0, [r5, #8]
 80098fe:	696e      	ldr	r6, [r5, #20]
 8009900:	fb0a 2303 	mla	r3, sl, r3, r2
 8009904:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8009908:	fb0a 3a00 	mla	sl, sl, r0, r3
 800990c:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8009910:	4ac3      	ldr	r2, [pc, #780]	; (8009c20 <mktime+0x340>)
 8009912:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009916:	3c01      	subs	r4, #1
 8009918:	2b01      	cmp	r3, #1
 800991a:	4414      	add	r4, r2
 800991c:	dd11      	ble.n	8009942 <mktime+0x62>
 800991e:	07b1      	lsls	r1, r6, #30
 8009920:	d10f      	bne.n	8009942 <mktime+0x62>
 8009922:	2264      	movs	r2, #100	; 0x64
 8009924:	fb96 f3f2 	sdiv	r3, r6, r2
 8009928:	fb02 6313 	mls	r3, r2, r3, r6
 800992c:	b943      	cbnz	r3, 8009940 <mktime+0x60>
 800992e:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8009932:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009936:	fb91 f3f2 	sdiv	r3, r1, r2
 800993a:	fb02 1313 	mls	r3, r2, r3, r1
 800993e:	b903      	cbnz	r3, 8009942 <mktime+0x62>
 8009940:	3401      	adds	r4, #1
 8009942:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8009946:	3310      	adds	r3, #16
 8009948:	f644 6220 	movw	r2, #20000	; 0x4e20
 800994c:	4293      	cmp	r3, r2
 800994e:	61ec      	str	r4, [r5, #28]
 8009950:	f200 8161 	bhi.w	8009c16 <mktime+0x336>
 8009954:	2e46      	cmp	r6, #70	; 0x46
 8009956:	dd77      	ble.n	8009a48 <mktime+0x168>
 8009958:	2346      	movs	r3, #70	; 0x46
 800995a:	f240 1e6d 	movw	lr, #365	; 0x16d
 800995e:	2164      	movs	r1, #100	; 0x64
 8009960:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009964:	079a      	lsls	r2, r3, #30
 8009966:	d169      	bne.n	8009a3c <mktime+0x15c>
 8009968:	fb93 f2f1 	sdiv	r2, r3, r1
 800996c:	fb01 3212 	mls	r2, r1, r2, r3
 8009970:	2a00      	cmp	r2, #0
 8009972:	d166      	bne.n	8009a42 <mktime+0x162>
 8009974:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8009978:	fb9c f2f0 	sdiv	r2, ip, r0
 800997c:	fb00 c212 	mls	r2, r0, r2, ip
 8009980:	2a00      	cmp	r2, #0
 8009982:	bf14      	ite	ne
 8009984:	4672      	movne	r2, lr
 8009986:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800998a:	3301      	adds	r3, #1
 800998c:	429e      	cmp	r6, r3
 800998e:	4414      	add	r4, r2
 8009990:	d1e8      	bne.n	8009964 <mktime+0x84>
 8009992:	4ba4      	ldr	r3, [pc, #656]	; (8009c24 <mktime+0x344>)
 8009994:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8009998:	fbc3 ab04 	smlal	sl, fp, r3, r4
 800999c:	f000 f9ee 	bl	8009d7c <__tz_lock>
 80099a0:	f000 f9f8 	bl	8009d94 <_tzset_unlocked>
 80099a4:	4ba0      	ldr	r3, [pc, #640]	; (8009c28 <mktime+0x348>)
 80099a6:	f8d3 9000 	ldr.w	r9, [r3]
 80099aa:	f1b9 0f00 	cmp.w	r9, #0
 80099ae:	d03f      	beq.n	8009a30 <mktime+0x150>
 80099b0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80099b4:	6968      	ldr	r0, [r5, #20]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f1b9 0f01 	cmp.w	r9, #1
 80099bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80099c0:	46c8      	mov	r8, r9
 80099c2:	bfa8      	it	ge
 80099c4:	f04f 0801 	movge.w	r8, #1
 80099c8:	4283      	cmp	r3, r0
 80099ca:	d17f      	bne.n	8009acc <mktime+0x1ec>
 80099cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ce:	4619      	mov	r1, r3
 80099d0:	17da      	asrs	r2, r3, #31
 80099d2:	e9cd 1200 	strd	r1, r2, [sp]
 80099d6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80099da:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80099de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099e4:	1a80      	subs	r0, r0, r2
 80099e6:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80099ea:	4582      	cmp	sl, r0
 80099ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099f0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80099f4:	da71      	bge.n	8009ada <mktime+0x1fa>
 80099f6:	9800      	ldr	r0, [sp, #0]
 80099f8:	6a39      	ldr	r1, [r7, #32]
 80099fa:	1a09      	subs	r1, r1, r0
 80099fc:	9104      	str	r1, [sp, #16]
 80099fe:	9801      	ldr	r0, [sp, #4]
 8009a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a02:	eb61 0100 	sbc.w	r1, r1, r0
 8009a06:	9105      	str	r1, [sp, #20]
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	2900      	cmp	r1, #0
 8009a0c:	d075      	beq.n	8009afa <mktime+0x21a>
 8009a0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a12:	4582      	cmp	sl, r0
 8009a14:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009a18:	db05      	blt.n	8009a26 <mktime+0x146>
 8009a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a1e:	4582      	cmp	sl, r0
 8009a20:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009a24:	db6f      	blt.n	8009b06 <mktime+0x226>
 8009a26:	f1b9 0f00 	cmp.w	r9, #0
 8009a2a:	f04f 0900 	mov.w	r9, #0
 8009a2e:	da6f      	bge.n	8009b10 <mktime+0x230>
 8009a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a32:	eb1a 0a03 	adds.w	sl, sl, r3
 8009a36:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009a3a:	e0ae      	b.n	8009b9a <mktime+0x2ba>
 8009a3c:	f240 126d 	movw	r2, #365	; 0x16d
 8009a40:	e7a3      	b.n	800998a <mktime+0xaa>
 8009a42:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009a46:	e7a0      	b.n	800998a <mktime+0xaa>
 8009a48:	d0a3      	beq.n	8009992 <mktime+0xb2>
 8009a4a:	2345      	movs	r3, #69	; 0x45
 8009a4c:	f240 1e6d 	movw	lr, #365	; 0x16d
 8009a50:	2164      	movs	r1, #100	; 0x64
 8009a52:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009a56:	e012      	b.n	8009a7e <mktime+0x19e>
 8009a58:	bb62      	cbnz	r2, 8009ab4 <mktime+0x1d4>
 8009a5a:	fb93 f2f1 	sdiv	r2, r3, r1
 8009a5e:	fb01 3212 	mls	r2, r1, r2, r3
 8009a62:	bb52      	cbnz	r2, 8009aba <mktime+0x1da>
 8009a64:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8009a68:	fb9c f2f0 	sdiv	r2, ip, r0
 8009a6c:	fb00 c212 	mls	r2, r0, r2, ip
 8009a70:	2a00      	cmp	r2, #0
 8009a72:	bf14      	ite	ne
 8009a74:	4672      	movne	r2, lr
 8009a76:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009a7a:	1aa4      	subs	r4, r4, r2
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	429e      	cmp	r6, r3
 8009a80:	f003 0203 	and.w	r2, r3, #3
 8009a84:	dbe8      	blt.n	8009a58 <mktime+0x178>
 8009a86:	b9da      	cbnz	r2, 8009ac0 <mktime+0x1e0>
 8009a88:	2264      	movs	r2, #100	; 0x64
 8009a8a:	fb96 f3f2 	sdiv	r3, r6, r2
 8009a8e:	fb02 6313 	mls	r3, r2, r3, r6
 8009a92:	b9c3      	cbnz	r3, 8009ac6 <mktime+0x1e6>
 8009a94:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8009a98:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009a9c:	fb91 f3f2 	sdiv	r3, r1, r2
 8009aa0:	fb02 1313 	mls	r3, r2, r3, r1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f240 136d 	movw	r3, #365	; 0x16d
 8009aaa:	bf08      	it	eq
 8009aac:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009ab0:	1ae4      	subs	r4, r4, r3
 8009ab2:	e76e      	b.n	8009992 <mktime+0xb2>
 8009ab4:	f240 126d 	movw	r2, #365	; 0x16d
 8009ab8:	e7df      	b.n	8009a7a <mktime+0x19a>
 8009aba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009abe:	e7dc      	b.n	8009a7a <mktime+0x19a>
 8009ac0:	f240 136d 	movw	r3, #365	; 0x16d
 8009ac4:	e7f4      	b.n	8009ab0 <mktime+0x1d0>
 8009ac6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009aca:	e7f1      	b.n	8009ab0 <mktime+0x1d0>
 8009acc:	f000 f8ae 	bl	8009c2c <__tzcalc_limits>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	f47f af7b 	bne.w	80099cc <mktime+0xec>
 8009ad6:	46c1      	mov	r9, r8
 8009ad8:	e054      	b.n	8009b84 <mktime+0x2a4>
 8009ada:	9800      	ldr	r0, [sp, #0]
 8009adc:	9902      	ldr	r1, [sp, #8]
 8009ade:	1a09      	subs	r1, r1, r0
 8009ae0:	9108      	str	r1, [sp, #32]
 8009ae2:	9801      	ldr	r0, [sp, #4]
 8009ae4:	9903      	ldr	r1, [sp, #12]
 8009ae6:	eb61 0100 	sbc.w	r1, r1, r0
 8009aea:	9109      	str	r1, [sp, #36]	; 0x24
 8009aec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009af0:	4582      	cmp	sl, r0
 8009af2:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009af6:	dbee      	blt.n	8009ad6 <mktime+0x1f6>
 8009af8:	e77d      	b.n	80099f6 <mktime+0x116>
 8009afa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009afe:	4582      	cmp	sl, r0
 8009b00:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009b04:	db89      	blt.n	8009a1a <mktime+0x13a>
 8009b06:	f1b9 0f00 	cmp.w	r9, #0
 8009b0a:	db3f      	blt.n	8009b8c <mktime+0x2ac>
 8009b0c:	f04f 0901 	mov.w	r9, #1
 8009b10:	ea88 0809 	eor.w	r8, r8, r9
 8009b14:	f1b8 0f01 	cmp.w	r8, #1
 8009b18:	d134      	bne.n	8009b84 <mktime+0x2a4>
 8009b1a:	f1b9 0f00 	cmp.w	r9, #0
 8009b1e:	d04f      	beq.n	8009bc0 <mktime+0x2e0>
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	682a      	ldr	r2, [r5, #0]
 8009b24:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8009b28:	441a      	add	r2, r3
 8009b2a:	eb1a 0a03 	adds.w	sl, sl, r3
 8009b2e:	602a      	str	r2, [r5, #0]
 8009b30:	4628      	mov	r0, r5
 8009b32:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009b36:	f7ff fdfb 	bl	8009730 <validate_structure>
 8009b3a:	68ea      	ldr	r2, [r5, #12]
 8009b3c:	ebb2 0208 	subs.w	r2, r2, r8
 8009b40:	d020      	beq.n	8009b84 <mktime+0x2a4>
 8009b42:	2a01      	cmp	r2, #1
 8009b44:	dc3e      	bgt.n	8009bc4 <mktime+0x2e4>
 8009b46:	1c90      	adds	r0, r2, #2
 8009b48:	bfd8      	it	le
 8009b4a:	2201      	movle	r2, #1
 8009b4c:	69eb      	ldr	r3, [r5, #28]
 8009b4e:	18d3      	adds	r3, r2, r3
 8009b50:	4414      	add	r4, r2
 8009b52:	d540      	bpl.n	8009bd6 <mktime+0x2f6>
 8009b54:	1e72      	subs	r2, r6, #1
 8009b56:	0791      	lsls	r1, r2, #30
 8009b58:	d137      	bne.n	8009bca <mktime+0x2ea>
 8009b5a:	2164      	movs	r1, #100	; 0x64
 8009b5c:	fb92 f3f1 	sdiv	r3, r2, r1
 8009b60:	fb01 2313 	mls	r3, r1, r3, r2
 8009b64:	bba3      	cbnz	r3, 8009bd0 <mktime+0x2f0>
 8009b66:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8009b6a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009b6e:	fb96 f3f2 	sdiv	r3, r6, r2
 8009b72:	fb02 6613 	mls	r6, r2, r3, r6
 8009b76:	2e00      	cmp	r6, #0
 8009b78:	f240 136d 	movw	r3, #365	; 0x16d
 8009b7c:	bf18      	it	ne
 8009b7e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8009b82:	61eb      	str	r3, [r5, #28]
 8009b84:	f1b9 0f01 	cmp.w	r9, #1
 8009b88:	f47f af52 	bne.w	8009a30 <mktime+0x150>
 8009b8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b8e:	eb1a 0a03 	adds.w	sl, sl, r3
 8009b92:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009b96:	f04f 0901 	mov.w	r9, #1
 8009b9a:	f000 f8f5 	bl	8009d88 <__tz_unlock>
 8009b9e:	3404      	adds	r4, #4
 8009ba0:	2307      	movs	r3, #7
 8009ba2:	fb94 f3f3 	sdiv	r3, r4, r3
 8009ba6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009baa:	1ae4      	subs	r4, r4, r3
 8009bac:	bf48      	it	mi
 8009bae:	3407      	addmi	r4, #7
 8009bb0:	f8c5 9020 	str.w	r9, [r5, #32]
 8009bb4:	61ac      	str	r4, [r5, #24]
 8009bb6:	4650      	mov	r0, sl
 8009bb8:	4659      	mov	r1, fp
 8009bba:	b00b      	add	sp, #44	; 0x2c
 8009bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc0:	1a9b      	subs	r3, r3, r2
 8009bc2:	e7ae      	b.n	8009b22 <mktime+0x242>
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc8:	e7c0      	b.n	8009b4c <mktime+0x26c>
 8009bca:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009bce:	e7d8      	b.n	8009b82 <mktime+0x2a2>
 8009bd0:	f240 136d 	movw	r3, #365	; 0x16d
 8009bd4:	e7d5      	b.n	8009b82 <mktime+0x2a2>
 8009bd6:	07b2      	lsls	r2, r6, #30
 8009bd8:	d117      	bne.n	8009c0a <mktime+0x32a>
 8009bda:	2164      	movs	r1, #100	; 0x64
 8009bdc:	fb96 f2f1 	sdiv	r2, r6, r1
 8009be0:	fb01 6212 	mls	r2, r1, r2, r6
 8009be4:	b9a2      	cbnz	r2, 8009c10 <mktime+0x330>
 8009be6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8009bea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009bee:	fb96 f2f1 	sdiv	r2, r6, r1
 8009bf2:	fb01 6612 	mls	r6, r1, r2, r6
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	f240 126d 	movw	r2, #365	; 0x16d
 8009bfc:	bf08      	it	eq
 8009bfe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009c02:	4293      	cmp	r3, r2
 8009c04:	bfa8      	it	ge
 8009c06:	1a9b      	subge	r3, r3, r2
 8009c08:	e7bb      	b.n	8009b82 <mktime+0x2a2>
 8009c0a:	f240 126d 	movw	r2, #365	; 0x16d
 8009c0e:	e7f8      	b.n	8009c02 <mktime+0x322>
 8009c10:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009c14:	e7f5      	b.n	8009c02 <mktime+0x322>
 8009c16:	f04f 3aff 	mov.w	sl, #4294967295
 8009c1a:	f04f 3bff 	mov.w	fp, #4294967295
 8009c1e:	e7ca      	b.n	8009bb6 <mktime+0x2d6>
 8009c20:	0800b008 	.word	0x0800b008
 8009c24:	00015180 	.word	0x00015180
 8009c28:	20000414 	.word	0x20000414

08009c2c <__tzcalc_limits>:
 8009c2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	4680      	mov	r8, r0
 8009c32:	f000 fa87 	bl	800a144 <__gettzinfo>
 8009c36:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009c3a:	4598      	cmp	r8, r3
 8009c3c:	f340 8098 	ble.w	8009d70 <__tzcalc_limits+0x144>
 8009c40:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8009c44:	4443      	add	r3, r8
 8009c46:	109b      	asrs	r3, r3, #2
 8009c48:	f240 126d 	movw	r2, #365	; 0x16d
 8009c4c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8009c50:	fb02 3505 	mla	r5, r2, r5, r3
 8009c54:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009c58:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8009c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c60:	441d      	add	r5, r3
 8009c62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009c66:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8009c6a:	fb98 f7f3 	sdiv	r7, r8, r3
 8009c6e:	fb03 8717 	mls	r7, r3, r7, r8
 8009c72:	4442      	add	r2, r8
 8009c74:	fab7 fc87 	clz	ip, r7
 8009c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c7c:	f008 0303 	and.w	r3, r8, #3
 8009c80:	4415      	add	r5, r2
 8009c82:	2264      	movs	r2, #100	; 0x64
 8009c84:	f8c0 8004 	str.w	r8, [r0, #4]
 8009c88:	fb98 f6f2 	sdiv	r6, r8, r2
 8009c8c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009c90:	fb02 8616 	mls	r6, r2, r6, r8
 8009c94:	4604      	mov	r4, r0
 8009c96:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	f04f 0e07 	mov.w	lr, #7
 8009ca0:	7a22      	ldrb	r2, [r4, #8]
 8009ca2:	6963      	ldr	r3, [r4, #20]
 8009ca4:	2a4a      	cmp	r2, #74	; 0x4a
 8009ca6:	d128      	bne.n	8009cfa <__tzcalc_limits+0xce>
 8009ca8:	9900      	ldr	r1, [sp, #0]
 8009caa:	18ea      	adds	r2, r5, r3
 8009cac:	b901      	cbnz	r1, 8009cb0 <__tzcalc_limits+0x84>
 8009cae:	b906      	cbnz	r6, 8009cb2 <__tzcalc_limits+0x86>
 8009cb0:	bb0f      	cbnz	r7, 8009cf6 <__tzcalc_limits+0xca>
 8009cb2:	2b3b      	cmp	r3, #59	; 0x3b
 8009cb4:	bfd4      	ite	le
 8009cb6:	2300      	movle	r3, #0
 8009cb8:	2301      	movgt	r3, #1
 8009cba:	4413      	add	r3, r2
 8009cbc:	1e5a      	subs	r2, r3, #1
 8009cbe:	69a3      	ldr	r3, [r4, #24]
 8009cc0:	492c      	ldr	r1, [pc, #176]	; (8009d74 <__tzcalc_limits+0x148>)
 8009cc2:	fb01 3202 	mla	r2, r1, r2, r3
 8009cc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cc8:	4413      	add	r3, r2
 8009cca:	461a      	mov	r2, r3
 8009ccc:	17db      	asrs	r3, r3, #31
 8009cce:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8009cd2:	3428      	adds	r4, #40	; 0x28
 8009cd4:	45a3      	cmp	fp, r4
 8009cd6:	d1e3      	bne.n	8009ca0 <__tzcalc_limits+0x74>
 8009cd8:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8009cdc:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8009ce0:	4294      	cmp	r4, r2
 8009ce2:	eb75 0303 	sbcs.w	r3, r5, r3
 8009ce6:	bfb4      	ite	lt
 8009ce8:	2301      	movlt	r3, #1
 8009cea:	2300      	movge	r3, #0
 8009cec:	6003      	str	r3, [r0, #0]
 8009cee:	2001      	movs	r0, #1
 8009cf0:	b003      	add	sp, #12
 8009cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	e7df      	b.n	8009cba <__tzcalc_limits+0x8e>
 8009cfa:	2a44      	cmp	r2, #68	; 0x44
 8009cfc:	d101      	bne.n	8009d02 <__tzcalc_limits+0xd6>
 8009cfe:	18ea      	adds	r2, r5, r3
 8009d00:	e7dd      	b.n	8009cbe <__tzcalc_limits+0x92>
 8009d02:	9a00      	ldr	r2, [sp, #0]
 8009d04:	bb72      	cbnz	r2, 8009d64 <__tzcalc_limits+0x138>
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	bf0c      	ite	eq
 8009d0a:	46e0      	moveq	r8, ip
 8009d0c:	f04f 0801 	movne.w	r8, #1
 8009d10:	4919      	ldr	r1, [pc, #100]	; (8009d78 <__tzcalc_limits+0x14c>)
 8009d12:	68e2      	ldr	r2, [r4, #12]
 8009d14:	9201      	str	r2, [sp, #4]
 8009d16:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8009d1a:	fb0a 1808 	mla	r8, sl, r8, r1
 8009d1e:	462a      	mov	r2, r5
 8009d20:	f04f 0900 	mov.w	r9, #0
 8009d24:	f1a8 0804 	sub.w	r8, r8, #4
 8009d28:	9901      	ldr	r1, [sp, #4]
 8009d2a:	f109 0901 	add.w	r9, r9, #1
 8009d2e:	4549      	cmp	r1, r9
 8009d30:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8009d34:	dc18      	bgt.n	8009d68 <__tzcalc_limits+0x13c>
 8009d36:	f102 0804 	add.w	r8, r2, #4
 8009d3a:	fb98 f9fe 	sdiv	r9, r8, lr
 8009d3e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8009d42:	eba8 0909 	sub.w	r9, r8, r9
 8009d46:	ebb3 0909 	subs.w	r9, r3, r9
 8009d4a:	6923      	ldr	r3, [r4, #16]
 8009d4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009d50:	bf48      	it	mi
 8009d52:	f109 0907 	addmi.w	r9, r9, #7
 8009d56:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009d5a:	444b      	add	r3, r9
 8009d5c:	4553      	cmp	r3, sl
 8009d5e:	da05      	bge.n	8009d6c <__tzcalc_limits+0x140>
 8009d60:	441a      	add	r2, r3
 8009d62:	e7ac      	b.n	8009cbe <__tzcalc_limits+0x92>
 8009d64:	46e0      	mov	r8, ip
 8009d66:	e7d3      	b.n	8009d10 <__tzcalc_limits+0xe4>
 8009d68:	4452      	add	r2, sl
 8009d6a:	e7dd      	b.n	8009d28 <__tzcalc_limits+0xfc>
 8009d6c:	3b07      	subs	r3, #7
 8009d6e:	e7f5      	b.n	8009d5c <__tzcalc_limits+0x130>
 8009d70:	2000      	movs	r0, #0
 8009d72:	e7bd      	b.n	8009cf0 <__tzcalc_limits+0xc4>
 8009d74:	00015180 	.word	0x00015180
 8009d78:	0800b0d4 	.word	0x0800b0d4

08009d7c <__tz_lock>:
 8009d7c:	4801      	ldr	r0, [pc, #4]	; (8009d84 <__tz_lock+0x8>)
 8009d7e:	f000 b9e5 	b.w	800a14c <__retarget_lock_acquire>
 8009d82:	bf00      	nop
 8009d84:	2000075f 	.word	0x2000075f

08009d88 <__tz_unlock>:
 8009d88:	4801      	ldr	r0, [pc, #4]	; (8009d90 <__tz_unlock+0x8>)
 8009d8a:	f000 b9e1 	b.w	800a150 <__retarget_lock_release>
 8009d8e:	bf00      	nop
 8009d90:	2000075f 	.word	0x2000075f

08009d94 <_tzset_unlocked>:
 8009d94:	4b01      	ldr	r3, [pc, #4]	; (8009d9c <_tzset_unlocked+0x8>)
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	f000 b802 	b.w	8009da0 <_tzset_unlocked_r>
 8009d9c:	20000060 	.word	0x20000060

08009da0 <_tzset_unlocked_r>:
 8009da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009da4:	b08d      	sub	sp, #52	; 0x34
 8009da6:	4607      	mov	r7, r0
 8009da8:	f000 f9cc 	bl	800a144 <__gettzinfo>
 8009dac:	49ae      	ldr	r1, [pc, #696]	; (800a068 <_tzset_unlocked_r+0x2c8>)
 8009dae:	4eaf      	ldr	r6, [pc, #700]	; (800a06c <_tzset_unlocked_r+0x2cc>)
 8009db0:	4605      	mov	r5, r0
 8009db2:	4638      	mov	r0, r7
 8009db4:	f000 f9be 	bl	800a134 <_getenv_r>
 8009db8:	4604      	mov	r4, r0
 8009dba:	b970      	cbnz	r0, 8009dda <_tzset_unlocked_r+0x3a>
 8009dbc:	4bac      	ldr	r3, [pc, #688]	; (800a070 <_tzset_unlocked_r+0x2d0>)
 8009dbe:	4aad      	ldr	r2, [pc, #692]	; (800a074 <_tzset_unlocked_r+0x2d4>)
 8009dc0:	6018      	str	r0, [r3, #0]
 8009dc2:	4bad      	ldr	r3, [pc, #692]	; (800a078 <_tzset_unlocked_r+0x2d8>)
 8009dc4:	6018      	str	r0, [r3, #0]
 8009dc6:	4bad      	ldr	r3, [pc, #692]	; (800a07c <_tzset_unlocked_r+0x2dc>)
 8009dc8:	6830      	ldr	r0, [r6, #0]
 8009dca:	e9c3 2200 	strd	r2, r2, [r3]
 8009dce:	f000 f9c1 	bl	800a154 <free>
 8009dd2:	6034      	str	r4, [r6, #0]
 8009dd4:	b00d      	add	sp, #52	; 0x34
 8009dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dda:	6831      	ldr	r1, [r6, #0]
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	d15f      	bne.n	8009ea0 <_tzset_unlocked_r+0x100>
 8009de0:	6830      	ldr	r0, [r6, #0]
 8009de2:	f000 f9b7 	bl	800a154 <free>
 8009de6:	4620      	mov	r0, r4
 8009de8:	f7f6 f9ca 	bl	8000180 <strlen>
 8009dec:	1c41      	adds	r1, r0, #1
 8009dee:	4638      	mov	r0, r7
 8009df0:	f000 fa08 	bl	800a204 <_malloc_r>
 8009df4:	6030      	str	r0, [r6, #0]
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d157      	bne.n	8009eaa <_tzset_unlocked_r+0x10a>
 8009dfa:	7823      	ldrb	r3, [r4, #0]
 8009dfc:	4aa0      	ldr	r2, [pc, #640]	; (800a080 <_tzset_unlocked_r+0x2e0>)
 8009dfe:	49a1      	ldr	r1, [pc, #644]	; (800a084 <_tzset_unlocked_r+0x2e4>)
 8009e00:	2b3a      	cmp	r3, #58	; 0x3a
 8009e02:	bf08      	it	eq
 8009e04:	3401      	addeq	r4, #1
 8009e06:	ae0a      	add	r6, sp, #40	; 0x28
 8009e08:	4633      	mov	r3, r6
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 fa64 	bl	800a2d8 <siscanf>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	dddf      	ble.n	8009dd4 <_tzset_unlocked_r+0x34>
 8009e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e16:	18e7      	adds	r7, r4, r3
 8009e18:	5ce3      	ldrb	r3, [r4, r3]
 8009e1a:	2b2d      	cmp	r3, #45	; 0x2d
 8009e1c:	d149      	bne.n	8009eb2 <_tzset_unlocked_r+0x112>
 8009e1e:	3701      	adds	r7, #1
 8009e20:	f04f 34ff 	mov.w	r4, #4294967295
 8009e24:	f10d 0a20 	add.w	sl, sp, #32
 8009e28:	f10d 0b1e 	add.w	fp, sp, #30
 8009e2c:	f04f 0800 	mov.w	r8, #0
 8009e30:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009e34:	4994      	ldr	r1, [pc, #592]	; (800a088 <_tzset_unlocked_r+0x2e8>)
 8009e36:	9603      	str	r6, [sp, #12]
 8009e38:	f8cd b000 	str.w	fp, [sp]
 8009e3c:	4633      	mov	r3, r6
 8009e3e:	aa07      	add	r2, sp, #28
 8009e40:	4638      	mov	r0, r7
 8009e42:	f8ad 801e 	strh.w	r8, [sp, #30]
 8009e46:	f8ad 8020 	strh.w	r8, [sp, #32]
 8009e4a:	f000 fa45 	bl	800a2d8 <siscanf>
 8009e4e:	4540      	cmp	r0, r8
 8009e50:	ddc0      	ble.n	8009dd4 <_tzset_unlocked_r+0x34>
 8009e52:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009e56:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009e5a:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800a094 <_tzset_unlocked_r+0x2f4>
 8009e5e:	213c      	movs	r1, #60	; 0x3c
 8009e60:	fb01 2203 	mla	r2, r1, r3, r2
 8009e64:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009e68:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009e6c:	fb01 2303 	mla	r3, r1, r3, r2
 8009e70:	435c      	muls	r4, r3
 8009e72:	62ac      	str	r4, [r5, #40]	; 0x28
 8009e74:	4c81      	ldr	r4, [pc, #516]	; (800a07c <_tzset_unlocked_r+0x2dc>)
 8009e76:	4b82      	ldr	r3, [pc, #520]	; (800a080 <_tzset_unlocked_r+0x2e0>)
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e7c:	4981      	ldr	r1, [pc, #516]	; (800a084 <_tzset_unlocked_r+0x2e4>)
 8009e7e:	441f      	add	r7, r3
 8009e80:	464a      	mov	r2, r9
 8009e82:	4633      	mov	r3, r6
 8009e84:	4638      	mov	r0, r7
 8009e86:	f000 fa27 	bl	800a2d8 <siscanf>
 8009e8a:	4540      	cmp	r0, r8
 8009e8c:	dc16      	bgt.n	8009ebc <_tzset_unlocked_r+0x11c>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	6063      	str	r3, [r4, #4]
 8009e92:	4b77      	ldr	r3, [pc, #476]	; (800a070 <_tzset_unlocked_r+0x2d0>)
 8009e94:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009e96:	601a      	str	r2, [r3, #0]
 8009e98:	4b77      	ldr	r3, [pc, #476]	; (800a078 <_tzset_unlocked_r+0x2d8>)
 8009e9a:	f8c3 8000 	str.w	r8, [r3]
 8009e9e:	e799      	b.n	8009dd4 <_tzset_unlocked_r+0x34>
 8009ea0:	f7f6 f976 	bl	8000190 <strcmp>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d19b      	bne.n	8009de0 <_tzset_unlocked_r+0x40>
 8009ea8:	e794      	b.n	8009dd4 <_tzset_unlocked_r+0x34>
 8009eaa:	4621      	mov	r1, r4
 8009eac:	f000 fa42 	bl	800a334 <strcpy>
 8009eb0:	e7a3      	b.n	8009dfa <_tzset_unlocked_r+0x5a>
 8009eb2:	2b2b      	cmp	r3, #43	; 0x2b
 8009eb4:	bf08      	it	eq
 8009eb6:	3701      	addeq	r7, #1
 8009eb8:	2401      	movs	r4, #1
 8009eba:	e7b3      	b.n	8009e24 <_tzset_unlocked_r+0x84>
 8009ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ebe:	f8c4 9004 	str.w	r9, [r4, #4]
 8009ec2:	18fc      	adds	r4, r7, r3
 8009ec4:	5cfb      	ldrb	r3, [r7, r3]
 8009ec6:	2b2d      	cmp	r3, #45	; 0x2d
 8009ec8:	f040 808b 	bne.w	8009fe2 <_tzset_unlocked_r+0x242>
 8009ecc:	3401      	adds	r4, #1
 8009ece:	f04f 37ff 	mov.w	r7, #4294967295
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009ed8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009edc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009ee0:	930a      	str	r3, [sp, #40]	; 0x28
 8009ee2:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009ee6:	e9cd b600 	strd	fp, r6, [sp]
 8009eea:	4967      	ldr	r1, [pc, #412]	; (800a088 <_tzset_unlocked_r+0x2e8>)
 8009eec:	4633      	mov	r3, r6
 8009eee:	aa07      	add	r2, sp, #28
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f000 f9f1 	bl	800a2d8 <siscanf>
 8009ef6:	2800      	cmp	r0, #0
 8009ef8:	dc78      	bgt.n	8009fec <_tzset_unlocked_r+0x24c>
 8009efa:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8009efc:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8009f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f02:	652f      	str	r7, [r5, #80]	; 0x50
 8009f04:	441c      	add	r4, r3
 8009f06:	462f      	mov	r7, r5
 8009f08:	f04f 0900 	mov.w	r9, #0
 8009f0c:	7823      	ldrb	r3, [r4, #0]
 8009f0e:	2b2c      	cmp	r3, #44	; 0x2c
 8009f10:	bf08      	it	eq
 8009f12:	3401      	addeq	r4, #1
 8009f14:	f894 8000 	ldrb.w	r8, [r4]
 8009f18:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009f1c:	d178      	bne.n	800a010 <_tzset_unlocked_r+0x270>
 8009f1e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009f22:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009f26:	ab09      	add	r3, sp, #36	; 0x24
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	4958      	ldr	r1, [pc, #352]	; (800a08c <_tzset_unlocked_r+0x2ec>)
 8009f2c:	9603      	str	r6, [sp, #12]
 8009f2e:	4633      	mov	r3, r6
 8009f30:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 f9cf 	bl	800a2d8 <siscanf>
 8009f3a:	2803      	cmp	r0, #3
 8009f3c:	f47f af4a 	bne.w	8009dd4 <_tzset_unlocked_r+0x34>
 8009f40:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009f44:	1e4b      	subs	r3, r1, #1
 8009f46:	2b0b      	cmp	r3, #11
 8009f48:	f63f af44 	bhi.w	8009dd4 <_tzset_unlocked_r+0x34>
 8009f4c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009f50:	1e53      	subs	r3, r2, #1
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	f63f af3e 	bhi.w	8009dd4 <_tzset_unlocked_r+0x34>
 8009f58:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009f5c:	2b06      	cmp	r3, #6
 8009f5e:	f63f af39 	bhi.w	8009dd4 <_tzset_unlocked_r+0x34>
 8009f62:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009f66:	f887 8008 	strb.w	r8, [r7, #8]
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6e:	eb04 0803 	add.w	r8, r4, r3
 8009f72:	2302      	movs	r3, #2
 8009f74:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009f7e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009f82:	930a      	str	r3, [sp, #40]	; 0x28
 8009f84:	f898 3000 	ldrb.w	r3, [r8]
 8009f88:	2b2f      	cmp	r3, #47	; 0x2f
 8009f8a:	d109      	bne.n	8009fa0 <_tzset_unlocked_r+0x200>
 8009f8c:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009f90:	e9cd b600 	strd	fp, r6, [sp]
 8009f94:	493e      	ldr	r1, [pc, #248]	; (800a090 <_tzset_unlocked_r+0x2f0>)
 8009f96:	4633      	mov	r3, r6
 8009f98:	aa07      	add	r2, sp, #28
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f000 f99c 	bl	800a2d8 <siscanf>
 8009fa0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009fa4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009fa8:	213c      	movs	r1, #60	; 0x3c
 8009faa:	fb01 2203 	mla	r2, r1, r3, r2
 8009fae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009fb2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009fb6:	fb01 2303 	mla	r3, r1, r3, r2
 8009fba:	61bb      	str	r3, [r7, #24]
 8009fbc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009fbe:	3728      	adds	r7, #40	; 0x28
 8009fc0:	4444      	add	r4, r8
 8009fc2:	f1b9 0f00 	cmp.w	r9, #0
 8009fc6:	d020      	beq.n	800a00a <_tzset_unlocked_r+0x26a>
 8009fc8:	6868      	ldr	r0, [r5, #4]
 8009fca:	f7ff fe2f 	bl	8009c2c <__tzcalc_limits>
 8009fce:	4b28      	ldr	r3, [pc, #160]	; (800a070 <_tzset_unlocked_r+0x2d0>)
 8009fd0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009fd6:	1a9b      	subs	r3, r3, r2
 8009fd8:	4a27      	ldr	r2, [pc, #156]	; (800a078 <_tzset_unlocked_r+0x2d8>)
 8009fda:	bf18      	it	ne
 8009fdc:	2301      	movne	r3, #1
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	e6f8      	b.n	8009dd4 <_tzset_unlocked_r+0x34>
 8009fe2:	2b2b      	cmp	r3, #43	; 0x2b
 8009fe4:	bf08      	it	eq
 8009fe6:	3401      	addeq	r4, #1
 8009fe8:	2701      	movs	r7, #1
 8009fea:	e772      	b.n	8009ed2 <_tzset_unlocked_r+0x132>
 8009fec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009ff0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009ff4:	213c      	movs	r1, #60	; 0x3c
 8009ff6:	fb01 2203 	mla	r2, r1, r3, r2
 8009ffa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009ffe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a002:	fb01 2303 	mla	r3, r1, r3, r2
 800a006:	435f      	muls	r7, r3
 800a008:	e77a      	b.n	8009f00 <_tzset_unlocked_r+0x160>
 800a00a:	f04f 0901 	mov.w	r9, #1
 800a00e:	e77d      	b.n	8009f0c <_tzset_unlocked_r+0x16c>
 800a010:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a014:	bf06      	itte	eq
 800a016:	3401      	addeq	r4, #1
 800a018:	4643      	moveq	r3, r8
 800a01a:	2344      	movne	r3, #68	; 0x44
 800a01c:	220a      	movs	r2, #10
 800a01e:	a90b      	add	r1, sp, #44	; 0x2c
 800a020:	4620      	mov	r0, r4
 800a022:	9305      	str	r3, [sp, #20]
 800a024:	f000 fa1e 	bl	800a464 <strtoul>
 800a028:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a02c:	9b05      	ldr	r3, [sp, #20]
 800a02e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a032:	45a0      	cmp	r8, r4
 800a034:	d114      	bne.n	800a060 <_tzset_unlocked_r+0x2c0>
 800a036:	234d      	movs	r3, #77	; 0x4d
 800a038:	f1b9 0f00 	cmp.w	r9, #0
 800a03c:	d107      	bne.n	800a04e <_tzset_unlocked_r+0x2ae>
 800a03e:	722b      	strb	r3, [r5, #8]
 800a040:	2103      	movs	r1, #3
 800a042:	2302      	movs	r3, #2
 800a044:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a048:	f8c5 9014 	str.w	r9, [r5, #20]
 800a04c:	e791      	b.n	8009f72 <_tzset_unlocked_r+0x1d2>
 800a04e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a052:	220b      	movs	r2, #11
 800a054:	2301      	movs	r3, #1
 800a056:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a05a:	2300      	movs	r3, #0
 800a05c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a05e:	e788      	b.n	8009f72 <_tzset_unlocked_r+0x1d2>
 800a060:	b280      	uxth	r0, r0
 800a062:	723b      	strb	r3, [r7, #8]
 800a064:	6178      	str	r0, [r7, #20]
 800a066:	e784      	b.n	8009f72 <_tzset_unlocked_r+0x1d2>
 800a068:	0800b038 	.word	0x0800b038
 800a06c:	20000410 	.word	0x20000410
 800a070:	20000418 	.word	0x20000418
 800a074:	0800b03b 	.word	0x0800b03b
 800a078:	20000414 	.word	0x20000414
 800a07c:	200000c4 	.word	0x200000c4
 800a080:	20000403 	.word	0x20000403
 800a084:	0800b03f 	.word	0x0800b03f
 800a088:	0800b062 	.word	0x0800b062
 800a08c:	0800b04e 	.word	0x0800b04e
 800a090:	0800b061 	.word	0x0800b061
 800a094:	200003f8 	.word	0x200003f8

0800a098 <div>:
 800a098:	2900      	cmp	r1, #0
 800a09a:	b510      	push	{r4, lr}
 800a09c:	fb91 f4f2 	sdiv	r4, r1, r2
 800a0a0:	fb02 1314 	mls	r3, r2, r4, r1
 800a0a4:	db06      	blt.n	800a0b4 <div+0x1c>
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	da01      	bge.n	800a0ae <div+0x16>
 800a0aa:	3401      	adds	r4, #1
 800a0ac:	1a9b      	subs	r3, r3, r2
 800a0ae:	e9c0 4300 	strd	r4, r3, [r0]
 800a0b2:	bd10      	pop	{r4, pc}
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	bfc4      	itt	gt
 800a0b8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800a0bc:	189b      	addgt	r3, r3, r2
 800a0be:	e7f6      	b.n	800a0ae <div+0x16>

0800a0c0 <_findenv_r>:
 800a0c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c4:	4607      	mov	r7, r0
 800a0c6:	4689      	mov	r9, r1
 800a0c8:	4616      	mov	r6, r2
 800a0ca:	f000 f9d5 	bl	800a478 <__env_lock>
 800a0ce:	4b18      	ldr	r3, [pc, #96]	; (800a130 <_findenv_r+0x70>)
 800a0d0:	681c      	ldr	r4, [r3, #0]
 800a0d2:	469a      	mov	sl, r3
 800a0d4:	b134      	cbz	r4, 800a0e4 <_findenv_r+0x24>
 800a0d6:	464b      	mov	r3, r9
 800a0d8:	4698      	mov	r8, r3
 800a0da:	f813 1b01 	ldrb.w	r1, [r3], #1
 800a0de:	b139      	cbz	r1, 800a0f0 <_findenv_r+0x30>
 800a0e0:	293d      	cmp	r1, #61	; 0x3d
 800a0e2:	d1f9      	bne.n	800a0d8 <_findenv_r+0x18>
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f000 f9cd 	bl	800a484 <__env_unlock>
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f0:	eba8 0809 	sub.w	r8, r8, r9
 800a0f4:	46a3      	mov	fp, r4
 800a0f6:	f854 0b04 	ldr.w	r0, [r4], #4
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d0f2      	beq.n	800a0e4 <_findenv_r+0x24>
 800a0fe:	4642      	mov	r2, r8
 800a100:	4649      	mov	r1, r9
 800a102:	f000 f91f 	bl	800a344 <strncmp>
 800a106:	2800      	cmp	r0, #0
 800a108:	d1f4      	bne.n	800a0f4 <_findenv_r+0x34>
 800a10a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a10e:	eb03 0508 	add.w	r5, r3, r8
 800a112:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a116:	2b3d      	cmp	r3, #61	; 0x3d
 800a118:	d1ec      	bne.n	800a0f4 <_findenv_r+0x34>
 800a11a:	f8da 3000 	ldr.w	r3, [sl]
 800a11e:	ebab 0303 	sub.w	r3, fp, r3
 800a122:	109b      	asrs	r3, r3, #2
 800a124:	4638      	mov	r0, r7
 800a126:	6033      	str	r3, [r6, #0]
 800a128:	f000 f9ac 	bl	800a484 <__env_unlock>
 800a12c:	1c68      	adds	r0, r5, #1
 800a12e:	e7dd      	b.n	800a0ec <_findenv_r+0x2c>
 800a130:	2000000c 	.word	0x2000000c

0800a134 <_getenv_r>:
 800a134:	b507      	push	{r0, r1, r2, lr}
 800a136:	aa01      	add	r2, sp, #4
 800a138:	f7ff ffc2 	bl	800a0c0 <_findenv_r>
 800a13c:	b003      	add	sp, #12
 800a13e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a144 <__gettzinfo>:
 800a144:	4800      	ldr	r0, [pc, #0]	; (800a148 <__gettzinfo+0x4>)
 800a146:	4770      	bx	lr
 800a148:	200000d0 	.word	0x200000d0

0800a14c <__retarget_lock_acquire>:
 800a14c:	4770      	bx	lr

0800a14e <__retarget_lock_acquire_recursive>:
 800a14e:	4770      	bx	lr

0800a150 <__retarget_lock_release>:
 800a150:	4770      	bx	lr

0800a152 <__retarget_lock_release_recursive>:
 800a152:	4770      	bx	lr

0800a154 <free>:
 800a154:	4b02      	ldr	r3, [pc, #8]	; (800a160 <free+0xc>)
 800a156:	4601      	mov	r1, r0
 800a158:	6818      	ldr	r0, [r3, #0]
 800a15a:	f000 b803 	b.w	800a164 <_free_r>
 800a15e:	bf00      	nop
 800a160:	20000060 	.word	0x20000060

0800a164 <_free_r>:
 800a164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a166:	2900      	cmp	r1, #0
 800a168:	d048      	beq.n	800a1fc <_free_r+0x98>
 800a16a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a16e:	9001      	str	r0, [sp, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	f1a1 0404 	sub.w	r4, r1, #4
 800a176:	bfb8      	it	lt
 800a178:	18e4      	addlt	r4, r4, r3
 800a17a:	f000 f989 	bl	800a490 <__malloc_lock>
 800a17e:	4a20      	ldr	r2, [pc, #128]	; (800a200 <_free_r+0x9c>)
 800a180:	9801      	ldr	r0, [sp, #4]
 800a182:	6813      	ldr	r3, [r2, #0]
 800a184:	4615      	mov	r5, r2
 800a186:	b933      	cbnz	r3, 800a196 <_free_r+0x32>
 800a188:	6063      	str	r3, [r4, #4]
 800a18a:	6014      	str	r4, [r2, #0]
 800a18c:	b003      	add	sp, #12
 800a18e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a192:	f000 b983 	b.w	800a49c <__malloc_unlock>
 800a196:	42a3      	cmp	r3, r4
 800a198:	d90b      	bls.n	800a1b2 <_free_r+0x4e>
 800a19a:	6821      	ldr	r1, [r4, #0]
 800a19c:	1862      	adds	r2, r4, r1
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	bf04      	itt	eq
 800a1a2:	681a      	ldreq	r2, [r3, #0]
 800a1a4:	685b      	ldreq	r3, [r3, #4]
 800a1a6:	6063      	str	r3, [r4, #4]
 800a1a8:	bf04      	itt	eq
 800a1aa:	1852      	addeq	r2, r2, r1
 800a1ac:	6022      	streq	r2, [r4, #0]
 800a1ae:	602c      	str	r4, [r5, #0]
 800a1b0:	e7ec      	b.n	800a18c <_free_r+0x28>
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	b10b      	cbz	r3, 800a1bc <_free_r+0x58>
 800a1b8:	42a3      	cmp	r3, r4
 800a1ba:	d9fa      	bls.n	800a1b2 <_free_r+0x4e>
 800a1bc:	6811      	ldr	r1, [r2, #0]
 800a1be:	1855      	adds	r5, r2, r1
 800a1c0:	42a5      	cmp	r5, r4
 800a1c2:	d10b      	bne.n	800a1dc <_free_r+0x78>
 800a1c4:	6824      	ldr	r4, [r4, #0]
 800a1c6:	4421      	add	r1, r4
 800a1c8:	1854      	adds	r4, r2, r1
 800a1ca:	42a3      	cmp	r3, r4
 800a1cc:	6011      	str	r1, [r2, #0]
 800a1ce:	d1dd      	bne.n	800a18c <_free_r+0x28>
 800a1d0:	681c      	ldr	r4, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	6053      	str	r3, [r2, #4]
 800a1d6:	4421      	add	r1, r4
 800a1d8:	6011      	str	r1, [r2, #0]
 800a1da:	e7d7      	b.n	800a18c <_free_r+0x28>
 800a1dc:	d902      	bls.n	800a1e4 <_free_r+0x80>
 800a1de:	230c      	movs	r3, #12
 800a1e0:	6003      	str	r3, [r0, #0]
 800a1e2:	e7d3      	b.n	800a18c <_free_r+0x28>
 800a1e4:	6825      	ldr	r5, [r4, #0]
 800a1e6:	1961      	adds	r1, r4, r5
 800a1e8:	428b      	cmp	r3, r1
 800a1ea:	bf04      	itt	eq
 800a1ec:	6819      	ldreq	r1, [r3, #0]
 800a1ee:	685b      	ldreq	r3, [r3, #4]
 800a1f0:	6063      	str	r3, [r4, #4]
 800a1f2:	bf04      	itt	eq
 800a1f4:	1949      	addeq	r1, r1, r5
 800a1f6:	6021      	streq	r1, [r4, #0]
 800a1f8:	6054      	str	r4, [r2, #4]
 800a1fa:	e7c7      	b.n	800a18c <_free_r+0x28>
 800a1fc:	b003      	add	sp, #12
 800a1fe:	bd30      	pop	{r4, r5, pc}
 800a200:	2000041c 	.word	0x2000041c

0800a204 <_malloc_r>:
 800a204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a206:	1ccd      	adds	r5, r1, #3
 800a208:	f025 0503 	bic.w	r5, r5, #3
 800a20c:	3508      	adds	r5, #8
 800a20e:	2d0c      	cmp	r5, #12
 800a210:	bf38      	it	cc
 800a212:	250c      	movcc	r5, #12
 800a214:	2d00      	cmp	r5, #0
 800a216:	4606      	mov	r6, r0
 800a218:	db01      	blt.n	800a21e <_malloc_r+0x1a>
 800a21a:	42a9      	cmp	r1, r5
 800a21c:	d903      	bls.n	800a226 <_malloc_r+0x22>
 800a21e:	230c      	movs	r3, #12
 800a220:	6033      	str	r3, [r6, #0]
 800a222:	2000      	movs	r0, #0
 800a224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a226:	f000 f933 	bl	800a490 <__malloc_lock>
 800a22a:	4921      	ldr	r1, [pc, #132]	; (800a2b0 <_malloc_r+0xac>)
 800a22c:	680a      	ldr	r2, [r1, #0]
 800a22e:	4614      	mov	r4, r2
 800a230:	b99c      	cbnz	r4, 800a25a <_malloc_r+0x56>
 800a232:	4f20      	ldr	r7, [pc, #128]	; (800a2b4 <_malloc_r+0xb0>)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	b923      	cbnz	r3, 800a242 <_malloc_r+0x3e>
 800a238:	4621      	mov	r1, r4
 800a23a:	4630      	mov	r0, r6
 800a23c:	f000 f83c 	bl	800a2b8 <_sbrk_r>
 800a240:	6038      	str	r0, [r7, #0]
 800a242:	4629      	mov	r1, r5
 800a244:	4630      	mov	r0, r6
 800a246:	f000 f837 	bl	800a2b8 <_sbrk_r>
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	d123      	bne.n	800a296 <_malloc_r+0x92>
 800a24e:	230c      	movs	r3, #12
 800a250:	6033      	str	r3, [r6, #0]
 800a252:	4630      	mov	r0, r6
 800a254:	f000 f922 	bl	800a49c <__malloc_unlock>
 800a258:	e7e3      	b.n	800a222 <_malloc_r+0x1e>
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	1b5b      	subs	r3, r3, r5
 800a25e:	d417      	bmi.n	800a290 <_malloc_r+0x8c>
 800a260:	2b0b      	cmp	r3, #11
 800a262:	d903      	bls.n	800a26c <_malloc_r+0x68>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	441c      	add	r4, r3
 800a268:	6025      	str	r5, [r4, #0]
 800a26a:	e004      	b.n	800a276 <_malloc_r+0x72>
 800a26c:	6863      	ldr	r3, [r4, #4]
 800a26e:	42a2      	cmp	r2, r4
 800a270:	bf0c      	ite	eq
 800a272:	600b      	streq	r3, [r1, #0]
 800a274:	6053      	strne	r3, [r2, #4]
 800a276:	4630      	mov	r0, r6
 800a278:	f000 f910 	bl	800a49c <__malloc_unlock>
 800a27c:	f104 000b 	add.w	r0, r4, #11
 800a280:	1d23      	adds	r3, r4, #4
 800a282:	f020 0007 	bic.w	r0, r0, #7
 800a286:	1ac2      	subs	r2, r0, r3
 800a288:	d0cc      	beq.n	800a224 <_malloc_r+0x20>
 800a28a:	1a1b      	subs	r3, r3, r0
 800a28c:	50a3      	str	r3, [r4, r2]
 800a28e:	e7c9      	b.n	800a224 <_malloc_r+0x20>
 800a290:	4622      	mov	r2, r4
 800a292:	6864      	ldr	r4, [r4, #4]
 800a294:	e7cc      	b.n	800a230 <_malloc_r+0x2c>
 800a296:	1cc4      	adds	r4, r0, #3
 800a298:	f024 0403 	bic.w	r4, r4, #3
 800a29c:	42a0      	cmp	r0, r4
 800a29e:	d0e3      	beq.n	800a268 <_malloc_r+0x64>
 800a2a0:	1a21      	subs	r1, r4, r0
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f000 f808 	bl	800a2b8 <_sbrk_r>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d1dd      	bne.n	800a268 <_malloc_r+0x64>
 800a2ac:	e7cf      	b.n	800a24e <_malloc_r+0x4a>
 800a2ae:	bf00      	nop
 800a2b0:	2000041c 	.word	0x2000041c
 800a2b4:	20000420 	.word	0x20000420

0800a2b8 <_sbrk_r>:
 800a2b8:	b538      	push	{r3, r4, r5, lr}
 800a2ba:	4d06      	ldr	r5, [pc, #24]	; (800a2d4 <_sbrk_r+0x1c>)
 800a2bc:	2300      	movs	r3, #0
 800a2be:	4604      	mov	r4, r0
 800a2c0:	4608      	mov	r0, r1
 800a2c2:	602b      	str	r3, [r5, #0]
 800a2c4:	f7f8 f8a8 	bl	8002418 <_sbrk>
 800a2c8:	1c43      	adds	r3, r0, #1
 800a2ca:	d102      	bne.n	800a2d2 <_sbrk_r+0x1a>
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	b103      	cbz	r3, 800a2d2 <_sbrk_r+0x1a>
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	bd38      	pop	{r3, r4, r5, pc}
 800a2d4:	20000764 	.word	0x20000764

0800a2d8 <siscanf>:
 800a2d8:	b40e      	push	{r1, r2, r3}
 800a2da:	b510      	push	{r4, lr}
 800a2dc:	b09f      	sub	sp, #124	; 0x7c
 800a2de:	ac21      	add	r4, sp, #132	; 0x84
 800a2e0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a2e4:	f854 2b04 	ldr.w	r2, [r4], #4
 800a2e8:	9201      	str	r2, [sp, #4]
 800a2ea:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a2ee:	9004      	str	r0, [sp, #16]
 800a2f0:	9008      	str	r0, [sp, #32]
 800a2f2:	f7f5 ff45 	bl	8000180 <strlen>
 800a2f6:	4b0c      	ldr	r3, [pc, #48]	; (800a328 <siscanf+0x50>)
 800a2f8:	9005      	str	r0, [sp, #20]
 800a2fa:	9009      	str	r0, [sp, #36]	; 0x24
 800a2fc:	930d      	str	r3, [sp, #52]	; 0x34
 800a2fe:	480b      	ldr	r0, [pc, #44]	; (800a32c <siscanf+0x54>)
 800a300:	9a01      	ldr	r2, [sp, #4]
 800a302:	6800      	ldr	r0, [r0, #0]
 800a304:	9403      	str	r4, [sp, #12]
 800a306:	2300      	movs	r3, #0
 800a308:	9311      	str	r3, [sp, #68]	; 0x44
 800a30a:	9316      	str	r3, [sp, #88]	; 0x58
 800a30c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a310:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a314:	a904      	add	r1, sp, #16
 800a316:	4623      	mov	r3, r4
 800a318:	f000 f946 	bl	800a5a8 <__ssvfiscanf_r>
 800a31c:	b01f      	add	sp, #124	; 0x7c
 800a31e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a322:	b003      	add	sp, #12
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	0800a331 	.word	0x0800a331
 800a32c:	20000060 	.word	0x20000060

0800a330 <__seofread>:
 800a330:	2000      	movs	r0, #0
 800a332:	4770      	bx	lr

0800a334 <strcpy>:
 800a334:	4603      	mov	r3, r0
 800a336:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a33a:	f803 2b01 	strb.w	r2, [r3], #1
 800a33e:	2a00      	cmp	r2, #0
 800a340:	d1f9      	bne.n	800a336 <strcpy+0x2>
 800a342:	4770      	bx	lr

0800a344 <strncmp>:
 800a344:	b510      	push	{r4, lr}
 800a346:	b16a      	cbz	r2, 800a364 <strncmp+0x20>
 800a348:	3901      	subs	r1, #1
 800a34a:	1884      	adds	r4, r0, r2
 800a34c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a350:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a354:	4293      	cmp	r3, r2
 800a356:	d103      	bne.n	800a360 <strncmp+0x1c>
 800a358:	42a0      	cmp	r0, r4
 800a35a:	d001      	beq.n	800a360 <strncmp+0x1c>
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1f5      	bne.n	800a34c <strncmp+0x8>
 800a360:	1a98      	subs	r0, r3, r2
 800a362:	bd10      	pop	{r4, pc}
 800a364:	4610      	mov	r0, r2
 800a366:	e7fc      	b.n	800a362 <strncmp+0x1e>

0800a368 <_strtoul_l.isra.0>:
 800a368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a36c:	4e3b      	ldr	r6, [pc, #236]	; (800a45c <_strtoul_l.isra.0+0xf4>)
 800a36e:	4686      	mov	lr, r0
 800a370:	468c      	mov	ip, r1
 800a372:	4660      	mov	r0, ip
 800a374:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a378:	5da5      	ldrb	r5, [r4, r6]
 800a37a:	f015 0508 	ands.w	r5, r5, #8
 800a37e:	d1f8      	bne.n	800a372 <_strtoul_l.isra.0+0xa>
 800a380:	2c2d      	cmp	r4, #45	; 0x2d
 800a382:	d134      	bne.n	800a3ee <_strtoul_l.isra.0+0x86>
 800a384:	f89c 4000 	ldrb.w	r4, [ip]
 800a388:	f04f 0801 	mov.w	r8, #1
 800a38c:	f100 0c02 	add.w	ip, r0, #2
 800a390:	2b00      	cmp	r3, #0
 800a392:	d05e      	beq.n	800a452 <_strtoul_l.isra.0+0xea>
 800a394:	2b10      	cmp	r3, #16
 800a396:	d10c      	bne.n	800a3b2 <_strtoul_l.isra.0+0x4a>
 800a398:	2c30      	cmp	r4, #48	; 0x30
 800a39a:	d10a      	bne.n	800a3b2 <_strtoul_l.isra.0+0x4a>
 800a39c:	f89c 0000 	ldrb.w	r0, [ip]
 800a3a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a3a4:	2858      	cmp	r0, #88	; 0x58
 800a3a6:	d14f      	bne.n	800a448 <_strtoul_l.isra.0+0xe0>
 800a3a8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a3ac:	2310      	movs	r3, #16
 800a3ae:	f10c 0c02 	add.w	ip, ip, #2
 800a3b2:	f04f 37ff 	mov.w	r7, #4294967295
 800a3b6:	2500      	movs	r5, #0
 800a3b8:	fbb7 f7f3 	udiv	r7, r7, r3
 800a3bc:	fb03 f907 	mul.w	r9, r3, r7
 800a3c0:	ea6f 0909 	mvn.w	r9, r9
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a3ca:	2e09      	cmp	r6, #9
 800a3cc:	d818      	bhi.n	800a400 <_strtoul_l.isra.0+0x98>
 800a3ce:	4634      	mov	r4, r6
 800a3d0:	42a3      	cmp	r3, r4
 800a3d2:	dd24      	ble.n	800a41e <_strtoul_l.isra.0+0xb6>
 800a3d4:	2d00      	cmp	r5, #0
 800a3d6:	db1f      	blt.n	800a418 <_strtoul_l.isra.0+0xb0>
 800a3d8:	4287      	cmp	r7, r0
 800a3da:	d31d      	bcc.n	800a418 <_strtoul_l.isra.0+0xb0>
 800a3dc:	d101      	bne.n	800a3e2 <_strtoul_l.isra.0+0x7a>
 800a3de:	45a1      	cmp	r9, r4
 800a3e0:	db1a      	blt.n	800a418 <_strtoul_l.isra.0+0xb0>
 800a3e2:	fb00 4003 	mla	r0, r0, r3, r4
 800a3e6:	2501      	movs	r5, #1
 800a3e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a3ec:	e7eb      	b.n	800a3c6 <_strtoul_l.isra.0+0x5e>
 800a3ee:	2c2b      	cmp	r4, #43	; 0x2b
 800a3f0:	bf08      	it	eq
 800a3f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a3f6:	46a8      	mov	r8, r5
 800a3f8:	bf08      	it	eq
 800a3fa:	f100 0c02 	addeq.w	ip, r0, #2
 800a3fe:	e7c7      	b.n	800a390 <_strtoul_l.isra.0+0x28>
 800a400:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a404:	2e19      	cmp	r6, #25
 800a406:	d801      	bhi.n	800a40c <_strtoul_l.isra.0+0xa4>
 800a408:	3c37      	subs	r4, #55	; 0x37
 800a40a:	e7e1      	b.n	800a3d0 <_strtoul_l.isra.0+0x68>
 800a40c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a410:	2e19      	cmp	r6, #25
 800a412:	d804      	bhi.n	800a41e <_strtoul_l.isra.0+0xb6>
 800a414:	3c57      	subs	r4, #87	; 0x57
 800a416:	e7db      	b.n	800a3d0 <_strtoul_l.isra.0+0x68>
 800a418:	f04f 35ff 	mov.w	r5, #4294967295
 800a41c:	e7e4      	b.n	800a3e8 <_strtoul_l.isra.0+0x80>
 800a41e:	2d00      	cmp	r5, #0
 800a420:	da07      	bge.n	800a432 <_strtoul_l.isra.0+0xca>
 800a422:	2322      	movs	r3, #34	; 0x22
 800a424:	f8ce 3000 	str.w	r3, [lr]
 800a428:	f04f 30ff 	mov.w	r0, #4294967295
 800a42c:	b942      	cbnz	r2, 800a440 <_strtoul_l.isra.0+0xd8>
 800a42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a432:	f1b8 0f00 	cmp.w	r8, #0
 800a436:	d000      	beq.n	800a43a <_strtoul_l.isra.0+0xd2>
 800a438:	4240      	negs	r0, r0
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	d0f7      	beq.n	800a42e <_strtoul_l.isra.0+0xc6>
 800a43e:	b10d      	cbz	r5, 800a444 <_strtoul_l.isra.0+0xdc>
 800a440:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a444:	6011      	str	r1, [r2, #0]
 800a446:	e7f2      	b.n	800a42e <_strtoul_l.isra.0+0xc6>
 800a448:	2430      	movs	r4, #48	; 0x30
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1b1      	bne.n	800a3b2 <_strtoul_l.isra.0+0x4a>
 800a44e:	2308      	movs	r3, #8
 800a450:	e7af      	b.n	800a3b2 <_strtoul_l.isra.0+0x4a>
 800a452:	2c30      	cmp	r4, #48	; 0x30
 800a454:	d0a2      	beq.n	800a39c <_strtoul_l.isra.0+0x34>
 800a456:	230a      	movs	r3, #10
 800a458:	e7ab      	b.n	800a3b2 <_strtoul_l.isra.0+0x4a>
 800a45a:	bf00      	nop
 800a45c:	0800b135 	.word	0x0800b135

0800a460 <_strtoul_r>:
 800a460:	f7ff bf82 	b.w	800a368 <_strtoul_l.isra.0>

0800a464 <strtoul>:
 800a464:	4613      	mov	r3, r2
 800a466:	460a      	mov	r2, r1
 800a468:	4601      	mov	r1, r0
 800a46a:	4802      	ldr	r0, [pc, #8]	; (800a474 <strtoul+0x10>)
 800a46c:	6800      	ldr	r0, [r0, #0]
 800a46e:	f7ff bf7b 	b.w	800a368 <_strtoul_l.isra.0>
 800a472:	bf00      	nop
 800a474:	20000060 	.word	0x20000060

0800a478 <__env_lock>:
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <__env_lock+0x8>)
 800a47a:	f7ff be68 	b.w	800a14e <__retarget_lock_acquire_recursive>
 800a47e:	bf00      	nop
 800a480:	2000075a 	.word	0x2000075a

0800a484 <__env_unlock>:
 800a484:	4801      	ldr	r0, [pc, #4]	; (800a48c <__env_unlock+0x8>)
 800a486:	f7ff be64 	b.w	800a152 <__retarget_lock_release_recursive>
 800a48a:	bf00      	nop
 800a48c:	2000075a 	.word	0x2000075a

0800a490 <__malloc_lock>:
 800a490:	4801      	ldr	r0, [pc, #4]	; (800a498 <__malloc_lock+0x8>)
 800a492:	f7ff be5c 	b.w	800a14e <__retarget_lock_acquire_recursive>
 800a496:	bf00      	nop
 800a498:	2000075c 	.word	0x2000075c

0800a49c <__malloc_unlock>:
 800a49c:	4801      	ldr	r0, [pc, #4]	; (800a4a4 <__malloc_unlock+0x8>)
 800a49e:	f7ff be58 	b.w	800a152 <__retarget_lock_release_recursive>
 800a4a2:	bf00      	nop
 800a4a4:	2000075c 	.word	0x2000075c

0800a4a8 <_realloc_r>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	4607      	mov	r7, r0
 800a4ac:	4614      	mov	r4, r2
 800a4ae:	460e      	mov	r6, r1
 800a4b0:	b921      	cbnz	r1, 800a4bc <_realloc_r+0x14>
 800a4b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	f7ff bea4 	b.w	800a204 <_malloc_r>
 800a4bc:	b922      	cbnz	r2, 800a4c8 <_realloc_r+0x20>
 800a4be:	f7ff fe51 	bl	800a164 <_free_r>
 800a4c2:	4625      	mov	r5, r4
 800a4c4:	4628      	mov	r0, r5
 800a4c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4c8:	f000 fc2c 	bl	800ad24 <_malloc_usable_size_r>
 800a4cc:	42a0      	cmp	r0, r4
 800a4ce:	d20f      	bcs.n	800a4f0 <_realloc_r+0x48>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4638      	mov	r0, r7
 800a4d4:	f7ff fe96 	bl	800a204 <_malloc_r>
 800a4d8:	4605      	mov	r5, r0
 800a4da:	2800      	cmp	r0, #0
 800a4dc:	d0f2      	beq.n	800a4c4 <_realloc_r+0x1c>
 800a4de:	4631      	mov	r1, r6
 800a4e0:	4622      	mov	r2, r4
 800a4e2:	f7ff f90f 	bl	8009704 <memcpy>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f7ff fe3b 	bl	800a164 <_free_r>
 800a4ee:	e7e9      	b.n	800a4c4 <_realloc_r+0x1c>
 800a4f0:	4635      	mov	r5, r6
 800a4f2:	e7e7      	b.n	800a4c4 <_realloc_r+0x1c>

0800a4f4 <_sungetc_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	1c4b      	adds	r3, r1, #1
 800a4f8:	4614      	mov	r4, r2
 800a4fa:	d103      	bne.n	800a504 <_sungetc_r+0x10>
 800a4fc:	f04f 35ff 	mov.w	r5, #4294967295
 800a500:	4628      	mov	r0, r5
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	8993      	ldrh	r3, [r2, #12]
 800a506:	f023 0320 	bic.w	r3, r3, #32
 800a50a:	8193      	strh	r3, [r2, #12]
 800a50c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a50e:	6852      	ldr	r2, [r2, #4]
 800a510:	b2cd      	uxtb	r5, r1
 800a512:	b18b      	cbz	r3, 800a538 <_sungetc_r+0x44>
 800a514:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a516:	4293      	cmp	r3, r2
 800a518:	dd08      	ble.n	800a52c <_sungetc_r+0x38>
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	1e5a      	subs	r2, r3, #1
 800a51e:	6022      	str	r2, [r4, #0]
 800a520:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a524:	6863      	ldr	r3, [r4, #4]
 800a526:	3301      	adds	r3, #1
 800a528:	6063      	str	r3, [r4, #4]
 800a52a:	e7e9      	b.n	800a500 <_sungetc_r+0xc>
 800a52c:	4621      	mov	r1, r4
 800a52e:	f000 fbbf 	bl	800acb0 <__submore>
 800a532:	2800      	cmp	r0, #0
 800a534:	d0f1      	beq.n	800a51a <_sungetc_r+0x26>
 800a536:	e7e1      	b.n	800a4fc <_sungetc_r+0x8>
 800a538:	6921      	ldr	r1, [r4, #16]
 800a53a:	6823      	ldr	r3, [r4, #0]
 800a53c:	b151      	cbz	r1, 800a554 <_sungetc_r+0x60>
 800a53e:	4299      	cmp	r1, r3
 800a540:	d208      	bcs.n	800a554 <_sungetc_r+0x60>
 800a542:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a546:	42a9      	cmp	r1, r5
 800a548:	d104      	bne.n	800a554 <_sungetc_r+0x60>
 800a54a:	3b01      	subs	r3, #1
 800a54c:	3201      	adds	r2, #1
 800a54e:	6023      	str	r3, [r4, #0]
 800a550:	6062      	str	r2, [r4, #4]
 800a552:	e7d5      	b.n	800a500 <_sungetc_r+0xc>
 800a554:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a55c:	6363      	str	r3, [r4, #52]	; 0x34
 800a55e:	2303      	movs	r3, #3
 800a560:	63a3      	str	r3, [r4, #56]	; 0x38
 800a562:	4623      	mov	r3, r4
 800a564:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	2301      	movs	r3, #1
 800a56c:	e7dc      	b.n	800a528 <_sungetc_r+0x34>

0800a56e <__ssrefill_r>:
 800a56e:	b510      	push	{r4, lr}
 800a570:	460c      	mov	r4, r1
 800a572:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a574:	b169      	cbz	r1, 800a592 <__ssrefill_r+0x24>
 800a576:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a57a:	4299      	cmp	r1, r3
 800a57c:	d001      	beq.n	800a582 <__ssrefill_r+0x14>
 800a57e:	f7ff fdf1 	bl	800a164 <_free_r>
 800a582:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a584:	6063      	str	r3, [r4, #4]
 800a586:	2000      	movs	r0, #0
 800a588:	6360      	str	r0, [r4, #52]	; 0x34
 800a58a:	b113      	cbz	r3, 800a592 <__ssrefill_r+0x24>
 800a58c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd10      	pop	{r4, pc}
 800a592:	6923      	ldr	r3, [r4, #16]
 800a594:	6023      	str	r3, [r4, #0]
 800a596:	2300      	movs	r3, #0
 800a598:	6063      	str	r3, [r4, #4]
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	f043 0320 	orr.w	r3, r3, #32
 800a5a0:	81a3      	strh	r3, [r4, #12]
 800a5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5a6:	e7f3      	b.n	800a590 <__ssrefill_r+0x22>

0800a5a8 <__ssvfiscanf_r>:
 800a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a5b8:	49b2      	ldr	r1, [pc, #712]	; (800a884 <__ssvfiscanf_r+0x2dc>)
 800a5ba:	91a0      	str	r1, [sp, #640]	; 0x280
 800a5bc:	f10d 0804 	add.w	r8, sp, #4
 800a5c0:	49b1      	ldr	r1, [pc, #708]	; (800a888 <__ssvfiscanf_r+0x2e0>)
 800a5c2:	4fb2      	ldr	r7, [pc, #712]	; (800a88c <__ssvfiscanf_r+0x2e4>)
 800a5c4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a890 <__ssvfiscanf_r+0x2e8>
 800a5c8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a5cc:	4606      	mov	r6, r0
 800a5ce:	91a1      	str	r1, [sp, #644]	; 0x284
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	f892 a000 	ldrb.w	sl, [r2]
 800a5d6:	f1ba 0f00 	cmp.w	sl, #0
 800a5da:	f000 8151 	beq.w	800a880 <__ssvfiscanf_r+0x2d8>
 800a5de:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a5e2:	f013 0308 	ands.w	r3, r3, #8
 800a5e6:	f102 0501 	add.w	r5, r2, #1
 800a5ea:	d019      	beq.n	800a620 <__ssvfiscanf_r+0x78>
 800a5ec:	6863      	ldr	r3, [r4, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	dd0f      	ble.n	800a612 <__ssvfiscanf_r+0x6a>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	781a      	ldrb	r2, [r3, #0]
 800a5f6:	5cba      	ldrb	r2, [r7, r2]
 800a5f8:	0712      	lsls	r2, r2, #28
 800a5fa:	d401      	bmi.n	800a600 <__ssvfiscanf_r+0x58>
 800a5fc:	462a      	mov	r2, r5
 800a5fe:	e7e8      	b.n	800a5d2 <__ssvfiscanf_r+0x2a>
 800a600:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a602:	3201      	adds	r2, #1
 800a604:	9245      	str	r2, [sp, #276]	; 0x114
 800a606:	6862      	ldr	r2, [r4, #4]
 800a608:	3301      	adds	r3, #1
 800a60a:	3a01      	subs	r2, #1
 800a60c:	6062      	str	r2, [r4, #4]
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	e7ec      	b.n	800a5ec <__ssvfiscanf_r+0x44>
 800a612:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a614:	4621      	mov	r1, r4
 800a616:	4630      	mov	r0, r6
 800a618:	4798      	blx	r3
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d0e9      	beq.n	800a5f2 <__ssvfiscanf_r+0x4a>
 800a61e:	e7ed      	b.n	800a5fc <__ssvfiscanf_r+0x54>
 800a620:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a624:	f040 8083 	bne.w	800a72e <__ssvfiscanf_r+0x186>
 800a628:	9341      	str	r3, [sp, #260]	; 0x104
 800a62a:	9343      	str	r3, [sp, #268]	; 0x10c
 800a62c:	7853      	ldrb	r3, [r2, #1]
 800a62e:	2b2a      	cmp	r3, #42	; 0x2a
 800a630:	bf02      	ittt	eq
 800a632:	2310      	moveq	r3, #16
 800a634:	1c95      	addeq	r5, r2, #2
 800a636:	9341      	streq	r3, [sp, #260]	; 0x104
 800a638:	220a      	movs	r2, #10
 800a63a:	46ab      	mov	fp, r5
 800a63c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a640:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a644:	2b09      	cmp	r3, #9
 800a646:	d91d      	bls.n	800a684 <__ssvfiscanf_r+0xdc>
 800a648:	4891      	ldr	r0, [pc, #580]	; (800a890 <__ssvfiscanf_r+0x2e8>)
 800a64a:	2203      	movs	r2, #3
 800a64c:	f7f5 fdb0 	bl	80001b0 <memchr>
 800a650:	b140      	cbz	r0, 800a664 <__ssvfiscanf_r+0xbc>
 800a652:	2301      	movs	r3, #1
 800a654:	eba0 0009 	sub.w	r0, r0, r9
 800a658:	fa03 f000 	lsl.w	r0, r3, r0
 800a65c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a65e:	4318      	orrs	r0, r3
 800a660:	9041      	str	r0, [sp, #260]	; 0x104
 800a662:	465d      	mov	r5, fp
 800a664:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a668:	2b78      	cmp	r3, #120	; 0x78
 800a66a:	d806      	bhi.n	800a67a <__ssvfiscanf_r+0xd2>
 800a66c:	2b57      	cmp	r3, #87	; 0x57
 800a66e:	d810      	bhi.n	800a692 <__ssvfiscanf_r+0xea>
 800a670:	2b25      	cmp	r3, #37	; 0x25
 800a672:	d05c      	beq.n	800a72e <__ssvfiscanf_r+0x186>
 800a674:	d856      	bhi.n	800a724 <__ssvfiscanf_r+0x17c>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d074      	beq.n	800a764 <__ssvfiscanf_r+0x1bc>
 800a67a:	2303      	movs	r3, #3
 800a67c:	9347      	str	r3, [sp, #284]	; 0x11c
 800a67e:	230a      	movs	r3, #10
 800a680:	9342      	str	r3, [sp, #264]	; 0x108
 800a682:	e081      	b.n	800a788 <__ssvfiscanf_r+0x1e0>
 800a684:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a686:	fb02 1303 	mla	r3, r2, r3, r1
 800a68a:	3b30      	subs	r3, #48	; 0x30
 800a68c:	9343      	str	r3, [sp, #268]	; 0x10c
 800a68e:	465d      	mov	r5, fp
 800a690:	e7d3      	b.n	800a63a <__ssvfiscanf_r+0x92>
 800a692:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a696:	2a20      	cmp	r2, #32
 800a698:	d8ef      	bhi.n	800a67a <__ssvfiscanf_r+0xd2>
 800a69a:	a101      	add	r1, pc, #4	; (adr r1, 800a6a0 <__ssvfiscanf_r+0xf8>)
 800a69c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6a0:	0800a773 	.word	0x0800a773
 800a6a4:	0800a67b 	.word	0x0800a67b
 800a6a8:	0800a67b 	.word	0x0800a67b
 800a6ac:	0800a7d1 	.word	0x0800a7d1
 800a6b0:	0800a67b 	.word	0x0800a67b
 800a6b4:	0800a67b 	.word	0x0800a67b
 800a6b8:	0800a67b 	.word	0x0800a67b
 800a6bc:	0800a67b 	.word	0x0800a67b
 800a6c0:	0800a67b 	.word	0x0800a67b
 800a6c4:	0800a67b 	.word	0x0800a67b
 800a6c8:	0800a67b 	.word	0x0800a67b
 800a6cc:	0800a7e7 	.word	0x0800a7e7
 800a6d0:	0800a7bd 	.word	0x0800a7bd
 800a6d4:	0800a72b 	.word	0x0800a72b
 800a6d8:	0800a72b 	.word	0x0800a72b
 800a6dc:	0800a72b 	.word	0x0800a72b
 800a6e0:	0800a67b 	.word	0x0800a67b
 800a6e4:	0800a7c1 	.word	0x0800a7c1
 800a6e8:	0800a67b 	.word	0x0800a67b
 800a6ec:	0800a67b 	.word	0x0800a67b
 800a6f0:	0800a67b 	.word	0x0800a67b
 800a6f4:	0800a67b 	.word	0x0800a67b
 800a6f8:	0800a7f7 	.word	0x0800a7f7
 800a6fc:	0800a7c9 	.word	0x0800a7c9
 800a700:	0800a76b 	.word	0x0800a76b
 800a704:	0800a67b 	.word	0x0800a67b
 800a708:	0800a67b 	.word	0x0800a67b
 800a70c:	0800a7f3 	.word	0x0800a7f3
 800a710:	0800a67b 	.word	0x0800a67b
 800a714:	0800a7bd 	.word	0x0800a7bd
 800a718:	0800a67b 	.word	0x0800a67b
 800a71c:	0800a67b 	.word	0x0800a67b
 800a720:	0800a773 	.word	0x0800a773
 800a724:	3b45      	subs	r3, #69	; 0x45
 800a726:	2b02      	cmp	r3, #2
 800a728:	d8a7      	bhi.n	800a67a <__ssvfiscanf_r+0xd2>
 800a72a:	2305      	movs	r3, #5
 800a72c:	e02b      	b.n	800a786 <__ssvfiscanf_r+0x1de>
 800a72e:	6863      	ldr	r3, [r4, #4]
 800a730:	2b00      	cmp	r3, #0
 800a732:	dd0d      	ble.n	800a750 <__ssvfiscanf_r+0x1a8>
 800a734:	6823      	ldr	r3, [r4, #0]
 800a736:	781a      	ldrb	r2, [r3, #0]
 800a738:	4552      	cmp	r2, sl
 800a73a:	f040 80a1 	bne.w	800a880 <__ssvfiscanf_r+0x2d8>
 800a73e:	3301      	adds	r3, #1
 800a740:	6862      	ldr	r2, [r4, #4]
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a746:	3a01      	subs	r2, #1
 800a748:	3301      	adds	r3, #1
 800a74a:	6062      	str	r2, [r4, #4]
 800a74c:	9345      	str	r3, [sp, #276]	; 0x114
 800a74e:	e755      	b.n	800a5fc <__ssvfiscanf_r+0x54>
 800a750:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a752:	4621      	mov	r1, r4
 800a754:	4630      	mov	r0, r6
 800a756:	4798      	blx	r3
 800a758:	2800      	cmp	r0, #0
 800a75a:	d0eb      	beq.n	800a734 <__ssvfiscanf_r+0x18c>
 800a75c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a75e:	2800      	cmp	r0, #0
 800a760:	f040 8084 	bne.w	800a86c <__ssvfiscanf_r+0x2c4>
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e086      	b.n	800a878 <__ssvfiscanf_r+0x2d0>
 800a76a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a76c:	f042 0220 	orr.w	r2, r2, #32
 800a770:	9241      	str	r2, [sp, #260]	; 0x104
 800a772:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a778:	9241      	str	r2, [sp, #260]	; 0x104
 800a77a:	2210      	movs	r2, #16
 800a77c:	2b6f      	cmp	r3, #111	; 0x6f
 800a77e:	9242      	str	r2, [sp, #264]	; 0x108
 800a780:	bf34      	ite	cc
 800a782:	2303      	movcc	r3, #3
 800a784:	2304      	movcs	r3, #4
 800a786:	9347      	str	r3, [sp, #284]	; 0x11c
 800a788:	6863      	ldr	r3, [r4, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dd41      	ble.n	800a812 <__ssvfiscanf_r+0x26a>
 800a78e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a790:	0659      	lsls	r1, r3, #25
 800a792:	d404      	bmi.n	800a79e <__ssvfiscanf_r+0x1f6>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	5cba      	ldrb	r2, [r7, r2]
 800a79a:	0712      	lsls	r2, r2, #28
 800a79c:	d440      	bmi.n	800a820 <__ssvfiscanf_r+0x278>
 800a79e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	dc4f      	bgt.n	800a844 <__ssvfiscanf_r+0x29c>
 800a7a4:	466b      	mov	r3, sp
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	a941      	add	r1, sp, #260	; 0x104
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f000 f874 	bl	800a898 <_scanf_chars>
 800a7b0:	2801      	cmp	r0, #1
 800a7b2:	d065      	beq.n	800a880 <__ssvfiscanf_r+0x2d8>
 800a7b4:	2802      	cmp	r0, #2
 800a7b6:	f47f af21 	bne.w	800a5fc <__ssvfiscanf_r+0x54>
 800a7ba:	e7cf      	b.n	800a75c <__ssvfiscanf_r+0x1b4>
 800a7bc:	220a      	movs	r2, #10
 800a7be:	e7dd      	b.n	800a77c <__ssvfiscanf_r+0x1d4>
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	9342      	str	r3, [sp, #264]	; 0x108
 800a7c4:	2303      	movs	r3, #3
 800a7c6:	e7de      	b.n	800a786 <__ssvfiscanf_r+0x1de>
 800a7c8:	2308      	movs	r3, #8
 800a7ca:	9342      	str	r3, [sp, #264]	; 0x108
 800a7cc:	2304      	movs	r3, #4
 800a7ce:	e7da      	b.n	800a786 <__ssvfiscanf_r+0x1de>
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	f000 f9ac 	bl	800ab30 <__sccl>
 800a7d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7de:	9341      	str	r3, [sp, #260]	; 0x104
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e7cf      	b.n	800a786 <__ssvfiscanf_r+0x1de>
 800a7e6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ec:	9341      	str	r3, [sp, #260]	; 0x104
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e7c9      	b.n	800a786 <__ssvfiscanf_r+0x1de>
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e7c7      	b.n	800a786 <__ssvfiscanf_r+0x1de>
 800a7f6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a7f8:	06c3      	lsls	r3, r0, #27
 800a7fa:	f53f aeff 	bmi.w	800a5fc <__ssvfiscanf_r+0x54>
 800a7fe:	9b00      	ldr	r3, [sp, #0]
 800a800:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a802:	1d19      	adds	r1, r3, #4
 800a804:	9100      	str	r1, [sp, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	07c0      	lsls	r0, r0, #31
 800a80a:	bf4c      	ite	mi
 800a80c:	801a      	strhmi	r2, [r3, #0]
 800a80e:	601a      	strpl	r2, [r3, #0]
 800a810:	e6f4      	b.n	800a5fc <__ssvfiscanf_r+0x54>
 800a812:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a814:	4621      	mov	r1, r4
 800a816:	4630      	mov	r0, r6
 800a818:	4798      	blx	r3
 800a81a:	2800      	cmp	r0, #0
 800a81c:	d0b7      	beq.n	800a78e <__ssvfiscanf_r+0x1e6>
 800a81e:	e79d      	b.n	800a75c <__ssvfiscanf_r+0x1b4>
 800a820:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a822:	3201      	adds	r2, #1
 800a824:	9245      	str	r2, [sp, #276]	; 0x114
 800a826:	6862      	ldr	r2, [r4, #4]
 800a828:	3a01      	subs	r2, #1
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	6062      	str	r2, [r4, #4]
 800a82e:	dd02      	ble.n	800a836 <__ssvfiscanf_r+0x28e>
 800a830:	3301      	adds	r3, #1
 800a832:	6023      	str	r3, [r4, #0]
 800a834:	e7ae      	b.n	800a794 <__ssvfiscanf_r+0x1ec>
 800a836:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a838:	4621      	mov	r1, r4
 800a83a:	4630      	mov	r0, r6
 800a83c:	4798      	blx	r3
 800a83e:	2800      	cmp	r0, #0
 800a840:	d0a8      	beq.n	800a794 <__ssvfiscanf_r+0x1ec>
 800a842:	e78b      	b.n	800a75c <__ssvfiscanf_r+0x1b4>
 800a844:	2b04      	cmp	r3, #4
 800a846:	dc06      	bgt.n	800a856 <__ssvfiscanf_r+0x2ae>
 800a848:	466b      	mov	r3, sp
 800a84a:	4622      	mov	r2, r4
 800a84c:	a941      	add	r1, sp, #260	; 0x104
 800a84e:	4630      	mov	r0, r6
 800a850:	f000 f87a 	bl	800a948 <_scanf_i>
 800a854:	e7ac      	b.n	800a7b0 <__ssvfiscanf_r+0x208>
 800a856:	4b0f      	ldr	r3, [pc, #60]	; (800a894 <__ssvfiscanf_r+0x2ec>)
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f43f aecf 	beq.w	800a5fc <__ssvfiscanf_r+0x54>
 800a85e:	466b      	mov	r3, sp
 800a860:	4622      	mov	r2, r4
 800a862:	a941      	add	r1, sp, #260	; 0x104
 800a864:	4630      	mov	r0, r6
 800a866:	f3af 8000 	nop.w
 800a86a:	e7a1      	b.n	800a7b0 <__ssvfiscanf_r+0x208>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a872:	bf18      	it	ne
 800a874:	f04f 30ff 	movne.w	r0, #4294967295
 800a878:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a880:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a882:	e7f9      	b.n	800a878 <__ssvfiscanf_r+0x2d0>
 800a884:	0800a4f5 	.word	0x0800a4f5
 800a888:	0800a56f 	.word	0x0800a56f
 800a88c:	0800b135 	.word	0x0800b135
 800a890:	0800b235 	.word	0x0800b235
 800a894:	00000000 	.word	0x00000000

0800a898 <_scanf_chars>:
 800a898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a89c:	4615      	mov	r5, r2
 800a89e:	688a      	ldr	r2, [r1, #8]
 800a8a0:	4680      	mov	r8, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	b932      	cbnz	r2, 800a8b4 <_scanf_chars+0x1c>
 800a8a6:	698a      	ldr	r2, [r1, #24]
 800a8a8:	2a00      	cmp	r2, #0
 800a8aa:	bf0c      	ite	eq
 800a8ac:	2201      	moveq	r2, #1
 800a8ae:	f04f 32ff 	movne.w	r2, #4294967295
 800a8b2:	608a      	str	r2, [r1, #8]
 800a8b4:	6822      	ldr	r2, [r4, #0]
 800a8b6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a944 <_scanf_chars+0xac>
 800a8ba:	06d1      	lsls	r1, r2, #27
 800a8bc:	bf5f      	itttt	pl
 800a8be:	681a      	ldrpl	r2, [r3, #0]
 800a8c0:	1d11      	addpl	r1, r2, #4
 800a8c2:	6019      	strpl	r1, [r3, #0]
 800a8c4:	6816      	ldrpl	r6, [r2, #0]
 800a8c6:	2700      	movs	r7, #0
 800a8c8:	69a0      	ldr	r0, [r4, #24]
 800a8ca:	b188      	cbz	r0, 800a8f0 <_scanf_chars+0x58>
 800a8cc:	2801      	cmp	r0, #1
 800a8ce:	d107      	bne.n	800a8e0 <_scanf_chars+0x48>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	781a      	ldrb	r2, [r3, #0]
 800a8d4:	6963      	ldr	r3, [r4, #20]
 800a8d6:	5c9b      	ldrb	r3, [r3, r2]
 800a8d8:	b953      	cbnz	r3, 800a8f0 <_scanf_chars+0x58>
 800a8da:	bb27      	cbnz	r7, 800a926 <_scanf_chars+0x8e>
 800a8dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8e0:	2802      	cmp	r0, #2
 800a8e2:	d120      	bne.n	800a926 <_scanf_chars+0x8e>
 800a8e4:	682b      	ldr	r3, [r5, #0]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a8ec:	071b      	lsls	r3, r3, #28
 800a8ee:	d41a      	bmi.n	800a926 <_scanf_chars+0x8e>
 800a8f0:	6823      	ldr	r3, [r4, #0]
 800a8f2:	06da      	lsls	r2, r3, #27
 800a8f4:	bf5e      	ittt	pl
 800a8f6:	682b      	ldrpl	r3, [r5, #0]
 800a8f8:	781b      	ldrbpl	r3, [r3, #0]
 800a8fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a8fe:	682a      	ldr	r2, [r5, #0]
 800a900:	686b      	ldr	r3, [r5, #4]
 800a902:	3201      	adds	r2, #1
 800a904:	602a      	str	r2, [r5, #0]
 800a906:	68a2      	ldr	r2, [r4, #8]
 800a908:	3b01      	subs	r3, #1
 800a90a:	3a01      	subs	r2, #1
 800a90c:	606b      	str	r3, [r5, #4]
 800a90e:	3701      	adds	r7, #1
 800a910:	60a2      	str	r2, [r4, #8]
 800a912:	b142      	cbz	r2, 800a926 <_scanf_chars+0x8e>
 800a914:	2b00      	cmp	r3, #0
 800a916:	dcd7      	bgt.n	800a8c8 <_scanf_chars+0x30>
 800a918:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a91c:	4629      	mov	r1, r5
 800a91e:	4640      	mov	r0, r8
 800a920:	4798      	blx	r3
 800a922:	2800      	cmp	r0, #0
 800a924:	d0d0      	beq.n	800a8c8 <_scanf_chars+0x30>
 800a926:	6823      	ldr	r3, [r4, #0]
 800a928:	f013 0310 	ands.w	r3, r3, #16
 800a92c:	d105      	bne.n	800a93a <_scanf_chars+0xa2>
 800a92e:	68e2      	ldr	r2, [r4, #12]
 800a930:	3201      	adds	r2, #1
 800a932:	60e2      	str	r2, [r4, #12]
 800a934:	69a2      	ldr	r2, [r4, #24]
 800a936:	b102      	cbz	r2, 800a93a <_scanf_chars+0xa2>
 800a938:	7033      	strb	r3, [r6, #0]
 800a93a:	6923      	ldr	r3, [r4, #16]
 800a93c:	441f      	add	r7, r3
 800a93e:	6127      	str	r7, [r4, #16]
 800a940:	2000      	movs	r0, #0
 800a942:	e7cb      	b.n	800a8dc <_scanf_chars+0x44>
 800a944:	0800b135 	.word	0x0800b135

0800a948 <_scanf_i>:
 800a948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94c:	4698      	mov	r8, r3
 800a94e:	4b74      	ldr	r3, [pc, #464]	; (800ab20 <_scanf_i+0x1d8>)
 800a950:	460c      	mov	r4, r1
 800a952:	4682      	mov	sl, r0
 800a954:	4616      	mov	r6, r2
 800a956:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a95a:	b087      	sub	sp, #28
 800a95c:	ab03      	add	r3, sp, #12
 800a95e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a962:	4b70      	ldr	r3, [pc, #448]	; (800ab24 <_scanf_i+0x1dc>)
 800a964:	69a1      	ldr	r1, [r4, #24]
 800a966:	4a70      	ldr	r2, [pc, #448]	; (800ab28 <_scanf_i+0x1e0>)
 800a968:	2903      	cmp	r1, #3
 800a96a:	bf18      	it	ne
 800a96c:	461a      	movne	r2, r3
 800a96e:	68a3      	ldr	r3, [r4, #8]
 800a970:	9201      	str	r2, [sp, #4]
 800a972:	1e5a      	subs	r2, r3, #1
 800a974:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a978:	bf88      	it	hi
 800a97a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a97e:	4627      	mov	r7, r4
 800a980:	bf82      	ittt	hi
 800a982:	eb03 0905 	addhi.w	r9, r3, r5
 800a986:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a98a:	60a3      	strhi	r3, [r4, #8]
 800a98c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a990:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a994:	bf98      	it	ls
 800a996:	f04f 0900 	movls.w	r9, #0
 800a99a:	6023      	str	r3, [r4, #0]
 800a99c:	463d      	mov	r5, r7
 800a99e:	f04f 0b00 	mov.w	fp, #0
 800a9a2:	6831      	ldr	r1, [r6, #0]
 800a9a4:	ab03      	add	r3, sp, #12
 800a9a6:	7809      	ldrb	r1, [r1, #0]
 800a9a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a9ac:	2202      	movs	r2, #2
 800a9ae:	f7f5 fbff 	bl	80001b0 <memchr>
 800a9b2:	b328      	cbz	r0, 800aa00 <_scanf_i+0xb8>
 800a9b4:	f1bb 0f01 	cmp.w	fp, #1
 800a9b8:	d159      	bne.n	800aa6e <_scanf_i+0x126>
 800a9ba:	6862      	ldr	r2, [r4, #4]
 800a9bc:	b92a      	cbnz	r2, 800a9ca <_scanf_i+0x82>
 800a9be:	6822      	ldr	r2, [r4, #0]
 800a9c0:	2308      	movs	r3, #8
 800a9c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9c6:	6063      	str	r3, [r4, #4]
 800a9c8:	6022      	str	r2, [r4, #0]
 800a9ca:	6822      	ldr	r2, [r4, #0]
 800a9cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a9d0:	6022      	str	r2, [r4, #0]
 800a9d2:	68a2      	ldr	r2, [r4, #8]
 800a9d4:	1e51      	subs	r1, r2, #1
 800a9d6:	60a1      	str	r1, [r4, #8]
 800a9d8:	b192      	cbz	r2, 800aa00 <_scanf_i+0xb8>
 800a9da:	6832      	ldr	r2, [r6, #0]
 800a9dc:	1c51      	adds	r1, r2, #1
 800a9de:	6031      	str	r1, [r6, #0]
 800a9e0:	7812      	ldrb	r2, [r2, #0]
 800a9e2:	f805 2b01 	strb.w	r2, [r5], #1
 800a9e6:	6872      	ldr	r2, [r6, #4]
 800a9e8:	3a01      	subs	r2, #1
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	6072      	str	r2, [r6, #4]
 800a9ee:	dc07      	bgt.n	800aa00 <_scanf_i+0xb8>
 800a9f0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a9f4:	4631      	mov	r1, r6
 800a9f6:	4650      	mov	r0, sl
 800a9f8:	4790      	blx	r2
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	f040 8085 	bne.w	800ab0a <_scanf_i+0x1c2>
 800aa00:	f10b 0b01 	add.w	fp, fp, #1
 800aa04:	f1bb 0f03 	cmp.w	fp, #3
 800aa08:	d1cb      	bne.n	800a9a2 <_scanf_i+0x5a>
 800aa0a:	6863      	ldr	r3, [r4, #4]
 800aa0c:	b90b      	cbnz	r3, 800aa12 <_scanf_i+0xca>
 800aa0e:	230a      	movs	r3, #10
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	6863      	ldr	r3, [r4, #4]
 800aa14:	4945      	ldr	r1, [pc, #276]	; (800ab2c <_scanf_i+0x1e4>)
 800aa16:	6960      	ldr	r0, [r4, #20]
 800aa18:	1ac9      	subs	r1, r1, r3
 800aa1a:	f000 f889 	bl	800ab30 <__sccl>
 800aa1e:	f04f 0b00 	mov.w	fp, #0
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	6822      	ldr	r2, [r4, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d03d      	beq.n	800aaa6 <_scanf_i+0x15e>
 800aa2a:	6831      	ldr	r1, [r6, #0]
 800aa2c:	6960      	ldr	r0, [r4, #20]
 800aa2e:	f891 c000 	ldrb.w	ip, [r1]
 800aa32:	f810 000c 	ldrb.w	r0, [r0, ip]
 800aa36:	2800      	cmp	r0, #0
 800aa38:	d035      	beq.n	800aaa6 <_scanf_i+0x15e>
 800aa3a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800aa3e:	d124      	bne.n	800aa8a <_scanf_i+0x142>
 800aa40:	0510      	lsls	r0, r2, #20
 800aa42:	d522      	bpl.n	800aa8a <_scanf_i+0x142>
 800aa44:	f10b 0b01 	add.w	fp, fp, #1
 800aa48:	f1b9 0f00 	cmp.w	r9, #0
 800aa4c:	d003      	beq.n	800aa56 <_scanf_i+0x10e>
 800aa4e:	3301      	adds	r3, #1
 800aa50:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa54:	60a3      	str	r3, [r4, #8]
 800aa56:	6873      	ldr	r3, [r6, #4]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	6073      	str	r3, [r6, #4]
 800aa5e:	dd1b      	ble.n	800aa98 <_scanf_i+0x150>
 800aa60:	6833      	ldr	r3, [r6, #0]
 800aa62:	3301      	adds	r3, #1
 800aa64:	6033      	str	r3, [r6, #0]
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	3b01      	subs	r3, #1
 800aa6a:	60a3      	str	r3, [r4, #8]
 800aa6c:	e7d9      	b.n	800aa22 <_scanf_i+0xda>
 800aa6e:	f1bb 0f02 	cmp.w	fp, #2
 800aa72:	d1ae      	bne.n	800a9d2 <_scanf_i+0x8a>
 800aa74:	6822      	ldr	r2, [r4, #0]
 800aa76:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800aa7a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800aa7e:	d1bf      	bne.n	800aa00 <_scanf_i+0xb8>
 800aa80:	2310      	movs	r3, #16
 800aa82:	6063      	str	r3, [r4, #4]
 800aa84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa88:	e7a2      	b.n	800a9d0 <_scanf_i+0x88>
 800aa8a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800aa8e:	6022      	str	r2, [r4, #0]
 800aa90:	780b      	ldrb	r3, [r1, #0]
 800aa92:	f805 3b01 	strb.w	r3, [r5], #1
 800aa96:	e7de      	b.n	800aa56 <_scanf_i+0x10e>
 800aa98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa9c:	4631      	mov	r1, r6
 800aa9e:	4650      	mov	r0, sl
 800aaa0:	4798      	blx	r3
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d0df      	beq.n	800aa66 <_scanf_i+0x11e>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	05d9      	lsls	r1, r3, #23
 800aaaa:	d50d      	bpl.n	800aac8 <_scanf_i+0x180>
 800aaac:	42bd      	cmp	r5, r7
 800aaae:	d909      	bls.n	800aac4 <_scanf_i+0x17c>
 800aab0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aab8:	4632      	mov	r2, r6
 800aaba:	4650      	mov	r0, sl
 800aabc:	4798      	blx	r3
 800aabe:	f105 39ff 	add.w	r9, r5, #4294967295
 800aac2:	464d      	mov	r5, r9
 800aac4:	42bd      	cmp	r5, r7
 800aac6:	d028      	beq.n	800ab1a <_scanf_i+0x1d2>
 800aac8:	6822      	ldr	r2, [r4, #0]
 800aaca:	f012 0210 	ands.w	r2, r2, #16
 800aace:	d113      	bne.n	800aaf8 <_scanf_i+0x1b0>
 800aad0:	702a      	strb	r2, [r5, #0]
 800aad2:	6863      	ldr	r3, [r4, #4]
 800aad4:	9e01      	ldr	r6, [sp, #4]
 800aad6:	4639      	mov	r1, r7
 800aad8:	4650      	mov	r0, sl
 800aada:	47b0      	blx	r6
 800aadc:	f8d8 3000 	ldr.w	r3, [r8]
 800aae0:	6821      	ldr	r1, [r4, #0]
 800aae2:	1d1a      	adds	r2, r3, #4
 800aae4:	f8c8 2000 	str.w	r2, [r8]
 800aae8:	f011 0f20 	tst.w	r1, #32
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	d00f      	beq.n	800ab10 <_scanf_i+0x1c8>
 800aaf0:	6018      	str	r0, [r3, #0]
 800aaf2:	68e3      	ldr	r3, [r4, #12]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	60e3      	str	r3, [r4, #12]
 800aaf8:	1bed      	subs	r5, r5, r7
 800aafa:	44ab      	add	fp, r5
 800aafc:	6925      	ldr	r5, [r4, #16]
 800aafe:	445d      	add	r5, fp
 800ab00:	6125      	str	r5, [r4, #16]
 800ab02:	2000      	movs	r0, #0
 800ab04:	b007      	add	sp, #28
 800ab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab0a:	f04f 0b00 	mov.w	fp, #0
 800ab0e:	e7ca      	b.n	800aaa6 <_scanf_i+0x15e>
 800ab10:	07ca      	lsls	r2, r1, #31
 800ab12:	bf4c      	ite	mi
 800ab14:	8018      	strhmi	r0, [r3, #0]
 800ab16:	6018      	strpl	r0, [r3, #0]
 800ab18:	e7eb      	b.n	800aaf2 <_scanf_i+0x1aa>
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	e7f2      	b.n	800ab04 <_scanf_i+0x1bc>
 800ab1e:	bf00      	nop
 800ab20:	0800adcc 	.word	0x0800adcc
 800ab24:	0800a461 	.word	0x0800a461
 800ab28:	0800acad 	.word	0x0800acad
 800ab2c:	0800b252 	.word	0x0800b252

0800ab30 <__sccl>:
 800ab30:	b570      	push	{r4, r5, r6, lr}
 800ab32:	780b      	ldrb	r3, [r1, #0]
 800ab34:	4604      	mov	r4, r0
 800ab36:	2b5e      	cmp	r3, #94	; 0x5e
 800ab38:	bf0b      	itete	eq
 800ab3a:	784b      	ldrbeq	r3, [r1, #1]
 800ab3c:	1c48      	addne	r0, r1, #1
 800ab3e:	1c88      	addeq	r0, r1, #2
 800ab40:	2200      	movne	r2, #0
 800ab42:	bf08      	it	eq
 800ab44:	2201      	moveq	r2, #1
 800ab46:	1e61      	subs	r1, r4, #1
 800ab48:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ab4c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ab50:	42a9      	cmp	r1, r5
 800ab52:	d1fb      	bne.n	800ab4c <__sccl+0x1c>
 800ab54:	b90b      	cbnz	r3, 800ab5a <__sccl+0x2a>
 800ab56:	3801      	subs	r0, #1
 800ab58:	bd70      	pop	{r4, r5, r6, pc}
 800ab5a:	f082 0101 	eor.w	r1, r2, #1
 800ab5e:	54e1      	strb	r1, [r4, r3]
 800ab60:	1c42      	adds	r2, r0, #1
 800ab62:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800ab66:	2d2d      	cmp	r5, #45	; 0x2d
 800ab68:	f102 36ff 	add.w	r6, r2, #4294967295
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	d006      	beq.n	800ab7e <__sccl+0x4e>
 800ab70:	2d5d      	cmp	r5, #93	; 0x5d
 800ab72:	d0f1      	beq.n	800ab58 <__sccl+0x28>
 800ab74:	b90d      	cbnz	r5, 800ab7a <__sccl+0x4a>
 800ab76:	4630      	mov	r0, r6
 800ab78:	e7ee      	b.n	800ab58 <__sccl+0x28>
 800ab7a:	462b      	mov	r3, r5
 800ab7c:	e7ef      	b.n	800ab5e <__sccl+0x2e>
 800ab7e:	7816      	ldrb	r6, [r2, #0]
 800ab80:	2e5d      	cmp	r6, #93	; 0x5d
 800ab82:	d0fa      	beq.n	800ab7a <__sccl+0x4a>
 800ab84:	42b3      	cmp	r3, r6
 800ab86:	dcf8      	bgt.n	800ab7a <__sccl+0x4a>
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	4286      	cmp	r6, r0
 800ab8e:	5421      	strb	r1, [r4, r0]
 800ab90:	dcfb      	bgt.n	800ab8a <__sccl+0x5a>
 800ab92:	43d8      	mvns	r0, r3
 800ab94:	4430      	add	r0, r6
 800ab96:	1c5d      	adds	r5, r3, #1
 800ab98:	42b3      	cmp	r3, r6
 800ab9a:	bfa8      	it	ge
 800ab9c:	2000      	movge	r0, #0
 800ab9e:	182b      	adds	r3, r5, r0
 800aba0:	3202      	adds	r2, #2
 800aba2:	e7de      	b.n	800ab62 <__sccl+0x32>

0800aba4 <_strtol_l.isra.0>:
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abaa:	d001      	beq.n	800abb0 <_strtol_l.isra.0+0xc>
 800abac:	2b24      	cmp	r3, #36	; 0x24
 800abae:	d906      	bls.n	800abbe <_strtol_l.isra.0+0x1a>
 800abb0:	f7fe fd7e 	bl	80096b0 <__errno>
 800abb4:	2316      	movs	r3, #22
 800abb6:	6003      	str	r3, [r0, #0]
 800abb8:	2000      	movs	r0, #0
 800abba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abbe:	4f3a      	ldr	r7, [pc, #232]	; (800aca8 <_strtol_l.isra.0+0x104>)
 800abc0:	468e      	mov	lr, r1
 800abc2:	4676      	mov	r6, lr
 800abc4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800abc8:	5de5      	ldrb	r5, [r4, r7]
 800abca:	f015 0508 	ands.w	r5, r5, #8
 800abce:	d1f8      	bne.n	800abc2 <_strtol_l.isra.0+0x1e>
 800abd0:	2c2d      	cmp	r4, #45	; 0x2d
 800abd2:	d134      	bne.n	800ac3e <_strtol_l.isra.0+0x9a>
 800abd4:	f89e 4000 	ldrb.w	r4, [lr]
 800abd8:	f04f 0801 	mov.w	r8, #1
 800abdc:	f106 0e02 	add.w	lr, r6, #2
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d05c      	beq.n	800ac9e <_strtol_l.isra.0+0xfa>
 800abe4:	2b10      	cmp	r3, #16
 800abe6:	d10c      	bne.n	800ac02 <_strtol_l.isra.0+0x5e>
 800abe8:	2c30      	cmp	r4, #48	; 0x30
 800abea:	d10a      	bne.n	800ac02 <_strtol_l.isra.0+0x5e>
 800abec:	f89e 4000 	ldrb.w	r4, [lr]
 800abf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abf4:	2c58      	cmp	r4, #88	; 0x58
 800abf6:	d14d      	bne.n	800ac94 <_strtol_l.isra.0+0xf0>
 800abf8:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800abfc:	2310      	movs	r3, #16
 800abfe:	f10e 0e02 	add.w	lr, lr, #2
 800ac02:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800ac06:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ac0a:	2600      	movs	r6, #0
 800ac0c:	fbbc f9f3 	udiv	r9, ip, r3
 800ac10:	4635      	mov	r5, r6
 800ac12:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac16:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800ac1a:	2f09      	cmp	r7, #9
 800ac1c:	d818      	bhi.n	800ac50 <_strtol_l.isra.0+0xac>
 800ac1e:	463c      	mov	r4, r7
 800ac20:	42a3      	cmp	r3, r4
 800ac22:	dd24      	ble.n	800ac6e <_strtol_l.isra.0+0xca>
 800ac24:	2e00      	cmp	r6, #0
 800ac26:	db1f      	blt.n	800ac68 <_strtol_l.isra.0+0xc4>
 800ac28:	45a9      	cmp	r9, r5
 800ac2a:	d31d      	bcc.n	800ac68 <_strtol_l.isra.0+0xc4>
 800ac2c:	d101      	bne.n	800ac32 <_strtol_l.isra.0+0x8e>
 800ac2e:	45a2      	cmp	sl, r4
 800ac30:	db1a      	blt.n	800ac68 <_strtol_l.isra.0+0xc4>
 800ac32:	fb05 4503 	mla	r5, r5, r3, r4
 800ac36:	2601      	movs	r6, #1
 800ac38:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800ac3c:	e7eb      	b.n	800ac16 <_strtol_l.isra.0+0x72>
 800ac3e:	2c2b      	cmp	r4, #43	; 0x2b
 800ac40:	bf08      	it	eq
 800ac42:	f89e 4000 	ldrbeq.w	r4, [lr]
 800ac46:	46a8      	mov	r8, r5
 800ac48:	bf08      	it	eq
 800ac4a:	f106 0e02 	addeq.w	lr, r6, #2
 800ac4e:	e7c7      	b.n	800abe0 <_strtol_l.isra.0+0x3c>
 800ac50:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800ac54:	2f19      	cmp	r7, #25
 800ac56:	d801      	bhi.n	800ac5c <_strtol_l.isra.0+0xb8>
 800ac58:	3c37      	subs	r4, #55	; 0x37
 800ac5a:	e7e1      	b.n	800ac20 <_strtol_l.isra.0+0x7c>
 800ac5c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800ac60:	2f19      	cmp	r7, #25
 800ac62:	d804      	bhi.n	800ac6e <_strtol_l.isra.0+0xca>
 800ac64:	3c57      	subs	r4, #87	; 0x57
 800ac66:	e7db      	b.n	800ac20 <_strtol_l.isra.0+0x7c>
 800ac68:	f04f 36ff 	mov.w	r6, #4294967295
 800ac6c:	e7e4      	b.n	800ac38 <_strtol_l.isra.0+0x94>
 800ac6e:	2e00      	cmp	r6, #0
 800ac70:	da05      	bge.n	800ac7e <_strtol_l.isra.0+0xda>
 800ac72:	2322      	movs	r3, #34	; 0x22
 800ac74:	6003      	str	r3, [r0, #0]
 800ac76:	4665      	mov	r5, ip
 800ac78:	b942      	cbnz	r2, 800ac8c <_strtol_l.isra.0+0xe8>
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	e79d      	b.n	800abba <_strtol_l.isra.0+0x16>
 800ac7e:	f1b8 0f00 	cmp.w	r8, #0
 800ac82:	d000      	beq.n	800ac86 <_strtol_l.isra.0+0xe2>
 800ac84:	426d      	negs	r5, r5
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	d0f7      	beq.n	800ac7a <_strtol_l.isra.0+0xd6>
 800ac8a:	b10e      	cbz	r6, 800ac90 <_strtol_l.isra.0+0xec>
 800ac8c:	f10e 31ff 	add.w	r1, lr, #4294967295
 800ac90:	6011      	str	r1, [r2, #0]
 800ac92:	e7f2      	b.n	800ac7a <_strtol_l.isra.0+0xd6>
 800ac94:	2430      	movs	r4, #48	; 0x30
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d1b3      	bne.n	800ac02 <_strtol_l.isra.0+0x5e>
 800ac9a:	2308      	movs	r3, #8
 800ac9c:	e7b1      	b.n	800ac02 <_strtol_l.isra.0+0x5e>
 800ac9e:	2c30      	cmp	r4, #48	; 0x30
 800aca0:	d0a4      	beq.n	800abec <_strtol_l.isra.0+0x48>
 800aca2:	230a      	movs	r3, #10
 800aca4:	e7ad      	b.n	800ac02 <_strtol_l.isra.0+0x5e>
 800aca6:	bf00      	nop
 800aca8:	0800b135 	.word	0x0800b135

0800acac <_strtol_r>:
 800acac:	f7ff bf7a 	b.w	800aba4 <_strtol_l.isra.0>

0800acb0 <__submore>:
 800acb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acb4:	460c      	mov	r4, r1
 800acb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800acb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800acbc:	4299      	cmp	r1, r3
 800acbe:	d11d      	bne.n	800acfc <__submore+0x4c>
 800acc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800acc4:	f7ff fa9e 	bl	800a204 <_malloc_r>
 800acc8:	b918      	cbnz	r0, 800acd2 <__submore+0x22>
 800acca:	f04f 30ff 	mov.w	r0, #4294967295
 800acce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd6:	63a3      	str	r3, [r4, #56]	; 0x38
 800acd8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800acdc:	6360      	str	r0, [r4, #52]	; 0x34
 800acde:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ace2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ace6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800acea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800acee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800acf2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800acf6:	6020      	str	r0, [r4, #0]
 800acf8:	2000      	movs	r0, #0
 800acfa:	e7e8      	b.n	800acce <__submore+0x1e>
 800acfc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800acfe:	0077      	lsls	r7, r6, #1
 800ad00:	463a      	mov	r2, r7
 800ad02:	f7ff fbd1 	bl	800a4a8 <_realloc_r>
 800ad06:	4605      	mov	r5, r0
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	d0de      	beq.n	800acca <__submore+0x1a>
 800ad0c:	eb00 0806 	add.w	r8, r0, r6
 800ad10:	4601      	mov	r1, r0
 800ad12:	4632      	mov	r2, r6
 800ad14:	4640      	mov	r0, r8
 800ad16:	f7fe fcf5 	bl	8009704 <memcpy>
 800ad1a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800ad1e:	f8c4 8000 	str.w	r8, [r4]
 800ad22:	e7e9      	b.n	800acf8 <__submore+0x48>

0800ad24 <_malloc_usable_size_r>:
 800ad24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad28:	1f18      	subs	r0, r3, #4
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	bfbc      	itt	lt
 800ad2e:	580b      	ldrlt	r3, [r1, r0]
 800ad30:	18c0      	addlt	r0, r0, r3
 800ad32:	4770      	bx	lr

0800ad34 <_init>:
 800ad34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad36:	bf00      	nop
 800ad38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad3a:	bc08      	pop	{r3}
 800ad3c:	469e      	mov	lr, r3
 800ad3e:	4770      	bx	lr

0800ad40 <_fini>:
 800ad40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad42:	bf00      	nop
 800ad44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad46:	bc08      	pop	{r3}
 800ad48:	469e      	mov	lr, r3
 800ad4a:	4770      	bx	lr
