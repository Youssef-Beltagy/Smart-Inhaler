
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d2c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080090d0  080090d0  000190d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000004  080090d4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000040  08009110  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000dc  080091a9  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000011c  080091e6  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000098  20000130  080091f7  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000003f8  200001c8  0800928f  000201c8  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  200005c0  0800928f  000205c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_line   0002c1e2  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0003bcb5  00000000  00000000  0004c3da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006aff  00000000  00000000  0008808f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000028e8  00000000  00000000  0008eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f8285  00000000  00000000  00091478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00002660  00000000  00000000  00189700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002c9e9  00000000  00000000  0018bd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001b8749  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a9b4  00000000  00000000  001b879c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .stabstr      0000014d  00000000  00000000  001c3150  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001c8 	.word	0x200001c8
 8000158:	00000000 	.word	0x00000000
 800015c:	08008e50 	.word	0x08008e50

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001cc 	.word	0x200001cc
 8000178:	08008e50 	.word	0x08008e50

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800018c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000190:	3304      	adds	r3, #4

08000192 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000192:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000194:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000196:	d3f9      	bcc.n	800018c <CopyDataInit>
  bx lr
 8000198:	4770      	bx	lr

0800019a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800019a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800019c:	3004      	adds	r0, #4

0800019e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800019e:	4288      	cmp	r0, r1
  bcc FillZerobss
 80001a0:	d3fb      	bcc.n	800019a <FillZerobss>
  bx lr
 80001a2:	4770      	bx	lr

080001a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001a4:	480c      	ldr	r0, [pc, #48]	; (80001d8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80001a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001a8:	f001 ff4c 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80001ac:	480b      	ldr	r0, [pc, #44]	; (80001dc <LoopForever+0x8>)
 80001ae:	490c      	ldr	r1, [pc, #48]	; (80001e0 <LoopForever+0xc>)
 80001b0:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <LoopForever+0x10>)
 80001b2:	2300      	movs	r3, #0
 80001b4:	f7ff ffed 	bl	8000192 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001b8:	480b      	ldr	r0, [pc, #44]	; (80001e8 <LoopForever+0x14>)
 80001ba:	490c      	ldr	r1, [pc, #48]	; (80001ec <LoopForever+0x18>)
 80001bc:	2300      	movs	r3, #0
 80001be:	f7ff ffee 	bl	800019e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001c2:	480b      	ldr	r0, [pc, #44]	; (80001f0 <LoopForever+0x1c>)
 80001c4:	490b      	ldr	r1, [pc, #44]	; (80001f4 <LoopForever+0x20>)
 80001c6:	2300      	movs	r3, #0
 80001c8:	f7ff ffe9 	bl	800019e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001cc:	f008 fe06 	bl	8008ddc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001d0:	f001 faea 	bl	80017a8 <main>

080001d4 <LoopForever>:

LoopForever:
  b LoopForever
 80001d4:	e7fe      	b.n	80001d4 <LoopForever>
 80001d6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001d8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80001dc:	20000004 	.word	0x20000004
 80001e0:	20000040 	.word	0x20000040
 80001e4:	080090d4 	.word	0x080090d4
  INIT_BSS _sbss, _ebss
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	200005c0 	.word	0x200005c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001f0:	200301e0 	.word	0x200301e0
 80001f4:	20030a57 	.word	0x20030a57

080001f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001f8:	e7fe      	b.n	80001f8 <ADC1_IRQHandler>
	...

080001fc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <LL_EXTI_EnableIT_32_63+0x24>)
 8000206:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800020a:	4905      	ldr	r1, [pc, #20]	; (8000220 <LL_EXTI_EnableIT_32_63+0x24>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4313      	orrs	r3, r2
 8000210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	58000800 	.word	0x58000800

08000224 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800022c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4313      	orrs	r3, r2
 800023a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800023c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4013      	ands	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000248:	68fb      	ldr	r3, [r7, #12]
}
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000256:	b480      	push	{r7}
 8000258:	b085      	sub	sp, #20
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800025e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000262:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000276:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4013      	ands	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000280:	68fb      	ldr	r3, [r7, #12]
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800028e:	b580      	push	{r7, lr}
 8000290:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000292:	f002 f8f3 	bl	800247c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000296:	f002 f8f7 	bl	8002488 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800029a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800029e:	f7ff ffad 	bl	80001fc <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 80002a2:	f000 f821 	bl	80002e8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80002a6:	f000 f8c3 	bl	8000430 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80002aa:	bf00      	nop
}
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80002b0:	b5b0      	push	{r4, r5, r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <APPD_EnableCPU2+0x34>)
 80002b8:	1d3c      	adds	r4, r7, #4
 80002ba:	461d      	mov	r5, r3
 80002bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c4:	c403      	stmia	r4!, {r0, r1}
 80002c6:	8022      	strh	r2, [r4, #0]
 80002c8:	3402      	adds	r4, #2
 80002ca:	0c13      	lsrs	r3, r2, #16
 80002cc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80002ce:	f007 fb99 	bl	8007a04 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f006 febc 	bl	8007052 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80002da:	bf00      	nop
}
 80002dc:	3720      	adds	r7, #32
 80002de:	46bd      	mov	sp, r7
 80002e0:	bdb0      	pop	{r4, r5, r7, pc}
 80002e2:	bf00      	nop
 80002e4:	08008e68 	.word	0x08008e68

080002e8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000308:	2300      	movs	r3, #0
 800030a:	77fb      	strb	r3, [r7, #31]
 800030c:	e038      	b.n	8000380 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800030e:	7ffb      	ldrb	r3, [r7, #31]
 8000310:	4a44      	ldr	r2, [pc, #272]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000312:	00db      	lsls	r3, r3, #3
 8000314:	4413      	add	r3, r2
 8000316:	799b      	ldrb	r3, [r3, #6]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d02b      	beq.n	8000374 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800031c:	7ffb      	ldrb	r3, [r7, #31]
 800031e:	4a41      	ldr	r2, [pc, #260]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000320:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000324:	4a40      	ldr	r2, [pc, #256]	; (8000428 <APPD_SetCPU2GpioConfig+0x140>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d01b      	beq.n	8000362 <APPD_SetCPU2GpioConfig+0x7a>
 800032a:	4a3f      	ldr	r2, [pc, #252]	; (8000428 <APPD_SetCPU2GpioConfig+0x140>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d823      	bhi.n	8000378 <APPD_SetCPU2GpioConfig+0x90>
 8000330:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000334:	d003      	beq.n	800033e <APPD_SetCPU2GpioConfig+0x56>
 8000336:	4a3d      	ldr	r2, [pc, #244]	; (800042c <APPD_SetCPU2GpioConfig+0x144>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d009      	beq.n	8000350 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800033c:	e01c      	b.n	8000378 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800033e:	7ffb      	ldrb	r3, [r7, #31]
 8000340:	4a38      	ldr	r2, [pc, #224]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	4413      	add	r3, r2
 8000346:	889a      	ldrh	r2, [r3, #4]
 8000348:	8bbb      	ldrh	r3, [r7, #28]
 800034a:	4313      	orrs	r3, r2
 800034c:	83bb      	strh	r3, [r7, #28]
          break;
 800034e:	e014      	b.n	800037a <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000350:	7ffb      	ldrb	r3, [r7, #31]
 8000352:	4a34      	ldr	r2, [pc, #208]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000354:	00db      	lsls	r3, r3, #3
 8000356:	4413      	add	r3, r2
 8000358:	889a      	ldrh	r2, [r3, #4]
 800035a:	8b7b      	ldrh	r3, [r7, #26]
 800035c:	4313      	orrs	r3, r2
 800035e:	837b      	strh	r3, [r7, #26]
          break;
 8000360:	e00b      	b.n	800037a <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000362:	7ffb      	ldrb	r3, [r7, #31]
 8000364:	4a2f      	ldr	r2, [pc, #188]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	4413      	add	r3, r2
 800036a:	889a      	ldrh	r2, [r3, #4]
 800036c:	8b3b      	ldrh	r3, [r7, #24]
 800036e:	4313      	orrs	r3, r2
 8000370:	833b      	strh	r3, [r7, #24]
          break;
 8000372:	e002      	b.n	800037a <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000374:	bf00      	nop
 8000376:	e000      	b.n	800037a <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000378:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800037a:	7ffb      	ldrb	r3, [r7, #31]
 800037c:	3301      	adds	r3, #1
 800037e:	77fb      	strb	r3, [r7, #31]
 8000380:	7ffb      	ldrb	r3, [r7, #31]
 8000382:	2b21      	cmp	r3, #33	; 0x21
 8000384:	d9c3      	bls.n	800030e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000392:	8bbb      	ldrh	r3, [r7, #28]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d014      	beq.n	80003c2 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000398:	8bbb      	ldrh	r3, [r7, #28]
 800039a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ff41 	bl	8000224 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff ff57 	bl	8000256 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4619      	mov	r1, r3
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f002 fb76 	bl	8002aa0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80003b4:	8bbb      	ldrh	r3, [r7, #28]
 80003b6:	2200      	movs	r2, #0
 80003b8:	4619      	mov	r1, r3
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003be:	f002 fcdf 	bl	8002d80 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80003c2:	8b7b      	ldrh	r3, [r7, #26]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d012      	beq.n	80003ee <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80003c8:	8b7b      	ldrh	r3, [r7, #26]
 80003ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	2002      	movs	r0, #2
 80003ce:	f7ff ff29 	bl	8000224 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80003d2:	2002      	movs	r0, #2
 80003d4:	f7ff ff3f 	bl	8000256 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <APPD_SetCPU2GpioConfig+0x144>)
 80003de:	f002 fb5f 	bl	8002aa0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80003e2:	8b7b      	ldrh	r3, [r7, #26]
 80003e4:	2200      	movs	r2, #0
 80003e6:	4619      	mov	r1, r3
 80003e8:	4810      	ldr	r0, [pc, #64]	; (800042c <APPD_SetCPU2GpioConfig+0x144>)
 80003ea:	f002 fcc9 	bl	8002d80 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80003ee:	8b3b      	ldrh	r3, [r7, #24]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d013      	beq.n	800041c <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80003f4:	8b3b      	ldrh	r3, [r7, #24]
 80003f6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f8:	2004      	movs	r0, #4
 80003fa:	f7ff ff13 	bl	8000224 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003fe:	2004      	movs	r0, #4
 8000400:	f7ff ff29 	bl	8000256 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4807      	ldr	r0, [pc, #28]	; (8000428 <APPD_SetCPU2GpioConfig+0x140>)
 800040a:	f002 fb49 	bl	8002aa0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800040e:	8b3b      	ldrh	r3, [r7, #24]
 8000410:	2200      	movs	r2, #0
 8000412:	4619      	mov	r1, r3
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <APPD_SetCPU2GpioConfig+0x140>)
 8000416:	f002 fcb3 	bl	8002d80 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800041a:	bf00      	nop
 800041c:	bf00      	nop
}
 800041e:	3720      	adds	r7, #32
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	08008ee8 	.word	0x08008ee8
 8000428:	48000800 	.word	0x48000800
 800042c:	48000400 	.word	0x48000400

08000430 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000434:	bf00      	nop
}
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <LL_C2_PWR_SetPowerMode+0x28>)
 800044a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800044e:	f023 0207 	bic.w	r2, r3, #7
 8000452:	4905      	ldr	r1, [pc, #20]	; (8000468 <LL_C2_PWR_SetPowerMode+0x28>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4313      	orrs	r3, r2
 8000458:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	58000400 	.word	0x58000400

0800046c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800047e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4313      	orrs	r3, r2
 8000486:	608b      	str	r3, [r1, #8]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000498:	f000 f814 	bl	80004c4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800049c:	4908      	ldr	r1, [pc, #32]	; (80004c0 <APPE_Init+0x2c>)
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 fd0c 	bl	8000ebc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80004a4:	f7ff fef3 	bl	800028e <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80004a8:	2101      	movs	r1, #1
 80004aa:	2001      	movs	r0, #1
 80004ac:	f008 fa4a 	bl	8008944 <UTIL_LPM_SetOffMode>

  Led_Init();
 80004b0:	f000 f867 	bl	8000582 <Led_Init>

  Button_Init();
 80004b4:	f000 f875 	bl	80005a2 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004b8:	f000 f812 	bl	80004e0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004bc:	bf00      	nop
}
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200004d0 	.word	0x200004d0

080004c4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004cc:	f7ff ffce 	bl	800046c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80004d0:	f008 fa26 	bl	8008920 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80004d4:	2004      	movs	r0, #4
 80004d6:	f7ff ffb3 	bl	8000440 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004da:	bf00      	nop
}
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004e6:	f007 f8d7 	bl	8007698 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <appe_Tl_Init+0x50>)
 80004ec:	2100      	movs	r1, #0
 80004ee:	2020      	movs	r0, #32
 80004f0:	f008 fb3c 	bl	8008b6c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <appe_Tl_Init+0x54>)
 80004f6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <appe_Tl_Init+0x58>)
 80004fa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80004fc:	463b      	mov	r3, r7
 80004fe:	4619      	mov	r1, r3
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <appe_Tl_Init+0x5c>)
 8000502:	f006 fdbd 	bl	8007080 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <appe_Tl_Init+0x60>)
 8000508:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <appe_Tl_Init+0x64>)
 800050c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x68>)
 8000510:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000512:	f240 533c 	movw	r3, #1340	; 0x53c
 8000516:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000518:	f107 0308 	add.w	r3, r7, #8
 800051c:	4618      	mov	r0, r3
 800051e:	f007 f9fd 	bl	800791c <TL_MM_Init>

  TL_Enable();
 8000522:	f007 f8b3 	bl	800768c <TL_Enable>

  return;
 8000526:	bf00      	nop
}
 8000528:	3720      	adds	r7, #32
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	080070b9 	.word	0x080070b9
 8000534:	20030724 	.word	0x20030724
 8000538:	0800054d 	.word	0x0800054d
 800053c:	08000563 	.word	0x08000563
 8000540:	2003093c 	.word	0x2003093c
 8000544:	20030830 	.word	0x20030830
 8000548:	200301e8 	.word	0x200301e8

0800054c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000556:	bf00      	nop
}
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800056a:	f7ff fea1 	bl	80002b0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 800056e:	f007 faf9 	bl	8007b64 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000572:	2100      	movs	r1, #0
 8000574:	2001      	movs	r0, #1
 8000576:	f008 f9e5 	bl	8008944 <UTIL_LPM_SetOffMode>
  return;
 800057a:	bf00      	nop
}
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000586:	2000      	movs	r0, #0
 8000588:	f001 fdcc 	bl	8002124 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800058c:	2001      	movs	r0, #1
 800058e:	f001 fdc9 	bl	8002124 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000592:	2002      	movs	r0, #2
 8000594:	f001 fdc6 	bl	8002124 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000598:	2001      	movs	r0, #1
 800059a:	f001 fdfd 	bl	8002198 <BSP_LED_On>
#endif

  return;
 800059e:	bf00      	nop
}
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <Button_Init>:

static void Button_Init( void )
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80005a6:	2101      	movs	r1, #1
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 fe43 	bl	8002234 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80005ae:	2101      	movs	r1, #1
 80005b0:	2001      	movs	r0, #1
 80005b2:	f001 fe3f 	bl	8002234 <BSP_PB_Init>
#endif

  return;
 80005b6:	bf00      	nop
}
 80005b8:	bd80      	pop	{r7, pc}

080005ba <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80005be:	bf00      	nop
}
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005d2:	f04f 30ff 	mov.w	r0, #4294967295
 80005d6:	f008 f9e5 	bl	80089a4 <UTIL_SEQ_Run>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ea:	2100      	movs	r1, #0
 80005ec:	2020      	movs	r0, #32
 80005ee:	f008 fadf 	bl	8008bb0 <UTIL_SEQ_SetTask>
  return;
 80005f2:	bf00      	nop
}
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000602:	2002      	movs	r0, #2
 8000604:	f008 fb40 	bl	8008c88 <UTIL_SEQ_SetEvt>
  return;
 8000608:	bf00      	nop
}
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000618:	2002      	movs	r0, #2
 800061a:	f008 fb55 	bl	8008cc8 <UTIL_SEQ_WaitEvt>
  return;
 800061e:	bf00      	nop
}
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	4603      	mov	r3, r0
 800062e:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	2b10      	cmp	r3, #16
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_EXTI_Callback+0x1e>
 8000636:	2b10      	cmp	r3, #16
 8000638:	dc10      	bgt.n	800065c <HAL_GPIO_EXTI_Callback+0x36>
 800063a:	2b01      	cmp	r3, #1
 800063c:	d005      	beq.n	800064a <HAL_GPIO_EXTI_Callback+0x24>
 800063e:	2b02      	cmp	r3, #2
 8000640:	d009      	beq.n	8000656 <HAL_GPIO_EXTI_Callback+0x30>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000642:	e00b      	b.n	800065c <HAL_GPIO_EXTI_Callback+0x36>
     APP_BLE_Key_Button1_Action();
 8000644:	f007 fbea 	bl	8007e1c <APP_BLE_Key_Button1_Action>
      break; 
 8000648:	e009      	b.n	800065e <HAL_GPIO_EXTI_Callback+0x38>
      APP_BLE_Key_Button2_Action();
 800064a:	f007 fbed 	bl	8007e28 <APP_BLE_Key_Button2_Action>
    	BSP_LED_Toggle(LED1);
 800064e:	2000      	movs	r0, #0
 8000650:	f001 fdd6 	bl	8002200 <BSP_LED_Toggle>
      break; 
 8000654:	e003      	b.n	800065e <HAL_GPIO_EXTI_Callback+0x38>
      APP_BLE_Key_Button3_Action();
 8000656:	f007 fbee 	bl	8007e36 <APP_BLE_Key_Button3_Action>
      break;
 800065a:	e000      	b.n	800065e <HAL_GPIO_EXTI_Callback+0x38>
      break;
 800065c:	bf00      	nop

  }
  return;
 800065e:	bf00      	nop
}
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <LL_EXTI_EnableIT_0_31>:
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <LL_EXTI_EnableIT_0_31+0x24>)
 8000672:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000676:	4905      	ldr	r1, [pc, #20]	; (800068c <LL_EXTI_EnableIT_0_31+0x24>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	4313      	orrs	r3, r2
 800067c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	58000800 	.word	0x58000800

08000690 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4904      	ldr	r1, [pc, #16]	; (80006b0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	600b      	str	r3, [r1, #0]

}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	58000800 	.word	0x58000800

080006b4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <ReadRtcSsrValue+0x3c>)
 80006bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006be:	b29b      	uxth	r3, r3
 80006c0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <ReadRtcSsrValue+0x3c>)
 80006c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006ca:	e005      	b.n	80006d8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <ReadRtcSsrValue+0x3c>)
 80006d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d4:	b29b      	uxth	r3, r3
 80006d6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d1f5      	bne.n	80006cc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80006e0:	683b      	ldr	r3, [r7, #0]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40002800 	.word	0x40002800

080006f4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	460a      	mov	r2, r1
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000704:	79ba      	ldrb	r2, [r7, #6]
 8000706:	491d      	ldr	r1, [pc, #116]	; (800077c <LinkTimerAfter+0x88>)
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	440b      	add	r3, r1
 8000712:	3315      	adds	r3, #21
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b06      	cmp	r3, #6
 800071c:	d009      	beq.n	8000732 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800071e:	7bfa      	ldrb	r2, [r7, #15]
 8000720:	4916      	ldr	r1, [pc, #88]	; (800077c <LinkTimerAfter+0x88>)
 8000722:	4613      	mov	r3, r2
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	4413      	add	r3, r2
 8000728:	00db      	lsls	r3, r3, #3
 800072a:	440b      	add	r3, r1
 800072c:	3314      	adds	r3, #20
 800072e:	79fa      	ldrb	r2, [r7, #7]
 8000730:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000732:	79fa      	ldrb	r2, [r7, #7]
 8000734:	4911      	ldr	r1, [pc, #68]	; (800077c <LinkTimerAfter+0x88>)
 8000736:	4613      	mov	r3, r2
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	4413      	add	r3, r2
 800073c:	00db      	lsls	r3, r3, #3
 800073e:	440b      	add	r3, r1
 8000740:	3315      	adds	r3, #21
 8000742:	7bfa      	ldrb	r2, [r7, #15]
 8000744:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000746:	79fa      	ldrb	r2, [r7, #7]
 8000748:	490c      	ldr	r1, [pc, #48]	; (800077c <LinkTimerAfter+0x88>)
 800074a:	4613      	mov	r3, r2
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4413      	add	r3, r2
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	440b      	add	r3, r1
 8000754:	3314      	adds	r3, #20
 8000756:	79ba      	ldrb	r2, [r7, #6]
 8000758:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800075a:	79ba      	ldrb	r2, [r7, #6]
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <LinkTimerAfter+0x88>)
 800075e:	4613      	mov	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	4413      	add	r3, r2
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	440b      	add	r3, r1
 8000768:	3315      	adds	r3, #21
 800076a:	79fa      	ldrb	r2, [r7, #7]
 800076c:	701a      	strb	r2, [r3, #0]

  return;
 800076e:	bf00      	nop
}
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	20000040 	.word	0x20000040

08000780 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	460a      	mov	r2, r1
 800078a:	71fb      	strb	r3, [r7, #7]
 800078c:	4613      	mov	r3, r2
 800078e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <LinkTimerBefore+0xb8>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	79ba      	ldrb	r2, [r7, #6]
 8000798:	429a      	cmp	r2, r3
 800079a:	d032      	beq.n	8000802 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800079c:	79ba      	ldrb	r2, [r7, #6]
 800079e:	4927      	ldr	r1, [pc, #156]	; (800083c <LinkTimerBefore+0xbc>)
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	440b      	add	r3, r1
 80007aa:	3314      	adds	r3, #20
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007b0:	7bfa      	ldrb	r2, [r7, #15]
 80007b2:	4922      	ldr	r1, [pc, #136]	; (800083c <LinkTimerBefore+0xbc>)
 80007b4:	4613      	mov	r3, r2
 80007b6:	005b      	lsls	r3, r3, #1
 80007b8:	4413      	add	r3, r2
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	440b      	add	r3, r1
 80007be:	3315      	adds	r3, #21
 80007c0:	79fa      	ldrb	r2, [r7, #7]
 80007c2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007c4:	79fa      	ldrb	r2, [r7, #7]
 80007c6:	491d      	ldr	r1, [pc, #116]	; (800083c <LinkTimerBefore+0xbc>)
 80007c8:	4613      	mov	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	4413      	add	r3, r2
 80007ce:	00db      	lsls	r3, r3, #3
 80007d0:	440b      	add	r3, r1
 80007d2:	3315      	adds	r3, #21
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80007d8:	79fa      	ldrb	r2, [r7, #7]
 80007da:	4918      	ldr	r1, [pc, #96]	; (800083c <LinkTimerBefore+0xbc>)
 80007dc:	4613      	mov	r3, r2
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	4413      	add	r3, r2
 80007e2:	00db      	lsls	r3, r3, #3
 80007e4:	440b      	add	r3, r1
 80007e6:	3314      	adds	r3, #20
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	4913      	ldr	r1, [pc, #76]	; (800083c <LinkTimerBefore+0xbc>)
 80007f0:	4613      	mov	r3, r2
 80007f2:	005b      	lsls	r3, r3, #1
 80007f4:	4413      	add	r3, r2
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	440b      	add	r3, r1
 80007fa:	3314      	adds	r3, #20
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000800:	e014      	b.n	800082c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000802:	79fa      	ldrb	r2, [r7, #7]
 8000804:	490d      	ldr	r1, [pc, #52]	; (800083c <LinkTimerBefore+0xbc>)
 8000806:	4613      	mov	r3, r2
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4413      	add	r3, r2
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	440b      	add	r3, r1
 8000810:	3315      	adds	r3, #21
 8000812:	79ba      	ldrb	r2, [r7, #6]
 8000814:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000816:	79ba      	ldrb	r2, [r7, #6]
 8000818:	4908      	ldr	r1, [pc, #32]	; (800083c <LinkTimerBefore+0xbc>)
 800081a:	4613      	mov	r3, r2
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	4413      	add	r3, r2
 8000820:	00db      	lsls	r3, r3, #3
 8000822:	440b      	add	r3, r1
 8000824:	3314      	adds	r3, #20
 8000826:	79fa      	ldrb	r2, [r7, #7]
 8000828:	701a      	strb	r2, [r3, #0]
  return;
 800082a:	bf00      	nop
}
 800082c:	3714      	adds	r7, #20
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	200000d0 	.word	0x200000d0
 800083c:	20000040 	.word	0x20000040

08000840 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800084a:	4b4e      	ldr	r3, [pc, #312]	; (8000984 <linkTimer+0x144>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	2b06      	cmp	r3, #6
 8000852:	d118      	bne.n	8000886 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000854:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <linkTimer+0x144>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b4b      	ldr	r3, [pc, #300]	; (8000988 <linkTimer+0x148>)
 800085c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800085e:	4a49      	ldr	r2, [pc, #292]	; (8000984 <linkTimer+0x144>)
 8000860:	79fb      	ldrb	r3, [r7, #7]
 8000862:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000864:	79fa      	ldrb	r2, [r7, #7]
 8000866:	4949      	ldr	r1, [pc, #292]	; (800098c <linkTimer+0x14c>)
 8000868:	4613      	mov	r3, r2
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	4413      	add	r3, r2
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	440b      	add	r3, r1
 8000872:	3315      	adds	r3, #21
 8000874:	2206      	movs	r2, #6
 8000876:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000878:	4b45      	ldr	r3, [pc, #276]	; (8000990 <linkTimer+0x150>)
 800087a:	f04f 32ff 	mov.w	r2, #4294967295
 800087e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	81fb      	strh	r3, [r7, #14]
 8000884:	e078      	b.n	8000978 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000886:	f000 f909 	bl	8000a9c <ReturnTimeElapsed>
 800088a:	4603      	mov	r3, r0
 800088c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	493e      	ldr	r1, [pc, #248]	; (800098c <linkTimer+0x14c>)
 8000892:	4613      	mov	r3, r2
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	4413      	add	r3, r2
 8000898:	00db      	lsls	r3, r3, #3
 800089a:	440b      	add	r3, r1
 800089c:	3308      	adds	r3, #8
 800089e:	6819      	ldr	r1, [r3, #0]
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	4419      	add	r1, r3
 80008a6:	4839      	ldr	r0, [pc, #228]	; (800098c <linkTimer+0x14c>)
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	4403      	add	r3, r0
 80008b2:	3308      	adds	r3, #8
 80008b4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	4934      	ldr	r1, [pc, #208]	; (800098c <linkTimer+0x14c>)
 80008ba:	4613      	mov	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	4413      	add	r3, r2
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	440b      	add	r3, r1
 80008c4:	3308      	adds	r3, #8
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008ca:	4b2e      	ldr	r3, [pc, #184]	; (8000984 <linkTimer+0x144>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	4619      	mov	r1, r3
 80008d2:	4a2e      	ldr	r2, [pc, #184]	; (800098c <linkTimer+0x14c>)
 80008d4:	460b      	mov	r3, r1
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	440b      	add	r3, r1
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4413      	add	r3, r2
 80008de:	3308      	adds	r3, #8
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68ba      	ldr	r2, [r7, #8]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d337      	bcc.n	8000958 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80008e8:	4b26      	ldr	r3, [pc, #152]	; (8000984 <linkTimer+0x144>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80008ee:	7b7a      	ldrb	r2, [r7, #13]
 80008f0:	4926      	ldr	r1, [pc, #152]	; (800098c <linkTimer+0x14c>)
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00db      	lsls	r3, r3, #3
 80008fa:	440b      	add	r3, r1
 80008fc:	3315      	adds	r3, #21
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000902:	e013      	b.n	800092c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000904:	7b7a      	ldrb	r2, [r7, #13]
 8000906:	4921      	ldr	r1, [pc, #132]	; (800098c <linkTimer+0x14c>)
 8000908:	4613      	mov	r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4413      	add	r3, r2
 800090e:	00db      	lsls	r3, r3, #3
 8000910:	440b      	add	r3, r1
 8000912:	3315      	adds	r3, #21
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000918:	7b7a      	ldrb	r2, [r7, #13]
 800091a:	491c      	ldr	r1, [pc, #112]	; (800098c <linkTimer+0x14c>)
 800091c:	4613      	mov	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	4413      	add	r3, r2
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	440b      	add	r3, r1
 8000926:	3315      	adds	r3, #21
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800092c:	7b3b      	ldrb	r3, [r7, #12]
 800092e:	2b06      	cmp	r3, #6
 8000930:	d00b      	beq.n	800094a <linkTimer+0x10a>
 8000932:	7b3a      	ldrb	r2, [r7, #12]
 8000934:	4915      	ldr	r1, [pc, #84]	; (800098c <linkTimer+0x14c>)
 8000936:	4613      	mov	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	4413      	add	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	3308      	adds	r3, #8
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	429a      	cmp	r2, r3
 8000948:	d2dc      	bcs.n	8000904 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800094a:	7b7a      	ldrb	r2, [r7, #13]
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fecf 	bl	80006f4 <LinkTimerAfter>
 8000956:	e00f      	b.n	8000978 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <linkTimer+0x144>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	b2da      	uxtb	r2, r3
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff0c 	bl	8000780 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <linkTimer+0x144>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4b06      	ldr	r3, [pc, #24]	; (8000988 <linkTimer+0x148>)
 8000970:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <linkTimer+0x144>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000978:	89fb      	ldrh	r3, [r7, #14]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	200000d0 	.word	0x200000d0
 8000988:	200000d1 	.word	0x200000d1
 800098c:	20000040 	.word	0x20000040
 8000990:	200000d4 	.word	0x200000d4

08000994 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009a4:	4b39      	ldr	r3, [pc, #228]	; (8000a8c <UnlinkTimer+0xf8>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	79fa      	ldrb	r2, [r7, #7]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d111      	bne.n	80009d4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009b0:	4b36      	ldr	r3, [pc, #216]	; (8000a8c <UnlinkTimer+0xf8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <UnlinkTimer+0xfc>)
 80009b8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	4935      	ldr	r1, [pc, #212]	; (8000a94 <UnlinkTimer+0x100>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	3315      	adds	r3, #21
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <UnlinkTimer+0xf8>)
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e03e      	b.n	8000a52 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80009d4:	79fa      	ldrb	r2, [r7, #7]
 80009d6:	492f      	ldr	r1, [pc, #188]	; (8000a94 <UnlinkTimer+0x100>)
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	440b      	add	r3, r1
 80009e2:	3314      	adds	r3, #20
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	492a      	ldr	r1, [pc, #168]	; (8000a94 <UnlinkTimer+0x100>)
 80009ec:	4613      	mov	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	440b      	add	r3, r1
 80009f6:	3315      	adds	r3, #21
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80009fc:	79f9      	ldrb	r1, [r7, #7]
 80009fe:	7bfa      	ldrb	r2, [r7, #15]
 8000a00:	4824      	ldr	r0, [pc, #144]	; (8000a94 <UnlinkTimer+0x100>)
 8000a02:	460b      	mov	r3, r1
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	440b      	add	r3, r1
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	4403      	add	r3, r0
 8000a0c:	3315      	adds	r3, #21
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2d8      	uxtb	r0, r3
 8000a12:	4920      	ldr	r1, [pc, #128]	; (8000a94 <UnlinkTimer+0x100>)
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3315      	adds	r3, #21
 8000a20:	4602      	mov	r2, r0
 8000a22:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d013      	beq.n	8000a52 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a2a:	79f9      	ldrb	r1, [r7, #7]
 8000a2c:	7bba      	ldrb	r2, [r7, #14]
 8000a2e:	4819      	ldr	r0, [pc, #100]	; (8000a94 <UnlinkTimer+0x100>)
 8000a30:	460b      	mov	r3, r1
 8000a32:	005b      	lsls	r3, r3, #1
 8000a34:	440b      	add	r3, r1
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	4403      	add	r3, r0
 8000a3a:	3314      	adds	r3, #20
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b2d8      	uxtb	r0, r3
 8000a40:	4914      	ldr	r1, [pc, #80]	; (8000a94 <UnlinkTimer+0x100>)
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3314      	adds	r3, #20
 8000a4e:	4602      	mov	r2, r0
 8000a50:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a52:	79fa      	ldrb	r2, [r7, #7]
 8000a54:	490f      	ldr	r1, [pc, #60]	; (8000a94 <UnlinkTimer+0x100>)
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	00db      	lsls	r3, r3, #3
 8000a5e:	440b      	add	r3, r1
 8000a60:	330c      	adds	r3, #12
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a66:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <UnlinkTimer+0xf8>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b06      	cmp	r3, #6
 8000a6e:	d107      	bne.n	8000a80 <UnlinkTimer+0xec>
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d104      	bne.n	8000a80 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <UnlinkTimer+0x104>)
 8000a78:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a7e:	bf00      	nop
 8000a80:	bf00      	nop
}
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	200000d0 	.word	0x200000d0
 8000a90:	200000d1 	.word	0x200000d1
 8000a94:	20000040 	.word	0x20000040
 8000a98:	200000d4 	.word	0x200000d4

08000a9c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	; (8000b0c <ReturnTimeElapsed+0x70>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aaa:	d026      	beq.n	8000afa <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000aac:	f7ff fe02 	bl	80006b4 <ReadRtcSsrValue>
 8000ab0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <ReturnTimeElapsed+0x70>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d805      	bhi.n	8000ac8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <ReturnTimeElapsed+0x70>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	e00a      	b.n	8000ade <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <ReturnTimeElapsed+0x74>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	461a      	mov	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <ReturnTimeElapsed+0x70>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <ReturnTimeElapsed+0x78>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <ReturnTimeElapsed+0x7c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	40d3      	lsrs	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	e001      	b.n	8000afe <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	b29b      	uxth	r3, r3
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000d4 	.word	0x200000d4
 8000b10:	200001ea 	.word	0x200001ea
 8000b14:	200001e9 	.word	0x200001e9
 8000b18:	200001e8 	.word	0x200001e8

08000b1c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d108      	bne.n	8000b3e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b2c:	f7ff fdc2 	bl	80006b4 <ReadRtcSsrValue>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a24      	ldr	r2, [pc, #144]	; (8000bc4 <RestartWakeupCounter+0xa8>)
 8000b34:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b36:	2003      	movs	r0, #3
 8000b38:	f001 fe29 	bl	800278e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b3c:	e03e      	b.n	8000bbc <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d803      	bhi.n	8000b4c <RestartWakeupCounter+0x30>
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <RestartWakeupCounter+0xac>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d002      	beq.n	8000b52 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b52:	bf00      	nop
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <RestartWakeupCounter+0xb0>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f7      	beq.n	8000b54 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b64:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <RestartWakeupCounter+0xb0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <RestartWakeupCounter+0xb0>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b78:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <RestartWakeupCounter+0xb4>)
 8000b7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b80:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b82:	2003      	movs	r0, #3
 8000b84:	f001 fe11 	bl	80027aa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <RestartWakeupCounter+0xb8>)
 8000b8a:	695b      	ldr	r3, [r3, #20]
 8000b8c:	0c1b      	lsrs	r3, r3, #16
 8000b8e:	041b      	lsls	r3, r3, #16
 8000b90:	88fa      	ldrh	r2, [r7, #6]
 8000b92:	4910      	ldr	r1, [pc, #64]	; (8000bd4 <RestartWakeupCounter+0xb8>)
 8000b94:	4313      	orrs	r3, r2
 8000b96:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b98:	f7ff fd8c 	bl	80006b4 <ReadRtcSsrValue>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <RestartWakeupCounter+0xa8>)
 8000ba0:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <RestartWakeupCounter+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <RestartWakeupCounter+0xb0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bb4:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000bb6:	f3af 8000 	nop.w
  return ;
 8000bba:	bf00      	nop
}
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000d4 	.word	0x200000d4
 8000bc8:	200001e8 	.word	0x200001e8
 8000bcc:	200001e4 	.word	0x200001e4
 8000bd0:	58000800 	.word	0x58000800
 8000bd4:	40002800 	.word	0x40002800

08000bd8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000bde:	4b47      	ldr	r3, [pc, #284]	; (8000cfc <RescheduleTimerList+0x124>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bea:	d108      	bne.n	8000bfe <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000bec:	bf00      	nop
 8000bee:	4b44      	ldr	r3, [pc, #272]	; (8000d00 <RescheduleTimerList+0x128>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d1f7      	bne.n	8000bee <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000bfe:	4b40      	ldr	r3, [pc, #256]	; (8000d00 <RescheduleTimerList+0x128>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	4b3e      	ldr	r3, [pc, #248]	; (8000d00 <RescheduleTimerList+0x128>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c10:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c12:	4b3c      	ldr	r3, [pc, #240]	; (8000d04 <RescheduleTimerList+0x12c>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c18:	7bfa      	ldrb	r2, [r7, #15]
 8000c1a:	493b      	ldr	r1, [pc, #236]	; (8000d08 <RescheduleTimerList+0x130>)
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	440b      	add	r3, r1
 8000c26:	3308      	adds	r3, #8
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c2c:	f7ff ff36 	bl	8000a9c <ReturnTimeElapsed>
 8000c30:	4603      	mov	r3, r0
 8000c32:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d205      	bcs.n	8000c48 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c40:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <RescheduleTimerList+0x134>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e04d      	b.n	8000ce4 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	4a31      	ldr	r2, [pc, #196]	; (8000d10 <RescheduleTimerList+0x138>)
 8000c4c:	8812      	ldrh	r2, [r2, #0]
 8000c4e:	b292      	uxth	r2, r2
 8000c50:	4413      	add	r3, r2
 8000c52:	461a      	mov	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d906      	bls.n	8000c68 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c5a:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <RescheduleTimerList+0x138>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <RescheduleTimerList+0x134>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	e03d      	b.n	8000ce4 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c72:	4b26      	ldr	r3, [pc, #152]	; (8000d0c <RescheduleTimerList+0x134>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c78:	e034      	b.n	8000ce4 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c7a:	7bfa      	ldrb	r2, [r7, #15]
 8000c7c:	4922      	ldr	r1, [pc, #136]	; (8000d08 <RescheduleTimerList+0x130>)
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	440b      	add	r3, r1
 8000c88:	3308      	adds	r3, #8
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d20a      	bcs.n	8000ca8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	491c      	ldr	r1, [pc, #112]	; (8000d08 <RescheduleTimerList+0x130>)
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	3308      	adds	r3, #8
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	e013      	b.n	8000cd0 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ca8:	7bfa      	ldrb	r2, [r7, #15]
 8000caa:	4917      	ldr	r1, [pc, #92]	; (8000d08 <RescheduleTimerList+0x130>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	00db      	lsls	r3, r3, #3
 8000cb4:	440b      	add	r3, r1
 8000cb6:	3308      	adds	r3, #8
 8000cb8:	6819      	ldr	r1, [r3, #0]
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	7bfa      	ldrb	r2, [r7, #15]
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	4811      	ldr	r0, [pc, #68]	; (8000d08 <RescheduleTimerList+0x130>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	4403      	add	r3, r0
 8000ccc:	3308      	adds	r3, #8
 8000cce:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	490d      	ldr	r1, [pc, #52]	; (8000d08 <RescheduleTimerList+0x130>)
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3315      	adds	r3, #21
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d1c7      	bne.n	8000c7a <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000cea:	89bb      	ldrh	r3, [r7, #12]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff15 	bl	8000b1c <RestartWakeupCounter>

  return ;
 8000cf2:	bf00      	nop
}
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40002800 	.word	0x40002800
 8000d00:	200001e4 	.word	0x200001e4
 8000d04:	200000d0 	.word	0x200000d0
 8000d08:	20000040 	.word	0x20000040
 8000d0c:	200000d8 	.word	0x200000d8
 8000d10:	200001ec 	.word	0x200001ec

08000d14 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8000d1e:	617b      	str	r3, [r7, #20]
  return(result);
 8000d20:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d28:	4b5f      	ldr	r3, [pc, #380]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	22ca      	movs	r2, #202	; 0xca
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
 8000d32:	4b5d      	ldr	r3, [pc, #372]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2253      	movs	r2, #83	; 0x53
 8000d3a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000d3c:	4b5a      	ldr	r3, [pc, #360]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	4b58      	ldr	r3, [pc, #352]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d4e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d50:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d58:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d5c:	4954      	ldr	r1, [pc, #336]	; (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	330c      	adds	r3, #12
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d172      	bne.n	8000e58 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d72:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d76:	494e      	ldr	r1, [pc, #312]	; (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	440b      	add	r3, r1
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d8a:	4949      	ldr	r1, [pc, #292]	; (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	440b      	add	r3, r1
 8000d96:	3310      	adds	r3, #16
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d9c:	4b45      	ldr	r3, [pc, #276]	; (8000eb4 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d050      	beq.n	8000e48 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000da6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000daa:	4941      	ldr	r1, [pc, #260]	; (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	00db      	lsls	r3, r3, #3
 8000db4:	440b      	add	r3, r1
 8000db6:	330d      	adds	r3, #13
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d126      	bne.n	8000e0e <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000dc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fde4 	bl	8000994 <UnlinkTimer>
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dce:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	f383 8810 	msr	PRIMASK, r3
}
 8000dd6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000dd8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ddc:	4934      	ldr	r1, [pc, #208]	; (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000dde:	4613      	mov	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	4413      	add	r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	440b      	add	r3, r1
 8000de8:	3304      	adds	r3, #4
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fa4e 	bl	8001294 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	22ca      	movs	r2, #202	; 0xca
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
 8000e02:	4b29      	ldr	r3, [pc, #164]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2253      	movs	r2, #83	; 0x53
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24
 8000e0c:	e014      	b.n	8000e38 <HW_TS_RTC_Wakeup_Handler+0x124>
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f383 8810 	msr	PRIMASK, r3
}
 8000e18:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 f9ac 	bl	800117c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	22ca      	movs	r2, #202	; 0xca
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2253      	movs	r2, #83	; 0x53
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	69b8      	ldr	r0, [r7, #24]
 8000e42:	f000 faaf 	bl	80013a4 <HW_TS_RTC_Int_AppNot>
 8000e46:	e025      	b.n	8000e94 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000e48:	f7ff fec6 	bl	8000bd8 <RescheduleTimerList>
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	f383 8810 	msr	PRIMASK, r3
}
 8000e56:	e01d      	b.n	8000e94 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e58:	bf00      	nop
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	f003 0304 	and.w	r3, r3, #4
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0f7      	beq.n	8000e5a <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e7e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000e82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f383 8810 	msr	PRIMASK, r3
}
 8000e92:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	22ff      	movs	r2, #255	; 0xff
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e9e:	bf00      	nop
}
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001e4 	.word	0x200001e4
 8000eac:	200000d0 	.word	0x200000d0
 8000eb0:	20000040 	.word	0x20000040
 8000eb4:	200000d8 	.word	0x200000d8
 8000eb8:	58000800 	.word	0x58000800

08000ebc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000ec8:	4a64      	ldr	r2, [pc, #400]	; (800105c <HW_TS_Init+0x1a0>)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ece:	4b63      	ldr	r3, [pc, #396]	; (800105c <HW_TS_Init+0x1a0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	22ca      	movs	r2, #202	; 0xca
 8000ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8000ed8:	4b60      	ldr	r3, [pc, #384]	; (800105c <HW_TS_Init+0x1a0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2253      	movs	r2, #83	; 0x53
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	; (8001060 <HW_TS_Init+0x1a4>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	4a5e      	ldr	r2, [pc, #376]	; (8001060 <HW_TS_Init+0x1a4>)
 8000ee8:	f043 0320 	orr.w	r3, r3, #32
 8000eec:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000eee:	4b5c      	ldr	r3, [pc, #368]	; (8001060 <HW_TS_Init+0x1a4>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f1c3 0304 	rsb	r3, r3, #4
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	4b58      	ldr	r3, [pc, #352]	; (8001064 <HW_TS_Init+0x1a8>)
 8000f02:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f04:	4b56      	ldr	r3, [pc, #344]	; (8001060 <HW_TS_Init+0x1a4>)
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000f0c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000f10:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	fa92 f2a2 	rbit	r2, r2
 8000f18:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	d101      	bne.n	8000f28 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000f24:	2220      	movs	r2, #32
 8000f26:	e003      	b.n	8000f30 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	fab2 f282 	clz	r2, r2
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	40d3      	lsrs	r3, r2
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	3301      	adds	r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b4b      	ldr	r3, [pc, #300]	; (8001068 <HW_TS_Init+0x1ac>)
 8000f3a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f3c:	4b48      	ldr	r3, [pc, #288]	; (8001060 <HW_TS_Init+0x1a4>)
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b47      	ldr	r3, [pc, #284]	; (800106c <HW_TS_Init+0x1b0>)
 8000f4e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f50:	4b46      	ldr	r3, [pc, #280]	; (800106c <HW_TS_Init+0x1b0>)
 8000f52:	881b      	ldrh	r3, [r3, #0]
 8000f54:	3b01      	subs	r3, #1
 8000f56:	4a44      	ldr	r2, [pc, #272]	; (8001068 <HW_TS_Init+0x1ac>)
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f62:	4a40      	ldr	r2, [pc, #256]	; (8001064 <HW_TS_Init+0x1a8>)
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	40d3      	lsrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d904      	bls.n	8000f7e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f74:	4b3e      	ldr	r3, [pc, #248]	; (8001070 <HW_TS_Init+0x1b4>)
 8000f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7a:	801a      	strh	r2, [r3, #0]
 8000f7c:	e003      	b.n	8000f86 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <HW_TS_Init+0x1b4>)
 8000f84:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f8a:	f7ff fb81 	bl	8000690 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f8e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f92:	f7ff fb69 	bl	8000668 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d143      	bne.n	8001024 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f9c:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HW_TS_Init+0x1b8>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <HW_TS_Init+0x1bc>)
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	77fb      	strb	r3, [r7, #31]
 8000fae:	e00c      	b.n	8000fca <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fb0:	7ffa      	ldrb	r2, [r7, #31]
 8000fb2:	4932      	ldr	r1, [pc, #200]	; (800107c <HW_TS_Init+0x1c0>)
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	4413      	add	r3, r2
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	440b      	add	r3, r1
 8000fbe:	330c      	adds	r3, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fc4:	7ffb      	ldrb	r3, [r7, #31]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	77fb      	strb	r3, [r7, #31]
 8000fca:	7ffb      	ldrb	r3, [r7, #31]
 8000fcc:	2b05      	cmp	r3, #5
 8000fce:	d9ef      	bls.n	8000fb0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HW_TS_Init+0x1c4>)
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <HW_TS_Init+0x1a0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HW_TS_Init+0x1a0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HW_TS_Init+0x1a0>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HW_TS_Init+0x1a0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ffe:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001000:	4b20      	ldr	r3, [pc, #128]	; (8001084 <HW_TS_Init+0x1c8>)
 8001002:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001006:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001008:	2003      	movs	r0, #3
 800100a:	f001 fbce 	bl	80027aa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HW_TS_Init+0x1a0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HW_TS_Init+0x1a0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	e00a      	b.n	800103a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HW_TS_Init+0x1a0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001034:	2003      	movs	r0, #3
 8001036:	f001 fbaa 	bl	800278e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <HW_TS_Init+0x1a0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	22ff      	movs	r2, #255	; 0xff
 8001042:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001044:	2200      	movs	r2, #0
 8001046:	2103      	movs	r1, #3
 8001048:	2003      	movs	r0, #3
 800104a:	f001 fb5e 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800104e:	2003      	movs	r0, #3
 8001050:	f001 fb75 	bl	800273e <HAL_NVIC_EnableIRQ>

  return;
 8001054:	bf00      	nop
}
 8001056:	3720      	adds	r7, #32
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	200001e4 	.word	0x200001e4
 8001060:	40002800 	.word	0x40002800
 8001064:	200001e8 	.word	0x200001e8
 8001068:	200001e9 	.word	0x200001e9
 800106c:	200001ea 	.word	0x200001ea
 8001070:	200001ec 	.word	0x200001ec
 8001074:	200000d8 	.word	0x200000d8
 8001078:	200000d4 	.word	0x200000d4
 800107c:	20000040 	.word	0x20000040
 8001080:	200000d0 	.word	0x200000d0
 8001084:	58000800 	.word	0x58000800

08001088 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001088:	b480      	push	{r7}
 800108a:	b08b      	sub	sp, #44	; 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	4613      	mov	r3, r2
 8001096:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800109e:	f3ef 8310 	mrs	r3, PRIMASK
 80010a2:	61fb      	str	r3, [r7, #28]
  return(result);
 80010a4:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80010a8:	b672      	cpsid	i
}
 80010aa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010ac:	e004      	b.n	80010b8 <HW_TS_Create+0x30>
  {
    loop++;
 80010ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010b2:	3301      	adds	r3, #1
 80010b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d80c      	bhi.n	80010da <HW_TS_Create+0x52>
 80010c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010c4:	492c      	ldr	r1, [pc, #176]	; (8001178 <HW_TS_Create+0xf0>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	330c      	adds	r3, #12
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1e9      	bne.n	80010ae <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d038      	beq.n	8001154 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010e2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010e6:	4924      	ldr	r1, [pc, #144]	; (8001178 <HW_TS_Create+0xf0>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	330c      	adds	r3, #12
 80010f4:	2201      	movs	r2, #1
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	f383 8810 	msr	PRIMASK, r3
}
 8001102:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001104:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001108:	491b      	ldr	r1, [pc, #108]	; (8001178 <HW_TS_Create+0xf0>)
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	440b      	add	r3, r1
 8001114:	3310      	adds	r3, #16
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800111a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800111e:	4916      	ldr	r1, [pc, #88]	; (8001178 <HW_TS_Create+0xf0>)
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	330d      	adds	r3, #13
 800112c:	79fa      	ldrb	r2, [r7, #7]
 800112e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001130:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001134:	4910      	ldr	r1, [pc, #64]	; (8001178 <HW_TS_Create+0xf0>)
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800114a:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 800114c:	2300      	movs	r3, #0
 800114e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001152:	e008      	b.n	8001166 <HW_TS_Create+0xde>
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f383 8810 	msr	PRIMASK, r3
}
 800115e:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8001166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800116a:	4618      	mov	r0, r3
 800116c:	372c      	adds	r7, #44	; 0x2c
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000040 	.word	0x20000040

0800117c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001186:	f3ef 8310 	mrs	r3, PRIMASK
 800118a:	60fb      	str	r3, [r7, #12]
  return(result);
 800118c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800118e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001190:	b672      	cpsid	i
}
 8001192:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001194:	2003      	movs	r0, #3
 8001196:	f001 fae0 	bl	800275a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800119a:	4b38      	ldr	r3, [pc, #224]	; (800127c <HW_TS_Stop+0x100>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	22ca      	movs	r2, #202	; 0xca
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
 80011a4:	4b35      	ldr	r3, [pc, #212]	; (800127c <HW_TS_Stop+0x100>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2253      	movs	r2, #83	; 0x53
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	4933      	ldr	r1, [pc, #204]	; (8001280 <HW_TS_Stop+0x104>)
 80011b2:	4613      	mov	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	440b      	add	r3, r1
 80011bc:	330c      	adds	r3, #12
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d148      	bne.n	8001258 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fbe2 	bl	8000994 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <HW_TS_Stop+0x108>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011d6:	7cfb      	ldrb	r3, [r7, #19]
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d135      	bne.n	8001248 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011dc:	4b2a      	ldr	r3, [pc, #168]	; (8001288 <HW_TS_Stop+0x10c>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e8:	d108      	bne.n	80011fc <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80011ea:	bf00      	nop
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <HW_TS_Stop+0x100>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f7      	bne.n	80011ec <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <HW_TS_Stop+0x100>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	689a      	ldr	r2, [r3, #8]
 8001204:	4b1d      	ldr	r3, [pc, #116]	; (800127c <HW_TS_Stop+0x100>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800120e:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001210:	bf00      	nop
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <HW_TS_Stop+0x100>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0f7      	beq.n	8001212 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <HW_TS_Stop+0x100>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <HW_TS_Stop+0x100>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001236:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <HW_TS_Stop+0x110>)
 800123a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800123e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001240:	2003      	movs	r0, #3
 8001242:	f001 fab2 	bl	80027aa <HAL_NVIC_ClearPendingIRQ>
 8001246:	e007      	b.n	8001258 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HW_TS_Stop+0x114>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	7cfa      	ldrb	r2, [r7, #19]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001254:	f7ff fcc0 	bl	8000bd8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <HW_TS_Stop+0x100>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	22ff      	movs	r2, #255	; 0xff
 8001260:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001262:	2003      	movs	r0, #3
 8001264:	f001 fa6b 	bl	800273e <HAL_NVIC_EnableIRQ>
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f383 8810 	msr	PRIMASK, r3
}
 8001272:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001274:	bf00      	nop
}
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001e4 	.word	0x200001e4
 8001280:	20000040 	.word	0x20000040
 8001284:	200000d0 	.word	0x200000d0
 8001288:	40002800 	.word	0x40002800
 800128c:	58000800 	.word	0x58000800
 8001290:	200000d1 	.word	0x200000d1

08001294 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012a0:	79fa      	ldrb	r2, [r7, #7]
 80012a2:	493c      	ldr	r1, [pc, #240]	; (8001394 <HW_TS_Start+0x100>)
 80012a4:	4613      	mov	r3, r2
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	330c      	adds	r3, #12
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d103      	bne.n	80012c0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff5e 	bl	800117c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012c0:	f3ef 8310 	mrs	r3, PRIMASK
 80012c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80012c6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012ca:	b672      	cpsid	i
}
 80012cc:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012ce:	2003      	movs	r0, #3
 80012d0:	f001 fa43 	bl	800275a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012d4:	4b30      	ldr	r3, [pc, #192]	; (8001398 <HW_TS_Start+0x104>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	22ca      	movs	r2, #202	; 0xca
 80012dc:	625a      	str	r2, [r3, #36]	; 0x24
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HW_TS_Start+0x104>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2253      	movs	r2, #83	; 0x53
 80012e6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012e8:	79fa      	ldrb	r2, [r7, #7]
 80012ea:	492a      	ldr	r1, [pc, #168]	; (8001394 <HW_TS_Start+0x100>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	330c      	adds	r3, #12
 80012f8:	2202      	movs	r2, #2
 80012fa:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	4925      	ldr	r1, [pc, #148]	; (8001394 <HW_TS_Start+0x100>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3308      	adds	r3, #8
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	4920      	ldr	r1, [pc, #128]	; (8001394 <HW_TS_Start+0x100>)
 8001314:	4613      	mov	r3, r2
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	4413      	add	r3, r2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	440b      	add	r3, r1
 800131e:	3304      	adds	r3, #4
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fa8a 	bl	8000840 <linkTimer>
 800132c:	4603      	mov	r3, r0
 800132e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HW_TS_Start+0x108>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HW_TS_Start+0x10c>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	7c7a      	ldrb	r2, [r7, #17]
 800133e:	429a      	cmp	r2, r3
 8001340:	d002      	beq.n	8001348 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001342:	f7ff fc49 	bl	8000bd8 <RescheduleTimerList>
 8001346:	e013      	b.n	8001370 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001348:	79fa      	ldrb	r2, [r7, #7]
 800134a:	4912      	ldr	r1, [pc, #72]	; (8001394 <HW_TS_Start+0x100>)
 800134c:	4613      	mov	r3, r2
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	3308      	adds	r3, #8
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	8a7b      	ldrh	r3, [r7, #18]
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	1ac9      	subs	r1, r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <HW_TS_Start+0x100>)
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4403      	add	r3, r0
 800136c:	3308      	adds	r3, #8
 800136e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HW_TS_Start+0x104>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	22ff      	movs	r2, #255	; 0xff
 8001378:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800137a:	2003      	movs	r0, #3
 800137c:	f001 f9df 	bl	800273e <HAL_NVIC_EnableIRQ>
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	f383 8810 	msr	PRIMASK, r3
}
 800138a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800138c:	bf00      	nop
}
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000040 	.word	0x20000040
 8001398:	200001e4 	.word	0x200001e4
 800139c:	200000d0 	.word	0x200000d0
 80013a0:	200000d1 	.word	0x200000d1

080013a4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	460b      	mov	r3, r1
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4798      	blx	r3

  return;
 80013b6:	bf00      	nop
}
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <LL_PWR_SMPS_Enable>:
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <LL_PWR_SMPS_Enable+0x1c>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <LL_PWR_SMPS_Enable+0x1c>)
 80013ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ce:	61d3      	str	r3, [r2, #28]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	58000400 	.word	0x58000400

080013e0 <LL_PWR_SMPS_SetStartupCurrent>:
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013f0:	4904      	ldr	r1, [pc, #16]	; (8001404 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61cb      	str	r3, [r1, #28]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	58000400 	.word	0x58000400

08001408 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001410:	4b18      	ldr	r3, [pc, #96]	; (8001474 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d108      	bne.n	8001434 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f023 020f 	bic.w	r2, r3, #15
 800142a:	4913      	ldr	r1, [pc, #76]	; (8001478 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4313      	orrs	r3, r2
 8001430:	61cb      	str	r3, [r1, #28]
}
 8001432:	e019      	b.n	8001468 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3b06      	subs	r3, #6
 8001438:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	da02      	bge.n	800144e <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e004      	b.n	8001458 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	dd01      	ble.n	8001458 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001454:	230f      	movs	r3, #15
 8001456:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	f023 020f 	bic.w	r2, r3, #15
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	4905      	ldr	r1, [pc, #20]	; (8001478 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001464:	4313      	orrs	r3, r2
 8001466:	61cb      	str	r3, [r1, #28]
}
 8001468:	bf00      	nop
 800146a:	371c      	adds	r7, #28
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	1fff7558 	.word	0x1fff7558
 8001478:	58000400 	.word	0x58000400

0800147c <LL_EXTI_DisableIT_0_31>:
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001484:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <LL_EXTI_DisableIT_0_31+0x28>)
 8001486:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	43db      	mvns	r3, r3
 800148e:	4905      	ldr	r1, [pc, #20]	; (80014a4 <LL_EXTI_DisableIT_0_31+0x28>)
 8001490:	4013      	ands	r3, r2
 8001492:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	58000800 	.word	0x58000800

080014a8 <LL_EXTI_DisableIT_32_63>:
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <LL_EXTI_DisableIT_32_63+0x28>)
 80014b2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4905      	ldr	r1, [pc, #20]	; (80014d0 <LL_EXTI_DisableIT_32_63+0x28>)
 80014bc:	4013      	ands	r3, r2
 80014be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	58000800 	.word	0x58000800

080014d4 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80014dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80014e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014ee:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	cafecafe 	.word	0xcafecafe

08001510 <LL_RCC_LSE_SetDriveCapability>:
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001520:	f023 0218 	bic.w	r2, r3, #24
 8001524:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001550:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800156a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800156e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001572:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001576:	bf00      	nop
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001594:	d101      	bne.n	800159a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80015aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015ba:	d101      	bne.n	80015c0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_AHB1_GRP1_EnableClock>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015f0:	68fb      	ldr	r3, [r7, #12]
}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_AHB2_GRP1_EnableClock>:
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800160c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4313      	orrs	r3, r2
 8001614:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800161a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001622:	68fb      	ldr	r3, [r7, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_AHB3_GRP1_EnableClock>:
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800163e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4313      	orrs	r3, r2
 8001646:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001654:	68fb      	ldr	r3, [r7, #12]
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
 800166a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	041b      	lsls	r3, r3, #16
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	605a      	str	r2, [r3, #4]
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	431a      	orrs	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	605a      	str	r2, [r3, #4]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	041b      	lsls	r3, r3, #16
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	615a      	str	r2, [r3, #20]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	615a      	str	r2, [r3, #20]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	609a      	str	r2, [r3, #8]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800172c:	4b05      	ldr	r3, [pc, #20]	; (8001744 <LL_LPM_EnableSleep+0x1c>)
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <LL_LPM_EnableSleep+0x1c>)
 8001732:	f023 0304 	bic.w	r3, r3, #4
 8001736:	6113      	str	r3, [r2, #16]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	22ff      	movs	r2, #255	; 0xff
 8001754:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	22ca      	movs	r2, #202	; 0xca
 800176e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2253      	movs	r2, #83	; 0x53
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 0207 	bic.w	r2, r3, #7
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	609a      	str	r2, [r3, #8]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <main+0x54>)
 80017ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017b2:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017b4:	f000 fdd0 	bl	8002358 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80017b8:	f000 fa33 	bl	8001c22 <Reset_Device>
  Config_HSE();
 80017bc:	f000 fa1d 	bl	8001bfa <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c0:	f000 f81e 	bl	8001800 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80017c4:	f000 f8a4 	bl	8001910 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80017c8:	f000 fa10 	bl	8001bec <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80017cc:	f000 fa6b 	bl	8001ca6 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017d0:	f000 f98a 	bl	8001ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017d4:	f000 f96a 	bl	8001aac <MX_DMA_Init>
  MX_RF_Init();
 80017d8:	f000 f8ae 	bl	8001938 <MX_RF_Init>
  MX_RTC_Init();
 80017dc:	f000 f8b4 	bl	8001948 <MX_RTC_Init>
  MX_SPI1_Init();
 80017e0:	f000 f926 	bl	8001a30 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* -1- Initialize LEDs mounted on P-NUCLEO-WB55 board */
  BSP_LED_Init(LED_BLUE);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f000 fc9d 	bl	8002124 <BSP_LED_Init>

  /* -2- Configure External line 4 (connected to PC.04 pin) in interrupt mode */
  EXTI0_IRQHandler_Config();
 80017ea:	f000 f9dd 	bl	8001ba8 <EXTI0_IRQHandler_Config>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80017ee:	f7fe fe51 	bl	8000494 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80017f2:	f04f 30ff 	mov.w	r0, #4294967295
 80017f6:	f007 f8d5 	bl	80089a4 <UTIL_SEQ_Run>
 80017fa:	e7fa      	b.n	80017f2 <main+0x4a>
 80017fc:	58004000 	.word	0x58004000

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b0ae      	sub	sp, #184	; 0xb8
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800180a:	2248      	movs	r2, #72	; 0x48
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f007 fb16 	bl	8008e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	615a      	str	r2, [r3, #20]
 8001826:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2250      	movs	r2, #80	; 0x50
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f007 fb06 	bl	8008e40 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001834:	f001 fb98 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fe69 	bl	8001510 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183e:	4b33      	ldr	r3, [pc, #204]	; (800190c <SystemClock_Config+0x10c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001846:	4a31      	ldr	r2, [pc, #196]	; (800190c <SystemClock_Config+0x10c>)
 8001848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b2f      	ldr	r3, [pc, #188]	; (800190c <SystemClock_Config+0x10c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800185a:	2307      	movs	r3, #7
 800185c:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800185e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001862:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001864:	2301      	movs	r3, #1
 8001866:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800186e:	2340      	movs	r3, #64	; 0x40
 8001870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001874:	2300      	movs	r3, #0
 8001876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800187a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800187e:	4618      	mov	r0, r3
 8001880:	f001 feee 	bl	8003660 <HAL_RCC_OscConfig>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800188a:	f000 fa3d 	bl	8001d08 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800188e:	236f      	movs	r3, #111	; 0x6f
 8001890:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001892:	2302      	movs	r3, #2
 8001894:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ae:	2101      	movs	r1, #1
 80018b0:	4618      	mov	r0, r3
 80018b2:	f002 fa61 	bl	8003d78 <HAL_RCC_ClockConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018bc:	f000 fa24 	bl	8001d08 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80018c0:	f643 0303 	movw	r3, #14339	; 0x3803
 80018c4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018d2:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80018d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018d8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80018da:	2302      	movs	r3, #2
 80018dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018de:	2310      	movs	r3, #16
 80018e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fe5c 	bl	80045a2 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80018f0:	f000 fa0a 	bl	8001d08 <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fd73 	bl	80013e0 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80018fa:	2004      	movs	r0, #4
 80018fc:	f7ff fd84 	bl	8001408 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001900:	f7ff fd5e 	bl	80013c0 <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 8001904:	bf00      	nop
 8001906:	37b8      	adds	r7, #184	; 0xb8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	58000400 	.word	0x58000400

08001910 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_IPCC_Init+0x20>)
 8001916:	4a07      	ldr	r2, [pc, #28]	; (8001934 <MX_IPCC_Init+0x24>)
 8001918:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_IPCC_Init+0x20>)
 800191c:	f001 fa9e 	bl	8002e5c <HAL_IPCC_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001926:	f000 f9ef 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000314 	.word	0x20000314
 8001934:	58000c00 	.word	0x58000c00

08001938 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800195c:	2300      	movs	r3, #0
 800195e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <MX_RTC_Init+0xe0>)
 8001962:	4a32      	ldr	r2, [pc, #200]	; (8001a2c <MX_RTC_Init+0xe4>)
 8001964:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <MX_RTC_Init+0xe0>)
 8001968:	2200      	movs	r2, #0
 800196a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <MX_RTC_Init+0xe0>)
 800196e:	220f      	movs	r2, #15
 8001970:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001972:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <MX_RTC_Init+0xe0>)
 8001974:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001978:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800197a:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <MX_RTC_Init+0xe0>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001980:	4b29      	ldr	r3, [pc, #164]	; (8001a28 <MX_RTC_Init+0xe0>)
 8001982:	2200      	movs	r2, #0
 8001984:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001986:	4b28      	ldr	r3, [pc, #160]	; (8001a28 <MX_RTC_Init+0xe0>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800198c:	4b26      	ldr	r3, [pc, #152]	; (8001a28 <MX_RTC_Init+0xe0>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001992:	4825      	ldr	r0, [pc, #148]	; (8001a28 <MX_RTC_Init+0xe0>)
 8001994:	f003 f88c 	bl	8004ab0 <HAL_RTC_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800199e:	f000 f9b3 	bl	8001d08 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 80019a2:	2309      	movs	r3, #9
 80019a4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x43;
 80019a6:	2343      	movs	r3, #67	; 0x43
 80019a8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2201      	movs	r2, #1
 80019be:	4619      	mov	r1, r3
 80019c0:	4819      	ldr	r0, [pc, #100]	; (8001a28 <MX_RTC_Init+0xe0>)
 80019c2:	f003 f913 	bl	8004bec <HAL_RTC_SetTime>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 80019cc:	f000 f99c 	bl	8001d08 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80019d0:	2307      	movs	r3, #7
 80019d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 80019d4:	2305      	movs	r3, #5
 80019d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x9;
 80019d8:	2309      	movs	r3, #9
 80019da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80019dc:	2300      	movs	r3, #0
 80019de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019e0:	463b      	mov	r3, r7
 80019e2:	2201      	movs	r2, #1
 80019e4:	4619      	mov	r1, r3
 80019e6:	4810      	ldr	r0, [pc, #64]	; (8001a28 <MX_RTC_Init+0xe0>)
 80019e8:	f003 f9c4 	bl	8004d74 <HAL_RTC_SetDate>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80019f2:	f000 f989 	bl	8001d08 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80019f6:	2200      	movs	r2, #0
 80019f8:	2100      	movs	r1, #0
 80019fa:	480b      	ldr	r0, [pc, #44]	; (8001a28 <MX_RTC_Init+0xe0>)
 80019fc:	f003 fb82 	bl	8005104 <HAL_RTCEx_SetWakeUpTimer>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8001a06:	f000 f97f 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001a0a:	4808      	ldr	r0, [pc, #32]	; (8001a2c <MX_RTC_Init+0xe4>)
 8001a0c:	f7ff fea9 	bl	8001762 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001a10:	2100      	movs	r1, #0
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <MX_RTC_Init+0xe4>)
 8001a14:	f7ff feb5 	bl	8001782 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_RTC_Init+0xe4>)
 8001a1a:	f7ff fe95 	bl	8001748 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200004d0 	.word	0x200004d0
 8001a2c:	40002800 	.word	0x40002800

08001a30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <MX_SPI1_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a48:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a4a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001a62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a7e:	2207      	movs	r2, #7
 8001a80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_SPI1_Init+0x74>)
 8001a90:	f003 fc09 	bl	80052a6 <HAL_SPI_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 f935 	bl	8001d08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000554 	.word	0x20000554
 8001aa8:	40013000 	.word	0x40013000

08001aac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001ab0:	2004      	movs	r0, #4
 8001ab2:	f7ff fd8b 	bl	80015cc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ab6:	2001      	movs	r0, #1
 8001ab8:	f7ff fd88 	bl	80015cc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001abc:	2002      	movs	r0, #2
 8001abe:	f7ff fd85 	bl	80015cc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	200e      	movs	r0, #14
 8001ac8:	f000 fe1f 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001acc:	200e      	movs	r0, #14
 8001ace:	f000 fe36 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	203a      	movs	r0, #58	; 0x3a
 8001ad8:	f000 fe17 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001adc:	203a      	movs	r0, #58	; 0x3a
 8001ade:	f000 fe2e 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afc:	2004      	movs	r0, #4
 8001afe:	f7ff fd7e 	bl	80015fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2001      	movs	r0, #1
 8001b04:	f7ff fd7b 	bl	80015fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b08:	2002      	movs	r0, #2
 8001b0a:	f7ff fd78 	bl	80015fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b0e:	2008      	movs	r0, #8
 8001b10:	f7ff fd75 	bl	80015fe <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001b14:	2200      	movs	r2, #0
 8001b16:	f247 0123 	movw	r1, #28707	; 0x7023
 8001b1a:	481f      	ldr	r0, [pc, #124]	; (8001b98 <MX_GPIO_Init+0xb0>)
 8001b1c:	f001 f930 	bl	8002d80 <HAL_GPIO_WritePin>
                          |LED2_BR_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_SW1_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin;
 8001b20:	2310      	movs	r3, #16
 8001b22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_GPIO_Init+0xb4>)
 8001b26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW1_GPIO_Port, &GPIO_InitStruct);
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	4619      	mov	r1, r3
 8001b30:	481b      	ldr	r0, [pc, #108]	; (8001ba0 <MX_GPIO_Init+0xb8>)
 8001b32:	f000 ffb5 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED3_BR_Pin LED1_BR_Pin
                           LED2_BR_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001b36:	f247 0323 	movw	r3, #28707	; 0x7023
 8001b3a:	607b      	str	r3, [r7, #4]
                          |LED2_BR_Pin|LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4812      	ldr	r0, [pc, #72]	; (8001b98 <MX_GPIO_Init+0xb0>)
 8001b4e:	f000 ffa7 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_BR_Pin */
  GPIO_InitStruct.Pin = SW1_BR_Pin;
 8001b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b58:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <MX_GPIO_Init+0xb4>)
 8001b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_BR_GPIO_Port, &GPIO_InitStruct);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <MX_GPIO_Init+0xb8>)
 8001b66:	f000 ff9b 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <MX_GPIO_Init+0xb4>)
 8001b70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480a      	ldr	r0, [pc, #40]	; (8001ba4 <MX_GPIO_Init+0xbc>)
 8001b7c:	f000 ff90 	bl	8002aa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2006      	movs	r0, #6
 8001b86:	f000 fdc0 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b8a:	2006      	movs	r0, #6
 8001b8c:	f000 fdd7 	bl	800273e <HAL_NVIC_EnableIRQ>

}
 8001b90:	bf00      	nop
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	10210000 	.word	0x10210000
 8001ba0:	48000800 	.word	0x48000800
 8001ba4:	48000c00 	.word	0x48000c00

08001ba8 <EXTI0_IRQHandler_Config>:
  * @brief  Configures EXTI line 0 (connected to PD.0 pin) in interrupt mode
  * @param  None
  * @retval None
  */
static void EXTI0_IRQHandler_Config(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;


  /* Enable GPIOC clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bae:	2008      	movs	r0, #8
 8001bb0:	f7ff fd25 	bl	80015fe <LL_AHB2_GRP1_EnableClock>

  /* Configure PD.0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <EXTI0_IRQHandler_Config+0x3c>)
 8001bb6:	60bb      	str	r3, [r7, #8]

  GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = GPIO_PIN_0;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <EXTI0_IRQHandler_Config+0x40>)
 8001bc6:	f000 ff6b 	bl	8002aa0 <HAL_GPIO_Init>


  /* Enable and set line 0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2102      	movs	r1, #2
 8001bce:	2006      	movs	r0, #6
 8001bd0:	f000 fd9b 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bd4:	2006      	movs	r0, #6
 8001bd6:	f000 fdb2 	bl	800273e <HAL_NVIC_EnableIRQ>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	10210000 	.word	0x10210000
 8001be8:	48000c00 	.word	0x48000c00

08001bec <PeriphClock_Config>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */

void PeriphClock_Config(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001bf0:	bf00      	nop
}
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f005 f85f 	bl	8006cc4 <OTP_Read>
 8001c06:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	799b      	ldrb	r3, [r3, #6]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fc5e 	bl	80014d4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
}  
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <Reset_Device>:


static void Reset_Device( void )
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001c26:	f000 f827 	bl	8001c78 <Reset_BackupDomain>

	Reset_IPCC();
 8001c2a:	f000 f803 	bl	8001c34 <Reset_IPCC>
#endif

	return;
 8001c2e:	bf00      	nop
}
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001c38:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001c3c:	f7ff fcf8 	bl	8001630 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001c40:	213f      	movs	r1, #63	; 0x3f
 8001c42:	480c      	ldr	r0, [pc, #48]	; (8001c74 <Reset_IPCC+0x40>)
 8001c44:	f7ff fd53 	bl	80016ee <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001c48:	213f      	movs	r1, #63	; 0x3f
 8001c4a:	480a      	ldr	r0, [pc, #40]	; (8001c74 <Reset_IPCC+0x40>)
 8001c4c:	f7ff fd5d 	bl	800170a <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001c50:	213f      	movs	r1, #63	; 0x3f
 8001c52:	4808      	ldr	r0, [pc, #32]	; (8001c74 <Reset_IPCC+0x40>)
 8001c54:	f7ff fd05 	bl	8001662 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001c58:	213f      	movs	r1, #63	; 0x3f
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <Reset_IPCC+0x40>)
 8001c5c:	f7ff fd24 	bl	80016a8 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001c60:	213f      	movs	r1, #63	; 0x3f
 8001c62:	4804      	ldr	r0, [pc, #16]	; (8001c74 <Reset_IPCC+0x40>)
 8001c64:	f7ff fd0f 	bl	8001686 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001c68:	213f      	movs	r1, #63	; 0x3f
 8001c6a:	4802      	ldr	r0, [pc, #8]	; (8001c74 <Reset_IPCC+0x40>)
 8001c6c:	f7ff fd2e 	bl	80016cc <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001c70:	bf00      	nop
}
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	58000c00 	.word	0x58000c00

08001c78 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001c7c:	f7ff fc80 	bl	8001580 <LL_RCC_IsActiveFlag_PINRST>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00d      	beq.n	8001ca2 <Reset_BackupDomain+0x2a>
 8001c86:	f7ff fc8e 	bl	80015a6 <LL_RCC_IsActiveFlag_SFTRST>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d108      	bne.n	8001ca2 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001c90:	f001 f96a 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001c94:	f001 f968 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001c98:	f7ff fc50 	bl	800153c <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001c9c:	f7ff fc5f 	bl	800155e <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
}
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <Init_Exti>:

static void Init_Exti( void )
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001caa:	f04f 30ff 	mov.w	r0, #4294967295
 8001cae:	f7ff fbe5 	bl	800147c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001cb2:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001cb6:	f7ff fbf7 	bl	80014a8 <LL_EXTI_DisableIT_32_63>

  return;
 8001cba:	bf00      	nop
}
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b084      	sub	sp, #16
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cc6:	f000 fbb5 	bl	8002434 <HAL_GetTick>
 8001cca:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cd6:	d00a      	beq.n	8001cee <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001cd8:	f000 fbc4 	bl	8002464 <HAL_GetTickFreq>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ce6:	e002      	b.n	8001cee <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ce8:	f7ff fd1e 	bl	8001728 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001cec:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001cee:	f000 fba1 	bl	8002434 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d8f4      	bhi.n	8001ce8 <HAL_Delay+0x2a>
  }
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <LL_RCC_SetRTCClockSource>:
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_RCC_EnableRTC>:
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d5a:	bf00      	nop
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_AHB2_GRP1_EnableClock>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_AHB3_GRP1_EnableClock>:
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_APB1_GRP1_EnableClock>:
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <LL_APB2_GRP1_EnableClock>:
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001e30:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e34:	f7ff ffaf 	bl	8001d96 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	202e      	movs	r0, #46	; 0x2e
 8001e3e:	f000 fc64 	bl	800270a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e42:	202e      	movs	r0, #46	; 0x2e
 8001e44:	f000 fc7b 	bl	800273e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_IPCC_MspInit+0x44>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d113      	bne.n	8001e86 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e62:	f7ff ff98 	bl	8001d96 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	202c      	movs	r0, #44	; 0x2c
 8001e6c:	f000 fc4d 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e70:	202c      	movs	r0, #44	; 0x2c
 8001e72:	f000 fc64 	bl	800273e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	202d      	movs	r0, #45	; 0x2d
 8001e7c:	f000 fc45 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e80:	202d      	movs	r0, #45	; 0x2d
 8001e82:	f000 fc5c 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	58000c00 	.word	0x58000c00

08001e94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_RTC_MspInit+0x3c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d110      	bne.n	8001ec8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001ea6:	f001 f85f 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8001eaa:	f001 f85d 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8001eae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001eb2:	f7ff ff30 	bl	8001d16 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001eb6:	f7ff ff44 	bl	8001d42 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001eba:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ebe:	f7ff ff83 	bl	8001dc8 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f003 f9b9 	bl	800523a <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40002800 	.word	0x40002800

08001ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_SPI_MspInit+0x5c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d117      	bne.n	8001f26 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ef6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001efa:	f7ff ff7e 	bl	8001dfa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	2001      	movs	r0, #1
 8001f00:	f7ff ff30 	bl	8001d64 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f04:	23f0      	movs	r3, #240	; 0xf0
 8001f06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f14:	2305      	movs	r3, #5
 8001f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f22:	f000 fdbd 	bl	8002aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40013000 	.word	0x40013000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MemManage_Handler+0x4>

08001f4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <BusFault_Handler+0x4>

08001f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <UsageFault_Handler+0x4>

08001f5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f6c:	bf00      	nop
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f88:	f000 fa40 	bl	800240c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f000 ff25 	bl	8002de4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <DMA1_Channel4_IRQHandler+0x10>)
 8001fa6:	f000 fccc 	bl	8002942 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200004f4 	.word	0x200004f4

08001fb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <USART1_IRQHandler+0x10>)
 8001fba:	f003 fa17 	bl	80053ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000440 	.word	0x20000440

08001fc8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <LPUART1_IRQHandler+0x10>)
 8001fce:	f003 fa0d 	bl	80053ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000350 	.word	0x20000350

08001fdc <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001fe0:	f006 fb4a 	bl	8008678 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001fec:	f006 fb7c 	bl	80086e8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001ff8:	f000 ff0c 	bl	8002e14 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <DMA2_Channel4_IRQHandler+0x10>)
 8002006:	f000 fc9c 	bl	8002942 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	200003e0 	.word	0x200003e0

08002014 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002018:	2010      	movs	r0, #16
 800201a:	f000 fee3 	bl	8002de4 <HAL_GPIO_EXTI_IRQHandler>
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}

08002022 <RTC_WKUP_IRQHandler>:
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
}

void RTC_WKUP_IRQHandler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002026:	f7fe fe75 	bl	8000d14 <HW_TS_RTC_Wakeup_Handler>
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <TAMP_STAMP_LSECSS_IRQHandler>:

/**
  * @brief This function handles RTC tamper and time stamp, CSS on LSE interrupts through EXTI line 18.
  */
void TAMP_STAMP_LSECSS_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_IRQn 0 */
  HAL_RTCEx_TamperTimeStampIRQHandler(&hrtc);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <TAMP_STAMP_LSECSS_IRQHandler+0x10>)
 8002036:	f002 ffbb 	bl	8004fb0 <HAL_RTCEx_TamperTimeStampIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200004d0 	.word	0x200004d0

08002044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002048:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <SystemInit+0xa0>)
 800204a:	2200      	movs	r2, #0
 800204c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800204e:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <SystemInit+0xa0>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <SystemInit+0xa0>)
 8002056:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800205a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800206e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002072:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002076:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <SystemInit+0xa4>)
 8002084:	4013      	ands	r3, r2
 8002086:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002094:	f023 0305 	bic.w	r3, r3, #5
 8002098:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80020b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <SystemInit+0xa8>)
 80020b6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <SystemInit+0xa8>)
 80020be:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00
 80020e8:	faf6fefb 	.word	0xfaf6fefb
 80020ec:	22041000 	.word	0x22041000

080020f0 <LL_AHB2_GRP1_EnableClock>:
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002114:	68fb      	ldr	r3, [r7, #12]
}
 8002116:	bf00      	nop
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800213e:	2002      	movs	r0, #2
 8002140:	f7ff ffd6 	bl	80020f0 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	4a12      	ldr	r2, [pc, #72]	; (8002190 <BSP_LED_Init+0x6c>)
 8002148:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800214c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214e:	2301      	movs	r3, #1
 8002150:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002156:	2302      	movs	r3, #2
 8002158:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	4a0d      	ldr	r2, [pc, #52]	; (8002194 <BSP_LED_Init+0x70>)
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	f107 020c 	add.w	r2, r7, #12
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f000 fc99 	bl	8002aa0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	4a08      	ldr	r2, [pc, #32]	; (8002194 <BSP_LED_Init+0x70>)
 8002172:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	4a05      	ldr	r2, [pc, #20]	; (8002190 <BSP_LED_Init+0x6c>)
 800217a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800217e:	2200      	movs	r2, #0
 8002180:	4619      	mov	r1, r3
 8002182:	f000 fdfd 	bl	8002d80 <HAL_GPIO_WritePin>
}
 8002186:	bf00      	nop
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	08009078 	.word	0x08009078
 8002194:	20000008 	.word	0x20000008

08002198 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	4a07      	ldr	r2, [pc, #28]	; (80021c4 <BSP_LED_On+0x2c>)
 80021a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	4a06      	ldr	r2, [pc, #24]	; (80021c8 <BSP_LED_On+0x30>)
 80021ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021b2:	2201      	movs	r2, #1
 80021b4:	4619      	mov	r1, r3
 80021b6:	f000 fde3 	bl	8002d80 <HAL_GPIO_WritePin>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000008 	.word	0x20000008
 80021c8:	08009078 	.word	0x08009078

080021cc <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <BSP_LED_Off+0x2c>)
 80021da:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <BSP_LED_Off+0x30>)
 80021e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021e6:	2200      	movs	r2, #0
 80021e8:	4619      	mov	r1, r3
 80021ea:	f000 fdc9 	bl	8002d80 <HAL_GPIO_WritePin>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000008 	.word	0x20000008
 80021fc:	08009078 	.word	0x08009078

08002200 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <BSP_LED_Toggle+0x2c>)
 800220e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	4906      	ldr	r1, [pc, #24]	; (8002230 <BSP_LED_Toggle+0x30>)
 8002216:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800221a:	4619      	mov	r1, r3
 800221c:	4610      	mov	r0, r2
 800221e:	f000 fdc7 	bl	8002db0 <HAL_GPIO_TogglePin>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000008 	.word	0x20000008
 8002230:	08009078 	.word	0x08009078

08002234 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <BSP_PB_Init+0x2e>
 800225a:	2004      	movs	r0, #4
 800225c:	f7ff ff48 	bl	80020f0 <LL_AHB2_GRP1_EnableClock>
 8002260:	e00c      	b.n	800227c <BSP_PB_Init+0x48>
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d103      	bne.n	8002270 <BSP_PB_Init+0x3c>
 8002268:	2008      	movs	r0, #8
 800226a:	f7ff ff41 	bl	80020f0 <LL_AHB2_GRP1_EnableClock>
 800226e:	e005      	b.n	800227c <BSP_PB_Init+0x48>
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d102      	bne.n	800227c <BSP_PB_Init+0x48>
 8002276:	2008      	movs	r0, #8
 8002278:	f7ff ff3a 	bl	80020f0 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d117      	bne.n	80022b2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4a20      	ldr	r2, [pc, #128]	; (8002308 <BSP_PB_Init+0xd4>)
 8002286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800228a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800228c:	2300      	movs	r3, #0
 800228e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002290:	2301      	movs	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4a1c      	ldr	r2, [pc, #112]	; (800230c <BSP_PB_Init+0xd8>)
 800229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a0:	f107 020c 	add.w	r2, r7, #12
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fbfa 	bl	8002aa0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80022ac:	2001      	movs	r0, #1
 80022ae:	f7ff fd06 	bl	8001cbe <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80022b2:	79bb      	ldrb	r3, [r7, #6]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d122      	bne.n	80022fe <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	4a13      	ldr	r2, [pc, #76]	; (8002308 <BSP_PB_Init+0xd4>)
 80022bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022c0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80022c2:	2301      	movs	r3, #1
 80022c4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <BSP_PB_Init+0xdc>)
 80022c8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4a0f      	ldr	r2, [pc, #60]	; (800230c <BSP_PB_Init+0xd8>)
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	f107 020c 	add.w	r2, r7, #12
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fbe1 	bl	8002aa0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4a0c      	ldr	r2, [pc, #48]	; (8002314 <BSP_PB_Init+0xe0>)
 80022e2:	5cd3      	ldrb	r3, [r2, r3]
 80022e4:	b25b      	sxtb	r3, r3
 80022e6:	2200      	movs	r2, #0
 80022e8:	210f      	movs	r1, #15
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fa0d 	bl	800270a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80022f0:	79fb      	ldrb	r3, [r7, #7]
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <BSP_PB_Init+0xe0>)
 80022f4:	5cd3      	ldrb	r3, [r2, r3]
 80022f6:	b25b      	sxtb	r3, r3
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fa20 	bl	800273e <HAL_NVIC_EnableIRQ>
  }
}
 80022fe:	bf00      	nop
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	08009080 	.word	0x08009080
 800230c:	20000014 	.word	0x20000014
 8002310:	10210000 	.word	0x10210000
 8002314:	08009088 	.word	0x08009088

08002318 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6053      	str	r3, [r2, #4]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e0042000 	.word	0xe0042000

08002338 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002342:	f043 0302 	orr.w	r3, r3, #2
 8002346:	6053      	str	r3, [r2, #4]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e0042000 	.word	0xe0042000

08002358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002362:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_Init+0x3c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a0b      	ldr	r2, [pc, #44]	; (8002394 <HAL_Init+0x3c>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236e:	2003      	movs	r0, #3
 8002370:	f000 f9c0 	bl	80026f4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002374:	2000      	movs	r0, #0
 8002376:	f000 f80f 	bl	8002398 <HAL_InitTick>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	71fb      	strb	r3, [r7, #7]
 8002384:	e001      	b.n	800238a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002386:	f7ff fd51 	bl	8001e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800238a:	79fb      	ldrb	r3, [r7, #7]
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	58004000 	.word	0x58004000

08002398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <HAL_InitTick+0x6c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d024      	beq.n	80023f6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023ac:	f001 fe90 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <HAL_InitTick+0x6c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	4619      	mov	r1, r3
 80023b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f9d6 	bl	8002776 <HAL_SYSTICK_Config>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10f      	bne.n	80023f0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b0f      	cmp	r3, #15
 80023d4:	d809      	bhi.n	80023ea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d6:	2200      	movs	r2, #0
 80023d8:	6879      	ldr	r1, [r7, #4]
 80023da:	f04f 30ff 	mov.w	r0, #4294967295
 80023de:	f000 f994 	bl	800270a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <HAL_InitTick+0x70>)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	e007      	b.n	80023fa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e004      	b.n	80023fa <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
 80023f4:	e001      	b.n	80023fa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000024 	.word	0x20000024
 8002408:	20000020 	.word	0x20000020

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000024 	.word	0x20000024
 8002430:	200005b8 	.word	0x200005b8

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200005b8 	.word	0x200005b8

0800244c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_GetTickPrio+0x14>)
 8002452:	681b      	ldr	r3, [r3, #0]
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	20000020 	.word	0x20000020

08002464 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_GetTickFreq+0x14>)
 800246a:	781b      	ldrb	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	20000024 	.word	0x20000024

0800247c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002480:	f7ff ff4a 	bl	8002318 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800248c:	f7ff ff54 	bl	8002338 <LL_DBGMCU_EnableDBGStopMode>
}
 8002490:	bf00      	nop
 8002492:	bd80      	pop	{r7, pc}

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	2b00      	cmp	r3, #0
 8002544:	db12      	blt.n	800256c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	f003 021f 	and.w	r2, r3, #31
 800254c:	490a      	ldr	r1, [pc, #40]	; (8002578 <__NVIC_DisableIRQ+0x44>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	2001      	movs	r0, #1
 8002556:	fa00 f202 	lsl.w	r2, r0, r2
 800255a:	3320      	adds	r3, #32
 800255c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002560:	f3bf 8f4f 	dsb	sy
}
 8002564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002566:	f3bf 8f6f 	isb	sy
}
 800256a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000e100 	.word	0xe000e100

0800257c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0c      	blt.n	80025a8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <__NVIC_SetPendingIRQ+0x38>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	3340      	adds	r3, #64	; 0x40
 80025a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	db0c      	blt.n	80025e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	f003 021f 	and.w	r2, r3, #31
 80025d0:	4907      	ldr	r1, [pc, #28]	; (80025f0 <__NVIC_ClearPendingIRQ+0x38>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	095b      	lsrs	r3, r3, #5
 80025d8:	2001      	movs	r0, #1
 80025da:	fa00 f202 	lsl.w	r2, r0, r2
 80025de:	3360      	adds	r3, #96	; 0x60
 80025e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	6039      	str	r1, [r7, #0]
 80025fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002604:	2b00      	cmp	r3, #0
 8002606:	db0a      	blt.n	800261e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	490c      	ldr	r1, [pc, #48]	; (8002640 <__NVIC_SetPriority+0x4c>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	0112      	lsls	r2, r2, #4
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	440b      	add	r3, r1
 8002618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800261c:	e00a      	b.n	8002634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	b2da      	uxtb	r2, r3
 8002622:	4908      	ldr	r1, [pc, #32]	; (8002644 <__NVIC_SetPriority+0x50>)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	3b04      	subs	r3, #4
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	440b      	add	r3, r1
 8002632:	761a      	strb	r2, [r3, #24]
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000e100 	.word	0xe000e100
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002648:	b480      	push	{r7}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	2b04      	cmp	r3, #4
 8002664:	bf28      	it	cs
 8002666:	2304      	movcs	r3, #4
 8002668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3304      	adds	r3, #4
 800266e:	2b06      	cmp	r3, #6
 8002670:	d902      	bls.n	8002678 <NVIC_EncodePriority+0x30>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3b03      	subs	r3, #3
 8002676:	e000      	b.n	800267a <NVIC_EncodePriority+0x32>
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	f04f 32ff 	mov.w	r2, #4294967295
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43da      	mvns	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	401a      	ands	r2, r3
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002690:	f04f 31ff 	mov.w	r1, #4294967295
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	43d9      	mvns	r1, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a0:	4313      	orrs	r3, r2
         );
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3724      	adds	r7, #36	; 0x24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c0:	d301      	bcc.n	80026c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c2:	2301      	movs	r3, #1
 80026c4:	e00f      	b.n	80026e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c6:	4a0a      	ldr	r2, [pc, #40]	; (80026f0 <SysTick_Config+0x40>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ce:	210f      	movs	r1, #15
 80026d0:	f04f 30ff 	mov.w	r0, #4294967295
 80026d4:	f7ff ff8e 	bl	80025f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d8:	4b05      	ldr	r3, [pc, #20]	; (80026f0 <SysTick_Config+0x40>)
 80026da:	2200      	movs	r2, #0
 80026dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026de:	4b04      	ldr	r3, [pc, #16]	; (80026f0 <SysTick_Config+0x40>)
 80026e0:	2207      	movs	r2, #7
 80026e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	e000e010 	.word	0xe000e010

080026f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fec9 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b086      	sub	sp, #24
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	60b9      	str	r1, [r7, #8]
 8002714:	607a      	str	r2, [r7, #4]
 8002716:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff fee0 	bl	80024dc <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff90 	bl	8002648 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5f 	bl	80025f4 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fed3 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fee3 	bl	8002534 <__NVIC_DisableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ff96 	bl	80026b0 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	4603      	mov	r3, r0
 8002796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff feed 	bl	800257c <__NVIC_SetPendingIRQ>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	4603      	mov	r3, r0
 80027b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80027b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fefd 	bl	80025b8 <__NVIC_ClearPendingIRQ>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e04f      	b.n	8002878 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d008      	beq.n	80027f6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2204      	movs	r2, #4
 80027e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e040      	b.n	8002878 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 020e 	bic.w	r2, r2, #14
 8002804:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002810:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002814:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f003 021c 	and.w	r2, r3, #28
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002842:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00c      	beq.n	8002866 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800285a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002864:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d005      	beq.n	80028a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2204      	movs	r2, #4
 80028a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
 80028a6:	e047      	b.n	8002938 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 020e 	bic.w	r2, r2, #14
 80028b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f003 021c 	and.w	r2, r3, #28
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	2101      	movs	r1, #1
 80028e6:	fa01 f202 	lsl.w	r2, r1, r2
 80028ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80028f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002908:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800290c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002916:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	4798      	blx	r3
    }
  }
  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f003 031c 	and.w	r3, r3, #28
 8002962:	2204      	movs	r2, #4
 8002964:	409a      	lsls	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d026      	beq.n	80029bc <HAL_DMA_IRQHandler+0x7a>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	d021      	beq.n	80029bc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d107      	bne.n	8002996 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0204 	bic.w	r2, r2, #4
 8002994:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f003 021c 	and.w	r2, r3, #28
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2104      	movs	r1, #4
 80029a4:	fa01 f202 	lsl.w	r2, r1, r2
 80029a8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d071      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029ba:	e06c      	b.n	8002a96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f003 031c 	and.w	r3, r3, #28
 80029c4:	2202      	movs	r2, #2
 80029c6:	409a      	lsls	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4013      	ands	r3, r2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d02e      	beq.n	8002a2e <HAL_DMA_IRQHandler+0xec>
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d029      	beq.n	8002a2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 020a 	bic.w	r2, r2, #10
 80029f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a04:	f003 021c 	and.w	r2, r3, #28
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d038      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a2c:	e033      	b.n	8002a96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f003 031c 	and.w	r3, r3, #28
 8002a36:	2208      	movs	r2, #8
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d02a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x156>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d025      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 020e 	bic.w	r2, r2, #14
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a60:	f003 021c 	and.w	r2, r3, #28
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2201      	movs	r2, #1
 8002a7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d004      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a96:	bf00      	nop
 8002a98:	bf00      	nop
}
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aae:	e14c      	b.n	8002d4a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 813e 	beq.w	8002d44 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d00b      	beq.n	8002ae8 <HAL_GPIO_Init+0x48>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d007      	beq.n	8002ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002adc:	2b11      	cmp	r3, #17
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b12      	cmp	r3, #18
 8002ae6:	d130      	bne.n	8002b4a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b1e:	2201      	movs	r2, #1
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 0201 	and.w	r2, r3, #1
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	2203      	movs	r2, #3
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0xea>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d123      	bne.n	8002bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	08da      	lsrs	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3208      	adds	r2, #8
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8098 	beq.w	8002d44 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c14:	4a54      	ldr	r2, [pc, #336]	; (8002d68 <HAL_GPIO_Init+0x2c8>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c3e:	d019      	beq.n	8002c74 <HAL_GPIO_Init+0x1d4>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d013      	beq.n	8002c70 <HAL_GPIO_Init+0x1d0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a49      	ldr	r2, [pc, #292]	; (8002d70 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00d      	beq.n	8002c6c <HAL_GPIO_Init+0x1cc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a48      	ldr	r2, [pc, #288]	; (8002d74 <HAL_GPIO_Init+0x2d4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <HAL_GPIO_Init+0x1c8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a47      	ldr	r2, [pc, #284]	; (8002d78 <HAL_GPIO_Init+0x2d8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_GPIO_Init+0x1c4>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e008      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c64:	2307      	movs	r3, #7
 8002c66:	e006      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e004      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_GPIO_Init+0x1d6>
 8002c74:	2300      	movs	r3, #0
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	f002 0203 	and.w	r2, r2, #3
 8002c7c:	0092      	lsls	r2, r2, #2
 8002c7e:	4093      	lsls	r3, r2
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c86:	4938      	ldr	r1, [pc, #224]	; (8002d68 <HAL_GPIO_Init+0x2c8>)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c94:	4b39      	ldr	r3, [pc, #228]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cba:	4a30      	ldr	r2, [pc, #192]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002cc2:	4b2e      	ldr	r3, [pc, #184]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce8:	4a24      	ldr	r2, [pc, #144]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cf0:	4b22      	ldr	r3, [pc, #136]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4013      	ands	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	; (8002d7c <HAL_GPIO_Init+0x2dc>)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3301      	adds	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f47f aeab 	bne.w	8002ab0 <HAL_GPIO_Init+0x10>
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	48000400 	.word	0x48000400
 8002d70:	48000800 	.word	0x48000800
 8002d74:	48000c00 	.word	0x48000c00
 8002d78:	48001000 	.word	0x48001000
 8002d7c:	58000800 	.word	0x58000800

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d9c:	e002      	b.n	8002da4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d9e:	887a      	ldrh	r2, [r7, #2]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	041a      	lsls	r2, r3, #16
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	43d9      	mvns	r1, r3
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	400b      	ands	r3, r1
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dfa:	4a05      	ldr	r2, [pc, #20]	; (8002e10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e00:	88fb      	ldrh	r3, [r7, #6]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fc0f 	bl	8000626 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	58000800 	.word	0x58000800

08002e14 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_HSEM_IRQHandler+0x30>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <HAL_HSEM_IRQHandler+0x30>)
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	43db      	mvns	r3, r3
 8002e28:	4906      	ldr	r1, [pc, #24]	; (8002e44 <HAL_HSEM_IRQHandler+0x30>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002e2e:	4a05      	ldr	r2, [pc, #20]	; (8002e44 <HAL_HSEM_IRQHandler+0x30>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f807 	bl	8002e48 <HAL_HSEM_FreeCallback>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	58001500 	.word	0x58001500

08002e48 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d01e      	beq.n	8002eac <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002e6e:	4b13      	ldr	r3, [pc, #76]	; (8002ebc <HAL_IPCC_Init+0x60>)
 8002e70:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe ffe4 	bl	8001e4c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002e84:	68b8      	ldr	r0, [r7, #8]
 8002e86:	f000 f85b 	bl	8002f40 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f82c 	bl	8002ef4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002eaa:	e001      	b.n	8002eb0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	58000c00 	.word	0x58000c00

08002ec0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	e00f      	b.n	8002f22 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <IPCC_SetDefaultCallbacks+0x44>)
 8002f0c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3306      	adds	r3, #6
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <IPCC_SetDefaultCallbacks+0x48>)
 8002f1a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	d9ec      	bls.n	8002f02 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	08002ec1 	.word	0x08002ec1
 8002f3c:	08002edb 	.word	0x08002edb

08002f40 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002f54:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	223f      	movs	r2, #63	; 0x3f
 8002f5a:	609a      	str	r2, [r3, #8]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f76:	6013      	str	r3, [r2, #0]
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	58000400 	.word	0x58000400

08002f88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	58000400 	.word	0x58000400

08002fa4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb6:	d101      	bne.n	8002fbc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e000      	b.n	8002fbe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <LL_RCC_HSE_Enable>:
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fda:	6013      	str	r3, [r2, #0]
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_RCC_HSE_Disable>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <LL_RCC_HSE_IsReady>:
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003016:	d101      	bne.n	800301c <LL_RCC_HSE_IsReady+0x18>
 8003018:	2301      	movs	r3, #1
 800301a:	e000      	b.n	800301e <LL_RCC_HSE_IsReady+0x1a>
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <LL_RCC_HSI_Enable>:
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800302c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303a:	6013      	str	r3, [r2, #0]
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_HSI_Disable>:
{
 8003046:	b480      	push	{r7}
 8003048:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	6013      	str	r3, [r2, #0]
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <LL_RCC_HSI_IsReady>:
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003076:	d101      	bne.n	800307c <LL_RCC_HSI_IsReady+0x18>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <LL_RCC_HSI_IsReady+0x1a>
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_RCC_HSI48_Enable>:
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80030b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <LL_RCC_HSI48_Disable>:
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_RCC_HSI48_IsReady>:
{
 80030f6:	b480      	push	{r7}
 80030f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80030fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d101      	bne.n	800310e <LL_RCC_HSI48_IsReady+0x18>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <LL_RCC_HSI48_IsReady+0x1a>
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_RCC_LSE_Enable>:
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <LL_RCC_LSE_Disable>:
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003148:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800314c:	f023 0301 	bic.w	r3, r3, #1
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003154:	bf00      	nop
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_RCC_LSE_EnableBypass>:
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800316e:	f043 0304 	orr.w	r3, r3, #4
 8003172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <LL_RCC_LSE_DisableBypass>:
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003198:	bf00      	nop
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_RCC_LSE_IsReady>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d101      	bne.n	80031ba <LL_RCC_LSE_IsReady+0x18>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <LL_RCC_LSE_IsReady+0x1a>
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_RCC_LSI1_Enable>:
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_RCC_LSI1_Disable>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80031ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_RCC_LSI1_IsReady>:
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	d101      	bne.n	8003222 <LL_RCC_LSI1_IsReady+0x18>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <LL_RCC_LSI1_IsReady+0x1a>
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_RCC_LSI2_Enable>:
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003246:	bf00      	nop
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <LL_RCC_LSI2_Disable>:
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003260:	f023 0304 	bic.w	r3, r3, #4
 8003264:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <LL_RCC_LSI2_IsReady>:
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b08      	cmp	r3, #8
 8003284:	d101      	bne.n	800328a <LL_RCC_LSI2_IsReady+0x18>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <LL_RCC_LSI2_IsReady+0x1a>
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_RCC_LSI2_SetTrimming>:
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_RCC_MSI_Enable>:
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6013      	str	r3, [r2, #0]
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <LL_RCC_MSI_Disable>:
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80032e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	6013      	str	r3, [r2, #0]
}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <LL_RCC_MSI_IsReady>:
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b02      	cmp	r3, #2
 8003310:	d101      	bne.n	8003316 <LL_RCC_MSI_IsReady+0x16>
 8003312:	2301      	movs	r3, #1
 8003314:	e000      	b.n	8003318 <LL_RCC_MSI_IsReady+0x18>
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <LL_RCC_MSI_SetRange>:
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800332a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4313      	orrs	r3, r2
 800333c:	600b      	str	r3, [r1, #0]
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <LL_RCC_MSI_GetRange>:
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800335a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2bb0      	cmp	r3, #176	; 0xb0
 8003360:	d901      	bls.n	8003366 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003362:	23b0      	movs	r3, #176	; 0xb0
 8003364:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003366:	687b      	ldr	r3, [r7, #4]
}
 8003368:	4618      	mov	r0, r3
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800337c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338e:	4313      	orrs	r3, r2
 8003390:	604b      	str	r3, [r1, #4]
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <LL_RCC_SetSysClkSource>:
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 0203 	bic.w	r2, r3, #3
 80033b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <LL_RCC_GetSysClkSource>:
{
 80033c6:	b480      	push	{r7}
 80033c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f003 030c 	and.w	r3, r3, #12
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_RCC_SetAHBPrescaler>:
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80033e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800340e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003412:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003416:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <LL_RCC_SetAHB4Prescaler>:
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800343a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003442:	f023 020f 	bic.w	r2, r3, #15
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	091b      	lsrs	r3, r3, #4
 800344a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_RCC_SetAPB1Prescaler>:
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003472:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4313      	orrs	r3, r2
 800347a:	608b      	str	r3, [r1, #8]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <LL_RCC_SetAPB2Prescaler>:
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800349a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	608b      	str	r3, [r1, #8]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_RCC_GetAHBPrescaler>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80034b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_RCC_GetAHB4Prescaler>:
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_RCC_PLL_Enable>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80034e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr

08003502 <LL_RCC_PLL_Disable>:
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003510:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003514:	6013      	str	r3, [r2, #0]
}
 8003516:	bf00      	nop
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <LL_RCC_PLL_IsReady>:
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800352e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003532:	d101      	bne.n	8003538 <LL_RCC_PLL_IsReady+0x18>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <LL_RCC_PLL_IsReady+0x1a>
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <LL_RCC_PLL_GetN>:
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_RCC_PLL_GetR>:
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_RCC_PLL_GetDivider>:
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_RCC_PLL_GetMainSource>:
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f003 0303 	and.w	r3, r3, #3
}
 800359c:	4618      	mov	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_RCC_IsActiveFlag_HPRE>:
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b8:	d101      	bne.n	80035be <LL_RCC_IsActiveFlag_HPRE+0x18>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035de:	d101      	bne.n	80035e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80035f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d101      	bne.n	800360a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003616:	b480      	push	{r7}
 8003618:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800361a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003628:	d101      	bne.n	800362e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003648:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800364c:	d101      	bne.n	8003652 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b08d      	sub	sp, #52	; 0x34
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e37e      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8092 	beq.w	80037a4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003680:	f7ff fea1 	bl	80033c6 <LL_RCC_GetSysClkSource>
 8003684:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003686:	f7ff ff82 	bl	800358e <LL_RCC_PLL_GetMainSource>
 800368a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x3e>
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	2b0c      	cmp	r3, #12
 8003696:	d14c      	bne.n	8003732 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369a:	2b01      	cmp	r3, #1
 800369c:	d149      	bne.n	8003732 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800369e:	f7ff fe2f 	bl	8003300 <LL_RCC_MSI_IsReady>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_RCC_OscConfig+0x54>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e35d      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80036b8:	f7ff fe47 	bl	800334a <LL_RCC_MSI_GetRange>
 80036bc:	4603      	mov	r3, r0
 80036be:	429c      	cmp	r4, r3
 80036c0:	d914      	bls.n	80036ec <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fd16 	bl	80040f8 <RCC_SetFlashLatencyFromMSIRange>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e34c      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fe21 	bl	8003322 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fe45 	bl	8003374 <LL_RCC_MSI_SetCalibTrimming>
 80036ea:	e013      	b.n	8003714 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fe16 	bl	8003322 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fe3a 	bl	8003374 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fcf7 	bl	80040f8 <RCC_SetFlashLatencyFromMSIRange>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e32d      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003714:	f000 fcdc 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8003718:	4603      	mov	r3, r0
 800371a:	4ab3      	ldr	r2, [pc, #716]	; (80039e8 <HAL_RCC_OscConfig+0x388>)
 800371c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800371e:	4bb3      	ldr	r3, [pc, #716]	; (80039ec <HAL_RCC_OscConfig+0x38c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fe38 	bl	8002398 <HAL_InitTick>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d039      	beq.n	80037a2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e31e      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01e      	beq.n	8003778 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800373a:	f7ff fdc3 	bl	80032c4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800373e:	f7fe fe79 	bl	8002434 <HAL_GetTick>
 8003742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003746:	f7fe fe75 	bl	8002434 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e30b      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003758:	f7ff fdd2 	bl	8003300 <LL_RCC_MSI_IsReady>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f1      	beq.n	8003746 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fddb 	bl	8003322 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fdff 	bl	8003374 <LL_RCC_MSI_SetCalibTrimming>
 8003776:	e015      	b.n	80037a4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003778:	f7ff fdb3 	bl	80032e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800377c:	f7fe fe5a 	bl	8002434 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003784:	f7fe fe56 	bl	8002434 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e2ec      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003796:	f7ff fdb3 	bl	8003300 <LL_RCC_MSI_IsReady>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f1      	bne.n	8003784 <HAL_RCC_OscConfig+0x124>
 80037a0:	e000      	b.n	80037a4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d04e      	beq.n	800384e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b0:	f7ff fe09 	bl	80033c6 <LL_RCC_GetSysClkSource>
 80037b4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037b6:	f7ff feea 	bl	800358e <LL_RCC_PLL_GetMainSource>
 80037ba:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x16e>
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	2b0c      	cmp	r3, #12
 80037c6:	d10d      	bne.n	80037e4 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d10a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ce:	f7ff fc19 	bl	8003004 <LL_RCC_HSE_IsReady>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d039      	beq.n	800384c <HAL_RCC_OscConfig+0x1ec>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d135      	bne.n	800384c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e2c5      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ec:	d102      	bne.n	80037f4 <HAL_RCC_OscConfig+0x194>
 80037ee:	f7ff fbeb 	bl	8002fc8 <LL_RCC_HSE_Enable>
 80037f2:	e001      	b.n	80037f8 <HAL_RCC_OscConfig+0x198>
 80037f4:	f7ff fbf7 	bl	8002fe6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d012      	beq.n	8003826 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fe fe18 	bl	8002434 <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003808:	f7fe fe14 	bl	8002434 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b64      	cmp	r3, #100	; 0x64
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e2aa      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800381a:	f7ff fbf3 	bl	8003004 <LL_RCC_HSE_IsReady>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f1      	beq.n	8003808 <HAL_RCC_OscConfig+0x1a8>
 8003824:	e013      	b.n	800384e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fe fe05 	bl	8002434 <HAL_GetTick>
 800382a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800382c:	e008      	b.n	8003840 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800382e:	f7fe fe01 	bl	8002434 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b64      	cmp	r3, #100	; 0x64
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e297      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003840:	f7ff fbe0 	bl	8003004 <LL_RCC_HSE_IsReady>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f1      	bne.n	800382e <HAL_RCC_OscConfig+0x1ce>
 800384a:	e000      	b.n	800384e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d051      	beq.n	80038fe <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800385a:	f7ff fdb4 	bl	80033c6 <LL_RCC_GetSysClkSource>
 800385e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003860:	f7ff fe95 	bl	800358e <LL_RCC_PLL_GetMainSource>
 8003864:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b04      	cmp	r3, #4
 800386a:	d005      	beq.n	8003878 <HAL_RCC_OscConfig+0x218>
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	2b0c      	cmp	r3, #12
 8003870:	d113      	bne.n	800389a <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b02      	cmp	r3, #2
 8003876:	d110      	bne.n	800389a <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003878:	f7ff fbf4 	bl	8003064 <LL_RCC_HSI_IsReady>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x22e>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e270      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fbf8 	bl	8003088 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003898:	e031      	b.n	80038fe <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d019      	beq.n	80038d6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038a2:	f7ff fbc1 	bl	8003028 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fe fdc5 	bl	8002434 <HAL_GetTick>
 80038aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ae:	f7fe fdc1 	bl	8002434 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e257      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80038c0:	f7ff fbd0 	bl	8003064 <LL_RCC_HSI_IsReady>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0f1      	beq.n	80038ae <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff fbda 	bl	8003088 <LL_RCC_HSI_SetCalibTrimming>
 80038d4:	e013      	b.n	80038fe <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d6:	f7ff fbb6 	bl	8003046 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038da:	f7fe fdab 	bl	8002434 <HAL_GetTick>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e2:	f7fe fda7 	bl	8002434 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e23d      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80038f4:	f7ff fbb6 	bl	8003064 <LL_RCC_HSI_IsReady>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f1      	bne.n	80038e2 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80a3 	beq.w	8003a5e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d076      	beq.n	8003a0e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d046      	beq.n	80039ba <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800392c:	f7ff fc6d 	bl	800320a <LL_RCC_LSI1_IsReady>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d113      	bne.n	800395e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003936:	f7ff fc46 	bl	80031c6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800393a:	f7fe fd7b 	bl	8002434 <HAL_GetTick>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003942:	f7fe fd77 	bl	8002434 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e20d      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003954:	f7ff fc59 	bl	800320a <LL_RCC_LSI1_IsReady>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f1      	beq.n	8003942 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800395e:	f7ff fc66 	bl	800322e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fe fd67 	bl	8002434 <HAL_GetTick>
 8003966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003968:	e008      	b.n	800397c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800396a:	f7fe fd63 	bl	8002434 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b03      	cmp	r3, #3
 8003976:	d901      	bls.n	800397c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e1f9      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800397c:	f7ff fc79 	bl	8003272 <LL_RCC_LSI2_IsReady>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f1      	beq.n	800396a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fc83 	bl	8003296 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003990:	f7ff fc2a 	bl	80031e8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7fe fd4e 	bl	8002434 <HAL_GetTick>
 8003998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800399c:	f7fe fd4a 	bl	8002434 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e1e0      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80039ae:	f7ff fc2c 	bl	800320a <LL_RCC_LSI1_IsReady>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f1      	bne.n	800399c <HAL_RCC_OscConfig+0x33c>
 80039b8:	e051      	b.n	8003a5e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80039ba:	f7ff fc04 	bl	80031c6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039be:	f7fe fd39 	bl	8002434 <HAL_GetTick>
 80039c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80039c6:	f7fe fd35 	bl	8002434 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e1cb      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80039d8:	f7ff fc17 	bl	800320a <LL_RCC_LSI1_IsReady>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f1      	beq.n	80039c6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80039e2:	f7ff fc35 	bl	8003250 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80039e6:	e00c      	b.n	8003a02 <HAL_RCC_OscConfig+0x3a2>
 80039e8:	20000004 	.word	0x20000004
 80039ec:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80039f0:	f7fe fd20 	bl	8002434 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b03      	cmp	r3, #3
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1b6      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003a02:	f7ff fc36 	bl	8003272 <LL_RCC_LSI2_IsReady>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f1      	bne.n	80039f0 <HAL_RCC_OscConfig+0x390>
 8003a0c:	e027      	b.n	8003a5e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003a0e:	f7ff fc1f 	bl	8003250 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a12:	f7fe fd0f 	bl	8002434 <HAL_GetTick>
 8003a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a1a:	f7fe fd0b 	bl	8002434 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e1a1      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003a2c:	f7ff fc21 	bl	8003272 <LL_RCC_LSI2_IsReady>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1f1      	bne.n	8003a1a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003a36:	f7ff fbd7 	bl	80031e8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3a:	f7fe fcfb 	bl	8002434 <HAL_GetTick>
 8003a3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a42:	f7fe fcf7 	bl	8002434 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e18d      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a54:	f7ff fbd9 	bl	800320a <LL_RCC_LSI1_IsReady>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f1      	bne.n	8003a42 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d05b      	beq.n	8003b22 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a6a:	4bb5      	ldr	r3, [pc, #724]	; (8003d40 <HAL_RCC_OscConfig+0x6e0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d114      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003a76:	f7ff fa77 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a7a:	f7fe fcdb 	bl	8002434 <HAL_GetTick>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a80:	e008      	b.n	8003a94 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a82:	f7fe fcd7 	bl	8002434 <HAL_GetTick>
 8003a86:	4602      	mov	r2, r0
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	1ad3      	subs	r3, r2, r3
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e16d      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a94:	4baa      	ldr	r3, [pc, #680]	; (8003d40 <HAL_RCC_OscConfig+0x6e0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0f0      	beq.n	8003a82 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_OscConfig+0x44e>
 8003aa8:	f7ff fb37 	bl	800311a <LL_RCC_LSE_Enable>
 8003aac:	e00c      	b.n	8003ac8 <HAL_RCC_OscConfig+0x468>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d104      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x460>
 8003ab6:	f7ff fb52 	bl	800315e <LL_RCC_LSE_EnableBypass>
 8003aba:	f7ff fb2e 	bl	800311a <LL_RCC_LSE_Enable>
 8003abe:	e003      	b.n	8003ac8 <HAL_RCC_OscConfig+0x468>
 8003ac0:	f7ff fb3c 	bl	800313c <LL_RCC_LSE_Disable>
 8003ac4:	f7ff fb5c 	bl	8003180 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d014      	beq.n	8003afa <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fe fcb0 	bl	8002434 <HAL_GetTick>
 8003ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad8:	f7fe fcac 	bl	8002434 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e140      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003aee:	f7ff fb58 	bl	80031a2 <LL_RCC_LSE_IsReady>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ef      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x478>
 8003af8:	e013      	b.n	8003b22 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afa:	f7fe fc9b 	bl	8002434 <HAL_GetTick>
 8003afe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b00:	e00a      	b.n	8003b18 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b02:	f7fe fc97 	bl	8002434 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e12b      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003b18:	f7ff fb43 	bl	80031a2 <LL_RCC_LSE_IsReady>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1ef      	bne.n	8003b02 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d02c      	beq.n	8003b88 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d014      	beq.n	8003b60 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b36:	f7ff fabc 	bl	80030b2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3a:	f7fe fc7b 	bl	8002434 <HAL_GetTick>
 8003b3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b42:	f7fe fc77 	bl	8002434 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e10d      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003b54:	f7ff facf 	bl	80030f6 <LL_RCC_HSI48_IsReady>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f1      	beq.n	8003b42 <HAL_RCC_OscConfig+0x4e2>
 8003b5e:	e013      	b.n	8003b88 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b60:	f7ff fab8 	bl	80030d4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fe fc66 	bl	8002434 <HAL_GetTick>
 8003b68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6c:	f7fe fc62 	bl	8002434 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0f8      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003b7e:	f7ff faba 	bl	80030f6 <LL_RCC_HSI48_IsReady>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f1      	bne.n	8003b6c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80ee 	beq.w	8003d6e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b92:	f7ff fc18 	bl	80033c6 <LL_RCC_GetSysClkSource>
 8003b96:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	f040 80af 	bne.w	8003d08 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f003 0203 	and.w	r2, r3, #3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d123      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d11c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d114      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d10d      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d05d      	beq.n	8003cbc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d058      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e0ab      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c18:	f7ff fc73 	bl	8003502 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c1c:	f7fe fc0a 	bl	8002434 <HAL_GetTick>
 8003c20:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c24:	f7fe fc06 	bl	8002434 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e09c      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ef      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	4b3e      	ldr	r3, [pc, #248]	; (8003d44 <HAL_RCC_OscConfig+0x6e4>)
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c56:	4311      	orrs	r1, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c5c:	0212      	lsls	r2, r2, #8
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c6a:	4311      	orrs	r1, r2
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c70:	430a      	orrs	r2, r1
 8003c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c7a:	f7ff fc33 	bl	80034e4 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c8e:	f7fe fbd1 	bl	8002434 <HAL_GetTick>
 8003c92:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fe fbcd 	bl	8002434 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e063      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ef      	beq.n	8003c96 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb6:	e05a      	b.n	8003d6e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e059      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d151      	bne.n	8003d6e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cca:	f7ff fc0b 	bl	80034e4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cde:	f7fe fba9 	bl	8002434 <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce6:	f7fe fba5 	bl	8002434 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e03b      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ef      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x686>
 8003d06:	e032      	b.n	8003d6e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b0c      	cmp	r3, #12
 8003d0c:	d02d      	beq.n	8003d6a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d0e:	f7ff fbf8 	bl	8003502 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d1c:	f023 0303 	bic.w	r3, r3, #3
 8003d20:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d2c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fe fb7d 	bl	8002434 <HAL_GetTick>
 8003d3a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d3c:	e00d      	b.n	8003d5a <HAL_RCC_OscConfig+0x6fa>
 8003d3e:	bf00      	nop
 8003d40:	58000400 	.word	0x58000400
 8003d44:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d48:	f7fe fb74 	bl	8002434 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1ef      	bne.n	8003d48 <HAL_RCC_OscConfig+0x6e8>
 8003d68:	e001      	b.n	8003d6e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3734      	adds	r7, #52	; 0x34
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd90      	pop	{r4, r7, pc}

08003d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e12d      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b98      	ldr	r3, [pc, #608]	; (8003ff0 <HAL_RCC_ClockConfig+0x278>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d91b      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b95      	ldr	r3, [pc, #596]	; (8003ff0 <HAL_RCC_ClockConfig+0x278>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f023 0207 	bic.w	r2, r3, #7
 8003da2:	4993      	ldr	r1, [pc, #588]	; (8003ff0 <HAL_RCC_ClockConfig+0x278>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003daa:	f7fe fb43 	bl	8002434 <HAL_GetTick>
 8003dae:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003db2:	f7fe fb3f 	bl	8002434 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e111      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ff0 <HAL_RCC_ClockConfig+0x278>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	683a      	ldr	r2, [r7, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d1ef      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d016      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fafb 	bl	80033de <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003de8:	f7fe fb24 	bl	8002434 <HAL_GetTick>
 8003dec:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003df0:	f7fe fb20 	bl	8002434 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e0f2      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003e02:	f7ff fbd0 	bl	80035a6 <LL_RCC_IsActiveFlag_HPRE>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f1      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d016      	beq.n	8003e46 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff faf2 	bl	8003406 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e22:	f7fe fb07 	bl	8002434 <HAL_GetTick>
 8003e26:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e2a:	f7fe fb03 	bl	8002434 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e0d5      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003e3c:	f7ff fbc5 	bl	80035ca <LL_RCC_IsActiveFlag_C2HPRE>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f1      	beq.n	8003e2a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff faeb 	bl	8003432 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e5c:	f7fe faea 	bl	8002434 <HAL_GetTick>
 8003e60:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e64:	f7fe fae6 	bl	8002434 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e0b8      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003e76:	f7ff fbbb 	bl	80035f0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f1      	beq.n	8003e64 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0304 	and.w	r3, r3, #4
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d016      	beq.n	8003eba <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fae5 	bl	8003460 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e96:	f7fe facd 	bl	8002434 <HAL_GetTick>
 8003e9a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e9e:	f7fe fac9 	bl	8002434 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e09b      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003eb0:	f7ff fbb1 	bl	8003616 <LL_RCC_IsActiveFlag_PPRE1>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f1      	beq.n	8003e9e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d017      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fadb 	bl	8003488 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ed2:	f7fe faaf 	bl	8002434 <HAL_GetTick>
 8003ed6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003eda:	f7fe faab 	bl	8002434 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e07d      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003eec:	f7ff fba5 	bl	800363a <LL_RCC_IsActiveFlag_PPRE2>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f1      	beq.n	8003eda <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d043      	beq.n	8003f8a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d106      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003f0a:	f7ff f87b 	bl	8003004 <LL_RCC_HSE_IsReady>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d11e      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e067      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b03      	cmp	r3, #3
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003f20:	f7ff fafe 	bl	8003520 <LL_RCC_PLL_IsReady>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e05c      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003f36:	f7ff f9e3 	bl	8003300 <LL_RCC_MSI_IsReady>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d108      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e051      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003f44:	f7ff f88e 	bl	8003064 <LL_RCC_HSI_IsReady>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e04a      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fa21 	bl	800339e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5c:	f7fe fa6a 	bl	8002434 <HAL_GetTick>
 8003f60:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f64:	f7fe fa66 	bl	8002434 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e036      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	f7ff fa24 	bl	80033c6 <LL_RCC_GetSysClkSource>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d1ec      	bne.n	8003f64 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <HAL_RCC_ClockConfig+0x278>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d21b      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_RCC_ClockConfig+0x278>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f023 0207 	bic.w	r2, r3, #7
 8003fa0:	4913      	ldr	r1, [pc, #76]	; (8003ff0 <HAL_RCC_ClockConfig+0x278>)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa8:	f7fe fa44 	bl	8002434 <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003fb0:	f7fe fa40 	bl	8002434 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e012      	b.n	8003fe8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <HAL_RCC_ClockConfig+0x278>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d1ef      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fd0:	f000 f87e 	bl	80040d0 <HAL_RCC_GetHCLKFreq>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <HAL_RCC_ClockConfig+0x27c>)
 8003fd8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003fda:	f7fe fa37 	bl	800244c <HAL_GetTickPrio>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe f9d9 	bl	8002398 <HAL_InitTick>
 8003fe6:	4603      	mov	r3, r0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	58004000 	.word	0x58004000
 8003ff4:	20000004 	.word	0x20000004

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ffe:	f7ff f9e2 	bl	80033c6 <LL_RCC_GetSysClkSource>
 8004002:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800400a:	f7ff f99e 	bl	800334a <LL_RCC_MSI_GetRange>
 800400e:	4603      	mov	r3, r0
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	4a2b      	ldr	r2, [pc, #172]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	e04b      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b04      	cmp	r3, #4
 8004024:	d102      	bne.n	800402c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004026:	4b28      	ldr	r3, [pc, #160]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e045      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b08      	cmp	r3, #8
 8004030:	d10a      	bne.n	8004048 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004032:	f7fe ffb7 	bl	8002fa4 <LL_RCC_HSE_IsEnabledDiv2>
 8004036:	4603      	mov	r3, r0
 8004038:	2b01      	cmp	r3, #1
 800403a:	d102      	bne.n	8004042 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800403c:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e03a      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	e037      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004048:	f7ff faa1 	bl	800358e <LL_RCC_PLL_GetMainSource>
 800404c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d003      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x64>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d003      	beq.n	8004062 <HAL_RCC_GetSysClockFreq+0x6a>
 800405a:	e00d      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800405c:	4b1a      	ldr	r3, [pc, #104]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800405e:	60bb      	str	r3, [r7, #8]
        break;
 8004060:	e015      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004062:	f7fe ff9f 	bl	8002fa4 <LL_RCC_HSE_IsEnabledDiv2>
 8004066:	4603      	mov	r3, r0
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800406c:	4b16      	ldr	r3, [pc, #88]	; (80040c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800406e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004070:	e00d      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004074:	60bb      	str	r3, [r7, #8]
        break;
 8004076:	e00a      	b.n	800408e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004078:	f7ff f967 	bl	800334a <LL_RCC_MSI_GetRange>
 800407c:	4603      	mov	r3, r0
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408a:	60bb      	str	r3, [r7, #8]
        break;
 800408c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800408e:	f7ff fa59 	bl	8003544 <LL_RCC_PLL_GetN>
 8004092:	4602      	mov	r2, r0
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	fb03 f402 	mul.w	r4, r3, r2
 800409a:	f7ff fa6c 	bl	8003576 <LL_RCC_PLL_GetDivider>
 800409e:	4603      	mov	r3, r0
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	3301      	adds	r3, #1
 80040a4:	fbb4 f4f3 	udiv	r4, r4, r3
 80040a8:	f7ff fa59 	bl	800355e <LL_RCC_PLL_GetR>
 80040ac:	4603      	mov	r3, r0
 80040ae:	0f5b      	lsrs	r3, r3, #29
 80040b0:	3301      	adds	r3, #1
 80040b2:	fbb4 f3f3 	udiv	r3, r4, r3
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	08009038 	.word	0x08009038
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	01e84800 	.word	0x01e84800

080040d0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d0:	b598      	push	{r3, r4, r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80040d4:	f7ff ff90 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 80040d8:	4604      	mov	r4, r0
 80040da:	f7ff f9e9 	bl	80034b0 <LL_RCC_GetAHBPrescaler>
 80040de:	4603      	mov	r3, r0
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	4a03      	ldr	r2, [pc, #12]	; (80040f4 <HAL_RCC_GetHCLKFreq+0x24>)
 80040e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	bd98      	pop	{r3, r4, r7, pc}
 80040f4:	08008ff8 	.word	0x08008ff8

080040f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80040f8:	b590      	push	{r4, r7, lr}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2bb0      	cmp	r3, #176	; 0xb0
 8004104:	d903      	bls.n	800410e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004106:	4b15      	ldr	r3, [pc, #84]	; (800415c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	e007      	b.n	800411e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	091b      	lsrs	r3, r3, #4
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	4a11      	ldr	r2, [pc, #68]	; (800415c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800411e:	f7ff f9d3 	bl	80034c8 <LL_RCC_GetAHB4Prescaler>
 8004122:	4603      	mov	r3, r0
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	4a0d      	ldr	r2, [pc, #52]	; (8004160 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800412c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4a0a      	ldr	r2, [pc, #40]	; (8004164 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	0c9c      	lsrs	r4, r3, #18
 8004142:	f7fe ff21 	bl	8002f88 <HAL_PWREx_GetVoltageRange>
 8004146:	4603      	mov	r3, r0
 8004148:	4619      	mov	r1, r3
 800414a:	4620      	mov	r0, r4
 800414c:	f000 f80c 	bl	8004168 <RCC_SetFlashLatency>
 8004150:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bd90      	pop	{r4, r7, pc}
 800415a:	bf00      	nop
 800415c:	08009038 	.word	0x08009038
 8004160:	08008ff8 	.word	0x08008ff8
 8004164:	431bde83 	.word	0x431bde83

08004168 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004168:	b590      	push	{r4, r7, lr}
 800416a:	b093      	sub	sp, #76	; 0x4c
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <RCC_SetFlashLatency+0xf0>)
 8004174:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004178:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800417a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800417e:	4a37      	ldr	r2, [pc, #220]	; (800425c <RCC_SetFlashLatency+0xf4>)
 8004180:	f107 031c 	add.w	r3, r7, #28
 8004184:	ca07      	ldmia	r2, {r0, r1, r2}
 8004186:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800418a:	4b35      	ldr	r3, [pc, #212]	; (8004260 <RCC_SetFlashLatency+0xf8>)
 800418c:	f107 040c 	add.w	r4, r7, #12
 8004190:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004192:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004196:	2300      	movs	r3, #0
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a0:	d11c      	bne.n	80041dc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80041a2:	2300      	movs	r3, #0
 80041a4:	643b      	str	r3, [r7, #64]	; 0x40
 80041a6:	e015      	b.n	80041d4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80041a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041b0:	4413      	add	r3, r2
 80041b2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d808      	bhi.n	80041ce <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80041bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041c4:	4413      	add	r3, r2
 80041c6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80041ca:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80041cc:	e022      	b.n	8004214 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80041ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d0:	3301      	adds	r3, #1
 80041d2:	643b      	str	r3, [r7, #64]	; 0x40
 80041d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d9e6      	bls.n	80041a8 <RCC_SetFlashLatency+0x40>
 80041da:	e01b      	b.n	8004214 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80041dc:	2300      	movs	r3, #0
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e0:	e015      	b.n	800420e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041ea:	4413      	add	r3, r2
 80041ec:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d808      	bhi.n	8004208 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041fe:	4413      	add	r3, r2
 8004200:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004204:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004206:	e005      	b.n	8004214 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420a:	3301      	adds	r3, #1
 800420c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004210:	2b02      	cmp	r3, #2
 8004212:	d9e6      	bls.n	80041e2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004214:	4b13      	ldr	r3, [pc, #76]	; (8004264 <RCC_SetFlashLatency+0xfc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 0207 	bic.w	r2, r3, #7
 800421c:	4911      	ldr	r1, [pc, #68]	; (8004264 <RCC_SetFlashLatency+0xfc>)
 800421e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004224:	f7fe f906 	bl	8002434 <HAL_GetTick>
 8004228:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800422a:	e008      	b.n	800423e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800422c:	f7fe f902 	bl	8002434 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e007      	b.n	800424e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <RCC_SetFlashLatency+0xfc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004248:	429a      	cmp	r2, r3
 800424a:	d1ef      	bne.n	800422c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	374c      	adds	r7, #76	; 0x4c
 8004252:	46bd      	mov	sp, r7
 8004254:	bd90      	pop	{r4, r7, pc}
 8004256:	bf00      	nop
 8004258:	08008e84 	.word	0x08008e84
 800425c:	08008e94 	.word	0x08008e94
 8004260:	08008ea0 	.word	0x08008ea0
 8004264:	58004000 	.word	0x58004000

08004268 <LL_RCC_LSE_IsEnabled>:
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <LL_RCC_LSE_IsEnabled+0x18>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <LL_RCC_LSE_IsEnabled+0x1a>
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_RCC_LSE_IsReady>:
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b02      	cmp	r3, #2
 800429e:	d101      	bne.n	80042a4 <LL_RCC_LSE_IsReady+0x18>
 80042a0:	2301      	movs	r3, #1
 80042a2:	e000      	b.n	80042a6 <LL_RCC_LSE_IsReady+0x1a>
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <LL_RCC_SetRFWKPClockSource>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80042b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <LL_RCC_SetSMPSClockSource>:
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_RCC_SetSMPSPrescaler>:
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800430c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4313      	orrs	r3, r2
 800431e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <LL_RCC_SetUSARTClockSource>:
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433c:	f023 0203 	bic.w	r2, r3, #3
 8004340:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_RCC_SetLPUARTClockSource>:
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800436c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_RCC_SetI2CClockSource>:
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800439c:	43db      	mvns	r3, r3
 800439e:	401a      	ands	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80043a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <LL_RCC_SetLPTIMClockSource>:
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <LL_RCC_SetSAIClockSource>:
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80043fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004402:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004406:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_RCC_SetRNGClockSource>:
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004432:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <LL_RCC_SetCLK48ClockSource>:
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800445e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_RCC_SetUSBClockSource>:
{
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7ff ffe3 	bl	800444a <LL_RCC_SetCLK48ClockSource>
}
 8004484:	bf00      	nop
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <LL_RCC_SetADCClockSource>:
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_RCC_SetRTCClockSource>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80044c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_RCC_GetRTCClockSource>:
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80044e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_ForceBackupDomainReset>:
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800450e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004516:	bf00      	nop
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <LL_RCC_PLLSAI1_Enable>:
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004550:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004554:	6013      	str	r3, [r2, #0]
}
 8004556:	bf00      	nop
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <LL_RCC_PLLSAI1_Disable>:
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800456e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004572:	6013      	str	r3, [r2, #0]
}
 8004574:	bf00      	nop
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <LL_RCC_PLLSAI1_IsReady>:
{
 800457e:	b480      	push	{r7}
 8004580:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800458c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004590:	d101      	bne.n	8004596 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80045aa:	2300      	movs	r3, #0
 80045ac:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80045ae:	2300      	movs	r3, #0
 80045b0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d034      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045c6:	d021      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80045c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045cc:	d81b      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045d2:	d01d      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80045d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045d8:	d815      	bhi.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80045de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045e2:	d110      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80045e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80045f4:	e00d      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	3304      	adds	r3, #4
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f947 	bl	800488e <RCCEx_PLLSAI1_ConfigNP>
 8004600:	4603      	mov	r3, r0
 8004602:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004604:	e005      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	77fb      	strb	r3, [r7, #31]
        break;
 800460a:	e002      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800460c:	bf00      	nop
 800460e:	e000      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fee8 	bl	80043f2 <LL_RCC_SetSAIClockSource>
 8004622:	e001      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004624:	7ffb      	ldrb	r3, [r7, #31]
 8004626:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004630:	2b00      	cmp	r3, #0
 8004632:	d046      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004634:	f7ff ff56 	bl	80044e4 <LL_RCC_GetRTCClockSource>
 8004638:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	429a      	cmp	r2, r3
 8004642:	d03c      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004644:	f7fe fc90 	bl	8002f68 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d105      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff ff30 	bl	80044b8 <LL_RCC_SetRTCClockSource>
 8004658:	e02e      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004664:	f7ff ff4b 	bl	80044fe <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004668:	f7ff ff5a 	bl	8004520 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4313      	orrs	r3, r2
 8004678:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800467a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004684:	f7ff fdf0 	bl	8004268 <LL_RCC_LSE_IsEnabled>
 8004688:	4603      	mov	r3, r0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d114      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800468e:	f7fd fed1 	bl	8002434 <HAL_GetTick>
 8004692:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004694:	e00b      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004696:	f7fd fecd 	bl	8002434 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d902      	bls.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	77fb      	strb	r3, [r7, #31]
              break;
 80046ac:	e004      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80046ae:	f7ff fded 	bl	800428c <LL_RCC_LSE_IsReady>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d1ee      	bne.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80046b8:	7ffb      	ldrb	r3, [r7, #31]
 80046ba:	77bb      	strb	r3, [r7, #30]
 80046bc:	e001      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046be:	7ffb      	ldrb	r3, [r7, #31]
 80046c0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d004      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fe2a 	bl	800432c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff fe35 	bl	8004358 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d004      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fe5d 	bl	80043be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d004      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff fe52 	bl	80043be <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0304 	and.w	r3, r3, #4
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a1b      	ldr	r3, [r3, #32]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fe2a 	bl	8004384 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fe1f 	bl	8004384 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d022      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff fe8d 	bl	8004476 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004764:	d107      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004770:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004774:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800477e:	d10b      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f000 f8dd 	bl	8004944 <RCCEx_PLLSAI1_ConfigNQ>
 800478a:	4603      	mov	r3, r0
 800478c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800478e:	7ffb      	ldrb	r3, [r7, #31]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004794:	7ffb      	ldrb	r3, [r7, #31]
 8004796:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d02b      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d008      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047b6:	d003      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d105      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fe2a 	bl	800441e <LL_RCC_SetRNGClockSource>
 80047ca:	e00a      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	2000      	movs	r0, #0
 80047d8:	f7ff fe21 	bl	800441e <LL_RCC_SetRNGClockSource>
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f7ff fe34 	bl	800444a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80047ea:	d107      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80047ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004804:	2b00      	cmp	r3, #0
 8004806:	d022      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff fe3d 	bl	800448c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004816:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800481a:	d107      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800481c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004834:	d10b      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f8dd 	bl	80049fa <RCCEx_PLLSAI1_ConfigNR>
 8004840:	4603      	mov	r3, r0
 8004842:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004844:	7ffb      	ldrb	r3, [r7, #31]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800484a:	7ffb      	ldrb	r3, [r7, #31]
 800484c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d004      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff fd26 	bl	80042b0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fd45 	bl	8004304 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fd2c 	bl	80042dc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004884:	7fbb      	ldrb	r3, [r7, #30]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800489a:	f7ff fe61 	bl	8004560 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800489e:	f7fd fdc9 	bl	8002434 <HAL_GetTick>
 80048a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80048a4:	e009      	b.n	80048ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a6:	f7fd fdc5 	bl	8002434 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d902      	bls.n	80048ba <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	73fb      	strb	r3, [r7, #15]
      break;
 80048b8:	e004      	b.n	80048c4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80048ba:	f7ff fe60 	bl	800457e <LL_RCC_PLLSAI1_IsReady>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d137      	bne.n	800493a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80048ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048de:	4313      	orrs	r3, r2
 80048e0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80048f8:	f7ff fe23 	bl	8004542 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048fc:	f7fd fd9a 	bl	8002434 <HAL_GetTick>
 8004900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004902:	e009      	b.n	8004918 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004904:	f7fd fd96 	bl	8002434 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d902      	bls.n	8004918 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	73fb      	strb	r3, [r7, #15]
        break;
 8004916:	e004      	b.n	8004922 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004918:	f7ff fe31 	bl	800457e <LL_RCC_PLLSAI1_IsReady>
 800491c:	4603      	mov	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d1f0      	bne.n	8004904 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d108      	bne.n	800493a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492c:	691a      	ldr	r2, [r3, #16]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004936:	4313      	orrs	r3, r2
 8004938:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800493a:	7bfb      	ldrb	r3, [r7, #15]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004950:	f7ff fe06 	bl	8004560 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004954:	f7fd fd6e 	bl	8002434 <HAL_GetTick>
 8004958:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800495a:	e009      	b.n	8004970 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800495c:	f7fd fd6a 	bl	8002434 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d902      	bls.n	8004970 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	73fb      	strb	r3, [r7, #15]
      break;
 800496e:	e004      	b.n	800497a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004970:	f7ff fe05 	bl	800457e <LL_RCC_PLLSAI1_IsReady>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800497a:	7bfb      	ldrb	r3, [r7, #15]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d137      	bne.n	80049f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004994:	4313      	orrs	r3, r2
 8004996:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049aa:	4313      	orrs	r3, r2
 80049ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80049ae:	f7ff fdc8 	bl	8004542 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b2:	f7fd fd3f 	bl	8002434 <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049b8:	e009      	b.n	80049ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049ba:	f7fd fd3b 	bl	8002434 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d902      	bls.n	80049ce <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	73fb      	strb	r3, [r7, #15]
        break;
 80049cc:	e004      	b.n	80049d8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80049ce:	f7ff fdd6 	bl	800457e <LL_RCC_PLLSAI1_IsReady>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d1f0      	bne.n	80049ba <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d108      	bne.n	80049f0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ec:	4313      	orrs	r3, r2
 80049ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004a06:	f7ff fdab 	bl	8004560 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a0a:	f7fd fd13 	bl	8002434 <HAL_GetTick>
 8004a0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a10:	e009      	b.n	8004a26 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a12:	f7fd fd0f 	bl	8002434 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d902      	bls.n	8004a26 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	73fb      	strb	r3, [r7, #15]
      break;
 8004a24:	e004      	b.n	8004a30 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a26:	f7ff fdaa 	bl	800457e <LL_RCC_PLLSAI1_IsReady>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f0      	bne.n	8004a12 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d137      	bne.n	8004aa6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004a4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a60:	4313      	orrs	r3, r2
 8004a62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a64:	f7ff fd6d 	bl	8004542 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a68:	f7fd fce4 	bl	8002434 <HAL_GetTick>
 8004a6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a6e:	e009      	b.n	8004a84 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a70:	f7fd fce0 	bl	8002434 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d902      	bls.n	8004a84 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	73fb      	strb	r3, [r7, #15]
        break;
 8004a82:	e004      	b.n	8004a8e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a84:	f7ff fd7b 	bl	800457e <LL_RCC_PLLSAI1_IsReady>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d1f0      	bne.n	8004a70 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d108      	bne.n	8004aa6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3710      	adds	r7, #16
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e090      	b.n	8004be4 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fd f9dc 	bl	8001e94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	22ca      	movs	r2, #202	; 0xca
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2253      	movs	r2, #83	; 0x53
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 fa11 	bl	8004f1c <RTC_EnterInitMode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	22ff      	movs	r2, #255	; 0xff
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e067      	b.n	8004be4 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b26:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	431a      	orrs	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68d2      	ldr	r2, [r2, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6919      	ldr	r1, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	041a      	lsls	r2, r3, #16
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68da      	ldr	r2, [r3, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b72:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0203 	bic.w	r2, r2, #3
 8004b82:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	69da      	ldr	r2, [r3, #28]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	695b      	ldr	r3, [r3, #20]
 8004b92:	431a      	orrs	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	430a      	orrs	r2, r1
 8004b9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d113      	bne.n	8004bd2 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f990 	bl	8004ed0 <HAL_RTC_WaitForSynchro>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	22ff      	movs	r2, #255	; 0xff
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e008      	b.n	8004be4 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	22ff      	movs	r2, #255	; 0xff
 8004bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004be2:	2300      	movs	r3, #0
  }
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004bec:	b590      	push	{r4, r7, lr}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_RTC_SetTime+0x1a>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0b2      	b.n	8004d6c <HAL_RTC_SetTime+0x180>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2202      	movs	r2, #2
 8004c12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d126      	bne.n	8004c6a <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 f99b 	bl	8004f70 <RTC_ByteToBcd2>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f994 	bl	8004f70 <RTC_ByteToBcd2>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c4c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	789b      	ldrb	r3, [r3, #2]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f98c 	bl	8004f70 <RTC_ByteToBcd2>
 8004c58:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004c5a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	78db      	ldrb	r3, [r3, #3]
 8004c62:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e018      	b.n	8004c9c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	785b      	ldrb	r3, [r3, #1]
 8004c88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c8a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004c90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	78db      	ldrb	r3, [r3, #3]
 8004c96:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	22ca      	movs	r2, #202	; 0xca
 8004ca2:	625a      	str	r2, [r3, #36]	; 0x24
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2253      	movs	r2, #83	; 0x53
 8004caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f935 	bl	8004f1c <RTC_EnterInitMode>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00d      	beq.n	8004cd4 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	22ff      	movs	r2, #255	; 0xff
 8004cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e04b      	b.n	8004d6c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004cde:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ce2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004cf2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6899      	ldr	r1, [r3, #8]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d1a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d113      	bne.n	8004d52 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f8d0 	bl	8004ed0 <HAL_RTC_WaitForSynchro>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00d      	beq.n	8004d52 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	22ff      	movs	r2, #255	; 0xff
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2204      	movs	r2, #4
 8004d42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e00c      	b.n	8004d6c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	22ff      	movs	r2, #255	; 0xff
 8004d58:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
  }
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	371c      	adds	r7, #28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd90      	pop	{r4, r7, pc}

08004d74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_RTC_SetDate+0x1a>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e09c      	b.n	8004ec8 <HAL_RTC_SetDate+0x154>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10e      	bne.n	8004dc2 <HAL_RTC_SetDate+0x4e>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	f023 0310 	bic.w	r3, r3, #16
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	330a      	adds	r3, #10
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11c      	bne.n	8004e02 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	78db      	ldrb	r3, [r3, #3]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 f8cf 	bl	8004f70 <RTC_ByteToBcd2>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f8c8 	bl	8004f70 <RTC_ByteToBcd2>
 8004de0:	4603      	mov	r3, r0
 8004de2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004de4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	789b      	ldrb	r3, [r3, #2]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f8c0 	bl	8004f70 <RTC_ByteToBcd2>
 8004df0:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004df2:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e00e      	b.n	8004e20 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	78db      	ldrb	r3, [r3, #3]
 8004e06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e0e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004e14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	22ca      	movs	r2, #202	; 0xca
 8004e26:	625a      	str	r2, [r3, #36]	; 0x24
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2253      	movs	r2, #83	; 0x53
 8004e2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f873 	bl	8004f1c <RTC_EnterInitMode>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00d      	beq.n	8004e58 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	22ff      	movs	r2, #255	; 0xff
 8004e42:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2204      	movs	r2, #4
 8004e48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e037      	b.n	8004ec8 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e62:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e66:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d113      	bne.n	8004eae <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f000 f822 	bl	8004ed0 <HAL_RTC_WaitForSynchro>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	22ff      	movs	r2, #255	; 0xff
 8004e98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e00c      	b.n	8004ec8 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	22ff      	movs	r2, #255	; 0xff
 8004eb4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
  }
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}

08004ed0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004ee8:	f7fd faa4 	bl	8002434 <HAL_GetTick>
 8004eec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004eee:	e009      	b.n	8004f04 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004ef0:	f7fd faa0 	bl	8002434 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004efe:	d901      	bls.n	8004f04 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e007      	b.n	8004f14 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ee      	beq.n	8004ef0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d119      	bne.n	8004f66 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f04f 32ff 	mov.w	r2, #4294967295
 8004f3a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004f3c:	f7fd fa7a 	bl	8002434 <HAL_GetTick>
 8004f40:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004f42:	e009      	b.n	8004f58 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8004f44:	f7fd fa76 	bl	8002434 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f52:	d901      	bls.n	8004f58 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e007      	b.n	8004f68 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0ee      	beq.n	8004f44 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 8004f82:	e005      	b.n	8004f90 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	3301      	adds	r3, #1
 8004f88:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004f8a:	7afb      	ldrb	r3, [r7, #11]
 8004f8c:	3b0a      	subs	r3, #10
 8004f8e:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 8004f90:	7afb      	ldrb	r3, [r7, #11]
 8004f92:	2b09      	cmp	r3, #9
 8004f94:	d8f6      	bhi.n	8004f84 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	b2db      	uxtb	r3, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_RTCEx_TamperTimeStampIRQHandler>:
  * @brief  Handle TimeStamp interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TamperTimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{ 
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Get the TimeStamp interrupt source enable status */
  if(__HAL_RTC_TIMESTAMP_GET_IT_SOURCE(hrtc, RTC_IT_TS) != 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d012      	beq.n	8004fec <HAL_RTCEx_TamperTimeStampIRQHandler+0x3c>
  {
    /* Get the pending status of the TIMESTAMP Interrupt */
    if(__HAL_RTC_TIMESTAMP_GET_FLAG(hrtc, RTC_FLAG_TSF) != 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <HAL_RTCEx_TamperTimeStampIRQHandler+0x3c>
    {
      /* TIMESTAMP callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->TimeStampEventCallback(hrtc);
#else
      HAL_RTCEx_TimeStampEventCallback(hrtc);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f86d 	bl	80050b4 <HAL_RTCEx_TimeStampEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
      
      /* Clear the TIMESTAMP interrupt pending bit */
      __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f462 6208 	orn	r2, r2, #2176	; 0x880
 8004fea:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER1_SUPPORT)
  /* Get the Tamper1 interrupts source enable status */
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP1) != 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ff2:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf0>)
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d012      	beq.n	8005020 <HAL_RTCEx_TamperTimeStampIRQHandler+0x70>
  {
    /* Get the pending status of the Tamper1 Interrupt */
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP1F) != 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <HAL_RTCEx_TamperTimeStampIRQHandler+0x70>
    {
      /* Tamper1 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper1EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper1EventCallback(hrtc);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 f85d 	bl	80050c8 <HAL_RTCEx_Tamper1EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper1 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP1F);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f462 5202 	orn	r2, r2, #8320	; 0x2080
 800501e:	60da      	str	r2, [r3, #12]
  }
#endif /* RTC_TAMPER1_SUPPORT */
    

  /* Get the Tamper2 interrupts source enable status */
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP2) != 0U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005026:	4b1f      	ldr	r3, [pc, #124]	; (80050a4 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf4>)
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d012      	beq.n	8005054 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa4>
  {
    /* Get the pending status of the Tamper2 Interrupt */
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP2F) != 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68db      	ldr	r3, [r3, #12]
 8005034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00b      	beq.n	8005054 <HAL_RTCEx_TamperTimeStampIRQHandler+0xa4>
    {
      /* Tamper2 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper2EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper2EventCallback(hrtc);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f84d 	bl	80050dc <HAL_RTCEx_Tamper2EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper2 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP2F);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f462 4281 	orn	r2, r2, #16512	; 0x4080
 8005052:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RTC_TAMPER3_SUPPORT)
  /* Get the Tamper3 interrupts source enable status */
  if(__HAL_RTC_TAMPER_GET_IT_SOURCE(hrtc, RTC_IT_TAMP | RTC_IT_TAMP3) != 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800505a:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RTCEx_TamperTimeStampIRQHandler+0xf8>)
 800505c:	4013      	ands	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d012      	beq.n	8005088 <HAL_RTCEx_TamperTimeStampIRQHandler+0xd8>
  {
    /* Get the pending status of the Tamper3 Interrupt */
    if(__HAL_RTC_TAMPER_GET_FLAG(hrtc, RTC_FLAG_TAMP3F) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00b      	beq.n	8005088 <HAL_RTCEx_TamperTimeStampIRQHandler+0xd8>
    {
      /* Tamper3 callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->Tamper3EventCallback(hrtc);
#else
      HAL_RTCEx_Tamper3EventCallback(hrtc);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f83d 	bl	80050f0 <HAL_RTCEx_Tamper3EventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Tamper3 interrupt pending bit */
      __HAL_RTC_TAMPER_CLEAR_FLAG(hrtc, RTC_FLAG_TAMP3F);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	b2d9      	uxtb	r1, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <HAL_RTCEx_TamperTimeStampIRQHandler+0xfc>)
 8005084:	430b      	orrs	r3, r1
 8005086:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* RTC_TAMPER3_SUPPORT */

  /* Clear the EXTI's Flag for RTC TimeStamp and Tamper */
  __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG();
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RTCEx_TamperTimeStampIRQHandler+0x100>)
 800508a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800508e:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	00010004 	.word	0x00010004
 80050a4:	00080004 	.word	0x00080004
 80050a8:	00400004 	.word	0x00400004
 80050ac:	ffff7f7f 	.word	0xffff7f7f
 80050b0:	58000800 	.word	0x58000800

080050b4 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback. 
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 80050f8:	bf00      	nop
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_RTCEx_SetWakeUpTimer+0x1a>
 800511a:	2302      	movs	r3, #2
 800511c:	e089      	b.n	8005232 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2202      	movs	r2, #2
 800512a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	22ca      	movs	r2, #202	; 0xca
 8005134:	625a      	str	r2, [r3, #36]	; 0x24
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2253      	movs	r2, #83	; 0x53
 800513c:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005148:	2b00      	cmp	r3, #0
 800514a:	d020      	beq.n	800518e <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 800514c:	f7fd f972 	bl	8002434 <HAL_GetTick>
 8005150:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005152:	e015      	b.n	8005180 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005154:	f7fd f96e 	bl	8002434 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005162:	d90d      	bls.n	8005180 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	22ff      	movs	r2, #255	; 0xff
 800516a:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2203      	movs	r2, #3
 8005170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e058      	b.n	8005232 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e2      	bne.n	8005154 <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800519e:	f7fd f949 	bl	8002434 <HAL_GetTick>
 80051a2:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80051a4:	e015      	b.n	80051d2 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051a6:	f7fd f945 	bl	8002434 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b4:	d90d      	bls.n	80051d2 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	22ff      	movs	r2, #255	; 0xff
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2203      	movs	r2, #3
 80051c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e02f      	b.n	8005232 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0e2      	beq.n	80051a6 <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0207 	bic.w	r2, r2, #7
 80051ee:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6899      	ldr	r1, [r3, #8]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	430a      	orrs	r2, r1
 80051fe:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005216:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	22ff      	movs	r2, #255	; 0xff
 800521e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <HAL_RTCEx_EnableBypassShadow+0x16>
 800524c:	2302      	movs	r3, #2
 800524e:	e024      	b.n	800529a <HAL_RTCEx_EnableBypassShadow+0x60>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	22ca      	movs	r2, #202	; 0xca
 8005266:	625a      	str	r2, [r3, #36]	; 0x24
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2253      	movs	r2, #83	; 0x53
 800526e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0220 	orr.w	r2, r2, #32
 800527e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	22ff      	movs	r2, #255	; 0xff
 8005286:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b084      	sub	sp, #16
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e095      	b.n	80053e4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d108      	bne.n	80052d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c8:	d009      	beq.n	80052de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	61da      	str	r2, [r3, #28]
 80052d0:	e005      	b.n	80052de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d106      	bne.n	80052fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fc fdeb 	bl	8001ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005314:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800531e:	d902      	bls.n	8005326 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e002      	b.n	800532c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005334:	d007      	beq.n	8005346 <HAL_SPI_Init+0xa0>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800533e:	d002      	beq.n	8005346 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	431a      	orrs	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	431a      	orrs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005388:	ea42 0103 	orr.w	r1, r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005390:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	f003 0204 	and.w	r2, r3, #4
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	f003 0310 	and.w	r3, r3, #16
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80053c2:	ea42 0103 	orr.w	r1, r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800540c:	69fa      	ldr	r2, [r7, #28]
 800540e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005412:	4013      	ands	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d118      	bne.n	800544e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d013      	beq.n	800544e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543e:	2b00      	cmp	r3, #0
 8005440:	f000 81fb 	beq.w	800583a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	4798      	blx	r3
      }
      return;
 800544c:	e1f5      	b.n	800583a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80ef 	beq.w	8005634 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4b73      	ldr	r3, [pc, #460]	; (8005628 <HAL_UART_IRQHandler+0x23c>)
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d105      	bne.n	800546c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4b72      	ldr	r3, [pc, #456]	; (800562c <HAL_UART_IRQHandler+0x240>)
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80e4 	beq.w	8005634 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d010      	beq.n	8005498 <HAL_UART_IRQHandler+0xac>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2201      	movs	r2, #1
 8005486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548e:	f043 0201 	orr.w	r2, r3, #1
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d010      	beq.n	80054c4 <HAL_UART_IRQHandler+0xd8>
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00b      	beq.n	80054c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2202      	movs	r2, #2
 80054b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ba:	f043 0204 	orr.w	r2, r3, #4
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d010      	beq.n	80054f0 <HAL_UART_IRQHandler+0x104>
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2204      	movs	r2, #4
 80054de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e6:	f043 0202 	orr.w	r2, r3, #2
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f003 0308 	and.w	r3, r3, #8
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d015      	beq.n	8005526 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	4b48      	ldr	r3, [pc, #288]	; (8005628 <HAL_UART_IRQHandler+0x23c>)
 8005508:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2208      	movs	r2, #8
 8005514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800551c:	f043 0208 	orr.w	r2, r3, #8
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800552c:	2b00      	cmp	r3, #0
 800552e:	d011      	beq.n	8005554 <HAL_UART_IRQHandler+0x168>
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00c      	beq.n	8005554 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554a:	f043 0220 	orr.w	r2, r3, #32
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 816f 	beq.w	800583e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d011      	beq.n	800558e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d104      	bne.n	800557e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005594:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d004      	beq.n	80055ae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d031      	beq.n	8005612 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f970 	bl	8005894 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055be:	2b40      	cmp	r3, #64	; 0x40
 80055c0:	d123      	bne.n	800560a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d013      	beq.n	8005602 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055de:	4a14      	ldr	r2, [pc, #80]	; (8005630 <HAL_UART_IRQHandler+0x244>)
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fd f94c 	bl	8002884 <HAL_DMA_Abort_IT>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d017      	beq.n	8005622 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80055fc:	4610      	mov	r0, r2
 80055fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	e00f      	b.n	8005622 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f930 	bl	8005868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	e00b      	b.n	8005622 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f92c 	bl	8005868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	e007      	b.n	8005622 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f928 	bl	8005868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005620:	e10d      	b.n	800583e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005622:	bf00      	nop
    return;
 8005624:	e10b      	b.n	800583e <HAL_UART_IRQHandler+0x452>
 8005626:	bf00      	nop
 8005628:	10000001 	.word	0x10000001
 800562c:	04000120 	.word	0x04000120
 8005630:	080058f9 	.word	0x080058f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005638:	2b01      	cmp	r3, #1
 800563a:	f040 80ab 	bne.w	8005794 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80a5 	beq.w	8005794 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 809f 	beq.w	8005794 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2210      	movs	r2, #16
 800565c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d155      	bne.n	8005718 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005676:	893b      	ldrh	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 80e2 	beq.w	8005842 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005684:	893a      	ldrh	r2, [r7, #8]
 8005686:	429a      	cmp	r2, r3
 8005688:	f080 80db 	bcs.w	8005842 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	893a      	ldrh	r2, [r7, #8]
 8005690:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d12b      	bne.n	80056fc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056b2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689a      	ldr	r2, [r3, #8]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056d2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0210 	bic.w	r2, r2, #16
 80056f0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7fd f865 	bl	80027c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005708:	b29b      	uxth	r3, r3
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	b29b      	uxth	r3, r3
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f8b3 	bl	800587c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005716:	e094      	b.n	8005842 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005724:	b29b      	uxth	r3, r3
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8087 	beq.w	8005846 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005738:	897b      	ldrh	r3, [r7, #10]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8083 	beq.w	8005846 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800574e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0210 	bic.w	r2, r2, #16
 8005786:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005788:	897b      	ldrh	r3, [r7, #10]
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f875 	bl	800587c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005792:	e058      	b.n	8005846 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <HAL_UART_IRQHandler+0x3ce>
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8d0 	bl	8005958 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057b8:	e048      	b.n	800584c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d012      	beq.n	80057ea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d104      	bne.n	80057d8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d008      	beq.n	80057ea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d034      	beq.n	800584a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	4798      	blx	r3
    }
    return;
 80057e8:	e02f      	b.n	800584a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_UART_IRQHandler+0x41a>
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d003      	beq.n	8005806 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f890 	bl	8005924 <UART_EndTransmit_IT>
    return;
 8005804:	e022      	b.n	800584c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_UART_IRQHandler+0x436>
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8b0 	bl	8005980 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005820:	e014      	b.n	800584c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00f      	beq.n	800584c <HAL_UART_IRQHandler+0x460>
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	da0c      	bge.n	800584c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f89a 	bl	800596c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005838:	e008      	b.n	800584c <HAL_UART_IRQHandler+0x460>
      return;
 800583a:	bf00      	nop
 800583c:	e006      	b.n	800584c <HAL_UART_IRQHandler+0x460>
    return;
 800583e:	bf00      	nop
 8005840:	e004      	b.n	800584c <HAL_UART_IRQHandler+0x460>
      return;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <HAL_UART_IRQHandler+0x460>
      return;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <HAL_UART_IRQHandler+0x460>
    return;
 800584a:	bf00      	nop
  }
}
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop

08005854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	460b      	mov	r3, r1
 8005886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6812      	ldr	r2, [r2, #0]
 80058b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d107      	bne.n	80058d8 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0210 	bic.w	r2, r2, #16
 80058d6:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2220      	movs	r2, #32
 80058dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	671a      	str	r2, [r3, #112]	; 0x70
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005904:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7ff ffa6 	bl	8005868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800591c:	bf00      	nop
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800593a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff ff82 	bl	8005854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005950:	bf00      	nop
 8005952:	3708      	adds	r7, #8
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b088      	sub	sp, #32
 8005998:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800599e:	f107 0308 	add.w	r3, r7, #8
 80059a2:	2218      	movs	r2, #24
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f001 f97c 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80059ac:	233f      	movs	r3, #63	; 0x3f
 80059ae:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80059b0:	2381      	movs	r3, #129	; 0x81
 80059b2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80059b4:	1dfb      	adds	r3, r7, #7
 80059b6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80059b8:	2301      	movs	r3, #1
 80059ba:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059bc:	f107 0308 	add.w	r3, r7, #8
 80059c0:	2100      	movs	r1, #0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 f832 	bl	8006a2c <hci_send_req>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	da01      	bge.n	80059d2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80059ce:	23ff      	movs	r3, #255	; 0xff
 80059d0:	e000      	b.n	80059d4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80059d2:	79fb      	ldrb	r3, [r7, #7]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80059dc:	b5b0      	push	{r4, r5, r7, lr}
 80059de:	b0ce      	sub	sp, #312	; 0x138
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	4605      	mov	r5, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	1dfb      	adds	r3, r7, #7
 80059ec:	462a      	mov	r2, r5
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	1d3b      	adds	r3, r7, #4
 80059f2:	4622      	mov	r2, r4
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	1cbb      	adds	r3, r7, #2
 80059f8:	4602      	mov	r2, r0
 80059fa:	801a      	strh	r2, [r3, #0]
 80059fc:	1dbb      	adds	r3, r7, #6
 80059fe:	460a      	mov	r2, r1
 8005a00:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005a02:	f107 0310 	add.w	r3, r7, #16
 8005a06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005a0a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005a0e:	3308      	adds	r3, #8
 8005a10:	f107 0210 	add.w	r2, r7, #16
 8005a14:	4413      	add	r3, r2
 8005a16:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005a1a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005a1e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005a22:	4413      	add	r3, r2
 8005a24:	3309      	adds	r3, #9
 8005a26:	f107 0210 	add.w	r2, r7, #16
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005a30:	f107 030f 	add.w	r3, r7, #15
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005a3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a42:	1dfa      	adds	r2, r7, #7
 8005a44:	7812      	ldrb	r2, [r2, #0]
 8005a46:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005a52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a56:	1d3a      	adds	r2, r7, #4
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005a5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a62:	3302      	adds	r3, #2
 8005a64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005a68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a6c:	1cba      	adds	r2, r7, #2
 8005a6e:	8812      	ldrh	r2, [r2, #0]
 8005a70:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005a74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a78:	3302      	adds	r3, #2
 8005a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005a7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a82:	1dba      	adds	r2, r7, #6
 8005a84:	7812      	ldrb	r2, [r2, #0]
 8005a86:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005a92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005a96:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005a9a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005a9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005aa6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005aaa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005aae:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005ab0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005aba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005abe:	3308      	adds	r3, #8
 8005ac0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005ac4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 f8db 	bl	8006c84 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005ace:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005ad2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005adc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005ae0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005ae4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aea:	3301      	adds	r3, #1
 8005aec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005af0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005af4:	3301      	adds	r3, #1
 8005af6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005afa:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f8c0 	bl	8006c84 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005b04:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005b08:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8005b12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b16:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005b1a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b20:	3302      	adds	r3, #2
 8005b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8005b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005b2e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b34:	3302      	adds	r3, #2
 8005b36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b3e:	2218      	movs	r2, #24
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f001 f8ae 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b48:	233f      	movs	r3, #63	; 0x3f
 8005b4a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005b4e:	2383      	movs	r3, #131	; 0x83
 8005b50:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005b54:	f107 0310 	add.w	r3, r7, #16
 8005b58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005b5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b60:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005b64:	f107 030f 	add.w	r3, r7, #15
 8005b68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b72:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b76:	2100      	movs	r1, #0
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 ff57 	bl	8006a2c <hci_send_req>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	da01      	bge.n	8005b88 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8005b84:	23ff      	movs	r3, #255	; 0xff
 8005b86:	e002      	b.n	8005b8e <aci_gap_set_discoverable+0x1b2>
  return status;
 8005b88:	f107 030f 	add.w	r3, r7, #15
 8005b8c:	781b      	ldrb	r3, [r3, #0]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bdb0      	pop	{r4, r5, r7, pc}

08005b98 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b0cc      	sub	sp, #304	; 0x130
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	1dfb      	adds	r3, r7, #7
 8005ba2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005ba4:	f107 0310 	add.w	r3, r7, #16
 8005ba8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005bac:	f107 030f 	add.w	r3, r7, #15
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8005bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bbe:	1dfa      	adds	r2, r7, #7
 8005bc0:	7812      	ldrb	r2, [r2, #0]
 8005bc2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bd2:	2218      	movs	r2, #24
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 f864 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005bdc:	233f      	movs	r3, #63	; 0x3f
 8005bde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8005be2:	2385      	movs	r3, #133	; 0x85
 8005be4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005be8:	f107 0310 	add.w	r3, r7, #16
 8005bec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005bf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005bf8:	f107 030f 	add.w	r3, r7, #15
 8005bfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 ff0d 	bl	8006a2c <hci_send_req>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da01      	bge.n	8005c1c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8005c18:	23ff      	movs	r3, #255	; 0xff
 8005c1a:	e002      	b.n	8005c22 <aci_gap_set_io_capability+0x8a>
  return status;
 8005c1c:	f107 030f 	add.w	r3, r7, #15
 8005c20:	781b      	ldrb	r3, [r3, #0]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005c2c:	b5b0      	push	{r4, r5, r7, lr}
 8005c2e:	b0cc      	sub	sp, #304	; 0x130
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4605      	mov	r5, r0
 8005c34:	460c      	mov	r4, r1
 8005c36:	4610      	mov	r0, r2
 8005c38:	4619      	mov	r1, r3
 8005c3a:	1dfb      	adds	r3, r7, #7
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	1dbb      	adds	r3, r7, #6
 8005c42:	4622      	mov	r2, r4
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	1d7b      	adds	r3, r7, #5
 8005c48:	4602      	mov	r2, r0
 8005c4a:	701a      	strb	r2, [r3, #0]
 8005c4c:	1d3b      	adds	r3, r7, #4
 8005c4e:	460a      	mov	r2, r1
 8005c50:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005c52:	f107 0310 	add.w	r3, r7, #16
 8005c56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005c5a:	f107 030f 	add.w	r3, r7, #15
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6c:	1dfa      	adds	r2, r7, #7
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c76:	3301      	adds	r3, #1
 8005c78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005c7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c80:	1dba      	adds	r2, r7, #6
 8005c82:	7812      	ldrb	r2, [r2, #0]
 8005c84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005c86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8005c90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c94:	1d7a      	adds	r2, r7, #5
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca8:	1d3a      	adds	r2, r7, #4
 8005caa:	7812      	ldrb	r2, [r2, #0]
 8005cac:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbc:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005cc0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cd0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005cd4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cda:	3301      	adds	r3, #1
 8005cdc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005ce8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005cea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005cfc:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d04:	3304      	adds	r3, #4
 8005d06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005d0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0e:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005d12:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d18:	3301      	adds	r3, #1
 8005d1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d22:	2218      	movs	r2, #24
 8005d24:	2100      	movs	r1, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 ffbc 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d2c:	233f      	movs	r3, #63	; 0x3f
 8005d2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8005d32:	2386      	movs	r3, #134	; 0x86
 8005d34:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005d38:	f107 0310 	add.w	r3, r7, #16
 8005d3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005d40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005d48:	f107 030f 	add.w	r3, r7, #15
 8005d4c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fe65 	bl	8006a2c <hci_send_req>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	da01      	bge.n	8005d6c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8005d68:	23ff      	movs	r3, #255	; 0xff
 8005d6a:	e002      	b.n	8005d72 <aci_gap_set_authentication_requirement+0x146>
  return status;
 8005d6c:	f107 030f 	add.w	r3, r7, #15
 8005d70:	781b      	ldrb	r3, [r3, #0]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bdb0      	pop	{r4, r5, r7, pc}

08005d7c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b0cd      	sub	sp, #308	; 0x134
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4604      	mov	r4, r0
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	463a      	mov	r2, r7
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	1dfb      	adds	r3, r7, #7
 8005d8e:	4622      	mov	r2, r4
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	1dbb      	adds	r3, r7, #6
 8005d94:	4602      	mov	r2, r0
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	1d7b      	adds	r3, r7, #5
 8005d9a:	460a      	mov	r2, r1
 8005d9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005d9e:	f107 0310 	add.w	r3, r7, #16
 8005da2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005da6:	f107 0308 	add.w	r3, r7, #8
 8005daa:	2207      	movs	r2, #7
 8005dac:	2100      	movs	r1, #0
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 ff78 	bl	8006ca4 <Osal_MemSet>
  int index_input = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8005dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dbe:	1dfa      	adds	r2, r7, #7
 8005dc0:	7812      	ldrb	r2, [r2, #0]
 8005dc2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dc8:	3301      	adds	r3, #1
 8005dca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd2:	1dba      	adds	r2, r7, #6
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005dd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ddc:	3301      	adds	r3, #1
 8005dde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005de2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005de6:	1d7a      	adds	r2, r7, #5
 8005de8:	7812      	ldrb	r2, [r2, #0]
 8005dea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005dec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005df0:	3301      	adds	r3, #1
 8005df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dfa:	2218      	movs	r2, #24
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 ff50 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e04:	233f      	movs	r3, #63	; 0x3f
 8005e06:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8005e0a:	238a      	movs	r3, #138	; 0x8a
 8005e0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e10:	f107 0310 	add.w	r3, r7, #16
 8005e14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005e20:	f107 0308 	add.w	r3, r7, #8
 8005e24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005e28:	2307      	movs	r3, #7
 8005e2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fdf9 	bl	8006a2c <hci_send_req>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	da01      	bge.n	8005e44 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8005e40:	23ff      	movs	r3, #255	; 0xff
 8005e42:	e021      	b.n	8005e88 <aci_gap_init+0x10c>
  if ( resp.Status )
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <aci_gap_init+0xda>
    return resp.Status;
 8005e4e:	f107 0308 	add.w	r3, r7, #8
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	e018      	b.n	8005e88 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005e66:	f107 0308 	add.w	r3, r7, #8
 8005e6a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005e74:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005e76:	f107 0308 	add.w	r3, r7, #8
 8005e7a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005e84:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd90      	pop	{r4, r7, pc}

08005e92 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b0cc      	sub	sp, #304	; 0x130
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	4602      	mov	r2, r0
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	6019      	str	r1, [r3, #0]
 8005e9e:	1dfb      	adds	r3, r7, #7
 8005ea0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005ea2:	f107 0310 	add.w	r3, r7, #16
 8005ea6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005eaa:	f107 030f 	add.w	r3, r7, #15
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005eb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ebc:	1dfa      	adds	r2, r7, #7
 8005ebe:	7812      	ldrb	r2, [r2, #0]
 8005ec0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8005ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed0:	1c58      	adds	r0, r3, #1
 8005ed2:	1dfb      	adds	r3, r7, #7
 8005ed4:	781a      	ldrb	r2, [r3, #0]
 8005ed6:	463b      	mov	r3, r7
 8005ed8:	6819      	ldr	r1, [r3, #0]
 8005eda:	f000 fed3 	bl	8006c84 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005ede:	1dfb      	adds	r3, r7, #7
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005eec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ef0:	2218      	movs	r2, #24
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 fed5 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005efa:	233f      	movs	r3, #63	; 0x3f
 8005efc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8005f00:	238e      	movs	r3, #142	; 0x8e
 8005f02:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005f06:	f107 0310 	add.w	r3, r7, #16
 8005f0a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f12:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005f16:	f107 030f 	add.w	r3, r7, #15
 8005f1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fd7e 	bl	8006a2c <hci_send_req>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	da01      	bge.n	8005f3a <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8005f36:	23ff      	movs	r3, #255	; 0xff
 8005f38:	e002      	b.n	8005f40 <aci_gap_update_adv_data+0xae>
  return status;
 8005f3a:	f107 030f 	add.w	r3, r7, #15
 8005f3e:	781b      	ldrb	r3, [r3, #0]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b088      	sub	sp, #32
 8005f4e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f54:	f107 0308 	add.w	r3, r7, #8
 8005f58:	2218      	movs	r2, #24
 8005f5a:	2100      	movs	r1, #0
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f000 fea1 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f62:	233f      	movs	r3, #63	; 0x3f
 8005f64:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8005f66:	2392      	movs	r3, #146	; 0x92
 8005f68:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005f6a:	1dfb      	adds	r3, r7, #7
 8005f6c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f72:	f107 0308 	add.w	r3, r7, #8
 8005f76:	2100      	movs	r1, #0
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fd57 	bl	8006a2c <hci_send_req>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da01      	bge.n	8005f88 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005f84:	23ff      	movs	r3, #255	; 0xff
 8005f86:	e000      	b.n	8005f8a <aci_gap_configure_whitelist+0x40>
  return status;
 8005f88:	79fb      	ldrb	r3, [r7, #7]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3720      	adds	r7, #32
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b0cc      	sub	sp, #304	; 0x130
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	4602      	mov	r2, r0
 8005f9a:	1dbb      	adds	r3, r7, #6
 8005f9c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8005f9e:	f107 0310 	add.w	r3, r7, #16
 8005fa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005fa6:	f107 030f 	add.w	r3, r7, #15
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005fb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fb8:	1dba      	adds	r2, r7, #6
 8005fba:	8812      	ldrh	r2, [r2, #0]
 8005fbc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fc2:	3302      	adds	r3, #2
 8005fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005fc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fcc:	2218      	movs	r2, #24
 8005fce:	2100      	movs	r1, #0
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fe67 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fd6:	233f      	movs	r3, #63	; 0x3f
 8005fd8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8005fdc:	2395      	movs	r3, #149	; 0x95
 8005fde:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005fe2:	f107 0310 	add.w	r3, r7, #16
 8005fe6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005fea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ff2:	f107 030f 	add.w	r3, r7, #15
 8005ff6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006000:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006004:	2100      	movs	r1, #0
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fd10 	bl	8006a2c <hci_send_req>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	da01      	bge.n	8006016 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 8006012:	23ff      	movs	r3, #255	; 0xff
 8006014:	e002      	b.n	800601c <aci_gap_allow_rebond+0x8a>
  return status;
 8006016:	f107 030f 	add.w	r3, r7, #15
 800601a:	781b      	ldrb	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8006026:	b580      	push	{r7, lr}
 8006028:	b0cc      	sub	sp, #304	; 0x130
 800602a:	af00      	add	r7, sp, #0
 800602c:	4602      	mov	r2, r0
 800602e:	1dbb      	adds	r3, r7, #6
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	1d7b      	adds	r3, r7, #5
 8006034:	460a      	mov	r2, r1
 8006036:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006038:	f107 0310 	add.w	r3, r7, #16
 800603c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006040:	f107 030f 	add.w	r3, r7, #15
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006048:	2300      	movs	r3, #0
 800604a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800604e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006052:	1dba      	adds	r2, r7, #6
 8006054:	8812      	ldrh	r2, [r2, #0]
 8006056:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006058:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800605c:	3302      	adds	r3, #2
 800605e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	1d7a      	adds	r2, r7, #5
 8006068:	7812      	ldrb	r2, [r2, #0]
 800606a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800606c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006070:	3301      	adds	r3, #1
 8006072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800607a:	2218      	movs	r2, #24
 800607c:	2100      	movs	r1, #0
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fe10 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006084:	233f      	movs	r3, #63	; 0x3f
 8006086:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800608a:	23a5      	movs	r3, #165	; 0xa5
 800608c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006090:	f107 0310 	add.w	r3, r7, #16
 8006094:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006098:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800609c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80060a0:	f107 030f 	add.w	r3, r7, #15
 80060a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fcb9 	bl	8006a2c <hci_send_req>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	da01      	bge.n	80060c4 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80060c0:	23ff      	movs	r3, #255	; 0xff
 80060c2:	e002      	b.n	80060ca <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80060c4:	f107 030f 	add.w	r3, r7, #15
 80060c8:	781b      	ldrb	r3, [r3, #0]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060de:	f107 0308 	add.w	r3, r7, #8
 80060e2:	2218      	movs	r2, #24
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fddc 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80060ec:	233f      	movs	r3, #63	; 0x3f
 80060ee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80060f0:	f240 1301 	movw	r3, #257	; 0x101
 80060f4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80060f6:	1dfb      	adds	r3, r7, #7
 80060f8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80060fa:	2301      	movs	r3, #1
 80060fc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060fe:	f107 0308 	add.w	r3, r7, #8
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f000 fc91 	bl	8006a2c <hci_send_req>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	da01      	bge.n	8006114 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006110:	23ff      	movs	r3, #255	; 0xff
 8006112:	e000      	b.n	8006116 <aci_gatt_init+0x42>
  return status;
 8006114:	79fb      	ldrb	r3, [r7, #7]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3720      	adds	r7, #32
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800611e:	b590      	push	{r4, r7, lr}
 8006120:	b0cf      	sub	sp, #316	; 0x13c
 8006122:	af00      	add	r7, sp, #0
 8006124:	4604      	mov	r4, r0
 8006126:	4638      	mov	r0, r7
 8006128:	6001      	str	r1, [r0, #0]
 800612a:	4610      	mov	r0, r2
 800612c:	4619      	mov	r1, r3
 800612e:	1dfb      	adds	r3, r7, #7
 8006130:	4622      	mov	r2, r4
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	1dbb      	adds	r3, r7, #6
 8006136:	4602      	mov	r2, r0
 8006138:	701a      	strb	r2, [r3, #0]
 800613a:	1d7b      	adds	r3, r7, #5
 800613c:	460a      	mov	r2, r1
 800613e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006140:	f107 0310 	add.w	r3, r7, #16
 8006144:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006148:	1dfb      	adds	r3, r7, #7
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d007      	beq.n	8006160 <aci_gatt_add_service+0x42>
 8006150:	1dfb      	adds	r3, r7, #7
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d101      	bne.n	800615c <aci_gatt_add_service+0x3e>
 8006158:	2311      	movs	r3, #17
 800615a:	e002      	b.n	8006162 <aci_gatt_add_service+0x44>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <aci_gatt_add_service+0x44>
 8006160:	2303      	movs	r3, #3
 8006162:	f107 0210 	add.w	r2, r7, #16
 8006166:	4413      	add	r3, r2
 8006168:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800616c:	f107 030c 	add.w	r3, r7, #12
 8006170:	2203      	movs	r2, #3
 8006172:	2100      	movs	r1, #0
 8006174:	4618      	mov	r0, r3
 8006176:	f000 fd95 	bl	8006ca4 <Osal_MemSet>
  int index_input = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006180:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006184:	1dfa      	adds	r2, r7, #7
 8006186:	7812      	ldrb	r2, [r2, #0]
 8006188:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800618a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800618e:	3301      	adds	r3, #1
 8006190:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8006194:	1dfb      	adds	r3, r7, #7
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d002      	beq.n	80061a2 <aci_gatt_add_service+0x84>
 800619c:	2b02      	cmp	r3, #2
 800619e:	d004      	beq.n	80061aa <aci_gatt_add_service+0x8c>
 80061a0:	e007      	b.n	80061b2 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80061a2:	2302      	movs	r3, #2
 80061a4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80061a8:	e005      	b.n	80061b6 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80061aa:	2310      	movs	r3, #16
 80061ac:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80061b0:	e001      	b.n	80061b6 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80061b2:	2347      	movs	r3, #71	; 0x47
 80061b4:	e05d      	b.n	8006272 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80061b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80061ba:	1c58      	adds	r0, r3, #1
 80061bc:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80061c0:	463b      	mov	r3, r7
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	f000 fd5e 	bl	8006c84 <Osal_MemCpy>
    index_input += size;
 80061c8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80061cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80061d0:	4413      	add	r3, r2
 80061d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80061d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061da:	1dba      	adds	r2, r7, #6
 80061dc:	7812      	ldrb	r2, [r2, #0]
 80061de:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80061e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061e4:	3301      	adds	r3, #1
 80061e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80061ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ee:	1d7a      	adds	r2, r7, #5
 80061f0:	7812      	ldrb	r2, [r2, #0]
 80061f2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80061f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006202:	2218      	movs	r2, #24
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fd4c 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800620c:	233f      	movs	r3, #63	; 0x3f
 800620e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8006212:	f44f 7381 	mov.w	r3, #258	; 0x102
 8006216:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800621a:	f107 0310 	add.w	r3, r7, #16
 800621e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006222:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006226:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800622a:	f107 030c 	add.w	r3, r7, #12
 800622e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8006232:	2303      	movs	r3, #3
 8006234:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006238:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fbf4 	bl	8006a2c <hci_send_req>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	da01      	bge.n	800624e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800624a:	23ff      	movs	r3, #255	; 0xff
 800624c:	e011      	b.n	8006272 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800624e:	f107 030c 	add.w	r3, r7, #12
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d003      	beq.n	8006260 <aci_gatt_add_service+0x142>
    return resp.Status;
 8006258:	f107 030c 	add.w	r3, r7, #12
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	e008      	b.n	8006272 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8006260:	f107 030c 	add.w	r3, r7, #12
 8006264:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006268:	b29a      	uxth	r2, r3
 800626a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800626e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006278:	46bd      	mov	sp, r7
 800627a:	bd90      	pop	{r4, r7, pc}

0800627c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b0d1      	sub	sp, #324	; 0x144
 8006280:	af00      	add	r7, sp, #0
 8006282:	4604      	mov	r4, r0
 8006284:	4608      	mov	r0, r1
 8006286:	f107 0108 	add.w	r1, r7, #8
 800628a:	600a      	str	r2, [r1, #0]
 800628c:	4619      	mov	r1, r3
 800628e:	f107 030e 	add.w	r3, r7, #14
 8006292:	4622      	mov	r2, r4
 8006294:	801a      	strh	r2, [r3, #0]
 8006296:	f107 030d 	add.w	r3, r7, #13
 800629a:	4602      	mov	r2, r0
 800629c:	701a      	strb	r2, [r3, #0]
 800629e:	1dbb      	adds	r3, r7, #6
 80062a0:	460a      	mov	r2, r1
 80062a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80062a4:	f107 0318 	add.w	r3, r7, #24
 80062a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80062ac:	f107 030d 	add.w	r3, r7, #13
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d008      	beq.n	80062c8 <aci_gatt_add_char+0x4c>
 80062b6:	f107 030d 	add.w	r3, r7, #13
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b02      	cmp	r3, #2
 80062be:	d101      	bne.n	80062c4 <aci_gatt_add_char+0x48>
 80062c0:	2313      	movs	r3, #19
 80062c2:	e002      	b.n	80062ca <aci_gatt_add_char+0x4e>
 80062c4:	2303      	movs	r3, #3
 80062c6:	e000      	b.n	80062ca <aci_gatt_add_char+0x4e>
 80062c8:	2305      	movs	r3, #5
 80062ca:	f107 0218 	add.w	r2, r7, #24
 80062ce:	4413      	add	r3, r2
 80062d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80062d4:	f107 0314 	add.w	r3, r7, #20
 80062d8:	2203      	movs	r2, #3
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fce1 	bl	8006ca4 <Osal_MemSet>
  int index_input = 0;
 80062e2:	2300      	movs	r3, #0
 80062e4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80062e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80062ec:	f107 020e 	add.w	r2, r7, #14
 80062f0:	8812      	ldrh	r2, [r2, #0]
 80062f2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80062f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062f8:	3302      	adds	r3, #2
 80062fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80062fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006302:	f107 020d 	add.w	r2, r7, #13
 8006306:	7812      	ldrb	r2, [r2, #0]
 8006308:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800630a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800630e:	3301      	adds	r3, #1
 8006310:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006314:	f107 030d 	add.w	r3, r7, #13
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d002      	beq.n	8006324 <aci_gatt_add_char+0xa8>
 800631e:	2b02      	cmp	r3, #2
 8006320:	d004      	beq.n	800632c <aci_gatt_add_char+0xb0>
 8006322:	e007      	b.n	8006334 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8006324:	2302      	movs	r3, #2
 8006326:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800632a:	e005      	b.n	8006338 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800632c:	2310      	movs	r3, #16
 800632e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006332:	e001      	b.n	8006338 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8006334:	2347      	movs	r3, #71	; 0x47
 8006336:	e086      	b.n	8006446 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006338:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800633c:	1cd8      	adds	r0, r3, #3
 800633e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8006342:	f107 0308 	add.w	r3, r7, #8
 8006346:	6819      	ldr	r1, [r3, #0]
 8006348:	f000 fc9c 	bl	8006c84 <Osal_MemCpy>
    index_input += size;
 800634c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006350:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8006354:	4413      	add	r3, r2
 8006356:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800635a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800635e:	1dba      	adds	r2, r7, #6
 8006360:	8812      	ldrh	r2, [r2, #0]
 8006362:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006364:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006368:	3302      	adds	r3, #2
 800636a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800636e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006372:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006376:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006378:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800637c:	3301      	adds	r3, #1
 800637e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006382:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006386:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800638a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800638c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006390:	3301      	adds	r3, #1
 8006392:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006396:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800639a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800639e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80063a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80063a4:	3301      	adds	r3, #1
 80063a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80063aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063ae:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80063b2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80063b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80063b8:	3301      	adds	r3, #1
 80063ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80063be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80063c2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80063c6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80063c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80063cc:	3301      	adds	r3, #1
 80063ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80063d6:	2218      	movs	r2, #24
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fc62 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80063e0:	233f      	movs	r3, #63	; 0x3f
 80063e2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80063e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80063ea:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80063ee:	f107 0318 	add.w	r3, r7, #24
 80063f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80063f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80063fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80063fe:	f107 0314 	add.w	r3, r7, #20
 8006402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006406:	2303      	movs	r3, #3
 8006408:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800640c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006410:	2100      	movs	r1, #0
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fb0a 	bl	8006a2c <hci_send_req>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	da01      	bge.n	8006422 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800641e:	23ff      	movs	r3, #255	; 0xff
 8006420:	e011      	b.n	8006446 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8006422:	f107 0314 	add.w	r3, r7, #20
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800642c:	f107 0314 	add.w	r3, r7, #20
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	e008      	b.n	8006446 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8006434:	f107 0314 	add.w	r3, r7, #20
 8006438:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800643c:	b29a      	uxth	r2, r3
 800643e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006442:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800644c:	46bd      	mov	sp, r7
 800644e:	bd90      	pop	{r4, r7, pc}

08006450 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006450:	b5b0      	push	{r4, r5, r7, lr}
 8006452:	b0cc      	sub	sp, #304	; 0x130
 8006454:	af00      	add	r7, sp, #0
 8006456:	4605      	mov	r5, r0
 8006458:	460c      	mov	r4, r1
 800645a:	4610      	mov	r0, r2
 800645c:	4619      	mov	r1, r3
 800645e:	1dbb      	adds	r3, r7, #6
 8006460:	462a      	mov	r2, r5
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	1d3b      	adds	r3, r7, #4
 8006466:	4622      	mov	r2, r4
 8006468:	801a      	strh	r2, [r3, #0]
 800646a:	1cfb      	adds	r3, r7, #3
 800646c:	4602      	mov	r2, r0
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	1cbb      	adds	r3, r7, #2
 8006472:	460a      	mov	r2, r1
 8006474:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006476:	f107 0310 	add.w	r3, r7, #16
 800647a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800647e:	f107 030f 	add.w	r3, r7, #15
 8006482:	2200      	movs	r2, #0
 8006484:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800648c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006490:	1dba      	adds	r2, r7, #6
 8006492:	8812      	ldrh	r2, [r2, #0]
 8006494:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800649a:	3302      	adds	r3, #2
 800649c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80064a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064a4:	1d3a      	adds	r2, r7, #4
 80064a6:	8812      	ldrh	r2, [r2, #0]
 80064a8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80064aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064ae:	3302      	adds	r3, #2
 80064b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80064b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b8:	1cfa      	adds	r2, r7, #3
 80064ba:	7812      	ldrb	r2, [r2, #0]
 80064bc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80064be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064c2:	3301      	adds	r3, #1
 80064c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80064c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064cc:	1cba      	adds	r2, r7, #2
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80064d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80064d6:	3301      	adds	r3, #1
 80064d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80064dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064e0:	1d98      	adds	r0, r3, #6
 80064e2:	1cbb      	adds	r3, r7, #2
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80064ec:	f000 fbca 	bl	8006c84 <Osal_MemCpy>
  index_input += Char_Value_Length;
 80064f0:	1cbb      	adds	r3, r7, #2
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80064f8:	4413      	add	r3, r2
 80064fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80064fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006502:	2218      	movs	r2, #24
 8006504:	2100      	movs	r1, #0
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fbcc 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800650c:	233f      	movs	r3, #63	; 0x3f
 800650e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8006512:	f44f 7383 	mov.w	r3, #262	; 0x106
 8006516:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800651a:	f107 0310 	add.w	r3, r7, #16
 800651e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006522:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006526:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800652a:	f107 030f 	add.w	r3, r7, #15
 800652e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006532:	2301      	movs	r3, #1
 8006534:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006538:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800653c:	2100      	movs	r1, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fa74 	bl	8006a2c <hci_send_req>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	da01      	bge.n	800654e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800654a:	23ff      	movs	r3, #255	; 0xff
 800654c:	e002      	b.n	8006554 <aci_gatt_update_char_value+0x104>
  return status;
 800654e:	f107 030f 	add.w	r3, r7, #15
 8006552:	781b      	ldrb	r3, [r3, #0]
}
 8006554:	4618      	mov	r0, r3
 8006556:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800655a:	46bd      	mov	sp, r7
 800655c:	bdb0      	pop	{r4, r5, r7, pc}

0800655e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b0cc      	sub	sp, #304	; 0x130
 8006562:	af00      	add	r7, sp, #0
 8006564:	463b      	mov	r3, r7
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	1dfb      	adds	r3, r7, #7
 800656a:	4602      	mov	r2, r0
 800656c:	701a      	strb	r2, [r3, #0]
 800656e:	1dbb      	adds	r3, r7, #6
 8006570:	460a      	mov	r2, r1
 8006572:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006574:	f107 0310 	add.w	r3, r7, #16
 8006578:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800657c:	f107 030f 	add.w	r3, r7, #15
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800658a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800658e:	1dfa      	adds	r2, r7, #7
 8006590:	7812      	ldrb	r2, [r2, #0]
 8006592:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006594:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006598:	3301      	adds	r3, #1
 800659a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800659e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a2:	1dba      	adds	r2, r7, #6
 80065a4:	7812      	ldrb	r2, [r2, #0]
 80065a6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80065a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065ac:	3301      	adds	r3, #1
 80065ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80065b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b6:	1c98      	adds	r0, r3, #2
 80065b8:	1dbb      	adds	r3, r7, #6
 80065ba:	781a      	ldrb	r2, [r3, #0]
 80065bc:	463b      	mov	r3, r7
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	f000 fb60 	bl	8006c84 <Osal_MemCpy>
  index_input += Length;
 80065c4:	1dbb      	adds	r3, r7, #6
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80065cc:	4413      	add	r3, r2
 80065ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80065d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065d6:	2218      	movs	r2, #24
 80065d8:	2100      	movs	r1, #0
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fb62 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 80065e0:	233f      	movs	r3, #63	; 0x3f
 80065e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80065e6:	230c      	movs	r3, #12
 80065e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80065ec:	f107 0310 	add.w	r3, r7, #16
 80065f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80065f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80065fc:	f107 030f 	add.w	r3, r7, #15
 8006600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006604:	2301      	movs	r3, #1
 8006606:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800660a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800660e:	2100      	movs	r1, #0
 8006610:	4618      	mov	r0, r3
 8006612:	f000 fa0b 	bl	8006a2c <hci_send_req>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	da01      	bge.n	8006620 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800661c:	23ff      	movs	r3, #255	; 0xff
 800661e:	e002      	b.n	8006626 <aci_hal_write_config_data+0xc8>
  return status;
 8006620:	f107 030f 	add.w	r3, r7, #15
 8006624:	781b      	ldrb	r3, [r3, #0]
}
 8006626:	4618      	mov	r0, r3
 8006628:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b0cc      	sub	sp, #304	; 0x130
 8006634:	af00      	add	r7, sp, #0
 8006636:	4602      	mov	r2, r0
 8006638:	1dfb      	adds	r3, r7, #7
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	1dbb      	adds	r3, r7, #6
 800663e:	460a      	mov	r2, r1
 8006640:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006642:	f107 0310 	add.w	r3, r7, #16
 8006646:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800664a:	f107 030f 	add.w	r3, r7, #15
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006652:	2300      	movs	r3, #0
 8006654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8006658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665c:	1dfa      	adds	r2, r7, #7
 800665e:	7812      	ldrb	r2, [r2, #0]
 8006660:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006666:	3301      	adds	r3, #1
 8006668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800666c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006670:	1dba      	adds	r2, r7, #6
 8006672:	7812      	ldrb	r2, [r2, #0]
 8006674:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006676:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800667a:	3301      	adds	r3, #1
 800667c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006680:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006684:	2218      	movs	r2, #24
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fb0b 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800668e:	233f      	movs	r3, #63	; 0x3f
 8006690:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006694:	230f      	movs	r3, #15
 8006696:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800669a:	f107 0310 	add.w	r3, r7, #16
 800669e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80066a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80066aa:	f107 030f 	add.w	r3, r7, #15
 80066ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80066b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80066bc:	2100      	movs	r1, #0
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f9b4 	bl	8006a2c <hci_send_req>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	da01      	bge.n	80066ce <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80066ca:	23ff      	movs	r3, #255	; 0xff
 80066cc:	e002      	b.n	80066d4 <aci_hal_set_tx_power_level+0xa4>
  return status;
 80066ce:	f107 030f 	add.w	r3, r7, #15
 80066d2:	781b      	ldrb	r3, [r3, #0]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b0cc      	sub	sp, #304	; 0x130
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	4602      	mov	r2, r0
 80066e6:	1dbb      	adds	r3, r7, #6
 80066e8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80066ea:	f107 0310 	add.w	r3, r7, #16
 80066ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80066f2:	f107 030f 	add.w	r3, r7, #15
 80066f6:	2200      	movs	r2, #0
 80066f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006704:	1dba      	adds	r2, r7, #6
 8006706:	8812      	ldrh	r2, [r2, #0]
 8006708:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800670a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800670e:	3302      	adds	r3, #2
 8006710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006718:	2218      	movs	r2, #24
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fac1 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006722:	233f      	movs	r3, #63	; 0x3f
 8006724:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006728:	2318      	movs	r3, #24
 800672a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800672e:	f107 0310 	add.w	r3, r7, #16
 8006732:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800673a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800673e:	f107 030f 	add.w	r3, r7, #15
 8006742:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006746:	2301      	movs	r3, #1
 8006748:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800674c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f96a 	bl	8006a2c <hci_send_req>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	da01      	bge.n	8006762 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800675e:	23ff      	movs	r3, #255	; 0xff
 8006760:	e002      	b.n	8006768 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8006762:	f107 030f 	add.w	r3, r7, #15
 8006766:	781b      	ldrb	r3, [r3, #0]
}
 8006768:	4618      	mov	r0, r3
 800676a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b088      	sub	sp, #32
 8006776:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006778:	2300      	movs	r3, #0
 800677a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800677c:	f107 0308 	add.w	r3, r7, #8
 8006780:	2218      	movs	r2, #24
 8006782:	2100      	movs	r1, #0
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fa8d 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x03;
 800678a:	2303      	movs	r3, #3
 800678c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800678e:	2303      	movs	r3, #3
 8006790:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006792:	1dfb      	adds	r3, r7, #7
 8006794:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006796:	2301      	movs	r3, #1
 8006798:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800679a:	f107 0308 	add.w	r3, r7, #8
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f000 f943 	bl	8006a2c <hci_send_req>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	da01      	bge.n	80067b0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80067ac:	23ff      	movs	r3, #255	; 0xff
 80067ae:	e000      	b.n	80067b2 <hci_reset+0x40>
  return status;
 80067b0:	79fb      	ldrb	r3, [r7, #7]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b0ce      	sub	sp, #312	; 0x138
 80067be:	af00      	add	r7, sp, #0
 80067c0:	f107 0308 	add.w	r3, r7, #8
 80067c4:	6019      	str	r1, [r3, #0]
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	f107 030e 	add.w	r3, r7, #14
 80067ce:	4602      	mov	r2, r0
 80067d0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80067d2:	f107 0318 	add.w	r3, r7, #24
 80067d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80067da:	f107 0310 	add.w	r3, r7, #16
 80067de:	2205      	movs	r2, #5
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fa5e 	bl	8006ca4 <Osal_MemSet>
  int index_input = 0;
 80067e8:	2300      	movs	r3, #0
 80067ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80067ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067f2:	f107 020e 	add.w	r2, r7, #14
 80067f6:	8812      	ldrh	r2, [r2, #0]
 80067f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80067fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80067fe:	3302      	adds	r3, #2
 8006800:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006804:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006808:	2218      	movs	r2, #24
 800680a:	2100      	movs	r1, #0
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fa49 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x08;
 8006812:	2308      	movs	r3, #8
 8006814:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8006818:	2330      	movs	r3, #48	; 0x30
 800681a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800681e:	f107 0318 	add.w	r3, r7, #24
 8006822:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006826:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800682a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006836:	2305      	movs	r3, #5
 8006838:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800683c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006840:	2100      	movs	r1, #0
 8006842:	4618      	mov	r0, r3
 8006844:	f000 f8f2 	bl	8006a2c <hci_send_req>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	da01      	bge.n	8006852 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800684e:	23ff      	movs	r3, #255	; 0xff
 8006850:	e016      	b.n	8006880 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8006852:	f107 0310 	add.w	r3, r7, #16
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <hci_le_read_phy+0xaa>
    return resp.Status;
 800685c:	f107 0310 	add.w	r3, r7, #16
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	e00d      	b.n	8006880 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8006864:	f107 0310 	add.w	r3, r7, #16
 8006868:	78da      	ldrb	r2, [r3, #3]
 800686a:	f107 0308 	add.w	r3, r7, #8
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8006872:	f107 0310 	add.w	r3, r7, #16
 8006876:	791a      	ldrb	r2, [r3, #4]
 8006878:	1d3b      	adds	r3, r7, #4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800688a:	b590      	push	{r4, r7, lr}
 800688c:	b0cd      	sub	sp, #308	; 0x134
 800688e:	af00      	add	r7, sp, #0
 8006890:	4604      	mov	r4, r0
 8006892:	4608      	mov	r0, r1
 8006894:	4611      	mov	r1, r2
 8006896:	1dfb      	adds	r3, r7, #7
 8006898:	4622      	mov	r2, r4
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	1dbb      	adds	r3, r7, #6
 800689e:	4602      	mov	r2, r0
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	1d7b      	adds	r3, r7, #5
 80068a4:	460a      	mov	r2, r1
 80068a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80068a8:	f107 0310 	add.w	r3, r7, #16
 80068ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80068b0:	f107 030f 	add.w	r3, r7, #15
 80068b4:	2200      	movs	r2, #0
 80068b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80068be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c2:	1dfa      	adds	r2, r7, #7
 80068c4:	7812      	ldrb	r2, [r2, #0]
 80068c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80068c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068cc:	3301      	adds	r3, #1
 80068ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80068d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d6:	1dba      	adds	r2, r7, #6
 80068d8:	7812      	ldrb	r2, [r2, #0]
 80068da:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80068dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068e0:	3301      	adds	r3, #1
 80068e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80068e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ea:	1d7a      	adds	r2, r7, #5
 80068ec:	7812      	ldrb	r2, [r2, #0]
 80068ee:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80068f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068f4:	3301      	adds	r3, #1
 80068f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068fe:	2218      	movs	r2, #24
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f000 f9ce 	bl	8006ca4 <Osal_MemSet>
  rq.ogf = 0x08;
 8006908:	2308      	movs	r3, #8
 800690a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800690e:	2331      	movs	r3, #49	; 0x31
 8006910:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006914:	f107 0310 	add.w	r3, r7, #16
 8006918:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800691c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006920:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006924:	f107 030f 	add.w	r3, r7, #15
 8006928:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800692c:	2301      	movs	r3, #1
 800692e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006936:	2100      	movs	r1, #0
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f877 	bl	8006a2c <hci_send_req>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	da01      	bge.n	8006948 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006944:	23ff      	movs	r3, #255	; 0xff
 8006946:	e002      	b.n	800694e <hci_le_set_default_phy+0xc4>
  return status;
 8006948:	f107 030f 	add.w	r3, r7, #15
 800694c:	781b      	ldrb	r3, [r3, #0]
}
 800694e:	4618      	mov	r0, r3
 8006950:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006954:	46bd      	mov	sp, r7
 8006956:	bd90      	pop	{r4, r7, pc}

08006958 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	4a08      	ldr	r2, [pc, #32]	; (8006988 <hci_init+0x30>)
 8006968:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800696a:	4a08      	ldr	r2, [pc, #32]	; (800698c <hci_init+0x34>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006970:	4806      	ldr	r0, [pc, #24]	; (800698c <hci_init+0x34>)
 8006972:	f000 f973 	bl	8006c5c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 f8d4 	bl	8006b28 <TlInit>

  return;
 8006980:	bf00      	nop
}
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	20000218 	.word	0x20000218
 800698c:	200001f0 	.word	0x200001f0

08006990 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006996:	4822      	ldr	r0, [pc, #136]	; (8006a20 <hci_user_evt_proc+0x90>)
 8006998:	f000 fcb6 	bl	8007308 <LST_is_empty>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d12b      	bne.n	80069fa <hci_user_evt_proc+0x6a>
 80069a2:	4b20      	ldr	r3, [pc, #128]	; (8006a24 <hci_user_evt_proc+0x94>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d027      	beq.n	80069fa <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80069aa:	f107 030c 	add.w	r3, r7, #12
 80069ae:	4619      	mov	r1, r3
 80069b0:	481b      	ldr	r0, [pc, #108]	; (8006a20 <hci_user_evt_proc+0x90>)
 80069b2:	f000 fd38 	bl	8007426 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80069b6:	4b1c      	ldr	r3, [pc, #112]	; (8006a28 <hci_user_evt_proc+0x98>)
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00c      	beq.n	80069d8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80069c2:	2301      	movs	r3, #1
 80069c4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80069c6:	4b18      	ldr	r3, [pc, #96]	; (8006a28 <hci_user_evt_proc+0x98>)
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	1d3a      	adds	r2, r7, #4
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80069d0:	793a      	ldrb	r2, [r7, #4]
 80069d2:	4b14      	ldr	r3, [pc, #80]	; (8006a24 <hci_user_evt_proc+0x94>)
 80069d4:	701a      	strb	r2, [r3, #0]
 80069d6:	e002      	b.n	80069de <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80069d8:	4b12      	ldr	r3, [pc, #72]	; (8006a24 <hci_user_evt_proc+0x94>)
 80069da:	2201      	movs	r2, #1
 80069dc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <hci_user_evt_proc+0x94>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d004      	beq.n	80069f0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 ffd3 	bl	8007994 <TL_MM_EvtDone>
 80069ee:	e004      	b.n	80069fa <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4619      	mov	r1, r3
 80069f4:	480a      	ldr	r0, [pc, #40]	; (8006a20 <hci_user_evt_proc+0x90>)
 80069f6:	f000 fca9 	bl	800734c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80069fa:	4809      	ldr	r0, [pc, #36]	; (8006a20 <hci_user_evt_proc+0x90>)
 80069fc:	f000 fc84 	bl	8007308 <LST_is_empty>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d107      	bne.n	8006a16 <hci_user_evt_proc+0x86>
 8006a06:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <hci_user_evt_proc+0x94>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006a0e:	4804      	ldr	r0, [pc, #16]	; (8006a20 <hci_user_evt_proc+0x90>)
 8006a10:	f001 fbcf 	bl	80081b2 <hci_notify_asynch_evt>
  }


  return;
 8006a14:	bf00      	nop
 8006a16:	bf00      	nop
}
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	200000e0 	.word	0x200000e0
 8006a24:	200000ec 	.word	0x200000ec
 8006a28:	200001f0 	.word	0x200001f0

08006a2c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	460b      	mov	r3, r1
 8006a36:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006a38:	2000      	movs	r0, #0
 8006a3a:	f000 f8cb 	bl	8006bd4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	885b      	ldrh	r3, [r3, #2]
 8006a46:	b21b      	sxth	r3, r3
 8006a48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a4c:	b21a      	sxth	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	029b      	lsls	r3, r3, #10
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	b2d9      	uxtb	r1, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	689a      	ldr	r2, [r3, #8]
 8006a66:	8bbb      	ldrh	r3, [r7, #28]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f88d 	bl	8006b88 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006a6e:	e04e      	b.n	8006b0e <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006a70:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006a74:	f001 fbb4 	bl	80081e0 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006a78:	e043      	b.n	8006b02 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006a7a:	f107 030c 	add.w	r3, r7, #12
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4828      	ldr	r0, [pc, #160]	; (8006b24 <hci_send_req+0xf8>)
 8006a82:	f000 fcd0 	bl	8007426 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	7a5b      	ldrb	r3, [r3, #9]
 8006a8a:	2b0f      	cmp	r3, #15
 8006a8c:	d114      	bne.n	8006ab8 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	330b      	adds	r3, #11
 8006a92:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	885b      	ldrh	r3, [r3, #2]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8bba      	ldrh	r2, [r7, #28]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d104      	bne.n	8006aaa <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	7812      	ldrb	r2, [r2, #0]
 8006aa8:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d027      	beq.n	8006b02 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e024      	b.n	8006b02 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	330b      	adds	r3, #11
 8006abc:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	8bba      	ldrh	r2, [r7, #28]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d114      	bne.n	8006af6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	7a9b      	ldrb	r3, [r3, #10]
 8006ad0:	3b03      	subs	r3, #3
 8006ad2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	695a      	ldr	r2, [r3, #20]
 8006ad8:	7dfb      	ldrb	r3, [r7, #23]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	bfa8      	it	ge
 8006ade:	461a      	movge	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6918      	ldr	r0, [r3, #16]
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	1cd9      	adds	r1, r3, #3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	461a      	mov	r2, r3
 8006af2:	f002 f997 	bl	8008e24 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006afe:	2301      	movs	r3, #1
 8006b00:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006b02:	4808      	ldr	r0, [pc, #32]	; (8006b24 <hci_send_req+0xf8>)
 8006b04:	f000 fc00 	bl	8007308 <LST_is_empty>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0b5      	beq.n	8006a7a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006b0e:	7ffb      	ldrb	r3, [r7, #31]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0ad      	beq.n	8006a70 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006b14:	2001      	movs	r0, #1
 8006b16:	f000 f85d 	bl	8006bd4 <NotifyCmdStatus>

  return 0;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3720      	adds	r7, #32
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000210 	.word	0x20000210

08006b28 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006b30:	480f      	ldr	r0, [pc, #60]	; (8006b70 <TlInit+0x48>)
 8006b32:	f000 fbd9 	bl	80072e8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006b36:	4a0f      	ldr	r2, [pc, #60]	; (8006b74 <TlInit+0x4c>)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006b3c:	480e      	ldr	r0, [pc, #56]	; (8006b78 <TlInit+0x50>)
 8006b3e:	f000 fbd3 	bl	80072e8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006b42:	4b0e      	ldr	r3, [pc, #56]	; (8006b7c <TlInit+0x54>)
 8006b44:	2201      	movs	r2, #1
 8006b46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006b48:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <TlInit+0x58>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d00a      	beq.n	8006b66 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006b54:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <TlInit+0x5c>)
 8006b56:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006b58:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <TlInit+0x58>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f107 0208 	add.w	r2, r7, #8
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
  }

  return;
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
}
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000210 	.word	0x20000210
 8006b74:	200000e8 	.word	0x200000e8
 8006b78:	200000e0 	.word	0x200000e0
 8006b7c:	200000ec 	.word	0x200000ec
 8006b80:	200001f0 	.word	0x200001f0
 8006b84:	08006c15 	.word	0x08006c15

08006b88 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	603a      	str	r2, [r7, #0]
 8006b92:	80fb      	strh	r3, [r7, #6]
 8006b94:	460b      	mov	r3, r1
 8006b96:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006b98:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <SendCmd+0x44>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	88fa      	ldrh	r2, [r7, #6]
 8006b9e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <SendCmd+0x44>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	797a      	ldrb	r2, [r7, #5]
 8006ba8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006baa:	4b08      	ldr	r3, [pc, #32]	; (8006bcc <SendCmd+0x44>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	330c      	adds	r3, #12
 8006bb0:	797a      	ldrb	r2, [r7, #5]
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f002 f935 	bl	8008e24 <memcpy>

  hciContext.io.Send(0,0);
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <SendCmd+0x48>)
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	4798      	blx	r3

  return;
 8006bc4:	bf00      	nop
}
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	200000e8 	.word	0x200000e8
 8006bd0:	200001f0 	.word	0x200001f0

08006bd4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006be4:	4b0a      	ldr	r3, [pc, #40]	; (8006c10 <NotifyCmdStatus+0x3c>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00d      	beq.n	8006c08 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006bec:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <NotifyCmdStatus+0x3c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006bf4:	e008      	b.n	8006c08 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <NotifyCmdStatus+0x3c>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006bfe:	4b04      	ldr	r3, [pc, #16]	; (8006c10 <NotifyCmdStatus+0x3c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2001      	movs	r0, #1
 8006c04:	4798      	blx	r3
  return;
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
}
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000218 	.word	0x20000218

08006c14 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	7a5b      	ldrb	r3, [r3, #9]
 8006c20:	2b0f      	cmp	r3, #15
 8006c22:	d003      	beq.n	8006c2c <TlEvtReceived+0x18>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	7a5b      	ldrb	r3, [r3, #9]
 8006c28:	2b0e      	cmp	r3, #14
 8006c2a:	d107      	bne.n	8006c3c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4809      	ldr	r0, [pc, #36]	; (8006c54 <TlEvtReceived+0x40>)
 8006c30:	f000 fbb2 	bl	8007398 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006c34:	2000      	movs	r0, #0
 8006c36:	f001 fac8 	bl	80081ca <hci_cmd_resp_release>
 8006c3a:	e006      	b.n	8006c4a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4806      	ldr	r0, [pc, #24]	; (8006c58 <TlEvtReceived+0x44>)
 8006c40:	f000 fbaa 	bl	8007398 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006c44:	4804      	ldr	r0, [pc, #16]	; (8006c58 <TlEvtReceived+0x44>)
 8006c46:	f001 fab4 	bl	80081b2 <hci_notify_asynch_evt>
  }

  return;
 8006c4a:	bf00      	nop
}
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	20000210 	.word	0x20000210
 8006c58:	200000e0 	.word	0x200000e0

08006c5c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a05      	ldr	r2, [pc, #20]	; (8006c7c <hci_register_io_bus+0x20>)
 8006c68:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a04      	ldr	r2, [pc, #16]	; (8006c80 <hci_register_io_bus+0x24>)
 8006c6e:	611a      	str	r2, [r3, #16]

  return;
 8006c70:	bf00      	nop
}
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	0800770d 	.word	0x0800770d
 8006c80:	08007775 	.word	0x08007775

08006c84 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	60f8      	str	r0, [r7, #12]
 8006c8c:	60b9      	str	r1, [r7, #8]
 8006c8e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	68b9      	ldr	r1, [r7, #8]
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f002 f8c5 	bl	8008e24 <memcpy>
 8006c9a:	4603      	mov	r3, r0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3710      	adds	r7, #16
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68b9      	ldr	r1, [r7, #8]
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f002 f8c3 	bl	8008e40 <memset>
 8006cba:	4603      	mov	r3, r0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	4603      	mov	r3, r0
 8006ccc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006cce:	4b0f      	ldr	r3, [pc, #60]	; (8006d0c <OTP_Read+0x48>)
 8006cd0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006cd2:	e002      	b.n	8006cda <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	3b08      	subs	r3, #8
 8006cd8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	3307      	adds	r3, #7
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	79fa      	ldrb	r2, [r7, #7]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d003      	beq.n	8006cee <OTP_Read+0x2a>
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a09      	ldr	r2, [pc, #36]	; (8006d10 <OTP_Read+0x4c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d1f2      	bne.n	8006cd4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3307      	adds	r3, #7
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	79fa      	ldrb	r2, [r7, #7]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d001      	beq.n	8006cfe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	1fff73f8 	.word	0x1fff73f8
 8006d10:	1fff7000 	.word	0x1fff7000

08006d14 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3301      	adds	r3, #1
 8006d26:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2bff      	cmp	r3, #255	; 0xff
 8006d2e:	d165      	bne.n	8006dfc <PeerToPeer_Event_Handler+0xe8>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	3302      	adds	r3, #2
 8006d34:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f640 4301 	movw	r3, #3073	; 0xc01
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d156      	bne.n	8006df4 <PeerToPeer_Event_Handler+0xe0>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	3302      	adds	r3, #2
 8006d4a:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	885b      	ldrh	r3, [r3, #2]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	461a      	mov	r2, r3
 8006d54:	4b2d      	ldr	r3, [pc, #180]	; (8006e0c <PeerToPeer_Event_Handler+0xf8>)
 8006d56:	889b      	ldrh	r3, [r3, #4]
 8006d58:	3302      	adds	r3, #2
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d118      	bne.n	8006d90 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	7a1b      	ldrb	r3, [r3, #8]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8006d70:	2300      	movs	r3, #0
 8006d72:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006d74:	f107 0308 	add.w	r3, r7, #8
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fa73 	bl	8008264 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8006d7e:	e03b      	b.n	8006df8 <PeerToPeer_Event_Handler+0xe4>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8006d80:	2301      	movs	r3, #1
 8006d82:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006d84:	f107 0308 	add.w	r3, r7, #8
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fa6b 	bl	8008264 <P2PS_STM_App_Notification>
        break;
 8006d8e:	e033      	b.n	8006df8 <PeerToPeer_Event_Handler+0xe4>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PReadServerToClientCharHdle + 1)) {
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	885b      	ldrh	r3, [r3, #2]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	461a      	mov	r2, r3
 8006d98:	4b1c      	ldr	r3, [pc, #112]	; (8006e0c <PeerToPeer_Event_Handler+0xf8>)
 8006d9a:	88db      	ldrh	r3, [r3, #6]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d10f      	bne.n	8006dc2 <PeerToPeer_Event_Handler+0xae>
            	Notification.P2P_Evt_Opcode = P2PS_STM_READ_EVT;
 8006da2:	2302      	movs	r3, #2
 8006da4:	723b      	strb	r3, [r7, #8]
            	Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	88db      	ldrh	r3, [r3, #6]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	743b      	strb	r3, [r7, #16]
            	Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	3308      	adds	r3, #8
 8006db4:	60fb      	str	r3, [r7, #12]
            	P2PS_STM_App_Notification(&Notification);
 8006db6:	f107 0308 	add.w	r3, r7, #8
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f001 fa52 	bl	8008264 <P2PS_STM_App_Notification>
        break;
 8006dc0:	e01a      	b.n	8006df8 <PeerToPeer_Event_Handler+0xe4>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8006dc2:	69bb      	ldr	r3, [r7, #24]
 8006dc4:	885b      	ldrh	r3, [r3, #2]
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <PeerToPeer_Event_Handler+0xf8>)
 8006dcc:	885b      	ldrh	r3, [r3, #2]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d111      	bne.n	8006df8 <PeerToPeer_Event_Handler+0xe4>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	88db      	ldrh	r3, [r3, #6]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	3308      	adds	r3, #8
 8006de6:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8006de8:	f107 0308 	add.w	r3, r7, #8
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 fa39 	bl	8008264 <P2PS_STM_App_Notification>
        break;
 8006df2:	e001      	b.n	8006df8 <PeerToPeer_Event_Handler+0xe4>

        default:
          break;
 8006df4:	bf00      	nop
 8006df6:	e002      	b.n	8006dfe <PeerToPeer_Event_Handler+0xea>
        break;
 8006df8:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006dfa:	e000      	b.n	8006dfe <PeerToPeer_Event_Handler+0xea>

    default:
      break;
 8006dfc:	bf00      	nop
  }

  return(return_value);
 8006dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8006e02:	4618      	mov	r0, r3
 8006e04:	3728      	adds	r7, #40	; 0x28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	200000f0 	.word	0x200000f0

08006e10 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	; 0x28
 8006e14:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8006e16:	4864      	ldr	r0, [pc, #400]	; (8006fa8 <P2PS_STM_Init+0x198>)
 8006e18:	f000 fbca 	bl	80075b0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8006e1c:	238f      	movs	r3, #143	; 0x8f
 8006e1e:	703b      	strb	r3, [r7, #0]
 8006e20:	23e5      	movs	r3, #229	; 0xe5
 8006e22:	707b      	strb	r3, [r7, #1]
 8006e24:	23b3      	movs	r3, #179	; 0xb3
 8006e26:	70bb      	strb	r3, [r7, #2]
 8006e28:	23d5      	movs	r3, #213	; 0xd5
 8006e2a:	70fb      	strb	r3, [r7, #3]
 8006e2c:	232e      	movs	r3, #46	; 0x2e
 8006e2e:	713b      	strb	r3, [r7, #4]
 8006e30:	237f      	movs	r3, #127	; 0x7f
 8006e32:	717b      	strb	r3, [r7, #5]
 8006e34:	234a      	movs	r3, #74	; 0x4a
 8006e36:	71bb      	strb	r3, [r7, #6]
 8006e38:	2398      	movs	r3, #152	; 0x98
 8006e3a:	71fb      	strb	r3, [r7, #7]
 8006e3c:	232a      	movs	r3, #42	; 0x2a
 8006e3e:	723b      	strb	r3, [r7, #8]
 8006e40:	2348      	movs	r3, #72	; 0x48
 8006e42:	727b      	strb	r3, [r7, #9]
 8006e44:	237a      	movs	r3, #122	; 0x7a
 8006e46:	72bb      	strb	r3, [r7, #10]
 8006e48:	23cc      	movs	r3, #204	; 0xcc
 8006e4a:	72fb      	strb	r3, [r7, #11]
 8006e4c:	2340      	movs	r3, #64	; 0x40
 8006e4e:	733b      	strb	r3, [r7, #12]
 8006e50:	23fe      	movs	r3, #254	; 0xfe
 8006e52:	737b      	strb	r3, [r7, #13]
 8006e54:	2300      	movs	r3, #0
 8006e56:	73bb      	strb	r3, [r7, #14]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	4b53      	ldr	r3, [pc, #332]	; (8006fac <P2PS_STM_Init+0x19c>)
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	2308      	movs	r3, #8
 8006e64:	2201      	movs	r2, #1
 8006e66:	2002      	movs	r0, #2
 8006e68:	f7ff f959 	bl	800611e <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8006e6c:	2319      	movs	r3, #25
 8006e6e:	703b      	strb	r3, [r7, #0]
 8006e70:	23ed      	movs	r3, #237	; 0xed
 8006e72:	707b      	strb	r3, [r7, #1]
 8006e74:	2382      	movs	r3, #130	; 0x82
 8006e76:	70bb      	strb	r3, [r7, #2]
 8006e78:	23ae      	movs	r3, #174	; 0xae
 8006e7a:	70fb      	strb	r3, [r7, #3]
 8006e7c:	23ed      	movs	r3, #237	; 0xed
 8006e7e:	713b      	strb	r3, [r7, #4]
 8006e80:	2321      	movs	r3, #33	; 0x21
 8006e82:	717b      	strb	r3, [r7, #5]
 8006e84:	234c      	movs	r3, #76	; 0x4c
 8006e86:	71bb      	strb	r3, [r7, #6]
 8006e88:	239d      	movs	r3, #157	; 0x9d
 8006e8a:	71fb      	strb	r3, [r7, #7]
 8006e8c:	2341      	movs	r3, #65	; 0x41
 8006e8e:	723b      	strb	r3, [r7, #8]
 8006e90:	2345      	movs	r3, #69	; 0x45
 8006e92:	727b      	strb	r3, [r7, #9]
 8006e94:	2322      	movs	r3, #34	; 0x22
 8006e96:	72bb      	strb	r3, [r7, #10]
 8006e98:	238e      	movs	r3, #142	; 0x8e
 8006e9a:	72fb      	strb	r3, [r7, #11]
 8006e9c:	2341      	movs	r3, #65	; 0x41
 8006e9e:	733b      	strb	r3, [r7, #12]
 8006ea0:	23fe      	movs	r3, #254	; 0xfe
 8006ea2:	737b      	strb	r3, [r7, #13]
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73bb      	strb	r3, [r7, #14]
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006eac:	4b3f      	ldr	r3, [pc, #252]	; (8006fac <P2PS_STM_Init+0x19c>)
 8006eae:	8818      	ldrh	r0, [r3, #0]
 8006eb0:	463a      	mov	r2, r7
 8006eb2:	4b3f      	ldr	r3, [pc, #252]	; (8006fb0 <P2PS_STM_Init+0x1a0>)
 8006eb4:	9305      	str	r3, [sp, #20]
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	9304      	str	r3, [sp, #16]
 8006eba:	230a      	movs	r3, #10
 8006ebc:	9303      	str	r3, [sp, #12]
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	9302      	str	r3, [sp, #8]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	2306      	movs	r3, #6
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	2302      	movs	r3, #2
 8006ecc:	2102      	movs	r1, #2
 8006ece:	f7ff f9d5 	bl	800627c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8006ed2:	231b      	movs	r3, #27
 8006ed4:	703b      	strb	r3, [r7, #0]
 8006ed6:	23c5      	movs	r3, #197	; 0xc5
 8006ed8:	707b      	strb	r3, [r7, #1]
 8006eda:	23d5      	movs	r3, #213	; 0xd5
 8006edc:	70bb      	strb	r3, [r7, #2]
 8006ede:	23a5      	movs	r3, #165	; 0xa5
 8006ee0:	70fb      	strb	r3, [r7, #3]
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	713b      	strb	r3, [r7, #4]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	717b      	strb	r3, [r7, #5]
 8006eea:	2336      	movs	r3, #54	; 0x36
 8006eec:	71bb      	strb	r3, [r7, #6]
 8006eee:	23ac      	movs	r3, #172	; 0xac
 8006ef0:	71fb      	strb	r3, [r7, #7]
 8006ef2:	23e1      	movs	r3, #225	; 0xe1
 8006ef4:	723b      	strb	r3, [r7, #8]
 8006ef6:	2311      	movs	r3, #17
 8006ef8:	727b      	strb	r3, [r7, #9]
 8006efa:	2301      	movs	r3, #1
 8006efc:	72bb      	strb	r3, [r7, #10]
 8006efe:	2300      	movs	r3, #0
 8006f00:	72fb      	strb	r3, [r7, #11]
 8006f02:	2300      	movs	r3, #0
 8006f04:	733b      	strb	r3, [r7, #12]
 8006f06:	2300      	movs	r3, #0
 8006f08:	737b      	strb	r3, [r7, #13]
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	73bb      	strb	r3, [r7, #14]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006f12:	4b26      	ldr	r3, [pc, #152]	; (8006fac <P2PS_STM_Init+0x19c>)
 8006f14:	8818      	ldrh	r0, [r3, #0]
 8006f16:	463a      	mov	r2, r7
 8006f18:	4b26      	ldr	r3, [pc, #152]	; (8006fb4 <P2PS_STM_Init+0x1a4>)
 8006f1a:	9305      	str	r3, [sp, #20]
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	9304      	str	r3, [sp, #16]
 8006f20:	230a      	movs	r3, #10
 8006f22:	9303      	str	r3, [sp, #12]
 8006f24:	2301      	movs	r3, #1
 8006f26:	9302      	str	r3, [sp, #8]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	2302      	movs	r3, #2
 8006f32:	2102      	movs	r1, #2
 8006f34:	f7ff f9a2 	bl	800627c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PNotifyServerToClientCharHdle));

    /**
	 *   Add Dummy Data Characteristic
	 */
	COPY_P2P_READ_UUID(uuid16.Char_UUID_128);
 8006f38:	2319      	movs	r3, #25
 8006f3a:	703b      	strb	r3, [r7, #0]
 8006f3c:	23ed      	movs	r3, #237	; 0xed
 8006f3e:	707b      	strb	r3, [r7, #1]
 8006f40:	2382      	movs	r3, #130	; 0x82
 8006f42:	70bb      	strb	r3, [r7, #2]
 8006f44:	23ae      	movs	r3, #174	; 0xae
 8006f46:	70fb      	strb	r3, [r7, #3]
 8006f48:	23ed      	movs	r3, #237	; 0xed
 8006f4a:	713b      	strb	r3, [r7, #4]
 8006f4c:	2321      	movs	r3, #33	; 0x21
 8006f4e:	717b      	strb	r3, [r7, #5]
 8006f50:	234c      	movs	r3, #76	; 0x4c
 8006f52:	71bb      	strb	r3, [r7, #6]
 8006f54:	239d      	movs	r3, #157	; 0x9d
 8006f56:	71fb      	strb	r3, [r7, #7]
 8006f58:	2341      	movs	r3, #65	; 0x41
 8006f5a:	723b      	strb	r3, [r7, #8]
 8006f5c:	2345      	movs	r3, #69	; 0x45
 8006f5e:	727b      	strb	r3, [r7, #9]
 8006f60:	2322      	movs	r3, #34	; 0x22
 8006f62:	72bb      	strb	r3, [r7, #10]
 8006f64:	238e      	movs	r3, #142	; 0x8e
 8006f66:	72fb      	strb	r3, [r7, #11]
 8006f68:	2343      	movs	r3, #67	; 0x43
 8006f6a:	733b      	strb	r3, [r7, #12]
 8006f6c:	23fe      	movs	r3, #254	; 0xfe
 8006f6e:	737b      	strb	r3, [r7, #13]
 8006f70:	2300      	movs	r3, #0
 8006f72:	73bb      	strb	r3, [r7, #14]
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <P2PS_STM_Init+0x19c>)
 8006f7a:	8818      	ldrh	r0, [r3, #0]
 8006f7c:	463a      	mov	r2, r7
 8006f7e:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <P2PS_STM_Init+0x1a8>)
 8006f80:	9305      	str	r3, [sp, #20]
 8006f82:	2301      	movs	r3, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	230a      	movs	r3, #10
 8006f88:	9303      	str	r3, [sp, #12]
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	9302      	str	r3, [sp, #8]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	2306      	movs	r3, #6
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	2302      	movs	r3, #2
 8006f98:	2102      	movs	r1, #2
 8006f9a:	f7ff f96f 	bl	800627c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8006f9e:	bf00      	nop
}
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	08006d15 	.word	0x08006d15
 8006fac:	200000f0 	.word	0x200000f0
 8006fb0:	200000f2 	.word	0x200000f2
 8006fb4:	200000f4 	.word	0x200000f4
 8006fb8:	200000f6 	.word	0x200000f6

08006fbc <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8006fc8:	2342      	movs	r3, #66	; 0x42
 8006fca:	73fb      	strb	r3, [r7, #15]

  switch(UUID)
 8006fcc:	88fb      	ldrh	r3, [r7, #6]
 8006fce:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <P2PS_STM_App_Update_Char+0x24>
 8006fd6:	f64f 6243 	movw	r2, #65091	; 0xfe43
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d00d      	beq.n	8006ffa <P2PS_STM_App_Update_Char+0x3e>
                                 (uint8_t *)  pPayload);

          break;

    default:
      break;
 8006fde:	e019      	b.n	8007014 <P2PS_STM_App_Update_Char+0x58>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006fe0:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <P2PS_STM_App_Update_Char+0x64>)
 8006fe2:	8818      	ldrh	r0, [r3, #0]
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <P2PS_STM_App_Update_Char+0x64>)
 8006fe6:	8899      	ldrh	r1, [r3, #4]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	2302      	movs	r3, #2
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f7ff fa2e 	bl	8006450 <aci_gatt_update_char_value>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff8:	e00c      	b.n	8007014 <P2PS_STM_App_Update_Char+0x58>
         result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006ffa:	4b09      	ldr	r3, [pc, #36]	; (8007020 <P2PS_STM_App_Update_Char+0x64>)
 8006ffc:	8818      	ldrh	r0, [r3, #0]
 8006ffe:	4b08      	ldr	r3, [pc, #32]	; (8007020 <P2PS_STM_App_Update_Char+0x64>)
 8007000:	88d9      	ldrh	r1, [r3, #6]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	2302      	movs	r3, #2
 8007008:	2200      	movs	r2, #0
 800700a:	f7ff fa21 	bl	8006450 <aci_gatt_update_char_value>
 800700e:	4603      	mov	r3, r0
 8007010:	73fb      	strb	r3, [r7, #15]
          break;
 8007012:	bf00      	nop
  }

  return result;
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8007016:	4618      	mov	r0, r3
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200000f0 	.word	0x200000f0

08007024 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800702c:	f107 030c 	add.w	r3, r7, #12
 8007030:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2124      	movs	r1, #36	; 0x24
 800703c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007040:	f000 f888 	bl	8007154 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	330b      	adds	r3, #11
 8007048:	78db      	ldrb	r3, [r3, #3]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b088      	sub	sp, #32
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800705a:	f107 030c 	add.w	r3, r7, #12
 800705e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	210f      	movs	r1, #15
 800706a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800706e:	f000 f871 	bl	8007154 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	330b      	adds	r3, #11
 8007076:	78db      	ldrb	r3, [r3, #3]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	4a08      	ldr	r2, [pc, #32]	; (80070b0 <shci_init+0x30>)
 8007090:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007092:	4a08      	ldr	r2, [pc, #32]	; (80070b4 <shci_init+0x34>)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007098:	4806      	ldr	r0, [pc, #24]	; (80070b4 <shci_init+0x34>)
 800709a:	f000 f911 	bl	80072c0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 f894 	bl	80071d0 <TlInit>

  return;
 80070a8:	bf00      	nop
}
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	2000023c 	.word	0x2000023c
 80070b4:	2000021c 	.word	0x2000021c

080070b8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80070be:	4822      	ldr	r0, [pc, #136]	; (8007148 <shci_user_evt_proc+0x90>)
 80070c0:	f000 f922 	bl	8007308 <LST_is_empty>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d12b      	bne.n	8007122 <shci_user_evt_proc+0x6a>
 80070ca:	4b20      	ldr	r3, [pc, #128]	; (800714c <shci_user_evt_proc+0x94>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d027      	beq.n	8007122 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80070d2:	f107 030c 	add.w	r3, r7, #12
 80070d6:	4619      	mov	r1, r3
 80070d8:	481b      	ldr	r0, [pc, #108]	; (8007148 <shci_user_evt_proc+0x90>)
 80070da:	f000 f9a4 	bl	8007426 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80070de:	4b1c      	ldr	r3, [pc, #112]	; (8007150 <shci_user_evt_proc+0x98>)
 80070e0:	69db      	ldr	r3, [r3, #28]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00c      	beq.n	8007100 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80070ea:	2301      	movs	r3, #1
 80070ec:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <shci_user_evt_proc+0x98>)
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	1d3a      	adds	r2, r7, #4
 80070f4:	4610      	mov	r0, r2
 80070f6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80070f8:	793a      	ldrb	r2, [r7, #4]
 80070fa:	4b14      	ldr	r3, [pc, #80]	; (800714c <shci_user_evt_proc+0x94>)
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	e002      	b.n	8007106 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007100:	4b12      	ldr	r3, [pc, #72]	; (800714c <shci_user_evt_proc+0x94>)
 8007102:	2201      	movs	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007106:	4b11      	ldr	r3, [pc, #68]	; (800714c <shci_user_evt_proc+0x94>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d004      	beq.n	8007118 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fc3f 	bl	8007994 <TL_MM_EvtDone>
 8007116:	e004      	b.n	8007122 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	4619      	mov	r1, r3
 800711c:	480a      	ldr	r0, [pc, #40]	; (8007148 <shci_user_evt_proc+0x90>)
 800711e:	f000 f915 	bl	800734c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007122:	4809      	ldr	r0, [pc, #36]	; (8007148 <shci_user_evt_proc+0x90>)
 8007124:	f000 f8f0 	bl	8007308 <LST_is_empty>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d107      	bne.n	800713e <shci_user_evt_proc+0x86>
 800712e:	4b07      	ldr	r3, [pc, #28]	; (800714c <shci_user_evt_proc+0x94>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007136:	4804      	ldr	r0, [pc, #16]	; (8007148 <shci_user_evt_proc+0x90>)
 8007138:	f7f9 fa53 	bl	80005e2 <shci_notify_asynch_evt>
  }


  return;
 800713c:	bf00      	nop
 800713e:	bf00      	nop
}
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	2000011c 	.word	0x2000011c
 800714c:	2000012c 	.word	0x2000012c
 8007150:	2000021c 	.word	0x2000021c

08007154 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	60ba      	str	r2, [r7, #8]
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	4603      	mov	r3, r0
 8007160:	81fb      	strh	r3, [r7, #14]
 8007162:	460b      	mov	r3, r1
 8007164:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007166:	2000      	movs	r0, #0
 8007168:	f000 f864 	bl	8007234 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800716c:	4b16      	ldr	r3, [pc, #88]	; (80071c8 <shci_send+0x74>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	89fa      	ldrh	r2, [r7, #14]
 8007172:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007176:	4b14      	ldr	r3, [pc, #80]	; (80071c8 <shci_send+0x74>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	7b7a      	ldrb	r2, [r7, #13]
 800717c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <shci_send+0x74>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	330c      	adds	r3, #12
 8007184:	7b7a      	ldrb	r2, [r7, #13]
 8007186:	68b9      	ldr	r1, [r7, #8]
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fe4b 	bl	8008e24 <memcpy>

  shciContext.io.Send(0,0);
 800718e:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <shci_send+0x78>)
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2100      	movs	r1, #0
 8007194:	2000      	movs	r0, #0
 8007196:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007198:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800719c:	f7f9 fa38 	bl	8000610 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f103 0008 	add.w	r0, r3, #8
 80071a6:	4b08      	ldr	r3, [pc, #32]	; (80071c8 <shci_send+0x74>)
 80071a8:	6819      	ldr	r1, [r3, #0]
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <shci_send+0x74>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	789b      	ldrb	r3, [r3, #2]
 80071b0:	3303      	adds	r3, #3
 80071b2:	461a      	mov	r2, r3
 80071b4:	f001 fe36 	bl	8008e24 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80071b8:	2001      	movs	r0, #1
 80071ba:	f000 f83b 	bl	8007234 <Cmd_SetStatus>

  return;
 80071be:	bf00      	nop
}
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000128 	.word	0x20000128
 80071cc:	2000021c 	.word	0x2000021c

080071d0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80071d8:	4a10      	ldr	r2, [pc, #64]	; (800721c <TlInit+0x4c>)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80071de:	4810      	ldr	r0, [pc, #64]	; (8007220 <TlInit+0x50>)
 80071e0:	f000 f882 	bl	80072e8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80071e4:	2001      	movs	r0, #1
 80071e6:	f000 f825 	bl	8007234 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80071ea:	4b0e      	ldr	r3, [pc, #56]	; (8007224 <TlInit+0x54>)
 80071ec:	2201      	movs	r2, #1
 80071ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <TlInit+0x58>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00c      	beq.n	8007212 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <TlInit+0x5c>)
 80071fe:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007200:	4b0b      	ldr	r3, [pc, #44]	; (8007230 <TlInit+0x60>)
 8007202:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <TlInit+0x58>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f107 020c 	add.w	r2, r7, #12
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
  }

  return;
 8007210:	bf00      	nop
 8007212:	bf00      	nop
}
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	20000128 	.word	0x20000128
 8007220:	2000011c 	.word	0x2000011c
 8007224:	2000012c 	.word	0x2000012c
 8007228:	2000021c 	.word	0x2000021c
 800722c:	08007285 	.word	0x08007285
 8007230:	0800729d 	.word	0x0800729d

08007234 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	4603      	mov	r3, r0
 800723c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007244:	4b0d      	ldr	r3, [pc, #52]	; (800727c <Cmd_SetStatus+0x48>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800724c:	4b0b      	ldr	r3, [pc, #44]	; (800727c <Cmd_SetStatus+0x48>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2000      	movs	r0, #0
 8007252:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007254:	4b0a      	ldr	r3, [pc, #40]	; (8007280 <Cmd_SetStatus+0x4c>)
 8007256:	2200      	movs	r2, #0
 8007258:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800725a:	e00b      	b.n	8007274 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800725c:	4b08      	ldr	r3, [pc, #32]	; (8007280 <Cmd_SetStatus+0x4c>)
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007262:	4b06      	ldr	r3, [pc, #24]	; (800727c <Cmd_SetStatus+0x48>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800726a:	4b04      	ldr	r3, [pc, #16]	; (800727c <Cmd_SetStatus+0x48>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2001      	movs	r0, #1
 8007270:	4798      	blx	r3
  return;
 8007272:	bf00      	nop
 8007274:	bf00      	nop
}
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	2000023c 	.word	0x2000023c
 8007280:	20000124 	.word	0x20000124

08007284 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800728c:	2000      	movs	r0, #0
 800728e:	f7f9 f9b4 	bl	80005fa <shci_cmd_resp_release>

  return;
 8007292:	bf00      	nop
}
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	4805      	ldr	r0, [pc, #20]	; (80072bc <TlUserEvtReceived+0x20>)
 80072a8:	f000 f876 	bl	8007398 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80072ac:	4803      	ldr	r0, [pc, #12]	; (80072bc <TlUserEvtReceived+0x20>)
 80072ae:	f7f9 f998 	bl	80005e2 <shci_notify_asynch_evt>

  return;
 80072b2:	bf00      	nop
}
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	2000011c 	.word	0x2000011c

080072c0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a05      	ldr	r2, [pc, #20]	; (80072e0 <shci_register_io_bus+0x20>)
 80072cc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <shci_register_io_bus+0x24>)
 80072d2:	611a      	str	r2, [r3, #16]

  return;
 80072d4:	bf00      	nop
}
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	08007821 	.word	0x08007821
 80072e4:	08007875 	.word	0x08007875

080072e8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007310:	f3ef 8310 	mrs	r3, PRIMASK
 8007314:	60fb      	str	r3, [r7, #12]
  return(result);
 8007316:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007318:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800731a:	b672      	cpsid	i
}
 800731c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	429a      	cmp	r2, r3
 8007326:	d102      	bne.n	800732e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007328:	2301      	movs	r3, #1
 800732a:	75fb      	strb	r3, [r7, #23]
 800732c:	e001      	b.n	8007332 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800732e:	2300      	movs	r3, #0
 8007330:	75fb      	strb	r3, [r7, #23]
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f383 8810 	msr	PRIMASK, r3
}
 800733c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800733e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007340:	4618      	mov	r0, r3
 8007342:	371c      	adds	r7, #28
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007356:	f3ef 8310 	mrs	r3, PRIMASK
 800735a:	60fb      	str	r3, [r7, #12]
  return(result);
 800735c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800735e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007360:	b672      	cpsid	i
}
 8007362:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	605a      	str	r2, [r3, #4]
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f383 8810 	msr	PRIMASK, r3
}
 800738a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800738c:	bf00      	nop
 800738e:	371c      	adds	r7, #28
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073a2:	f3ef 8310 	mrs	r3, PRIMASK
 80073a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80073a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80073aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80073ac:	b672      	cpsid	i
}
 80073ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f383 8810 	msr	PRIMASK, r3
}
 80073d6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073d8:	bf00      	nop
 80073da:	371c      	adds	r7, #28
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr

080073e4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073ec:	f3ef 8310 	mrs	r3, PRIMASK
 80073f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80073f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80073f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80073f6:	b672      	cpsid	i
}
 80073f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6852      	ldr	r2, [r2, #4]
 800740c:	605a      	str	r2, [r3, #4]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f383 8810 	msr	PRIMASK, r3
}
 8007418:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800741a:	bf00      	nop
 800741c:	371c      	adds	r7, #28
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b086      	sub	sp, #24
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007430:	f3ef 8310 	mrs	r3, PRIMASK
 8007434:	60fb      	str	r3, [r7, #12]
  return(result);
 8007436:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007438:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800743a:	b672      	cpsid	i
}
 800743c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff ffca 	bl	80073e4 <LST_remove_node>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f383 8810 	msr	PRIMASK, r3
}
 800745a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800745c:	bf00      	nop
 800745e:	3718      	adds	r7, #24
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  return;
 8007468:	bf00      	nop
}
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <BLS_Init>:

__weak void BLS_Init( void )
{
 8007472:	b480      	push	{r7}
 8007474:	af00      	add	r7, sp, #0
  return;
 8007476:	bf00      	nop
}
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  return;
 8007484:	bf00      	nop
}
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <DIS_Init>:
__weak void DIS_Init( void )
{
 800748e:	b480      	push	{r7}
 8007490:	af00      	add	r7, sp, #0
  return;
 8007492:	bf00      	nop
}
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 800749c:	b480      	push	{r7}
 800749e:	af00      	add	r7, sp, #0
  return;
 80074a0:	bf00      	nop
}
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HIDS_Init>:
__weak void HIDS_Init( void )
{
 80074aa:	b480      	push	{r7}
 80074ac:	af00      	add	r7, sp, #0
  return;
 80074ae:	bf00      	nop
}
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HRS_Init>:
__weak void HRS_Init( void )
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return;
 80074bc:	bf00      	nop
}
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <HTS_Init>:
__weak void HTS_Init( void )
{
 80074c6:	b480      	push	{r7}
 80074c8:	af00      	add	r7, sp, #0
  return;
 80074ca:	bf00      	nop
}
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <IAS_Init>:
__weak void IAS_Init( void )
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
  return;
 80074d8:	bf00      	nop
}
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <LLS_Init>:
__weak void LLS_Init( void )
{
 80074e2:	b480      	push	{r7}
 80074e4:	af00      	add	r7, sp, #0
  return;
 80074e6:	bf00      	nop
}
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <TPS_Init>:
__weak void TPS_Init( void )
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return;
 80074f4:	bf00      	nop
}
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 80074fe:	b480      	push	{r7}
 8007500:	af00      	add	r7, sp, #0
  return;
 8007502:	bf00      	nop
}
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800750c:	b480      	push	{r7}
 800750e:	af00      	add	r7, sp, #0
  return;
 8007510:	bf00      	nop
}
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <MESH_Init>:
__weak void MESH_Init( void )
{
 800751a:	b480      	push	{r7}
 800751c:	af00      	add	r7, sp, #0
  return;
 800751e:	bf00      	nop
}
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  return;
 800752c:	bf00      	nop
}
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8007536:	b480      	push	{r7}
 8007538:	af00      	add	r7, sp, #0
  return;
 800753a:	bf00      	nop
}
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007548:	4b04      	ldr	r3, [pc, #16]	; (800755c <SVCCTL_Init+0x18>)
 800754a:	2200      	movs	r2, #0
 800754c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <SVCCTL_Init+0x1c>)
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007554:	f000 f806 	bl	8007564 <SVCCTL_SvcInit>

  return;
 8007558:	bf00      	nop
}
 800755a:	bd80      	pop	{r7, pc}
 800755c:	200000f8 	.word	0x200000f8
 8007560:	20000118 	.word	0x20000118

08007564 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  BAS_Init();
 8007568:	f7ff ff7c 	bl	8007464 <BAS_Init>

  BLS_Init();
 800756c:	f7ff ff81 	bl	8007472 <BLS_Init>

  CRS_STM_Init();
 8007570:	f7ff ff86 	bl	8007480 <CRS_STM_Init>

  DIS_Init();
 8007574:	f7ff ff8b 	bl	800748e <DIS_Init>

  EDS_STM_Init();
 8007578:	f7ff ff90 	bl	800749c <EDS_STM_Init>

  HIDS_Init();
 800757c:	f7ff ff95 	bl	80074aa <HIDS_Init>

  HRS_Init();
 8007580:	f7ff ff9a 	bl	80074b8 <HRS_Init>

  HTS_Init();
 8007584:	f7ff ff9f 	bl	80074c6 <HTS_Init>

  IAS_Init();
 8007588:	f7ff ffa4 	bl	80074d4 <IAS_Init>

  LLS_Init();
 800758c:	f7ff ffa9 	bl	80074e2 <LLS_Init>

  TPS_Init();
 8007590:	f7ff ffae 	bl	80074f0 <TPS_Init>

  MOTENV_STM_Init();
 8007594:	f7ff ffb3 	bl	80074fe <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007598:	f7ff fc3a 	bl	8006e10 <P2PS_STM_Init>

  OTAS_STM_Init();
 800759c:	f7ff ffb6 	bl	800750c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80075a0:	f7ff ffc2 	bl	8007528 <BVOPUS_STM_Init>

  MESH_Init();
 80075a4:	f7ff ffb9 	bl	800751a <MESH_Init>

  SVCCTL_InitCustomSvc();
 80075a8:	f7ff ffc5 	bl	8007536 <SVCCTL_InitCustomSvc>
  
  return;
 80075ac:	bf00      	nop
}
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80075b8:	4b09      	ldr	r3, [pc, #36]	; (80075e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80075ba:	7f1b      	ldrb	r3, [r3, #28]
 80075bc:	4619      	mov	r1, r3
 80075be:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80075c6:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80075c8:	7f1b      	ldrb	r3, [r3, #28]
 80075ca:	3301      	adds	r3, #1
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	4b04      	ldr	r3, [pc, #16]	; (80075e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80075d0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80075d2:	bf00      	nop
}
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	200000f8 	.word	0x200000f8

080075e4 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3301      	adds	r3, #1
 80075f0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80075f2:	2300      	movs	r3, #0
 80075f4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	2bff      	cmp	r3, #255	; 0xff
 80075fc:	d125      	bne.n	800764a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	3302      	adds	r3, #2
 8007602:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	881b      	ldrh	r3, [r3, #0]
 8007608:	b29b      	uxth	r3, r3
 800760a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800760e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007612:	d118      	bne.n	8007646 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007614:	2300      	movs	r3, #0
 8007616:	757b      	strb	r3, [r7, #21]
 8007618:	e00d      	b.n	8007636 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800761a:	7d7b      	ldrb	r3, [r7, #21]
 800761c:	4a1a      	ldr	r2, [pc, #104]	; (8007688 <SVCCTL_UserEvtRx+0xa4>)
 800761e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	4798      	blx	r3
 8007626:	4603      	mov	r3, r0
 8007628:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800762a:	7dfb      	ldrb	r3, [r7, #23]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d108      	bne.n	8007642 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007630:	7d7b      	ldrb	r3, [r7, #21]
 8007632:	3301      	adds	r3, #1
 8007634:	757b      	strb	r3, [r7, #21]
 8007636:	4b14      	ldr	r3, [pc, #80]	; (8007688 <SVCCTL_UserEvtRx+0xa4>)
 8007638:	7f1b      	ldrb	r3, [r3, #28]
 800763a:	7d7a      	ldrb	r2, [r7, #21]
 800763c:	429a      	cmp	r2, r3
 800763e:	d3ec      	bcc.n	800761a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007640:	e002      	b.n	8007648 <SVCCTL_UserEvtRx+0x64>
              break;
 8007642:	bf00      	nop
          break;
 8007644:	e000      	b.n	8007648 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007646:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007648:	e000      	b.n	800764c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800764a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	2b02      	cmp	r3, #2
 8007650:	d00f      	beq.n	8007672 <SVCCTL_UserEvtRx+0x8e>
 8007652:	2b02      	cmp	r3, #2
 8007654:	dc10      	bgt.n	8007678 <SVCCTL_UserEvtRx+0x94>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <SVCCTL_UserEvtRx+0x7c>
 800765a:	2b01      	cmp	r3, #1
 800765c:	d006      	beq.n	800766c <SVCCTL_UserEvtRx+0x88>
 800765e:	e00b      	b.n	8007678 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 faeb 	bl	8007c3c <SVCCTL_App_Notification>
 8007666:	4603      	mov	r3, r0
 8007668:	75bb      	strb	r3, [r7, #22]
      break;
 800766a:	e008      	b.n	800767e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800766c:	2301      	movs	r3, #1
 800766e:	75bb      	strb	r3, [r7, #22]
      break;
 8007670:	e005      	b.n	800767e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007672:	2300      	movs	r3, #0
 8007674:	75bb      	strb	r3, [r7, #22]
      break;
 8007676:	e002      	b.n	800767e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007678:	2301      	movs	r3, #1
 800767a:	75bb      	strb	r3, [r7, #22]
      break;
 800767c:	bf00      	nop
  }

  return (return_status);
 800767e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	200000f8 	.word	0x200000f8

0800768c <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007690:	f001 f874 	bl	800877c <HW_IPCC_Enable>

  return;
 8007694:	bf00      	nop
}
 8007696:	bd80      	pop	{r7, pc}

08007698 <TL_Init>:


void TL_Init( void )
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800769c:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <TL_Init+0x48>)
 800769e:	4a11      	ldr	r2, [pc, #68]	; (80076e4 <TL_Init+0x4c>)
 80076a0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <TL_Init+0x48>)
 80076a4:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <TL_Init+0x50>)
 80076a6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <TL_Init+0x48>)
 80076aa:	4a10      	ldr	r2, [pc, #64]	; (80076ec <TL_Init+0x54>)
 80076ac:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <TL_Init+0x48>)
 80076b0:	4a0f      	ldr	r2, [pc, #60]	; (80076f0 <TL_Init+0x58>)
 80076b2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80076b4:	4b0a      	ldr	r3, [pc, #40]	; (80076e0 <TL_Init+0x48>)
 80076b6:	4a0f      	ldr	r2, [pc, #60]	; (80076f4 <TL_Init+0x5c>)
 80076b8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80076ba:	4b09      	ldr	r3, [pc, #36]	; (80076e0 <TL_Init+0x48>)
 80076bc:	4a0e      	ldr	r2, [pc, #56]	; (80076f8 <TL_Init+0x60>)
 80076be:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80076c0:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <TL_Init+0x48>)
 80076c2:	4a0e      	ldr	r2, [pc, #56]	; (80076fc <TL_Init+0x64>)
 80076c4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80076c6:	4b06      	ldr	r3, [pc, #24]	; (80076e0 <TL_Init+0x48>)
 80076c8:	4a0d      	ldr	r2, [pc, #52]	; (8007700 <TL_Init+0x68>)
 80076ca:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80076cc:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <TL_Init+0x48>)
 80076ce:	4a0d      	ldr	r2, [pc, #52]	; (8007704 <TL_Init+0x6c>)
 80076d0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80076d2:	4b03      	ldr	r3, [pc, #12]	; (80076e0 <TL_Init+0x48>)
 80076d4:	4a0c      	ldr	r2, [pc, #48]	; (8007708 <TL_Init+0x70>)
 80076d6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80076d8:	f001 f864 	bl	80087a4 <HW_IPCC_Init>

  return;
 80076dc:	bf00      	nop
}
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	20030000 	.word	0x20030000
 80076e4:	20030028 	.word	0x20030028
 80076e8:	20030048 	.word	0x20030048
 80076ec:	20030058 	.word	0x20030058
 80076f0:	20030064 	.word	0x20030064
 80076f4:	2003006c 	.word	0x2003006c
 80076f8:	20030074 	.word	0x20030074
 80076fc:	2003007c 	.word	0x2003007c
 8007700:	20030098 	.word	0x20030098
 8007704:	2003009c 	.word	0x2003009c
 8007708:	200300a8 	.word	0x200300a8

0800770c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007718:	4811      	ldr	r0, [pc, #68]	; (8007760 <TL_BLE_Init+0x54>)
 800771a:	f7ff fde5 	bl	80072e8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800771e:	4b11      	ldr	r3, [pc, #68]	; (8007764 <TL_BLE_Init+0x58>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4a0c      	ldr	r2, [pc, #48]	; (8007768 <TL_BLE_Init+0x5c>)
 8007738:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	4a08      	ldr	r2, [pc, #32]	; (8007760 <TL_BLE_Init+0x54>)
 800773e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007740:	f001 f846 	bl	80087d0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a08      	ldr	r2, [pc, #32]	; (800776c <TL_BLE_Init+0x60>)
 800774a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	4a07      	ldr	r2, [pc, #28]	; (8007770 <TL_BLE_Init+0x64>)
 8007752:	6013      	str	r3, [r2, #0]

  return 0;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	200300c4 	.word	0x200300c4
 8007764:	20030000 	.word	0x20030000
 8007768:	20030a48 	.word	0x20030a48
 800776c:	20000248 	.word	0x20000248
 8007770:	2000024c 	.word	0x2000024c

08007774 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007780:	4b09      	ldr	r3, [pc, #36]	; (80077a8 <TL_BLE_SendCmd+0x34>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2201      	movs	r2, #1
 8007788:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800778a:	4b07      	ldr	r3, [pc, #28]	; (80077a8 <TL_BLE_SendCmd+0x34>)
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4619      	mov	r1, r3
 8007792:	2001      	movs	r0, #1
 8007794:	f000 f96c 	bl	8007a70 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007798:	f001 f824 	bl	80087e4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20030000 	.word	0x20030000

080077ac <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80077b2:	e01c      	b.n	80077ee <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80077b4:	1d3b      	adds	r3, r7, #4
 80077b6:	4619      	mov	r1, r3
 80077b8:	4812      	ldr	r0, [pc, #72]	; (8007804 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80077ba:	f7ff fe34 	bl	8007426 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7a5b      	ldrb	r3, [r3, #9]
 80077c2:	2b0f      	cmp	r3, #15
 80077c4:	d003      	beq.n	80077ce <HW_IPCC_BLE_RxEvtNot+0x22>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	7a5b      	ldrb	r3, [r3, #9]
 80077ca:	2b0e      	cmp	r3, #14
 80077cc:	d105      	bne.n	80077da <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4619      	mov	r1, r3
 80077d2:	2002      	movs	r0, #2
 80077d4:	f000 f94c 	bl	8007a70 <OutputDbgTrace>
 80077d8:	e004      	b.n	80077e4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4619      	mov	r1, r3
 80077de:	2003      	movs	r0, #3
 80077e0:	f000 f946 	bl	8007a70 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80077e4:	4b08      	ldr	r3, [pc, #32]	; (8007808 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4610      	mov	r0, r2
 80077ec:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80077ee:	4805      	ldr	r0, [pc, #20]	; (8007804 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80077f0:	f7ff fd8a 	bl	8007308 <LST_is_empty>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0dc      	beq.n	80077b4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80077fa:	bf00      	nop
}
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	200300c4 	.word	0x200300c4
 8007808:	20000248 	.word	0x20000248

0800780c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007810:	4b02      	ldr	r3, [pc, #8]	; (800781c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4798      	blx	r3

  return;
 8007816:	bf00      	nop
}
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	2000024c 	.word	0x2000024c

08007820 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800782c:	480d      	ldr	r0, [pc, #52]	; (8007864 <TL_SYS_Init+0x44>)
 800782e:	f7ff fd5b 	bl	80072e8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007832:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <TL_SYS_Init+0x48>)
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4a08      	ldr	r2, [pc, #32]	; (8007864 <TL_SYS_Init+0x44>)
 8007844:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007846:	f000 ffef 	bl	8008828 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a07      	ldr	r2, [pc, #28]	; (800786c <TL_SYS_Init+0x4c>)
 8007850:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	4a06      	ldr	r2, [pc, #24]	; (8007870 <TL_SYS_Init+0x50>)
 8007858:	6013      	str	r3, [r2, #0]

  return 0;
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	200300cc 	.word	0x200300cc
 8007868:	20030000 	.word	0x20030000
 800786c:	20000250 	.word	0x20000250
 8007870:	20000254 	.word	0x20000254

08007874 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007880:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <TL_SYS_SendCmd+0x34>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2210      	movs	r2, #16
 8007888:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <TL_SYS_SendCmd+0x34>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4619      	mov	r1, r3
 8007892:	2004      	movs	r0, #4
 8007894:	f000 f8ec 	bl	8007a70 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007898:	f000 ffd0 	bl	800883c <HW_IPCC_SYS_SendCmd>

  return 0;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20030000 	.word	0x20030000

080078ac <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80078b0:	4b07      	ldr	r3, [pc, #28]	; (80078d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4619      	mov	r1, r3
 80078b8:	2005      	movs	r0, #5
 80078ba:	f000 f8d9 	bl	8007a70 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80078be:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a03      	ldr	r2, [pc, #12]	; (80078d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80078c4:	68d2      	ldr	r2, [r2, #12]
 80078c6:	6812      	ldr	r2, [r2, #0]
 80078c8:	4610      	mov	r0, r2
 80078ca:	4798      	blx	r3

  return;
 80078cc:	bf00      	nop
}
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20030000 	.word	0x20030000
 80078d4:	20000250 	.word	0x20000250

080078d8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80078de:	e00e      	b.n	80078fe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80078e0:	1d3b      	adds	r3, r7, #4
 80078e2:	4619      	mov	r1, r3
 80078e4:	480b      	ldr	r0, [pc, #44]	; (8007914 <HW_IPCC_SYS_EvtNot+0x3c>)
 80078e6:	f7ff fd9e 	bl	8007426 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4619      	mov	r1, r3
 80078ee:	2006      	movs	r0, #6
 80078f0:	f000 f8be 	bl	8007a70 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80078f4:	4b08      	ldr	r3, [pc, #32]	; (8007918 <HW_IPCC_SYS_EvtNot+0x40>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	4610      	mov	r0, r2
 80078fc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80078fe:	4805      	ldr	r0, [pc, #20]	; (8007914 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007900:	f7ff fd02 	bl	8007308 <LST_is_empty>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d0ea      	beq.n	80078e0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800790a:	bf00      	nop
}
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	200300cc 	.word	0x200300cc
 8007918:	20000254 	.word	0x20000254

0800791c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007924:	4817      	ldr	r0, [pc, #92]	; (8007984 <TL_MM_Init+0x68>)
 8007926:	f7ff fcdf 	bl	80072e8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800792a:	4817      	ldr	r0, [pc, #92]	; (8007988 <TL_MM_Init+0x6c>)
 800792c:	f7ff fcdc 	bl	80072e8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007930:	4b16      	ldr	r3, [pc, #88]	; (800798c <TL_MM_Init+0x70>)
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	4a16      	ldr	r2, [pc, #88]	; (8007990 <TL_MM_Init+0x74>)
 8007936:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007938:	4b15      	ldr	r3, [pc, #84]	; (8007990 <TL_MM_Init+0x74>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	6892      	ldr	r2, [r2, #8]
 8007940:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007942:	4b13      	ldr	r3, [pc, #76]	; (8007990 <TL_MM_Init+0x74>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	68d2      	ldr	r2, [r2, #12]
 800794a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800794c:	4b10      	ldr	r3, [pc, #64]	; (8007990 <TL_MM_Init+0x74>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a0c      	ldr	r2, [pc, #48]	; (8007984 <TL_MM_Init+0x68>)
 8007952:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007954:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <TL_MM_Init+0x74>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	6812      	ldr	r2, [r2, #0]
 800795c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800795e:	4b0c      	ldr	r3, [pc, #48]	; (8007990 <TL_MM_Init+0x74>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6852      	ldr	r2, [r2, #4]
 8007966:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007968:	4b09      	ldr	r3, [pc, #36]	; (8007990 <TL_MM_Init+0x74>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6912      	ldr	r2, [r2, #16]
 8007970:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007972:	4b07      	ldr	r3, [pc, #28]	; (8007990 <TL_MM_Init+0x74>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	6952      	ldr	r2, [r2, #20]
 800797a:	619a      	str	r2, [r3, #24]

  return;
 800797c:	bf00      	nop
}
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	200300b4 	.word	0x200300b4
 8007988:	20000240 	.word	0x20000240
 800798c:	20030000 	.word	0x20030000
 8007990:	20000258 	.word	0x20000258

08007994 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800799c:	6879      	ldr	r1, [r7, #4]
 800799e:	4807      	ldr	r0, [pc, #28]	; (80079bc <TL_MM_EvtDone+0x28>)
 80079a0:	f7ff fcfa 	bl	8007398 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	2000      	movs	r0, #0
 80079a8:	f000 f862 	bl	8007a70 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80079ac:	4804      	ldr	r0, [pc, #16]	; (80079c0 <TL_MM_EvtDone+0x2c>)
 80079ae:	f000 ff6b 	bl	8008888 <HW_IPCC_MM_SendFreeBuf>

  return;
 80079b2:	bf00      	nop
}
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000240 	.word	0x20000240
 80079c0:	080079c5 	.word	0x080079c5

080079c4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80079ca:	e00c      	b.n	80079e6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80079cc:	1d3b      	adds	r3, r7, #4
 80079ce:	4619      	mov	r1, r3
 80079d0:	480a      	ldr	r0, [pc, #40]	; (80079fc <SendFreeBuf+0x38>)
 80079d2:	f7ff fd28 	bl	8007426 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80079d6:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <SendFreeBuf+0x3c>)
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	4611      	mov	r1, r2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7ff fcd9 	bl	8007398 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80079e6:	4805      	ldr	r0, [pc, #20]	; (80079fc <SendFreeBuf+0x38>)
 80079e8:	f7ff fc8e 	bl	8007308 <LST_is_empty>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0ec      	beq.n	80079cc <SendFreeBuf+0x8>
  }

  return;
 80079f2:	bf00      	nop
}
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20000240 	.word	0x20000240
 8007a00:	20030000 	.word	0x20030000

08007a04 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007a08:	4805      	ldr	r0, [pc, #20]	; (8007a20 <TL_TRACES_Init+0x1c>)
 8007a0a:	f7ff fc6d 	bl	80072e8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007a0e:	4b05      	ldr	r3, [pc, #20]	; (8007a24 <TL_TRACES_Init+0x20>)
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	4a03      	ldr	r2, [pc, #12]	; (8007a20 <TL_TRACES_Init+0x1c>)
 8007a14:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007a16:	f000 ff6d 	bl	80088f4 <HW_IPCC_TRACES_Init>

  return;
 8007a1a:	bf00      	nop
}
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	200300bc 	.word	0x200300bc
 8007a24:	20030000 	.word	0x20030000

08007a28 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007a2e:	e008      	b.n	8007a42 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007a30:	1d3b      	adds	r3, r7, #4
 8007a32:	4619      	mov	r1, r3
 8007a34:	4808      	ldr	r0, [pc, #32]	; (8007a58 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007a36:	f7ff fcf6 	bl	8007426 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 f80d 	bl	8007a5c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007a42:	4805      	ldr	r0, [pc, #20]	; (8007a58 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007a44:	f7ff fc60 	bl	8007308 <LST_is_empty>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0f0      	beq.n	8007a30 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007a4e:	bf00      	nop
}
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200300bc 	.word	0x200300bc

08007a5c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	6039      	str	r1, [r7, #0]
 8007a7a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007a7c:	79fb      	ldrb	r3, [r7, #7]
 8007a7e:	2b06      	cmp	r3, #6
 8007a80:	d845      	bhi.n	8007b0e <OutputDbgTrace+0x9e>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <OutputDbgTrace+0x18>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007aa5 	.word	0x08007aa5
 8007a8c:	08007ac9 	.word	0x08007ac9
 8007a90:	08007acf 	.word	0x08007acf
 8007a94:	08007ae3 	.word	0x08007ae3
 8007a98:	08007aef 	.word	0x08007aef
 8007a9c:	08007af5 	.word	0x08007af5
 8007aa0:	08007b03 	.word	0x08007b03
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	7a5b      	ldrb	r3, [r3, #9]
 8007aac:	2bff      	cmp	r3, #255	; 0xff
 8007aae:	d005      	beq.n	8007abc <OutputDbgTrace+0x4c>
 8007ab0:	2bff      	cmp	r3, #255	; 0xff
 8007ab2:	dc05      	bgt.n	8007ac0 <OutputDbgTrace+0x50>
 8007ab4:	2b0e      	cmp	r3, #14
 8007ab6:	d005      	beq.n	8007ac4 <OutputDbgTrace+0x54>
 8007ab8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007aba:	e001      	b.n	8007ac0 <OutputDbgTrace+0x50>
          break;
 8007abc:	bf00      	nop
 8007abe:	e027      	b.n	8007b10 <OutputDbgTrace+0xa0>
          break;
 8007ac0:	bf00      	nop
 8007ac2:	e025      	b.n	8007b10 <OutputDbgTrace+0xa0>
          break;
 8007ac4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007ac6:	e023      	b.n	8007b10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007acc:	e020      	b.n	8007b10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	7a5b      	ldrb	r3, [r3, #9]
 8007ad6:	2b0e      	cmp	r3, #14
 8007ad8:	d001      	beq.n	8007ade <OutputDbgTrace+0x6e>
 8007ada:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007adc:	e000      	b.n	8007ae0 <OutputDbgTrace+0x70>
          break;
 8007ade:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007ae0:	e016      	b.n	8007b10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	7a5b      	ldrb	r3, [r3, #9]
 8007aea:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007aec:	e010      	b.n	8007b10 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007af2:	e00d      	b.n	8007b10 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	7a5b      	ldrb	r3, [r3, #9]
 8007afc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007afe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007b00:	e006      	b.n	8007b10 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	7a5b      	ldrb	r3, [r3, #9]
 8007b0a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007b0c:	e000      	b.n	8007b10 <OutputDbgTrace+0xa0>

    default:
      break;
 8007b0e:	bf00      	nop
  }

  return;
 8007b10:	bf00      	nop
}
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr

08007b1c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007b20:	4b03      	ldr	r3, [pc, #12]	; (8007b30 <LL_FLASH_GetUDN+0x14>)
 8007b22:	681b      	ldr	r3, [r3, #0]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	1fff7580 	.word	0x1fff7580

08007b34 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007b34:	b480      	push	{r7}
 8007b36:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007b38:	4b03      	ldr	r3, [pc, #12]	; (8007b48 <LL_FLASH_GetDeviceID+0x14>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	b2db      	uxtb	r3, r3
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	1fff7584 	.word	0x1fff7584

08007b4c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007b50:	4b03      	ldr	r3, [pc, #12]	; (8007b60 <LL_FLASH_GetSTCompanyID+0x14>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	0a1b      	lsrs	r3, r3, #8
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	1fff7584 	.word	0x1fff7584

08007b64 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8007b64:	b5b0      	push	{r4, r5, r7, lr}
 8007b66:	b08c      	sub	sp, #48	; 0x30
 8007b68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007b6a:	4b2a      	ldr	r3, [pc, #168]	; (8007c14 <APP_BLE_Init+0xb0>)
 8007b6c:	463c      	mov	r4, r7
 8007b6e:	461d      	mov	r5, r3
 8007b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8007b80:	f000 f960 	bl	8007e44 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007b84:	2101      	movs	r1, #1
 8007b86:	2002      	movs	r0, #2
 8007b88:	f000 fedc 	bl	8008944 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007b8c:	4a22      	ldr	r2, [pc, #136]	; (8007c18 <APP_BLE_Init+0xb4>)
 8007b8e:	2100      	movs	r1, #0
 8007b90:	2004      	movs	r0, #4
 8007b92:	f000 ffeb 	bl	8008b6c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8007b96:	463b      	mov	r3, r7
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fa43 	bl	8007024 <SHCI_C2_BLE_Init>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8007ba4:	f7fa f8b0 	bl	8001d08 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007ba8:	f000 f962 	bl	8007e70 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007bac:	f7ff fcca 	bl	8007544 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <APP_BLE_Init+0xb8>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007bb8:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <APP_BLE_Init+0xb8>)
 8007bba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bbe:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007bc0:	4a17      	ldr	r2, [pc, #92]	; (8007c20 <APP_BLE_Init+0xbc>)
 8007bc2:	2100      	movs	r1, #0
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	f000 ffd1 	bl	8008b6c <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8007bca:	2006      	movs	r0, #6
 8007bcc:	f7fe fd87 	bl	80066de <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8007bd0:	f000 fbc2 	bl	8008358 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <APP_BLE_Init+0xc0>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	4913      	ldr	r1, [pc, #76]	; (8007c28 <APP_BLE_Init+0xc4>)
 8007bda:	2000      	movs	r0, #0
 8007bdc:	f7f9 fa54 	bl	8001088 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8007be0:	4b12      	ldr	r3, [pc, #72]	; (8007c2c <APP_BLE_Init+0xc8>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	4912      	ldr	r1, [pc, #72]	; (8007c30 <APP_BLE_Init+0xcc>)
 8007be6:	2000      	movs	r0, #0
 8007be8:	f7f9 fa4e 	bl	8001088 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <APP_BLE_Init+0xb8>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007bf2:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <APP_BLE_Init+0xb8>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8007bf8:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <APP_BLE_Init+0xd0>)
 8007bfa:	2280      	movs	r2, #128	; 0x80
 8007bfc:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <APP_BLE_Init+0xd4>)
 8007c00:	22a0      	movs	r2, #160	; 0xa0
 8007c02:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8007c04:	2001      	movs	r0, #1
 8007c06:	f000 f9f5 	bl	8007ff4 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8007c0a:	bf00      	nop
}
 8007c0c:	3730      	adds	r7, #48	; 0x30
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bdb0      	pop	{r4, r5, r7, pc}
 8007c12:	bf00      	nop
 8007c14:	08008eb0 	.word	0x08008eb0
 8007c18:	08006991 	.word	0x08006991
 8007c1c:	20000130 	.word	0x20000130
 8007c20:	0800815d 	.word	0x0800815d
 8007c24:	08008195 	.word	0x08008195
 8007c28:	200001b1 	.word	0x200001b1
 8007c2c:	080081a5 	.word	0x080081a5
 8007c30:	200001b2 	.word	0x200001b2
 8007c34:	200001b4 	.word	0x200001b4
 8007c38:	200001b6 	.word	0x200001b6

08007c3c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08c      	sub	sp, #48	; 0x30
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007c44:	2342      	movs	r3, #66	; 0x42
 8007c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2bff      	cmp	r3, #255	; 0xff
 8007c56:	f000 8081 	beq.w	8007d5c <SVCCTL_App_Notification+0x120>
 8007c5a:	2bff      	cmp	r3, #255	; 0xff
 8007c5c:	f300 80d2 	bgt.w	8007e04 <SVCCTL_App_Notification+0x1c8>
 8007c60:	2b05      	cmp	r3, #5
 8007c62:	d002      	beq.n	8007c6a <SVCCTL_App_Notification+0x2e>
 8007c64:	2b3e      	cmp	r3, #62	; 0x3e
 8007c66:	d020      	beq.n	8007caa <SVCCTL_App_Notification+0x6e>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007c68:	e0cc      	b.n	8007e04 <SVCCTL_App_Notification+0x1c8>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	3302      	adds	r3, #2
 8007c6e:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	4b66      	ldr	r3, [pc, #408]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007c7a:	8adb      	ldrh	r3, [r3, #22]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d106      	bne.n	8007c8e <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007c80:	4b64      	ldr	r3, [pc, #400]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007c86:	4b63      	ldr	r3, [pc, #396]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007c8e:	2001      	movs	r0, #1
 8007c90:	f000 f9b0 	bl	8007ff4 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8007c94:	4b60      	ldr	r3, [pc, #384]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007c96:	2201      	movs	r2, #1
 8007c98:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007c9a:	4b5e      	ldr	r3, [pc, #376]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007c9c:	8ada      	ldrh	r2, [r3, #22]
 8007c9e:	4b5e      	ldr	r3, [pc, #376]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007ca0:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8007ca2:	485d      	ldr	r0, [pc, #372]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007ca4:	f000 fb44 	bl	8008330 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007ca8:	e0af      	b.n	8007e0a <SVCCTL_App_Notification+0x1ce>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	3302      	adds	r3, #2
 8007cae:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b0c      	cmp	r3, #12
 8007cb6:	d005      	beq.n	8007cc4 <SVCCTL_App_Notification+0x88>
 8007cb8:	2b0c      	cmp	r3, #12
 8007cba:	dc4b      	bgt.n	8007d54 <SVCCTL_App_Notification+0x118>
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d017      	beq.n	8007cf0 <SVCCTL_App_Notification+0xb4>
 8007cc0:	2b03      	cmp	r3, #3
          break;
 8007cc2:	e047      	b.n	8007d54 <SVCCTL_App_Notification+0x118>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8007cca:	4b52      	ldr	r3, [pc, #328]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007ccc:	8adb      	ldrh	r3, [r3, #22]
 8007cce:	f107 020e 	add.w	r2, r7, #14
 8007cd2:	f107 010f 	add.w	r1, r7, #15
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe fd6f 	bl	80067ba <hci_le_read_phy>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8007ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d136      	bne.n	8007d58 <SVCCTL_App_Notification+0x11c>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8007cea:	7bfb      	ldrb	r3, [r7, #15]
 8007cec:	2b02      	cmp	r3, #2
          break;
 8007cee:	e033      	b.n	8007d58 <SVCCTL_App_Notification+0x11c>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007cf6:	4b47      	ldr	r3, [pc, #284]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007cf8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7f9 fa3d 	bl	800117c <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007d02:	4b44      	ldr	r3, [pc, #272]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007d04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d08:	2b04      	cmp	r3, #4
 8007d0a:	d104      	bne.n	8007d16 <SVCCTL_App_Notification+0xda>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007d0c:	4b41      	ldr	r3, [pc, #260]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007d0e:	2206      	movs	r2, #6
 8007d10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007d14:	e003      	b.n	8007d1e <SVCCTL_App_Notification+0xe2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007d16:	4b3f      	ldr	r3, [pc, #252]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007d18:	2205      	movs	r2, #5
 8007d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	4b3b      	ldr	r3, [pc, #236]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007d28:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007d2a:	4b3b      	ldr	r3, [pc, #236]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007d30:	4b38      	ldr	r3, [pc, #224]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007d32:	8ada      	ldrh	r2, [r3, #22]
 8007d34:	4b38      	ldr	r3, [pc, #224]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007d36:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8007d38:	4837      	ldr	r0, [pc, #220]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007d3a:	f000 faf9 	bl	8008330 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007d3e:	4b36      	ldr	r3, [pc, #216]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007d44:	4b33      	ldr	r3, [pc, #204]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007d46:	8ada      	ldrh	r2, [r3, #22]
 8007d48:	4b33      	ldr	r3, [pc, #204]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007d4a:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8007d4c:	4832      	ldr	r0, [pc, #200]	; (8007e18 <SVCCTL_App_Notification+0x1dc>)
 8007d4e:	f000 faef 	bl	8008330 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007d52:	e002      	b.n	8007d5a <SVCCTL_App_Notification+0x11e>
          break;
 8007d54:	bf00      	nop
 8007d56:	e058      	b.n	8007e0a <SVCCTL_App_Notification+0x1ce>
          break;
 8007d58:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8007d5a:	e056      	b.n	8007e0a <SVCCTL_App_Notification+0x1ce>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	3302      	adds	r3, #2
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d6c:	d046      	beq.n	8007dfc <SVCCTL_App_Notification+0x1c0>
 8007d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d72:	dc49      	bgt.n	8007e08 <SVCCTL_App_Notification+0x1cc>
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d036      	beq.n	8007de6 <SVCCTL_App_Notification+0x1aa>
 8007d78:	2b04      	cmp	r3, #4
 8007d7a:	db45      	blt.n	8007e08 <SVCCTL_App_Notification+0x1cc>
 8007d7c:	f240 420a 	movw	r2, #1034	; 0x40a
 8007d80:	4293      	cmp	r3, r2
 8007d82:	dc41      	bgt.n	8007e08 <SVCCTL_App_Notification+0x1cc>
 8007d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d88:	db3e      	blt.n	8007e08 <SVCCTL_App_Notification+0x1cc>
 8007d8a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007d8e:	2b0a      	cmp	r3, #10
 8007d90:	d83a      	bhi.n	8007e08 <SVCCTL_App_Notification+0x1cc>
 8007d92:	a201      	add	r2, pc, #4	; (adr r2, 8007d98 <SVCCTL_App_Notification+0x15c>)
 8007d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d98:	08007e01 	.word	0x08007e01
 8007d9c:	08007ddf 	.word	0x08007ddf
 8007da0:	08007e01 	.word	0x08007e01
 8007da4:	08007e01 	.word	0x08007e01
 8007da8:	08007e01 	.word	0x08007e01
 8007dac:	08007dc5 	.word	0x08007dc5
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e01 	.word	0x08007e01
 8007db8:	08007e01 	.word	0x08007e01
 8007dbc:	08007dd1 	.word	0x08007dd1
 8007dc0:	08007e01 	.word	0x08007e01
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007dc4:	4b13      	ldr	r3, [pc, #76]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007dc6:	8adb      	ldrh	r3, [r3, #22]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7fe f8e2 	bl	8005f92 <aci_gap_allow_rebond>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8007dce:	e018      	b.n	8007e02 <SVCCTL_App_Notification+0x1c6>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8007dd0:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007dd2:	8adb      	ldrh	r3, [r3, #22]
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe f925 	bl	8006026 <aci_gap_numeric_comparison_value_confirm_yesno>
      break;
 8007ddc:	e011      	b.n	8007e02 <SVCCTL_App_Notification+0x1c6>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	3302      	adds	r3, #2
 8007de2:	623b      	str	r3, [r7, #32]
           break;    
 8007de4:	e00d      	b.n	8007e02 <SVCCTL_App_Notification+0x1c6>
          BSP_LED_On(LED_GREEN);
 8007de6:	2001      	movs	r0, #1
 8007de8:	f7fa f9d6 	bl	8002198 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8007dec:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <SVCCTL_App_Notification+0x1d8>)
 8007dee:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8007df2:	210a      	movs	r1, #10
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7f9 fa4d 	bl	8001294 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007dfa:	e002      	b.n	8007e02 <SVCCTL_App_Notification+0x1c6>
      break;
 8007dfc:	bf00      	nop
 8007dfe:	e003      	b.n	8007e08 <SVCCTL_App_Notification+0x1cc>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8007e00:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007e02:	e001      	b.n	8007e08 <SVCCTL_App_Notification+0x1cc>
      break;
 8007e04:	bf00      	nop
 8007e06:	e000      	b.n	8007e0a <SVCCTL_App_Notification+0x1ce>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007e08:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007e0a:	2301      	movs	r3, #1
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3730      	adds	r7, #48	; 0x30
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	20000130 	.word	0x20000130
 8007e18:	200005bc 	.word	0x200005bc

08007e1c <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8007e20:	f000 face 	bl	80083c0 <P2PS_APP_SW1_Button_Action>
}
 8007e24:	bf00      	nop
 8007e26:	bd80      	pop	{r7, pc}

08007e28 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
#endif
  
  return;
 8007e2c:	bf00      	nop
}
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8007e36:	b480      	push	{r7}
 8007e38:	af00      	add	r7, sp, #0
}
 8007e3a:	bf00      	nop
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007e4a:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <Ble_Tl_Init+0x20>)
 8007e4c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007e4e:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <Ble_Tl_Init+0x24>)
 8007e50:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007e52:	463b      	mov	r3, r7
 8007e54:	4619      	mov	r1, r3
 8007e56:	4805      	ldr	r0, [pc, #20]	; (8007e6c <Ble_Tl_Init+0x28>)
 8007e58:	f7fe fd7e 	bl	8006958 <hci_init>

  return;
 8007e5c:	bf00      	nop
}
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	200300d4 	.word	0x200300d4
 8007e68:	0800822f 	.word	0x0800822f
 8007e6c:	080081f7 	.word	0x080081f7

08007e70 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8007e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e72:	b08f      	sub	sp, #60	; 0x3c
 8007e74:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8007e76:	2300      	movs	r3, #0
 8007e78:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8007e7a:	f7fe fc7a 	bl	8006772 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8007e7e:	f000 f929 	bl	80080d4 <BleGetBdAddress>
 8007e82:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8007e84:	69fa      	ldr	r2, [r7, #28]
 8007e86:	2106      	movs	r1, #6
 8007e88:	2000      	movs	r0, #0
 8007e8a:	f7fe fb68 	bl	800655e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	795a      	ldrb	r2, [r3, #5]
 8007e92:	4b52      	ldr	r3, [pc, #328]	; (8007fdc <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007e94:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	791a      	ldrb	r2, [r3, #4]
 8007e9a:	4b50      	ldr	r3, [pc, #320]	; (8007fdc <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007e9c:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8007e9e:	69fb      	ldr	r3, [r7, #28]
 8007ea0:	78da      	ldrb	r2, [r3, #3]
 8007ea2:	4b4e      	ldr	r3, [pc, #312]	; (8007fdc <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007ea4:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	789a      	ldrb	r2, [r3, #2]
 8007eaa:	4b4c      	ldr	r3, [pc, #304]	; (8007fdc <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007eac:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	785a      	ldrb	r2, [r3, #1]
 8007eb2:	4b4a      	ldr	r3, [pc, #296]	; (8007fdc <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007eb4:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	781a      	ldrb	r2, [r3, #0]
 8007eba:	4b48      	ldr	r3, [pc, #288]	; (8007fdc <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007ebc:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8007ebe:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8007ec2:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8007ec4:	f7ff fe2a 	bl	8007b1c <LL_FLASH_GetUDN>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8007ecc:	1d3b      	adds	r3, r7, #4
 8007ece:	461a      	mov	r2, r3
 8007ed0:	2106      	movs	r1, #6
 8007ed2:	202e      	movs	r0, #46	; 0x2e
 8007ed4:	f7fe fb43 	bl	800655e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8007ed8:	4a41      	ldr	r2, [pc, #260]	; (8007fe0 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8007eda:	2110      	movs	r1, #16
 8007edc:	2018      	movs	r0, #24
 8007ede:	f7fe fb3e 	bl	800655e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8007ee2:	4a40      	ldr	r2, [pc, #256]	; (8007fe4 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8007ee4:	2110      	movs	r1, #16
 8007ee6:	2008      	movs	r0, #8
 8007ee8:	f7fe fb39 	bl	800655e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007eec:	2118      	movs	r1, #24
 8007eee:	2001      	movs	r0, #1
 8007ef0:	f7fe fb9e 	bl	8006630 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8007ef4:	f7fe f8ee 	bl	80060d4 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007efc:	7efb      	ldrb	r3, [r7, #27]
 8007efe:	f043 0301 	orr.w	r3, r3, #1
 8007f02:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8007f04:	7efb      	ldrb	r3, [r7, #27]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d01e      	beq.n	8007f48 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "BREATHE";
 8007f0a:	4b37      	ldr	r3, [pc, #220]	; (8007fe8 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8007f0c:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8007f0e:	f107 0212 	add.w	r2, r7, #18
 8007f12:	7ef8      	ldrb	r0, [r7, #27]
 8007f14:	f107 030e 	add.w	r3, r7, #14
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	f107 0310 	add.w	r3, r7, #16
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	4613      	mov	r3, r2
 8007f22:	2207      	movs	r2, #7
 8007f24:	2100      	movs	r1, #0
 8007f26:	f7fd ff29 	bl	8005d7c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8007f2a:	8a7c      	ldrh	r4, [r7, #18]
 8007f2c:	8a3d      	ldrh	r5, [r7, #16]
 8007f2e:	6978      	ldr	r0, [r7, #20]
 8007f30:	f7f8 f924 	bl	800017c <strlen>
 8007f34:	4603      	mov	r3, r0
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4629      	mov	r1, r5
 8007f42:	4620      	mov	r0, r4
 8007f44:	f7fe fa84 	bl	8006450 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8007f48:	8a78      	ldrh	r0, [r7, #18]
 8007f4a:	89f9      	ldrh	r1, [r7, #14]
 8007f4c:	463b      	mov	r3, r7
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2302      	movs	r3, #2
 8007f52:	2200      	movs	r2, #0
 8007f54:	f7fe fa7c 	bl	8006450 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007f58:	2202      	movs	r2, #2
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f7fe fc94 	bl	800688a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8007f62:	4b22      	ldr	r3, [pc, #136]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f64:	2201      	movs	r2, #1
 8007f66:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007f68:	4b20      	ldr	r3, [pc, #128]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fd fe13 	bl	8005b98 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8007f72:	4b1e      	ldr	r3, [pc, #120]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f74:	2201      	movs	r2, #1
 8007f76:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8007f78:	4b1c      	ldr	r3, [pc, #112]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f7a:	2208      	movs	r2, #8
 8007f7c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8007f7e:	4b1b      	ldr	r3, [pc, #108]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f80:	2210      	movs	r2, #16
 8007f82:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8007f84:	4b19      	ldr	r3, [pc, #100]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8007f8a:	4b18      	ldr	r3, [pc, #96]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f8c:	4a18      	ldr	r2, [pc, #96]	; (8007ff0 <Ble_Hci_Gap_Gatt_Init+0x180>)
 8007f8e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007f90:	4b16      	ldr	r3, [pc, #88]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f92:	2201      	movs	r2, #1
 8007f94:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007f96:	4b15      	ldr	r3, [pc, #84]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f98:	789c      	ldrb	r4, [r3, #2]
 8007f9a:	4b14      	ldr	r3, [pc, #80]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007f9c:	785d      	ldrb	r5, [r3, #1]
 8007f9e:	4b13      	ldr	r3, [pc, #76]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007fa0:	791b      	ldrb	r3, [r3, #4]
 8007fa2:	4a12      	ldr	r2, [pc, #72]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007fa4:	7952      	ldrb	r2, [r2, #5]
 8007fa6:	4911      	ldr	r1, [pc, #68]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007fa8:	78c9      	ldrb	r1, [r1, #3]
 8007faa:	4810      	ldr	r0, [pc, #64]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007fac:	6880      	ldr	r0, [r0, #8]
 8007fae:	2600      	movs	r6, #0
 8007fb0:	9604      	str	r6, [sp, #16]
 8007fb2:	9003      	str	r0, [sp, #12]
 8007fb4:	9102      	str	r1, [sp, #8]
 8007fb6:	9201      	str	r2, [sp, #4]
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f7fd fe33 	bl	8005c2c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007fc6:	4b09      	ldr	r3, [pc, #36]	; (8007fec <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007fc8:	789b      	ldrb	r3, [r3, #2]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d001      	beq.n	8007fd2 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8007fce:	f7fd ffbc 	bl	8005f4a <aci_gap_configure_whitelist>
   }
}
 8007fd2:	bf00      	nop
 8007fd4:	3724      	adds	r7, #36	; 0x24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20000028 	.word	0x20000028
 8007fe0:	08009094 	.word	0x08009094
 8007fe4:	080090a4 	.word	0x080090a4
 8007fe8:	08008ee0 	.word	0x08008ee0
 8007fec:	20000130 	.word	0x20000130
 8007ff0:	0001b207 	.word	0x0001b207

08007ff4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08c      	sub	sp, #48	; 0x30
 8007ff8:	af08      	add	r7, sp, #32
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ffe:	2342      	movs	r3, #66	; 0x42
 8008000:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d106      	bne.n	8008016 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8008008:	4b2b      	ldr	r3, [pc, #172]	; (80080b8 <Adv_Request+0xc4>)
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800800e:	4b2b      	ldr	r3, [pc, #172]	; (80080bc <Adv_Request+0xc8>)
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	81bb      	strh	r3, [r7, #12]
 8008014:	e005      	b.n	8008022 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8008016:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800801a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800801c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008020:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008022:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <Adv_Request+0xcc>)
 8008024:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008028:	4618      	mov	r0, r3
 800802a:	f7f9 f8a7 	bl	800117c <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d10d      	bne.n	8008050 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8008034:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <Adv_Request+0xcc>)
 8008036:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800803a:	2b01      	cmp	r3, #1
 800803c:	d004      	beq.n	8008048 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800803e:	4b20      	ldr	r3, [pc, #128]	; (80080c0 <Adv_Request+0xcc>)
 8008040:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008044:	2b02      	cmp	r3, #2
 8008046:	d103      	bne.n	8008050 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8008048:	f7fd fca4 	bl	8005994 <aci_gap_set_non_discoverable>
 800804c:	4603      	mov	r3, r0
 800804e:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008050:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <Adv_Request+0xcc>)
 8008052:	79fb      	ldrb	r3, [r7, #7]
 8008054:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008058:	4b19      	ldr	r3, [pc, #100]	; (80080c0 <Adv_Request+0xcc>)
 800805a:	7e1b      	ldrb	r3, [r3, #24]
 800805c:	89ba      	ldrh	r2, [r7, #12]
 800805e:	89f9      	ldrh	r1, [r7, #14]
 8008060:	2000      	movs	r0, #0
 8008062:	9006      	str	r0, [sp, #24]
 8008064:	2000      	movs	r0, #0
 8008066:	9005      	str	r0, [sp, #20]
 8008068:	4816      	ldr	r0, [pc, #88]	; (80080c4 <Adv_Request+0xd0>)
 800806a:	9004      	str	r0, [sp, #16]
 800806c:	9303      	str	r3, [sp, #12]
 800806e:	4b16      	ldr	r3, [pc, #88]	; (80080c8 <Adv_Request+0xd4>)
 8008070:	9302      	str	r3, [sp, #8]
 8008072:	2308      	movs	r3, #8
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	2300      	movs	r3, #0
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	2300      	movs	r3, #0
 800807c:	2000      	movs	r0, #0
 800807e:	f7fd fcad 	bl	80059dc <aci_gap_set_discoverable>
 8008082:	4603      	mov	r3, r0
 8008084:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8008086:	4911      	ldr	r1, [pc, #68]	; (80080cc <Adv_Request+0xd8>)
 8008088:	200e      	movs	r0, #14
 800808a:	f7fd ff02 	bl	8005e92 <aci_gap_update_adv_data>
 800808e:	4603      	mov	r3, r0
 8008090:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8008092:	7afb      	ldrb	r3, [r7, #11]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d107      	bne.n	80080ae <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800809e:	4b08      	ldr	r3, [pc, #32]	; (80080c0 <Adv_Request+0xcc>)
 80080a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080a4:	490a      	ldr	r1, [pc, #40]	; (80080d0 <Adv_Request+0xdc>)
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7f9 f8f4 	bl	8001294 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
}
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	200001b4 	.word	0x200001b4
 80080bc:	200001b6 	.word	0x200001b6
 80080c0:	20000130 	.word	0x20000130
 80080c4:	20000149 	.word	0x20000149
 80080c8:	080090b4 	.word	0x080090b4
 80080cc:	20000028 	.word	0x20000028
 80080d0:	0001e046 	.word	0x0001e046

080080d4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b086      	sub	sp, #24
 80080d8:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80080da:	f7ff fd1f 	bl	8007b1c <LL_FLASH_GetUDN>
 80080de:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e6:	d023      	beq.n	8008130 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80080e8:	f7ff fd30 	bl	8007b4c <LL_FLASH_GetSTCompanyID>
 80080ec:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80080ee:	f7ff fd21 	bl	8007b34 <LL_FLASH_GetDeviceID>
 80080f2:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	4b16      	ldr	r3, [pc, #88]	; (8008154 <BleGetBdAddress+0x80>)
 80080fa:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	0a1b      	lsrs	r3, r3, #8
 8008100:	b2da      	uxtb	r2, r3
 8008102:	4b14      	ldr	r3, [pc, #80]	; (8008154 <BleGetBdAddress+0x80>)
 8008104:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	b2da      	uxtb	r2, r3
 800810a:	4b12      	ldr	r3, [pc, #72]	; (8008154 <BleGetBdAddress+0x80>)
 800810c:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4b10      	ldr	r3, [pc, #64]	; (8008154 <BleGetBdAddress+0x80>)
 8008114:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	0a1b      	lsrs	r3, r3, #8
 800811a:	b2da      	uxtb	r2, r3
 800811c:	4b0d      	ldr	r3, [pc, #52]	; (8008154 <BleGetBdAddress+0x80>)
 800811e:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	b2da      	uxtb	r2, r3
 8008126:	4b0b      	ldr	r3, [pc, #44]	; (8008154 <BleGetBdAddress+0x80>)
 8008128:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <BleGetBdAddress+0x80>)
 800812c:	617b      	str	r3, [r7, #20]
 800812e:	e00b      	b.n	8008148 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008130:	2000      	movs	r0, #0
 8008132:	f7fe fdc7 	bl	8006cc4 <OTP_Read>
 8008136:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e001      	b.n	8008148 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008144:	4b04      	ldr	r3, [pc, #16]	; (8008158 <BleGetBdAddress+0x84>)
 8008146:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8008148:	697b      	ldr	r3, [r7, #20]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	2000025c 	.word	0x2000025c
 8008158:	0800908c 	.word	0x0800908c

0800815c <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8008162:	2001      	movs	r0, #1
 8008164:	f7fa f832 	bl	80021cc <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008168:	4b09      	ldr	r3, [pc, #36]	; (8008190 <Adv_Cancel+0x34>)
 800816a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800816e:	2b05      	cmp	r3, #5
 8008170:	d00a      	beq.n	8008188 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 8008172:	2300      	movs	r3, #0
 8008174:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008176:	f7fd fc0d 	bl	8005994 <aci_gap_set_non_discoverable>
 800817a:	4603      	mov	r3, r0
 800817c:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800817e:	4b04      	ldr	r3, [pc, #16]	; (8008190 <Adv_Cancel+0x34>)
 8008180:	2200      	movs	r2, #0
 8008182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008186:	bf00      	nop
 8008188:	bf00      	nop
}
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	20000130 	.word	0x20000130

08008194 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8008198:	2100      	movs	r1, #0
 800819a:	2001      	movs	r0, #1
 800819c:	f000 fd08 	bl	8008bb0 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80081a0:	bf00      	nop
}
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 80081a8:	2001      	movs	r0, #1
 80081aa:	f7fa f80f 	bl	80021cc <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 80081ae:	bf00      	nop
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80081ba:	2100      	movs	r1, #0
 80081bc:	2004      	movs	r0, #4
 80081be:	f000 fcf7 	bl	8008bb0 <UTIL_SEQ_SetTask>
  return;
 80081c2:	bf00      	nop
}
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80081d2:	2001      	movs	r0, #1
 80081d4:	f000 fd58 	bl	8008c88 <UTIL_SEQ_SetEvt>
  return;
 80081d8:	bf00      	nop
}
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80081e8:	2001      	movs	r0, #1
 80081ea:	f000 fd6d 	bl	8008cc8 <UTIL_SEQ_WaitEvt>
  return;
 80081ee:	bf00      	nop
}
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	3308      	adds	r3, #8
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff f9eb 	bl	80075e4 <SVCCTL_UserEvtRx>
 800820e:	4603      	mov	r3, r0
 8008210:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d003      	beq.n	8008220 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 800821e:	e002      	b.n	8008226 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]
}
 8008226:	bf00      	nop
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	4603      	mov	r3, r0
 8008236:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d002      	beq.n	8008244 <BLE_StatusNot+0x16>
 800823e:	2b01      	cmp	r3, #1
 8008240:	d006      	beq.n	8008250 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008242:	e00b      	b.n	800825c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008244:	231f      	movs	r3, #31
 8008246:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f000 fcdd 	bl	8008c08 <UTIL_SEQ_PauseTask>
      break;
 800824e:	e005      	b.n	800825c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008250:	231f      	movs	r3, #31
 8008252:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fcf7 	bl	8008c48 <UTIL_SEQ_ResumeTask>
      break;
 800825a:	bf00      	nop
  }
  return;
 800825c:	bf00      	nop
}
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <P2PS_STM_App_Notification>:
static void P2PS_TimeChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d019      	beq.n	80082a8 <P2PS_STM_App_Notification+0x44>
 8008274:	2b03      	cmp	r3, #3
 8008276:	dc52      	bgt.n	800831e <P2PS_STM_App_Notification+0xba>
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <P2PS_STM_App_Notification+0x1e>
 800827c:	2b01      	cmp	r3, #1
 800827e:	d00a      	beq.n	8008296 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8008280:	e04d      	b.n	800831e <P2PS_STM_App_Notification+0xba>
      P2P_Server_App_Context.Notification_Status = 1;
 8008282:	4b2a      	ldr	r3, [pc, #168]	; (800832c <P2PS_STM_App_Notification+0xc8>)
 8008284:	2201      	movs	r2, #1
 8008286:	701a      	strb	r2, [r3, #0]
      HW_TS_Start(P2P_Server_App_Context.Update_timer_Id, TIME_CHANGE_PERIOD);
 8008288:	4b28      	ldr	r3, [pc, #160]	; (800832c <P2PS_STM_App_Notification+0xc8>)
 800828a:	7b9b      	ldrb	r3, [r3, #14]
 800828c:	21cc      	movs	r1, #204	; 0xcc
 800828e:	4618      	mov	r0, r3
 8008290:	f7f9 f800 	bl	8001294 <HW_TS_Start>
      break;
 8008294:	e046      	b.n	8008324 <P2PS_STM_App_Notification+0xc0>
      P2P_Server_App_Context.Notification_Status = 0;
 8008296:	4b25      	ldr	r3, [pc, #148]	; (800832c <P2PS_STM_App_Notification+0xc8>)
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(P2P_Server_App_Context.Update_timer_Id);
 800829c:	4b23      	ldr	r3, [pc, #140]	; (800832c <P2PS_STM_App_Notification+0xc8>)
 800829e:	7b9b      	ldrb	r3, [r3, #14]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7f8 ff6b 	bl	800117c <HW_TS_Stop>
      break;
 80082a6:	e03d      	b.n	8008324 <P2PS_STM_App_Notification+0xc0>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d117      	bne.n	80082e2 <P2PS_STM_App_Notification+0x7e>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	3301      	adds	r3, #1
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d105      	bne.n	80082ca <P2PS_STM_App_Notification+0x66>
          BSP_LED_On(LED_BLUE);
 80082be:	2000      	movs	r0, #0
 80082c0:	f7f9 ff6a 	bl	8002198 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80082c4:	4b19      	ldr	r3, [pc, #100]	; (800832c <P2PS_STM_App_Notification+0xc8>)
 80082c6:	2201      	movs	r2, #1
 80082c8:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	3301      	adds	r3, #1
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d105      	bne.n	80082e2 <P2PS_STM_App_Notification+0x7e>
          BSP_LED_Off(LED_BLUE);
 80082d6:	2000      	movs	r0, #0
 80082d8:	f7f9 ff78 	bl	80021cc <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80082dc:	4b13      	ldr	r3, [pc, #76]	; (800832c <P2PS_STM_App_Notification+0xc8>)
 80082de:	2200      	movs	r2, #0
 80082e0:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d11a      	bne.n	8008322 <P2PS_STM_App_Notification+0xbe>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	3301      	adds	r3, #1
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d105      	bne.n	8008304 <P2PS_STM_App_Notification+0xa0>
          BSP_LED_On(LED_BLUE);
 80082f8:	2000      	movs	r0, #0
 80082fa:	f7f9 ff4d 	bl	8002198 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80082fe:	4b0b      	ldr	r3, [pc, #44]	; (800832c <P2PS_STM_App_Notification+0xc8>)
 8008300:	2201      	movs	r2, #1
 8008302:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	3301      	adds	r3, #1
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d108      	bne.n	8008322 <P2PS_STM_App_Notification+0xbe>
          BSP_LED_Off(LED_BLUE);
 8008310:	2000      	movs	r0, #0
 8008312:	f7f9 ff5b 	bl	80021cc <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8008316:	4b05      	ldr	r3, [pc, #20]	; (800832c <P2PS_STM_App_Notification+0xc8>)
 8008318:	2200      	movs	r2, #0
 800831a:	709a      	strb	r2, [r3, #2]
      break;
 800831c:	e001      	b.n	8008322 <P2PS_STM_App_Notification+0xbe>
      break;
 800831e:	bf00      	nop
 8008320:	e000      	b.n	8008324 <P2PS_STM_App_Notification+0xc0>
      break;
 8008322:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8008324:	bf00      	nop
}
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	200001b8 	.word	0x200001b8

08008330 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <P2PS_APP_Notification+0x1c>
 8008340:	2b01      	cmp	r3, #1
 8008342:	d000      	beq.n	8008346 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8008344:	e003      	b.n	800834e <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 8008346:	f000 f825 	bl	8008394 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800834a:	e000      	b.n	800834e <P2PS_APP_Notification+0x1e>
    break;
 800834c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800834e:	bf00      	nop
}
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  UTIL_SEQ_RegTask( 1<< CFG_MY_TASK_NOTIFY_TIME, UTIL_SEQ_RFU, P2PS_Send_Notification );
 800835c:	4a09      	ldr	r2, [pc, #36]	; (8008384 <P2PS_APP_Init+0x2c>)
 800835e:	2100      	movs	r1, #0
 8008360:	2010      	movs	r0, #16
 8008362:	f000 fc03 	bl	8008b6c <UTIL_SEQ_RegTask>

  /* Create timer to change the time and update charecteristic */
    HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8008366:	4b08      	ldr	r3, [pc, #32]	; (8008388 <P2PS_APP_Init+0x30>)
 8008368:	2201      	movs	r2, #1
 800836a:	4908      	ldr	r1, [pc, #32]	; (800838c <P2PS_APP_Init+0x34>)
 800836c:	2000      	movs	r0, #0
 800836e:	f7f8 fe8b 	bl	8001088 <HW_TS_Create>
			P2PS_TimeChange_Timer_Callback);

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8008372:	4b07      	ldr	r3, [pc, #28]	; (8008390 <P2PS_APP_Init+0x38>)
 8008374:	2200      	movs	r2, #0
 8008376:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8008378:	f000 f80c 	bl	8008394 <P2PS_APP_LED_BUTTON_context_Init>
  P2PS_APP_context_Init();
 800837c:	f000 f828 	bl	80083d0 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8008380:	bf00      	nop
}
 8008382:	bd80      	pop	{r7, pc}
 8008384:	08008405 	.word	0x08008405
 8008388:	080083f5 	.word	0x080083f5
 800838c:	200001c6 	.word	0x200001c6
 8008390:	200001b8 	.word	0x200001b8

08008394 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8008398:	2000      	movs	r0, #0
 800839a:	f7f9 ff17 	bl	80021cc <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 800839e:	4b07      	ldr	r3, [pc, #28]	; (80083bc <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80083a0:	2201      	movs	r2, #1
 80083a2:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80083a4:	4b05      	ldr	r3, [pc, #20]	; (80083bc <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80083aa:	4b04      	ldr	r3, [pc, #16]	; (80083bc <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80083ac:	2201      	movs	r2, #1
 80083ae:	729a      	strb	r2, [r3, #10]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80083b0:	4b02      	ldr	r3, [pc, #8]	; (80083bc <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	72da      	strb	r2, [r3, #11]
#endif

}
 80083b6:	bf00      	nop
 80083b8:	bd80      	pop	{r7, pc}
 80083ba:	bf00      	nop
 80083bc:	200001b8 	.word	0x200001b8

080083c0 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80083c4:	2100      	movs	r1, #0
 80083c6:	2002      	movs	r0, #2
 80083c8:	f000 fbf2 	bl	8008bb0 <UTIL_SEQ_SetTask>

  return;
 80083cc:	bf00      	nop
}
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 80083d0:	b480      	push	{r7}
 80083d2:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.TimeControl.Parameter = 0;
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <P2PS_APP_context_Init+0x20>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	809a      	strh	r2, [r3, #4]
	P2P_Server_App_Context.TimeControl.TimeStamp = 0xFF;
 80083da:	4b05      	ldr	r3, [pc, #20]	; (80083f0 <P2PS_APP_context_Init+0x20>)
 80083dc:	22ff      	movs	r2, #255	; 0xff
 80083de:	80da      	strh	r2, [r3, #6]
	P2P_Server_App_Context.TimeControl.Value = 0x11;
 80083e0:	4b03      	ldr	r3, [pc, #12]	; (80083f0 <P2PS_APP_context_Init+0x20>)
 80083e2:	2211      	movs	r2, #17
 80083e4:	811a      	strh	r2, [r3, #8]
}
 80083e6:	bf00      	nop
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	200001b8 	.word	0x200001b8

080083f4 <P2PS_TimeChange_Timer_Callback>:

static void P2PS_TimeChange_Timer_Callback(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 80083f8:	2100      	movs	r1, #0
 80083fa:	2010      	movs	r0, #16
 80083fc:	f000 fbd8 	bl	8008bb0 <UTIL_SEQ_SetTask>
}
 8008400:	bf00      	nop
 8008402:	bd80      	pop	{r7, pc}

08008404 <P2PS_Send_Notification>:

void P2PS_Send_Notification(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
	uint8_t value[2];

	value[0] = (uint8_t)(P2P_Server_App_Context.TimeControl.TimeStamp & 0x00FF);
 800840a:	4b14      	ldr	r3, [pc, #80]	; (800845c <P2PS_Send_Notification+0x58>)
 800840c:	88db      	ldrh	r3, [r3, #6]
 800840e:	b2db      	uxtb	r3, r3
 8008410:	713b      	strb	r3, [r7, #4]
	value[1] = (uint8_t)(P2P_Server_App_Context.TimeControl.TimeStamp >> 8);
 8008412:	4b12      	ldr	r3, [pc, #72]	; (800845c <P2PS_Send_Notification+0x58>)
 8008414:	88db      	ldrh	r3, [r3, #6]
 8008416:	0a1b      	lsrs	r3, r3, #8
 8008418:	b29b      	uxth	r3, r3
 800841a:	b2db      	uxtb	r3, r3
 800841c:	717b      	strb	r3, [r7, #5]

 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 800841e:	4b0f      	ldr	r3, [pc, #60]	; (800845c <P2PS_Send_Notification+0x58>)
 8008420:	7adb      	ldrb	r3, [r3, #11]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d103      	bne.n	800842e <P2PS_Send_Notification+0x2a>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8008426:	4b0d      	ldr	r3, [pc, #52]	; (800845c <P2PS_Send_Notification+0x58>)
 8008428:	2201      	movs	r2, #1
 800842a:	72da      	strb	r2, [r3, #11]
 800842c:	e002      	b.n	8008434 <P2PS_Send_Notification+0x30>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800842e:	4b0b      	ldr	r3, [pc, #44]	; (800845c <P2PS_Send_Notification+0x58>)
 8008430:	2200      	movs	r2, #0
 8008432:	72da      	strb	r2, [r3, #11]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8008434:	4b09      	ldr	r3, [pc, #36]	; (800845c <P2PS_Send_Notification+0x58>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00a      	beq.n	8008452 <P2PS_Send_Notification+0x4e>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 800843c:	4908      	ldr	r1, [pc, #32]	; (8008460 <P2PS_Send_Notification+0x5c>)
 800843e:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8008442:	f7fe fdbb 	bl	8006fbc <P2PS_STM_App_Update_Char>
    P2PS_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 8008446:	1d3b      	adds	r3, r7, #4
 8008448:	4619      	mov	r1, r3
 800844a:	2000      	movs	r0, #0
 800844c:	f7fe fdb6 	bl	8006fbc <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8008450:	bf00      	nop
 8008452:	bf00      	nop
}
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	200001b8 	.word	0x200001b8
 8008460:	200001c2 	.word	0x200001c2

08008464 <LL_PWR_EnableBootC2>:
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008468:	4b05      	ldr	r3, [pc, #20]	; (8008480 <LL_PWR_EnableBootC2+0x1c>)
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	4a04      	ldr	r2, [pc, #16]	; (8008480 <LL_PWR_EnableBootC2+0x1c>)
 800846e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008472:	60d3      	str	r3, [r2, #12]
}
 8008474:	bf00      	nop
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	58000400 	.word	0x58000400

08008484 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800848e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008492:	4905      	ldr	r1, [pc, #20]	; (80084a8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	58000800 	.word	0x58000800

080084ac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80084b4:	4b05      	ldr	r3, [pc, #20]	; (80084cc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80084b6:	6a1a      	ldr	r2, [r3, #32]
 80084b8:	4904      	ldr	r1, [pc, #16]	; (80084cc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4313      	orrs	r3, r2
 80084be:	620b      	str	r3, [r1, #32]
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	58000800 	.word	0x58000800

080084d0 <LL_AHB3_GRP1_EnableClock>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80084d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80084e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4013      	ands	r3, r2
 80084f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80084f4:	68fb      	ldr	r3, [r7, #12]
}
 80084f6:	bf00      	nop
 80084f8:	3714      	adds	r7, #20
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr

08008502 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008502:	b480      	push	{r7}
 8008504:	b085      	sub	sp, #20
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800850a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800850e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800851e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008522:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4013      	ands	r3, r2
 800852a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800852c:	68fb      	ldr	r3, [r7, #12]
}
 800852e:	bf00      	nop
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <LL_C1_IPCC_EnableIT_TXF>:
{
 800853a:	b480      	push	{r7}
 800853c:	b083      	sub	sp, #12
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	601a      	str	r2, [r3, #0]
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr

0800855a <LL_C1_IPCC_EnableIT_RXO>:
{
 800855a:	b480      	push	{r7}
 800855c:	b083      	sub	sp, #12
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f043 0201 	orr.w	r2, r3, #1
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	601a      	str	r2, [r3, #0]
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800857a:	b480      	push	{r7}
 800857c:	b083      	sub	sp, #12
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685a      	ldr	r2, [r3, #4]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	041b      	lsls	r3, r3, #16
 800858c:	43db      	mvns	r3, r3
 800858e:	401a      	ands	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	605a      	str	r2, [r3, #4]
}
 8008594:	bf00      	nop
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685a      	ldr	r2, [r3, #4]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	041b      	lsls	r3, r3, #16
 80085b2:	431a      	orrs	r2, r3
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	605a      	str	r2, [r3, #4]
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	43db      	mvns	r3, r3
 80085d6:	401a      	ands	r2, r3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	605a      	str	r2, [r3, #4]
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	609a      	str	r2, [r3, #8]
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <LL_C1_IPCC_SetFlag_CHx>:
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	041a      	lsls	r2, r3, #16
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	609a      	str	r2, [r3, #8]
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	68da      	ldr	r2, [r3, #12]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	4013      	ands	r3, r2
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d101      	bne.n	800863e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	69da      	ldr	r2, [r3, #28]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	4013      	ands	r3, r2
 800865e:	683a      	ldr	r2, [r7, #0]
 8008660:	429a      	cmp	r2, r3
 8008662:	d101      	bne.n	8008668 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008664:	2301      	movs	r3, #1
 8008666:	e000      	b.n	800866a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
	...

08008678 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800867c:	2102      	movs	r1, #2
 800867e:	4819      	ldr	r0, [pc, #100]	; (80086e4 <HW_IPCC_Rx_Handler+0x6c>)
 8008680:	f7ff ffe4 	bl	800864c <LL_C2_IPCC_IsActiveFlag_CHx>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d009      	beq.n	800869e <HW_IPCC_Rx_Handler+0x26>
 800868a:	4b16      	ldr	r3, [pc, #88]	; (80086e4 <HW_IPCC_Rx_Handler+0x6c>)
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	43db      	mvns	r3, r3
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8008698:	f000 f8ea 	bl	8008870 <HW_IPCC_SYS_EvtHandler>
 800869c:	e01f      	b.n	80086de <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800869e:	2101      	movs	r1, #1
 80086a0:	4810      	ldr	r0, [pc, #64]	; (80086e4 <HW_IPCC_Rx_Handler+0x6c>)
 80086a2:	f7ff ffd3 	bl	800864c <LL_C2_IPCC_IsActiveFlag_CHx>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HW_IPCC_Rx_Handler+0x46>
 80086ac:	4b0d      	ldr	r3, [pc, #52]	; (80086e4 <HW_IPCC_Rx_Handler+0x6c>)
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80086b8:	f000 f89e 	bl	80087f8 <HW_IPCC_BLE_EvtHandler>
 80086bc:	e00f      	b.n	80086de <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80086be:	2108      	movs	r1, #8
 80086c0:	4808      	ldr	r0, [pc, #32]	; (80086e4 <HW_IPCC_Rx_Handler+0x6c>)
 80086c2:	f7ff ffc3 	bl	800864c <LL_C2_IPCC_IsActiveFlag_CHx>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d009      	beq.n	80086e0 <HW_IPCC_Rx_Handler+0x68>
 80086cc:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <HW_IPCC_Rx_Handler+0x6c>)
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	43db      	mvns	r3, r3
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d002      	beq.n	80086e0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80086da:	f000 f915 	bl	8008908 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80086de:	bf00      	nop
 80086e0:	bf00      	nop
}
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	58000c00 	.word	0x58000c00

080086e8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80086ec:	2102      	movs	r1, #2
 80086ee:	4822      	ldr	r0, [pc, #136]	; (8008778 <HW_IPCC_Tx_Handler+0x90>)
 80086f0:	f7ff ff97 	bl	8008622 <LL_C1_IPCC_IsActiveFlag_CHx>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d109      	bne.n	800870e <HW_IPCC_Tx_Handler+0x26>
 80086fa:	4b1f      	ldr	r3, [pc, #124]	; (8008778 <HW_IPCC_Tx_Handler+0x90>)
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	43db      	mvns	r3, r3
 8008700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008708:	f000 f8a6 	bl	8008858 <HW_IPCC_SYS_CmdEvtHandler>
 800870c:	e031      	b.n	8008772 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800870e:	2102      	movs	r1, #2
 8008710:	4819      	ldr	r0, [pc, #100]	; (8008778 <HW_IPCC_Tx_Handler+0x90>)
 8008712:	f7ff ff86 	bl	8008622 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d109      	bne.n	8008730 <HW_IPCC_Tx_Handler+0x48>
 800871c:	4b16      	ldr	r3, [pc, #88]	; (8008778 <HW_IPCC_Tx_Handler+0x90>)
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	43db      	mvns	r3, r3
 8008722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d002      	beq.n	8008730 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800872a:	f000 f895 	bl	8008858 <HW_IPCC_SYS_CmdEvtHandler>
 800872e:	e020      	b.n	8008772 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008730:	2108      	movs	r1, #8
 8008732:	4811      	ldr	r0, [pc, #68]	; (8008778 <HW_IPCC_Tx_Handler+0x90>)
 8008734:	f7ff ff75 	bl	8008622 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <HW_IPCC_Tx_Handler+0x6a>
 800873e:	4b0e      	ldr	r3, [pc, #56]	; (8008778 <HW_IPCC_Tx_Handler+0x90>)
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	43db      	mvns	r3, r3
 8008744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d002      	beq.n	8008752 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 800874c:	f000 f8be 	bl	80088cc <HW_IPCC_MM_FreeBufHandler>
 8008750:	e00f      	b.n	8008772 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008752:	2120      	movs	r1, #32
 8008754:	4808      	ldr	r0, [pc, #32]	; (8008778 <HW_IPCC_Tx_Handler+0x90>)
 8008756:	f7ff ff64 	bl	8008622 <LL_C1_IPCC_IsActiveFlag_CHx>
 800875a:	4603      	mov	r3, r0
 800875c:	2b00      	cmp	r3, #0
 800875e:	d109      	bne.n	8008774 <HW_IPCC_Tx_Handler+0x8c>
 8008760:	4b05      	ldr	r3, [pc, #20]	; (8008778 <HW_IPCC_Tx_Handler+0x90>)
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	43db      	mvns	r3, r3
 8008766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800876e:	f000 f84f 	bl	8008810 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008772:	bf00      	nop
 8008774:	bf00      	nop
}
 8008776:	bd80      	pop	{r7, pc}
 8008778:	58000c00 	.word	0x58000c00

0800877c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008780:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008784:	f7ff febd 	bl	8008502 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008788:	f44f 7000 	mov.w	r0, #512	; 0x200
 800878c:	f7ff fe7a 	bl	8008484 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008790:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008794:	f7ff fe8a 	bl	80084ac <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008798:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800879a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800879c:	f7ff fe62 	bl	8008464 <LL_PWR_EnableBootC2>

  return;
 80087a0:	bf00      	nop
}
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80087a8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80087ac:	f7ff fe90 	bl	80084d0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80087b0:	4806      	ldr	r0, [pc, #24]	; (80087cc <HW_IPCC_Init+0x28>)
 80087b2:	f7ff fed2 	bl	800855a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80087b6:	4805      	ldr	r0, [pc, #20]	; (80087cc <HW_IPCC_Init+0x28>)
 80087b8:	f7ff febf 	bl	800853a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80087bc:	202c      	movs	r0, #44	; 0x2c
 80087be:	f7f9 ffbe 	bl	800273e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80087c2:	202d      	movs	r0, #45	; 0x2d
 80087c4:	f7f9 ffbb 	bl	800273e <HAL_NVIC_EnableIRQ>

  return;
 80087c8:	bf00      	nop
}
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	58000c00 	.word	0x58000c00

080087d0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80087d4:	2101      	movs	r1, #1
 80087d6:	4802      	ldr	r0, [pc, #8]	; (80087e0 <HW_IPCC_BLE_Init+0x10>)
 80087d8:	f7ff fef4 	bl	80085c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80087dc:	bf00      	nop
}
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	58000c00 	.word	0x58000c00

080087e4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80087e8:	2101      	movs	r1, #1
 80087ea:	4802      	ldr	r0, [pc, #8]	; (80087f4 <HW_IPCC_BLE_SendCmd+0x10>)
 80087ec:	f7ff ff0a 	bl	8008604 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80087f0:	bf00      	nop
}
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	58000c00 	.word	0x58000c00

080087f8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80087fc:	f7fe ffd6 	bl	80077ac <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008800:	2101      	movs	r1, #1
 8008802:	4802      	ldr	r0, [pc, #8]	; (800880c <HW_IPCC_BLE_EvtHandler+0x14>)
 8008804:	f7ff fef0 	bl	80085e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008808:	bf00      	nop
}
 800880a:	bd80      	pop	{r7, pc}
 800880c:	58000c00 	.word	0x58000c00

08008810 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008814:	2120      	movs	r1, #32
 8008816:	4803      	ldr	r0, [pc, #12]	; (8008824 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008818:	f7ff fec2 	bl	80085a0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800881c:	f7fe fff6 	bl	800780c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008820:	bf00      	nop
}
 8008822:	bd80      	pop	{r7, pc}
 8008824:	58000c00 	.word	0x58000c00

08008828 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800882c:	2102      	movs	r1, #2
 800882e:	4802      	ldr	r0, [pc, #8]	; (8008838 <HW_IPCC_SYS_Init+0x10>)
 8008830:	f7ff fec8 	bl	80085c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008834:	bf00      	nop
}
 8008836:	bd80      	pop	{r7, pc}
 8008838:	58000c00 	.word	0x58000c00

0800883c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008840:	2102      	movs	r1, #2
 8008842:	4804      	ldr	r0, [pc, #16]	; (8008854 <HW_IPCC_SYS_SendCmd+0x18>)
 8008844:	f7ff fede 	bl	8008604 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008848:	2102      	movs	r1, #2
 800884a:	4802      	ldr	r0, [pc, #8]	; (8008854 <HW_IPCC_SYS_SendCmd+0x18>)
 800884c:	f7ff fe95 	bl	800857a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008850:	bf00      	nop
}
 8008852:	bd80      	pop	{r7, pc}
 8008854:	58000c00 	.word	0x58000c00

08008858 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800885c:	2102      	movs	r1, #2
 800885e:	4803      	ldr	r0, [pc, #12]	; (800886c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008860:	f7ff fe9e 	bl	80085a0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008864:	f7ff f822 	bl	80078ac <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008868:	bf00      	nop
}
 800886a:	bd80      	pop	{r7, pc}
 800886c:	58000c00 	.word	0x58000c00

08008870 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008874:	f7ff f830 	bl	80078d8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008878:	2102      	movs	r1, #2
 800887a:	4802      	ldr	r0, [pc, #8]	; (8008884 <HW_IPCC_SYS_EvtHandler+0x14>)
 800887c:	f7ff feb4 	bl	80085e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008880:	bf00      	nop
}
 8008882:	bd80      	pop	{r7, pc}
 8008884:	58000c00 	.word	0x58000c00

08008888 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008890:	2108      	movs	r1, #8
 8008892:	480c      	ldr	r0, [pc, #48]	; (80088c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008894:	f7ff fec5 	bl	8008622 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800889e:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088a4:	2108      	movs	r1, #8
 80088a6:	4807      	ldr	r0, [pc, #28]	; (80088c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80088a8:	f7ff fe67 	bl	800857a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80088ac:	e006      	b.n	80088bc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088b2:	2108      	movs	r1, #8
 80088b4:	4803      	ldr	r0, [pc, #12]	; (80088c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80088b6:	f7ff fea5 	bl	8008604 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80088ba:	bf00      	nop
}
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	58000c00 	.word	0x58000c00
 80088c8:	20000264 	.word	0x20000264

080088cc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088d0:	2108      	movs	r1, #8
 80088d2:	4806      	ldr	r0, [pc, #24]	; (80088ec <HW_IPCC_MM_FreeBufHandler+0x20>)
 80088d4:	f7ff fe64 	bl	80085a0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80088de:	2108      	movs	r1, #8
 80088e0:	4802      	ldr	r0, [pc, #8]	; (80088ec <HW_IPCC_MM_FreeBufHandler+0x20>)
 80088e2:	f7ff fe8f 	bl	8008604 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80088e6:	bf00      	nop
}
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	58000c00 	.word	0x58000c00
 80088f0:	20000264 	.word	0x20000264

080088f4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80088f8:	2108      	movs	r1, #8
 80088fa:	4802      	ldr	r0, [pc, #8]	; (8008904 <HW_IPCC_TRACES_Init+0x10>)
 80088fc:	f7ff fe62 	bl	80085c4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008900:	bf00      	nop
}
 8008902:	bd80      	pop	{r7, pc}
 8008904:	58000c00 	.word	0x58000c00

08008908 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800890c:	f7ff f88c 	bl	8007a28 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008910:	2108      	movs	r1, #8
 8008912:	4802      	ldr	r0, [pc, #8]	; (800891c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008914:	f7ff fe68 	bl	80085e8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008918:	bf00      	nop
}
 800891a:	bd80      	pop	{r7, pc}
 800891c:	58000c00 	.word	0x58000c00

08008920 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008920:	b480      	push	{r7}
 8008922:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <UTIL_LPM_Init+0x1c>)
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800892a:	4b05      	ldr	r3, [pc, #20]	; (8008940 <UTIL_LPM_Init+0x20>)
 800892c:	2200      	movs	r2, #0
 800892e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008930:	bf00      	nop
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	20000268 	.word	0x20000268
 8008940:	2000026c 	.word	0x2000026c

08008944 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008950:	f3ef 8310 	mrs	r3, PRIMASK
 8008954:	613b      	str	r3, [r7, #16]
  return(result);
 8008956:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008958:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800895a:	b672      	cpsid	i
}
 800895c:	bf00      	nop
  
  switch(state)
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <UTIL_LPM_SetOffMode+0x32>
 8008964:	2b01      	cmp	r3, #1
 8008966:	d10e      	bne.n	8008986 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008968:	4b0d      	ldr	r3, [pc, #52]	; (80089a0 <UTIL_LPM_SetOffMode+0x5c>)
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	4313      	orrs	r3, r2
 8008970:	4a0b      	ldr	r2, [pc, #44]	; (80089a0 <UTIL_LPM_SetOffMode+0x5c>)
 8008972:	6013      	str	r3, [r2, #0]
      break;
 8008974:	e008      	b.n	8008988 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	43da      	mvns	r2, r3
 800897a:	4b09      	ldr	r3, [pc, #36]	; (80089a0 <UTIL_LPM_SetOffMode+0x5c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4013      	ands	r3, r2
 8008980:	4a07      	ldr	r2, [pc, #28]	; (80089a0 <UTIL_LPM_SetOffMode+0x5c>)
 8008982:	6013      	str	r3, [r2, #0]
      break;
 8008984:	e000      	b.n	8008988 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008986:	bf00      	nop
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f383 8810 	msr	PRIMASK, r3
}
 8008992:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008994:	bf00      	nop
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	2000026c 	.word	0x2000026c

080089a4 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08c      	sub	sp, #48	; 0x30
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80089ac:	4b67      	ldr	r3, [pc, #412]	; (8008b4c <UTIL_SEQ_Run+0x1a8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80089b2:	4b66      	ldr	r3, [pc, #408]	; (8008b4c <UTIL_SEQ_Run+0x1a8>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4013      	ands	r3, r2
 80089ba:	4a64      	ldr	r2, [pc, #400]	; (8008b4c <UTIL_SEQ_Run+0x1a8>)
 80089bc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 80089be:	e083      	b.n	8008ac8 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80089c4:	e002      	b.n	80089cc <UTIL_SEQ_Run+0x28>
    {
      counter++;
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	3301      	adds	r3, #1
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 80089cc:	4a60      	ldr	r2, [pc, #384]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 80089ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80089d4:	4b5f      	ldr	r3, [pc, #380]	; (8008b54 <UTIL_SEQ_Run+0x1b0>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	401a      	ands	r2, r3
 80089da:	4b5c      	ldr	r3, [pc, #368]	; (8008b4c <UTIL_SEQ_Run+0x1a8>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4013      	ands	r3, r2
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0f0      	beq.n	80089c6 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 80089e4:	4a5a      	ldr	r2, [pc, #360]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80089ec:	4b59      	ldr	r3, [pc, #356]	; (8008b54 <UTIL_SEQ_Run+0x1b0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	401a      	ands	r2, r3
 80089f2:	4b56      	ldr	r3, [pc, #344]	; (8008b4c <UTIL_SEQ_Run+0x1a8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4013      	ands	r3, r2
 80089f8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80089fa:	4a55      	ldr	r2, [pc, #340]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	4413      	add	r3, r2
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a06:	4013      	ands	r3, r2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d106      	bne.n	8008a1a <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008a0c:	4a50      	ldr	r2, [pc, #320]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	4413      	add	r3, r2
 8008a14:	f04f 32ff 	mov.w	r2, #4294967295
 8008a18:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008a1a:	4a4d      	ldr	r2, [pc, #308]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	00db      	lsls	r3, r3, #3
 8008a20:	4413      	add	r3, r2
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	4013      	ands	r3, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 f99d 	bl	8008d68 <SEQ_BitPosition>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b49      	ldr	r3, [pc, #292]	; (8008b58 <UTIL_SEQ_Run+0x1b4>)
 8008a34:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008a36:	4a46      	ldr	r2, [pc, #280]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	4413      	add	r3, r2
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	4b45      	ldr	r3, [pc, #276]	; (8008b58 <UTIL_SEQ_Run+0x1b4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2101      	movs	r1, #1
 8008a46:	fa01 f303 	lsl.w	r3, r1, r3
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	401a      	ands	r2, r3
 8008a4e:	4940      	ldr	r1, [pc, #256]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 8008a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	440b      	add	r3, r1
 8008a56:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a58:	f3ef 8310 	mrs	r3, PRIMASK
 8008a5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a5e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008a60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a62:	b672      	cpsid	i
}
 8008a64:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008a66:	4b3c      	ldr	r3, [pc, #240]	; (8008b58 <UTIL_SEQ_Run+0x1b4>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a70:	43da      	mvns	r2, r3
 8008a72:	4b3a      	ldr	r3, [pc, #232]	; (8008b5c <UTIL_SEQ_Run+0x1b8>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4013      	ands	r3, r2
 8008a78:	4a38      	ldr	r2, [pc, #224]	; (8008b5c <UTIL_SEQ_Run+0x1b8>)
 8008a7a:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a80:	e013      	b.n	8008aaa <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	3b01      	subs	r3, #1
 8008a86:	4a32      	ldr	r2, [pc, #200]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 8008a88:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008a8c:	4b32      	ldr	r3, [pc, #200]	; (8008b58 <UTIL_SEQ_Run+0x1b4>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2201      	movs	r2, #1
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43da      	mvns	r2, r3
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	400a      	ands	r2, r1
 8008a9e:	492c      	ldr	r1, [pc, #176]	; (8008b50 <UTIL_SEQ_Run+0x1ac>)
 8008aa0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e8      	bne.n	8008a82 <UTIL_SEQ_Run+0xde>
 8008ab0:	6a3b      	ldr	r3, [r7, #32]
 8008ab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f383 8810 	msr	PRIMASK, r3
}
 8008aba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008abc:	4b26      	ldr	r3, [pc, #152]	; (8008b58 <UTIL_SEQ_Run+0x1b4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4a27      	ldr	r2, [pc, #156]	; (8008b60 <UTIL_SEQ_Run+0x1bc>)
 8008ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac6:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008ac8:	4b24      	ldr	r3, [pc, #144]	; (8008b5c <UTIL_SEQ_Run+0x1b8>)
 8008aca:	681a      	ldr	r2, [r3, #0]
 8008acc:	4b21      	ldr	r3, [pc, #132]	; (8008b54 <UTIL_SEQ_Run+0x1b0>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	401a      	ands	r2, r3
 8008ad2:	4b1e      	ldr	r3, [pc, #120]	; (8008b4c <UTIL_SEQ_Run+0x1a8>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <UTIL_SEQ_Run+0x148>
 8008adc:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <UTIL_SEQ_Run+0x1c0>)
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	4b21      	ldr	r3, [pc, #132]	; (8008b68 <UTIL_SEQ_Run+0x1c4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f43f af6a 	beq.w	80089c0 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008aec:	4b1a      	ldr	r3, [pc, #104]	; (8008b58 <UTIL_SEQ_Run+0x1b4>)
 8008aee:	f04f 32ff 	mov.w	r2, #4294967295
 8008af2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008af4:	f000 f92a 	bl	8008d4c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af8:	f3ef 8310 	mrs	r3, PRIMASK
 8008afc:	613b      	str	r3, [r7, #16]
  return(result);
 8008afe:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008b00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b02:	b672      	cpsid	i
}
 8008b04:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8008b06:	4b15      	ldr	r3, [pc, #84]	; (8008b5c <UTIL_SEQ_Run+0x1b8>)
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	4b12      	ldr	r3, [pc, #72]	; (8008b54 <UTIL_SEQ_Run+0x1b0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	401a      	ands	r2, r3
 8008b10:	4b0e      	ldr	r3, [pc, #56]	; (8008b4c <UTIL_SEQ_Run+0x1a8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4013      	ands	r3, r2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d108      	bne.n	8008b2c <UTIL_SEQ_Run+0x188>
 8008b1a:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <UTIL_SEQ_Run+0x1c0>)
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4b12      	ldr	r3, [pc, #72]	; (8008b68 <UTIL_SEQ_Run+0x1c4>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4013      	ands	r3, r2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8008b28:	f7f7 fd47 	bl	80005ba <UTIL_SEQ_Idle>
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	f383 8810 	msr	PRIMASK, r3
}
 8008b36:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8008b38:	f000 f90f 	bl	8008d5a <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008b3c:	4a03      	ldr	r2, [pc, #12]	; (8008b4c <UTIL_SEQ_Run+0x1a8>)
 8008b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b40:	6013      	str	r3, [r2, #0]

  return;
 8008b42:	bf00      	nop
}
 8008b44:	3730      	adds	r7, #48	; 0x30
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	2000003c 	.word	0x2000003c
 8008b50:	20000300 	.word	0x20000300
 8008b54:	20000038 	.word	0x20000038
 8008b58:	2000027c 	.word	0x2000027c
 8008b5c:	20000270 	.word	0x20000270
 8008b60:	20000280 	.word	0x20000280
 8008b64:	20000274 	.word	0x20000274
 8008b68:	20000278 	.word	0x20000278

08008b6c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b78:	f3ef 8310 	mrs	r3, PRIMASK
 8008b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8008b7e:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008b80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b82:	b672      	cpsid	i
}
 8008b84:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 f8ee 	bl	8008d68 <SEQ_BitPosition>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	4619      	mov	r1, r3
 8008b90:	4a06      	ldr	r2, [pc, #24]	; (8008bac <UTIL_SEQ_RegTask+0x40>)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	f383 8810 	msr	PRIMASK, r3
}
 8008ba2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008ba4:	bf00      	nop
}
 8008ba6:	3720      	adds	r7, #32
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20000280 	.word	0x20000280

08008bb0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bba:	f3ef 8310 	mrs	r3, PRIMASK
 8008bbe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bc4:	b672      	cpsid	i
}
 8008bc6:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <UTIL_SEQ_SetTask+0x50>)
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	4a0b      	ldr	r2, [pc, #44]	; (8008c00 <UTIL_SEQ_SetTask+0x50>)
 8008bd2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008bd4:	4a0b      	ldr	r2, [pc, #44]	; (8008c04 <UTIL_SEQ_SetTask+0x54>)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	431a      	orrs	r2, r3
 8008be0:	4908      	ldr	r1, [pc, #32]	; (8008c04 <UTIL_SEQ_SetTask+0x54>)
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f383 8810 	msr	PRIMASK, r3
}
 8008bf2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008bf4:	bf00      	nop
}
 8008bf6:	371c      	adds	r7, #28
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	20000270 	.word	0x20000270
 8008c04:	20000300 	.word	0x20000300

08008c08 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b087      	sub	sp, #28
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c10:	f3ef 8310 	mrs	r3, PRIMASK
 8008c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c16:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c1a:	b672      	cpsid	i
}
 8008c1c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	43da      	mvns	r2, r3
 8008c22:	4b08      	ldr	r3, [pc, #32]	; (8008c44 <UTIL_SEQ_PauseTask+0x3c>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4013      	ands	r3, r2
 8008c28:	4a06      	ldr	r2, [pc, #24]	; (8008c44 <UTIL_SEQ_PauseTask+0x3c>)
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f383 8810 	msr	PRIMASK, r3
}
 8008c36:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c38:	bf00      	nop
}
 8008c3a:	371c      	adds	r7, #28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	20000038 	.word	0x20000038

08008c48 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c50:	f3ef 8310 	mrs	r3, PRIMASK
 8008c54:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c56:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c58:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c5a:	b672      	cpsid	i
}
 8008c5c:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <UTIL_SEQ_ResumeTask+0x3c>)
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	4a07      	ldr	r2, [pc, #28]	; (8008c84 <UTIL_SEQ_ResumeTask+0x3c>)
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f383 8810 	msr	PRIMASK, r3
}
 8008c74:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008c76:	bf00      	nop
}
 8008c78:	371c      	adds	r7, #28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20000038 	.word	0x20000038

08008c88 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b087      	sub	sp, #28
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c90:	f3ef 8310 	mrs	r3, PRIMASK
 8008c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c96:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c9a:	b672      	cpsid	i
}
 8008c9c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008c9e:	4b09      	ldr	r3, [pc, #36]	; (8008cc4 <UTIL_SEQ_SetEvt+0x3c>)
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	4a07      	ldr	r2, [pc, #28]	; (8008cc4 <UTIL_SEQ_SetEvt+0x3c>)
 8008ca8:	6013      	str	r3, [r2, #0]
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	f383 8810 	msr	PRIMASK, r3
}
 8008cb4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008cb6:	bf00      	nop
}
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	20000274 	.word	0x20000274

08008cc8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008cd0:	4b1b      	ldr	r3, [pc, #108]	; (8008d40 <UTIL_SEQ_WaitEvt+0x78>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008cd6:	4b1a      	ldr	r3, [pc, #104]	; (8008d40 <UTIL_SEQ_WaitEvt+0x78>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cde:	d102      	bne.n	8008ce6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	617b      	str	r3, [r7, #20]
 8008ce4:	e005      	b.n	8008cf2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8008ce6:	4b16      	ldr	r3, [pc, #88]	; (8008d40 <UTIL_SEQ_WaitEvt+0x78>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2201      	movs	r2, #1
 8008cec:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf0:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008cf2:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <UTIL_SEQ_WaitEvt+0x7c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8008cf8:	4a12      	ldr	r2, [pc, #72]	; (8008d44 <UTIL_SEQ_WaitEvt+0x7c>)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8008cfe:	e005      	b.n	8008d0c <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8008d00:	4b10      	ldr	r3, [pc, #64]	; (8008d44 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4619      	mov	r1, r3
 8008d06:	6978      	ldr	r0, [r7, #20]
 8008d08:	f7f7 fc5e 	bl	80005c8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8008d0c:	4b0e      	ldr	r3, [pc, #56]	; (8008d48 <UTIL_SEQ_WaitEvt+0x80>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	4b0c      	ldr	r3, [pc, #48]	; (8008d44 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4013      	ands	r3, r2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0f2      	beq.n	8008d00 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008d1a:	4a09      	ldr	r2, [pc, #36]	; (8008d40 <UTIL_SEQ_WaitEvt+0x78>)
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8008d20:	4b08      	ldr	r3, [pc, #32]	; (8008d44 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	43da      	mvns	r2, r3
 8008d26:	4b08      	ldr	r3, [pc, #32]	; (8008d48 <UTIL_SEQ_WaitEvt+0x80>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	4a06      	ldr	r2, [pc, #24]	; (8008d48 <UTIL_SEQ_WaitEvt+0x80>)
 8008d2e:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8008d30:	4a04      	ldr	r2, [pc, #16]	; (8008d44 <UTIL_SEQ_WaitEvt+0x7c>)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6013      	str	r3, [r2, #0]

  return;
 8008d36:	bf00      	nop
}
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	2000027c 	.word	0x2000027c
 8008d44:	20000278 	.word	0x20000278
 8008d48:	20000274 	.word	0x20000274

08008d4c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008d50:	bf00      	nop
}
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008d5e:	bf00      	nop
}
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	0c1b      	lsrs	r3, r3, #16
 8008d78:	041b      	lsls	r3, r3, #16
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d104      	bne.n	8008d88 <SEQ_BitPosition+0x20>
 8008d7e:	2310      	movs	r3, #16
 8008d80:	73fb      	strb	r3, [r7, #15]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	041b      	lsls	r3, r3, #16
 8008d86:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d105      	bne.n	8008d9e <SEQ_BitPosition+0x36>
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	3308      	adds	r3, #8
 8008d96:	73fb      	strb	r3, [r7, #15]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	021b      	lsls	r3, r3, #8
 8008d9c:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d105      	bne.n	8008db4 <SEQ_BitPosition+0x4c>
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
 8008daa:	3304      	adds	r3, #4
 8008dac:	73fb      	strb	r3, [r7, #15]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	0f1b      	lsrs	r3, r3, #28
 8008db8:	4a07      	ldr	r2, [pc, #28]	; (8008dd8 <SEQ_BitPosition+0x70>)
 8008dba:	5cd2      	ldrb	r2, [r2, r3]
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	f1c3 031f 	rsb	r3, r3, #31
 8008dc8:	b2db      	uxtb	r3, r3
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	080090bc 	.word	0x080090bc

08008ddc <__libc_init_array>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	4d0d      	ldr	r5, [pc, #52]	; (8008e14 <__libc_init_array+0x38>)
 8008de0:	4c0d      	ldr	r4, [pc, #52]	; (8008e18 <__libc_init_array+0x3c>)
 8008de2:	1b64      	subs	r4, r4, r5
 8008de4:	10a4      	asrs	r4, r4, #2
 8008de6:	2600      	movs	r6, #0
 8008de8:	42a6      	cmp	r6, r4
 8008dea:	d109      	bne.n	8008e00 <__libc_init_array+0x24>
 8008dec:	4d0b      	ldr	r5, [pc, #44]	; (8008e1c <__libc_init_array+0x40>)
 8008dee:	4c0c      	ldr	r4, [pc, #48]	; (8008e20 <__libc_init_array+0x44>)
 8008df0:	f000 f82e 	bl	8008e50 <_init>
 8008df4:	1b64      	subs	r4, r4, r5
 8008df6:	10a4      	asrs	r4, r4, #2
 8008df8:	2600      	movs	r6, #0
 8008dfa:	42a6      	cmp	r6, r4
 8008dfc:	d105      	bne.n	8008e0a <__libc_init_array+0x2e>
 8008dfe:	bd70      	pop	{r4, r5, r6, pc}
 8008e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e04:	4798      	blx	r3
 8008e06:	3601      	adds	r6, #1
 8008e08:	e7ee      	b.n	8008de8 <__libc_init_array+0xc>
 8008e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e0e:	4798      	blx	r3
 8008e10:	3601      	adds	r6, #1
 8008e12:	e7f2      	b.n	8008dfa <__libc_init_array+0x1e>
 8008e14:	080090cc 	.word	0x080090cc
 8008e18:	080090cc 	.word	0x080090cc
 8008e1c:	080090cc 	.word	0x080090cc
 8008e20:	080090d0 	.word	0x080090d0

08008e24 <memcpy>:
 8008e24:	440a      	add	r2, r1
 8008e26:	4291      	cmp	r1, r2
 8008e28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e2c:	d100      	bne.n	8008e30 <memcpy+0xc>
 8008e2e:	4770      	bx	lr
 8008e30:	b510      	push	{r4, lr}
 8008e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e3a:	4291      	cmp	r1, r2
 8008e3c:	d1f9      	bne.n	8008e32 <memcpy+0xe>
 8008e3e:	bd10      	pop	{r4, pc}

08008e40 <memset>:
 8008e40:	4402      	add	r2, r0
 8008e42:	4603      	mov	r3, r0
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d100      	bne.n	8008e4a <memset+0xa>
 8008e48:	4770      	bx	lr
 8008e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4e:	e7f9      	b.n	8008e44 <memset+0x4>

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
