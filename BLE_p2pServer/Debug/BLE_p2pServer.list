
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008368  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080084a4  080084a4  000184a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008708  08008708  00018708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000004  08008710  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000040  0800874c  00020040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200000dc  080087e5  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000011c  08008822  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000098  20000130  08008833  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000390  200001c8  080088cb  000201c8  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  20000558  080088cb  00020558  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_line   000296f1  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   00038f1e  00000000  00000000  000498e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000681b  00000000  00000000  00082807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002670  00000000  00000000  00089028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f5cec  00000000  00000000  0008b698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000023f8  00000000  00000000  00181388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002c197  00000000  00000000  00183780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001af917  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00009ea0  00000000  00000000  001af96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .stabstr      0000014d  00000000  00000000  001b980c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001c8 	.word	0x200001c8
 8000158:	00000000 	.word	0x00000000
 800015c:	0800848c 	.word	0x0800848c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001cc 	.word	0x200001cc
 8000178:	0800848c 	.word	0x0800848c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800018c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800018e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000190:	3304      	adds	r3, #4

08000192 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000192:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000194:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000196:	d3f9      	bcc.n	800018c <CopyDataInit>
  bx lr
 8000198:	4770      	bx	lr

0800019a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800019a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800019c:	3004      	adds	r0, #4

0800019e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800019e:	4288      	cmp	r0, r1
  bcc FillZerobss
 80001a0:	d3fb      	bcc.n	800019a <FillZerobss>
  bx lr
 80001a2:	4770      	bx	lr

080001a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001a4:	480c      	ldr	r0, [pc, #48]	; (80001d8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80001a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80001a8:	f001 fe0e 	bl	8001dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80001ac:	480b      	ldr	r0, [pc, #44]	; (80001dc <LoopForever+0x8>)
 80001ae:	490c      	ldr	r1, [pc, #48]	; (80001e0 <LoopForever+0xc>)
 80001b0:	4a0c      	ldr	r2, [pc, #48]	; (80001e4 <LoopForever+0x10>)
 80001b2:	2300      	movs	r3, #0
 80001b4:	f7ff ffed 	bl	8000192 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80001b8:	480b      	ldr	r0, [pc, #44]	; (80001e8 <LoopForever+0x14>)
 80001ba:	490c      	ldr	r1, [pc, #48]	; (80001ec <LoopForever+0x18>)
 80001bc:	2300      	movs	r3, #0
 80001be:	f7ff ffee 	bl	800019e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001c2:	480b      	ldr	r0, [pc, #44]	; (80001f0 <LoopForever+0x1c>)
 80001c4:	490b      	ldr	r1, [pc, #44]	; (80001f4 <LoopForever+0x20>)
 80001c6:	2300      	movs	r3, #0
 80001c8:	f7ff ffe9 	bl	800019e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001cc:	f008 f924 	bl	8008418 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80001d0:	f001 fae6 	bl	80017a0 <main>

080001d4 <LoopForever>:

LoopForever:
  b LoopForever
 80001d4:	e7fe      	b.n	80001d4 <LoopForever>
 80001d6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80001d8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80001dc:	20000004 	.word	0x20000004
 80001e0:	20000040 	.word	0x20000040
 80001e4:	08008710 	.word	0x08008710
  INIT_BSS _sbss, _ebss
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	20000558 	.word	0x20000558
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80001f0:	200301e0 	.word	0x200301e0
 80001f4:	20030a57 	.word	0x20030a57

080001f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001f8:	e7fe      	b.n	80001f8 <ADC1_IRQHandler>
	...

080001fc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000204:	4b06      	ldr	r3, [pc, #24]	; (8000220 <LL_EXTI_EnableIT_32_63+0x24>)
 8000206:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800020a:	4905      	ldr	r1, [pc, #20]	; (8000220 <LL_EXTI_EnableIT_32_63+0x24>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	4313      	orrs	r3, r2
 8000210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000214:	bf00      	nop
 8000216:	370c      	adds	r7, #12
 8000218:	46bd      	mov	sp, r7
 800021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021e:	4770      	bx	lr
 8000220:	58000800 	.word	0x58000800

08000224 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800022c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000230:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4313      	orrs	r3, r2
 800023a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800023c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000240:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4013      	ands	r3, r2
 8000246:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000248:	68fb      	ldr	r3, [r7, #12]
}
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr

08000256 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000256:	b480      	push	{r7}
 8000258:	b085      	sub	sp, #20
 800025a:	af00      	add	r7, sp, #0
 800025c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 800025e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000262:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000266:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4313      	orrs	r3, r2
 800026e:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000276:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	4013      	ands	r3, r2
 800027e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000280:	68fb      	ldr	r3, [r7, #12]
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr

0800028e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 800028e:	b580      	push	{r7, lr}
 8000290:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000292:	f001 ff9b 	bl	80021cc <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000296:	f001 ff9f 	bl	80021d8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800029a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800029e:	f7ff ffad 	bl	80001fc <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 80002a2:	f000 f821 	bl	80002e8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80002a6:	f000 f8c3 	bl	8000430 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80002aa:	bf00      	nop
}
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80002b0:	b5b0      	push	{r4, r5, r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80002b6:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <APPD_EnableCPU2+0x34>)
 80002b8:	1d3c      	adds	r4, r7, #4
 80002ba:	461d      	mov	r5, r3
 80002bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002c4:	c403      	stmia	r4!, {r0, r1}
 80002c6:	8022      	strh	r2, [r4, #0]
 80002c8:	3402      	adds	r4, #2
 80002ca:	0c13      	lsrs	r3, r2, #16
 80002cc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80002ce:	f006 fead 	bl	800702c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	4618      	mov	r0, r3
 80002d6:	f006 f9d0 	bl	800667a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80002da:	bf00      	nop
}
 80002dc:	3720      	adds	r7, #32
 80002de:	46bd      	mov	sp, r7
 80002e0:	bdb0      	pop	{r4, r5, r7, pc}
 80002e2:	bf00      	nop
 80002e4:	080084a4 	.word	0x080084a4

080002e8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	2200      	movs	r2, #0
 80002f2:	601a      	str	r2, [r3, #0]
 80002f4:	605a      	str	r2, [r3, #4]
 80002f6:	609a      	str	r2, [r3, #8]
 80002f8:	60da      	str	r2, [r3, #12]
 80002fa:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000300:	2300      	movs	r3, #0
 8000302:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000304:	2300      	movs	r3, #0
 8000306:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000308:	2300      	movs	r3, #0
 800030a:	77fb      	strb	r3, [r7, #31]
 800030c:	e038      	b.n	8000380 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800030e:	7ffb      	ldrb	r3, [r7, #31]
 8000310:	4a44      	ldr	r2, [pc, #272]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000312:	00db      	lsls	r3, r3, #3
 8000314:	4413      	add	r3, r2
 8000316:	799b      	ldrb	r3, [r3, #6]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d02b      	beq.n	8000374 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 800031c:	7ffb      	ldrb	r3, [r7, #31]
 800031e:	4a41      	ldr	r2, [pc, #260]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000320:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000324:	4a40      	ldr	r2, [pc, #256]	; (8000428 <APPD_SetCPU2GpioConfig+0x140>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d01b      	beq.n	8000362 <APPD_SetCPU2GpioConfig+0x7a>
 800032a:	4a3f      	ldr	r2, [pc, #252]	; (8000428 <APPD_SetCPU2GpioConfig+0x140>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d823      	bhi.n	8000378 <APPD_SetCPU2GpioConfig+0x90>
 8000330:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000334:	d003      	beq.n	800033e <APPD_SetCPU2GpioConfig+0x56>
 8000336:	4a3d      	ldr	r2, [pc, #244]	; (800042c <APPD_SetCPU2GpioConfig+0x144>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d009      	beq.n	8000350 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800033c:	e01c      	b.n	8000378 <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800033e:	7ffb      	ldrb	r3, [r7, #31]
 8000340:	4a38      	ldr	r2, [pc, #224]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	4413      	add	r3, r2
 8000346:	889a      	ldrh	r2, [r3, #4]
 8000348:	8bbb      	ldrh	r3, [r7, #28]
 800034a:	4313      	orrs	r3, r2
 800034c:	83bb      	strh	r3, [r7, #28]
          break;
 800034e:	e014      	b.n	800037a <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000350:	7ffb      	ldrb	r3, [r7, #31]
 8000352:	4a34      	ldr	r2, [pc, #208]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000354:	00db      	lsls	r3, r3, #3
 8000356:	4413      	add	r3, r2
 8000358:	889a      	ldrh	r2, [r3, #4]
 800035a:	8b7b      	ldrh	r3, [r7, #26]
 800035c:	4313      	orrs	r3, r2
 800035e:	837b      	strh	r3, [r7, #26]
          break;
 8000360:	e00b      	b.n	800037a <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000362:	7ffb      	ldrb	r3, [r7, #31]
 8000364:	4a2f      	ldr	r2, [pc, #188]	; (8000424 <APPD_SetCPU2GpioConfig+0x13c>)
 8000366:	00db      	lsls	r3, r3, #3
 8000368:	4413      	add	r3, r2
 800036a:	889a      	ldrh	r2, [r3, #4]
 800036c:	8b3b      	ldrh	r3, [r7, #24]
 800036e:	4313      	orrs	r3, r2
 8000370:	833b      	strh	r3, [r7, #24]
          break;
 8000372:	e002      	b.n	800037a <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000374:	bf00      	nop
 8000376:	e000      	b.n	800037a <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000378:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800037a:	7ffb      	ldrb	r3, [r7, #31]
 800037c:	3301      	adds	r3, #1
 800037e:	77fb      	strb	r3, [r7, #31]
 8000380:	7ffb      	ldrb	r3, [r7, #31]
 8000382:	2b21      	cmp	r3, #33	; 0x21
 8000384:	d9c3      	bls.n	800030e <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000386:	2300      	movs	r3, #0
 8000388:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800038a:	2301      	movs	r3, #1
 800038c:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800038e:	2303      	movs	r3, #3
 8000390:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000392:	8bbb      	ldrh	r3, [r7, #28]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d014      	beq.n	80003c2 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000398:	8bbb      	ldrh	r3, [r7, #28]
 800039a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800039c:	2001      	movs	r0, #1
 800039e:	f7ff ff41 	bl	8000224 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff ff57 	bl	8000256 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	4619      	mov	r1, r3
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f002 fa1e 	bl	80027f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80003b4:	8bbb      	ldrh	r3, [r7, #28]
 80003b6:	2200      	movs	r2, #0
 80003b8:	4619      	mov	r1, r3
 80003ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003be:	f002 fb87 	bl	8002ad0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80003c2:	8b7b      	ldrh	r3, [r7, #26]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d012      	beq.n	80003ee <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 80003c8:	8b7b      	ldrh	r3, [r7, #26]
 80003ca:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003cc:	2002      	movs	r0, #2
 80003ce:	f7ff ff29 	bl	8000224 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80003d2:	2002      	movs	r0, #2
 80003d4:	f7ff ff3f 	bl	8000256 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <APPD_SetCPU2GpioConfig+0x144>)
 80003de:	f002 fa07 	bl	80027f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80003e2:	8b7b      	ldrh	r3, [r7, #26]
 80003e4:	2200      	movs	r2, #0
 80003e6:	4619      	mov	r1, r3
 80003e8:	4810      	ldr	r0, [pc, #64]	; (800042c <APPD_SetCPU2GpioConfig+0x144>)
 80003ea:	f002 fb71 	bl	8002ad0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80003ee:	8b3b      	ldrh	r3, [r7, #24]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d013      	beq.n	800041c <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80003f4:	8b3b      	ldrh	r3, [r7, #24]
 80003f6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f8:	2004      	movs	r0, #4
 80003fa:	f7ff ff13 	bl	8000224 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80003fe:	2004      	movs	r0, #4
 8000400:	f7ff ff29 	bl	8000256 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4807      	ldr	r0, [pc, #28]	; (8000428 <APPD_SetCPU2GpioConfig+0x140>)
 800040a:	f002 f9f1 	bl	80027f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800040e:	8b3b      	ldrh	r3, [r7, #24]
 8000410:	2200      	movs	r2, #0
 8000412:	4619      	mov	r1, r3
 8000414:	4804      	ldr	r0, [pc, #16]	; (8000428 <APPD_SetCPU2GpioConfig+0x140>)
 8000416:	f002 fb5b 	bl	8002ad0 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800041a:	bf00      	nop
 800041c:	bf00      	nop
}
 800041e:	3720      	adds	r7, #32
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	08008524 	.word	0x08008524
 8000428:	48000800 	.word	0x48000800
 800042c:	48000400 	.word	0x48000400

08000430 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000434:	bf00      	nop
}
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
	...

08000440 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <LL_C2_PWR_SetPowerMode+0x28>)
 800044a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800044e:	f023 0207 	bic.w	r2, r3, #7
 8000452:	4905      	ldr	r1, [pc, #20]	; (8000468 <LL_C2_PWR_SetPowerMode+0x28>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4313      	orrs	r3, r2
 8000458:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr
 8000468:	58000400 	.word	0x58000400

0800046c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800047e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4313      	orrs	r3, r2
 8000486:	608b      	str	r3, [r1, #8]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr

08000494 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8000498:	f000 f814 	bl	80004c4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800049c:	4908      	ldr	r1, [pc, #32]	; (80004c0 <APPE_Init+0x2c>)
 800049e:	2000      	movs	r0, #0
 80004a0:	f000 fd08 	bl	8000eb4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80004a4:	f7ff fef3 	bl	800028e <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80004a8:	2101      	movs	r1, #1
 80004aa:	2001      	movs	r0, #1
 80004ac:	f007 fd68 	bl	8007f80 <UTIL_LPM_SetOffMode>

  Led_Init();
 80004b0:	f000 f867 	bl	8000582 <Led_Init>

  Button_Init();
 80004b4:	f000 f875 	bl	80005a2 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80004b8:	f000 f812 	bl	80004e0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80004bc:	bf00      	nop
}
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	200004cc 	.word	0x200004cc

080004c4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80004c8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004cc:	f7ff ffce 	bl	800046c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80004d0:	f007 fd44 	bl	8007f5c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80004d4:	2004      	movs	r0, #4
 80004d6:	f7ff ffb3 	bl	8000440 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 80004da:	bf00      	nop
}
 80004dc:	bd80      	pop	{r7, pc}
	...

080004e0 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80004e6:	f006 fbeb 	bl	8006cc0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <appe_Tl_Init+0x50>)
 80004ec:	2100      	movs	r1, #0
 80004ee:	2020      	movs	r0, #32
 80004f0:	f007 fe5a 	bl	80081a8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <appe_Tl_Init+0x54>)
 80004f6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <appe_Tl_Init+0x58>)
 80004fa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80004fc:	463b      	mov	r3, r7
 80004fe:	4619      	mov	r1, r3
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <appe_Tl_Init+0x5c>)
 8000502:	f006 f8d1 	bl	80066a8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <appe_Tl_Init+0x60>)
 8000508:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <appe_Tl_Init+0x64>)
 800050c:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <appe_Tl_Init+0x68>)
 8000510:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000512:	f240 533c 	movw	r3, #1340	; 0x53c
 8000516:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000518:	f107 0308 	add.w	r3, r7, #8
 800051c:	4618      	mov	r0, r3
 800051e:	f006 fd11 	bl	8006f44 <TL_MM_Init>

  TL_Enable();
 8000522:	f006 fbc7 	bl	8006cb4 <TL_Enable>

  return;
 8000526:	bf00      	nop
}
 8000528:	3720      	adds	r7, #32
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	080066e1 	.word	0x080066e1
 8000534:	20030724 	.word	0x20030724
 8000538:	0800054d 	.word	0x0800054d
 800053c:	08000563 	.word	0x08000563
 8000540:	2003093c 	.word	0x2003093c
 8000544:	20030830 	.word	0x20030830
 8000548:	200301e8 	.word	0x200301e8

0800054c <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000556:	bf00      	nop
}
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800056a:	f7ff fea1 	bl	80002b0 <APPD_EnableCPU2>

  APP_BLE_Init( );
 800056e:	f006 fe0d 	bl	800718c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000572:	2100      	movs	r1, #0
 8000574:	2001      	movs	r0, #1
 8000576:	f007 fd03 	bl	8007f80 <UTIL_LPM_SetOffMode>
  return;
 800057a:	bf00      	nop
}
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8000586:	2000      	movs	r0, #0
 8000588:	f001 fc8e 	bl	8001ea8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800058c:	2001      	movs	r0, #1
 800058e:	f001 fc8b 	bl	8001ea8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000592:	2002      	movs	r0, #2
 8000594:	f001 fc88 	bl	8001ea8 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8000598:	2001      	movs	r0, #1
 800059a:	f001 fcbf 	bl	8001f1c <BSP_LED_On>
#endif

  return;
 800059e:	bf00      	nop
}
 80005a0:	bd80      	pop	{r7, pc}

080005a2 <Button_Init>:

static void Button_Init( void )
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80005a6:	2101      	movs	r1, #1
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 fceb 	bl	8001f84 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80005ae:	2101      	movs	r1, #1
 80005b0:	2001      	movs	r0, #1
 80005b2:	f001 fce7 	bl	8001f84 <BSP_PB_Init>
#endif

  return;
 80005b6:	bf00      	nop
}
 80005b8:	bd80      	pop	{r7, pc}

080005ba <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80005be:	bf00      	nop
}
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80005d2:	f04f 30ff 	mov.w	r0, #4294967295
 80005d6:	f007 fd03 	bl	8007fe0 <UTIL_SEQ_Run>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005ea:	2100      	movs	r1, #0
 80005ec:	2020      	movs	r0, #32
 80005ee:	f007 fdfd 	bl	80081ec <UTIL_SEQ_SetTask>
  return;
 80005f2:	bf00      	nop
}
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000602:	2002      	movs	r0, #2
 8000604:	f007 fe5e 	bl	80082c4 <UTIL_SEQ_SetEvt>
  return;
 8000608:	bf00      	nop
}
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000618:	2002      	movs	r0, #2
 800061a:	f007 fe73 	bl	8008304 <UTIL_SEQ_WaitEvt>
  return;
 800061e:	bf00      	nop
}
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	4603      	mov	r3, r0
 800062e:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8000630:	88fb      	ldrh	r3, [r7, #6]
 8000632:	2b10      	cmp	r3, #16
 8000634:	d006      	beq.n	8000644 <HAL_GPIO_EXTI_Callback+0x1e>
 8000636:	2b10      	cmp	r3, #16
 8000638:	dc0d      	bgt.n	8000656 <HAL_GPIO_EXTI_Callback+0x30>
 800063a:	2b01      	cmp	r3, #1
 800063c:	d005      	beq.n	800064a <HAL_GPIO_EXTI_Callback+0x24>
 800063e:	2b02      	cmp	r3, #2
 8000640:	d006      	beq.n	8000650 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000642:	e008      	b.n	8000656 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8000644:	f006 fefe 	bl	8007444 <APP_BLE_Key_Button1_Action>
      break; 
 8000648:	e006      	b.n	8000658 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800064a:	f006 ff01 	bl	8007450 <APP_BLE_Key_Button2_Action>
      break; 
 800064e:	e003      	b.n	8000658 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8000650:	f006 ff05 	bl	800745e <APP_BLE_Key_Button3_Action>
      break;
 8000654:	e000      	b.n	8000658 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8000656:	bf00      	nop

  }
  return;
 8000658:	bf00      	nop
}
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <LL_EXTI_EnableIT_0_31>:
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <LL_EXTI_EnableIT_0_31+0x24>)
 800066a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800066e:	4905      	ldr	r1, [pc, #20]	; (8000684 <LL_EXTI_EnableIT_0_31+0x24>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4313      	orrs	r3, r2
 8000674:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	58000800 	.word	0x58000800

08000688 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4904      	ldr	r1, [pc, #16]	; (80006a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4313      	orrs	r3, r2
 800069a:	600b      	str	r3, [r1, #0]

}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	58000800 	.word	0x58000800

080006ac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <ReadRtcSsrValue+0x3c>)
 80006b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <ReadRtcSsrValue+0x3c>)
 80006bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006be:	b29b      	uxth	r3, r3
 80006c0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006c2:	e005      	b.n	80006d0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <ReadRtcSsrValue+0x3c>)
 80006ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d1f5      	bne.n	80006c4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80006d8:	683b      	ldr	r3, [r7, #0]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40002800 	.word	0x40002800

080006ec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	460a      	mov	r2, r1
 80006f6:	71fb      	strb	r3, [r7, #7]
 80006f8:	4613      	mov	r3, r2
 80006fa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80006fc:	79ba      	ldrb	r2, [r7, #6]
 80006fe:	491d      	ldr	r1, [pc, #116]	; (8000774 <LinkTimerAfter+0x88>)
 8000700:	4613      	mov	r3, r2
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	4413      	add	r3, r2
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	440b      	add	r3, r1
 800070a:	3315      	adds	r3, #21
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	2b06      	cmp	r3, #6
 8000714:	d009      	beq.n	800072a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000716:	7bfa      	ldrb	r2, [r7, #15]
 8000718:	4916      	ldr	r1, [pc, #88]	; (8000774 <LinkTimerAfter+0x88>)
 800071a:	4613      	mov	r3, r2
 800071c:	005b      	lsls	r3, r3, #1
 800071e:	4413      	add	r3, r2
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	440b      	add	r3, r1
 8000724:	3314      	adds	r3, #20
 8000726:	79fa      	ldrb	r2, [r7, #7]
 8000728:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800072a:	79fa      	ldrb	r2, [r7, #7]
 800072c:	4911      	ldr	r1, [pc, #68]	; (8000774 <LinkTimerAfter+0x88>)
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3315      	adds	r3, #21
 800073a:	7bfa      	ldrb	r2, [r7, #15]
 800073c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <LinkTimerAfter+0x88>)
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	440b      	add	r3, r1
 800074c:	3314      	adds	r3, #20
 800074e:	79ba      	ldrb	r2, [r7, #6]
 8000750:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000752:	79ba      	ldrb	r2, [r7, #6]
 8000754:	4907      	ldr	r1, [pc, #28]	; (8000774 <LinkTimerAfter+0x88>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3315      	adds	r3, #21
 8000762:	79fa      	ldrb	r2, [r7, #7]
 8000764:	701a      	strb	r2, [r3, #0]

  return;
 8000766:	bf00      	nop
}
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	20000040 	.word	0x20000040

08000778 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	460a      	mov	r2, r1
 8000782:	71fb      	strb	r3, [r7, #7]
 8000784:	4613      	mov	r3, r2
 8000786:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <LinkTimerBefore+0xb8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	79ba      	ldrb	r2, [r7, #6]
 8000790:	429a      	cmp	r2, r3
 8000792:	d032      	beq.n	80007fa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	4927      	ldr	r1, [pc, #156]	; (8000834 <LinkTimerBefore+0xbc>)
 8000798:	4613      	mov	r3, r2
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	4413      	add	r3, r2
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	440b      	add	r3, r1
 80007a2:	3314      	adds	r3, #20
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007a8:	7bfa      	ldrb	r2, [r7, #15]
 80007aa:	4922      	ldr	r1, [pc, #136]	; (8000834 <LinkTimerBefore+0xbc>)
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	440b      	add	r3, r1
 80007b6:	3315      	adds	r3, #21
 80007b8:	79fa      	ldrb	r2, [r7, #7]
 80007ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007bc:	79fa      	ldrb	r2, [r7, #7]
 80007be:	491d      	ldr	r1, [pc, #116]	; (8000834 <LinkTimerBefore+0xbc>)
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	440b      	add	r3, r1
 80007ca:	3315      	adds	r3, #21
 80007cc:	79ba      	ldrb	r2, [r7, #6]
 80007ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	4918      	ldr	r1, [pc, #96]	; (8000834 <LinkTimerBefore+0xbc>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3314      	adds	r3, #20
 80007e0:	7bfa      	ldrb	r2, [r7, #15]
 80007e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007e4:	79ba      	ldrb	r2, [r7, #6]
 80007e6:	4913      	ldr	r1, [pc, #76]	; (8000834 <LinkTimerBefore+0xbc>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	440b      	add	r3, r1
 80007f2:	3314      	adds	r3, #20
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80007f8:	e014      	b.n	8000824 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	490d      	ldr	r1, [pc, #52]	; (8000834 <LinkTimerBefore+0xbc>)
 80007fe:	4613      	mov	r3, r2
 8000800:	005b      	lsls	r3, r3, #1
 8000802:	4413      	add	r3, r2
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	440b      	add	r3, r1
 8000808:	3315      	adds	r3, #21
 800080a:	79ba      	ldrb	r2, [r7, #6]
 800080c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800080e:	79ba      	ldrb	r2, [r7, #6]
 8000810:	4908      	ldr	r1, [pc, #32]	; (8000834 <LinkTimerBefore+0xbc>)
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	440b      	add	r3, r1
 800081c:	3314      	adds	r3, #20
 800081e:	79fa      	ldrb	r2, [r7, #7]
 8000820:	701a      	strb	r2, [r3, #0]
  return;
 8000822:	bf00      	nop
}
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	200000d0 	.word	0x200000d0
 8000834:	20000040 	.word	0x20000040

08000838 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000842:	4b4e      	ldr	r3, [pc, #312]	; (800097c <linkTimer+0x144>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b06      	cmp	r3, #6
 800084a:	d118      	bne.n	800087e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800084c:	4b4b      	ldr	r3, [pc, #300]	; (800097c <linkTimer+0x144>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	b2da      	uxtb	r2, r3
 8000852:	4b4b      	ldr	r3, [pc, #300]	; (8000980 <linkTimer+0x148>)
 8000854:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000856:	4a49      	ldr	r2, [pc, #292]	; (800097c <linkTimer+0x144>)
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800085c:	79fa      	ldrb	r2, [r7, #7]
 800085e:	4949      	ldr	r1, [pc, #292]	; (8000984 <linkTimer+0x14c>)
 8000860:	4613      	mov	r3, r2
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	4413      	add	r3, r2
 8000866:	00db      	lsls	r3, r3, #3
 8000868:	440b      	add	r3, r1
 800086a:	3315      	adds	r3, #21
 800086c:	2206      	movs	r2, #6
 800086e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000870:	4b45      	ldr	r3, [pc, #276]	; (8000988 <linkTimer+0x150>)
 8000872:	f04f 32ff 	mov.w	r2, #4294967295
 8000876:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	81fb      	strh	r3, [r7, #14]
 800087c:	e078      	b.n	8000970 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800087e:	f000 f909 	bl	8000a94 <ReturnTimeElapsed>
 8000882:	4603      	mov	r3, r0
 8000884:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000886:	79fa      	ldrb	r2, [r7, #7]
 8000888:	493e      	ldr	r1, [pc, #248]	; (8000984 <linkTimer+0x14c>)
 800088a:	4613      	mov	r3, r2
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	4413      	add	r3, r2
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	440b      	add	r3, r1
 8000894:	3308      	adds	r3, #8
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	89fb      	ldrh	r3, [r7, #14]
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	4419      	add	r1, r3
 800089e:	4839      	ldr	r0, [pc, #228]	; (8000984 <linkTimer+0x14c>)
 80008a0:	4613      	mov	r3, r2
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4413      	add	r3, r2
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	4403      	add	r3, r0
 80008aa:	3308      	adds	r3, #8
 80008ac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	4934      	ldr	r1, [pc, #208]	; (8000984 <linkTimer+0x14c>)
 80008b2:	4613      	mov	r3, r2
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	4413      	add	r3, r2
 80008b8:	00db      	lsls	r3, r3, #3
 80008ba:	440b      	add	r3, r1
 80008bc:	3308      	adds	r3, #8
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008c2:	4b2e      	ldr	r3, [pc, #184]	; (800097c <linkTimer+0x144>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4619      	mov	r1, r3
 80008ca:	4a2e      	ldr	r2, [pc, #184]	; (8000984 <linkTimer+0x14c>)
 80008cc:	460b      	mov	r3, r1
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	440b      	add	r3, r1
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	4413      	add	r3, r2
 80008d6:	3308      	adds	r3, #8
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d337      	bcc.n	8000950 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80008e0:	4b26      	ldr	r3, [pc, #152]	; (800097c <linkTimer+0x144>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80008e6:	7b7a      	ldrb	r2, [r7, #13]
 80008e8:	4926      	ldr	r1, [pc, #152]	; (8000984 <linkTimer+0x14c>)
 80008ea:	4613      	mov	r3, r2
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	4413      	add	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	440b      	add	r3, r1
 80008f4:	3315      	adds	r3, #21
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008fa:	e013      	b.n	8000924 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80008fc:	7b7a      	ldrb	r2, [r7, #13]
 80008fe:	4921      	ldr	r1, [pc, #132]	; (8000984 <linkTimer+0x14c>)
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	440b      	add	r3, r1
 800090a:	3315      	adds	r3, #21
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000910:	7b7a      	ldrb	r2, [r7, #13]
 8000912:	491c      	ldr	r1, [pc, #112]	; (8000984 <linkTimer+0x14c>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3315      	adds	r3, #21
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000924:	7b3b      	ldrb	r3, [r7, #12]
 8000926:	2b06      	cmp	r3, #6
 8000928:	d00b      	beq.n	8000942 <linkTimer+0x10a>
 800092a:	7b3a      	ldrb	r2, [r7, #12]
 800092c:	4915      	ldr	r1, [pc, #84]	; (8000984 <linkTimer+0x14c>)
 800092e:	4613      	mov	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	4413      	add	r3, r2
 8000934:	00db      	lsls	r3, r3, #3
 8000936:	440b      	add	r3, r1
 8000938:	3308      	adds	r3, #8
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	68ba      	ldr	r2, [r7, #8]
 800093e:	429a      	cmp	r2, r3
 8000940:	d2dc      	bcs.n	80008fc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000942:	7b7a      	ldrb	r2, [r7, #13]
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff fecf 	bl	80006ec <LinkTimerAfter>
 800094e:	e00f      	b.n	8000970 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <linkTimer+0x144>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4611      	mov	r1, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff0c 	bl	8000778 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <linkTimer+0x144>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <linkTimer+0x148>)
 8000968:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800096a:	4a04      	ldr	r2, [pc, #16]	; (800097c <linkTimer+0x144>)
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000970:	89fb      	ldrh	r3, [r7, #14]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000d0 	.word	0x200000d0
 8000980:	200000d1 	.word	0x200000d1
 8000984:	20000040 	.word	0x20000040
 8000988:	200000d4 	.word	0x200000d4

0800098c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	460a      	mov	r2, r1
 8000996:	71fb      	strb	r3, [r7, #7]
 8000998:	4613      	mov	r3, r2
 800099a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800099c:	4b39      	ldr	r3, [pc, #228]	; (8000a84 <UnlinkTimer+0xf8>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d111      	bne.n	80009cc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009a8:	4b36      	ldr	r3, [pc, #216]	; (8000a84 <UnlinkTimer+0xf8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <UnlinkTimer+0xfc>)
 80009b0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	4935      	ldr	r1, [pc, #212]	; (8000a8c <UnlinkTimer+0x100>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3315      	adds	r3, #21
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <UnlinkTimer+0xf8>)
 80009c8:	701a      	strb	r2, [r3, #0]
 80009ca:	e03e      	b.n	8000a4a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	492f      	ldr	r1, [pc, #188]	; (8000a8c <UnlinkTimer+0x100>)
 80009d0:	4613      	mov	r3, r2
 80009d2:	005b      	lsls	r3, r3, #1
 80009d4:	4413      	add	r3, r2
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	440b      	add	r3, r1
 80009da:	3314      	adds	r3, #20
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80009e0:	79fa      	ldrb	r2, [r7, #7]
 80009e2:	492a      	ldr	r1, [pc, #168]	; (8000a8c <UnlinkTimer+0x100>)
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	440b      	add	r3, r1
 80009ee:	3315      	adds	r3, #21
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80009f4:	79f9      	ldrb	r1, [r7, #7]
 80009f6:	7bfa      	ldrb	r2, [r7, #15]
 80009f8:	4824      	ldr	r0, [pc, #144]	; (8000a8c <UnlinkTimer+0x100>)
 80009fa:	460b      	mov	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	440b      	add	r3, r1
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4403      	add	r3, r0
 8000a04:	3315      	adds	r3, #21
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2d8      	uxtb	r0, r3
 8000a0a:	4920      	ldr	r1, [pc, #128]	; (8000a8c <UnlinkTimer+0x100>)
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	440b      	add	r3, r1
 8000a16:	3315      	adds	r3, #21
 8000a18:	4602      	mov	r2, r0
 8000a1a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d013      	beq.n	8000a4a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a22:	79f9      	ldrb	r1, [r7, #7]
 8000a24:	7bba      	ldrb	r2, [r7, #14]
 8000a26:	4819      	ldr	r0, [pc, #100]	; (8000a8c <UnlinkTimer+0x100>)
 8000a28:	460b      	mov	r3, r1
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	440b      	add	r3, r1
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	4403      	add	r3, r0
 8000a32:	3314      	adds	r3, #20
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2d8      	uxtb	r0, r3
 8000a38:	4914      	ldr	r1, [pc, #80]	; (8000a8c <UnlinkTimer+0x100>)
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	440b      	add	r3, r1
 8000a44:	3314      	adds	r3, #20
 8000a46:	4602      	mov	r2, r0
 8000a48:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	490f      	ldr	r1, [pc, #60]	; (8000a8c <UnlinkTimer+0x100>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	330c      	adds	r3, #12
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <UnlinkTimer+0xf8>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	2b06      	cmp	r3, #6
 8000a66:	d107      	bne.n	8000a78 <UnlinkTimer+0xec>
 8000a68:	79bb      	ldrb	r3, [r7, #6]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d104      	bne.n	8000a78 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <UnlinkTimer+0x104>)
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a76:	bf00      	nop
 8000a78:	bf00      	nop
}
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	200000d0 	.word	0x200000d0
 8000a88:	200000d1 	.word	0x200000d1
 8000a8c:	20000040 	.word	0x20000040
 8000a90:	200000d4 	.word	0x200000d4

08000a94 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <ReturnTimeElapsed+0x70>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa2:	d026      	beq.n	8000af2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000aa4:	f7ff fe02 	bl	80006ac <ReadRtcSsrValue>
 8000aa8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <ReturnTimeElapsed+0x70>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d805      	bhi.n	8000ac0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <ReturnTimeElapsed+0x70>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	607b      	str	r3, [r7, #4]
 8000abe:	e00a      	b.n	8000ad6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <ReturnTimeElapsed+0x74>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <ReturnTimeElapsed+0x70>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <ReturnTimeElapsed+0x78>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	461a      	mov	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	fb02 f303 	mul.w	r3, r2, r3
 8000ae2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <ReturnTimeElapsed+0x7c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	40d3      	lsrs	r3, r2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	e001      	b.n	8000af6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	b29b      	uxth	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200000d4 	.word	0x200000d4
 8000b08:	200001ea 	.word	0x200001ea
 8000b0c:	200001e9 	.word	0x200001e9
 8000b10:	200001e8 	.word	0x200001e8

08000b14 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000b1e:	88fb      	ldrh	r3, [r7, #6]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d108      	bne.n	8000b36 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b24:	f7ff fdc2 	bl	80006ac <ReadRtcSsrValue>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4a24      	ldr	r2, [pc, #144]	; (8000bbc <RestartWakeupCounter+0xa8>)
 8000b2c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f001 fcd5 	bl	80024de <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b34:	e03e      	b.n	8000bb4 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b36:	88fb      	ldrh	r3, [r7, #6]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d803      	bhi.n	8000b44 <RestartWakeupCounter+0x30>
 8000b3c:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <RestartWakeupCounter+0xac>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d002      	beq.n	8000b4a <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000b4a:	bf00      	nop
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <RestartWakeupCounter+0xb0>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f7      	beq.n	8000b4c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <RestartWakeupCounter+0xb0>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <RestartWakeupCounter+0xb0>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b70:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <RestartWakeupCounter+0xb4>)
 8000b74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b78:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f001 fcbd 	bl	80024fa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b80:	4b12      	ldr	r3, [pc, #72]	; (8000bcc <RestartWakeupCounter+0xb8>)
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	0c1b      	lsrs	r3, r3, #16
 8000b86:	041b      	lsls	r3, r3, #16
 8000b88:	88fa      	ldrh	r2, [r7, #6]
 8000b8a:	4910      	ldr	r1, [pc, #64]	; (8000bcc <RestartWakeupCounter+0xb8>)
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b90:	f7ff fd8c 	bl	80006ac <ReadRtcSsrValue>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <RestartWakeupCounter+0xa8>)
 8000b98:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <RestartWakeupCounter+0xb0>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <RestartWakeupCounter+0xb0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000bac:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000bae:	f3af 8000 	nop.w
  return ;
 8000bb2:	bf00      	nop
}
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000d4 	.word	0x200000d4
 8000bc0:	200001e8 	.word	0x200001e8
 8000bc4:	200001e4 	.word	0x200001e4
 8000bc8:	58000800 	.word	0x58000800
 8000bcc:	40002800 	.word	0x40002800

08000bd0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000bd6:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <RescheduleTimerList+0x124>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be2:	d108      	bne.n	8000bf6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000be4:	bf00      	nop
 8000be6:	4b44      	ldr	r3, [pc, #272]	; (8000cf8 <RescheduleTimerList+0x128>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1f7      	bne.n	8000be6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000bf6:	4b40      	ldr	r3, [pc, #256]	; (8000cf8 <RescheduleTimerList+0x128>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689a      	ldr	r2, [r3, #8]
 8000bfe:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <RescheduleTimerList+0x128>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c08:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	; (8000cfc <RescheduleTimerList+0x12c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c10:	7bfa      	ldrb	r2, [r7, #15]
 8000c12:	493b      	ldr	r1, [pc, #236]	; (8000d00 <RescheduleTimerList+0x130>)
 8000c14:	4613      	mov	r3, r2
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	4413      	add	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	440b      	add	r3, r1
 8000c1e:	3308      	adds	r3, #8
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c24:	f7ff ff36 	bl	8000a94 <ReturnTimeElapsed>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c2c:	88fb      	ldrh	r3, [r7, #6]
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d205      	bcs.n	8000c40 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c38:	4b32      	ldr	r3, [pc, #200]	; (8000d04 <RescheduleTimerList+0x134>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	701a      	strb	r2, [r3, #0]
 8000c3e:	e04d      	b.n	8000cdc <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	4a31      	ldr	r2, [pc, #196]	; (8000d08 <RescheduleTimerList+0x138>)
 8000c44:	8812      	ldrh	r2, [r2, #0]
 8000c46:	b292      	uxth	r2, r2
 8000c48:	4413      	add	r3, r2
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d906      	bls.n	8000c60 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c52:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <RescheduleTimerList+0x138>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c58:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <RescheduleTimerList+0x134>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e03d      	b.n	8000cdc <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	88fb      	ldrh	r3, [r7, #6]
 8000c66:	1ad3      	subs	r3, r2, r3
 8000c68:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <RescheduleTimerList+0x134>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c70:	e034      	b.n	8000cdc <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c72:	7bfa      	ldrb	r2, [r7, #15]
 8000c74:	4922      	ldr	r1, [pc, #136]	; (8000d00 <RescheduleTimerList+0x130>)
 8000c76:	4613      	mov	r3, r2
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	4413      	add	r3, r2
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	440b      	add	r3, r1
 8000c80:	3308      	adds	r3, #8
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d20a      	bcs.n	8000ca0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	491c      	ldr	r1, [pc, #112]	; (8000d00 <RescheduleTimerList+0x130>)
 8000c8e:	4613      	mov	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	440b      	add	r3, r1
 8000c98:	3308      	adds	r3, #8
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e013      	b.n	8000cc8 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	4917      	ldr	r1, [pc, #92]	; (8000d00 <RescheduleTimerList+0x130>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	3308      	adds	r3, #8
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	7bfa      	ldrb	r2, [r7, #15]
 8000cb6:	1ac9      	subs	r1, r1, r3
 8000cb8:	4811      	ldr	r0, [pc, #68]	; (8000d00 <RescheduleTimerList+0x130>)
 8000cba:	4613      	mov	r3, r2
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	4403      	add	r3, r0
 8000cc4:	3308      	adds	r3, #8
 8000cc6:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <RescheduleTimerList+0x130>)
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	3315      	adds	r3, #21
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d1c7      	bne.n	8000c72 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff15 	bl	8000b14 <RestartWakeupCounter>

  return ;
 8000cea:	bf00      	nop
}
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40002800 	.word	0x40002800
 8000cf8:	200001e4 	.word	0x200001e4
 8000cfc:	200000d0 	.word	0x200000d0
 8000d00:	20000040 	.word	0x20000040
 8000d04:	200000d8 	.word	0x200000d8
 8000d08:	200001ec 	.word	0x200001ec

08000d0c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	; 0x28
 8000d10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d12:	f3ef 8310 	mrs	r3, PRIMASK
 8000d16:	617b      	str	r3, [r7, #20]
  return(result);
 8000d18:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000d20:	4b5f      	ldr	r3, [pc, #380]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	22ca      	movs	r2, #202	; 0xca
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24
 8000d2a:	4b5d      	ldr	r3, [pc, #372]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2253      	movs	r2, #83	; 0x53
 8000d32:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000d34:	4b5a      	ldr	r3, [pc, #360]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	4b58      	ldr	r3, [pc, #352]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d46:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d48:	4b56      	ldr	r3, [pc, #344]	; (8000ea4 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d50:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d54:	4954      	ldr	r1, [pc, #336]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	4413      	add	r3, r2
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	440b      	add	r3, r1
 8000d60:	330c      	adds	r3, #12
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d172      	bne.n	8000e50 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d6a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d6e:	494e      	ldr	r1, [pc, #312]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d70:	4613      	mov	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4413      	add	r3, r2
 8000d76:	00db      	lsls	r3, r3, #3
 8000d78:	440b      	add	r3, r1
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d7e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000d82:	4949      	ldr	r1, [pc, #292]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	440b      	add	r3, r1
 8000d8e:	3310      	adds	r3, #16
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d94:	4b45      	ldr	r3, [pc, #276]	; (8000eac <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d050      	beq.n	8000e40 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d9e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000da2:	4941      	ldr	r1, [pc, #260]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	330d      	adds	r3, #13
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d126      	bne.n	8000e06 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff fde4 	bl	800098c <UnlinkTimer>
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	f383 8810 	msr	PRIMASK, r3
}
 8000dce:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000dd0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000dd4:	4934      	ldr	r1, [pc, #208]	; (8000ea8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	440b      	add	r3, r1
 8000de0:	3304      	adds	r3, #4
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fa4e 	bl	800128c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	22ca      	movs	r2, #202	; 0xca
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2253      	movs	r2, #83	; 0x53
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
 8000e04:	e014      	b.n	8000e30 <HW_TS_RTC_Wakeup_Handler+0x124>
 8000e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f383 8810 	msr	PRIMASK, r3
}
 8000e10:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f9ac 	bl	8001174 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	22ca      	movs	r2, #202	; 0xca
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
 8000e26:	4b1e      	ldr	r3, [pc, #120]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2253      	movs	r2, #83	; 0x53
 8000e2e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e34:	69fa      	ldr	r2, [r7, #28]
 8000e36:	4619      	mov	r1, r3
 8000e38:	69b8      	ldr	r0, [r7, #24]
 8000e3a:	f000 faaf 	bl	800139c <HW_TS_RTC_Int_AppNot>
 8000e3e:	e025      	b.n	8000e8c <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000e40:	f7ff fec6 	bl	8000bd0 <RescheduleTimerList>
 8000e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e46:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	f383 8810 	msr	PRIMASK, r3
}
 8000e4e:	e01d      	b.n	8000e8c <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000e50:	bf00      	nop
 8000e52:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f7      	beq.n	8000e52 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e76:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000e7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e7e:	60da      	str	r2, [r3, #12]
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f383 8810 	msr	PRIMASK, r3
}
 8000e8a:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	22ff      	movs	r2, #255	; 0xff
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000e96:	bf00      	nop
}
 8000e98:	3728      	adds	r7, #40	; 0x28
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200001e4 	.word	0x200001e4
 8000ea4:	200000d0 	.word	0x200000d0
 8000ea8:	20000040 	.word	0x20000040
 8000eac:	200000d8 	.word	0x200000d8
 8000eb0:	58000800 	.word	0x58000800

08000eb4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000ec0:	4a64      	ldr	r2, [pc, #400]	; (8001054 <HW_TS_Init+0x1a0>)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ec6:	4b63      	ldr	r3, [pc, #396]	; (8001054 <HW_TS_Init+0x1a0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	22ca      	movs	r2, #202	; 0xca
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
 8000ed0:	4b60      	ldr	r3, [pc, #384]	; (8001054 <HW_TS_Init+0x1a0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2253      	movs	r2, #83	; 0x53
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000eda:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HW_TS_Init+0x1a4>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	4a5e      	ldr	r2, [pc, #376]	; (8001058 <HW_TS_Init+0x1a4>)
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000ee6:	4b5c      	ldr	r3, [pc, #368]	; (8001058 <HW_TS_Init+0x1a4>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	f1c3 0304 	rsb	r3, r3, #4
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b58      	ldr	r3, [pc, #352]	; (800105c <HW_TS_Init+0x1a8>)
 8000efa:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000efc:	4b56      	ldr	r3, [pc, #344]	; (8001058 <HW_TS_Init+0x1a4>)
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000f04:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000f08:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	fa92 f2a2 	rbit	r2, r2
 8000f10:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	d101      	bne.n	8000f20 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	e003      	b.n	8000f28 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	fab2 f282 	clz	r2, r2
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	40d3      	lsrs	r3, r2
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	4b4b      	ldr	r3, [pc, #300]	; (8001060 <HW_TS_Init+0x1ac>)
 8000f32:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f34:	4b48      	ldr	r3, [pc, #288]	; (8001058 <HW_TS_Init+0x1a4>)
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	3301      	adds	r3, #1
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b47      	ldr	r3, [pc, #284]	; (8001064 <HW_TS_Init+0x1b0>)
 8000f46:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f48:	4b46      	ldr	r3, [pc, #280]	; (8001064 <HW_TS_Init+0x1b0>)
 8000f4a:	881b      	ldrh	r3, [r3, #0]
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	4a44      	ldr	r2, [pc, #272]	; (8001060 <HW_TS_Init+0x1ac>)
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	fb02 f303 	mul.w	r3, r2, r3
 8000f56:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000f5a:	4a40      	ldr	r2, [pc, #256]	; (800105c <HW_TS_Init+0x1a8>)
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	40d3      	lsrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d904      	bls.n	8000f76 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f6c:	4b3e      	ldr	r3, [pc, #248]	; (8001068 <HW_TS_Init+0x1b4>)
 8000f6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f72:	801a      	strh	r2, [r3, #0]
 8000f74:	e003      	b.n	8000f7e <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HW_TS_Init+0x1b4>)
 8000f7c:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f7e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f82:	f7ff fb81 	bl	8000688 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f86:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000f8a:	f7ff fb69 	bl	8000660 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d143      	bne.n	800101c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f94:	4b35      	ldr	r3, [pc, #212]	; (800106c <HW_TS_Init+0x1b8>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f9a:	4b35      	ldr	r3, [pc, #212]	; (8001070 <HW_TS_Init+0x1bc>)
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	77fb      	strb	r3, [r7, #31]
 8000fa6:	e00c      	b.n	8000fc2 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fa8:	7ffa      	ldrb	r2, [r7, #31]
 8000faa:	4932      	ldr	r1, [pc, #200]	; (8001074 <HW_TS_Init+0x1c0>)
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	440b      	add	r3, r1
 8000fb6:	330c      	adds	r3, #12
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fbc:	7ffb      	ldrb	r3, [r7, #31]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	77fb      	strb	r3, [r7, #31]
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	d9ef      	bls.n	8000fa8 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <HW_TS_Init+0x1c4>)
 8000fca:	2206      	movs	r2, #6
 8000fcc:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000fce:	4b21      	ldr	r3, [pc, #132]	; (8001054 <HW_TS_Init+0x1a0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HW_TS_Init+0x1a0>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fe0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HW_TS_Init+0x1a0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HW_TS_Init+0x1a0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ff6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000ff8:	4b20      	ldr	r3, [pc, #128]	; (800107c <HW_TS_Init+0x1c8>)
 8000ffa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ffe:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001000:	2003      	movs	r0, #3
 8001002:	f001 fa7a 	bl	80024fa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HW_TS_Init+0x1a0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HW_TS_Init+0x1a0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	e00a      	b.n	8001032 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800101c:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <HW_TS_Init+0x1a0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800102c:	2003      	movs	r0, #3
 800102e:	f001 fa56 	bl	80024de <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HW_TS_Init+0x1a0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	22ff      	movs	r2, #255	; 0xff
 800103a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800103c:	2200      	movs	r2, #0
 800103e:	2103      	movs	r1, #3
 8001040:	2003      	movs	r0, #3
 8001042:	f001 fa0a 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001046:	2003      	movs	r0, #3
 8001048:	f001 fa21 	bl	800248e <HAL_NVIC_EnableIRQ>

  return;
 800104c:	bf00      	nop
}
 800104e:	3720      	adds	r7, #32
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200001e4 	.word	0x200001e4
 8001058:	40002800 	.word	0x40002800
 800105c:	200001e8 	.word	0x200001e8
 8001060:	200001e9 	.word	0x200001e9
 8001064:	200001ea 	.word	0x200001ea
 8001068:	200001ec 	.word	0x200001ec
 800106c:	200000d8 	.word	0x200000d8
 8001070:	200000d4 	.word	0x200000d4
 8001074:	20000040 	.word	0x20000040
 8001078:	200000d0 	.word	0x200000d0
 800107c:	58000800 	.word	0x58000800

08001080 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001080:	b480      	push	{r7}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	4613      	mov	r3, r2
 800108e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001096:	f3ef 8310 	mrs	r3, PRIMASK
 800109a:	61fb      	str	r3, [r7, #28]
  return(result);
 800109c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800109e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010a4:	e004      	b.n	80010b0 <HW_TS_Create+0x30>
  {
    loop++;
 80010a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d80c      	bhi.n	80010d2 <HW_TS_Create+0x52>
 80010b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010bc:	492c      	ldr	r1, [pc, #176]	; (8001170 <HW_TS_Create+0xf0>)
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	330c      	adds	r3, #12
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1e9      	bne.n	80010a6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d038      	beq.n	800114c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010de:	4924      	ldr	r1, [pc, #144]	; (8001170 <HW_TS_Create+0xf0>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	330c      	adds	r3, #12
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	f383 8810 	msr	PRIMASK, r3
}
 80010fa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80010fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001100:	491b      	ldr	r1, [pc, #108]	; (8001170 <HW_TS_Create+0xf0>)
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	440b      	add	r3, r1
 800110c:	3310      	adds	r3, #16
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001112:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001116:	4916      	ldr	r1, [pc, #88]	; (8001170 <HW_TS_Create+0xf0>)
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	440b      	add	r3, r1
 8001122:	330d      	adds	r3, #13
 8001124:	79fa      	ldrb	r2, [r7, #7]
 8001126:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001128:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800112c:	4910      	ldr	r1, [pc, #64]	; (8001170 <HW_TS_Create+0xf0>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001142:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800114a:	e008      	b.n	800115e <HW_TS_Create+0xde>
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f383 8810 	msr	PRIMASK, r3
}
 8001156:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001158:	2301      	movs	r3, #1
 800115a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800115e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001162:	4618      	mov	r0, r3
 8001164:	372c      	adds	r7, #44	; 0x2c
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000040 	.word	0x20000040

08001174 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800117e:	f3ef 8310 	mrs	r3, PRIMASK
 8001182:	60fb      	str	r3, [r7, #12]
  return(result);
 8001184:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800118c:	2003      	movs	r0, #3
 800118e:	f001 f98c 	bl	80024aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <HW_TS_Stop+0x100>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	22ca      	movs	r2, #202	; 0xca
 800119a:	625a      	str	r2, [r3, #36]	; 0x24
 800119c:	4b35      	ldr	r3, [pc, #212]	; (8001274 <HW_TS_Stop+0x100>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2253      	movs	r2, #83	; 0x53
 80011a4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	4933      	ldr	r1, [pc, #204]	; (8001278 <HW_TS_Stop+0x104>)
 80011aa:	4613      	mov	r3, r2
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	4413      	add	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	440b      	add	r3, r1
 80011b4:	330c      	adds	r3, #12
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d148      	bne.n	8001250 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2100      	movs	r1, #0
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff fbe2 	bl	800098c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011c8:	4b2c      	ldr	r3, [pc, #176]	; (800127c <HW_TS_Stop+0x108>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ce:	7cfb      	ldrb	r3, [r7, #19]
 80011d0:	2b06      	cmp	r3, #6
 80011d2:	d135      	bne.n	8001240 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HW_TS_Stop+0x10c>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e0:	d108      	bne.n	80011f4 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80011e2:	bf00      	nop
 80011e4:	4b23      	ldr	r3, [pc, #140]	; (8001274 <HW_TS_Stop+0x100>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d1f7      	bne.n	80011e4 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HW_TS_Stop+0x100>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <HW_TS_Stop+0x100>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001206:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001208:	bf00      	nop
 800120a:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <HW_TS_Stop+0x100>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f7      	beq.n	800120a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <HW_TS_Stop+0x100>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <HW_TS_Stop+0x100>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800122e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <HW_TS_Stop+0x110>)
 8001232:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001236:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001238:	2003      	movs	r0, #3
 800123a:	f001 f95e 	bl	80024fa <HAL_NVIC_ClearPendingIRQ>
 800123e:	e007      	b.n	8001250 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HW_TS_Stop+0x114>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	7cfa      	ldrb	r2, [r7, #19]
 8001248:	429a      	cmp	r2, r3
 800124a:	d001      	beq.n	8001250 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 800124c:	f7ff fcc0 	bl	8000bd0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HW_TS_Stop+0x100>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22ff      	movs	r2, #255	; 0xff
 8001258:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800125a:	2003      	movs	r0, #3
 800125c:	f001 f917 	bl	800248e <HAL_NVIC_EnableIRQ>
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	f383 8810 	msr	PRIMASK, r3
}
 800126a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800126c:	bf00      	nop
}
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200001e4 	.word	0x200001e4
 8001278:	20000040 	.word	0x20000040
 800127c:	200000d0 	.word	0x200000d0
 8001280:	40002800 	.word	0x40002800
 8001284:	58000800 	.word	0x58000800
 8001288:	200000d1 	.word	0x200000d1

0800128c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001298:	79fa      	ldrb	r2, [r7, #7]
 800129a:	493c      	ldr	r1, [pc, #240]	; (800138c <HW_TS_Start+0x100>)
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	440b      	add	r3, r1
 80012a6:	330c      	adds	r3, #12
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d103      	bne.n	80012b8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff5e 	bl	8001174 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012b8:	f3ef 8310 	mrs	r3, PRIMASK
 80012bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80012be:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012c2:	b672      	cpsid	i
}
 80012c4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012c6:	2003      	movs	r0, #3
 80012c8:	f001 f8ef 	bl	80024aa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HW_TS_Start+0x104>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	22ca      	movs	r2, #202	; 0xca
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <HW_TS_Start+0x104>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2253      	movs	r2, #83	; 0x53
 80012de:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012e0:	79fa      	ldrb	r2, [r7, #7]
 80012e2:	492a      	ldr	r1, [pc, #168]	; (800138c <HW_TS_Start+0x100>)
 80012e4:	4613      	mov	r3, r2
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	440b      	add	r3, r1
 80012ee:	330c      	adds	r3, #12
 80012f0:	2202      	movs	r2, #2
 80012f2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <HW_TS_Start+0x100>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	3308      	adds	r3, #8
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001308:	79fa      	ldrb	r2, [r7, #7]
 800130a:	4920      	ldr	r1, [pc, #128]	; (800138c <HW_TS_Start+0x100>)
 800130c:	4613      	mov	r3, r2
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	3304      	adds	r3, #4
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fa8a 	bl	8000838 <linkTimer>
 8001324:	4603      	mov	r3, r0
 8001326:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <HW_TS_Start+0x108>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800132e:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <HW_TS_Start+0x10c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b2db      	uxtb	r3, r3
 8001334:	7c7a      	ldrb	r2, [r7, #17]
 8001336:	429a      	cmp	r2, r3
 8001338:	d002      	beq.n	8001340 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800133a:	f7ff fc49 	bl	8000bd0 <RescheduleTimerList>
 800133e:	e013      	b.n	8001368 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001340:	79fa      	ldrb	r2, [r7, #7]
 8001342:	4912      	ldr	r1, [pc, #72]	; (800138c <HW_TS_Start+0x100>)
 8001344:	4613      	mov	r3, r2
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	4413      	add	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	440b      	add	r3, r1
 800134e:	3308      	adds	r3, #8
 8001350:	6819      	ldr	r1, [r3, #0]
 8001352:	8a7b      	ldrh	r3, [r7, #18]
 8001354:	79fa      	ldrb	r2, [r7, #7]
 8001356:	1ac9      	subs	r1, r1, r3
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <HW_TS_Start+0x100>)
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	4403      	add	r3, r0
 8001364:	3308      	adds	r3, #8
 8001366:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HW_TS_Start+0x104>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	22ff      	movs	r2, #255	; 0xff
 8001370:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001372:	2003      	movs	r0, #3
 8001374:	f001 f88b 	bl	800248e <HAL_NVIC_EnableIRQ>
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	f383 8810 	msr	PRIMASK, r3
}
 8001382:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001384:	bf00      	nop
}
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000040 	.word	0x20000040
 8001390:	200001e4 	.word	0x200001e4
 8001394:	200000d0 	.word	0x200000d0
 8001398:	200000d1 	.word	0x200000d1

0800139c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	460b      	mov	r3, r1
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4798      	blx	r3

  return;
 80013ae:	bf00      	nop
}
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <LL_PWR_SMPS_Enable>:
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <LL_PWR_SMPS_Enable+0x1c>)
 80013be:	69db      	ldr	r3, [r3, #28]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <LL_PWR_SMPS_Enable+0x1c>)
 80013c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013c6:	61d3      	str	r3, [r2, #28]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	58000400 	.word	0x58000400

080013d8 <LL_PWR_SMPS_SetStartupCurrent>:
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80013e2:	69db      	ldr	r3, [r3, #28]
 80013e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80013e8:	4904      	ldr	r1, [pc, #16]	; (80013fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61cb      	str	r3, [r1, #28]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	58000400 	.word	0x58000400

08001400 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 8001400:	b480      	push	{r7}
 8001402:	b087      	sub	sp, #28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001408:	4b18      	ldr	r3, [pc, #96]	; (800146c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	0a1b      	lsrs	r3, r3, #8
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d108      	bne.n	800142c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f023 020f 	bic.w	r2, r3, #15
 8001422:	4913      	ldr	r1, [pc, #76]	; (8001470 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4313      	orrs	r3, r2
 8001428:	61cb      	str	r3, [r1, #28]
}
 800142a:	e019      	b.n	8001460 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3b06      	subs	r3, #6
 8001430:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b00      	cmp	r3, #0
 800143e:	da02      	bge.n	8001446 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	e004      	b.n	8001450 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	dd01      	ble.n	8001450 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 800144c:	230f      	movs	r3, #15
 800144e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	f023 020f 	bic.w	r2, r3, #15
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	4905      	ldr	r1, [pc, #20]	; (8001470 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800145c:	4313      	orrs	r3, r2
 800145e:	61cb      	str	r3, [r1, #28]
}
 8001460:	bf00      	nop
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	1fff7558 	.word	0x1fff7558
 8001470:	58000400 	.word	0x58000400

08001474 <LL_EXTI_DisableIT_0_31>:
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800147c:	4b07      	ldr	r3, [pc, #28]	; (800149c <LL_EXTI_DisableIT_0_31+0x28>)
 800147e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	43db      	mvns	r3, r3
 8001486:	4905      	ldr	r1, [pc, #20]	; (800149c <LL_EXTI_DisableIT_0_31+0x28>)
 8001488:	4013      	ands	r3, r2
 800148a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	58000800 	.word	0x58000800

080014a0 <LL_EXTI_DisableIT_32_63>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <LL_EXTI_DisableIT_32_63+0x28>)
 80014aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	4905      	ldr	r1, [pc, #20]	; (80014c8 <LL_EXTI_DisableIT_32_63+0x28>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	58000800 	.word	0x58000800

080014cc <LL_RCC_HSE_SetCapacitorTuning>:
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80014d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80014da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014e6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80014f2:	4313      	orrs	r3, r2
 80014f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	cafecafe 	.word	0xcafecafe

08001508 <LL_RCC_LSE_SetDriveCapability>:
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001518:	f023 0218 	bic.w	r2, r3, #24
 800151c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4313      	orrs	r3, r2
 8001524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800153c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800158c:	d101      	bne.n	8001592 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015b2:	d101      	bne.n	80015b8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_AHB1_GRP1_EnableClock>:
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4313      	orrs	r3, r2
 80015da:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015e8:	68fb      	ldr	r3, [r7, #12]
}
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_AHB2_GRP1_EnableClock>:
{
 80015f6:	b480      	push	{r7}
 80015f8:	b085      	sub	sp, #20
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001604:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4313      	orrs	r3, r2
 800160c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4013      	ands	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_AHB3_GRP1_EnableClock>:
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4313      	orrs	r3, r2
 800163e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800164c:	68fb      	ldr	r3, [r7, #12]
}
 800164e:	bf00      	nop
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	605a      	str	r2, [r3, #4]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	605a      	str	r2, [r3, #4]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	041b      	lsls	r3, r3, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	615a      	str	r2, [r3, #20]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	615a      	str	r2, [r3, #20]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	609a      	str	r2, [r3, #8]
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <LL_LPM_EnableSleep+0x1c>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <LL_LPM_EnableSleep+0x1c>)
 800172a:	f023 0304 	bic.w	r3, r3, #4
 800172e:	6113      	str	r3, [r2, #16]
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	22ff      	movs	r2, #255	; 0xff
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	22ca      	movs	r2, #202	; 0xca
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2253      	movs	r2, #83	; 0x53
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f023 0207 	bic.w	r2, r3, #7
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	609a      	str	r2, [r3, #8]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <main+0x48>)
 80017a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017aa:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ac:	f000 fc7c 	bl	80020a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80017b0:	f000 f967 	bl	8001a82 <Reset_Device>
  Config_HSE();
 80017b4:	f000 f951 	bl	8001a5a <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017b8:	f000 f818 	bl	80017ec <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80017bc:	f000 f89e 	bl	80018fc <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80017c0:	f000 f944 	bl	8001a4c <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80017c4:	f000 f99f 	bl	8001b06 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f000 f906 	bl	80019d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017cc:	f000 f8e6 	bl	800199c <MX_DMA_Init>
  MX_RF_Init();
 80017d0:	f000 f8a8 	bl	8001924 <MX_RF_Init>
  MX_RTC_Init();
 80017d4:	f000 f8ae 	bl	8001934 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 80017d8:	f7fe fe5c 	bl	8000494 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f006 fbfe 	bl	8007fe0 <UTIL_SEQ_Run>
 80017e4:	e7fa      	b.n	80017dc <main+0x3c>
 80017e6:	bf00      	nop
 80017e8:	58004000 	.word	0x58004000

080017ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0ae      	sub	sp, #184	; 0xb8
 80017f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80017f6:	2248      	movs	r2, #72	; 0x48
 80017f8:	2100      	movs	r1, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 fe3e 	bl	800847c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001800:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
 8001810:	615a      	str	r2, [r3, #20]
 8001812:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2250      	movs	r2, #80	; 0x50
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f006 fe2e 	bl	800847c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001820:	f001 fa30 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff fe6f 	bl	8001508 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800182a:	4b33      	ldr	r3, [pc, #204]	; (80018f8 <SystemClock_Config+0x10c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001832:	4a31      	ldr	r2, [pc, #196]	; (80018f8 <SystemClock_Config+0x10c>)
 8001834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b2f      	ldr	r3, [pc, #188]	; (80018f8 <SystemClock_Config+0x10c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001842:	603b      	str	r3, [r7, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001846:	2307      	movs	r3, #7
 8001848:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800184a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001850:	2301      	movs	r3, #1
 8001852:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001854:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001858:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800185a:	2340      	movs	r3, #64	; 0x40
 800185c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001866:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800186a:	4618      	mov	r0, r3
 800186c:	f001 fd86 	bl	800337c <HAL_RCC_OscConfig>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001876:	f000 f977 	bl	8001b68 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800187a:	236f      	movs	r3, #111	; 0x6f
 800187c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800187e:	2302      	movs	r3, #2
 8001880:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001882:	2300      	movs	r3, #0
 8001884:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800188e:	2300      	movs	r3, #0
 8001890:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001892:	2300      	movs	r3, #0
 8001894:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001896:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800189a:	2101      	movs	r1, #1
 800189c:	4618      	mov	r0, r3
 800189e:	f002 f8f9 	bl	8003a94 <HAL_RCC_ClockConfig>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018a8:	f000 f95e 	bl	8001b68 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80018ac:	f643 0303 	movw	r3, #14339	; 0x3803
 80018b0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80018c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018c4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80018c6:	2302      	movs	r3, #2
 80018c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80018ca:	2310      	movs	r3, #16
 80018cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fcf4 	bl	80042be <HAL_RCCEx_PeriphCLKConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80018dc:	f000 f944 	bl	8001b68 <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80018e0:	2000      	movs	r0, #0
 80018e2:	f7ff fd79 	bl	80013d8 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80018e6:	2004      	movs	r0, #4
 80018e8:	f7ff fd8a 	bl	8001400 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80018ec:	f7ff fd64 	bl	80013b8 <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 80018f0:	bf00      	nop
 80018f2:	37b8      	adds	r7, #184	; 0xb8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	58000400 	.word	0x58000400

080018fc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_IPCC_Init+0x20>)
 8001902:	4a07      	ldr	r2, [pc, #28]	; (8001920 <MX_IPCC_Init+0x24>)
 8001904:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_IPCC_Init+0x20>)
 8001908:	f001 f936 	bl	8002b78 <HAL_IPCC_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001912:	f000 f929 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000310 	.word	0x20000310
 8001920:	58000c00 	.word	0x58000c00

08001924 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_RTC_Init+0x60>)
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <MX_RTC_Init+0x64>)
 800193c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_RTC_Init+0x60>)
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <MX_RTC_Init+0x60>)
 8001946:	220f      	movs	r2, #15
 8001948:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <MX_RTC_Init+0x60>)
 800194c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001950:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <MX_RTC_Init+0x60>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001958:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_RTC_Init+0x60>)
 800195a:	2200      	movs	r2, #0
 800195c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <MX_RTC_Init+0x60>)
 8001960:	2200      	movs	r2, #0
 8001962:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_RTC_Init+0x60>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800196a:	480a      	ldr	r0, [pc, #40]	; (8001994 <MX_RTC_Init+0x60>)
 800196c:	f002 ff2e 	bl	80047cc <HAL_RTC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001976:	f000 f8f7 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800197a:	4807      	ldr	r0, [pc, #28]	; (8001998 <MX_RTC_Init+0x64>)
 800197c:	f7ff feed 	bl	800175a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001980:	2100      	movs	r1, #0
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_RTC_Init+0x64>)
 8001984:	f7ff fef9 	bl	800177a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <MX_RTC_Init+0x64>)
 800198a:	f7ff fed9 	bl	8001740 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200004cc 	.word	0x200004cc
 8001998:	40002800 	.word	0x40002800

0800199c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80019a0:	2004      	movs	r0, #4
 80019a2:	f7ff fe0f 	bl	80015c4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019a6:	2001      	movs	r0, #1
 80019a8:	f7ff fe0c 	bl	80015c4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ac:	2002      	movs	r0, #2
 80019ae:	f7ff fe09 	bl	80015c4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	210f      	movs	r1, #15
 80019b6:	200e      	movs	r0, #14
 80019b8:	f000 fd4f 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80019bc:	200e      	movs	r0, #14
 80019be:	f000 fd66 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	210f      	movs	r1, #15
 80019c6:	203a      	movs	r0, #58	; 0x3a
 80019c8:	f000 fd47 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80019cc:	203a      	movs	r0, #58	; 0x3a
 80019ce:	f000 fd5e 	bl	800248e <HAL_NVIC_EnableIRQ>

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ec:	2004      	movs	r0, #4
 80019ee:	f7ff fe02 	bl	80015f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f2:	2001      	movs	r0, #1
 80019f4:	f7ff fdff 	bl	80015f6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	2002      	movs	r0, #2
 80019fa:	f7ff fdfc 	bl	80015f6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2121      	movs	r1, #33	; 0x21
 8001a02:	480f      	ldr	r0, [pc, #60]	; (8001a40 <MX_GPIO_Init+0x68>)
 8001a04:	f001 f864 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUTTON_SW1_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin;
 8001a08:	2310      	movs	r3, #16
 8001a0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MX_GPIO_Init+0x6c>)
 8001a0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW1_GPIO_Port, &GPIO_InitStruct);
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <MX_GPIO_Init+0x70>)
 8001a1a:	f000 fee9 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_BLUE_Pin;
 8001a1e:	2321      	movs	r3, #33	; 0x21
 8001a20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	4619      	mov	r1, r3
 8001a32:	4803      	ldr	r0, [pc, #12]	; (8001a40 <MX_GPIO_Init+0x68>)
 8001a34:	f000 fedc 	bl	80027f0 <HAL_GPIO_Init>

}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	48000400 	.word	0x48000400
 8001a44:	10210000 	.word	0x10210000
 8001a48:	48000800 	.word	0x48000800

08001a4c <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001a50:	bf00      	nop
}
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001a60:	2000      	movs	r0, #0
 8001a62:	f004 fc43 	bl	80062ec <OTP_Read>
 8001a66:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	799b      	ldrb	r3, [r3, #6]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd2a 	bl	80014cc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
}  
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <Reset_Device>:


static void Reset_Device( void )
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001a86:	f000 f827 	bl	8001ad8 <Reset_BackupDomain>

	Reset_IPCC();
 8001a8a:	f000 f803 	bl	8001a94 <Reset_IPCC>
#endif

	return;
 8001a8e:	bf00      	nop
}
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001a98:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001a9c:	f7ff fdc4 	bl	8001628 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001aa0:	213f      	movs	r1, #63	; 0x3f
 8001aa2:	480c      	ldr	r0, [pc, #48]	; (8001ad4 <Reset_IPCC+0x40>)
 8001aa4:	f7ff fe1f 	bl	80016e6 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001aa8:	213f      	movs	r1, #63	; 0x3f
 8001aaa:	480a      	ldr	r0, [pc, #40]	; (8001ad4 <Reset_IPCC+0x40>)
 8001aac:	f7ff fe29 	bl	8001702 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001ab0:	213f      	movs	r1, #63	; 0x3f
 8001ab2:	4808      	ldr	r0, [pc, #32]	; (8001ad4 <Reset_IPCC+0x40>)
 8001ab4:	f7ff fdd1 	bl	800165a <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001ab8:	213f      	movs	r1, #63	; 0x3f
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <Reset_IPCC+0x40>)
 8001abc:	f7ff fdf0 	bl	80016a0 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001ac0:	213f      	movs	r1, #63	; 0x3f
 8001ac2:	4804      	ldr	r0, [pc, #16]	; (8001ad4 <Reset_IPCC+0x40>)
 8001ac4:	f7ff fddb 	bl	800167e <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001ac8:	213f      	movs	r1, #63	; 0x3f
 8001aca:	4802      	ldr	r0, [pc, #8]	; (8001ad4 <Reset_IPCC+0x40>)
 8001acc:	f7ff fdfa 	bl	80016c4 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001ad0:	bf00      	nop
}
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	58000c00 	.word	0x58000c00

08001ad8 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001adc:	f7ff fd4c 	bl	8001578 <LL_RCC_IsActiveFlag_PINRST>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <Reset_BackupDomain+0x2a>
 8001ae6:	f7ff fd5a 	bl	800159e <LL_RCC_IsActiveFlag_SFTRST>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d108      	bne.n	8001b02 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001af0:	f001 f8c8 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001af4:	f001 f8c6 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001af8:	f7ff fd1c 	bl	8001534 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001afc:	f7ff fd2b 	bl	8001556 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
}
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <Init_Exti>:

static void Init_Exti( void )
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b0e:	f7ff fcb1 	bl	8001474 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001b12:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001b16:	f7ff fcc3 	bl	80014a0 <LL_EXTI_DisableIT_32_63>

  return;
 8001b1a:	bf00      	nop
}
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b26:	f000 fb2d 	bl	8002184 <HAL_GetTick>
 8001b2a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	d00a      	beq.n	8001b4e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001b38:	f000 fb3c 	bl	80021b4 <HAL_GetTickFreq>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	461a      	mov	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4413      	add	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b46:	e002      	b.n	8001b4e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001b48:	f7ff fdea 	bl	8001720 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001b4c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001b4e:	f000 fb19 	bl	8002184 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d8f4      	bhi.n	8001b48 <HAL_Delay+0x2a>
  }
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_RCC_SetRTCClockSource>:
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_RCC_EnableRTC>:
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_AHB3_GRP1_EnableClock>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001be8:	68fb      	ldr	r3, [r7, #12]
}
 8001bea:	bf00      	nop
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <LL_APB1_GRP1_EnableClock>:
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b085      	sub	sp, #20
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4013      	ands	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001c2c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c30:	f7ff ffc8 	bl	8001bc4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	202e      	movs	r0, #46	; 0x2e
 8001c3a:	f000 fc0e 	bl	800245a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001c3e:	202e      	movs	r0, #46	; 0x2e
 8001c40:	f000 fc25 	bl	800248e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_IPCC_MspInit+0x44>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d113      	bne.n	8001c82 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001c5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001c5e:	f7ff ffb1 	bl	8001bc4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	202c      	movs	r0, #44	; 0x2c
 8001c68:	f000 fbf7 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001c6c:	202c      	movs	r0, #44	; 0x2c
 8001c6e:	f000 fc0e 	bl	800248e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	202d      	movs	r0, #45	; 0x2d
 8001c78:	f000 fbef 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001c7c:	202d      	movs	r0, #45	; 0x2d
 8001c7e:	f000 fc06 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	58000c00 	.word	0x58000c00

08001c90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <HAL_RTC_MspInit+0x3c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d110      	bne.n	8001cc4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001ca2:	f000 ffef 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8001ca6:	f000 ffed 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8001caa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cae:	f7ff ff62 	bl	8001b76 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cb2:	f7ff ff76 	bl	8001ba2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001cb6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cba:	f7ff ff9c 	bl	8001bf6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f002 fe72 	bl	80049a8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40002800 	.word	0x40002800

08001cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <HardFault_Handler+0x4>

08001ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <MemManage_Handler+0x4>

08001cea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <BusFault_Handler+0x4>

08001cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf4:	e7fe      	b.n	8001cf4 <UsageFault_Handler+0x4>

08001cf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d12:	b480      	push	{r7}
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d24:	f000 fa1a 	bl	800215c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA1_Channel4_IRQHandler+0x10>)
 8001d32:	f000 fcae 	bl	8002692 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200004f0 	.word	0x200004f0

08001d40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <USART1_IRQHandler+0x10>)
 8001d46:	f002 fe65 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	2000043c 	.word	0x2000043c

08001d54 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <LPUART1_IRQHandler+0x10>)
 8001d5a:	f002 fe5b 	bl	8004a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000034c 	.word	0x2000034c

08001d68 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001d6c:	f005 ffa2 	bl	8007cb4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001d78:	f005 ffd4 	bl	8007d24 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001d84:	f000 fed4 	bl	8002b30 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <DMA2_Channel4_IRQHandler+0x10>)
 8001d92:	f000 fc7e 	bl	8002692 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200003dc 	.word	0x200003dc

08001da0 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8001da4:	2010      	movs	r0, #16
 8001da6:	f000 feab 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}

08001dae <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8001db2:	2001      	movs	r0, #1
 8001db4:	f000 fea4 	bl	8002b00 <HAL_GPIO_EXTI_IRQHandler>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8001dc0:	f7fe ffa4 	bl	8000d0c <HW_TS_RTC_Wakeup_Handler>
}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <SystemInit+0xa0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001dd2:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <SystemInit+0xa0>)
 8001dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <SystemInit+0xa0>)
 8001dda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001dfa:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <SystemInit+0xa4>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e18:	f023 0305 	bic.w	r3, r3, #5
 8001e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <SystemInit+0xa8>)
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <SystemInit+0xa8>)
 8001e42:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	2200      	movs	r2, #0
 8001e5a:	619a      	str	r2, [r3, #24]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000ed00 	.word	0xe000ed00
 8001e6c:	faf6fefb 	.word	0xfaf6fefb
 8001e70:	22041000 	.word	0x22041000

08001e74 <LL_AHB2_GRP1_EnableClock>:
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e98:	68fb      	ldr	r3, [r7, #12]
}
 8001e9a:	bf00      	nop
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001eb2:	f107 030c 	add.w	r3, r7, #12
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f7ff ffd6 	bl	8001e74 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <BSP_LED_Init+0x6c>)
 8001ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ed0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <BSP_LED_Init+0x70>)
 8001ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee6:	f107 020c 	add.w	r2, r7, #12
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f000 fc7f 	bl	80027f0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <BSP_LED_Init+0x70>)
 8001ef6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <BSP_LED_Init+0x6c>)
 8001efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f02:	2200      	movs	r2, #0
 8001f04:	4619      	mov	r1, r3
 8001f06:	f000 fde3 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8001f0a:	bf00      	nop
 8001f0c:	3720      	adds	r7, #32
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	080086b4 	.word	0x080086b4
 8001f18:	20000008 	.word	0x20000008

08001f1c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <BSP_LED_On+0x2c>)
 8001f2a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	4a06      	ldr	r2, [pc, #24]	; (8001f4c <BSP_LED_On+0x30>)
 8001f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f36:	2201      	movs	r2, #1
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f000 fdc9 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	080086b4 	.word	0x080086b4

08001f50 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	4a07      	ldr	r2, [pc, #28]	; (8001f7c <BSP_LED_Off+0x2c>)
 8001f5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <BSP_LED_Off+0x30>)
 8001f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f000 fdaf 	bl	8002ad0 <HAL_GPIO_WritePin>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	080086b4 	.word	0x080086b4

08001f84 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	460a      	mov	r2, r1
 8001f8e:	71fb      	strb	r3, [r7, #7]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <BSP_PB_Init+0x2e>
 8001faa:	2004      	movs	r0, #4
 8001fac:	f7ff ff62 	bl	8001e74 <LL_AHB2_GRP1_EnableClock>
 8001fb0:	e00c      	b.n	8001fcc <BSP_PB_Init+0x48>
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d103      	bne.n	8001fc0 <BSP_PB_Init+0x3c>
 8001fb8:	2008      	movs	r0, #8
 8001fba:	f7ff ff5b 	bl	8001e74 <LL_AHB2_GRP1_EnableClock>
 8001fbe:	e005      	b.n	8001fcc <BSP_PB_Init+0x48>
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d102      	bne.n	8001fcc <BSP_PB_Init+0x48>
 8001fc6:	2008      	movs	r0, #8
 8001fc8:	f7ff ff54 	bl	8001e74 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001fcc:	79bb      	ldrb	r3, [r7, #6]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d117      	bne.n	8002002 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <BSP_PB_Init+0xd4>)
 8001fd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fda:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <BSP_PB_Init+0xd8>)
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	f107 020c 	add.w	r2, r7, #12
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fbfa 	bl	80027f0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f7ff fd8e 	bl	8001b1e <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002002:	79bb      	ldrb	r3, [r7, #6]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d122      	bne.n	800204e <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	4a13      	ldr	r2, [pc, #76]	; (8002058 <BSP_PB_Init+0xd4>)
 800200c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002010:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8002012:	2301      	movs	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8002016:	4b12      	ldr	r3, [pc, #72]	; (8002060 <BSP_PB_Init+0xdc>)
 8002018:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	4a0f      	ldr	r2, [pc, #60]	; (800205c <BSP_PB_Init+0xd8>)
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	f107 020c 	add.w	r2, r7, #12
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f000 fbe1 	bl	80027f0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800202e:	79fb      	ldrb	r3, [r7, #7]
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <BSP_PB_Init+0xe0>)
 8002032:	5cd3      	ldrb	r3, [r2, r3]
 8002034:	b25b      	sxtb	r3, r3
 8002036:	2200      	movs	r2, #0
 8002038:	210f      	movs	r1, #15
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fa0d 	bl	800245a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	4a08      	ldr	r2, [pc, #32]	; (8002064 <BSP_PB_Init+0xe0>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	b25b      	sxtb	r3, r3
 8002048:	4618      	mov	r0, r3
 800204a:	f000 fa20 	bl	800248e <HAL_NVIC_EnableIRQ>
  }
}
 800204e:	bf00      	nop
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	080086bc 	.word	0x080086bc
 800205c:	20000014 	.word	0x20000014
 8002060:	10210000 	.word	0x10210000
 8002064:	080086c4 	.word	0x080086c4

08002068 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800206c:	4b05      	ldr	r3, [pc, #20]	; (8002084 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6053      	str	r3, [r2, #4]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e0042000 	.word	0xe0042000

08002088 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800208c:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002092:	f043 0302 	orr.w	r3, r3, #2
 8002096:	6053      	str	r3, [r2, #4]
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e0042000 	.word	0xe0042000

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <HAL_Init+0x3c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a0b      	ldr	r2, [pc, #44]	; (80020e4 <HAL_Init+0x3c>)
 80020b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020be:	2003      	movs	r0, #3
 80020c0:	f000 f9c0 	bl	8002444 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020c4:	2000      	movs	r0, #0
 80020c6:	f000 f80f 	bl	80020e8 <HAL_InitTick>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	e001      	b.n	80020da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020d6:	f7ff fda7 	bl	8001c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020da:	79fb      	ldrb	r3, [r7, #7]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	58004000 	.word	0x58004000

080020e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_InitTick+0x6c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d024      	beq.n	8002146 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020fc:	f001 fe76 	bl	8003dec <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_InitTick+0x6c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f9d6 	bl	80024c6 <HAL_SYSTICK_Config>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	d809      	bhi.n	800213a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002126:	2200      	movs	r2, #0
 8002128:	6879      	ldr	r1, [r7, #4]
 800212a:	f04f 30ff 	mov.w	r0, #4294967295
 800212e:	f000 f994 	bl	800245a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002132:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_InitTick+0x70>)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e007      	b.n	800214a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	e004      	b.n	800214a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
 8002144:	e001      	b.n	800214a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000024 	.word	0x20000024
 8002158:	20000020 	.word	0x20000020

0800215c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x20>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x24>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_IncTick+0x24>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000024 	.word	0x20000024
 8002180:	20000550 	.word	0x20000550

08002184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_GetTick+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000550 	.word	0x20000550

0800219c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_GetTickPrio+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000020 	.word	0x20000020

080021b4 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_GetTickFreq+0x14>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000024 	.word	0x20000024

080021cc <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80021d0:	f7ff ff4a 	bl	8002068 <LL_DBGMCU_EnableDBGSleepMode>
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80021dc:	f7ff ff54 	bl	8002088 <LL_DBGMCU_EnableDBGStopMode>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <__NVIC_EnableIRQ+0x38>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	2b00      	cmp	r3, #0
 8002294:	db12      	blt.n	80022bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	490a      	ldr	r1, [pc, #40]	; (80022c8 <__NVIC_DisableIRQ+0x44>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2001      	movs	r0, #1
 80022a6:	fa00 f202 	lsl.w	r2, r0, r2
 80022aa:	3320      	adds	r3, #32
 80022ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80022b0:	f3bf 8f4f 	dsb	sy
}
 80022b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022b6:	f3bf 8f6f 	isb	sy
}
 80022ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0c      	blt.n	80022f8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	; (8002304 <__NVIC_SetPendingIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	3340      	adds	r3, #64	; 0x40
 80022f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	2b00      	cmp	r3, #0
 8002318:	db0c      	blt.n	8002334 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f003 021f 	and.w	r2, r3, #31
 8002320:	4907      	ldr	r1, [pc, #28]	; (8002340 <__NVIC_ClearPendingIRQ+0x38>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	2001      	movs	r0, #1
 800232a:	fa00 f202 	lsl.w	r2, r0, r2
 800232e:	3360      	adds	r3, #96	; 0x60
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100

08002344 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	6039      	str	r1, [r7, #0]
 800234e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002354:	2b00      	cmp	r3, #0
 8002356:	db0a      	blt.n	800236e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <__NVIC_SetPriority+0x4c>)
 800235e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002362:	0112      	lsls	r2, r2, #4
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	440b      	add	r3, r1
 8002368:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800236c:	e00a      	b.n	8002384 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	b2da      	uxtb	r2, r3
 8002372:	4908      	ldr	r1, [pc, #32]	; (8002394 <__NVIC_SetPriority+0x50>)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	3b04      	subs	r3, #4
 800237c:	0112      	lsls	r2, r2, #4
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	440b      	add	r3, r1
 8002382:	761a      	strb	r2, [r3, #24]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000e100 	.word	0xe000e100
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002398:	b480      	push	{r7}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f1c3 0307 	rsb	r3, r3, #7
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	bf28      	it	cs
 80023b6:	2304      	movcs	r3, #4
 80023b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3304      	adds	r3, #4
 80023be:	2b06      	cmp	r3, #6
 80023c0:	d902      	bls.n	80023c8 <NVIC_EncodePriority+0x30>
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3b03      	subs	r3, #3
 80023c6:	e000      	b.n	80023ca <NVIC_EncodePriority+0x32>
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023cc:	f04f 32ff 	mov.w	r2, #4294967295
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43da      	mvns	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	401a      	ands	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e0:	f04f 31ff 	mov.w	r1, #4294967295
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ea:	43d9      	mvns	r1, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	4313      	orrs	r3, r2
         );
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3724      	adds	r7, #36	; 0x24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
	...

08002400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3b01      	subs	r3, #1
 800240c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002410:	d301      	bcc.n	8002416 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002412:	2301      	movs	r3, #1
 8002414:	e00f      	b.n	8002436 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002416:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <SysTick_Config+0x40>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241e:	210f      	movs	r1, #15
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	f7ff ff8e 	bl	8002344 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <SysTick_Config+0x40>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242e:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SysTick_Config+0x40>)
 8002430:	2207      	movs	r2, #7
 8002432:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	e000e010 	.word	0xe000e010

08002444 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff fec9 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b086      	sub	sp, #24
 800245e:	af00      	add	r7, sp, #0
 8002460:	4603      	mov	r3, r0
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	607a      	str	r2, [r7, #4]
 8002466:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff fee0 	bl	800222c <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff90 	bl	8002398 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5f 	bl	8002344 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fed3 	bl	8002248 <__NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fee3 	bl	8002284 <__NVIC_DisableIRQ>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ff96 	bl	8002400 <SysTick_Config>
 80024d4:	4603      	mov	r3, r0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80024e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff feed 	bl	80022cc <__NVIC_SetPendingIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	4603      	mov	r3, r0
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fefd 	bl	8002308 <__NVIC_ClearPendingIRQ>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e04f      	b.n	80025c8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d008      	beq.n	8002546 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e040      	b.n	80025c8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 020e 	bic.w	r2, r2, #14
 8002554:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	f003 021c 	and.w	r2, r3, #28
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	2101      	movs	r1, #1
 8002584:	fa01 f202 	lsl.w	r2, r1, r2
 8002588:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002592:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00c      	beq.n	80025b6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d005      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2204      	movs	r2, #4
 80025f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e047      	b.n	8002688 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 020e 	bic.w	r2, r2, #14
 8002606:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002626:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f003 021c 	and.w	r2, r3, #28
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002634:	2101      	movs	r1, #1
 8002636:	fa01 f202 	lsl.w	r2, r1, r2
 800263a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002644:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800265c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002666:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
    }
  }
  return status;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f003 031c 	and.w	r3, r3, #28
 80026b2:	2204      	movs	r2, #4
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d026      	beq.n	800270c <HAL_DMA_IRQHandler+0x7a>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d021      	beq.n	800270c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d107      	bne.n	80026e6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f022 0204 	bic.w	r2, r2, #4
 80026e4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f003 021c 	and.w	r2, r3, #28
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2104      	movs	r1, #4
 80026f4:	fa01 f202 	lsl.w	r2, r1, r2
 80026f8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d071      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800270a:	e06c      	b.n	80027e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002710:	f003 031c 	and.w	r3, r3, #28
 8002714:	2202      	movs	r2, #2
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d02e      	beq.n	800277e <HAL_DMA_IRQHandler+0xec>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d029      	beq.n	800277e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 020a 	bic.w	r2, r2, #10
 8002746:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f003 021c 	and.w	r2, r3, #28
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	2102      	movs	r1, #2
 800275e:	fa01 f202 	lsl.w	r2, r1, r2
 8002762:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d038      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800277c:	e033      	b.n	80027e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 031c 	and.w	r3, r3, #28
 8002786:	2208      	movs	r2, #8
 8002788:	409a      	lsls	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d02a      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x156>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d025      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020e 	bic.w	r2, r2, #14
 80027aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	f003 021c 	and.w	r2, r3, #28
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2101      	movs	r1, #1
 80027ba:	fa01 f202 	lsl.w	r2, r1, r2
 80027be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027e6:	bf00      	nop
 80027e8:	bf00      	nop
}
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	e14c      	b.n	8002a9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 813e 	beq.w	8002a94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d00b      	beq.n	8002838 <HAL_GPIO_Init+0x48>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d007      	beq.n	8002838 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282c:	2b11      	cmp	r3, #17
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b12      	cmp	r3, #18
 8002836:	d130      	bne.n	800289a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800286e:	2201      	movs	r2, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	4013      	ands	r3, r2
 800287c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	091b      	lsrs	r3, r3, #4
 8002884:	f003 0201 	and.w	r2, r3, #1
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0xea>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b12      	cmp	r3, #18
 80028d8:	d123      	bne.n	8002922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	6939      	ldr	r1, [r7, #16]
 800291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 8098 	beq.w	8002a94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002964:	4a54      	ldr	r2, [pc, #336]	; (8002ab8 <HAL_GPIO_Init+0x2c8>)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	089b      	lsrs	r3, r3, #2
 800296a:	3302      	adds	r3, #2
 800296c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	220f      	movs	r2, #15
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4013      	ands	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800298e:	d019      	beq.n	80029c4 <HAL_GPIO_Init+0x1d4>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a4a      	ldr	r2, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x2cc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <HAL_GPIO_Init+0x1d0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a49      	ldr	r2, [pc, #292]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00d      	beq.n	80029bc <HAL_GPIO_Init+0x1cc>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a48      	ldr	r2, [pc, #288]	; (8002ac4 <HAL_GPIO_Init+0x2d4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d007      	beq.n	80029b8 <HAL_GPIO_Init+0x1c8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a47      	ldr	r2, [pc, #284]	; (8002ac8 <HAL_GPIO_Init+0x2d8>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d101      	bne.n	80029b4 <HAL_GPIO_Init+0x1c4>
 80029b0:	2304      	movs	r3, #4
 80029b2:	e008      	b.n	80029c6 <HAL_GPIO_Init+0x1d6>
 80029b4:	2307      	movs	r3, #7
 80029b6:	e006      	b.n	80029c6 <HAL_GPIO_Init+0x1d6>
 80029b8:	2303      	movs	r3, #3
 80029ba:	e004      	b.n	80029c6 <HAL_GPIO_Init+0x1d6>
 80029bc:	2302      	movs	r3, #2
 80029be:	e002      	b.n	80029c6 <HAL_GPIO_Init+0x1d6>
 80029c0:	2301      	movs	r3, #1
 80029c2:	e000      	b.n	80029c6 <HAL_GPIO_Init+0x1d6>
 80029c4:	2300      	movs	r3, #0
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	f002 0203 	and.w	r2, r2, #3
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	4093      	lsls	r3, r2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029d6:	4938      	ldr	r1, [pc, #224]	; (8002ab8 <HAL_GPIO_Init+0x2c8>)
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	3302      	adds	r3, #2
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029e4:	4b39      	ldr	r3, [pc, #228]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 80029e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a0a:	4a30      	ldr	r2, [pc, #192]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002a12:	4b2e      	ldr	r3, [pc, #184]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 8002a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	693a      	ldr	r2, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a8e:	4a0f      	ldr	r2, [pc, #60]	; (8002acc <HAL_GPIO_Init+0x2dc>)
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3301      	adds	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f47f aeab 	bne.w	8002800 <HAL_GPIO_Init+0x10>
  }
}
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40010000 	.word	0x40010000
 8002abc:	48000400 	.word	0x48000400
 8002ac0:	48000800 	.word	0x48000800
 8002ac4:	48000c00 	.word	0x48000c00
 8002ac8:	48001000 	.word	0x48001000
 8002acc:	58000800 	.word	0x58000800

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002aec:	e002      	b.n	8002af4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d006      	beq.n	8002b24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b16:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	88fb      	ldrh	r3, [r7, #6]
 8002b1a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fd81 	bl	8000626 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	58000800 	.word	0x58000800

08002b30 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_HSEM_IRQHandler+0x30>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <HAL_HSEM_IRQHandler+0x30>)
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	43db      	mvns	r3, r3
 8002b44:	4906      	ldr	r1, [pc, #24]	; (8002b60 <HAL_HSEM_IRQHandler+0x30>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <HAL_HSEM_IRQHandler+0x30>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f807 	bl	8002b64 <HAL_HSEM_FreeCallback>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	58001500 	.word	0x58001500

08002b64 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01e      	beq.n	8002bc8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_IPCC_Init+0x60>)
 8002b8c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f7ff f854 	bl	8001c48 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002ba0:	68b8      	ldr	r0, [r7, #8]
 8002ba2:	f000 f85b 	bl	8002c5c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f82c 	bl	8002c10 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002bc6:	e001      	b.n	8002bcc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	58000c00 	.word	0x58000c00

08002bdc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	4613      	mov	r3, r2
 8002be8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	4613      	mov	r3, r2
 8002c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e00f      	b.n	8002c3e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <IPCC_SetDefaultCallbacks+0x44>)
 8002c28:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3306      	adds	r3, #6
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	4a08      	ldr	r2, [pc, #32]	; (8002c58 <IPCC_SetDefaultCallbacks+0x48>)
 8002c36:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d9ec      	bls.n	8002c1e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	08002bdd 	.word	0x08002bdd
 8002c58:	08002bf7 	.word	0x08002bf7

08002c5c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002c70:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	223f      	movs	r2, #63	; 0x3f
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	58000400 	.word	0x58000400

08002ca4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	58000400 	.word	0x58000400

08002cc0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd2:	d101      	bne.n	8002cd8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_RCC_HSE_Enable>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf6:	6013      	str	r3, [r2, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_HSE_Disable>:
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
}
 8002d16:	bf00      	nop
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_RCC_HSE_IsReady>:
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d32:	d101      	bne.n	8002d38 <LL_RCC_HSE_IsReady+0x18>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <LL_RCC_HSE_IsReady+0x1a>
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_HSI_Enable>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <LL_RCC_HSI_Disable>:
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d74:	6013      	str	r3, [r2, #0]
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_HSI_IsReady>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d92:	d101      	bne.n	8002d98 <LL_RCC_HSI_IsReady+0x18>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <LL_RCC_HSI_IsReady+0x1a>
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_RCC_HSI48_Enable>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_RCC_HSI48_Disable>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <LL_RCC_HSI48_IsReady>:
{
 8002e12:	b480      	push	{r7}
 8002e14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002e16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d101      	bne.n	8002e2a <LL_RCC_HSI48_IsReady+0x18>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <LL_RCC_HSI48_IsReady+0x1a>
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_LSE_Enable>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e46:	f043 0301 	orr.w	r3, r3, #1
 8002e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e4e:	bf00      	nop
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_LSE_Disable>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e68:	f023 0301 	bic.w	r3, r3, #1
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <LL_RCC_LSE_EnableBypass>:
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_RCC_LSE_DisableBypass>:
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_RCC_LSE_IsReady>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d101      	bne.n	8002ed6 <LL_RCC_LSE_IsReady+0x18>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_RCC_LSE_IsReady+0x1a>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_RCC_LSI1_Enable>:
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_RCC_LSI1_Disable>:
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f1c:	bf00      	nop
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <LL_RCC_LSI1_IsReady>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d101      	bne.n	8002f3e <LL_RCC_LSI1_IsReady+0x18>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <LL_RCC_LSI1_IsReady+0x1a>
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <LL_RCC_LSI2_Enable>:
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f5a:	f043 0304 	orr.w	r3, r3, #4
 8002f5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f62:	bf00      	nop
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_RCC_LSI2_Disable>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7c:	f023 0304 	bic.w	r3, r3, #4
 8002f80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_LSI2_IsReady>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d101      	bne.n	8002fa6 <LL_RCC_LSI2_IsReady+0x18>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <LL_RCC_LSI2_IsReady+0x1a>
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_LSI2_SetTrimming>:
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_RCC_MSI_Enable>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_RCC_MSI_Disable>:
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6013      	str	r3, [r2, #0]
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_RCC_MSI_IsReady>:
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b02      	cmp	r3, #2
 800302c:	d101      	bne.n	8003032 <LL_RCC_MSI_IsReady+0x16>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <LL_RCC_MSI_IsReady+0x18>
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_RCC_MSI_SetRange>:
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr

08003066 <LL_RCC_MSI_GetRange>:
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003076:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2bb0      	cmp	r3, #176	; 0xb0
 800307c:	d901      	bls.n	8003082 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800307e:	23b0      	movs	r3, #176	; 0xb0
 8003080:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003082:	687b      	ldr	r3, [r7, #4]
}
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030aa:	4313      	orrs	r3, r2
 80030ac:	604b      	str	r3, [r1, #4]
}
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <LL_RCC_SetSysClkSource>:
{
 80030ba:	b480      	push	{r7}
 80030bc:	b083      	sub	sp, #12
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 0203 	bic.w	r2, r3, #3
 80030cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <LL_RCC_GetSysClkSource>:
{
 80030e2:	b480      	push	{r7}
 80030e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 030c 	and.w	r3, r3, #12
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_RCC_SetAHBPrescaler>:
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4313      	orrs	r3, r2
 8003114:	608b      	str	r3, [r1, #8]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003132:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003136:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <LL_RCC_SetAHB4Prescaler>:
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800315e:	f023 020f 	bic.w	r2, r3, #15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316a:	4313      	orrs	r3, r2
 800316c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_RCC_SetAPB1Prescaler>:
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800318e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4313      	orrs	r3, r2
 8003196:	608b      	str	r3, [r1, #8]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <LL_RCC_SetAPB2Prescaler>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <LL_RCC_GetAHBPrescaler>:
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <LL_RCC_GetAHB4Prescaler>:
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_RCC_PLL_Enable>:
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800320e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <LL_RCC_PLL_Disable>:
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003230:	6013      	str	r3, [r2, #0]
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_RCC_PLL_IsReady>:
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800324e:	d101      	bne.n	8003254 <LL_RCC_PLL_IsReady+0x18>
 8003250:	2301      	movs	r3, #1
 8003252:	e000      	b.n	8003256 <LL_RCC_PLL_IsReady+0x1a>
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <LL_RCC_PLL_GetN>:
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	0a1b      	lsrs	r3, r3, #8
 800326c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_RCC_PLL_GetR>:
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003288:	4618      	mov	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <LL_RCC_PLL_GetDivider>:
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <LL_RCC_PLL_GetMainSource>:
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	f003 0303 	and.w	r3, r3, #3
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d4:	d101      	bne.n	80032da <LL_RCC_IsActiveFlag_HPRE+0x18>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032fa:	d101      	bne.n	8003300 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003314:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800331c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003320:	d101      	bne.n	8003326 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003332:	b480      	push	{r7}
 8003334:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003340:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003344:	d101      	bne.n	800334a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003346:	2301      	movs	r3, #1
 8003348:	e000      	b.n	800334c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003356:	b480      	push	{r7}
 8003358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003364:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003368:	d101      	bne.n	800336e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b590      	push	{r4, r7, lr}
 800337e:	b08d      	sub	sp, #52	; 0x34
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e37e      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8092 	beq.w	80034c0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339c:	f7ff fea1 	bl	80030e2 <LL_RCC_GetSysClkSource>
 80033a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a2:	f7ff ff82 	bl	80032aa <LL_RCC_PLL_GetMainSource>
 80033a6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_RCC_OscConfig+0x3e>
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	2b0c      	cmp	r3, #12
 80033b2:	d14c      	bne.n	800344e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80033b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d149      	bne.n	800344e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ba:	f7ff fe2f 	bl	800301c <LL_RCC_MSI_IsReady>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_RCC_OscConfig+0x54>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e35d      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80033d4:	f7ff fe47 	bl	8003066 <LL_RCC_MSI_GetRange>
 80033d8:	4603      	mov	r3, r0
 80033da:	429c      	cmp	r4, r3
 80033dc:	d914      	bls.n	8003408 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fd16 	bl	8003e14 <RCC_SetFlashLatencyFromMSIRange>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e34c      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff fe21 	bl	800303e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fe45 	bl	8003090 <LL_RCC_MSI_SetCalibTrimming>
 8003406:	e013      	b.n	8003430 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fe16 	bl	800303e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fe3a 	bl	8003090 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fcf7 	bl	8003e14 <RCC_SetFlashLatencyFromMSIRange>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e32d      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003430:	f000 fcdc 	bl	8003dec <HAL_RCC_GetHCLKFreq>
 8003434:	4603      	mov	r3, r0
 8003436:	4ab3      	ldr	r2, [pc, #716]	; (8003704 <HAL_RCC_OscConfig+0x388>)
 8003438:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800343a:	4bb3      	ldr	r3, [pc, #716]	; (8003708 <HAL_RCC_OscConfig+0x38c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fe52 	bl	80020e8 <HAL_InitTick>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d039      	beq.n	80034be <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e31e      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01e      	beq.n	8003494 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003456:	f7ff fdc3 	bl	8002fe0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800345a:	f7fe fe93 	bl	8002184 <HAL_GetTick>
 800345e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003462:	f7fe fe8f 	bl	8002184 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e30b      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003474:	f7ff fdd2 	bl	800301c <LL_RCC_MSI_IsReady>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d0f1      	beq.n	8003462 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fddb 	bl	800303e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff fdff 	bl	8003090 <LL_RCC_MSI_SetCalibTrimming>
 8003492:	e015      	b.n	80034c0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003494:	f7ff fdb3 	bl	8002ffe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003498:	f7fe fe74 	bl	8002184 <HAL_GetTick>
 800349c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a0:	f7fe fe70 	bl	8002184 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e2ec      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80034b2:	f7ff fdb3 	bl	800301c <LL_RCC_MSI_IsReady>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f1      	bne.n	80034a0 <HAL_RCC_OscConfig+0x124>
 80034bc:	e000      	b.n	80034c0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d04e      	beq.n	800356a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034cc:	f7ff fe09 	bl	80030e2 <LL_RCC_GetSysClkSource>
 80034d0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d2:	f7ff feea 	bl	80032aa <LL_RCC_PLL_GetMainSource>
 80034d6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d005      	beq.n	80034ea <HAL_RCC_OscConfig+0x16e>
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	2b0c      	cmp	r3, #12
 80034e2:	d10d      	bne.n	8003500 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b03      	cmp	r3, #3
 80034e8:	d10a      	bne.n	8003500 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ea:	f7ff fc19 	bl	8002d20 <LL_RCC_HSE_IsReady>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d039      	beq.n	8003568 <HAL_RCC_OscConfig+0x1ec>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d135      	bne.n	8003568 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e2c5      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003508:	d102      	bne.n	8003510 <HAL_RCC_OscConfig+0x194>
 800350a:	f7ff fbeb 	bl	8002ce4 <LL_RCC_HSE_Enable>
 800350e:	e001      	b.n	8003514 <HAL_RCC_OscConfig+0x198>
 8003510:	f7ff fbf7 	bl	8002d02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d012      	beq.n	8003542 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fe fe32 	bl	8002184 <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003524:	f7fe fe2e 	bl	8002184 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e2aa      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003536:	f7ff fbf3 	bl	8002d20 <LL_RCC_HSE_IsReady>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f1      	beq.n	8003524 <HAL_RCC_OscConfig+0x1a8>
 8003540:	e013      	b.n	800356a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fe1f 	bl	8002184 <HAL_GetTick>
 8003546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354a:	f7fe fe1b 	bl	8002184 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b64      	cmp	r3, #100	; 0x64
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e297      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 800355c:	f7ff fbe0 	bl	8002d20 <LL_RCC_HSE_IsReady>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f1      	bne.n	800354a <HAL_RCC_OscConfig+0x1ce>
 8003566:	e000      	b.n	800356a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d051      	beq.n	800361a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003576:	f7ff fdb4 	bl	80030e2 <LL_RCC_GetSysClkSource>
 800357a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800357c:	f7ff fe95 	bl	80032aa <LL_RCC_PLL_GetMainSource>
 8003580:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b04      	cmp	r3, #4
 8003586:	d005      	beq.n	8003594 <HAL_RCC_OscConfig+0x218>
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d113      	bne.n	80035b6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d110      	bne.n	80035b6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003594:	f7ff fbf4 	bl	8002d80 <LL_RCC_HSI_IsReady>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_RCC_OscConfig+0x22e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e270      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fbf8 	bl	8002da4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b4:	e031      	b.n	800361a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d019      	beq.n	80035f2 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035be:	f7ff fbc1 	bl	8002d44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c2:	f7fe fddf 	bl	8002184 <HAL_GetTick>
 80035c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ca:	f7fe fddb 	bl	8002184 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e257      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80035dc:	f7ff fbd0 	bl	8002d80 <LL_RCC_HSI_IsReady>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f1      	beq.n	80035ca <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fbda 	bl	8002da4 <LL_RCC_HSI_SetCalibTrimming>
 80035f0:	e013      	b.n	800361a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	f7ff fbb6 	bl	8002d62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe fdc5 	bl	8002184 <HAL_GetTick>
 80035fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035fe:	f7fe fdc1 	bl	8002184 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e23d      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003610:	f7ff fbb6 	bl	8002d80 <LL_RCC_HSI_IsReady>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f1      	bne.n	80035fe <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80a3 	beq.w	800377a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d076      	beq.n	800372a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d046      	beq.n	80036d6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003648:	f7ff fc6d 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d113      	bne.n	800367a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003652:	f7ff fc46 	bl	8002ee2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003656:	f7fe fd95 	bl	8002184 <HAL_GetTick>
 800365a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800365e:	f7fe fd91 	bl	8002184 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e20d      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003670:	f7ff fc59 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f1      	beq.n	800365e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800367a:	f7ff fc66 	bl	8002f4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367e:	f7fe fd81 	bl	8002184 <HAL_GetTick>
 8003682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003686:	f7fe fd7d 	bl	8002184 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b03      	cmp	r3, #3
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1f9      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003698:	f7ff fc79 	bl	8002f8e <LL_RCC_LSI2_IsReady>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f1      	beq.n	8003686 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fc83 	bl	8002fb2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80036ac:	f7ff fc2a 	bl	8002f04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fe fd68 	bl	8002184 <HAL_GetTick>
 80036b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036b8:	f7fe fd64 	bl	8002184 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1e0      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036ca:	f7ff fc2c 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f1      	bne.n	80036b8 <HAL_RCC_OscConfig+0x33c>
 80036d4:	e051      	b.n	800377a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80036d6:	f7ff fc04 	bl	8002ee2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7fe fd53 	bl	8002184 <HAL_GetTick>
 80036de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036e2:	f7fe fd4f 	bl	8002184 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e1cb      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036f4:	f7ff fc17 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0f1      	beq.n	80036e2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80036fe:	f7ff fc35 	bl	8002f6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003702:	e00c      	b.n	800371e <HAL_RCC_OscConfig+0x3a2>
 8003704:	20000004 	.word	0x20000004
 8003708:	20000020 	.word	0x20000020
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800370c:	f7fe fd3a 	bl	8002184 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b03      	cmp	r3, #3
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e1b6      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800371e:	f7ff fc36 	bl	8002f8e <LL_RCC_LSI2_IsReady>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1f1      	bne.n	800370c <HAL_RCC_OscConfig+0x390>
 8003728:	e027      	b.n	800377a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800372a:	f7ff fc1f 	bl	8002f6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7fe fd29 	bl	8002184 <HAL_GetTick>
 8003732:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003734:	e008      	b.n	8003748 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003736:	f7fe fd25 	bl	8002184 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b03      	cmp	r3, #3
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e1a1      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003748:	f7ff fc21 	bl	8002f8e <LL_RCC_LSI2_IsReady>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f1      	bne.n	8003736 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003752:	f7ff fbd7 	bl	8002f04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe fd15 	bl	8002184 <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800375e:	f7fe fd11 	bl	8002184 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e18d      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003770:	f7ff fbd9 	bl	8002f26 <LL_RCC_LSI1_IsReady>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f1      	bne.n	800375e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d05b      	beq.n	800383e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003786:	4bb5      	ldr	r3, [pc, #724]	; (8003a5c <HAL_RCC_OscConfig+0x6e0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d114      	bne.n	80037bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003792:	f7ff fa77 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003796:	f7fe fcf5 	bl	8002184 <HAL_GetTick>
 800379a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379e:	f7fe fcf1 	bl	8002184 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e16d      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b0:	4baa      	ldr	r3, [pc, #680]	; (8003a5c <HAL_RCC_OscConfig+0x6e0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d102      	bne.n	80037ca <HAL_RCC_OscConfig+0x44e>
 80037c4:	f7ff fb37 	bl	8002e36 <LL_RCC_LSE_Enable>
 80037c8:	e00c      	b.n	80037e4 <HAL_RCC_OscConfig+0x468>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b05      	cmp	r3, #5
 80037d0:	d104      	bne.n	80037dc <HAL_RCC_OscConfig+0x460>
 80037d2:	f7ff fb52 	bl	8002e7a <LL_RCC_LSE_EnableBypass>
 80037d6:	f7ff fb2e 	bl	8002e36 <LL_RCC_LSE_Enable>
 80037da:	e003      	b.n	80037e4 <HAL_RCC_OscConfig+0x468>
 80037dc:	f7ff fb3c 	bl	8002e58 <LL_RCC_LSE_Disable>
 80037e0:	f7ff fb5c 	bl	8002e9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d014      	beq.n	8003816 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe fcca 	bl	8002184 <HAL_GetTick>
 80037f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe fcc6 	bl	8002184 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e140      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 800380a:	f7ff fb58 	bl	8002ebe <LL_RCC_LSE_IsReady>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ef      	beq.n	80037f4 <HAL_RCC_OscConfig+0x478>
 8003814:	e013      	b.n	800383e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe fcb5 	bl	8002184 <HAL_GetTick>
 800381a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fe fcb1 	bl	8002184 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e12b      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003834:	f7ff fb43 	bl	8002ebe <LL_RCC_LSE_IsReady>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1ef      	bne.n	800381e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d02c      	beq.n	80038a4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	2b00      	cmp	r3, #0
 8003850:	d014      	beq.n	800387c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003852:	f7ff fabc 	bl	8002dce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003856:	f7fe fc95 	bl	8002184 <HAL_GetTick>
 800385a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800385e:	f7fe fc91 	bl	8002184 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e10d      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003870:	f7ff facf 	bl	8002e12 <LL_RCC_HSI48_IsReady>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0f1      	beq.n	800385e <HAL_RCC_OscConfig+0x4e2>
 800387a:	e013      	b.n	80038a4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800387c:	f7ff fab8 	bl	8002df0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fe fc80 	bl	8002184 <HAL_GetTick>
 8003884:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003888:	f7fe fc7c 	bl	8002184 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0f8      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800389a:	f7ff faba 	bl	8002e12 <LL_RCC_HSI48_IsReady>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f1      	bne.n	8003888 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80ee 	beq.w	8003a8a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ae:	f7ff fc18 	bl	80030e2 <LL_RCC_GetSysClkSource>
 80038b2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	f040 80af 	bne.w	8003a24 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f003 0203 	and.w	r2, r3, #3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d123      	bne.n	800391c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038de:	429a      	cmp	r2, r3
 80038e0:	d11c      	bne.n	800391c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d114      	bne.n	800391c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d10d      	bne.n	800391c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800390a:	429a      	cmp	r2, r3
 800390c:	d106      	bne.n	800391c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003918:	429a      	cmp	r2, r3
 800391a:	d05d      	beq.n	80039d8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	2b0c      	cmp	r3, #12
 8003920:	d058      	beq.n	80039d4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0ab      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003934:	f7ff fc73 	bl	800321e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003938:	f7fe fc24 	bl	8002184 <HAL_GetTick>
 800393c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe fc20 	bl	8002184 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e09c      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1ef      	bne.n	8003940 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003964:	68da      	ldr	r2, [r3, #12]
 8003966:	4b3e      	ldr	r3, [pc, #248]	; (8003a60 <HAL_RCC_OscConfig+0x6e4>)
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003972:	4311      	orrs	r1, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003978:	0212      	lsls	r2, r2, #8
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003980:	4311      	orrs	r1, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003986:	4311      	orrs	r1, r2
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800398c:	430a      	orrs	r2, r1
 800398e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003992:	4313      	orrs	r3, r2
 8003994:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003996:	f7ff fc33 	bl	8003200 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800399a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039aa:	f7fe fbeb 	bl	8002184 <HAL_GetTick>
 80039ae:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b2:	f7fe fbe7 	bl	8002184 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e063      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ef      	beq.n	80039b2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d2:	e05a      	b.n	8003a8a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e059      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d151      	bne.n	8003a8a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039e6:	f7ff fc0b 	bl	8003200 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039fa:	f7fe fbc3 	bl	8002184 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fe fbbf 	bl	8002184 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e03b      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0ef      	beq.n	8003a02 <HAL_RCC_OscConfig+0x686>
 8003a22:	e032      	b.n	8003a8a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	2b0c      	cmp	r3, #12
 8003a28:	d02d      	beq.n	8003a86 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2a:	f7ff fbf8 	bl	800321e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a38:	f023 0303 	bic.w	r3, r3, #3
 8003a3c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a48:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7fe fb97 	bl	8002184 <HAL_GetTick>
 8003a56:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a58:	e00d      	b.n	8003a76 <HAL_RCC_OscConfig+0x6fa>
 8003a5a:	bf00      	nop
 8003a5c:	58000400 	.word	0x58000400
 8003a60:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe fb8e 	bl	8002184 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ef      	bne.n	8003a64 <HAL_RCC_OscConfig+0x6e8>
 8003a84:	e001      	b.n	8003a8a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3734      	adds	r7, #52	; 0x34
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}

08003a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e12d      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b98      	ldr	r3, [pc, #608]	; (8003d0c <HAL_RCC_ClockConfig+0x278>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 0307 	and.w	r3, r3, #7
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d91b      	bls.n	8003aee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b95      	ldr	r3, [pc, #596]	; (8003d0c <HAL_RCC_ClockConfig+0x278>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 0207 	bic.w	r2, r3, #7
 8003abe:	4993      	ldr	r1, [pc, #588]	; (8003d0c <HAL_RCC_ClockConfig+0x278>)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ac6:	f7fe fb5d 	bl	8002184 <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ace:	f7fe fb59 	bl	8002184 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e111      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae0:	4b8a      	ldr	r3, [pc, #552]	; (8003d0c <HAL_RCC_ClockConfig+0x278>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d1ef      	bne.n	8003ace <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fafb 	bl	80030fa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b04:	f7fe fb3e 	bl	8002184 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b0c:	f7fe fb3a 	bl	8002184 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0f2      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b1e:	f7ff fbd0 	bl	80032c2 <LL_RCC_IsActiveFlag_HPRE>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0f1      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d016      	beq.n	8003b62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff faf2 	bl	8003122 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b3e:	f7fe fb21 	bl	8002184 <HAL_GetTick>
 8003b42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b46:	f7fe fb1d 	bl	8002184 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0d5      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b58:	f7ff fbc5 	bl	80032e6 <LL_RCC_IsActiveFlag_C2HPRE>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f1      	beq.n	8003b46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d016      	beq.n	8003b9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff faeb 	bl	800314e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b78:	f7fe fb04 	bl	8002184 <HAL_GetTick>
 8003b7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b80:	f7fe fb00 	bl	8002184 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e0b8      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b92:	f7ff fbbb 	bl	800330c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f1      	beq.n	8003b80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d016      	beq.n	8003bd6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fae5 	bl	800317c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bb2:	f7fe fae7 	bl	8002184 <HAL_GetTick>
 8003bb6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bba:	f7fe fae3 	bl	8002184 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e09b      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bcc:	f7ff fbb1 	bl	8003332 <LL_RCC_IsActiveFlag_PPRE1>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f1      	beq.n	8003bba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d017      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fadb 	bl	80031a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bee:	f7fe fac9 	bl	8002184 <HAL_GetTick>
 8003bf2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bf6:	f7fe fac5 	bl	8002184 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e07d      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c08:	f7ff fba5 	bl	8003356 <LL_RCC_IsActiveFlag_PPRE2>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f1      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d043      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d106      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003c26:	f7ff f87b 	bl	8002d20 <LL_RCC_HSE_IsReady>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d11e      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e067      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c3c:	f7ff fafe 	bl	800323c <LL_RCC_PLL_IsReady>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e05c      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c52:	f7ff f9e3 	bl	800301c <LL_RCC_MSI_IsReady>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d108      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e051      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c60:	f7ff f88e 	bl	8002d80 <LL_RCC_HSI_IsReady>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e04a      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fa21 	bl	80030ba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c78:	f7fe fa84 	bl	8002184 <HAL_GetTick>
 8003c7c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7e:	e00a      	b.n	8003c96 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c80:	f7fe fa80 	bl	8002184 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e036      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	f7ff fa24 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d1ec      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca6:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_RCC_ClockConfig+0x278>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d21b      	bcs.n	8003cec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cb4:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_RCC_ClockConfig+0x278>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 0207 	bic.w	r2, r3, #7
 8003cbc:	4913      	ldr	r1, [pc, #76]	; (8003d0c <HAL_RCC_ClockConfig+0x278>)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cc4:	f7fe fa5e 	bl	8002184 <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ccc:	f7fe fa5a 	bl	8002184 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e012      	b.n	8003d04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HAL_RCC_ClockConfig+0x278>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d1ef      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003cec:	f000 f87e 	bl	8003dec <HAL_RCC_GetHCLKFreq>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_RCC_ClockConfig+0x27c>)
 8003cf4:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003cf6:	f7fe fa51 	bl	800219c <HAL_GetTickPrio>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe f9f3 	bl	80020e8 <HAL_InitTick>
 8003d02:	4603      	mov	r3, r0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	58004000 	.word	0x58004000
 8003d10:	20000004 	.word	0x20000004

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d1a:	f7ff f9e2 	bl	80030e2 <LL_RCC_GetSysClkSource>
 8003d1e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d26:	f7ff f99e 	bl	8003066 <LL_RCC_MSI_GetRange>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	091b      	lsrs	r3, r3, #4
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	4a2b      	ldr	r2, [pc, #172]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	e04b      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d102      	bne.n	8003d48 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	e045      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d10a      	bne.n	8003d64 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d4e:	f7fe ffb7 	bl	8002cc0 <LL_RCC_HSE_IsEnabledDiv2>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d102      	bne.n	8003d5e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d58:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	e03a      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d5e:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	e037      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d64:	f7ff faa1 	bl	80032aa <LL_RCC_PLL_GetMainSource>
 8003d68:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x64>
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d003      	beq.n	8003d7e <HAL_RCC_GetSysClockFreq+0x6a>
 8003d76:	e00d      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d78:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d7a:	60bb      	str	r3, [r7, #8]
        break;
 8003d7c:	e015      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d7e:	f7fe ff9f 	bl	8002cc0 <LL_RCC_HSE_IsEnabledDiv2>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d102      	bne.n	8003d8e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d88:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d8a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d8c:	e00d      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d90:	60bb      	str	r3, [r7, #8]
        break;
 8003d92:	e00a      	b.n	8003daa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d94:	f7ff f967 	bl	8003066 <LL_RCC_MSI_GetRange>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da6:	60bb      	str	r3, [r7, #8]
        break;
 8003da8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003daa:	f7ff fa59 	bl	8003260 <LL_RCC_PLL_GetN>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	fb03 f402 	mul.w	r4, r3, r2
 8003db6:	f7ff fa6c 	bl	8003292 <LL_RCC_PLL_GetDivider>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	fbb4 f4f3 	udiv	r4, r4, r3
 8003dc4:	f7ff fa59 	bl	800327a <LL_RCC_PLL_GetR>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	0f5b      	lsrs	r3, r3, #29
 8003dcc:	3301      	adds	r3, #1
 8003dce:	fbb4 f3f3 	udiv	r3, r4, r3
 8003dd2:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd90      	pop	{r4, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	08008674 	.word	0x08008674
 8003de4:	00f42400 	.word	0x00f42400
 8003de8:	01e84800 	.word	0x01e84800

08003dec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dec:	b598      	push	{r3, r4, r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003df0:	f7ff ff90 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003df4:	4604      	mov	r4, r0
 8003df6:	f7ff f9e9 	bl	80031cc <LL_RCC_GetAHBPrescaler>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	4a03      	ldr	r2, [pc, #12]	; (8003e10 <HAL_RCC_GetHCLKFreq+0x24>)
 8003e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e08:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd98      	pop	{r3, r4, r7, pc}
 8003e10:	08008634 	.word	0x08008634

08003e14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2bb0      	cmp	r3, #176	; 0xb0
 8003e20:	d903      	bls.n	8003e2a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e007      	b.n	8003e3a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	4a11      	ldr	r2, [pc, #68]	; (8003e78 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e38:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003e3a:	f7ff f9d3 	bl	80031e4 <LL_RCC_GetAHB4Prescaler>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	091b      	lsrs	r3, r3, #4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	4a0d      	ldr	r2, [pc, #52]	; (8003e7c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e52:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003e58:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5c:	0c9c      	lsrs	r4, r3, #18
 8003e5e:	f7fe ff21 	bl	8002ca4 <HAL_PWREx_GetVoltageRange>
 8003e62:	4603      	mov	r3, r0
 8003e64:	4619      	mov	r1, r3
 8003e66:	4620      	mov	r0, r4
 8003e68:	f000 f80c 	bl	8003e84 <RCC_SetFlashLatency>
 8003e6c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd90      	pop	{r4, r7, pc}
 8003e76:	bf00      	nop
 8003e78:	08008674 	.word	0x08008674
 8003e7c:	08008634 	.word	0x08008634
 8003e80:	431bde83 	.word	0x431bde83

08003e84 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b093      	sub	sp, #76	; 0x4c
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003e8e:	4b39      	ldr	r3, [pc, #228]	; (8003f74 <RCC_SetFlashLatency+0xf0>)
 8003e90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003e94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003e9a:	4a37      	ldr	r2, [pc, #220]	; (8003f78 <RCC_SetFlashLatency+0xf4>)
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ea2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003ea6:	4b35      	ldr	r3, [pc, #212]	; (8003f7c <RCC_SetFlashLatency+0xf8>)
 8003ea8:	f107 040c 	add.w	r4, r7, #12
 8003eac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ebc:	d11c      	bne.n	8003ef8 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ec2:	e015      	b.n	8003ef0 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ecc:	4413      	add	r3, r2
 8003ece:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d808      	bhi.n	8003eea <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ee6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ee8:	e022      	b.n	8003f30 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eec:	3301      	adds	r3, #1
 8003eee:	643b      	str	r3, [r7, #64]	; 0x40
 8003ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d9e6      	bls.n	8003ec4 <RCC_SetFlashLatency+0x40>
 8003ef6:	e01b      	b.n	8003f30 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003efc:	e015      	b.n	8003f2a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f06:	4413      	add	r3, r2
 8003f08:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d808      	bhi.n	8003f24 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003f20:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003f22:	e005      	b.n	8003f30 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f26:	3301      	adds	r3, #1
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d9e6      	bls.n	8003efe <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <RCC_SetFlashLatency+0xfc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f023 0207 	bic.w	r2, r3, #7
 8003f38:	4911      	ldr	r1, [pc, #68]	; (8003f80 <RCC_SetFlashLatency+0xfc>)
 8003f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f40:	f7fe f920 	bl	8002184 <HAL_GetTick>
 8003f44:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f46:	e008      	b.n	8003f5a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f48:	f7fe f91c 	bl	8002184 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e007      	b.n	8003f6a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f5a:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <RCC_SetFlashLatency+0xfc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d1ef      	bne.n	8003f48 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	374c      	adds	r7, #76	; 0x4c
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd90      	pop	{r4, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	080084c0 	.word	0x080084c0
 8003f78:	080084d0 	.word	0x080084d0
 8003f7c:	080084dc 	.word	0x080084dc
 8003f80:	58004000 	.word	0x58004000

08003f84 <LL_RCC_LSE_IsEnabled>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <LL_RCC_LSE_IsEnabled+0x18>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <LL_RCC_LSE_IsEnabled+0x1a>
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_RCC_LSE_IsReady>:
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d101      	bne.n	8003fc0 <LL_RCC_LSE_IsReady+0x18>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e000      	b.n	8003fc2 <LL_RCC_LSE_IsReady+0x1a>
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <LL_RCC_SetRFWKPClockSource>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fe0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_RCC_SetSMPSClockSource>:
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	f023 0203 	bic.w	r2, r3, #3
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_RCC_SetSMPSPrescaler>:
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4313      	orrs	r3, r2
 800403a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <LL_RCC_SetUSARTClockSource>:
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f023 0203 	bic.w	r2, r3, #3
 800405c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <LL_RCC_SetLPUARTClockSource>:
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800407c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004084:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_SetI2CClockSource>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80040a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	091b      	lsrs	r3, r3, #4
 80040b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80040c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <LL_RCC_SetLPTIMClockSource>:
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	43db      	mvns	r3, r3
 80040f2:	401a      	ands	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	041b      	lsls	r3, r3, #16
 80040f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <LL_RCC_SetSAIClockSource>:
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004122:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <LL_RCC_SetRNGClockSource>:
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800414e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <LL_RCC_SetCLK48ClockSource>:
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800416e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800417a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <LL_RCC_SetUSBClockSource>:
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7ff ffe3 	bl	8004166 <LL_RCC_SetCLK48ClockSource>
}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <LL_RCC_SetADCClockSource>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80041b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <LL_RCC_SetRTCClockSource>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_RCC_GetRTCClockSource>:
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <LL_RCC_ForceBackupDomainReset>:
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <LL_RCC_ReleaseBackupDomainReset>:
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <LL_RCC_PLLSAI1_Enable>:
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004270:	6013      	str	r3, [r2, #0]
}
 8004272:	bf00      	nop
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_RCC_PLLSAI1_Disable>:
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800428a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800428e:	6013      	str	r3, [r2, #0]
}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_RCC_PLLSAI1_IsReady>:
{
 800429a:	b480      	push	{r7}
 800429c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ac:	d101      	bne.n	80042b2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b088      	sub	sp, #32
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80042c6:	2300      	movs	r3, #0
 80042c8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80042ca:	2300      	movs	r3, #0
 80042cc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d034      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e2:	d021      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80042e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042e8:	d81b      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ee:	d01d      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80042f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f4:	d815      	bhi.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fe:	d110      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800430a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004310:	e00d      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f000 f947 	bl	80045aa <RCCEx_PLLSAI1_ConfigNP>
 800431c:	4603      	mov	r3, r0
 800431e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004320:	e005      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	77fb      	strb	r3, [r7, #31]
        break;
 8004326:	e002      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800432c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432e:	7ffb      	ldrb	r3, [r7, #31]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fee8 	bl	800410e <LL_RCC_SetSAIClockSource>
 800433e:	e001      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7ffb      	ldrb	r3, [r7, #31]
 8004342:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434c:	2b00      	cmp	r3, #0
 800434e:	d046      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004350:	f7ff ff56 	bl	8004200 <LL_RCC_GetRTCClockSource>
 8004354:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	429a      	cmp	r2, r3
 800435e:	d03c      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004360:	f7fe fc90 	bl	8002c84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d105      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff30 	bl	80041d4 <LL_RCC_SetRTCClockSource>
 8004374:	e02e      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800437e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004380:	f7ff ff4b 	bl	800421a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004384:	f7ff ff5a 	bl	800423c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80043a0:	f7ff fdf0 	bl	8003f84 <LL_RCC_LSE_IsEnabled>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d114      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043aa:	f7fd feeb 	bl	8002184 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80043b0:	e00b      	b.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fd fee7 	bl	8002184 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d902      	bls.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	77fb      	strb	r3, [r7, #31]
              break;
 80043c8:	e004      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80043ca:	f7ff fded 	bl	8003fa8 <LL_RCC_LSE_IsReady>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d1ee      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	77bb      	strb	r3, [r7, #30]
 80043d8:	e001      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d004      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fe2a 	bl	8004048 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d004      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fe35 	bl	8004074 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	d004      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fe5d 	bl	80040da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d004      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fe52 	bl	80040da <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fe2a 	bl	80040a0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d004      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fe1f 	bl	80040a0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d022      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fe8d 	bl	8004192 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800447c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004480:	d107      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004490:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004496:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800449a:	d10b      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 f8dd 	bl	8004660 <RCCEx_PLLSAI1_ConfigNQ>
 80044a6:	4603      	mov	r3, r0
 80044a8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80044b0:	7ffb      	ldrb	r3, [r7, #31]
 80044b2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d02b      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d008      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044d2:	d003      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fe2a 	bl	800413a <LL_RCC_SetRNGClockSource>
 80044e6:	e00a      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x240>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f0:	60fb      	str	r3, [r7, #12]
 80044f2:	2000      	movs	r0, #0
 80044f4:	f7ff fe21 	bl	800413a <LL_RCC_SetRNGClockSource>
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff fe34 	bl	8004166 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004506:	d107      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004512:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004516:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d022      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fe3d 	bl	80041a8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004536:	d107      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004546:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004550:	d10b      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3304      	adds	r3, #4
 8004556:	4618      	mov	r0, r3
 8004558:	f000 f8dd 	bl	8004716 <RCCEx_PLLSAI1_ConfigNR>
 800455c:	4603      	mov	r3, r0
 800455e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004560:	7ffb      	ldrb	r3, [r7, #31]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004566:	7ffb      	ldrb	r3, [r7, #31]
 8004568:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fd26 	bl	8003fcc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d009      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fd45 	bl	8004020 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fd2c 	bl	8003ff8 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80045a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}

080045aa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80045b6:	f7ff fe61 	bl	800427c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80045ba:	f7fd fde3 	bl	8002184 <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045c0:	e009      	b.n	80045d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c2:	f7fd fddf 	bl	8002184 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d902      	bls.n	80045d6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	73fb      	strb	r3, [r7, #15]
      break;
 80045d4:	e004      	b.n	80045e0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045d6:	f7ff fe60 	bl	800429a <LL_RCC_PLLSAI1_IsReady>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1f0      	bne.n	80045c2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d137      	bne.n	8004656 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80045e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	021b      	lsls	r3, r3, #8
 80045f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045fa:	4313      	orrs	r3, r2
 80045fc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80045fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004610:	4313      	orrs	r3, r2
 8004612:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004614:	f7ff fe23 	bl	800425e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004618:	f7fd fdb4 	bl	8002184 <HAL_GetTick>
 800461c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800461e:	e009      	b.n	8004634 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004620:	f7fd fdb0 	bl	8002184 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	73fb      	strb	r3, [r7, #15]
        break;
 8004632:	e004      	b.n	800463e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004634:	f7ff fe31 	bl	800429a <LL_RCC_PLLSAI1_IsReady>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d1f0      	bne.n	8004620 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d108      	bne.n	8004656 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004652:	4313      	orrs	r3, r2
 8004654:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004656:	7bfb      	ldrb	r3, [r7, #15]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800466c:	f7ff fe06 	bl	800427c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004670:	f7fd fd88 	bl	8002184 <HAL_GetTick>
 8004674:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004676:	e009      	b.n	800468c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004678:	f7fd fd84 	bl	8002184 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d902      	bls.n	800468c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	73fb      	strb	r3, [r7, #15]
      break;
 800468a:	e004      	b.n	8004696 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800468c:	f7ff fe05 	bl	800429a <LL_RCC_PLLSAI1_IsReady>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d137      	bne.n	800470c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800469c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	021b      	lsls	r3, r3, #8
 80046ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046b0:	4313      	orrs	r3, r2
 80046b2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c6:	4313      	orrs	r3, r2
 80046c8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80046ca:	f7ff fdc8 	bl	800425e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ce:	f7fd fd59 	bl	8002184 <HAL_GetTick>
 80046d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046d4:	e009      	b.n	80046ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d6:	f7fd fd55 	bl	8002184 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d902      	bls.n	80046ea <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	73fb      	strb	r3, [r7, #15]
        break;
 80046e8:	e004      	b.n	80046f4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046ea:	f7ff fdd6 	bl	800429a <LL_RCC_PLLSAI1_IsReady>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d1f0      	bne.n	80046d6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d108      	bne.n	800470c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80046fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004708:	4313      	orrs	r3, r2
 800470a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004722:	f7ff fdab 	bl	800427c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004726:	f7fd fd2d 	bl	8002184 <HAL_GetTick>
 800472a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800472c:	e009      	b.n	8004742 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800472e:	f7fd fd29 	bl	8002184 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d902      	bls.n	8004742 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	73fb      	strb	r3, [r7, #15]
      break;
 8004740:	e004      	b.n	800474c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004742:	f7ff fdaa 	bl	800429a <LL_RCC_PLLSAI1_IsReady>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1f0      	bne.n	800472e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d137      	bne.n	80047c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004766:	4313      	orrs	r3, r2
 8004768:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800476a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800477c:	4313      	orrs	r3, r2
 800477e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004780:	f7ff fd6d 	bl	800425e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004784:	f7fd fcfe 	bl	8002184 <HAL_GetTick>
 8004788:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800478a:	e009      	b.n	80047a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800478c:	f7fd fcfa 	bl	8002184 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d902      	bls.n	80047a0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	73fb      	strb	r3, [r7, #15]
        break;
 800479e:	e004      	b.n	80047aa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80047a0:	f7ff fd7b 	bl	800429a <LL_RCC_PLLSAI1_IsReady>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d1f0      	bne.n	800478c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d108      	bne.n	80047c2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80047b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b4:	691a      	ldr	r2, [r3, #16]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047be:	4313      	orrs	r3, r2
 80047c0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e090      	b.n	8004900 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fd fa4c 	bl	8001c90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	22ca      	movs	r2, #202	; 0xca
 8004806:	625a      	str	r2, [r3, #36]	; 0x24
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2253      	movs	r2, #83	; 0x53
 800480e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f89f 	bl	8004954 <RTC_EnterInitMode>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	22ff      	movs	r2, #255	; 0xff
 8004822:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2204      	movs	r2, #4
 8004828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e067      	b.n	8004900 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800483e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004842:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6899      	ldr	r1, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68d2      	ldr	r2, [r2, #12]
 800486a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	041a      	lsls	r2, r3, #16
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800488e:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0203 	bic.w	r2, r2, #3
 800489e:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	69da      	ldr	r2, [r3, #28]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f003 0320 	and.w	r3, r3, #32
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d113      	bne.n	80048ee <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f81e 	bl	8004908 <HAL_RTC_WaitForSynchro>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00d      	beq.n	80048ee <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	22ff      	movs	r2, #255	; 0xff
 80048d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2204      	movs	r2, #4
 80048de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e008      	b.n	8004900 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	22ff      	movs	r2, #255	; 0xff
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
  }
}
 8004900:	4618      	mov	r0, r3
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800491e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004920:	f7fd fc30 	bl	8002184 <HAL_GetTick>
 8004924:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004926:	e009      	b.n	800493c <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004928:	f7fd fc2c 	bl	8002184 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004936:	d901      	bls.n	800493c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e007      	b.n	800494c <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0ee      	beq.n	8004928 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b00      	cmp	r3, #0
 8004968:	d119      	bne.n	800499e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f04f 32ff 	mov.w	r2, #4294967295
 8004972:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004974:	f7fd fc06 	bl	8002184 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800497a:	e009      	b.n	8004990 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800497c:	f7fd fc02 	bl	8002184 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800498a:	d901      	bls.n	8004990 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e007      	b.n	80049a0 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ee      	beq.n	800497c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_RTCEx_EnableBypassShadow+0x16>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e024      	b.n	8004a08 <HAL_RTCEx_EnableBypassShadow+0x60>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	22ca      	movs	r2, #202	; 0xca
 80049d4:	625a      	str	r2, [r3, #36]	; 0x24
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2253      	movs	r2, #83	; 0x53
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0220 	orr.w	r2, r2, #32
 80049ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	22ff      	movs	r2, #255	; 0xff
 80049f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d118      	bne.n	8004a76 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d013      	beq.n	8004a76 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d104      	bne.n	8004a62 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 81fb 	beq.w	8004e62 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	4798      	blx	r3
      }
      return;
 8004a74:	e1f5      	b.n	8004e62 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 80ef 	beq.w	8004c5c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4b73      	ldr	r3, [pc, #460]	; (8004c50 <HAL_UART_IRQHandler+0x23c>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4b72      	ldr	r3, [pc, #456]	; (8004c54 <HAL_UART_IRQHandler+0x240>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 80e4 	beq.w	8004c5c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d010      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xac>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00b      	beq.n	8004ac0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2201      	movs	r2, #1
 8004aae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ab6:	f043 0201 	orr.w	r2, r3, #1
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d010      	beq.n	8004aec <HAL_UART_IRQHandler+0xd8>
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00b      	beq.n	8004aec <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae2:	f043 0204 	orr.w	r2, r3, #4
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f003 0304 	and.w	r3, r3, #4
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d010      	beq.n	8004b18 <HAL_UART_IRQHandler+0x104>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2204      	movs	r2, #4
 8004b06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b0e:	f043 0202 	orr.w	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d015      	beq.n	8004b4e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4b48      	ldr	r3, [pc, #288]	; (8004c50 <HAL_UART_IRQHandler+0x23c>)
 8004b30:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2208      	movs	r2, #8
 8004b3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b44:	f043 0208 	orr.w	r2, r3, #8
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d011      	beq.n	8004b7c <HAL_UART_IRQHandler+0x168>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b72:	f043 0220 	orr.w	r2, r3, #32
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 816f 	beq.w	8004e66 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d011      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d007      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bbc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc8:	2b40      	cmp	r3, #64	; 0x40
 8004bca:	d004      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d031      	beq.n	8004c3a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 f970 	bl	8004ebc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d123      	bne.n	8004c32 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d013      	beq.n	8004c2a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c06:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <HAL_UART_IRQHandler+0x244>)
 8004c08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd fce0 	bl	80025d4 <HAL_DMA_Abort_IT>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d017      	beq.n	8004c4a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	e00f      	b.n	8004c4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f930 	bl	8004e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	e00b      	b.n	8004c4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f92c 	bl	8004e90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	e007      	b.n	8004c4a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f928 	bl	8004e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004c48:	e10d      	b.n	8004e66 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	bf00      	nop
    return;
 8004c4c:	e10b      	b.n	8004e66 <HAL_UART_IRQHandler+0x452>
 8004c4e:	bf00      	nop
 8004c50:	10000001 	.word	0x10000001
 8004c54:	04000120 	.word	0x04000120
 8004c58:	08004f21 	.word	0x08004f21

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	f040 80ab 	bne.w	8004dbc <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80a5 	beq.w	8004dbc <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 809f 	beq.w	8004dbc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2210      	movs	r2, #16
 8004c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d155      	bne.n	8004d40 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8004c9e:	893b      	ldrh	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80e2 	beq.w	8004e6a <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cac:	893a      	ldrh	r2, [r7, #8]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	f080 80db 	bcs.w	8004e6a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	893a      	ldrh	r2, [r7, #8]
 8004cb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d12b      	bne.n	8004d24 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cda:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfa:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0210 	bic.w	r2, r2, #16
 8004d18:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fd fbf9 	bl	8002516 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f8b3 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d3e:	e094      	b.n	8004e6a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8087 	beq.w	8004e6e <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8004d60:	897b      	ldrh	r3, [r7, #10]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 8083 	beq.w	8004e6e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d76:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0210 	bic.w	r2, r2, #16
 8004dae:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004db0:	897b      	ldrh	r3, [r7, #10]
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f875 	bl	8004ea4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dba:	e058      	b.n	8004e6e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00d      	beq.n	8004de2 <HAL_UART_IRQHandler+0x3ce>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f8d0 	bl	8004f80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004de0:	e048      	b.n	8004e74 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d012      	beq.n	8004e12 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d104      	bne.n	8004e00 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d034      	beq.n	8004e72 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	4798      	blx	r3
    }
    return;
 8004e10:	e02f      	b.n	8004e72 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d008      	beq.n	8004e2e <HAL_UART_IRQHandler+0x41a>
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f890 	bl	8004f4c <UART_EndTransmit_IT>
    return;
 8004e2c:	e022      	b.n	8004e74 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_UART_IRQHandler+0x436>
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d003      	beq.n	8004e4a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f8b0 	bl	8004fa8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e48:	e014      	b.n	8004e74 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00f      	beq.n	8004e74 <HAL_UART_IRQHandler+0x460>
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da0c      	bge.n	8004e74 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f89a 	bl	8004f94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e60:	e008      	b.n	8004e74 <HAL_UART_IRQHandler+0x460>
      return;
 8004e62:	bf00      	nop
 8004e64:	e006      	b.n	8004e74 <HAL_UART_IRQHandler+0x460>
    return;
 8004e66:	bf00      	nop
 8004e68:	e004      	b.n	8004e74 <HAL_UART_IRQHandler+0x460>
      return;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <HAL_UART_IRQHandler+0x460>
      return;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <HAL_UART_IRQHandler+0x460>
    return;
 8004e72:	bf00      	nop
  }
}
 8004e74:	3720      	adds	r7, #32
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop

08004e7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	460b      	mov	r3, r1
 8004eae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ed2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	6812      	ldr	r2, [r2, #0]
 8004ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d107      	bne.n	8004f00 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0210 	bic.w	r2, r2, #16
 8004efe:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2220      	movs	r2, #32
 8004f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f3e:	68f8      	ldr	r0, [r7, #12]
 8004f40:	f7ff ffa6 	bl	8004e90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f62:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff ff82 	bl	8004e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f78:	bf00      	nop
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004f9c:	bf00      	nop
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004fc6:	f107 0308 	add.w	r3, r7, #8
 8004fca:	2218      	movs	r2, #24
 8004fcc:	2100      	movs	r1, #0
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f97c 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8004fd4:	233f      	movs	r3, #63	; 0x3f
 8004fd6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8004fd8:	2381      	movs	r3, #129	; 0x81
 8004fda:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004fdc:	1dfb      	adds	r3, r7, #7
 8004fde:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004fe4:	f107 0308 	add.w	r3, r7, #8
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f001 f832 	bl	8006054 <hci_send_req>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da01      	bge.n	8004ffa <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004ff6:	23ff      	movs	r3, #255	; 0xff
 8004ff8:	e000      	b.n	8004ffc <aci_gap_set_non_discoverable+0x40>
  return status;
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3720      	adds	r7, #32
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8005004:	b5b0      	push	{r4, r5, r7, lr}
 8005006:	b0ce      	sub	sp, #312	; 0x138
 8005008:	af00      	add	r7, sp, #0
 800500a:	4605      	mov	r5, r0
 800500c:	460c      	mov	r4, r1
 800500e:	4610      	mov	r0, r2
 8005010:	4619      	mov	r1, r3
 8005012:	1dfb      	adds	r3, r7, #7
 8005014:	462a      	mov	r2, r5
 8005016:	701a      	strb	r2, [r3, #0]
 8005018:	1d3b      	adds	r3, r7, #4
 800501a:	4622      	mov	r2, r4
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	1cbb      	adds	r3, r7, #2
 8005020:	4602      	mov	r2, r0
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	1dbb      	adds	r3, r7, #6
 8005026:	460a      	mov	r2, r1
 8005028:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800502a:	f107 0310 	add.w	r3, r7, #16
 800502e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005032:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005036:	3308      	adds	r3, #8
 8005038:	f107 0210 	add.w	r2, r7, #16
 800503c:	4413      	add	r3, r2
 800503e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005042:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005046:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800504a:	4413      	add	r3, r2
 800504c:	3309      	adds	r3, #9
 800504e:	f107 0210 	add.w	r2, r7, #16
 8005052:	4413      	add	r3, r2
 8005054:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005058:	f107 030f 	add.w	r3, r7, #15
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005066:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800506a:	1dfa      	adds	r2, r7, #7
 800506c:	7812      	ldrb	r2, [r2, #0]
 800506e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005074:	3301      	adds	r3, #1
 8005076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800507a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800507e:	1d3a      	adds	r2, r7, #4
 8005080:	8812      	ldrh	r2, [r2, #0]
 8005082:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005086:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800508a:	3302      	adds	r3, #2
 800508c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005090:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005094:	1cba      	adds	r2, r7, #2
 8005096:	8812      	ldrh	r2, [r2, #0]
 8005098:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800509c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050a0:	3302      	adds	r3, #2
 80050a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80050a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050aa:	1dba      	adds	r2, r7, #6
 80050ac:	7812      	ldrb	r2, [r2, #0]
 80050ae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80050b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050b4:	3301      	adds	r3, #1
 80050b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80050ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050be:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80050c2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80050c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050c8:	3301      	adds	r3, #1
 80050ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80050ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050d2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80050d6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80050d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050dc:	3301      	adds	r3, #1
 80050de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80050e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050e6:	3308      	adds	r3, #8
 80050e8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80050ec:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80050f0:	4618      	mov	r0, r3
 80050f2:	f001 f8db 	bl	80062ac <Osal_MemCpy>
    index_input += Local_Name_Length;
 80050f6:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80050fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80050fe:	4413      	add	r3, r2
 8005100:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005104:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005108:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800510c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800510e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005112:	3301      	adds	r3, #1
 8005114:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005118:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800511c:	3301      	adds	r3, #1
 800511e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005122:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005126:	4618      	mov	r0, r3
 8005128:	f001 f8c0 	bl	80062ac <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800512c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005130:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005134:	4413      	add	r3, r2
 8005136:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800513a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800513e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005142:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005148:	3302      	adds	r3, #2
 800514a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800514e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005152:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005156:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800515c:	3302      	adds	r3, #2
 800515e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005166:	2218      	movs	r2, #24
 8005168:	2100      	movs	r1, #0
 800516a:	4618      	mov	r0, r3
 800516c:	f001 f8ae 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005170:	233f      	movs	r3, #63	; 0x3f
 8005172:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005176:	2383      	movs	r3, #131	; 0x83
 8005178:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800517c:	f107 0310 	add.w	r3, r7, #16
 8005180:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005188:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800518c:	f107 030f 	add.w	r3, r7, #15
 8005190:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005194:	2301      	movs	r3, #1
 8005196:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800519a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 ff57 	bl	8006054 <hci_send_req>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da01      	bge.n	80051b0 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 80051ac:	23ff      	movs	r3, #255	; 0xff
 80051ae:	e002      	b.n	80051b6 <aci_gap_set_discoverable+0x1b2>
  return status;
 80051b0:	f107 030f 	add.w	r3, r7, #15
 80051b4:	781b      	ldrb	r3, [r3, #0]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80051bc:	46bd      	mov	sp, r7
 80051be:	bdb0      	pop	{r4, r5, r7, pc}

080051c0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b0cc      	sub	sp, #304	; 0x130
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4602      	mov	r2, r0
 80051c8:	1dfb      	adds	r3, r7, #7
 80051ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80051cc:	f107 0310 	add.w	r3, r7, #16
 80051d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80051d4:	f107 030f 	add.w	r3, r7, #15
 80051d8:	2200      	movs	r2, #0
 80051da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80051dc:	2300      	movs	r3, #0
 80051de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80051e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e6:	1dfa      	adds	r2, r7, #7
 80051e8:	7812      	ldrb	r2, [r2, #0]
 80051ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80051ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051f0:	3301      	adds	r3, #1
 80051f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051fa:	2218      	movs	r2, #24
 80051fc:	2100      	movs	r1, #0
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 f864 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005204:	233f      	movs	r3, #63	; 0x3f
 8005206:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800520a:	2385      	movs	r3, #133	; 0x85
 800520c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005210:	f107 0310 	add.w	r3, r7, #16
 8005214:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005218:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800521c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005220:	f107 030f 	add.w	r3, r7, #15
 8005224:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005228:	2301      	movs	r3, #1
 800522a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800522e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005232:	2100      	movs	r1, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f000 ff0d 	bl	8006054 <hci_send_req>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	da01      	bge.n	8005244 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8005240:	23ff      	movs	r3, #255	; 0xff
 8005242:	e002      	b.n	800524a <aci_gap_set_io_capability+0x8a>
  return status;
 8005244:	f107 030f 	add.w	r3, r7, #15
 8005248:	781b      	ldrb	r3, [r3, #0]
}
 800524a:	4618      	mov	r0, r3
 800524c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005254:	b5b0      	push	{r4, r5, r7, lr}
 8005256:	b0cc      	sub	sp, #304	; 0x130
 8005258:	af00      	add	r7, sp, #0
 800525a:	4605      	mov	r5, r0
 800525c:	460c      	mov	r4, r1
 800525e:	4610      	mov	r0, r2
 8005260:	4619      	mov	r1, r3
 8005262:	1dfb      	adds	r3, r7, #7
 8005264:	462a      	mov	r2, r5
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	1dbb      	adds	r3, r7, #6
 800526a:	4622      	mov	r2, r4
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	1d7b      	adds	r3, r7, #5
 8005270:	4602      	mov	r2, r0
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	460a      	mov	r2, r1
 8005278:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800527a:	f107 0310 	add.w	r3, r7, #16
 800527e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005282:	f107 030f 	add.w	r3, r7, #15
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005294:	1dfa      	adds	r2, r7, #7
 8005296:	7812      	ldrb	r2, [r2, #0]
 8005298:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800529a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800529e:	3301      	adds	r3, #1
 80052a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80052a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a8:	1dba      	adds	r2, r7, #6
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80052ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052b2:	3301      	adds	r3, #1
 80052b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 80052b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052bc:	1d7a      	adds	r2, r7, #5
 80052be:	7812      	ldrb	r2, [r2, #0]
 80052c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80052c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052c6:	3301      	adds	r3, #1
 80052c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80052cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d0:	1d3a      	adds	r2, r7, #4
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80052d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052da:	3301      	adds	r3, #1
 80052dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80052e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e4:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80052e8:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80052ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052ee:	3301      	adds	r3, #1
 80052f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80052f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f8:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80052fc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80052fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005302:	3301      	adds	r3, #1
 8005304:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005308:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005310:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005312:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005316:	3301      	adds	r3, #1
 8005318:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800531c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005320:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005324:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005328:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800532c:	3304      	adds	r3, #4
 800532e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005336:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800533a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800533c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005340:	3301      	adds	r3, #1
 8005342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800534a:	2218      	movs	r2, #24
 800534c:	2100      	movs	r1, #0
 800534e:	4618      	mov	r0, r3
 8005350:	f000 ffbc 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005354:	233f      	movs	r3, #63	; 0x3f
 8005356:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800535a:	2386      	movs	r3, #134	; 0x86
 800535c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005360:	f107 0310 	add.w	r3, r7, #16
 8005364:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005368:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800536c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005370:	f107 030f 	add.w	r3, r7, #15
 8005374:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005378:	2301      	movs	r3, #1
 800537a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800537e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fe65 	bl	8006054 <hci_send_req>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	da01      	bge.n	8005394 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8005390:	23ff      	movs	r3, #255	; 0xff
 8005392:	e002      	b.n	800539a <aci_gap_set_authentication_requirement+0x146>
  return status;
 8005394:	f107 030f 	add.w	r3, r7, #15
 8005398:	781b      	ldrb	r3, [r3, #0]
}
 800539a:	4618      	mov	r0, r3
 800539c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bdb0      	pop	{r4, r5, r7, pc}

080053a4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b0cd      	sub	sp, #308	; 0x134
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	4611      	mov	r1, r2
 80053b0:	463a      	mov	r2, r7
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	1dfb      	adds	r3, r7, #7
 80053b6:	4622      	mov	r2, r4
 80053b8:	701a      	strb	r2, [r3, #0]
 80053ba:	1dbb      	adds	r3, r7, #6
 80053bc:	4602      	mov	r2, r0
 80053be:	701a      	strb	r2, [r3, #0]
 80053c0:	1d7b      	adds	r3, r7, #5
 80053c2:	460a      	mov	r2, r1
 80053c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80053c6:	f107 0310 	add.w	r3, r7, #16
 80053ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80053ce:	f107 0308 	add.w	r3, r7, #8
 80053d2:	2207      	movs	r2, #7
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 ff78 	bl	80062cc <Osal_MemSet>
  int index_input = 0;
 80053dc:	2300      	movs	r3, #0
 80053de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80053e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e6:	1dfa      	adds	r2, r7, #7
 80053e8:	7812      	ldrb	r2, [r2, #0]
 80053ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80053ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053f0:	3301      	adds	r3, #1
 80053f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80053f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fa:	1dba      	adds	r2, r7, #6
 80053fc:	7812      	ldrb	r2, [r2, #0]
 80053fe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005404:	3301      	adds	r3, #1
 8005406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800540a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540e:	1d7a      	adds	r2, r7, #5
 8005410:	7812      	ldrb	r2, [r2, #0]
 8005412:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005414:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005418:	3301      	adds	r3, #1
 800541a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800541e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005422:	2218      	movs	r2, #24
 8005424:	2100      	movs	r1, #0
 8005426:	4618      	mov	r0, r3
 8005428:	f000 ff50 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800542c:	233f      	movs	r3, #63	; 0x3f
 800542e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8005432:	238a      	movs	r3, #138	; 0x8a
 8005434:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005438:	f107 0310 	add.w	r3, r7, #16
 800543c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005444:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005448:	f107 0308 	add.w	r3, r7, #8
 800544c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005450:	2307      	movs	r3, #7
 8005452:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005456:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800545a:	2100      	movs	r1, #0
 800545c:	4618      	mov	r0, r3
 800545e:	f000 fdf9 	bl	8006054 <hci_send_req>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	da01      	bge.n	800546c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8005468:	23ff      	movs	r3, #255	; 0xff
 800546a:	e021      	b.n	80054b0 <aci_gap_init+0x10c>
  if ( resp.Status )
 800546c:	f107 0308 	add.w	r3, r7, #8
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <aci_gap_init+0xda>
    return resp.Status;
 8005476:	f107 0308 	add.w	r3, r7, #8
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	e018      	b.n	80054b0 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800547e:	f107 0308 	add.w	r3, r7, #8
 8005482:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005486:	b29a      	uxth	r2, r3
 8005488:	463b      	mov	r3, r7
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800548e:	f107 0308 	add.w	r3, r7, #8
 8005492:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005496:	b29a      	uxth	r2, r3
 8005498:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800549c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800549e:	f107 0308 	add.w	r3, r7, #8
 80054a2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80054ac:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd90      	pop	{r4, r7, pc}

080054ba <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b0cc      	sub	sp, #304	; 0x130
 80054be:	af00      	add	r7, sp, #0
 80054c0:	4602      	mov	r2, r0
 80054c2:	463b      	mov	r3, r7
 80054c4:	6019      	str	r1, [r3, #0]
 80054c6:	1dfb      	adds	r3, r7, #7
 80054c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80054ca:	f107 0310 	add.w	r3, r7, #16
 80054ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80054d2:	f107 030f 	add.w	r3, r7, #15
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80054da:	2300      	movs	r3, #0
 80054dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80054e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054e4:	1dfa      	adds	r2, r7, #7
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80054ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80054ee:	3301      	adds	r3, #1
 80054f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80054f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f8:	1c58      	adds	r0, r3, #1
 80054fa:	1dfb      	adds	r3, r7, #7
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	463b      	mov	r3, r7
 8005500:	6819      	ldr	r1, [r3, #0]
 8005502:	f000 fed3 	bl	80062ac <Osal_MemCpy>
  index_input += AdvDataLen;
 8005506:	1dfb      	adds	r3, r7, #7
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800550e:	4413      	add	r3, r2
 8005510:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005514:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005518:	2218      	movs	r2, #24
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fed5 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005522:	233f      	movs	r3, #63	; 0x3f
 8005524:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8005528:	238e      	movs	r3, #142	; 0x8e
 800552a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800552e:	f107 0310 	add.w	r3, r7, #16
 8005532:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005536:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800553a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800553e:	f107 030f 	add.w	r3, r7, #15
 8005542:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005546:	2301      	movs	r3, #1
 8005548:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800554c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005550:	2100      	movs	r1, #0
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fd7e 	bl	8006054 <hci_send_req>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	da01      	bge.n	8005562 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800555e:	23ff      	movs	r3, #255	; 0xff
 8005560:	e002      	b.n	8005568 <aci_gap_update_adv_data+0xae>
  return status;
 8005562:	f107 030f 	add.w	r3, r7, #15
 8005566:	781b      	ldrb	r3, [r3, #0]
}
 8005568:	4618      	mov	r0, r3
 800556a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b088      	sub	sp, #32
 8005576:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800557c:	f107 0308 	add.w	r3, r7, #8
 8005580:	2218      	movs	r2, #24
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fea1 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800558a:	233f      	movs	r3, #63	; 0x3f
 800558c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800558e:	2392      	movs	r3, #146	; 0x92
 8005590:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005592:	1dfb      	adds	r3, r7, #7
 8005594:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005596:	2301      	movs	r3, #1
 8005598:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800559a:	f107 0308 	add.w	r3, r7, #8
 800559e:	2100      	movs	r1, #0
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 fd57 	bl	8006054 <hci_send_req>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da01      	bge.n	80055b0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80055ac:	23ff      	movs	r3, #255	; 0xff
 80055ae:	e000      	b.n	80055b2 <aci_gap_configure_whitelist+0x40>
  return status;
 80055b0:	79fb      	ldrb	r3, [r7, #7]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b0cc      	sub	sp, #304	; 0x130
 80055be:	af00      	add	r7, sp, #0
 80055c0:	4602      	mov	r2, r0
 80055c2:	1dbb      	adds	r3, r7, #6
 80055c4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80055c6:	f107 0310 	add.w	r3, r7, #16
 80055ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80055ce:	f107 030f 	add.w	r3, r7, #15
 80055d2:	2200      	movs	r2, #0
 80055d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80055dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e0:	1dba      	adds	r2, r7, #6
 80055e2:	8812      	ldrh	r2, [r2, #0]
 80055e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80055e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80055ea:	3302      	adds	r3, #2
 80055ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80055f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055f4:	2218      	movs	r2, #24
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 fe67 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 80055fe:	233f      	movs	r3, #63	; 0x3f
 8005600:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8005604:	2395      	movs	r3, #149	; 0x95
 8005606:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800560a:	f107 0310 	add.w	r3, r7, #16
 800560e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005616:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800561a:	f107 030f 	add.w	r3, r7, #15
 800561e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005622:	2301      	movs	r3, #1
 8005624:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fd10 	bl	8006054 <hci_send_req>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	da01      	bge.n	800563e <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800563a:	23ff      	movs	r3, #255	; 0xff
 800563c:	e002      	b.n	8005644 <aci_gap_allow_rebond+0x8a>
  return status;
 800563e:	f107 030f 	add.w	r3, r7, #15
 8005642:	781b      	ldrb	r3, [r3, #0]
}
 8005644:	4618      	mov	r0, r3
 8005646:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b0cc      	sub	sp, #304	; 0x130
 8005652:	af00      	add	r7, sp, #0
 8005654:	4602      	mov	r2, r0
 8005656:	1dbb      	adds	r3, r7, #6
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	1d7b      	adds	r3, r7, #5
 800565c:	460a      	mov	r2, r1
 800565e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005660:	f107 0310 	add.w	r3, r7, #16
 8005664:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005668:	f107 030f 	add.w	r3, r7, #15
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567a:	1dba      	adds	r2, r7, #6
 800567c:	8812      	ldrh	r2, [r2, #0]
 800567e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005680:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005684:	3302      	adds	r3, #2
 8005686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800568a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568e:	1d7a      	adds	r2, r7, #5
 8005690:	7812      	ldrb	r2, [r2, #0]
 8005692:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005698:	3301      	adds	r3, #1
 800569a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800569e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056a2:	2218      	movs	r2, #24
 80056a4:	2100      	movs	r1, #0
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fe10 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 80056ac:	233f      	movs	r3, #63	; 0x3f
 80056ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80056b2:	23a5      	movs	r3, #165	; 0xa5
 80056b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80056b8:	f107 0310 	add.w	r3, r7, #16
 80056bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80056c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80056c8:	f107 030f 	add.w	r3, r7, #15
 80056cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f000 fcb9 	bl	8006054 <hci_send_req>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	da01      	bge.n	80056ec <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 80056e8:	23ff      	movs	r3, #255	; 0xff
 80056ea:	e002      	b.n	80056f2 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 80056ec:	f107 030f 	add.w	r3, r7, #15
 80056f0:	781b      	ldrb	r3, [r3, #0]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005706:	f107 0308 	add.w	r3, r7, #8
 800570a:	2218      	movs	r2, #24
 800570c:	2100      	movs	r1, #0
 800570e:	4618      	mov	r0, r3
 8005710:	f000 fddc 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005714:	233f      	movs	r3, #63	; 0x3f
 8005716:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005718:	f240 1301 	movw	r3, #257	; 0x101
 800571c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800571e:	1dfb      	adds	r3, r7, #7
 8005720:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005722:	2301      	movs	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005726:	f107 0308 	add.w	r3, r7, #8
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fc91 	bl	8006054 <hci_send_req>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	da01      	bge.n	800573c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005738:	23ff      	movs	r3, #255	; 0xff
 800573a:	e000      	b.n	800573e <aci_gatt_init+0x42>
  return status;
 800573c:	79fb      	ldrb	r3, [r7, #7]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3720      	adds	r7, #32
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005746:	b590      	push	{r4, r7, lr}
 8005748:	b0cf      	sub	sp, #316	; 0x13c
 800574a:	af00      	add	r7, sp, #0
 800574c:	4604      	mov	r4, r0
 800574e:	4638      	mov	r0, r7
 8005750:	6001      	str	r1, [r0, #0]
 8005752:	4610      	mov	r0, r2
 8005754:	4619      	mov	r1, r3
 8005756:	1dfb      	adds	r3, r7, #7
 8005758:	4622      	mov	r2, r4
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	1dbb      	adds	r3, r7, #6
 800575e:	4602      	mov	r2, r0
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	1d7b      	adds	r3, r7, #5
 8005764:	460a      	mov	r2, r1
 8005766:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005768:	f107 0310 	add.w	r3, r7, #16
 800576c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005770:	1dfb      	adds	r3, r7, #7
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d007      	beq.n	8005788 <aci_gatt_add_service+0x42>
 8005778:	1dfb      	adds	r3, r7, #7
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d101      	bne.n	8005784 <aci_gatt_add_service+0x3e>
 8005780:	2311      	movs	r3, #17
 8005782:	e002      	b.n	800578a <aci_gatt_add_service+0x44>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <aci_gatt_add_service+0x44>
 8005788:	2303      	movs	r3, #3
 800578a:	f107 0210 	add.w	r2, r7, #16
 800578e:	4413      	add	r3, r2
 8005790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005794:	f107 030c 	add.w	r3, r7, #12
 8005798:	2203      	movs	r2, #3
 800579a:	2100      	movs	r1, #0
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fd95 	bl	80062cc <Osal_MemSet>
  int index_input = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80057a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057ac:	1dfa      	adds	r2, r7, #7
 80057ae:	7812      	ldrb	r2, [r2, #0]
 80057b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80057b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057b6:	3301      	adds	r3, #1
 80057b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80057bc:	1dfb      	adds	r3, r7, #7
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d002      	beq.n	80057ca <aci_gatt_add_service+0x84>
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d004      	beq.n	80057d2 <aci_gatt_add_service+0x8c>
 80057c8:	e007      	b.n	80057da <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80057ca:	2302      	movs	r3, #2
 80057cc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80057d0:	e005      	b.n	80057de <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80057d2:	2310      	movs	r3, #16
 80057d4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80057d8:	e001      	b.n	80057de <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80057da:	2347      	movs	r3, #71	; 0x47
 80057dc:	e05d      	b.n	800589a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80057de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80057e2:	1c58      	adds	r0, r3, #1
 80057e4:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80057e8:	463b      	mov	r3, r7
 80057ea:	6819      	ldr	r1, [r3, #0]
 80057ec:	f000 fd5e 	bl	80062ac <Osal_MemCpy>
    index_input += size;
 80057f0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80057f4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80057f8:	4413      	add	r3, r2
 80057fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80057fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005802:	1dba      	adds	r2, r7, #6
 8005804:	7812      	ldrb	r2, [r2, #0]
 8005806:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005808:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800580c:	3301      	adds	r3, #1
 800580e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005812:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005816:	1d7a      	adds	r2, r7, #5
 8005818:	7812      	ldrb	r2, [r2, #0]
 800581a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800581c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005820:	3301      	adds	r3, #1
 8005822:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005826:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800582a:	2218      	movs	r2, #24
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fd4c 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005834:	233f      	movs	r3, #63	; 0x3f
 8005836:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800583a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800583e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005842:	f107 0310 	add.w	r3, r7, #16
 8005846:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800584a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800584e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005852:	f107 030c 	add.w	r3, r7, #12
 8005856:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800585a:	2303      	movs	r3, #3
 800585c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005860:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005864:	2100      	movs	r1, #0
 8005866:	4618      	mov	r0, r3
 8005868:	f000 fbf4 	bl	8006054 <hci_send_req>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	da01      	bge.n	8005876 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8005872:	23ff      	movs	r3, #255	; 0xff
 8005874:	e011      	b.n	800589a <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8005876:	f107 030c 	add.w	r3, r7, #12
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <aci_gatt_add_service+0x142>
    return resp.Status;
 8005880:	f107 030c 	add.w	r3, r7, #12
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	e008      	b.n	800589a <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8005888:	f107 030c 	add.w	r3, r7, #12
 800588c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005890:	b29a      	uxth	r2, r3
 8005892:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8005896:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd90      	pop	{r4, r7, pc}

080058a4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80058a4:	b590      	push	{r4, r7, lr}
 80058a6:	b0d1      	sub	sp, #324	; 0x144
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	4604      	mov	r4, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	f107 0108 	add.w	r1, r7, #8
 80058b2:	600a      	str	r2, [r1, #0]
 80058b4:	4619      	mov	r1, r3
 80058b6:	f107 030e 	add.w	r3, r7, #14
 80058ba:	4622      	mov	r2, r4
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	f107 030d 	add.w	r3, r7, #13
 80058c2:	4602      	mov	r2, r0
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	1dbb      	adds	r3, r7, #6
 80058c8:	460a      	mov	r2, r1
 80058ca:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80058cc:	f107 0318 	add.w	r3, r7, #24
 80058d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80058d4:	f107 030d 	add.w	r3, r7, #13
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d008      	beq.n	80058f0 <aci_gatt_add_char+0x4c>
 80058de:	f107 030d 	add.w	r3, r7, #13
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d101      	bne.n	80058ec <aci_gatt_add_char+0x48>
 80058e8:	2313      	movs	r3, #19
 80058ea:	e002      	b.n	80058f2 <aci_gatt_add_char+0x4e>
 80058ec:	2303      	movs	r3, #3
 80058ee:	e000      	b.n	80058f2 <aci_gatt_add_char+0x4e>
 80058f0:	2305      	movs	r3, #5
 80058f2:	f107 0218 	add.w	r2, r7, #24
 80058f6:	4413      	add	r3, r2
 80058f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80058fc:	f107 0314 	add.w	r3, r7, #20
 8005900:	2203      	movs	r2, #3
 8005902:	2100      	movs	r1, #0
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fce1 	bl	80062cc <Osal_MemSet>
  int index_input = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8005910:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005914:	f107 020e 	add.w	r2, r7, #14
 8005918:	8812      	ldrh	r2, [r2, #0]
 800591a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800591c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005920:	3302      	adds	r3, #2
 8005922:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005926:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800592a:	f107 020d 	add.w	r2, r7, #13
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005932:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005936:	3301      	adds	r3, #1
 8005938:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800593c:	f107 030d 	add.w	r3, r7, #13
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d002      	beq.n	800594c <aci_gatt_add_char+0xa8>
 8005946:	2b02      	cmp	r3, #2
 8005948:	d004      	beq.n	8005954 <aci_gatt_add_char+0xb0>
 800594a:	e007      	b.n	800595c <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800594c:	2302      	movs	r3, #2
 800594e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8005952:	e005      	b.n	8005960 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8005954:	2310      	movs	r3, #16
 8005956:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800595a:	e001      	b.n	8005960 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800595c:	2347      	movs	r3, #71	; 0x47
 800595e:	e086      	b.n	8005a6e <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005960:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005964:	1cd8      	adds	r0, r3, #3
 8005966:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	f000 fc9c 	bl	80062ac <Osal_MemCpy>
    index_input += size;
 8005974:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8005978:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800597c:	4413      	add	r3, r2
 800597e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005982:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005986:	1dba      	adds	r2, r7, #6
 8005988:	8812      	ldrh	r2, [r2, #0]
 800598a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800598c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005990:	3302      	adds	r3, #2
 8005992:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005996:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800599a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800599e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80059a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059a4:	3301      	adds	r3, #1
 80059a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80059aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059ae:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80059b2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80059b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059b8:	3301      	adds	r3, #1
 80059ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80059be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059c2:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80059c6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80059c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059cc:	3301      	adds	r3, #1
 80059ce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80059d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059d6:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80059da:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80059dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059e0:	3301      	adds	r3, #1
 80059e2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80059e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80059ea:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80059ee:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80059f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80059f4:	3301      	adds	r3, #1
 80059f6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80059fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80059fe:	2218      	movs	r2, #24
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fc62 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a08:	233f      	movs	r3, #63	; 0x3f
 8005a0a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8005a0e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005a12:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005a16:	f107 0318 	add.w	r3, r7, #24
 8005a1a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005a1e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005a22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005a26:	f107 0314 	add.w	r3, r7, #20
 8005a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005a2e:	2303      	movs	r3, #3
 8005a30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fb0a 	bl	8006054 <hci_send_req>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	da01      	bge.n	8005a4a <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8005a46:	23ff      	movs	r3, #255	; 0xff
 8005a48:	e011      	b.n	8005a6e <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8005a4a:	f107 0314 	add.w	r3, r7, #20
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	e008      	b.n	8005a6e <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8005a5c:	f107 0314 	add.w	r3, r7, #20
 8005a60:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a6a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd90      	pop	{r4, r7, pc}

08005a78 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8005a78:	b5b0      	push	{r4, r5, r7, lr}
 8005a7a:	b0cc      	sub	sp, #304	; 0x130
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4605      	mov	r5, r0
 8005a80:	460c      	mov	r4, r1
 8005a82:	4610      	mov	r0, r2
 8005a84:	4619      	mov	r1, r3
 8005a86:	1dbb      	adds	r3, r7, #6
 8005a88:	462a      	mov	r2, r5
 8005a8a:	801a      	strh	r2, [r3, #0]
 8005a8c:	1d3b      	adds	r3, r7, #4
 8005a8e:	4622      	mov	r2, r4
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	1cfb      	adds	r3, r7, #3
 8005a94:	4602      	mov	r2, r0
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	1cbb      	adds	r3, r7, #2
 8005a9a:	460a      	mov	r2, r1
 8005a9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005a9e:	f107 0310 	add.w	r3, r7, #16
 8005aa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005aa6:	f107 030f 	add.w	r3, r7, #15
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8005ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab8:	1dba      	adds	r2, r7, #6
 8005aba:	8812      	ldrh	r2, [r2, #0]
 8005abc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ac2:	3302      	adds	r3, #2
 8005ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8005ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005acc:	1d3a      	adds	r2, r7, #4
 8005ace:	8812      	ldrh	r2, [r2, #0]
 8005ad0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8005adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ae0:	1cfa      	adds	r2, r7, #3
 8005ae2:	7812      	ldrb	r2, [r2, #0]
 8005ae4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005aea:	3301      	adds	r3, #1
 8005aec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af4:	1cba      	adds	r2, r7, #2
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005afa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005afe:	3301      	adds	r3, #1
 8005b00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8005b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b08:	1d98      	adds	r0, r3, #6
 8005b0a:	1cbb      	adds	r3, r7, #2
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005b14:	f000 fbca 	bl	80062ac <Osal_MemCpy>
  index_input += Char_Value_Length;
 8005b18:	1cbb      	adds	r3, r7, #2
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005b20:	4413      	add	r3, r2
 8005b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b2a:	2218      	movs	r2, #24
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fbcc 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b34:	233f      	movs	r3, #63	; 0x3f
 8005b36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8005b3a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8005b3e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005b42:	f107 0310 	add.w	r3, r7, #16
 8005b46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005b4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b4e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005b52:	f107 030f 	add.w	r3, r7, #15
 8005b56:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b64:	2100      	movs	r1, #0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 fa74 	bl	8006054 <hci_send_req>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da01      	bge.n	8005b76 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8005b72:	23ff      	movs	r3, #255	; 0xff
 8005b74:	e002      	b.n	8005b7c <aci_gatt_update_char_value+0x104>
  return status;
 8005b76:	f107 030f 	add.w	r3, r7, #15
 8005b7a:	781b      	ldrb	r3, [r3, #0]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bdb0      	pop	{r4, r5, r7, pc}

08005b86 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b0cc      	sub	sp, #304	; 0x130
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	463b      	mov	r3, r7
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	1dfb      	adds	r3, r7, #7
 8005b92:	4602      	mov	r2, r0
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	1dbb      	adds	r3, r7, #6
 8005b98:	460a      	mov	r2, r1
 8005b9a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005b9c:	f107 0310 	add.w	r3, r7, #16
 8005ba0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ba4:	f107 030f 	add.w	r3, r7, #15
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8005bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb6:	1dfa      	adds	r2, r7, #7
 8005bb8:	7812      	ldrb	r2, [r2, #0]
 8005bba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8005bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bca:	1dba      	adds	r2, r7, #6
 8005bcc:	7812      	ldrb	r2, [r2, #0]
 8005bce:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bd4:	3301      	adds	r3, #1
 8005bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bde:	1c98      	adds	r0, r3, #2
 8005be0:	1dbb      	adds	r3, r7, #6
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	463b      	mov	r3, r7
 8005be6:	6819      	ldr	r1, [r3, #0]
 8005be8:	f000 fb60 	bl	80062ac <Osal_MemCpy>
  index_input += Length;
 8005bec:	1dbb      	adds	r3, r7, #6
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005bfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005bfe:	2218      	movs	r2, #24
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 fb62 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c08:	233f      	movs	r3, #63	; 0x3f
 8005c0a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8005c0e:	230c      	movs	r3, #12
 8005c10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005c14:	f107 0310 	add.w	r3, r7, #16
 8005c18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005c24:	f107 030f 	add.w	r3, r7, #15
 8005c28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c36:	2100      	movs	r1, #0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fa0b 	bl	8006054 <hci_send_req>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da01      	bge.n	8005c48 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8005c44:	23ff      	movs	r3, #255	; 0xff
 8005c46:	e002      	b.n	8005c4e <aci_hal_write_config_data+0xc8>
  return status;
 8005c48:	f107 030f 	add.w	r3, r7, #15
 8005c4c:	781b      	ldrb	r3, [r3, #0]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b0cc      	sub	sp, #304	; 0x130
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4602      	mov	r2, r0
 8005c60:	1dfb      	adds	r3, r7, #7
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	1dbb      	adds	r3, r7, #6
 8005c66:	460a      	mov	r2, r1
 8005c68:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005c6a:	f107 0310 	add.w	r3, r7, #16
 8005c6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005c72:	f107 030f 	add.w	r3, r7, #15
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8005c80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c84:	1dfa      	adds	r2, r7, #7
 8005c86:	7812      	ldrb	r2, [r2, #0]
 8005c88:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c8e:	3301      	adds	r3, #1
 8005c90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8005c94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c98:	1dba      	adds	r2, r7, #6
 8005c9a:	7812      	ldrb	r2, [r2, #0]
 8005c9c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ca8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cac:	2218      	movs	r2, #24
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fb0b 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cb6:	233f      	movs	r3, #63	; 0x3f
 8005cb8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8005cbc:	230f      	movs	r3, #15
 8005cbe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005cc2:	f107 0310 	add.w	r3, r7, #16
 8005cc6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005cca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005cd2:	f107 030f 	add.w	r3, r7, #15
 8005cd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ce0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f000 f9b4 	bl	8006054 <hci_send_req>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da01      	bge.n	8005cf6 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8005cf2:	23ff      	movs	r3, #255	; 0xff
 8005cf4:	e002      	b.n	8005cfc <aci_hal_set_tx_power_level+0xa4>
  return status;
 8005cf6:	f107 030f 	add.w	r3, r7, #15
 8005cfa:	781b      	ldrb	r3, [r3, #0]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b0cc      	sub	sp, #304	; 0x130
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	1dbb      	adds	r3, r7, #6
 8005d10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8005d12:	f107 0310 	add.w	r3, r7, #16
 8005d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005d1a:	f107 030f 	add.w	r3, r7, #15
 8005d1e:	2200      	movs	r2, #0
 8005d20:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8005d28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2c:	1dba      	adds	r2, r7, #6
 8005d2e:	8812      	ldrh	r2, [r2, #0]
 8005d30:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d36:	3302      	adds	r3, #2
 8005d38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d40:	2218      	movs	r2, #24
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fac1 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d4a:	233f      	movs	r3, #63	; 0x3f
 8005d4c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8005d50:	2318      	movs	r3, #24
 8005d52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005d56:	f107 0310 	add.w	r3, r7, #16
 8005d5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d62:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005d66:	f107 030f 	add.w	r3, r7, #15
 8005d6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f96a 	bl	8006054 <hci_send_req>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	da01      	bge.n	8005d8a <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8005d86:	23ff      	movs	r3, #255	; 0xff
 8005d88:	e002      	b.n	8005d90 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8005d8a:	f107 030f 	add.w	r3, r7, #15
 8005d8e:	781b      	ldrb	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b088      	sub	sp, #32
 8005d9e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005da4:	f107 0308 	add.w	r3, r7, #8
 8005da8:	2218      	movs	r2, #24
 8005daa:	2100      	movs	r1, #0
 8005dac:	4618      	mov	r0, r3
 8005dae:	f000 fa8d 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x03;
 8005db2:	2303      	movs	r3, #3
 8005db4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005db6:	2303      	movs	r3, #3
 8005db8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005dba:	1dfb      	adds	r3, r7, #7
 8005dbc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005dc2:	f107 0308 	add.w	r3, r7, #8
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 f943 	bl	8006054 <hci_send_req>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	da01      	bge.n	8005dd8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005dd4:	23ff      	movs	r3, #255	; 0xff
 8005dd6:	e000      	b.n	8005dda <hci_reset+0x40>
  return status;
 8005dd8:	79fb      	ldrb	r3, [r7, #7]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b0ce      	sub	sp, #312	; 0x138
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	f107 0308 	add.w	r3, r7, #8
 8005dec:	6019      	str	r1, [r3, #0]
 8005dee:	1d3b      	adds	r3, r7, #4
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	f107 030e 	add.w	r3, r7, #14
 8005df6:	4602      	mov	r2, r0
 8005df8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8005dfa:	f107 0318 	add.w	r3, r7, #24
 8005dfe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005e02:	f107 0310 	add.w	r3, r7, #16
 8005e06:	2205      	movs	r2, #5
 8005e08:	2100      	movs	r1, #0
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 fa5e 	bl	80062cc <Osal_MemSet>
  int index_input = 0;
 8005e10:	2300      	movs	r3, #0
 8005e12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8005e16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e1a:	f107 020e 	add.w	r2, r7, #14
 8005e1e:	8812      	ldrh	r2, [r2, #0]
 8005e20:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e26:	3302      	adds	r3, #2
 8005e28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e2c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e30:	2218      	movs	r2, #24
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fa49 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x08;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8005e40:	2330      	movs	r3, #48	; 0x30
 8005e42:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005e46:	f107 0318 	add.w	r3, r7, #24
 8005e4a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8005e4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005e56:	f107 0310 	add.w	r3, r7, #16
 8005e5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8005e5e:	2305      	movs	r3, #5
 8005e60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 f8f2 	bl	8006054 <hci_send_req>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da01      	bge.n	8005e7a <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8005e76:	23ff      	movs	r3, #255	; 0xff
 8005e78:	e016      	b.n	8005ea8 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8005e7a:	f107 0310 	add.w	r3, r7, #16
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <hci_le_read_phy+0xaa>
    return resp.Status;
 8005e84:	f107 0310 	add.w	r3, r7, #16
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	e00d      	b.n	8005ea8 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8005e8c:	f107 0310 	add.w	r3, r7, #16
 8005e90:	78da      	ldrb	r2, [r3, #3]
 8005e92:	f107 0308 	add.w	r3, r7, #8
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8005e9a:	f107 0310 	add.w	r3, r7, #16
 8005e9e:	791a      	ldrb	r2, [r3, #4]
 8005ea0:	1d3b      	adds	r3, r7, #4
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8005eb2:	b590      	push	{r4, r7, lr}
 8005eb4:	b0cd      	sub	sp, #308	; 0x134
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4604      	mov	r4, r0
 8005eba:	4608      	mov	r0, r1
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	1dfb      	adds	r3, r7, #7
 8005ec0:	4622      	mov	r2, r4
 8005ec2:	701a      	strb	r2, [r3, #0]
 8005ec4:	1dbb      	adds	r3, r7, #6
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	701a      	strb	r2, [r3, #0]
 8005eca:	1d7b      	adds	r3, r7, #5
 8005ecc:	460a      	mov	r2, r1
 8005ece:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8005ed0:	f107 0310 	add.w	r3, r7, #16
 8005ed4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ed8:	f107 030f 	add.w	r3, r7, #15
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8005ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eea:	1dfa      	adds	r2, r7, #7
 8005eec:	7812      	ldrb	r2, [r2, #0]
 8005eee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8005efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005efe:	1dba      	adds	r2, r7, #6
 8005f00:	7812      	ldrb	r2, [r2, #0]
 8005f02:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f08:	3301      	adds	r3, #1
 8005f0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8005f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f12:	1d7a      	adds	r2, r7, #5
 8005f14:	7812      	ldrb	r2, [r2, #0]
 8005f16:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f26:	2218      	movs	r2, #24
 8005f28:	2100      	movs	r1, #0
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 f9ce 	bl	80062cc <Osal_MemSet>
  rq.ogf = 0x08;
 8005f30:	2308      	movs	r3, #8
 8005f32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8005f36:	2331      	movs	r3, #49	; 0x31
 8005f38:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005f3c:	f107 0310 	add.w	r3, r7, #16
 8005f40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005f4c:	f107 030f 	add.w	r3, r7, #15
 8005f50:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 f877 	bl	8006054 <hci_send_req>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	da01      	bge.n	8005f70 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8005f6c:	23ff      	movs	r3, #255	; 0xff
 8005f6e:	e002      	b.n	8005f76 <hci_le_set_default_phy+0xc4>
  return status;
 8005f70:	f107 030f 	add.w	r3, r7, #15
 8005f74:	781b      	ldrb	r3, [r3, #0]
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd90      	pop	{r4, r7, pc}

08005f80 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4a08      	ldr	r2, [pc, #32]	; (8005fb0 <hci_init+0x30>)
 8005f90:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005f92:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <hci_init+0x34>)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005f98:	4806      	ldr	r0, [pc, #24]	; (8005fb4 <hci_init+0x34>)
 8005f9a:	f000 f973 	bl	8006284 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 f8d4 	bl	8006150 <TlInit>

  return;
 8005fa8:	bf00      	nop
}
 8005faa:	3708      	adds	r7, #8
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20000218 	.word	0x20000218
 8005fb4:	200001f0 	.word	0x200001f0

08005fb8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005fbe:	4822      	ldr	r0, [pc, #136]	; (8006048 <hci_user_evt_proc+0x90>)
 8005fc0:	f000 fcb6 	bl	8006930 <LST_is_empty>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d12b      	bne.n	8006022 <hci_user_evt_proc+0x6a>
 8005fca:	4b20      	ldr	r3, [pc, #128]	; (800604c <hci_user_evt_proc+0x94>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d027      	beq.n	8006022 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005fd2:	f107 030c 	add.w	r3, r7, #12
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	481b      	ldr	r0, [pc, #108]	; (8006048 <hci_user_evt_proc+0x90>)
 8005fda:	f000 fd38 	bl	8006a4e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005fde:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <hci_user_evt_proc+0x98>)
 8005fe0:	69db      	ldr	r3, [r3, #28]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005fea:	2301      	movs	r3, #1
 8005fec:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005fee:	4b18      	ldr	r3, [pc, #96]	; (8006050 <hci_user_evt_proc+0x98>)
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	1d3a      	adds	r2, r7, #4
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005ff8:	793a      	ldrb	r2, [r7, #4]
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <hci_user_evt_proc+0x94>)
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e002      	b.n	8006006 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006000:	4b12      	ldr	r3, [pc, #72]	; (800604c <hci_user_evt_proc+0x94>)
 8006002:	2201      	movs	r2, #1
 8006004:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006006:	4b11      	ldr	r3, [pc, #68]	; (800604c <hci_user_evt_proc+0x94>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 ffd3 	bl	8006fbc <TL_MM_EvtDone>
 8006016:	e004      	b.n	8006022 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	4619      	mov	r1, r3
 800601c:	480a      	ldr	r0, [pc, #40]	; (8006048 <hci_user_evt_proc+0x90>)
 800601e:	f000 fca9 	bl	8006974 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006022:	4809      	ldr	r0, [pc, #36]	; (8006048 <hci_user_evt_proc+0x90>)
 8006024:	f000 fc84 	bl	8006930 <LST_is_empty>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d107      	bne.n	800603e <hci_user_evt_proc+0x86>
 800602e:	4b07      	ldr	r3, [pc, #28]	; (800604c <hci_user_evt_proc+0x94>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006036:	4804      	ldr	r0, [pc, #16]	; (8006048 <hci_user_evt_proc+0x90>)
 8006038:	f001 fbcf 	bl	80077da <hci_notify_asynch_evt>
  }


  return;
 800603c:	bf00      	nop
 800603e:	bf00      	nop
}
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200000e0 	.word	0x200000e0
 800604c:	200000ec 	.word	0x200000ec
 8006050:	200001f0 	.word	0x200001f0

08006054 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006060:	2000      	movs	r0, #0
 8006062:	f000 f8cb 	bl	80061fc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006066:	2300      	movs	r3, #0
 8006068:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	885b      	ldrh	r3, [r3, #2]
 800606e:	b21b      	sxth	r3, r3
 8006070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006074:	b21a      	sxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	029b      	lsls	r3, r3, #10
 800607c:	b21b      	sxth	r3, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	b21b      	sxth	r3, r3
 8006082:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	b2d9      	uxtb	r1, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	8bbb      	ldrh	r3, [r7, #28]
 8006090:	4618      	mov	r0, r3
 8006092:	f000 f88d 	bl	80061b0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006096:	e04e      	b.n	8006136 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006098:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800609c:	f001 fbb4 	bl	8007808 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80060a0:	e043      	b.n	800612a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80060a2:	f107 030c 	add.w	r3, r7, #12
 80060a6:	4619      	mov	r1, r3
 80060a8:	4828      	ldr	r0, [pc, #160]	; (800614c <hci_send_req+0xf8>)
 80060aa:	f000 fcd0 	bl	8006a4e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	7a5b      	ldrb	r3, [r3, #9]
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	d114      	bne.n	80060e0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	330b      	adds	r3, #11
 80060ba:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	885b      	ldrh	r3, [r3, #2]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8bba      	ldrh	r2, [r7, #28]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d104      	bne.n	80060d2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d027      	beq.n	800612a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80060da:	2301      	movs	r3, #1
 80060dc:	77fb      	strb	r3, [r7, #31]
 80060de:	e024      	b.n	800612a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	330b      	adds	r3, #11
 80060e4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	8bba      	ldrh	r2, [r7, #28]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d114      	bne.n	800611e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	7a9b      	ldrb	r3, [r3, #10]
 80060f8:	3b03      	subs	r3, #3
 80060fa:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	695a      	ldr	r2, [r3, #20]
 8006100:	7dfb      	ldrb	r3, [r7, #23]
 8006102:	429a      	cmp	r2, r3
 8006104:	bfa8      	it	ge
 8006106:	461a      	movge	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6918      	ldr	r0, [r3, #16]
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	1cd9      	adds	r1, r3, #3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	461a      	mov	r2, r3
 800611a:	f002 f9a1 	bl	8008460 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006126:	2301      	movs	r3, #1
 8006128:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800612a:	4808      	ldr	r0, [pc, #32]	; (800614c <hci_send_req+0xf8>)
 800612c:	f000 fc00 	bl	8006930 <LST_is_empty>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d0b5      	beq.n	80060a2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006136:	7ffb      	ldrb	r3, [r7, #31]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0ad      	beq.n	8006098 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800613c:	2001      	movs	r0, #1
 800613e:	f000 f85d 	bl	80061fc <NotifyCmdStatus>

  return 0;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000210 	.word	0x20000210

08006150 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006158:	480f      	ldr	r0, [pc, #60]	; (8006198 <TlInit+0x48>)
 800615a:	f000 fbd9 	bl	8006910 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800615e:	4a0f      	ldr	r2, [pc, #60]	; (800619c <TlInit+0x4c>)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006164:	480e      	ldr	r0, [pc, #56]	; (80061a0 <TlInit+0x50>)
 8006166:	f000 fbd3 	bl	8006910 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800616a:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <TlInit+0x54>)
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <TlInit+0x58>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <TlInit+0x5c>)
 800617e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006180:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <TlInit+0x58>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f107 0208 	add.w	r2, r7, #8
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
  }

  return;
 800618c:	bf00      	nop
 800618e:	bf00      	nop
}
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000210 	.word	0x20000210
 800619c:	200000e8 	.word	0x200000e8
 80061a0:	200000e0 	.word	0x200000e0
 80061a4:	200000ec 	.word	0x200000ec
 80061a8:	200001f0 	.word	0x200001f0
 80061ac:	0800623d 	.word	0x0800623d

080061b0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	603a      	str	r2, [r7, #0]
 80061ba:	80fb      	strh	r3, [r7, #6]
 80061bc:	460b      	mov	r3, r1
 80061be:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <SendCmd+0x44>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	88fa      	ldrh	r2, [r7, #6]
 80061c6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80061ca:	4b0a      	ldr	r3, [pc, #40]	; (80061f4 <SendCmd+0x44>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	797a      	ldrb	r2, [r7, #5]
 80061d0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80061d2:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <SendCmd+0x44>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	330c      	adds	r3, #12
 80061d8:	797a      	ldrb	r2, [r7, #5]
 80061da:	6839      	ldr	r1, [r7, #0]
 80061dc:	4618      	mov	r0, r3
 80061de:	f002 f93f 	bl	8008460 <memcpy>

  hciContext.io.Send(0,0);
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <SendCmd+0x48>)
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2100      	movs	r1, #0
 80061e8:	2000      	movs	r0, #0
 80061ea:	4798      	blx	r3

  return;
 80061ec:	bf00      	nop
}
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	200000e8 	.word	0x200000e8
 80061f8:	200001f0 	.word	0x200001f0

080061fc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d108      	bne.n	800621e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <NotifyCmdStatus+0x3c>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00d      	beq.n	8006230 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006214:	4b08      	ldr	r3, [pc, #32]	; (8006238 <NotifyCmdStatus+0x3c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2000      	movs	r0, #0
 800621a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800621c:	e008      	b.n	8006230 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800621e:	4b06      	ldr	r3, [pc, #24]	; (8006238 <NotifyCmdStatus+0x3c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d004      	beq.n	8006230 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006226:	4b04      	ldr	r3, [pc, #16]	; (8006238 <NotifyCmdStatus+0x3c>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2001      	movs	r0, #1
 800622c:	4798      	blx	r3
  return;
 800622e:	bf00      	nop
 8006230:	bf00      	nop
}
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	20000218 	.word	0x20000218

0800623c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	7a5b      	ldrb	r3, [r3, #9]
 8006248:	2b0f      	cmp	r3, #15
 800624a:	d003      	beq.n	8006254 <TlEvtReceived+0x18>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7a5b      	ldrb	r3, [r3, #9]
 8006250:	2b0e      	cmp	r3, #14
 8006252:	d107      	bne.n	8006264 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	4809      	ldr	r0, [pc, #36]	; (800627c <TlEvtReceived+0x40>)
 8006258:	f000 fbb2 	bl	80069c0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800625c:	2000      	movs	r0, #0
 800625e:	f001 fac8 	bl	80077f2 <hci_cmd_resp_release>
 8006262:	e006      	b.n	8006272 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	4806      	ldr	r0, [pc, #24]	; (8006280 <TlEvtReceived+0x44>)
 8006268:	f000 fbaa 	bl	80069c0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800626c:	4804      	ldr	r0, [pc, #16]	; (8006280 <TlEvtReceived+0x44>)
 800626e:	f001 fab4 	bl	80077da <hci_notify_asynch_evt>
  }

  return;
 8006272:	bf00      	nop
}
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000210 	.word	0x20000210
 8006280:	200000e0 	.word	0x200000e0

08006284 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a05      	ldr	r2, [pc, #20]	; (80062a4 <hci_register_io_bus+0x20>)
 8006290:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <hci_register_io_bus+0x24>)
 8006296:	611a      	str	r2, [r3, #16]

  return;
 8006298:	bf00      	nop
}
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	08006d35 	.word	0x08006d35
 80062a8:	08006d9d 	.word	0x08006d9d

080062ac <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	68b9      	ldr	r1, [r7, #8]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f002 f8cf 	bl	8008460 <memcpy>
 80062c2:	4603      	mov	r3, r0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f002 f8cd 	bl	800847c <memset>
 80062e2:	4603      	mov	r3, r0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80062f6:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <OTP_Read+0x48>)
 80062f8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80062fa:	e002      	b.n	8006302 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3b08      	subs	r3, #8
 8006300:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3307      	adds	r3, #7
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	79fa      	ldrb	r2, [r7, #7]
 800630a:	429a      	cmp	r2, r3
 800630c:	d003      	beq.n	8006316 <OTP_Read+0x2a>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a09      	ldr	r2, [pc, #36]	; (8006338 <OTP_Read+0x4c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d1f2      	bne.n	80062fc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3307      	adds	r3, #7
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	79fa      	ldrb	r2, [r7, #7]
 800631e:	429a      	cmp	r2, r3
 8006320:	d001      	beq.n	8006326 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006326:	68fb      	ldr	r3, [r7, #12]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	1fff73f8 	.word	0x1fff73f8
 8006338:	1fff7000 	.word	0x1fff7000

0800633c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b08a      	sub	sp, #40	; 0x28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8006344:	2300      	movs	r3, #0
 8006346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3301      	adds	r3, #1
 800634e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2bff      	cmp	r3, #255	; 0xff
 8006356:	d165      	bne.n	8006424 <PeerToPeer_Event_Handler+0xe8>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	3302      	adds	r3, #2
 800635c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	881b      	ldrh	r3, [r3, #0]
 8006362:	b29b      	uxth	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	f640 4301 	movw	r3, #3073	; 0xc01
 800636a:	429a      	cmp	r2, r3
 800636c:	d156      	bne.n	800641c <PeerToPeer_Event_Handler+0xe0>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	3302      	adds	r3, #2
 8006372:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	885b      	ldrh	r3, [r3, #2]
 8006378:	b29b      	uxth	r3, r3
 800637a:	461a      	mov	r2, r3
 800637c:	4b2d      	ldr	r3, [pc, #180]	; (8006434 <PeerToPeer_Event_Handler+0xf8>)
 800637e:	889b      	ldrh	r3, [r3, #4]
 8006380:	3302      	adds	r3, #2
 8006382:	429a      	cmp	r2, r3
 8006384:	d118      	bne.n	80063b8 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	7a1b      	ldrb	r3, [r3, #8]
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8006398:	2300      	movs	r3, #0
 800639a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 fa73 	bl	800788c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 80063a6:	e03b      	b.n	8006420 <PeerToPeer_Event_Handler+0xe4>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80063a8:	2301      	movs	r3, #1
 80063aa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80063ac:	f107 0308 	add.w	r3, r7, #8
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 fa6b 	bl	800788c <P2PS_STM_App_Notification>
        break;
 80063b6:	e033      	b.n	8006420 <PeerToPeer_Event_Handler+0xe4>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PReadServerToClientCharHdle + 1)) {
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	885b      	ldrh	r3, [r3, #2]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <PeerToPeer_Event_Handler+0xf8>)
 80063c2:	88db      	ldrh	r3, [r3, #6]
 80063c4:	3301      	adds	r3, #1
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d10f      	bne.n	80063ea <PeerToPeer_Event_Handler+0xae>
            	Notification.P2P_Evt_Opcode = P2PS_STM_READ_EVT;
 80063ca:	2302      	movs	r3, #2
 80063cc:	723b      	strb	r3, [r7, #8]
            	Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	88db      	ldrh	r3, [r3, #6]
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	743b      	strb	r3, [r7, #16]
            	Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	3308      	adds	r3, #8
 80063dc:	60fb      	str	r3, [r7, #12]
            	P2PS_STM_App_Notification(&Notification);
 80063de:	f107 0308 	add.w	r3, r7, #8
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fa52 	bl	800788c <P2PS_STM_App_Notification>
        break;
 80063e8:	e01a      	b.n	8006420 <PeerToPeer_Event_Handler+0xe4>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	885b      	ldrh	r3, [r3, #2]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	461a      	mov	r2, r3
 80063f2:	4b10      	ldr	r3, [pc, #64]	; (8006434 <PeerToPeer_Event_Handler+0xf8>)
 80063f4:	885b      	ldrh	r3, [r3, #2]
 80063f6:	3301      	adds	r3, #1
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d111      	bne.n	8006420 <PeerToPeer_Event_Handler+0xe4>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80063fc:	2303      	movs	r3, #3
 80063fe:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	88db      	ldrh	r3, [r3, #6]
 8006404:	b29b      	uxth	r3, r3
 8006406:	b2db      	uxtb	r3, r3
 8006408:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	3308      	adds	r3, #8
 800640e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8006410:	f107 0308 	add.w	r3, r7, #8
 8006414:	4618      	mov	r0, r3
 8006416:	f001 fa39 	bl	800788c <P2PS_STM_App_Notification>
        break;
 800641a:	e001      	b.n	8006420 <PeerToPeer_Event_Handler+0xe4>

        default:
          break;
 800641c:	bf00      	nop
 800641e:	e002      	b.n	8006426 <PeerToPeer_Event_Handler+0xea>
        break;
 8006420:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006422:	e000      	b.n	8006426 <PeerToPeer_Event_Handler+0xea>

    default:
      break;
 8006424:	bf00      	nop
  }

  return(return_value);
 8006426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800642a:	4618      	mov	r0, r3
 800642c:	3728      	adds	r7, #40	; 0x28
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	200000f0 	.word	0x200000f0

08006438 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800643e:	4864      	ldr	r0, [pc, #400]	; (80065d0 <P2PS_STM_Init+0x198>)
 8006440:	f000 fbca 	bl	8006bd8 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8006444:	238f      	movs	r3, #143	; 0x8f
 8006446:	703b      	strb	r3, [r7, #0]
 8006448:	23e5      	movs	r3, #229	; 0xe5
 800644a:	707b      	strb	r3, [r7, #1]
 800644c:	23b3      	movs	r3, #179	; 0xb3
 800644e:	70bb      	strb	r3, [r7, #2]
 8006450:	23d5      	movs	r3, #213	; 0xd5
 8006452:	70fb      	strb	r3, [r7, #3]
 8006454:	232e      	movs	r3, #46	; 0x2e
 8006456:	713b      	strb	r3, [r7, #4]
 8006458:	237f      	movs	r3, #127	; 0x7f
 800645a:	717b      	strb	r3, [r7, #5]
 800645c:	234a      	movs	r3, #74	; 0x4a
 800645e:	71bb      	strb	r3, [r7, #6]
 8006460:	2398      	movs	r3, #152	; 0x98
 8006462:	71fb      	strb	r3, [r7, #7]
 8006464:	232a      	movs	r3, #42	; 0x2a
 8006466:	723b      	strb	r3, [r7, #8]
 8006468:	2348      	movs	r3, #72	; 0x48
 800646a:	727b      	strb	r3, [r7, #9]
 800646c:	237a      	movs	r3, #122	; 0x7a
 800646e:	72bb      	strb	r3, [r7, #10]
 8006470:	23cc      	movs	r3, #204	; 0xcc
 8006472:	72fb      	strb	r3, [r7, #11]
 8006474:	2340      	movs	r3, #64	; 0x40
 8006476:	733b      	strb	r3, [r7, #12]
 8006478:	23fe      	movs	r3, #254	; 0xfe
 800647a:	737b      	strb	r3, [r7, #13]
 800647c:	2300      	movs	r3, #0
 800647e:	73bb      	strb	r3, [r7, #14]
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8006484:	4639      	mov	r1, r7
 8006486:	4b53      	ldr	r3, [pc, #332]	; (80065d4 <P2PS_STM_Init+0x19c>)
 8006488:	9300      	str	r3, [sp, #0]
 800648a:	2308      	movs	r3, #8
 800648c:	2201      	movs	r2, #1
 800648e:	2002      	movs	r0, #2
 8006490:	f7ff f959 	bl	8005746 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8006494:	2319      	movs	r3, #25
 8006496:	703b      	strb	r3, [r7, #0]
 8006498:	23ed      	movs	r3, #237	; 0xed
 800649a:	707b      	strb	r3, [r7, #1]
 800649c:	2382      	movs	r3, #130	; 0x82
 800649e:	70bb      	strb	r3, [r7, #2]
 80064a0:	23ae      	movs	r3, #174	; 0xae
 80064a2:	70fb      	strb	r3, [r7, #3]
 80064a4:	23ed      	movs	r3, #237	; 0xed
 80064a6:	713b      	strb	r3, [r7, #4]
 80064a8:	2321      	movs	r3, #33	; 0x21
 80064aa:	717b      	strb	r3, [r7, #5]
 80064ac:	234c      	movs	r3, #76	; 0x4c
 80064ae:	71bb      	strb	r3, [r7, #6]
 80064b0:	239d      	movs	r3, #157	; 0x9d
 80064b2:	71fb      	strb	r3, [r7, #7]
 80064b4:	2341      	movs	r3, #65	; 0x41
 80064b6:	723b      	strb	r3, [r7, #8]
 80064b8:	2345      	movs	r3, #69	; 0x45
 80064ba:	727b      	strb	r3, [r7, #9]
 80064bc:	2322      	movs	r3, #34	; 0x22
 80064be:	72bb      	strb	r3, [r7, #10]
 80064c0:	238e      	movs	r3, #142	; 0x8e
 80064c2:	72fb      	strb	r3, [r7, #11]
 80064c4:	2341      	movs	r3, #65	; 0x41
 80064c6:	733b      	strb	r3, [r7, #12]
 80064c8:	23fe      	movs	r3, #254	; 0xfe
 80064ca:	737b      	strb	r3, [r7, #13]
 80064cc:	2300      	movs	r3, #0
 80064ce:	73bb      	strb	r3, [r7, #14]
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80064d4:	4b3f      	ldr	r3, [pc, #252]	; (80065d4 <P2PS_STM_Init+0x19c>)
 80064d6:	8818      	ldrh	r0, [r3, #0]
 80064d8:	463a      	mov	r2, r7
 80064da:	4b3f      	ldr	r3, [pc, #252]	; (80065d8 <P2PS_STM_Init+0x1a0>)
 80064dc:	9305      	str	r3, [sp, #20]
 80064de:	2301      	movs	r3, #1
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	230a      	movs	r3, #10
 80064e4:	9303      	str	r3, [sp, #12]
 80064e6:	2301      	movs	r3, #1
 80064e8:	9302      	str	r3, [sp, #8]
 80064ea:	2300      	movs	r3, #0
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	2306      	movs	r3, #6
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	2302      	movs	r3, #2
 80064f4:	2102      	movs	r1, #2
 80064f6:	f7ff f9d5 	bl	80058a4 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80064fa:	2319      	movs	r3, #25
 80064fc:	703b      	strb	r3, [r7, #0]
 80064fe:	23ed      	movs	r3, #237	; 0xed
 8006500:	707b      	strb	r3, [r7, #1]
 8006502:	2382      	movs	r3, #130	; 0x82
 8006504:	70bb      	strb	r3, [r7, #2]
 8006506:	23ae      	movs	r3, #174	; 0xae
 8006508:	70fb      	strb	r3, [r7, #3]
 800650a:	23ed      	movs	r3, #237	; 0xed
 800650c:	713b      	strb	r3, [r7, #4]
 800650e:	2321      	movs	r3, #33	; 0x21
 8006510:	717b      	strb	r3, [r7, #5]
 8006512:	234c      	movs	r3, #76	; 0x4c
 8006514:	71bb      	strb	r3, [r7, #6]
 8006516:	239d      	movs	r3, #157	; 0x9d
 8006518:	71fb      	strb	r3, [r7, #7]
 800651a:	2341      	movs	r3, #65	; 0x41
 800651c:	723b      	strb	r3, [r7, #8]
 800651e:	2345      	movs	r3, #69	; 0x45
 8006520:	727b      	strb	r3, [r7, #9]
 8006522:	2322      	movs	r3, #34	; 0x22
 8006524:	72bb      	strb	r3, [r7, #10]
 8006526:	238e      	movs	r3, #142	; 0x8e
 8006528:	72fb      	strb	r3, [r7, #11]
 800652a:	2342      	movs	r3, #66	; 0x42
 800652c:	733b      	strb	r3, [r7, #12]
 800652e:	23fe      	movs	r3, #254	; 0xfe
 8006530:	737b      	strb	r3, [r7, #13]
 8006532:	2300      	movs	r3, #0
 8006534:	73bb      	strb	r3, [r7, #14]
 8006536:	2300      	movs	r3, #0
 8006538:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800653a:	4b26      	ldr	r3, [pc, #152]	; (80065d4 <P2PS_STM_Init+0x19c>)
 800653c:	8818      	ldrh	r0, [r3, #0]
 800653e:	463a      	mov	r2, r7
 8006540:	4b26      	ldr	r3, [pc, #152]	; (80065dc <P2PS_STM_Init+0x1a4>)
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	2301      	movs	r3, #1
 8006546:	9304      	str	r3, [sp, #16]
 8006548:	230a      	movs	r3, #10
 800654a:	9303      	str	r3, [sp, #12]
 800654c:	2301      	movs	r3, #1
 800654e:	9302      	str	r3, [sp, #8]
 8006550:	2300      	movs	r3, #0
 8006552:	9301      	str	r3, [sp, #4]
 8006554:	2310      	movs	r3, #16
 8006556:	9300      	str	r3, [sp, #0]
 8006558:	2302      	movs	r3, #2
 800655a:	2102      	movs	r1, #2
 800655c:	f7ff f9a2 	bl	80058a4 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PNotifyServerToClientCharHdle));

    /**
	 *   Add Dummy Data Characteristic
	 */
	COPY_P2P_READ_UUID(uuid16.Char_UUID_128);
 8006560:	2319      	movs	r3, #25
 8006562:	703b      	strb	r3, [r7, #0]
 8006564:	23ed      	movs	r3, #237	; 0xed
 8006566:	707b      	strb	r3, [r7, #1]
 8006568:	2382      	movs	r3, #130	; 0x82
 800656a:	70bb      	strb	r3, [r7, #2]
 800656c:	23ae      	movs	r3, #174	; 0xae
 800656e:	70fb      	strb	r3, [r7, #3]
 8006570:	23ed      	movs	r3, #237	; 0xed
 8006572:	713b      	strb	r3, [r7, #4]
 8006574:	2321      	movs	r3, #33	; 0x21
 8006576:	717b      	strb	r3, [r7, #5]
 8006578:	234c      	movs	r3, #76	; 0x4c
 800657a:	71bb      	strb	r3, [r7, #6]
 800657c:	239d      	movs	r3, #157	; 0x9d
 800657e:	71fb      	strb	r3, [r7, #7]
 8006580:	2341      	movs	r3, #65	; 0x41
 8006582:	723b      	strb	r3, [r7, #8]
 8006584:	2345      	movs	r3, #69	; 0x45
 8006586:	727b      	strb	r3, [r7, #9]
 8006588:	2322      	movs	r3, #34	; 0x22
 800658a:	72bb      	strb	r3, [r7, #10]
 800658c:	238e      	movs	r3, #142	; 0x8e
 800658e:	72fb      	strb	r3, [r7, #11]
 8006590:	2343      	movs	r3, #67	; 0x43
 8006592:	733b      	strb	r3, [r7, #12]
 8006594:	23fe      	movs	r3, #254	; 0xfe
 8006596:	737b      	strb	r3, [r7, #13]
 8006598:	2300      	movs	r3, #0
 800659a:	73bb      	strb	r3, [r7, #14]
 800659c:	2300      	movs	r3, #0
 800659e:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80065a0:	4b0c      	ldr	r3, [pc, #48]	; (80065d4 <P2PS_STM_Init+0x19c>)
 80065a2:	8818      	ldrh	r0, [r3, #0]
 80065a4:	463a      	mov	r2, r7
 80065a6:	4b0e      	ldr	r3, [pc, #56]	; (80065e0 <P2PS_STM_Init+0x1a8>)
 80065a8:	9305      	str	r3, [sp, #20]
 80065aa:	2301      	movs	r3, #1
 80065ac:	9304      	str	r3, [sp, #16]
 80065ae:	230a      	movs	r3, #10
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	2301      	movs	r3, #1
 80065b4:	9302      	str	r3, [sp, #8]
 80065b6:	2300      	movs	r3, #0
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	2306      	movs	r3, #6
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2302      	movs	r3, #2
 80065c0:	2102      	movs	r1, #2
 80065c2:	f7ff f96f 	bl	80058a4 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80065c6:	bf00      	nop
}
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	0800633d 	.word	0x0800633d
 80065d4:	200000f0 	.word	0x200000f0
 80065d8:	200000f2 	.word	0x200000f2
 80065dc:	200000f4 	.word	0x200000f4
 80065e0:	200000f6 	.word	0x200000f6

080065e4 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af02      	add	r7, sp, #8
 80065ea:	4603      	mov	r3, r0
 80065ec:	6039      	str	r1, [r7, #0]
 80065ee:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 80065f0:	2342      	movs	r3, #66	; 0x42
 80065f2:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 80065f4:	88fb      	ldrh	r3, [r7, #6]
 80065f6:	f64f 6242 	movw	r2, #65090	; 0xfe42
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <P2PS_STM_App_Update_Char+0x24>
 80065fe:	f64f 6243 	movw	r2, #65091	; 0xfe43
 8006602:	4293      	cmp	r3, r2
 8006604:	d00d      	beq.n	8006622 <P2PS_STM_App_Update_Char+0x3e>
                                 (uint8_t *)  pPayload);

          break;

    default:
      break;
 8006606:	e019      	b.n	800663c <P2PS_STM_App_Update_Char+0x58>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <P2PS_STM_App_Update_Char+0x64>)
 800660a:	8818      	ldrh	r0, [r3, #0]
 800660c:	4b0e      	ldr	r3, [pc, #56]	; (8006648 <P2PS_STM_App_Update_Char+0x64>)
 800660e:	8899      	ldrh	r1, [r3, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	2302      	movs	r3, #2
 8006616:	2200      	movs	r2, #0
 8006618:	f7ff fa2e 	bl	8005a78 <aci_gatt_update_char_value>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
      break;
 8006620:	e00c      	b.n	800663c <P2PS_STM_App_Update_Char+0x58>
         result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <P2PS_STM_App_Update_Char+0x64>)
 8006624:	8818      	ldrh	r0, [r3, #0]
 8006626:	4b08      	ldr	r3, [pc, #32]	; (8006648 <P2PS_STM_App_Update_Char+0x64>)
 8006628:	88d9      	ldrh	r1, [r3, #6]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	2302      	movs	r3, #2
 8006630:	2200      	movs	r2, #0
 8006632:	f7ff fa21 	bl	8005a78 <aci_gatt_update_char_value>
 8006636:	4603      	mov	r3, r0
 8006638:	73fb      	strb	r3, [r7, #15]
          break;
 800663a:	bf00      	nop
  }

  return result;
 800663c:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800663e:	4618      	mov	r0, r3
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	200000f0 	.word	0x200000f0

0800664c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006654:	f107 030c 	add.w	r3, r7, #12
 8006658:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	2124      	movs	r1, #36	; 0x24
 8006664:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8006668:	f000 f888 	bl	800677c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	330b      	adds	r3, #11
 8006670:	78db      	ldrb	r3, [r3, #3]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b088      	sub	sp, #32
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006682:	f107 030c 	add.w	r3, r7, #12
 8006686:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	210f      	movs	r1, #15
 8006692:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8006696:	f000 f871 	bl	800677c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	330b      	adds	r3, #11
 800669e:	78db      	ldrb	r3, [r3, #3]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4a08      	ldr	r2, [pc, #32]	; (80066d8 <shci_init+0x30>)
 80066b8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80066ba:	4a08      	ldr	r2, [pc, #32]	; (80066dc <shci_init+0x34>)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80066c0:	4806      	ldr	r0, [pc, #24]	; (80066dc <shci_init+0x34>)
 80066c2:	f000 f911 	bl	80068e8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 f894 	bl	80067f8 <TlInit>

  return;
 80066d0:	bf00      	nop
}
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	2000023c 	.word	0x2000023c
 80066dc:	2000021c 	.word	0x2000021c

080066e0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80066e6:	4822      	ldr	r0, [pc, #136]	; (8006770 <shci_user_evt_proc+0x90>)
 80066e8:	f000 f922 	bl	8006930 <LST_is_empty>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d12b      	bne.n	800674a <shci_user_evt_proc+0x6a>
 80066f2:	4b20      	ldr	r3, [pc, #128]	; (8006774 <shci_user_evt_proc+0x94>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d027      	beq.n	800674a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80066fa:	f107 030c 	add.w	r3, r7, #12
 80066fe:	4619      	mov	r1, r3
 8006700:	481b      	ldr	r0, [pc, #108]	; (8006770 <shci_user_evt_proc+0x90>)
 8006702:	f000 f9a4 	bl	8006a4e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006706:	4b1c      	ldr	r3, [pc, #112]	; (8006778 <shci_user_evt_proc+0x98>)
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006712:	2301      	movs	r3, #1
 8006714:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006716:	4b18      	ldr	r3, [pc, #96]	; (8006778 <shci_user_evt_proc+0x98>)
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	1d3a      	adds	r2, r7, #4
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006720:	793a      	ldrb	r2, [r7, #4]
 8006722:	4b14      	ldr	r3, [pc, #80]	; (8006774 <shci_user_evt_proc+0x94>)
 8006724:	701a      	strb	r2, [r3, #0]
 8006726:	e002      	b.n	800672e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006728:	4b12      	ldr	r3, [pc, #72]	; (8006774 <shci_user_evt_proc+0x94>)
 800672a:	2201      	movs	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800672e:	4b11      	ldr	r3, [pc, #68]	; (8006774 <shci_user_evt_proc+0x94>)
 8006730:	781b      	ldrb	r3, [r3, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fc3f 	bl	8006fbc <TL_MM_EvtDone>
 800673e:	e004      	b.n	800674a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4619      	mov	r1, r3
 8006744:	480a      	ldr	r0, [pc, #40]	; (8006770 <shci_user_evt_proc+0x90>)
 8006746:	f000 f915 	bl	8006974 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800674a:	4809      	ldr	r0, [pc, #36]	; (8006770 <shci_user_evt_proc+0x90>)
 800674c:	f000 f8f0 	bl	8006930 <LST_is_empty>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d107      	bne.n	8006766 <shci_user_evt_proc+0x86>
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <shci_user_evt_proc+0x94>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800675e:	4804      	ldr	r0, [pc, #16]	; (8006770 <shci_user_evt_proc+0x90>)
 8006760:	f7f9 ff3f 	bl	80005e2 <shci_notify_asynch_evt>
  }


  return;
 8006764:	bf00      	nop
 8006766:	bf00      	nop
}
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	2000011c 	.word	0x2000011c
 8006774:	2000012c 	.word	0x2000012c
 8006778:	2000021c 	.word	0x2000021c

0800677c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60ba      	str	r2, [r7, #8]
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	4603      	mov	r3, r0
 8006788:	81fb      	strh	r3, [r7, #14]
 800678a:	460b      	mov	r3, r1
 800678c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800678e:	2000      	movs	r0, #0
 8006790:	f000 f864 	bl	800685c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006794:	4b16      	ldr	r3, [pc, #88]	; (80067f0 <shci_send+0x74>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	89fa      	ldrh	r2, [r7, #14]
 800679a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800679e:	4b14      	ldr	r3, [pc, #80]	; (80067f0 <shci_send+0x74>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	7b7a      	ldrb	r2, [r7, #13]
 80067a4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80067a6:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <shci_send+0x74>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	7b7a      	ldrb	r2, [r7, #13]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 fe55 	bl	8008460 <memcpy>

  shciContext.io.Send(0,0);
 80067b6:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <shci_send+0x78>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2100      	movs	r1, #0
 80067bc:	2000      	movs	r0, #0
 80067be:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80067c0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80067c4:	f7f9 ff24 	bl	8000610 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f103 0008 	add.w	r0, r3, #8
 80067ce:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <shci_send+0x74>)
 80067d0:	6819      	ldr	r1, [r3, #0]
 80067d2:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <shci_send+0x74>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	789b      	ldrb	r3, [r3, #2]
 80067d8:	3303      	adds	r3, #3
 80067da:	461a      	mov	r2, r3
 80067dc:	f001 fe40 	bl	8008460 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80067e0:	2001      	movs	r0, #1
 80067e2:	f000 f83b 	bl	800685c <Cmd_SetStatus>

  return;
 80067e6:	bf00      	nop
}
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000128 	.word	0x20000128
 80067f4:	2000021c 	.word	0x2000021c

080067f8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006800:	4a10      	ldr	r2, [pc, #64]	; (8006844 <TlInit+0x4c>)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006806:	4810      	ldr	r0, [pc, #64]	; (8006848 <TlInit+0x50>)
 8006808:	f000 f882 	bl	8006910 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800680c:	2001      	movs	r0, #1
 800680e:	f000 f825 	bl	800685c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006812:	4b0e      	ldr	r3, [pc, #56]	; (800684c <TlInit+0x54>)
 8006814:	2201      	movs	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006818:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <TlInit+0x58>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00c      	beq.n	800683a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006824:	4b0b      	ldr	r3, [pc, #44]	; (8006854 <TlInit+0x5c>)
 8006826:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006828:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <TlInit+0x60>)
 800682a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800682c:	4b08      	ldr	r3, [pc, #32]	; (8006850 <TlInit+0x58>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f107 020c 	add.w	r2, r7, #12
 8006834:	4610      	mov	r0, r2
 8006836:	4798      	blx	r3
  }

  return;
 8006838:	bf00      	nop
 800683a:	bf00      	nop
}
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	20000128 	.word	0x20000128
 8006848:	2000011c 	.word	0x2000011c
 800684c:	2000012c 	.word	0x2000012c
 8006850:	2000021c 	.word	0x2000021c
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068c5 	.word	0x080068c5

0800685c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800686c:	4b0d      	ldr	r3, [pc, #52]	; (80068a4 <Cmd_SetStatus+0x48>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006874:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <Cmd_SetStatus+0x48>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2000      	movs	r0, #0
 800687a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800687c:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <Cmd_SetStatus+0x4c>)
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006882:	e00b      	b.n	800689c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006884:	4b08      	ldr	r3, [pc, #32]	; (80068a8 <Cmd_SetStatus+0x4c>)
 8006886:	2201      	movs	r2, #1
 8006888:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800688a:	4b06      	ldr	r3, [pc, #24]	; (80068a4 <Cmd_SetStatus+0x48>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006892:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <Cmd_SetStatus+0x48>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2001      	movs	r0, #1
 8006898:	4798      	blx	r3
  return;
 800689a:	bf00      	nop
 800689c:	bf00      	nop
}
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	2000023c 	.word	0x2000023c
 80068a8:	20000124 	.word	0x20000124

080068ac <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80068b4:	2000      	movs	r0, #0
 80068b6:	f7f9 fea0 	bl	80005fa <shci_cmd_resp_release>

  return;
 80068ba:	bf00      	nop
}
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4805      	ldr	r0, [pc, #20]	; (80068e4 <TlUserEvtReceived+0x20>)
 80068d0:	f000 f876 	bl	80069c0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80068d4:	4803      	ldr	r0, [pc, #12]	; (80068e4 <TlUserEvtReceived+0x20>)
 80068d6:	f7f9 fe84 	bl	80005e2 <shci_notify_asynch_evt>

  return;
 80068da:	bf00      	nop
}
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	2000011c 	.word	0x2000011c

080068e8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a05      	ldr	r2, [pc, #20]	; (8006908 <shci_register_io_bus+0x20>)
 80068f4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a04      	ldr	r2, [pc, #16]	; (800690c <shci_register_io_bus+0x24>)
 80068fa:	611a      	str	r2, [r3, #16]

  return;
 80068fc:	bf00      	nop
}
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	08006e49 	.word	0x08006e49
 800690c:	08006e9d 	.word	0x08006e9d

08006910 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	605a      	str	r2, [r3, #4]
}
 8006924:	bf00      	nop
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006930:	b480      	push	{r7}
 8006932:	b087      	sub	sp, #28
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006938:	f3ef 8310 	mrs	r3, PRIMASK
 800693c:	60fb      	str	r3, [r7, #12]
  return(result);
 800693e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006940:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006942:	b672      	cpsid	i
}
 8006944:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d102      	bne.n	8006956 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006950:	2301      	movs	r3, #1
 8006952:	75fb      	strb	r3, [r7, #23]
 8006954:	e001      	b.n	800695a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006956:	2300      	movs	r3, #0
 8006958:	75fb      	strb	r3, [r7, #23]
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	f383 8810 	msr	PRIMASK, r3
}
 8006964:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
}
 8006968:	4618      	mov	r0, r3
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800697e:	f3ef 8310 	mrs	r3, PRIMASK
 8006982:	60fb      	str	r3, [r7, #12]
  return(result);
 8006984:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006986:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006988:	b672      	cpsid	i
}
 800698a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	605a      	str	r2, [r3, #4]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f383 8810 	msr	PRIMASK, r3
}
 80069b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ca:	f3ef 8310 	mrs	r3, PRIMASK
 80069ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80069d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80069d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80069d4:	b672      	cpsid	i
}
 80069d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	683a      	ldr	r2, [r7, #0]
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f383 8810 	msr	PRIMASK, r3
}
 80069fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006a00:	bf00      	nop
 8006a02:	371c      	adds	r7, #28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a14:	f3ef 8310 	mrs	r3, PRIMASK
 8006a18:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a1e:	b672      	cpsid	i
}
 8006a20:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6852      	ldr	r2, [r2, #4]
 8006a34:	605a      	str	r2, [r3, #4]
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f383 8810 	msr	PRIMASK, r3
}
 8006a40:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a58:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006a60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006a62:	b672      	cpsid	i
}
 8006a64:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff ffca 	bl	8006a0c <LST_remove_node>
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f383 8810 	msr	PRIMASK, r3
}
 8006a82:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006a84:	bf00      	nop
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  return;
 8006a90:	bf00      	nop
}
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <BLS_Init>:

__weak void BLS_Init( void )
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	af00      	add	r7, sp, #0
  return;
 8006a9e:	bf00      	nop
}
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return;
 8006aac:	bf00      	nop
}
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <DIS_Init>:
__weak void DIS_Init( void )
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	af00      	add	r7, sp, #0
  return;
 8006aba:	bf00      	nop
}
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return;
 8006ac8:	bf00      	nop
}
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	af00      	add	r7, sp, #0
  return;
 8006ad6:	bf00      	nop
}
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HRS_Init>:
__weak void HRS_Init( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  return;
 8006ae4:	bf00      	nop
}
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <HTS_Init>:
__weak void HTS_Init( void )
{
 8006aee:	b480      	push	{r7}
 8006af0:	af00      	add	r7, sp, #0
  return;
 8006af2:	bf00      	nop
}
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <IAS_Init>:
__weak void IAS_Init( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return;
 8006b00:	bf00      	nop
}
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <LLS_Init>:
__weak void LLS_Init( void )
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	af00      	add	r7, sp, #0
  return;
 8006b0e:	bf00      	nop
}
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <TPS_Init>:
__weak void TPS_Init( void )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return;
 8006b1c:	bf00      	nop
}
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8006b26:	b480      	push	{r7}
 8006b28:	af00      	add	r7, sp, #0
  return;
 8006b2a:	bf00      	nop
}
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  return;
 8006b38:	bf00      	nop
}
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <MESH_Init>:
__weak void MESH_Init( void )
{
 8006b42:	b480      	push	{r7}
 8006b44:	af00      	add	r7, sp, #0
  return;
 8006b46:	bf00      	nop
}
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  return;
 8006b54:	bf00      	nop
}
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8006b5e:	b480      	push	{r7}
 8006b60:	af00      	add	r7, sp, #0
  return;
 8006b62:	bf00      	nop
}
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006b70:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <SVCCTL_Init+0x18>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006b76:	4b04      	ldr	r3, [pc, #16]	; (8006b88 <SVCCTL_Init+0x1c>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006b7c:	f000 f806 	bl	8006b8c <SVCCTL_SvcInit>

  return;
 8006b80:	bf00      	nop
}
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	200000f8 	.word	0x200000f8
 8006b88:	20000118 	.word	0x20000118

08006b8c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  BAS_Init();
 8006b90:	f7ff ff7c 	bl	8006a8c <BAS_Init>

  BLS_Init();
 8006b94:	f7ff ff81 	bl	8006a9a <BLS_Init>

  CRS_STM_Init();
 8006b98:	f7ff ff86 	bl	8006aa8 <CRS_STM_Init>

  DIS_Init();
 8006b9c:	f7ff ff8b 	bl	8006ab6 <DIS_Init>

  EDS_STM_Init();
 8006ba0:	f7ff ff90 	bl	8006ac4 <EDS_STM_Init>

  HIDS_Init();
 8006ba4:	f7ff ff95 	bl	8006ad2 <HIDS_Init>

  HRS_Init();
 8006ba8:	f7ff ff9a 	bl	8006ae0 <HRS_Init>

  HTS_Init();
 8006bac:	f7ff ff9f 	bl	8006aee <HTS_Init>

  IAS_Init();
 8006bb0:	f7ff ffa4 	bl	8006afc <IAS_Init>

  LLS_Init();
 8006bb4:	f7ff ffa9 	bl	8006b0a <LLS_Init>

  TPS_Init();
 8006bb8:	f7ff ffae 	bl	8006b18 <TPS_Init>

  MOTENV_STM_Init();
 8006bbc:	f7ff ffb3 	bl	8006b26 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006bc0:	f7ff fc3a 	bl	8006438 <P2PS_STM_Init>

  OTAS_STM_Init();
 8006bc4:	f7ff ffb6 	bl	8006b34 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006bc8:	f7ff ffc2 	bl	8006b50 <BVOPUS_STM_Init>

  MESH_Init();
 8006bcc:	f7ff ffb9 	bl	8006b42 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006bd0:	f7ff ffc5 	bl	8006b5e <SVCCTL_InitCustomSvc>
  
  return;
 8006bd4:	bf00      	nop
}
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006be0:	4b09      	ldr	r3, [pc, #36]	; (8006c08 <SVCCTL_RegisterSvcHandler+0x30>)
 8006be2:	7f1b      	ldrb	r3, [r3, #28]
 8006be4:	4619      	mov	r1, r3
 8006be6:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <SVCCTL_RegisterSvcHandler+0x30>)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8006bee:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <SVCCTL_RegisterSvcHandler+0x30>)
 8006bf0:	7f1b      	ldrb	r3, [r3, #28]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	b2da      	uxtb	r2, r3
 8006bf6:	4b04      	ldr	r3, [pc, #16]	; (8006c08 <SVCCTL_RegisterSvcHandler+0x30>)
 8006bf8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8006bfa:	bf00      	nop
}
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	200000f8 	.word	0x200000f8

08006c0c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3301      	adds	r3, #1
 8006c18:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2bff      	cmp	r3, #255	; 0xff
 8006c24:	d125      	bne.n	8006c72 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	3302      	adds	r3, #2
 8006c2a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3a:	d118      	bne.n	8006c6e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	757b      	strb	r3, [r7, #21]
 8006c40:	e00d      	b.n	8006c5e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006c42:	7d7b      	ldrb	r3, [r7, #21]
 8006c44:	4a1a      	ldr	r2, [pc, #104]	; (8006cb0 <SVCCTL_UserEvtRx+0xa4>)
 8006c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
 8006c4e:	4603      	mov	r3, r0
 8006c50:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006c52:	7dfb      	ldrb	r3, [r7, #23]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d108      	bne.n	8006c6a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006c58:	7d7b      	ldrb	r3, [r7, #21]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	757b      	strb	r3, [r7, #21]
 8006c5e:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <SVCCTL_UserEvtRx+0xa4>)
 8006c60:	7f1b      	ldrb	r3, [r3, #28]
 8006c62:	7d7a      	ldrb	r2, [r7, #21]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d3ec      	bcc.n	8006c42 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006c68:	e002      	b.n	8006c70 <SVCCTL_UserEvtRx+0x64>
              break;
 8006c6a:	bf00      	nop
          break;
 8006c6c:	e000      	b.n	8006c70 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006c6e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006c70:	e000      	b.n	8006c74 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006c72:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d00f      	beq.n	8006c9a <SVCCTL_UserEvtRx+0x8e>
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	dc10      	bgt.n	8006ca0 <SVCCTL_UserEvtRx+0x94>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <SVCCTL_UserEvtRx+0x7c>
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d006      	beq.n	8006c94 <SVCCTL_UserEvtRx+0x88>
 8006c86:	e00b      	b.n	8006ca0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 faeb 	bl	8007264 <SVCCTL_App_Notification>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	75bb      	strb	r3, [r7, #22]
      break;
 8006c92:	e008      	b.n	8006ca6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006c94:	2301      	movs	r3, #1
 8006c96:	75bb      	strb	r3, [r7, #22]
      break;
 8006c98:	e005      	b.n	8006ca6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	75bb      	strb	r3, [r7, #22]
      break;
 8006c9e:	e002      	b.n	8006ca6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	75bb      	strb	r3, [r7, #22]
      break;
 8006ca4:	bf00      	nop
  }

  return (return_status);
 8006ca6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3718      	adds	r7, #24
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	200000f8 	.word	0x200000f8

08006cb4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006cb8:	f001 f87e 	bl	8007db8 <HW_IPCC_Enable>

  return;
 8006cbc:	bf00      	nop
}
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <TL_Init>:


void TL_Init( void )
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006cc4:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <TL_Init+0x48>)
 8006cc6:	4a11      	ldr	r2, [pc, #68]	; (8006d0c <TL_Init+0x4c>)
 8006cc8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006cca:	4b0f      	ldr	r3, [pc, #60]	; (8006d08 <TL_Init+0x48>)
 8006ccc:	4a10      	ldr	r2, [pc, #64]	; (8006d10 <TL_Init+0x50>)
 8006cce:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006cd0:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <TL_Init+0x48>)
 8006cd2:	4a10      	ldr	r2, [pc, #64]	; (8006d14 <TL_Init+0x54>)
 8006cd4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006cd6:	4b0c      	ldr	r3, [pc, #48]	; (8006d08 <TL_Init+0x48>)
 8006cd8:	4a0f      	ldr	r2, [pc, #60]	; (8006d18 <TL_Init+0x58>)
 8006cda:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <TL_Init+0x48>)
 8006cde:	4a0f      	ldr	r2, [pc, #60]	; (8006d1c <TL_Init+0x5c>)
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006ce2:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <TL_Init+0x48>)
 8006ce4:	4a0e      	ldr	r2, [pc, #56]	; (8006d20 <TL_Init+0x60>)
 8006ce6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006ce8:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <TL_Init+0x48>)
 8006cea:	4a0e      	ldr	r2, [pc, #56]	; (8006d24 <TL_Init+0x64>)
 8006cec:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006cee:	4b06      	ldr	r3, [pc, #24]	; (8006d08 <TL_Init+0x48>)
 8006cf0:	4a0d      	ldr	r2, [pc, #52]	; (8006d28 <TL_Init+0x68>)
 8006cf2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006cf4:	4b04      	ldr	r3, [pc, #16]	; (8006d08 <TL_Init+0x48>)
 8006cf6:	4a0d      	ldr	r2, [pc, #52]	; (8006d2c <TL_Init+0x6c>)
 8006cf8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006cfa:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <TL_Init+0x48>)
 8006cfc:	4a0c      	ldr	r2, [pc, #48]	; (8006d30 <TL_Init+0x70>)
 8006cfe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006d00:	f001 f86e 	bl	8007de0 <HW_IPCC_Init>

  return;
 8006d04:	bf00      	nop
}
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20030000 	.word	0x20030000
 8006d0c:	20030028 	.word	0x20030028
 8006d10:	20030048 	.word	0x20030048
 8006d14:	20030058 	.word	0x20030058
 8006d18:	20030064 	.word	0x20030064
 8006d1c:	2003006c 	.word	0x2003006c
 8006d20:	20030074 	.word	0x20030074
 8006d24:	2003007c 	.word	0x2003007c
 8006d28:	20030098 	.word	0x20030098
 8006d2c:	2003009c 	.word	0x2003009c
 8006d30:	200300a8 	.word	0x200300a8

08006d34 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8006d40:	4811      	ldr	r0, [pc, #68]	; (8006d88 <TL_BLE_Init+0x54>)
 8006d42:	f7ff fde5 	bl	8006910 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8006d46:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <TL_BLE_Init+0x58>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	689a      	ldr	r2, [r3, #8]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4a0c      	ldr	r2, [pc, #48]	; (8006d90 <TL_BLE_Init+0x5c>)
 8006d60:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	4a08      	ldr	r2, [pc, #32]	; (8006d88 <TL_BLE_Init+0x54>)
 8006d66:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8006d68:	f001 f850 	bl	8007e0c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a08      	ldr	r2, [pc, #32]	; (8006d94 <TL_BLE_Init+0x60>)
 8006d72:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4a07      	ldr	r2, [pc, #28]	; (8006d98 <TL_BLE_Init+0x64>)
 8006d7a:	6013      	str	r3, [r2, #0]

  return 0;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	200300c4 	.word	0x200300c4
 8006d8c:	20030000 	.word	0x20030000
 8006d90:	20030a48 	.word	0x20030a48
 8006d94:	20000248 	.word	0x20000248
 8006d98:	2000024c 	.word	0x2000024c

08006d9c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	460b      	mov	r3, r1
 8006da6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006da8:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <TL_BLE_SendCmd+0x34>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2201      	movs	r2, #1
 8006db0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006db2:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <TL_BLE_SendCmd+0x34>)
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4619      	mov	r1, r3
 8006dba:	2001      	movs	r0, #1
 8006dbc:	f000 f96c 	bl	8007098 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006dc0:	f001 f82e 	bl	8007e20 <HW_IPCC_BLE_SendCmd>

  return 0;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	20030000 	.word	0x20030000

08006dd4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006dda:	e01c      	b.n	8006e16 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006ddc:	1d3b      	adds	r3, r7, #4
 8006dde:	4619      	mov	r1, r3
 8006de0:	4812      	ldr	r0, [pc, #72]	; (8006e2c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006de2:	f7ff fe34 	bl	8006a4e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	7a5b      	ldrb	r3, [r3, #9]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d003      	beq.n	8006df6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7a5b      	ldrb	r3, [r3, #9]
 8006df2:	2b0e      	cmp	r3, #14
 8006df4:	d105      	bne.n	8006e02 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	2002      	movs	r0, #2
 8006dfc:	f000 f94c 	bl	8007098 <OutputDbgTrace>
 8006e00:	e004      	b.n	8006e0c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4619      	mov	r1, r3
 8006e06:	2003      	movs	r0, #3
 8006e08:	f000 f946 	bl	8007098 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006e0c:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	4610      	mov	r0, r2
 8006e14:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006e16:	4805      	ldr	r0, [pc, #20]	; (8006e2c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006e18:	f7ff fd8a 	bl	8006930 <LST_is_empty>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0dc      	beq.n	8006ddc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006e22:	bf00      	nop
}
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200300c4 	.word	0x200300c4
 8006e30:	20000248 	.word	0x20000248

08006e34 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006e38:	4b02      	ldr	r3, [pc, #8]	; (8006e44 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4798      	blx	r3

  return;
 8006e3e:	bf00      	nop
}
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	2000024c 	.word	0x2000024c

08006e48 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006e54:	480d      	ldr	r0, [pc, #52]	; (8006e8c <TL_SYS_Init+0x44>)
 8006e56:	f7ff fd5b 	bl	8006910 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8006e5a:	4b0d      	ldr	r3, [pc, #52]	; (8006e90 <TL_SYS_Init+0x48>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <TL_SYS_Init+0x44>)
 8006e6c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8006e6e:	f000 fff9 	bl	8007e64 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a07      	ldr	r2, [pc, #28]	; (8006e94 <TL_SYS_Init+0x4c>)
 8006e78:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4a06      	ldr	r2, [pc, #24]	; (8006e98 <TL_SYS_Init+0x50>)
 8006e80:	6013      	str	r3, [r2, #0]

  return 0;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	200300cc 	.word	0x200300cc
 8006e90:	20030000 	.word	0x20030000
 8006e94:	20000250 	.word	0x20000250
 8006e98:	20000254 	.word	0x20000254

08006e9c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <TL_SYS_SendCmd+0x34>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006eb2:	4b07      	ldr	r3, [pc, #28]	; (8006ed0 <TL_SYS_SendCmd+0x34>)
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	2004      	movs	r0, #4
 8006ebc:	f000 f8ec 	bl	8007098 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8006ec0:	f000 ffda 	bl	8007e78 <HW_IPCC_SYS_SendCmd>

  return 0;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	20030000 	.word	0x20030000

08006ed4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006ed8:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	2005      	movs	r0, #5
 8006ee2:	f000 f8d9 	bl	8007098 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a03      	ldr	r2, [pc, #12]	; (8006ef8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006eec:	68d2      	ldr	r2, [r2, #12]
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3

  return;
 8006ef4:	bf00      	nop
}
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20030000 	.word	0x20030000
 8006efc:	20000250 	.word	0x20000250

08006f00 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006f06:	e00e      	b.n	8006f26 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006f08:	1d3b      	adds	r3, r7, #4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	480b      	ldr	r0, [pc, #44]	; (8006f3c <HW_IPCC_SYS_EvtNot+0x3c>)
 8006f0e:	f7ff fd9e 	bl	8006a4e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4619      	mov	r1, r3
 8006f16:	2006      	movs	r0, #6
 8006f18:	f000 f8be 	bl	8007098 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006f1c:	4b08      	ldr	r3, [pc, #32]	; (8006f40 <HW_IPCC_SYS_EvtNot+0x40>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4610      	mov	r0, r2
 8006f24:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006f26:	4805      	ldr	r0, [pc, #20]	; (8006f3c <HW_IPCC_SYS_EvtNot+0x3c>)
 8006f28:	f7ff fd02 	bl	8006930 <LST_is_empty>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0ea      	beq.n	8006f08 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006f32:	bf00      	nop
}
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200300cc 	.word	0x200300cc
 8006f40:	20000254 	.word	0x20000254

08006f44 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8006f4c:	4817      	ldr	r0, [pc, #92]	; (8006fac <TL_MM_Init+0x68>)
 8006f4e:	f7ff fcdf 	bl	8006910 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8006f52:	4817      	ldr	r0, [pc, #92]	; (8006fb0 <TL_MM_Init+0x6c>)
 8006f54:	f7ff fcdc 	bl	8006910 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <TL_MM_Init+0x70>)
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	4a16      	ldr	r2, [pc, #88]	; (8006fb8 <TL_MM_Init+0x74>)
 8006f5e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8006f60:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <TL_MM_Init+0x74>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	6892      	ldr	r2, [r2, #8]
 8006f68:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8006f6a:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <TL_MM_Init+0x74>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	68d2      	ldr	r2, [r2, #12]
 8006f72:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8006f74:	4b10      	ldr	r3, [pc, #64]	; (8006fb8 <TL_MM_Init+0x74>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a0c      	ldr	r2, [pc, #48]	; (8006fac <TL_MM_Init+0x68>)
 8006f7a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <TL_MM_Init+0x74>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	6812      	ldr	r2, [r2, #0]
 8006f84:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <TL_MM_Init+0x74>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6852      	ldr	r2, [r2, #4]
 8006f8e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006f90:	4b09      	ldr	r3, [pc, #36]	; (8006fb8 <TL_MM_Init+0x74>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	6912      	ldr	r2, [r2, #16]
 8006f98:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8006f9a:	4b07      	ldr	r3, [pc, #28]	; (8006fb8 <TL_MM_Init+0x74>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	6952      	ldr	r2, [r2, #20]
 8006fa2:	619a      	str	r2, [r3, #24]

  return;
 8006fa4:	bf00      	nop
}
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	200300b4 	.word	0x200300b4
 8006fb0:	20000240 	.word	0x20000240
 8006fb4:	20030000 	.word	0x20030000
 8006fb8:	20000258 	.word	0x20000258

08006fbc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	4807      	ldr	r0, [pc, #28]	; (8006fe4 <TL_MM_EvtDone+0x28>)
 8006fc8:	f7ff fcfa 	bl	80069c0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	2000      	movs	r0, #0
 8006fd0:	f000 f862 	bl	8007098 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006fd4:	4804      	ldr	r0, [pc, #16]	; (8006fe8 <TL_MM_EvtDone+0x2c>)
 8006fd6:	f000 ff75 	bl	8007ec4 <HW_IPCC_MM_SendFreeBuf>

  return;
 8006fda:	bf00      	nop
}
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20000240 	.word	0x20000240
 8006fe8:	08006fed 	.word	0x08006fed

08006fec <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006ff2:	e00c      	b.n	800700e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006ff4:	1d3b      	adds	r3, r7, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	480a      	ldr	r0, [pc, #40]	; (8007024 <SendFreeBuf+0x38>)
 8006ffa:	f7ff fd28 	bl	8006a4e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <SendFreeBuf+0x3c>)
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	4611      	mov	r1, r2
 8007008:	4618      	mov	r0, r3
 800700a:	f7ff fcd9 	bl	80069c0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800700e:	4805      	ldr	r0, [pc, #20]	; (8007024 <SendFreeBuf+0x38>)
 8007010:	f7ff fc8e 	bl	8006930 <LST_is_empty>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0ec      	beq.n	8006ff4 <SendFreeBuf+0x8>
  }

  return;
 800701a:	bf00      	nop
}
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000240 	.word	0x20000240
 8007028:	20030000 	.word	0x20030000

0800702c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007030:	4805      	ldr	r0, [pc, #20]	; (8007048 <TL_TRACES_Init+0x1c>)
 8007032:	f7ff fc6d 	bl	8006910 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007036:	4b05      	ldr	r3, [pc, #20]	; (800704c <TL_TRACES_Init+0x20>)
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	4a03      	ldr	r2, [pc, #12]	; (8007048 <TL_TRACES_Init+0x1c>)
 800703c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800703e:	f000 ff77 	bl	8007f30 <HW_IPCC_TRACES_Init>

  return;
 8007042:	bf00      	nop
}
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200300bc 	.word	0x200300bc
 800704c:	20030000 	.word	0x20030000

08007050 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007056:	e008      	b.n	800706a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007058:	1d3b      	adds	r3, r7, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4808      	ldr	r0, [pc, #32]	; (8007080 <HW_IPCC_TRACES_EvtNot+0x30>)
 800705e:	f7ff fcf6 	bl	8006a4e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f80d 	bl	8007084 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800706a:	4805      	ldr	r0, [pc, #20]	; (8007080 <HW_IPCC_TRACES_EvtNot+0x30>)
 800706c:	f7ff fc60 	bl	8006930 <LST_is_empty>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f0      	beq.n	8007058 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007076:	bf00      	nop
}
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	200300bc 	.word	0x200300bc

08007084 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80070a4:	79fb      	ldrb	r3, [r7, #7]
 80070a6:	2b06      	cmp	r3, #6
 80070a8:	d845      	bhi.n	8007136 <OutputDbgTrace+0x9e>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <OutputDbgTrace+0x18>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	080070f1 	.word	0x080070f1
 80070b8:	080070f7 	.word	0x080070f7
 80070bc:	0800710b 	.word	0x0800710b
 80070c0:	08007117 	.word	0x08007117
 80070c4:	0800711d 	.word	0x0800711d
 80070c8:	0800712b 	.word	0x0800712b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	7a5b      	ldrb	r3, [r3, #9]
 80070d4:	2bff      	cmp	r3, #255	; 0xff
 80070d6:	d005      	beq.n	80070e4 <OutputDbgTrace+0x4c>
 80070d8:	2bff      	cmp	r3, #255	; 0xff
 80070da:	dc05      	bgt.n	80070e8 <OutputDbgTrace+0x50>
 80070dc:	2b0e      	cmp	r3, #14
 80070de:	d005      	beq.n	80070ec <OutputDbgTrace+0x54>
 80070e0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80070e2:	e001      	b.n	80070e8 <OutputDbgTrace+0x50>
          break;
 80070e4:	bf00      	nop
 80070e6:	e027      	b.n	8007138 <OutputDbgTrace+0xa0>
          break;
 80070e8:	bf00      	nop
 80070ea:	e025      	b.n	8007138 <OutputDbgTrace+0xa0>
          break;
 80070ec:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80070ee:	e023      	b.n	8007138 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80070f4:	e020      	b.n	8007138 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	7a5b      	ldrb	r3, [r3, #9]
 80070fe:	2b0e      	cmp	r3, #14
 8007100:	d001      	beq.n	8007106 <OutputDbgTrace+0x6e>
 8007102:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007104:	e000      	b.n	8007108 <OutputDbgTrace+0x70>
          break;
 8007106:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007108:	e016      	b.n	8007138 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	7a5b      	ldrb	r3, [r3, #9]
 8007112:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007114:	e010      	b.n	8007138 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800711a:	e00d      	b.n	8007138 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	7a5b      	ldrb	r3, [r3, #9]
 8007124:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007126:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007128:	e006      	b.n	8007138 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	7a5b      	ldrb	r3, [r3, #9]
 8007132:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007134:	e000      	b.n	8007138 <OutputDbgTrace+0xa0>

    default:
      break;
 8007136:	bf00      	nop
  }

  return;
 8007138:	bf00      	nop
}
 800713a:	3714      	adds	r7, #20
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007148:	4b03      	ldr	r3, [pc, #12]	; (8007158 <LL_FLASH_GetUDN+0x14>)
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	1fff7580 	.word	0x1fff7580

0800715c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007160:	4b03      	ldr	r3, [pc, #12]	; (8007170 <LL_FLASH_GetDeviceID+0x14>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	b2db      	uxtb	r3, r3
}
 8007166:	4618      	mov	r0, r3
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	1fff7584 	.word	0x1fff7584

08007174 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007178:	4b03      	ldr	r3, [pc, #12]	; (8007188 <LL_FLASH_GetSTCompanyID+0x14>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	0a1b      	lsrs	r3, r3, #8
}
 800717e:	4618      	mov	r0, r3
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	1fff7584 	.word	0x1fff7584

0800718c <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800718c:	b5b0      	push	{r4, r5, r7, lr}
 800718e:	b08c      	sub	sp, #48	; 0x30
 8007190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007192:	4b2a      	ldr	r3, [pc, #168]	; (800723c <APP_BLE_Init+0xb0>)
 8007194:	463c      	mov	r4, r7
 8007196:	461d      	mov	r5, r3
 8007198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800719a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800719c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800719e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80071a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 80071a8:	f000 f960 	bl	800746c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80071ac:	2101      	movs	r1, #1
 80071ae:	2002      	movs	r0, #2
 80071b0:	f000 fee6 	bl	8007f80 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80071b4:	4a22      	ldr	r2, [pc, #136]	; (8007240 <APP_BLE_Init+0xb4>)
 80071b6:	2100      	movs	r1, #0
 80071b8:	2004      	movs	r0, #4
 80071ba:	f000 fff5 	bl	80081a8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 80071be:	463b      	mov	r3, r7
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff fa43 	bl	800664c <SHCI_C2_BLE_Init>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 80071cc:	f7fa fccc 	bl	8001b68 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80071d0:	f000 f962 	bl	8007498 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80071d4:	f7ff fcca 	bl	8006b6c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80071d8:	4b1a      	ldr	r3, [pc, #104]	; (8007244 <APP_BLE_Init+0xb8>)
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80071e0:	4b18      	ldr	r3, [pc, #96]	; (8007244 <APP_BLE_Init+0xb8>)
 80071e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071e6:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80071e8:	4a17      	ldr	r2, [pc, #92]	; (8007248 <APP_BLE_Init+0xbc>)
 80071ea:	2100      	movs	r1, #0
 80071ec:	2001      	movs	r0, #1
 80071ee:	f000 ffdb 	bl	80081a8 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80071f2:	2006      	movs	r0, #6
 80071f4:	f7fe fd87 	bl	8005d06 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 80071f8:	f000 fbc2 	bl	8007980 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80071fc:	4b13      	ldr	r3, [pc, #76]	; (800724c <APP_BLE_Init+0xc0>)
 80071fe:	2200      	movs	r2, #0
 8007200:	4913      	ldr	r1, [pc, #76]	; (8007250 <APP_BLE_Init+0xc4>)
 8007202:	2000      	movs	r0, #0
 8007204:	f7f9 ff3c 	bl	8001080 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8007208:	4b12      	ldr	r3, [pc, #72]	; (8007254 <APP_BLE_Init+0xc8>)
 800720a:	2200      	movs	r2, #0
 800720c:	4912      	ldr	r1, [pc, #72]	; (8007258 <APP_BLE_Init+0xcc>)
 800720e:	2000      	movs	r0, #0
 8007210:	f7f9 ff36 	bl	8001080 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007214:	4b0b      	ldr	r3, [pc, #44]	; (8007244 <APP_BLE_Init+0xb8>)
 8007216:	2200      	movs	r2, #0
 8007218:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800721a:	4b0a      	ldr	r3, [pc, #40]	; (8007244 <APP_BLE_Init+0xb8>)
 800721c:	2200      	movs	r2, #0
 800721e:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8007220:	4b0e      	ldr	r3, [pc, #56]	; (800725c <APP_BLE_Init+0xd0>)
 8007222:	2280      	movs	r2, #128	; 0x80
 8007224:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8007226:	4b0e      	ldr	r3, [pc, #56]	; (8007260 <APP_BLE_Init+0xd4>)
 8007228:	22a0      	movs	r2, #160	; 0xa0
 800722a:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 800722c:	2001      	movs	r0, #1
 800722e:	f000 f9f5 	bl	800761c <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8007232:	bf00      	nop
}
 8007234:	3730      	adds	r7, #48	; 0x30
 8007236:	46bd      	mov	sp, r7
 8007238:	bdb0      	pop	{r4, r5, r7, pc}
 800723a:	bf00      	nop
 800723c:	080084ec 	.word	0x080084ec
 8007240:	08005fb9 	.word	0x08005fb9
 8007244:	20000130 	.word	0x20000130
 8007248:	08007785 	.word	0x08007785
 800724c:	080077bd 	.word	0x080077bd
 8007250:	200001b1 	.word	0x200001b1
 8007254:	080077cd 	.word	0x080077cd
 8007258:	200001b2 	.word	0x200001b2
 800725c:	200001b4 	.word	0x200001b4
 8007260:	200001b6 	.word	0x200001b6

08007264 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08c      	sub	sp, #48	; 0x30
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800726c:	2342      	movs	r3, #66	; 0x42
 800726e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3301      	adds	r3, #1
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	2bff      	cmp	r3, #255	; 0xff
 800727e:	f000 8081 	beq.w	8007384 <SVCCTL_App_Notification+0x120>
 8007282:	2bff      	cmp	r3, #255	; 0xff
 8007284:	f300 80d2 	bgt.w	800742c <SVCCTL_App_Notification+0x1c8>
 8007288:	2b05      	cmp	r3, #5
 800728a:	d002      	beq.n	8007292 <SVCCTL_App_Notification+0x2e>
 800728c:	2b3e      	cmp	r3, #62	; 0x3e
 800728e:	d020      	beq.n	80072d2 <SVCCTL_App_Notification+0x6e>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007290:	e0cc      	b.n	800742c <SVCCTL_App_Notification+0x1c8>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	3302      	adds	r3, #2
 8007296:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800729e:	b29a      	uxth	r2, r3
 80072a0:	4b66      	ldr	r3, [pc, #408]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 80072a2:	8adb      	ldrh	r3, [r3, #22]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d106      	bne.n	80072b6 <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80072a8:	4b64      	ldr	r3, [pc, #400]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80072ae:	4b63      	ldr	r3, [pc, #396]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 80072b6:	2001      	movs	r0, #1
 80072b8:	f000 f9b0 	bl	800761c <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80072bc:	4b60      	ldr	r3, [pc, #384]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 80072be:	2201      	movs	r2, #1
 80072c0:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80072c2:	4b5e      	ldr	r3, [pc, #376]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 80072c4:	8ada      	ldrh	r2, [r3, #22]
 80072c6:	4b5e      	ldr	r3, [pc, #376]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 80072c8:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 80072ca:	485d      	ldr	r0, [pc, #372]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 80072cc:	f000 fb44 	bl	8007958 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80072d0:	e0af      	b.n	8007432 <SVCCTL_App_Notification+0x1ce>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	3302      	adds	r3, #2
 80072d6:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b0c      	cmp	r3, #12
 80072de:	d005      	beq.n	80072ec <SVCCTL_App_Notification+0x88>
 80072e0:	2b0c      	cmp	r3, #12
 80072e2:	dc4b      	bgt.n	800737c <SVCCTL_App_Notification+0x118>
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d017      	beq.n	8007318 <SVCCTL_App_Notification+0xb4>
 80072e8:	2b03      	cmp	r3, #3
          break;
 80072ea:	e047      	b.n	800737c <SVCCTL_App_Notification+0x118>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	3301      	adds	r3, #1
 80072f0:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 80072f2:	4b52      	ldr	r3, [pc, #328]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 80072f4:	8adb      	ldrh	r3, [r3, #22]
 80072f6:	f107 020e 	add.w	r2, r7, #14
 80072fa:	f107 010f 	add.w	r1, r7, #15
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fd6f 	bl	8005de2 <hci_le_read_phy>
 8007304:	4603      	mov	r3, r0
 8007306:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 800730a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800730e:	2b00      	cmp	r3, #0
 8007310:	d136      	bne.n	8007380 <SVCCTL_App_Notification+0x11c>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8007312:	7bfb      	ldrb	r3, [r7, #15]
 8007314:	2b02      	cmp	r3, #2
          break;
 8007316:	e033      	b.n	8007380 <SVCCTL_App_Notification+0x11c>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	3301      	adds	r3, #1
 800731c:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800731e:	4b47      	ldr	r3, [pc, #284]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 8007320:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007324:	4618      	mov	r0, r3
 8007326:	f7f9 ff25 	bl	8001174 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800732a:	4b44      	ldr	r3, [pc, #272]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 800732c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007330:	2b04      	cmp	r3, #4
 8007332:	d104      	bne.n	800733e <SVCCTL_App_Notification+0xda>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007334:	4b41      	ldr	r3, [pc, #260]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 8007336:	2206      	movs	r2, #6
 8007338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800733c:	e003      	b.n	8007346 <SVCCTL_App_Notification+0xe2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800733e:	4b3f      	ldr	r3, [pc, #252]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 8007340:	2205      	movs	r2, #5
 8007342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800734c:	b29a      	uxth	r2, r3
 800734e:	4b3b      	ldr	r3, [pc, #236]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 8007350:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007352:	4b3b      	ldr	r3, [pc, #236]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 8007354:	2200      	movs	r2, #0
 8007356:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007358:	4b38      	ldr	r3, [pc, #224]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 800735a:	8ada      	ldrh	r2, [r3, #22]
 800735c:	4b38      	ldr	r3, [pc, #224]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 800735e:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8007360:	4837      	ldr	r0, [pc, #220]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 8007362:	f000 faf9 	bl	8007958 <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007366:	4b36      	ldr	r3, [pc, #216]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 8007368:	2200      	movs	r2, #0
 800736a:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800736c:	4b33      	ldr	r3, [pc, #204]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 800736e:	8ada      	ldrh	r2, [r3, #22]
 8007370:	4b33      	ldr	r3, [pc, #204]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 8007372:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8007374:	4832      	ldr	r0, [pc, #200]	; (8007440 <SVCCTL_App_Notification+0x1dc>)
 8007376:	f000 faef 	bl	8007958 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800737a:	e002      	b.n	8007382 <SVCCTL_App_Notification+0x11e>
          break;
 800737c:	bf00      	nop
 800737e:	e058      	b.n	8007432 <SVCCTL_App_Notification+0x1ce>
          break;
 8007380:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8007382:	e056      	b.n	8007432 <SVCCTL_App_Notification+0x1ce>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	3302      	adds	r3, #2
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007394:	d046      	beq.n	8007424 <SVCCTL_App_Notification+0x1c0>
 8007396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800739a:	dc49      	bgt.n	8007430 <SVCCTL_App_Notification+0x1cc>
 800739c:	2b04      	cmp	r3, #4
 800739e:	d036      	beq.n	800740e <SVCCTL_App_Notification+0x1aa>
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	db45      	blt.n	8007430 <SVCCTL_App_Notification+0x1cc>
 80073a4:	f240 420a 	movw	r2, #1034	; 0x40a
 80073a8:	4293      	cmp	r3, r2
 80073aa:	dc41      	bgt.n	8007430 <SVCCTL_App_Notification+0x1cc>
 80073ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073b0:	db3e      	blt.n	8007430 <SVCCTL_App_Notification+0x1cc>
 80073b2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80073b6:	2b0a      	cmp	r3, #10
 80073b8:	d83a      	bhi.n	8007430 <SVCCTL_App_Notification+0x1cc>
 80073ba:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <SVCCTL_App_Notification+0x15c>)
 80073bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c0:	08007429 	.word	0x08007429
 80073c4:	08007407 	.word	0x08007407
 80073c8:	08007429 	.word	0x08007429
 80073cc:	08007429 	.word	0x08007429
 80073d0:	08007429 	.word	0x08007429
 80073d4:	080073ed 	.word	0x080073ed
 80073d8:	08007431 	.word	0x08007431
 80073dc:	08007429 	.word	0x08007429
 80073e0:	08007429 	.word	0x08007429
 80073e4:	080073f9 	.word	0x080073f9
 80073e8:	08007429 	.word	0x08007429
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80073ec:	4b13      	ldr	r3, [pc, #76]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 80073ee:	8adb      	ldrh	r3, [r3, #22]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe f8e2 	bl	80055ba <aci_gap_allow_rebond>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 80073f6:	e018      	b.n	800742a <SVCCTL_App_Notification+0x1c6>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 80073f8:	4b10      	ldr	r3, [pc, #64]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 80073fa:	8adb      	ldrh	r3, [r3, #22]
 80073fc:	2101      	movs	r1, #1
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe f925 	bl	800564e <aci_gap_numeric_comparison_value_confirm_yesno>
      break;
 8007404:	e011      	b.n	800742a <SVCCTL_App_Notification+0x1c6>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8007406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007408:	3302      	adds	r3, #2
 800740a:	623b      	str	r3, [r7, #32]
           break;    
 800740c:	e00d      	b.n	800742a <SVCCTL_App_Notification+0x1c6>
          BSP_LED_On(LED_GREEN);
 800740e:	2001      	movs	r0, #1
 8007410:	f7fa fd84 	bl	8001f1c <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8007414:	4b09      	ldr	r3, [pc, #36]	; (800743c <SVCCTL_App_Notification+0x1d8>)
 8007416:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800741a:	210a      	movs	r1, #10
 800741c:	4618      	mov	r0, r3
 800741e:	f7f9 ff35 	bl	800128c <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007422:	e002      	b.n	800742a <SVCCTL_App_Notification+0x1c6>
      break;
 8007424:	bf00      	nop
 8007426:	e003      	b.n	8007430 <SVCCTL_App_Notification+0x1cc>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8007428:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800742a:	e001      	b.n	8007430 <SVCCTL_App_Notification+0x1cc>
      break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <SVCCTL_App_Notification+0x1ce>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007430:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007432:	2301      	movs	r3, #1
}
 8007434:	4618      	mov	r0, r3
 8007436:	3730      	adds	r7, #48	; 0x30
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	20000130 	.word	0x20000130
 8007440:	20000554 	.word	0x20000554

08007444 <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8007448:	f000 face 	bl	80079e8 <P2PS_APP_SW1_Button_Action>
}
 800744c:	bf00      	nop
 800744e:	bd80      	pop	{r7, pc}

08007450 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8007450:	b480      	push	{r7}
 8007452:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
#endif
  
  return;
 8007454:	bf00      	nop
}
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr

0800745e <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800745e:	b480      	push	{r7}
 8007460:	af00      	add	r7, sp, #0
}
 8007462:	bf00      	nop
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007472:	4b06      	ldr	r3, [pc, #24]	; (800748c <Ble_Tl_Init+0x20>)
 8007474:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007476:	4b06      	ldr	r3, [pc, #24]	; (8007490 <Ble_Tl_Init+0x24>)
 8007478:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800747a:	463b      	mov	r3, r7
 800747c:	4619      	mov	r1, r3
 800747e:	4805      	ldr	r0, [pc, #20]	; (8007494 <Ble_Tl_Init+0x28>)
 8007480:	f7fe fd7e 	bl	8005f80 <hci_init>

  return;
 8007484:	bf00      	nop
}
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	200300d4 	.word	0x200300d4
 8007490:	08007857 	.word	0x08007857
 8007494:	0800781f 	.word	0x0800781f

08007498 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8007498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800749a:	b08f      	sub	sp, #60	; 0x3c
 800749c:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800749e:	2300      	movs	r3, #0
 80074a0:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80074a2:	f7fe fc7a 	bl	8005d9a <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80074a6:	f000 f929 	bl	80076fc <BleGetBdAddress>
 80074aa:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	2106      	movs	r1, #6
 80074b0:	2000      	movs	r0, #0
 80074b2:	f7fe fb68 	bl	8005b86 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	795a      	ldrb	r2, [r3, #5]
 80074ba:	4b52      	ldr	r3, [pc, #328]	; (8007604 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80074bc:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	791a      	ldrb	r2, [r3, #4]
 80074c2:	4b50      	ldr	r3, [pc, #320]	; (8007604 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80074c4:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	78da      	ldrb	r2, [r3, #3]
 80074ca:	4b4e      	ldr	r3, [pc, #312]	; (8007604 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80074cc:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80074ce:	69fb      	ldr	r3, [r7, #28]
 80074d0:	789a      	ldrb	r2, [r3, #2]
 80074d2:	4b4c      	ldr	r3, [pc, #304]	; (8007604 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80074d4:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	785a      	ldrb	r2, [r3, #1]
 80074da:	4b4a      	ldr	r3, [pc, #296]	; (8007604 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80074dc:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	781a      	ldrb	r2, [r3, #0]
 80074e2:	4b48      	ldr	r3, [pc, #288]	; (8007604 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80074e4:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80074e6:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80074ea:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80074ec:	f7ff fe2a 	bl	8007144 <LL_FLASH_GetUDN>
 80074f0:	4603      	mov	r3, r0
 80074f2:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80074f4:	1d3b      	adds	r3, r7, #4
 80074f6:	461a      	mov	r2, r3
 80074f8:	2106      	movs	r1, #6
 80074fa:	202e      	movs	r0, #46	; 0x2e
 80074fc:	f7fe fb43 	bl	8005b86 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8007500:	4a41      	ldr	r2, [pc, #260]	; (8007608 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8007502:	2110      	movs	r1, #16
 8007504:	2018      	movs	r0, #24
 8007506:	f7fe fb3e 	bl	8005b86 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800750a:	4a40      	ldr	r2, [pc, #256]	; (800760c <Ble_Hci_Gap_Gatt_Init+0x174>)
 800750c:	2110      	movs	r1, #16
 800750e:	2008      	movs	r0, #8
 8007510:	f7fe fb39 	bl	8005b86 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007514:	2118      	movs	r1, #24
 8007516:	2001      	movs	r0, #1
 8007518:	f7fe fb9e 	bl	8005c58 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800751c:	f7fe f8ee 	bl	80056fc <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8007524:	7efb      	ldrb	r3, [r7, #27]
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800752c:	7efb      	ldrb	r3, [r7, #27]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d01e      	beq.n	8007570 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "BREATHE";
 8007532:	4b37      	ldr	r3, [pc, #220]	; (8007610 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8007534:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8007536:	f107 0212 	add.w	r2, r7, #18
 800753a:	7ef8      	ldrb	r0, [r7, #27]
 800753c:	f107 030e 	add.w	r3, r7, #14
 8007540:	9301      	str	r3, [sp, #4]
 8007542:	f107 0310 	add.w	r3, r7, #16
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	4613      	mov	r3, r2
 800754a:	2207      	movs	r2, #7
 800754c:	2100      	movs	r1, #0
 800754e:	f7fd ff29 	bl	80053a4 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8007552:	8a7c      	ldrh	r4, [r7, #18]
 8007554:	8a3d      	ldrh	r5, [r7, #16]
 8007556:	6978      	ldr	r0, [r7, #20]
 8007558:	f7f8 fe10 	bl	800017c <strlen>
 800755c:	4603      	mov	r3, r0
 800755e:	b2da      	uxtb	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	2200      	movs	r2, #0
 8007568:	4629      	mov	r1, r5
 800756a:	4620      	mov	r0, r4
 800756c:	f7fe fa84 	bl	8005a78 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8007570:	8a78      	ldrh	r0, [r7, #18]
 8007572:	89f9      	ldrh	r1, [r7, #14]
 8007574:	463b      	mov	r3, r7
 8007576:	9300      	str	r3, [sp, #0]
 8007578:	2302      	movs	r3, #2
 800757a:	2200      	movs	r2, #0
 800757c:	f7fe fa7c 	bl	8005a78 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8007580:	2202      	movs	r2, #2
 8007582:	2102      	movs	r1, #2
 8007584:	2000      	movs	r0, #0
 8007586:	f7fe fc94 	bl	8005eb2 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800758a:	4b22      	ldr	r3, [pc, #136]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800758c:	2201      	movs	r2, #1
 800758e:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8007590:	4b20      	ldr	r3, [pc, #128]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f7fd fe13 	bl	80051c0 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800759a:	4b1e      	ldr	r3, [pc, #120]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800759c:	2201      	movs	r2, #1
 800759e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80075a0:	4b1c      	ldr	r3, [pc, #112]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075a2:	2208      	movs	r2, #8
 80075a4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80075a6:	4b1b      	ldr	r3, [pc, #108]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075a8:	2210      	movs	r2, #16
 80075aa:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80075ac:	4b19      	ldr	r3, [pc, #100]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80075b2:	4b18      	ldr	r3, [pc, #96]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075b4:	4a18      	ldr	r2, [pc, #96]	; (8007618 <Ble_Hci_Gap_Gatt_Init+0x180>)
 80075b6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80075b8:	4b16      	ldr	r3, [pc, #88]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80075be:	4b15      	ldr	r3, [pc, #84]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075c0:	789c      	ldrb	r4, [r3, #2]
 80075c2:	4b14      	ldr	r3, [pc, #80]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075c4:	785d      	ldrb	r5, [r3, #1]
 80075c6:	4b13      	ldr	r3, [pc, #76]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075c8:	791b      	ldrb	r3, [r3, #4]
 80075ca:	4a12      	ldr	r2, [pc, #72]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075cc:	7952      	ldrb	r2, [r2, #5]
 80075ce:	4911      	ldr	r1, [pc, #68]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075d0:	78c9      	ldrb	r1, [r1, #3]
 80075d2:	4810      	ldr	r0, [pc, #64]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075d4:	6880      	ldr	r0, [r0, #8]
 80075d6:	2600      	movs	r6, #0
 80075d8:	9604      	str	r6, [sp, #16]
 80075da:	9003      	str	r0, [sp, #12]
 80075dc:	9102      	str	r1, [sp, #8]
 80075de:	9201      	str	r2, [sp, #4]
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	2201      	movs	r2, #1
 80075e6:	4629      	mov	r1, r5
 80075e8:	4620      	mov	r0, r4
 80075ea:	f7fd fe33 	bl	8005254 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80075ee:	4b09      	ldr	r3, [pc, #36]	; (8007614 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80075f0:	789b      	ldrb	r3, [r3, #2]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 80075f6:	f7fd ffbc 	bl	8005572 <aci_gap_configure_whitelist>
   }
}
 80075fa:	bf00      	nop
 80075fc:	3724      	adds	r7, #36	; 0x24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007602:	bf00      	nop
 8007604:	20000028 	.word	0x20000028
 8007608:	080086d0 	.word	0x080086d0
 800760c:	080086e0 	.word	0x080086e0
 8007610:	0800851c 	.word	0x0800851c
 8007614:	20000130 	.word	0x20000130
 8007618:	0001b207 	.word	0x0001b207

0800761c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08c      	sub	sp, #48	; 0x30
 8007620:	af08      	add	r7, sp, #32
 8007622:	4603      	mov	r3, r0
 8007624:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007626:	2342      	movs	r3, #66	; 0x42
 8007628:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800762a:	79fb      	ldrb	r3, [r7, #7]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d106      	bne.n	800763e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8007630:	4b2b      	ldr	r3, [pc, #172]	; (80076e0 <Adv_Request+0xc4>)
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8007636:	4b2b      	ldr	r3, [pc, #172]	; (80076e4 <Adv_Request+0xc8>)
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	81bb      	strh	r3, [r7, #12]
 800763c:	e005      	b.n	800764a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800763e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8007642:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8007644:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8007648:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800764a:	4b27      	ldr	r3, [pc, #156]	; (80076e8 <Adv_Request+0xcc>)
 800764c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007650:	4618      	mov	r0, r3
 8007652:	f7f9 fd8f 	bl	8001174 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	2b02      	cmp	r3, #2
 800765a:	d10d      	bne.n	8007678 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800765c:	4b22      	ldr	r3, [pc, #136]	; (80076e8 <Adv_Request+0xcc>)
 800765e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007662:	2b01      	cmp	r3, #1
 8007664:	d004      	beq.n	8007670 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8007666:	4b20      	ldr	r3, [pc, #128]	; (80076e8 <Adv_Request+0xcc>)
 8007668:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800766c:	2b02      	cmp	r3, #2
 800766e:	d103      	bne.n	8007678 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8007670:	f7fd fca4 	bl	8004fbc <aci_gap_set_non_discoverable>
 8007674:	4603      	mov	r3, r0
 8007676:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8007678:	4a1b      	ldr	r2, [pc, #108]	; (80076e8 <Adv_Request+0xcc>)
 800767a:	79fb      	ldrb	r3, [r7, #7]
 800767c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8007680:	4b19      	ldr	r3, [pc, #100]	; (80076e8 <Adv_Request+0xcc>)
 8007682:	7e1b      	ldrb	r3, [r3, #24]
 8007684:	89ba      	ldrh	r2, [r7, #12]
 8007686:	89f9      	ldrh	r1, [r7, #14]
 8007688:	2000      	movs	r0, #0
 800768a:	9006      	str	r0, [sp, #24]
 800768c:	2000      	movs	r0, #0
 800768e:	9005      	str	r0, [sp, #20]
 8007690:	4816      	ldr	r0, [pc, #88]	; (80076ec <Adv_Request+0xd0>)
 8007692:	9004      	str	r0, [sp, #16]
 8007694:	9303      	str	r3, [sp, #12]
 8007696:	4b16      	ldr	r3, [pc, #88]	; (80076f0 <Adv_Request+0xd4>)
 8007698:	9302      	str	r3, [sp, #8]
 800769a:	2308      	movs	r3, #8
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	2300      	movs	r3, #0
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	2000      	movs	r0, #0
 80076a6:	f7fd fcad 	bl	8005004 <aci_gap_set_discoverable>
 80076aa:	4603      	mov	r3, r0
 80076ac:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80076ae:	4911      	ldr	r1, [pc, #68]	; (80076f4 <Adv_Request+0xd8>)
 80076b0:	200e      	movs	r0, #14
 80076b2:	f7fd ff02 	bl	80054ba <aci_gap_update_adv_data>
 80076b6:	4603      	mov	r3, r0
 80076b8:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 80076ba:	7afb      	ldrb	r3, [r7, #11]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10a      	bne.n	80076d6 <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 80076c0:	79fb      	ldrb	r3, [r7, #7]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d107      	bne.n	80076d6 <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80076c6:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <Adv_Request+0xcc>)
 80076c8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80076cc:	490a      	ldr	r1, [pc, #40]	; (80076f8 <Adv_Request+0xdc>)
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7f9 fddc 	bl	800128c <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop
}
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	200001b4 	.word	0x200001b4
 80076e4:	200001b6 	.word	0x200001b6
 80076e8:	20000130 	.word	0x20000130
 80076ec:	20000149 	.word	0x20000149
 80076f0:	080086f0 	.word	0x080086f0
 80076f4:	20000028 	.word	0x20000028
 80076f8:	0001e046 	.word	0x0001e046

080076fc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8007702:	f7ff fd1f 	bl	8007144 <LL_FLASH_GetUDN>
 8007706:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770e:	d023      	beq.n	8007758 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8007710:	f7ff fd30 	bl	8007174 <LL_FLASH_GetSTCompanyID>
 8007714:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007716:	f7ff fd21 	bl	800715c <LL_FLASH_GetDeviceID>
 800771a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	b2da      	uxtb	r2, r3
 8007720:	4b16      	ldr	r3, [pc, #88]	; (800777c <BleGetBdAddress+0x80>)
 8007722:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	b2da      	uxtb	r2, r3
 800772a:	4b14      	ldr	r3, [pc, #80]	; (800777c <BleGetBdAddress+0x80>)
 800772c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	b2da      	uxtb	r2, r3
 8007732:	4b12      	ldr	r3, [pc, #72]	; (800777c <BleGetBdAddress+0x80>)
 8007734:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	b2da      	uxtb	r2, r3
 800773a:	4b10      	ldr	r3, [pc, #64]	; (800777c <BleGetBdAddress+0x80>)
 800773c:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	0a1b      	lsrs	r3, r3, #8
 8007742:	b2da      	uxtb	r2, r3
 8007744:	4b0d      	ldr	r3, [pc, #52]	; (800777c <BleGetBdAddress+0x80>)
 8007746:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	0c1b      	lsrs	r3, r3, #16
 800774c:	b2da      	uxtb	r2, r3
 800774e:	4b0b      	ldr	r3, [pc, #44]	; (800777c <BleGetBdAddress+0x80>)
 8007750:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8007752:	4b0a      	ldr	r3, [pc, #40]	; (800777c <BleGetBdAddress+0x80>)
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e00b      	b.n	8007770 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8007758:	2000      	movs	r0, #0
 800775a:	f7fe fdc7 	bl	80062ec <OTP_Read>
 800775e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	e001      	b.n	8007770 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800776c:	4b04      	ldr	r3, [pc, #16]	; (8007780 <BleGetBdAddress+0x84>)
 800776e:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8007770:	697b      	ldr	r3, [r7, #20]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3718      	adds	r7, #24
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	2000025c 	.word	0x2000025c
 8007780:	080086c8 	.word	0x080086c8

08007784 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 800778a:	2001      	movs	r0, #1
 800778c:	f7fa fbe0 	bl	8001f50 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007790:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <Adv_Cancel+0x34>)
 8007792:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007796:	2b05      	cmp	r3, #5
 8007798:	d00a      	beq.n	80077b0 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 800779a:	2300      	movs	r3, #0
 800779c:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 800779e:	f7fd fc0d 	bl	8004fbc <aci_gap_set_non_discoverable>
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80077a6:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <Adv_Cancel+0x34>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
}
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20000130 	.word	0x20000130

080077bc <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80077c0:	2100      	movs	r1, #0
 80077c2:	2001      	movs	r0, #1
 80077c4:	f000 fd12 	bl	80081ec <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80077c8:	bf00      	nop
}
 80077ca:	bd80      	pop	{r7, pc}

080077cc <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 80077d0:	2001      	movs	r0, #1
 80077d2:	f7fa fbbd 	bl	8001f50 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 80077d6:	bf00      	nop
 80077d8:	bd80      	pop	{r7, pc}

080077da <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80077da:	b580      	push	{r7, lr}
 80077dc:	b082      	sub	sp, #8
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80077e2:	2100      	movs	r1, #0
 80077e4:	2004      	movs	r0, #4
 80077e6:	f000 fd01 	bl	80081ec <UTIL_SEQ_SetTask>
  return;
 80077ea:	bf00      	nop
}
 80077ec:	3708      	adds	r7, #8
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}

080077f2 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b082      	sub	sp, #8
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80077fa:	2001      	movs	r0, #1
 80077fc:	f000 fd62 	bl	80082c4 <UTIL_SEQ_SetEvt>
  return;
 8007800:	bf00      	nop
}
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007810:	2001      	movs	r0, #1
 8007812:	f000 fd77 	bl	8008304 <UTIL_SEQ_WaitEvt>
  return;
 8007816:	bf00      	nop
}
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b084      	sub	sp, #16
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	3308      	adds	r3, #8
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff f9eb 	bl	8006c0c <SVCCTL_UserEvtRx>
 8007836:	4603      	mov	r3, r0
 8007838:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800783a:	7afb      	ldrb	r3, [r7, #11]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8007846:	e002      	b.n	800784e <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
}
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b084      	sub	sp, #16
 800785a:	af00      	add	r7, sp, #0
 800785c:	4603      	mov	r3, r0
 800785e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d002      	beq.n	800786c <BLE_StatusNot+0x16>
 8007866:	2b01      	cmp	r3, #1
 8007868:	d006      	beq.n	8007878 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800786a:	e00b      	b.n	8007884 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800786c:	231f      	movs	r3, #31
 800786e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007870:	68f8      	ldr	r0, [r7, #12]
 8007872:	f000 fce7 	bl	8008244 <UTIL_SEQ_PauseTask>
      break;
 8007876:	e005      	b.n	8007884 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007878:	231f      	movs	r3, #31
 800787a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fd01 	bl	8008284 <UTIL_SEQ_ResumeTask>
      break;
 8007882:	bf00      	nop
  }
  return;
 8007884:	bf00      	nop
}
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <P2PS_STM_App_Notification>:
static void P2PS_TimeChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d019      	beq.n	80078d0 <P2PS_STM_App_Notification+0x44>
 800789c:	2b03      	cmp	r3, #3
 800789e:	dc52      	bgt.n	8007946 <P2PS_STM_App_Notification+0xba>
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <P2PS_STM_App_Notification+0x1e>
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d00a      	beq.n	80078be <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80078a8:	e04d      	b.n	8007946 <P2PS_STM_App_Notification+0xba>
      P2P_Server_App_Context.Notification_Status = 1;
 80078aa:	4b2a      	ldr	r3, [pc, #168]	; (8007954 <P2PS_STM_App_Notification+0xc8>)
 80078ac:	2201      	movs	r2, #1
 80078ae:	701a      	strb	r2, [r3, #0]
      HW_TS_Start(P2P_Server_App_Context.Update_timer_Id, TIME_CHANGE_PERIOD);
 80078b0:	4b28      	ldr	r3, [pc, #160]	; (8007954 <P2PS_STM_App_Notification+0xc8>)
 80078b2:	7b9b      	ldrb	r3, [r3, #14]
 80078b4:	21cc      	movs	r1, #204	; 0xcc
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7f9 fce8 	bl	800128c <HW_TS_Start>
      break;
 80078bc:	e046      	b.n	800794c <P2PS_STM_App_Notification+0xc0>
      P2P_Server_App_Context.Notification_Status = 0;
 80078be:	4b25      	ldr	r3, [pc, #148]	; (8007954 <P2PS_STM_App_Notification+0xc8>)
 80078c0:	2200      	movs	r2, #0
 80078c2:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(P2P_Server_App_Context.Update_timer_Id);
 80078c4:	4b23      	ldr	r3, [pc, #140]	; (8007954 <P2PS_STM_App_Notification+0xc8>)
 80078c6:	7b9b      	ldrb	r3, [r3, #14]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7f9 fc53 	bl	8001174 <HW_TS_Stop>
      break;
 80078ce:	e03d      	b.n	800794c <P2PS_STM_App_Notification+0xc0>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d117      	bne.n	800790a <P2PS_STM_App_Notification+0x7e>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	3301      	adds	r3, #1
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d105      	bne.n	80078f2 <P2PS_STM_App_Notification+0x66>
          BSP_LED_On(LED_BLUE);
 80078e6:	2000      	movs	r0, #0
 80078e8:	f7fa fb18 	bl	8001f1c <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80078ec:	4b19      	ldr	r3, [pc, #100]	; (8007954 <P2PS_STM_App_Notification+0xc8>)
 80078ee:	2201      	movs	r2, #1
 80078f0:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	3301      	adds	r3, #1
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d105      	bne.n	800790a <P2PS_STM_App_Notification+0x7e>
          BSP_LED_Off(LED_BLUE);
 80078fe:	2000      	movs	r0, #0
 8007900:	f7fa fb26 	bl	8001f50 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8007904:	4b13      	ldr	r3, [pc, #76]	; (8007954 <P2PS_STM_App_Notification+0xc8>)
 8007906:	2200      	movs	r2, #0
 8007908:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d11a      	bne.n	800794a <P2PS_STM_App_Notification+0xbe>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	3301      	adds	r3, #1
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d105      	bne.n	800792c <P2PS_STM_App_Notification+0xa0>
          BSP_LED_On(LED_BLUE);
 8007920:	2000      	movs	r0, #0
 8007922:	f7fa fafb 	bl	8001f1c <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <P2PS_STM_App_Notification+0xc8>)
 8007928:	2201      	movs	r2, #1
 800792a:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	3301      	adds	r3, #1
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d108      	bne.n	800794a <P2PS_STM_App_Notification+0xbe>
          BSP_LED_Off(LED_BLUE);
 8007938:	2000      	movs	r0, #0
 800793a:	f7fa fb09 	bl	8001f50 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800793e:	4b05      	ldr	r3, [pc, #20]	; (8007954 <P2PS_STM_App_Notification+0xc8>)
 8007940:	2200      	movs	r2, #0
 8007942:	709a      	strb	r2, [r3, #2]
      break;
 8007944:	e001      	b.n	800794a <P2PS_STM_App_Notification+0xbe>
      break;
 8007946:	bf00      	nop
 8007948:	e000      	b.n	800794c <P2PS_STM_App_Notification+0xc0>
      break;
 800794a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800794c:	bf00      	nop
}
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	200001b8 	.word	0x200001b8

08007958 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <P2PS_APP_Notification+0x1c>
 8007968:	2b01      	cmp	r3, #1
 800796a:	d000      	beq.n	800796e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800796c:	e003      	b.n	8007976 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800796e:	f000 f825 	bl	80079bc <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8007972:	e000      	b.n	8007976 <P2PS_APP_Notification+0x1e>
    break;
 8007974:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8007976:	bf00      	nop
}
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
	...

08007980 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  UTIL_SEQ_RegTask( 1<< CFG_MY_TASK_NOTIFY_TIME, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8007984:	4a09      	ldr	r2, [pc, #36]	; (80079ac <P2PS_APP_Init+0x2c>)
 8007986:	2100      	movs	r1, #0
 8007988:	2010      	movs	r0, #16
 800798a:	f000 fc0d 	bl	80081a8 <UTIL_SEQ_RegTask>

  /* Create timer to change the time and update charecteristic */
    HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800798e:	4b08      	ldr	r3, [pc, #32]	; (80079b0 <P2PS_APP_Init+0x30>)
 8007990:	2201      	movs	r2, #1
 8007992:	4908      	ldr	r1, [pc, #32]	; (80079b4 <P2PS_APP_Init+0x34>)
 8007994:	2000      	movs	r0, #0
 8007996:	f7f9 fb73 	bl	8001080 <HW_TS_Create>
			P2PS_TimeChange_Timer_Callback);

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800799a:	4b07      	ldr	r3, [pc, #28]	; (80079b8 <P2PS_APP_Init+0x38>)
 800799c:	2200      	movs	r2, #0
 800799e:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80079a0:	f000 f80c 	bl	80079bc <P2PS_APP_LED_BUTTON_context_Init>
  P2PS_APP_context_Init();
 80079a4:	f000 f828 	bl	80079f8 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 80079a8:	bf00      	nop
}
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	08007a2d 	.word	0x08007a2d
 80079b0:	08007a1d 	.word	0x08007a1d
 80079b4:	200001c6 	.word	0x200001c6
 80079b8:	200001b8 	.word	0x200001b8

080079bc <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 80079c0:	2000      	movs	r0, #0
 80079c2:	f7fa fac5 	bl	8001f50 <BSP_LED_Off>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80079c6:	4b07      	ldr	r3, [pc, #28]	; (80079e4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80079d2:	4b04      	ldr	r3, [pc, #16]	; (80079e4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80079d4:	2201      	movs	r2, #1
 80079d6:	729a      	strb	r2, [r3, #10]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80079da:	2200      	movs	r2, #0
 80079dc:	72da      	strb	r2, [r3, #11]
#endif

}
 80079de:	bf00      	nop
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	200001b8 	.word	0x200001b8

080079e8 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80079ec:	2100      	movs	r1, #0
 80079ee:	2002      	movs	r0, #2
 80079f0:	f000 fbfc 	bl	80081ec <UTIL_SEQ_SetTask>

  return;
 80079f4:	bf00      	nop
}
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.TimeControl.Parameter = 0;
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <P2PS_APP_context_Init+0x20>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	809a      	strh	r2, [r3, #4]
	P2P_Server_App_Context.TimeControl.TimeStamp = 0xFF;
 8007a02:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <P2PS_APP_context_Init+0x20>)
 8007a04:	22ff      	movs	r2, #255	; 0xff
 8007a06:	80da      	strh	r2, [r3, #6]
	P2P_Server_App_Context.TimeControl.Value = 0x11;
 8007a08:	4b03      	ldr	r3, [pc, #12]	; (8007a18 <P2PS_APP_context_Init+0x20>)
 8007a0a:	2211      	movs	r2, #17
 8007a0c:	811a      	strh	r2, [r3, #8]
}
 8007a0e:	bf00      	nop
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	200001b8 	.word	0x200001b8

08007a1c <P2PS_TimeChange_Timer_Callback>:

static void P2PS_TimeChange_Timer_Callback(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 8007a20:	2100      	movs	r1, #0
 8007a22:	2010      	movs	r0, #16
 8007a24:	f000 fbe2 	bl	80081ec <UTIL_SEQ_SetTask>
}
 8007a28:	bf00      	nop
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <P2PS_Send_Notification>:

void P2PS_Send_Notification(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
	uint8_t value[4];

	value[0] = (uint8_t)(P2P_Server_App_Context.TimeControl.TimeStamp & 0x00FF);
 8007a32:	4b19      	ldr	r3, [pc, #100]	; (8007a98 <P2PS_Send_Notification+0x6c>)
 8007a34:	88db      	ldrh	r3, [r3, #6]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	713b      	strb	r3, [r7, #4]
	value[1] = (uint8_t)(P2P_Server_App_Context.TimeControl.TimeStamp >> 8);
 8007a3a:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <P2PS_Send_Notification+0x6c>)
 8007a3c:	88db      	ldrh	r3, [r3, #6]
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	717b      	strb	r3, [r7, #5]
	value[2] = (uint8_t)(P2P_Server_App_Context.TimeControl.Value & 0x00FF);
 8007a46:	4b14      	ldr	r3, [pc, #80]	; (8007a98 <P2PS_Send_Notification+0x6c>)
 8007a48:	891b      	ldrh	r3, [r3, #8]
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	71bb      	strb	r3, [r7, #6]
	value[3] = (uint8_t)(P2P_Server_App_Context.TimeControl.Value >> 8);
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <P2PS_Send_Notification+0x6c>)
 8007a50:	891b      	ldrh	r3, [r3, #8]
 8007a52:	0a1b      	lsrs	r3, r3, #8
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	71fb      	strb	r3, [r7, #7]
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <P2PS_Send_Notification+0x6c>)
 8007a5c:	7adb      	ldrb	r3, [r3, #11]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <P2PS_Send_Notification+0x3e>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8007a62:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <P2PS_Send_Notification+0x6c>)
 8007a64:	2201      	movs	r2, #1
 8007a66:	72da      	strb	r2, [r3, #11]
 8007a68:	e002      	b.n	8007a70 <P2PS_Send_Notification+0x44>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8007a6a:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <P2PS_Send_Notification+0x6c>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	72da      	strb	r2, [r3, #11]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <P2PS_Send_Notification+0x6c>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <P2PS_Send_Notification+0x62>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8007a78:	4908      	ldr	r1, [pc, #32]	; (8007a9c <P2PS_Send_Notification+0x70>)
 8007a7a:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8007a7e:	f7fe fdb1 	bl	80065e4 <P2PS_STM_App_Update_Char>
    P2PS_STM_App_Update_Char(0x0000,(uint8_t *)&value);
 8007a82:	1d3b      	adds	r3, r7, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	2000      	movs	r0, #0
 8007a88:	f7fe fdac 	bl	80065e4 <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
}
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	bf00      	nop
 8007a98:	200001b8 	.word	0x200001b8
 8007a9c:	200001c2 	.word	0x200001c2

08007aa0 <LL_PWR_EnableBootC2>:
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007aa4:	4b05      	ldr	r3, [pc, #20]	; (8007abc <LL_PWR_EnableBootC2+0x1c>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4a04      	ldr	r2, [pc, #16]	; (8007abc <LL_PWR_EnableBootC2+0x1c>)
 8007aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007aae:	60d3      	str	r3, [r2, #12]
}
 8007ab0:	bf00      	nop
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	58000400 	.word	0x58000400

08007ac0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007aca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007ace:	4905      	ldr	r1, [pc, #20]	; (8007ae4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	58000800 	.word	0x58000800

08007ae8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007af0:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007af2:	6a1a      	ldr	r2, [r3, #32]
 8007af4:	4904      	ldr	r1, [pc, #16]	; (8007b08 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	620b      	str	r3, [r1, #32]
}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	58000800 	.word	0x58000800

08007b0c <LL_AHB3_GRP1_EnableClock>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b30:	68fb      	ldr	r3, [r7, #12]
}
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b4a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b5e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4013      	ands	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007b68:	68fb      	ldr	r3, [r7, #12]
}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <LL_C1_IPCC_EnableIT_TXF>:
{
 8007b76:	b480      	push	{r7}
 8007b78:	b083      	sub	sp, #12
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	601a      	str	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <LL_C1_IPCC_EnableIT_RXO>:
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f043 0201 	orr.w	r2, r3, #1
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	601a      	str	r2, [r3, #0]
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685a      	ldr	r2, [r3, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	041b      	lsls	r3, r3, #16
 8007bc8:	43db      	mvns	r3, r3
 8007bca:	401a      	ands	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	605a      	str	r2, [r3, #4]
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <LL_C1_IPCC_DisableTransmitChannel>:
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	041b      	lsls	r3, r3, #16
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	605a      	str	r2, [r3, #4]
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	43db      	mvns	r3, r3
 8007c12:	401a      	ands	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	605a      	str	r2, [r3, #4]
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	609a      	str	r2, [r3, #8]
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <LL_C1_IPCC_SetFlag_CHx>:
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	041a      	lsls	r2, r3, #16
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	609a      	str	r2, [r3, #8]
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	683a      	ldr	r2, [r7, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d101      	bne.n	8007c7a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007c76:	2301      	movs	r3, #1
 8007c78:	e000      	b.n	8007c7c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	69da      	ldr	r2, [r3, #28]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	4013      	ands	r3, r2
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d101      	bne.n	8007ca4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
	...

08007cb4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007cb8:	2102      	movs	r1, #2
 8007cba:	4819      	ldr	r0, [pc, #100]	; (8007d20 <HW_IPCC_Rx_Handler+0x6c>)
 8007cbc:	f7ff ffe4 	bl	8007c88 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <HW_IPCC_Rx_Handler+0x26>
 8007cc6:	4b16      	ldr	r3, [pc, #88]	; (8007d20 <HW_IPCC_Rx_Handler+0x6c>)
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	43db      	mvns	r3, r3
 8007ccc:	f003 0302 	and.w	r3, r3, #2
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d002      	beq.n	8007cda <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8007cd4:	f000 f8ea 	bl	8007eac <HW_IPCC_SYS_EvtHandler>
 8007cd8:	e01f      	b.n	8007d1a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4810      	ldr	r0, [pc, #64]	; (8007d20 <HW_IPCC_Rx_Handler+0x6c>)
 8007cde:	f7ff ffd3 	bl	8007c88 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d008      	beq.n	8007cfa <HW_IPCC_Rx_Handler+0x46>
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <HW_IPCC_Rx_Handler+0x6c>)
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d102      	bne.n	8007cfa <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8007cf4:	f000 f89e 	bl	8007e34 <HW_IPCC_BLE_EvtHandler>
 8007cf8:	e00f      	b.n	8007d1a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8007cfa:	2108      	movs	r1, #8
 8007cfc:	4808      	ldr	r0, [pc, #32]	; (8007d20 <HW_IPCC_Rx_Handler+0x6c>)
 8007cfe:	f7ff ffc3 	bl	8007c88 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <HW_IPCC_Rx_Handler+0x68>
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <HW_IPCC_Rx_Handler+0x6c>)
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d002      	beq.n	8007d1c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8007d16:	f000 f915 	bl	8007f44 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
}
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	58000c00 	.word	0x58000c00

08007d24 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007d28:	2102      	movs	r1, #2
 8007d2a:	4822      	ldr	r0, [pc, #136]	; (8007db4 <HW_IPCC_Tx_Handler+0x90>)
 8007d2c:	f7ff ff97 	bl	8007c5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d109      	bne.n	8007d4a <HW_IPCC_Tx_Handler+0x26>
 8007d36:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <HW_IPCC_Tx_Handler+0x90>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	43db      	mvns	r3, r3
 8007d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007d44:	f000 f8a6 	bl	8007e94 <HW_IPCC_SYS_CmdEvtHandler>
 8007d48:	e031      	b.n	8007dae <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	4819      	ldr	r0, [pc, #100]	; (8007db4 <HW_IPCC_Tx_Handler+0x90>)
 8007d4e:	f7ff ff86 	bl	8007c5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <HW_IPCC_Tx_Handler+0x48>
 8007d58:	4b16      	ldr	r3, [pc, #88]	; (8007db4 <HW_IPCC_Tx_Handler+0x90>)
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	43db      	mvns	r3, r3
 8007d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007d66:	f000 f895 	bl	8007e94 <HW_IPCC_SYS_CmdEvtHandler>
 8007d6a:	e020      	b.n	8007dae <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007d6c:	2108      	movs	r1, #8
 8007d6e:	4811      	ldr	r0, [pc, #68]	; (8007db4 <HW_IPCC_Tx_Handler+0x90>)
 8007d70:	f7ff ff75 	bl	8007c5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d109      	bne.n	8007d8e <HW_IPCC_Tx_Handler+0x6a>
 8007d7a:	4b0e      	ldr	r3, [pc, #56]	; (8007db4 <HW_IPCC_Tx_Handler+0x90>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	43db      	mvns	r3, r3
 8007d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8007d88:	f000 f8be 	bl	8007f08 <HW_IPCC_MM_FreeBufHandler>
 8007d8c:	e00f      	b.n	8007dae <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007d8e:	2120      	movs	r1, #32
 8007d90:	4808      	ldr	r0, [pc, #32]	; (8007db4 <HW_IPCC_Tx_Handler+0x90>)
 8007d92:	f7ff ff64 	bl	8007c5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d109      	bne.n	8007db0 <HW_IPCC_Tx_Handler+0x8c>
 8007d9c:	4b05      	ldr	r3, [pc, #20]	; (8007db4 <HW_IPCC_Tx_Handler+0x90>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	43db      	mvns	r3, r3
 8007da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d002      	beq.n	8007db0 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007daa:	f000 f84f 	bl	8007e4c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007dae:	bf00      	nop
 8007db0:	bf00      	nop
}
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	58000c00 	.word	0x58000c00

08007db8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007dbc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007dc0:	f7ff febd 	bl	8007b3e <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007dc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007dc8:	f7ff fe7a 	bl	8007ac0 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007dcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007dd0:	f7ff fe8a 	bl	8007ae8 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007dd4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007dd6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007dd8:	f7ff fe62 	bl	8007aa0 <LL_PWR_EnableBootC2>

  return;
 8007ddc:	bf00      	nop
}
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007de4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007de8:	f7ff fe90 	bl	8007b0c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007dec:	4806      	ldr	r0, [pc, #24]	; (8007e08 <HW_IPCC_Init+0x28>)
 8007dee:	f7ff fed2 	bl	8007b96 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8007df2:	4805      	ldr	r0, [pc, #20]	; (8007e08 <HW_IPCC_Init+0x28>)
 8007df4:	f7ff febf 	bl	8007b76 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007df8:	202c      	movs	r0, #44	; 0x2c
 8007dfa:	f7fa fb48 	bl	800248e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007dfe:	202d      	movs	r0, #45	; 0x2d
 8007e00:	f7fa fb45 	bl	800248e <HAL_NVIC_EnableIRQ>

  return;
 8007e04:	bf00      	nop
}
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	58000c00 	.word	0x58000c00

08007e0c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007e10:	2101      	movs	r1, #1
 8007e12:	4802      	ldr	r0, [pc, #8]	; (8007e1c <HW_IPCC_BLE_Init+0x10>)
 8007e14:	f7ff fef4 	bl	8007c00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007e18:	bf00      	nop
}
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	58000c00 	.word	0x58000c00

08007e20 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8007e24:	2101      	movs	r1, #1
 8007e26:	4802      	ldr	r0, [pc, #8]	; (8007e30 <HW_IPCC_BLE_SendCmd+0x10>)
 8007e28:	f7ff ff0a 	bl	8007c40 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007e2c:	bf00      	nop
}
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	58000c00 	.word	0x58000c00

08007e34 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007e38:	f7fe ffcc 	bl	8006dd4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	4802      	ldr	r0, [pc, #8]	; (8007e48 <HW_IPCC_BLE_EvtHandler+0x14>)
 8007e40:	f7ff fef0 	bl	8007c24 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007e44:	bf00      	nop
}
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	58000c00 	.word	0x58000c00

08007e4c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007e50:	2120      	movs	r1, #32
 8007e52:	4803      	ldr	r0, [pc, #12]	; (8007e60 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007e54:	f7ff fec2 	bl	8007bdc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007e58:	f7fe ffec 	bl	8006e34 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007e5c:	bf00      	nop
}
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	58000c00 	.word	0x58000c00

08007e64 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007e68:	2102      	movs	r1, #2
 8007e6a:	4802      	ldr	r0, [pc, #8]	; (8007e74 <HW_IPCC_SYS_Init+0x10>)
 8007e6c:	f7ff fec8 	bl	8007c00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007e70:	bf00      	nop
}
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	58000c00 	.word	0x58000c00

08007e78 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007e7c:	2102      	movs	r1, #2
 8007e7e:	4804      	ldr	r0, [pc, #16]	; (8007e90 <HW_IPCC_SYS_SendCmd+0x18>)
 8007e80:	f7ff fede 	bl	8007c40 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007e84:	2102      	movs	r1, #2
 8007e86:	4802      	ldr	r0, [pc, #8]	; (8007e90 <HW_IPCC_SYS_SendCmd+0x18>)
 8007e88:	f7ff fe95 	bl	8007bb6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007e8c:	bf00      	nop
}
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	58000c00 	.word	0x58000c00

08007e94 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007e98:	2102      	movs	r1, #2
 8007e9a:	4803      	ldr	r0, [pc, #12]	; (8007ea8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007e9c:	f7ff fe9e 	bl	8007bdc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007ea0:	f7ff f818 	bl	8006ed4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007ea4:	bf00      	nop
}
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	58000c00 	.word	0x58000c00

08007eac <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007eb0:	f7ff f826 	bl	8006f00 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007eb4:	2102      	movs	r1, #2
 8007eb6:	4802      	ldr	r0, [pc, #8]	; (8007ec0 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007eb8:	f7ff feb4 	bl	8007c24 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007ebc:	bf00      	nop
}
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	58000c00 	.word	0x58000c00

08007ec4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007ecc:	2108      	movs	r1, #8
 8007ece:	480c      	ldr	r0, [pc, #48]	; (8007f00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007ed0:	f7ff fec5 	bl	8007c5e <LL_C1_IPCC_IsActiveFlag_CHx>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007eda:	4a0a      	ldr	r2, [pc, #40]	; (8007f04 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007ee0:	2108      	movs	r1, #8
 8007ee2:	4807      	ldr	r0, [pc, #28]	; (8007f00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007ee4:	f7ff fe67 	bl	8007bb6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007ee8:	e006      	b.n	8007ef8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007eee:	2108      	movs	r1, #8
 8007ef0:	4803      	ldr	r0, [pc, #12]	; (8007f00 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007ef2:	f7ff fea5 	bl	8007c40 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8007ef6:	bf00      	nop
}
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	58000c00 	.word	0x58000c00
 8007f04:	20000264 	.word	0x20000264

08007f08 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007f0c:	2108      	movs	r1, #8
 8007f0e:	4806      	ldr	r0, [pc, #24]	; (8007f28 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007f10:	f7ff fe64 	bl	8007bdc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8007f14:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007f1a:	2108      	movs	r1, #8
 8007f1c:	4802      	ldr	r0, [pc, #8]	; (8007f28 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007f1e:	f7ff fe8f 	bl	8007c40 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007f22:	bf00      	nop
}
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	58000c00 	.word	0x58000c00
 8007f2c:	20000264 	.word	0x20000264

08007f30 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007f34:	2108      	movs	r1, #8
 8007f36:	4802      	ldr	r0, [pc, #8]	; (8007f40 <HW_IPCC_TRACES_Init+0x10>)
 8007f38:	f7ff fe62 	bl	8007c00 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007f3c:	bf00      	nop
}
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	58000c00 	.word	0x58000c00

08007f44 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007f48:	f7ff f882 	bl	8007050 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007f4c:	2108      	movs	r1, #8
 8007f4e:	4802      	ldr	r0, [pc, #8]	; (8007f58 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007f50:	f7ff fe68 	bl	8007c24 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007f54:	bf00      	nop
}
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	58000c00 	.word	0x58000c00

08007f5c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007f60:	4b05      	ldr	r3, [pc, #20]	; (8007f78 <UTIL_LPM_Init+0x1c>)
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <UTIL_LPM_Init+0x20>)
 8007f68:	2200      	movs	r2, #0
 8007f6a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007f6c:	bf00      	nop
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000268 	.word	0x20000268
 8007f7c:	2000026c 	.word	0x2000026c

08007f80 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8007f90:	613b      	str	r3, [r7, #16]
  return(result);
 8007f92:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8007f94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f96:	b672      	cpsid	i
}
 8007f98:	bf00      	nop
  
  switch(state)
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d008      	beq.n	8007fb2 <UTIL_LPM_SetOffMode+0x32>
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d10e      	bne.n	8007fc2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8007fa4:	4b0d      	ldr	r3, [pc, #52]	; (8007fdc <UTIL_LPM_SetOffMode+0x5c>)
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	4a0b      	ldr	r2, [pc, #44]	; (8007fdc <UTIL_LPM_SetOffMode+0x5c>)
 8007fae:	6013      	str	r3, [r2, #0]
      break;
 8007fb0:	e008      	b.n	8007fc4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	43da      	mvns	r2, r3
 8007fb6:	4b09      	ldr	r3, [pc, #36]	; (8007fdc <UTIL_LPM_SetOffMode+0x5c>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4013      	ands	r3, r2
 8007fbc:	4a07      	ldr	r2, [pc, #28]	; (8007fdc <UTIL_LPM_SetOffMode+0x5c>)
 8007fbe:	6013      	str	r3, [r2, #0]
      break;
 8007fc0:	e000      	b.n	8007fc4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8007fc2:	bf00      	nop
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f383 8810 	msr	PRIMASK, r3
}
 8007fce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8007fd0:	bf00      	nop
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	2000026c 	.word	0x2000026c

08007fe0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08c      	sub	sp, #48	; 0x30
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8007fe8:	4b67      	ldr	r3, [pc, #412]	; (8008188 <UTIL_SEQ_Run+0x1a8>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8007fee:	4b66      	ldr	r3, [pc, #408]	; (8008188 <UTIL_SEQ_Run+0x1a8>)
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	4a64      	ldr	r2, [pc, #400]	; (8008188 <UTIL_SEQ_Run+0x1a8>)
 8007ff8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8007ffa:	e083      	b.n	8008104 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008000:	e002      	b.n	8008008 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	3301      	adds	r3, #1
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008008:	4a60      	ldr	r2, [pc, #384]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008010:	4b5f      	ldr	r3, [pc, #380]	; (8008190 <UTIL_SEQ_Run+0x1b0>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	401a      	ands	r2, r3
 8008016:	4b5c      	ldr	r3, [pc, #368]	; (8008188 <UTIL_SEQ_Run+0x1a8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4013      	ands	r3, r2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0f0      	beq.n	8008002 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8008020:	4a5a      	ldr	r2, [pc, #360]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008028:	4b59      	ldr	r3, [pc, #356]	; (8008190 <UTIL_SEQ_Run+0x1b0>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	401a      	ands	r2, r3
 800802e:	4b56      	ldr	r3, [pc, #344]	; (8008188 <UTIL_SEQ_Run+0x1a8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4013      	ands	r3, r2
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008036:	4a55      	ldr	r2, [pc, #340]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 8008038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803a:	00db      	lsls	r3, r3, #3
 800803c:	4413      	add	r3, r2
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	4013      	ands	r3, r2
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008048:	4a50      	ldr	r2, [pc, #320]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 800804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804c:	00db      	lsls	r3, r3, #3
 800804e:	4413      	add	r3, r2
 8008050:	f04f 32ff 	mov.w	r2, #4294967295
 8008054:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008056:	4a4d      	ldr	r2, [pc, #308]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	4413      	add	r3, r2
 800805e:	685a      	ldr	r2, [r3, #4]
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	4013      	ands	r3, r2
 8008064:	4618      	mov	r0, r3
 8008066:	f000 f99d 	bl	80083a4 <SEQ_BitPosition>
 800806a:	4603      	mov	r3, r0
 800806c:	461a      	mov	r2, r3
 800806e:	4b49      	ldr	r3, [pc, #292]	; (8008194 <UTIL_SEQ_Run+0x1b4>)
 8008070:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008072:	4a46      	ldr	r2, [pc, #280]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 8008074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4413      	add	r3, r2
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	4b45      	ldr	r3, [pc, #276]	; (8008194 <UTIL_SEQ_Run+0x1b4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2101      	movs	r1, #1
 8008082:	fa01 f303 	lsl.w	r3, r1, r3
 8008086:	43db      	mvns	r3, r3
 8008088:	401a      	ands	r2, r3
 800808a:	4940      	ldr	r1, [pc, #256]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 800808c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808e:	00db      	lsls	r3, r3, #3
 8008090:	440b      	add	r3, r1
 8008092:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008094:	f3ef 8310 	mrs	r3, PRIMASK
 8008098:	61bb      	str	r3, [r7, #24]
  return(result);
 800809a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800809c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800809e:	b672      	cpsid	i
}
 80080a0:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80080a2:	4b3c      	ldr	r3, [pc, #240]	; (8008194 <UTIL_SEQ_Run+0x1b4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2201      	movs	r2, #1
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	43da      	mvns	r2, r3
 80080ae:	4b3a      	ldr	r3, [pc, #232]	; (8008198 <UTIL_SEQ_Run+0x1b8>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4013      	ands	r3, r2
 80080b4:	4a38      	ldr	r2, [pc, #224]	; (8008198 <UTIL_SEQ_Run+0x1b8>)
 80080b6:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80080b8:	2302      	movs	r3, #2
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080bc:	e013      	b.n	80080e6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80080be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c0:	3b01      	subs	r3, #1
 80080c2:	4a32      	ldr	r2, [pc, #200]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 80080c4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80080c8:	4b32      	ldr	r3, [pc, #200]	; (8008194 <UTIL_SEQ_Run+0x1b4>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2201      	movs	r2, #1
 80080ce:	fa02 f303 	lsl.w	r3, r2, r3
 80080d2:	43da      	mvns	r2, r3
 80080d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d6:	3b01      	subs	r3, #1
 80080d8:	400a      	ands	r2, r1
 80080da:	492c      	ldr	r1, [pc, #176]	; (800818c <UTIL_SEQ_Run+0x1ac>)
 80080dc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80080e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e2:	3b01      	subs	r3, #1
 80080e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e8      	bne.n	80080be <UTIL_SEQ_Run+0xde>
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f383 8810 	msr	PRIMASK, r3
}
 80080f6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80080f8:	4b26      	ldr	r3, [pc, #152]	; (8008194 <UTIL_SEQ_Run+0x1b4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a27      	ldr	r2, [pc, #156]	; (800819c <UTIL_SEQ_Run+0x1bc>)
 80080fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008102:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008104:	4b24      	ldr	r3, [pc, #144]	; (8008198 <UTIL_SEQ_Run+0x1b8>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	4b21      	ldr	r3, [pc, #132]	; (8008190 <UTIL_SEQ_Run+0x1b0>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	401a      	ands	r2, r3
 800810e:	4b1e      	ldr	r3, [pc, #120]	; (8008188 <UTIL_SEQ_Run+0x1a8>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4013      	ands	r3, r2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <UTIL_SEQ_Run+0x148>
 8008118:	4b21      	ldr	r3, [pc, #132]	; (80081a0 <UTIL_SEQ_Run+0x1c0>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4b21      	ldr	r3, [pc, #132]	; (80081a4 <UTIL_SEQ_Run+0x1c4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4013      	ands	r3, r2
 8008122:	2b00      	cmp	r3, #0
 8008124:	f43f af6a 	beq.w	8007ffc <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008128:	4b1a      	ldr	r3, [pc, #104]	; (8008194 <UTIL_SEQ_Run+0x1b4>)
 800812a:	f04f 32ff 	mov.w	r2, #4294967295
 800812e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008130:	f000 f92a 	bl	8008388 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008134:	f3ef 8310 	mrs	r3, PRIMASK
 8008138:	613b      	str	r3, [r7, #16]
  return(result);
 800813a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800813c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800813e:	b672      	cpsid	i
}
 8008140:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8008142:	4b15      	ldr	r3, [pc, #84]	; (8008198 <UTIL_SEQ_Run+0x1b8>)
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	4b12      	ldr	r3, [pc, #72]	; (8008190 <UTIL_SEQ_Run+0x1b0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	401a      	ands	r2, r3
 800814c:	4b0e      	ldr	r3, [pc, #56]	; (8008188 <UTIL_SEQ_Run+0x1a8>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4013      	ands	r3, r2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d108      	bne.n	8008168 <UTIL_SEQ_Run+0x188>
 8008156:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <UTIL_SEQ_Run+0x1c0>)
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <UTIL_SEQ_Run+0x1c4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4013      	ands	r3, r2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8008164:	f7f8 fa29 	bl	80005ba <UTIL_SEQ_Idle>
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f383 8810 	msr	PRIMASK, r3
}
 8008172:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8008174:	f000 f90f 	bl	8008396 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008178:	4a03      	ldr	r2, [pc, #12]	; (8008188 <UTIL_SEQ_Run+0x1a8>)
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	6013      	str	r3, [r2, #0]

  return;
 800817e:	bf00      	nop
}
 8008180:	3730      	adds	r7, #48	; 0x30
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	2000003c 	.word	0x2000003c
 800818c:	20000300 	.word	0x20000300
 8008190:	20000038 	.word	0x20000038
 8008194:	2000027c 	.word	0x2000027c
 8008198:	20000270 	.word	0x20000270
 800819c:	20000280 	.word	0x20000280
 80081a0:	20000274 	.word	0x20000274
 80081a4:	20000278 	.word	0x20000278

080081a8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081b4:	f3ef 8310 	mrs	r3, PRIMASK
 80081b8:	617b      	str	r3, [r7, #20]
  return(result);
 80081ba:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80081bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80081be:	b672      	cpsid	i
}
 80081c0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	f000 f8ee 	bl	80083a4 <SEQ_BitPosition>
 80081c8:	4603      	mov	r3, r0
 80081ca:	4619      	mov	r1, r3
 80081cc:	4a06      	ldr	r2, [pc, #24]	; (80081e8 <UTIL_SEQ_RegTask+0x40>)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	f383 8810 	msr	PRIMASK, r3
}
 80081de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80081e0:	bf00      	nop
}
 80081e2:	3720      	adds	r7, #32
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	20000280 	.word	0x20000280

080081ec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f6:	f3ef 8310 	mrs	r3, PRIMASK
 80081fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80081fc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80081fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008200:	b672      	cpsid	i
}
 8008202:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008204:	4b0d      	ldr	r3, [pc, #52]	; (800823c <UTIL_SEQ_SetTask+0x50>)
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4313      	orrs	r3, r2
 800820c:	4a0b      	ldr	r2, [pc, #44]	; (800823c <UTIL_SEQ_SetTask+0x50>)
 800820e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008210:	4a0b      	ldr	r2, [pc, #44]	; (8008240 <UTIL_SEQ_SetTask+0x54>)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	431a      	orrs	r2, r3
 800821c:	4908      	ldr	r1, [pc, #32]	; (8008240 <UTIL_SEQ_SetTask+0x54>)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f383 8810 	msr	PRIMASK, r3
}
 800822e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008230:	bf00      	nop
}
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr
 800823c:	20000270 	.word	0x20000270
 8008240:	20000300 	.word	0x20000300

08008244 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800824c:	f3ef 8310 	mrs	r3, PRIMASK
 8008250:	60fb      	str	r3, [r7, #12]
  return(result);
 8008252:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008256:	b672      	cpsid	i
}
 8008258:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	43da      	mvns	r2, r3
 800825e:	4b08      	ldr	r3, [pc, #32]	; (8008280 <UTIL_SEQ_PauseTask+0x3c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4013      	ands	r3, r2
 8008264:	4a06      	ldr	r2, [pc, #24]	; (8008280 <UTIL_SEQ_PauseTask+0x3c>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f383 8810 	msr	PRIMASK, r3
}
 8008272:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008274:	bf00      	nop
}
 8008276:	371c      	adds	r7, #28
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	20000038 	.word	0x20000038

08008284 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800828c:	f3ef 8310 	mrs	r3, PRIMASK
 8008290:	60fb      	str	r3, [r7, #12]
  return(result);
 8008292:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008294:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008296:	b672      	cpsid	i
}
 8008298:	bf00      	nop

  TaskMask |= TaskId_bm;
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <UTIL_SEQ_ResumeTask+0x3c>)
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	4a07      	ldr	r2, [pc, #28]	; (80082c0 <UTIL_SEQ_ResumeTask+0x3c>)
 80082a4:	6013      	str	r3, [r2, #0]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	f383 8810 	msr	PRIMASK, r3
}
 80082b0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80082b2:	bf00      	nop
}
 80082b4:	371c      	adds	r7, #28
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000038 	.word	0x20000038

080082c4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082cc:	f3ef 8310 	mrs	r3, PRIMASK
 80082d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80082d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80082d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80082d6:	b672      	cpsid	i
}
 80082d8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80082da:	4b09      	ldr	r3, [pc, #36]	; (8008300 <UTIL_SEQ_SetEvt+0x3c>)
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	4a07      	ldr	r2, [pc, #28]	; (8008300 <UTIL_SEQ_SetEvt+0x3c>)
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	f383 8810 	msr	PRIMASK, r3
}
 80082f0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80082f2:	bf00      	nop
}
 80082f4:	371c      	adds	r7, #28
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	20000274 	.word	0x20000274

08008304 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b086      	sub	sp, #24
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800830c:	4b1b      	ldr	r3, [pc, #108]	; (800837c <UTIL_SEQ_WaitEvt+0x78>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008312:	4b1a      	ldr	r3, [pc, #104]	; (800837c <UTIL_SEQ_WaitEvt+0x78>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d102      	bne.n	8008322 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
 8008320:	e005      	b.n	800832e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8008322:	4b16      	ldr	r3, [pc, #88]	; (800837c <UTIL_SEQ_WaitEvt+0x78>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2201      	movs	r2, #1
 8008328:	fa02 f303 	lsl.w	r3, r2, r3
 800832c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800832e:	4b14      	ldr	r3, [pc, #80]	; (8008380 <UTIL_SEQ_WaitEvt+0x7c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8008334:	4a12      	ldr	r2, [pc, #72]	; (8008380 <UTIL_SEQ_WaitEvt+0x7c>)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800833a:	e005      	b.n	8008348 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800833c:	4b10      	ldr	r3, [pc, #64]	; (8008380 <UTIL_SEQ_WaitEvt+0x7c>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4619      	mov	r1, r3
 8008342:	6978      	ldr	r0, [r7, #20]
 8008344:	f7f8 f940 	bl	80005c8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8008348:	4b0e      	ldr	r3, [pc, #56]	; (8008384 <UTIL_SEQ_WaitEvt+0x80>)
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	4b0c      	ldr	r3, [pc, #48]	; (8008380 <UTIL_SEQ_WaitEvt+0x7c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4013      	ands	r3, r2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0f2      	beq.n	800833c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008356:	4a09      	ldr	r2, [pc, #36]	; (800837c <UTIL_SEQ_WaitEvt+0x78>)
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800835c:	4b08      	ldr	r3, [pc, #32]	; (8008380 <UTIL_SEQ_WaitEvt+0x7c>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	43da      	mvns	r2, r3
 8008362:	4b08      	ldr	r3, [pc, #32]	; (8008384 <UTIL_SEQ_WaitEvt+0x80>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4013      	ands	r3, r2
 8008368:	4a06      	ldr	r2, [pc, #24]	; (8008384 <UTIL_SEQ_WaitEvt+0x80>)
 800836a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800836c:	4a04      	ldr	r2, [pc, #16]	; (8008380 <UTIL_SEQ_WaitEvt+0x7c>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6013      	str	r3, [r2, #0]

  return;
 8008372:	bf00      	nop
}
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	2000027c 	.word	0x2000027c
 8008380:	20000278 	.word	0x20000278
 8008384:	20000274 	.word	0x20000274

08008388 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008388:	b480      	push	{r7}
 800838a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800838c:	bf00      	nop
}
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008396:	b480      	push	{r7}
 8008398:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800839a:	bf00      	nop
}
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	041b      	lsls	r3, r3, #16
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d104      	bne.n	80083c4 <SEQ_BitPosition+0x20>
 80083ba:	2310      	movs	r3, #16
 80083bc:	73fb      	strb	r3, [r7, #15]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	041b      	lsls	r3, r3, #16
 80083c2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d105      	bne.n	80083da <SEQ_BitPosition+0x36>
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	3308      	adds	r3, #8
 80083d2:	73fb      	strb	r3, [r7, #15]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	021b      	lsls	r3, r3, #8
 80083d8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d105      	bne.n	80083f0 <SEQ_BitPosition+0x4c>
 80083e4:	7bfb      	ldrb	r3, [r7, #15]
 80083e6:	3304      	adds	r3, #4
 80083e8:	73fb      	strb	r3, [r7, #15]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	0f1b      	lsrs	r3, r3, #28
 80083f4:	4a07      	ldr	r2, [pc, #28]	; (8008414 <SEQ_BitPosition+0x70>)
 80083f6:	5cd2      	ldrb	r2, [r2, r3]
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	4413      	add	r3, r2
 80083fc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	f1c3 031f 	rsb	r3, r3, #31
 8008404:	b2db      	uxtb	r3, r3
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	080086f8 	.word	0x080086f8

08008418 <__libc_init_array>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4d0d      	ldr	r5, [pc, #52]	; (8008450 <__libc_init_array+0x38>)
 800841c:	4c0d      	ldr	r4, [pc, #52]	; (8008454 <__libc_init_array+0x3c>)
 800841e:	1b64      	subs	r4, r4, r5
 8008420:	10a4      	asrs	r4, r4, #2
 8008422:	2600      	movs	r6, #0
 8008424:	42a6      	cmp	r6, r4
 8008426:	d109      	bne.n	800843c <__libc_init_array+0x24>
 8008428:	4d0b      	ldr	r5, [pc, #44]	; (8008458 <__libc_init_array+0x40>)
 800842a:	4c0c      	ldr	r4, [pc, #48]	; (800845c <__libc_init_array+0x44>)
 800842c:	f000 f82e 	bl	800848c <_init>
 8008430:	1b64      	subs	r4, r4, r5
 8008432:	10a4      	asrs	r4, r4, #2
 8008434:	2600      	movs	r6, #0
 8008436:	42a6      	cmp	r6, r4
 8008438:	d105      	bne.n	8008446 <__libc_init_array+0x2e>
 800843a:	bd70      	pop	{r4, r5, r6, pc}
 800843c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008440:	4798      	blx	r3
 8008442:	3601      	adds	r6, #1
 8008444:	e7ee      	b.n	8008424 <__libc_init_array+0xc>
 8008446:	f855 3b04 	ldr.w	r3, [r5], #4
 800844a:	4798      	blx	r3
 800844c:	3601      	adds	r6, #1
 800844e:	e7f2      	b.n	8008436 <__libc_init_array+0x1e>
 8008450:	08008708 	.word	0x08008708
 8008454:	08008708 	.word	0x08008708
 8008458:	08008708 	.word	0x08008708
 800845c:	0800870c 	.word	0x0800870c

08008460 <memcpy>:
 8008460:	440a      	add	r2, r1
 8008462:	4291      	cmp	r1, r2
 8008464:	f100 33ff 	add.w	r3, r0, #4294967295
 8008468:	d100      	bne.n	800846c <memcpy+0xc>
 800846a:	4770      	bx	lr
 800846c:	b510      	push	{r4, lr}
 800846e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008472:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008476:	4291      	cmp	r1, r2
 8008478:	d1f9      	bne.n	800846e <memcpy+0xe>
 800847a:	bd10      	pop	{r4, pc}

0800847c <memset>:
 800847c:	4402      	add	r2, r0
 800847e:	4603      	mov	r3, r0
 8008480:	4293      	cmp	r3, r2
 8008482:	d100      	bne.n	8008486 <memset+0xa>
 8008484:	4770      	bx	lr
 8008486:	f803 1b01 	strb.w	r1, [r3], #1
 800848a:	e7f9      	b.n	8008480 <memset+0x4>

0800848c <_init>:
 800848c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800848e:	bf00      	nop
 8008490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008492:	bc08      	pop	{r3}
 8008494:	469e      	mov	lr, r3
 8008496:	4770      	bx	lr

08008498 <_fini>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	bf00      	nop
 800849c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800849e:	bc08      	pop	{r3}
 80084a0:	469e      	mov	lr, r3
 80084a2:	4770      	bx	lr
