
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a780  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  0800a8c0  0800a8c0  0001a8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800adc4  0800adc4  0001adc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800adc8  0800adc8  0001adc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  20000008  0800adcc  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000010c  0800aed0  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200001a8  0800af69  000201a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001e8  0800afa6  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000096  200001fc  0800afb7  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000480  20000298  0800b04d  00020298  2**3
                  ALLOC
 11 ._user_heap_stack 00001400  20000718  0800b04d  00020718  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020292  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_line   0002ceae  00000000  00000000  000202c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0003cbe1  00000000  00000000  0004d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006d5e  00000000  00000000  00089d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00002988  00000000  00000000  00090ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f82cf  00000000  00000000  00093438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 000026f0  00000000  00000000  0018b708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002cd31  00000000  00000000  0018ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001bab29  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000b584  00000000  00000000  001bab7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .stabstr      0000014d  00000000  00000000  001c6100  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000298 	.word	0x20000298
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a8a8 	.word	0x0800a8a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000029c 	.word	0x2000029c
 800017c:	0800a8a8 	.word	0x0800a8a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <strcmp>:
 8000190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000198:	2a01      	cmp	r2, #1
 800019a:	bf28      	it	cs
 800019c:	429a      	cmpcs	r2, r3
 800019e:	d0f7      	beq.n	8000190 <strcmp>
 80001a0:	1ad0      	subs	r0, r2, r3
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000250:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000252:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000254:	3304      	adds	r3, #4

08000256 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000256:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000258:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800025a:	d3f9      	bcc.n	8000250 <CopyDataInit>
  bx lr
 800025c:	4770      	bx	lr

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800025e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000260:	3004      	adds	r0, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000262:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>
  bx lr
 8000266:	4770      	bx	lr

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800026c:	f002 f8f8 	bl	8002460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000270:	480b      	ldr	r0, [pc, #44]	; (80002a0 <LoopForever+0x8>)
 8000272:	490c      	ldr	r1, [pc, #48]	; (80002a4 <LoopForever+0xc>)
 8000274:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <LoopForever+0x10>)
 8000276:	2300      	movs	r3, #0
 8000278:	f7ff ffed 	bl	8000256 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800027c:	480b      	ldr	r0, [pc, #44]	; (80002ac <LoopForever+0x14>)
 800027e:	490c      	ldr	r1, [pc, #48]	; (80002b0 <LoopForever+0x18>)
 8000280:	2300      	movs	r3, #0
 8000282:	f7ff ffee 	bl	8000262 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000286:	480b      	ldr	r0, [pc, #44]	; (80002b4 <LoopForever+0x1c>)
 8000288:	490b      	ldr	r1, [pc, #44]	; (80002b8 <LoopForever+0x20>)
 800028a:	2300      	movs	r3, #0
 800028c:	f7ff ffe9 	bl	8000262 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000290:	f008 ffba 	bl	8009208 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000294:	f001 fafa 	bl	800188c <main>

08000298 <LoopForever>:

LoopForever:
  b LoopForever
 8000298:	e7fe      	b.n	8000298 <LoopForever>
 800029a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800029c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80002a0:	20000008 	.word	0x20000008
 80002a4:	2000010c 	.word	0x2000010c
 80002a8:	0800adcc 	.word	0x0800adcc
  INIT_BSS _sbss, _ebss
 80002ac:	20000298 	.word	0x20000298
 80002b0:	20000718 	.word	0x20000718
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80002b4:	200301e0 	.word	0x200301e0
 80002b8:	20030a57 	.word	0x20030a57

080002bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC1_IRQHandler>
	...

080002c0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80002ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80002ce:	4905      	ldr	r1, [pc, #20]	; (80002e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4313      	orrs	r3, r2
 80002d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	58000800 	.word	0x58000800

080002e8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4013      	ands	r3, r2
 800030a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800030c:	68fb      	ldr	r3, [r7, #12]
}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800031a:	b480      	push	{r7}
 800031c:	b085      	sub	sp, #20
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000326:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800032a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4313      	orrs	r3, r2
 8000332:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4013      	ands	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000344:	68fb      	ldr	r3, [r7, #12]
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000352:	b580      	push	{r7, lr}
 8000354:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000356:	f002 fabf 	bl	80028d8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800035a:	f002 fac3 	bl	80028e4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800035e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000362:	f7ff ffad 	bl	80002c0 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000366:	f000 f821 	bl	80003ac <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800036a:	f000 f8c3 	bl	80004f4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800036e:	bf00      	nop
}
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000374:	b5b0      	push	{r4, r5, r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <APPD_EnableCPU2+0x34>)
 800037c:	1d3c      	adds	r4, r7, #4
 800037e:	461d      	mov	r5, r3
 8000380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000388:	c403      	stmia	r4!, {r0, r1}
 800038a:	8022      	strh	r2, [r4, #0]
 800038c:	3402      	adds	r4, #2
 800038e:	0c13      	lsrs	r3, r2, #16
 8000390:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000392:	f007 fd13 	bl	8007dbc <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4618      	mov	r0, r3
 800039a:	f007 f836 	bl	800740a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800039e:	bf00      	nop
}
 80003a0:	3720      	adds	r7, #32
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bdb0      	pop	{r4, r5, r7, pc}
 80003a6:	bf00      	nop
 80003a8:	0800a8c0 	.word	0x0800a8c0

080003ac <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	77fb      	strb	r3, [r7, #31]
 80003d0:	e038      	b.n	8000444 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80003d2:	7ffb      	ldrb	r3, [r7, #31]
 80003d4:	4a44      	ldr	r2, [pc, #272]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	4413      	add	r3, r2
 80003da:	799b      	ldrb	r3, [r3, #6]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d02b      	beq.n	8000438 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80003e0:	7ffb      	ldrb	r3, [r7, #31]
 80003e2:	4a41      	ldr	r2, [pc, #260]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003e8:	4a40      	ldr	r2, [pc, #256]	; (80004ec <APPD_SetCPU2GpioConfig+0x140>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d01b      	beq.n	8000426 <APPD_SetCPU2GpioConfig+0x7a>
 80003ee:	4a3f      	ldr	r2, [pc, #252]	; (80004ec <APPD_SetCPU2GpioConfig+0x140>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d823      	bhi.n	800043c <APPD_SetCPU2GpioConfig+0x90>
 80003f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003f8:	d003      	beq.n	8000402 <APPD_SetCPU2GpioConfig+0x56>
 80003fa:	4a3d      	ldr	r2, [pc, #244]	; (80004f0 <APPD_SetCPU2GpioConfig+0x144>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d009      	beq.n	8000414 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000400:	e01c      	b.n	800043c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000402:	7ffb      	ldrb	r3, [r7, #31]
 8000404:	4a38      	ldr	r2, [pc, #224]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	4413      	add	r3, r2
 800040a:	889a      	ldrh	r2, [r3, #4]
 800040c:	8bbb      	ldrh	r3, [r7, #28]
 800040e:	4313      	orrs	r3, r2
 8000410:	83bb      	strh	r3, [r7, #28]
          break;
 8000412:	e014      	b.n	800043e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000414:	7ffb      	ldrb	r3, [r7, #31]
 8000416:	4a34      	ldr	r2, [pc, #208]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	4413      	add	r3, r2
 800041c:	889a      	ldrh	r2, [r3, #4]
 800041e:	8b7b      	ldrh	r3, [r7, #26]
 8000420:	4313      	orrs	r3, r2
 8000422:	837b      	strh	r3, [r7, #26]
          break;
 8000424:	e00b      	b.n	800043e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000426:	7ffb      	ldrb	r3, [r7, #31]
 8000428:	4a2f      	ldr	r2, [pc, #188]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	4413      	add	r3, r2
 800042e:	889a      	ldrh	r2, [r3, #4]
 8000430:	8b3b      	ldrh	r3, [r7, #24]
 8000432:	4313      	orrs	r3, r2
 8000434:	833b      	strh	r3, [r7, #24]
          break;
 8000436:	e002      	b.n	800043e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000438:	bf00      	nop
 800043a:	e000      	b.n	800043e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800043c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800043e:	7ffb      	ldrb	r3, [r7, #31]
 8000440:	3301      	adds	r3, #1
 8000442:	77fb      	strb	r3, [r7, #31]
 8000444:	7ffb      	ldrb	r3, [r7, #31]
 8000446:	2b21      	cmp	r3, #33	; 0x21
 8000448:	d9c3      	bls.n	80003d2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000452:	2303      	movs	r3, #3
 8000454:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000456:	8bbb      	ldrh	r3, [r7, #28]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d014      	beq.n	8000486 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800045c:	8bbb      	ldrh	r3, [r7, #28]
 800045e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff ff41 	bl	80002e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ff57 	bl	800031a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f002 fd42 	bl	8002efc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000478:	8bbb      	ldrh	r3, [r7, #28]
 800047a:	2200      	movs	r2, #0
 800047c:	4619      	mov	r1, r3
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f002 feab 	bl	80031dc <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000486:	8b7b      	ldrh	r3, [r7, #26]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d012      	beq.n	80004b2 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800048c:	8b7b      	ldrh	r3, [r7, #26]
 800048e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000490:	2002      	movs	r0, #2
 8000492:	f7ff ff29 	bl	80002e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff ff3f 	bl	800031a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4619      	mov	r1, r3
 80004a0:	4813      	ldr	r0, [pc, #76]	; (80004f0 <APPD_SetCPU2GpioConfig+0x144>)
 80004a2:	f002 fd2b 	bl	8002efc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80004a6:	8b7b      	ldrh	r3, [r7, #26]
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <APPD_SetCPU2GpioConfig+0x144>)
 80004ae:	f002 fe95 	bl	80031dc <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80004b2:	8b3b      	ldrh	r3, [r7, #24]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d013      	beq.n	80004e0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80004b8:	8b3b      	ldrh	r3, [r7, #24]
 80004ba:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	2004      	movs	r0, #4
 80004be:	f7ff ff13 	bl	80002e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80004c2:	2004      	movs	r0, #4
 80004c4:	f7ff ff29 	bl	800031a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	4807      	ldr	r0, [pc, #28]	; (80004ec <APPD_SetCPU2GpioConfig+0x140>)
 80004ce:	f002 fd15 	bl	8002efc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80004d2:	8b3b      	ldrh	r3, [r7, #24]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4619      	mov	r1, r3
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <APPD_SetCPU2GpioConfig+0x140>)
 80004da:	f002 fe7f 	bl	80031dc <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
}
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	0800a94c 	.word	0x0800a94c
 80004ec:	48000800 	.word	0x48000800
 80004f0:	48000400 	.word	0x48000400

080004f4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80004f8:	bf00      	nop
}
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_C2_PWR_SetPowerMode+0x28>)
 800050e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000512:	f023 0207 	bic.w	r2, r3, #7
 8000516:	4905      	ldr	r1, [pc, #20]	; (800052c <LL_C2_PWR_SetPowerMode+0x28>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4313      	orrs	r3, r2
 800051c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	58000400 	.word	0x58000400

08000530 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	608b      	str	r3, [r1, #8]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800055c:	f000 f814 	bl	8000588 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000560:	4908      	ldr	r1, [pc, #32]	; (8000584 <APPE_Init+0x2c>)
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fd3c 	bl	8000fe0 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000568:	f7ff fef3 	bl	8000352 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800056c:	2101      	movs	r1, #1
 800056e:	2001      	movs	r0, #1
 8000570:	f008 fbc8 	bl	8008d04 <UTIL_LPM_SetOffMode>

  Led_Init();
 8000574:	f000 f867 	bl	8000646 <Led_Init>

  Button_Init();
 8000578:	f000 f875 	bl	8000666 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800057c:	f000 f812 	bl	80005a4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000580:	bf00      	nop
}
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000618 	.word	0x20000618

08000588 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800058c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000590:	f7ff ffce 	bl	8000530 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000594:	f008 fba4 	bl	8008ce0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000598:	2004      	movs	r0, #4
 800059a:	f7ff ffb3 	bl	8000504 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800059e:	bf00      	nop
}
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005aa:	f007 fa51 	bl	8007a50 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <appe_Tl_Init+0x50>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	2010      	movs	r0, #16
 80005b4:	f008 fcf0 	bl	8008f98 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <appe_Tl_Init+0x54>)
 80005ba:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <appe_Tl_Init+0x58>)
 80005be:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <appe_Tl_Init+0x5c>)
 80005c6:	f006 ff37 	bl	8007438 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <appe_Tl_Init+0x60>)
 80005cc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <appe_Tl_Init+0x64>)
 80005d0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <appe_Tl_Init+0x68>)
 80005d4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005d6:	f240 533c 	movw	r3, #1340	; 0x53c
 80005da:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	4618      	mov	r0, r3
 80005e2:	f007 fb77 	bl	8007cd4 <TL_MM_Init>

  TL_Enable();
 80005e6:	f007 fa2d 	bl	8007a44 <TL_Enable>

  return;
 80005ea:	bf00      	nop
}
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08007471 	.word	0x08007471
 80005f8:	20030724 	.word	0x20030724
 80005fc:	08000611 	.word	0x08000611
 8000600:	08000627 	.word	0x08000627
 8000604:	2003093c 	.word	0x2003093c
 8000608:	20030830 	.word	0x20030830
 800060c:	200301e8 	.word	0x200301e8

08000610 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800061a:	bf00      	nop
}
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800062e:	f7ff fea1 	bl	8000374 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000632:	f007 fc73 	bl	8007f1c <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f008 fb63 	bl	8008d04 <UTIL_LPM_SetOffMode>
  return;
 800063e:	bf00      	nop
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800064a:	2000      	movs	r0, #0
 800064c:	f001 ff78 	bl	8002540 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000650:	2001      	movs	r0, #1
 8000652:	f001 ff75 	bl	8002540 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000656:	2002      	movs	r0, #2
 8000658:	f001 ff72 	bl	8002540 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 800065c:	2001      	movs	r0, #1
 800065e:	f001 ffa9 	bl	80025b4 <BSP_LED_On>
#endif

  return;
 8000662:	bf00      	nop
}
 8000664:	bd80      	pop	{r7, pc}

08000666 <Button_Init>:

static void Button_Init( void )
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800066a:	2101      	movs	r1, #1
 800066c:	2000      	movs	r0, #0
 800066e:	f001 ffef 	bl	8002650 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000672:	2101      	movs	r1, #1
 8000674:	2001      	movs	r0, #1
 8000676:	f001 ffeb 	bl	8002650 <BSP_PB_Init>
#endif

  return;
 800067a:	bf00      	nop
}
 800067c:	bd80      	pop	{r7, pc}

0800067e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800067e:	b580      	push	{r7, lr}
 8000680:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
 8000682:	f008 fb6f 	bl	8008d64 <UTIL_LPM_EnterLowPower>
#endif
  return;
 8000686:	bf00      	nop
}
 8000688:	bd80      	pop	{r7, pc}

0800068a <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b082      	sub	sp, #8
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f008 fb9a 	bl	8008dd0 <UTIL_SEQ_Run>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80006ac:	2100      	movs	r1, #0
 80006ae:	2010      	movs	r0, #16
 80006b0:	f008 fc94 	bl	8008fdc <UTIL_SEQ_SetTask>
  return;
 80006b4:	bf00      	nop
}
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006c4:	2002      	movs	r0, #2
 80006c6:	f008 fcf5 	bl	80090b4 <UTIL_SEQ_SetEvt>
  return;
 80006ca:	bf00      	nop
}
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006da:	2002      	movs	r0, #2
 80006dc:	f008 fd0a 	bl	80090f4 <UTIL_SEQ_WaitEvt>
  return;
 80006e0:	bf00      	nop
}
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d004      	beq.n	8000702 <HAL_GPIO_EXTI_Callback+0x1a>
 80006f8:	2b10      	cmp	r3, #16
 80006fa:	d138      	bne.n	800076e <HAL_GPIO_EXTI_Callback+0x86>
  {
    case BUTTON_SW1_PIN:
     APP_BLE_Key_Button1_Action();
 80006fc:	f007 fd60 	bl	80081c0 <APP_BLE_Key_Button1_Action>
      break; 
 8000700:	e036      	b.n	8000770 <HAL_GPIO_EXTI_Callback+0x88>

    case BUTTON_SW2_PIN:
        APP_BLE_Key_Button2_Action();
 8000702:	f007 fd63 	bl	80081cc <APP_BLE_Key_Button2_Action>
    	BSP_LED_Toggle(LED1);
 8000706:	2000      	movs	r0, #0
 8000708:	f001 ff88 	bl	800261c <BSP_LED_Toggle>

    	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800070c:	2200      	movs	r2, #0
 800070e:	491a      	ldr	r1, [pc, #104]	; (8000778 <HAL_GPIO_EXTI_Callback+0x90>)
 8000710:	481a      	ldr	r0, [pc, #104]	; (800077c <HAL_GPIO_EXTI_Callback+0x94>)
 8000712:	f004 fd5d 	bl	80051d0 <HAL_RTC_GetTime>
    	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000716:	2200      	movs	r2, #0
 8000718:	4919      	ldr	r1, [pc, #100]	; (8000780 <HAL_GPIO_EXTI_Callback+0x98>)
 800071a:	4818      	ldr	r0, [pc, #96]	; (800077c <HAL_GPIO_EXTI_Callback+0x94>)
 800071c:	f004 fe62 	bl	80053e4 <HAL_RTC_GetDate>

    	currTime.tm_year = currentDate.Year + 100;  // In fact: 2000 + 18 - 1900
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_GPIO_EXTI_Callback+0x98>)
 8000722:	78db      	ldrb	r3, [r3, #3]
 8000724:	3364      	adds	r3, #100	; 0x64
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000728:	6153      	str	r3, [r2, #20]
    	currTime.tm_mday = currentDate.Date;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_GPIO_EXTI_Callback+0x98>)
 800072c:	789b      	ldrb	r3, [r3, #2]
 800072e:	461a      	mov	r2, r3
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000732:	60da      	str	r2, [r3, #12]
    	currTime.tm_mon  = currentDate.Month - 1;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_GPIO_EXTI_Callback+0x98>)
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	3b01      	subs	r3, #1
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <HAL_GPIO_EXTI_Callback+0x9c>)
 800073c:	6113      	str	r3, [r2, #16]

    	currTime.tm_hour = currentTime.Hours;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <HAL_GPIO_EXTI_Callback+0x90>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000746:	609a      	str	r2, [r3, #8]
    	currTime.tm_min  = currentTime.Minutes;
 8000748:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <HAL_GPIO_EXTI_Callback+0x90>)
 800074a:	785b      	ldrb	r3, [r3, #1]
 800074c:	461a      	mov	r2, r3
 800074e:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000750:	605a      	str	r2, [r3, #4]
    	currTime.tm_sec  = currentTime.Seconds;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <HAL_GPIO_EXTI_Callback+0x90>)
 8000754:	789b      	ldrb	r3, [r3, #2]
 8000756:	461a      	mov	r2, r3
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <HAL_GPIO_EXTI_Callback+0x9c>)
 800075a:	601a      	str	r2, [r3, #0]

    	timestamp = mktime(&currTime);
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <HAL_GPIO_EXTI_Callback+0x9c>)
 800075e:	f008 fe65 	bl	800942c <mktime>
 8000762:	4602      	mov	r2, r0
 8000764:	460b      	mov	r3, r1
 8000766:	4908      	ldr	r1, [pc, #32]	; (8000788 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000768:	e9c1 2300 	strd	r2, r3, [r1]
      break; 
 800076c:	e000      	b.n	8000770 <HAL_GPIO_EXTI_Callback+0x88>
//    case BUTTON_SW3_PIN:
//      //APP_BLE_Key_Button3_Action();
//      break;

    default:
      break;
 800076e:	bf00      	nop

  }
  return;
 8000770:	bf00      	nop
}
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000424 	.word	0x20000424
 800077c:	20000618 	.word	0x20000618
 8000780:	20000420 	.word	0x20000420
 8000784:	20000438 	.word	0x20000438
 8000788:	20000418 	.word	0x20000418

0800078c <LL_EXTI_EnableIT_0_31>:
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <LL_EXTI_EnableIT_0_31+0x24>)
 8000796:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800079a:	4905      	ldr	r1, [pc, #20]	; (80007b0 <LL_EXTI_EnableIT_0_31+0x24>)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4313      	orrs	r3, r2
 80007a0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	58000800 	.word	0x58000800

080007b4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007be:	681a      	ldr	r2, [r3, #0]
 80007c0:	4904      	ldr	r1, [pc, #16]	; (80007d4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	600b      	str	r3, [r1, #0]

}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	58000800 	.word	0x58000800

080007d8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <ReadRtcSsrValue+0x3c>)
 80007e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <ReadRtcSsrValue+0x3c>)
 80007e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80007ee:	e005      	b.n	80007fc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <ReadRtcSsrValue+0x3c>)
 80007f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d1f5      	bne.n	80007f0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000804:	683b      	ldr	r3, [r7, #0]
}
 8000806:	4618      	mov	r0, r3
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40002800 	.word	0x40002800

08000818 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	460a      	mov	r2, r1
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	4613      	mov	r3, r2
 8000826:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000828:	79ba      	ldrb	r2, [r7, #6]
 800082a:	491d      	ldr	r1, [pc, #116]	; (80008a0 <LinkTimerAfter+0x88>)
 800082c:	4613      	mov	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	4413      	add	r3, r2
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	440b      	add	r3, r1
 8000836:	3315      	adds	r3, #21
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800083c:	7bfb      	ldrb	r3, [r7, #15]
 800083e:	2b06      	cmp	r3, #6
 8000840:	d009      	beq.n	8000856 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000842:	7bfa      	ldrb	r2, [r7, #15]
 8000844:	4916      	ldr	r1, [pc, #88]	; (80008a0 <LinkTimerAfter+0x88>)
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3314      	adds	r3, #20
 8000852:	79fa      	ldrb	r2, [r7, #7]
 8000854:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000856:	79fa      	ldrb	r2, [r7, #7]
 8000858:	4911      	ldr	r1, [pc, #68]	; (80008a0 <LinkTimerAfter+0x88>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3315      	adds	r3, #21
 8000866:	7bfa      	ldrb	r2, [r7, #15]
 8000868:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	490c      	ldr	r1, [pc, #48]	; (80008a0 <LinkTimerAfter+0x88>)
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	3314      	adds	r3, #20
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 800087e:	79ba      	ldrb	r2, [r7, #6]
 8000880:	4907      	ldr	r1, [pc, #28]	; (80008a0 <LinkTimerAfter+0x88>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3315      	adds	r3, #21
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	701a      	strb	r2, [r3, #0]

  return;
 8000892:	bf00      	nop
}
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000010c 	.word	0x2000010c

080008a4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	460a      	mov	r2, r1
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	4613      	mov	r3, r2
 80008b2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <LinkTimerBefore+0xb8>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	79ba      	ldrb	r2, [r7, #6]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d032      	beq.n	8000926 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80008c0:	79ba      	ldrb	r2, [r7, #6]
 80008c2:	4927      	ldr	r1, [pc, #156]	; (8000960 <LinkTimerBefore+0xbc>)
 80008c4:	4613      	mov	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	440b      	add	r3, r1
 80008ce:	3314      	adds	r3, #20
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80008d4:	7bfa      	ldrb	r2, [r7, #15]
 80008d6:	4922      	ldr	r1, [pc, #136]	; (8000960 <LinkTimerBefore+0xbc>)
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	440b      	add	r3, r1
 80008e2:	3315      	adds	r3, #21
 80008e4:	79fa      	ldrb	r2, [r7, #7]
 80008e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80008e8:	79fa      	ldrb	r2, [r7, #7]
 80008ea:	491d      	ldr	r1, [pc, #116]	; (8000960 <LinkTimerBefore+0xbc>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	440b      	add	r3, r1
 80008f6:	3315      	adds	r3, #21
 80008f8:	79ba      	ldrb	r2, [r7, #6]
 80008fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	4918      	ldr	r1, [pc, #96]	; (8000960 <LinkTimerBefore+0xbc>)
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	440b      	add	r3, r1
 800090a:	3314      	adds	r3, #20
 800090c:	7bfa      	ldrb	r2, [r7, #15]
 800090e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000910:	79ba      	ldrb	r2, [r7, #6]
 8000912:	4913      	ldr	r1, [pc, #76]	; (8000960 <LinkTimerBefore+0xbc>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3314      	adds	r3, #20
 8000920:	79fa      	ldrb	r2, [r7, #7]
 8000922:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000924:	e014      	b.n	8000950 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000926:	79fa      	ldrb	r2, [r7, #7]
 8000928:	490d      	ldr	r1, [pc, #52]	; (8000960 <LinkTimerBefore+0xbc>)
 800092a:	4613      	mov	r3, r2
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	4413      	add	r3, r2
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	440b      	add	r3, r1
 8000934:	3315      	adds	r3, #21
 8000936:	79ba      	ldrb	r2, [r7, #6]
 8000938:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800093a:	79ba      	ldrb	r2, [r7, #6]
 800093c:	4908      	ldr	r1, [pc, #32]	; (8000960 <LinkTimerBefore+0xbc>)
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	440b      	add	r3, r1
 8000948:	3314      	adds	r3, #20
 800094a:	79fa      	ldrb	r2, [r7, #7]
 800094c:	701a      	strb	r2, [r3, #0]
  return;
 800094e:	bf00      	nop
}
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000019c 	.word	0x2000019c
 8000960:	2000010c 	.word	0x2000010c

08000964 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800096e:	4b4e      	ldr	r3, [pc, #312]	; (8000aa8 <linkTimer+0x144>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b06      	cmp	r3, #6
 8000976:	d118      	bne.n	80009aa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000978:	4b4b      	ldr	r3, [pc, #300]	; (8000aa8 <linkTimer+0x144>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <linkTimer+0x148>)
 8000980:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000982:	4a49      	ldr	r2, [pc, #292]	; (8000aa8 <linkTimer+0x144>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000988:	79fa      	ldrb	r2, [r7, #7]
 800098a:	4949      	ldr	r1, [pc, #292]	; (8000ab0 <linkTimer+0x14c>)
 800098c:	4613      	mov	r3, r2
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	4413      	add	r3, r2
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	440b      	add	r3, r1
 8000996:	3315      	adds	r3, #21
 8000998:	2206      	movs	r2, #6
 800099a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800099c:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <linkTimer+0x150>)
 800099e:	f04f 32ff 	mov.w	r2, #4294967295
 80009a2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	81fb      	strh	r3, [r7, #14]
 80009a8:	e078      	b.n	8000a9c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80009aa:	f000 f909 	bl	8000bc0 <ReturnTimeElapsed>
 80009ae:	4603      	mov	r3, r0
 80009b0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	493e      	ldr	r1, [pc, #248]	; (8000ab0 <linkTimer+0x14c>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3308      	adds	r3, #8
 80009c2:	6819      	ldr	r1, [r3, #0]
 80009c4:	89fb      	ldrh	r3, [r7, #14]
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	4419      	add	r1, r3
 80009ca:	4839      	ldr	r0, [pc, #228]	; (8000ab0 <linkTimer+0x14c>)
 80009cc:	4613      	mov	r3, r2
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	4413      	add	r3, r2
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	4403      	add	r3, r0
 80009d6:	3308      	adds	r3, #8
 80009d8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	4934      	ldr	r1, [pc, #208]	; (8000ab0 <linkTimer+0x14c>)
 80009de:	4613      	mov	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	4413      	add	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	440b      	add	r3, r1
 80009e8:	3308      	adds	r3, #8
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <linkTimer+0x144>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	4a2e      	ldr	r2, [pc, #184]	; (8000ab0 <linkTimer+0x14c>)
 80009f8:	460b      	mov	r3, r1
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	440b      	add	r3, r1
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	4413      	add	r3, r2
 8000a02:	3308      	adds	r3, #8
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d337      	bcc.n	8000a7c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <linkTimer+0x144>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a12:	7b7a      	ldrb	r2, [r7, #13]
 8000a14:	4926      	ldr	r1, [pc, #152]	; (8000ab0 <linkTimer+0x14c>)
 8000a16:	4613      	mov	r3, r2
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	4413      	add	r3, r2
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	440b      	add	r3, r1
 8000a20:	3315      	adds	r3, #21
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a26:	e013      	b.n	8000a50 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a28:	7b7a      	ldrb	r2, [r7, #13]
 8000a2a:	4921      	ldr	r1, [pc, #132]	; (8000ab0 <linkTimer+0x14c>)
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	4413      	add	r3, r2
 8000a32:	00db      	lsls	r3, r3, #3
 8000a34:	440b      	add	r3, r1
 8000a36:	3315      	adds	r3, #21
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a3c:	7b7a      	ldrb	r2, [r7, #13]
 8000a3e:	491c      	ldr	r1, [pc, #112]	; (8000ab0 <linkTimer+0x14c>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	3315      	adds	r3, #21
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a50:	7b3b      	ldrb	r3, [r7, #12]
 8000a52:	2b06      	cmp	r3, #6
 8000a54:	d00b      	beq.n	8000a6e <linkTimer+0x10a>
 8000a56:	7b3a      	ldrb	r2, [r7, #12]
 8000a58:	4915      	ldr	r1, [pc, #84]	; (8000ab0 <linkTimer+0x14c>)
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	440b      	add	r3, r1
 8000a64:	3308      	adds	r3, #8
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d2dc      	bcs.n	8000a28 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000a6e:	7b7a      	ldrb	r2, [r7, #13]
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fecf 	bl	8000818 <LinkTimerAfter>
 8000a7a:	e00f      	b.n	8000a9c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <linkTimer+0x144>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff0c 	bl	80008a4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <linkTimer+0x144>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <linkTimer+0x148>)
 8000a94:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <linkTimer+0x144>)
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000a9c:	89fb      	ldrh	r3, [r7, #14]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	2000019c 	.word	0x2000019c
 8000aac:	2000019d 	.word	0x2000019d
 8000ab0:	2000010c 	.word	0x2000010c
 8000ab4:	200001a0 	.word	0x200001a0

08000ab8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000ac8:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <UnlinkTimer+0xf8>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d111      	bne.n	8000af8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <UnlinkTimer+0xf8>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <UnlinkTimer+0xfc>)
 8000adc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000ade:	79fa      	ldrb	r2, [r7, #7]
 8000ae0:	4935      	ldr	r1, [pc, #212]	; (8000bb8 <UnlinkTimer+0x100>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	440b      	add	r3, r1
 8000aec:	3315      	adds	r3, #21
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <UnlinkTimer+0xf8>)
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e03e      	b.n	8000b76 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000af8:	79fa      	ldrb	r2, [r7, #7]
 8000afa:	492f      	ldr	r1, [pc, #188]	; (8000bb8 <UnlinkTimer+0x100>)
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	440b      	add	r3, r1
 8000b06:	3314      	adds	r3, #20
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	492a      	ldr	r1, [pc, #168]	; (8000bb8 <UnlinkTimer+0x100>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	3315      	adds	r3, #21
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b20:	79f9      	ldrb	r1, [r7, #7]
 8000b22:	7bfa      	ldrb	r2, [r7, #15]
 8000b24:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <UnlinkTimer+0x100>)
 8000b26:	460b      	mov	r3, r1
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	440b      	add	r3, r1
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	4403      	add	r3, r0
 8000b30:	3315      	adds	r3, #21
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b2d8      	uxtb	r0, r3
 8000b36:	4920      	ldr	r1, [pc, #128]	; (8000bb8 <UnlinkTimer+0x100>)
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	440b      	add	r3, r1
 8000b42:	3315      	adds	r3, #21
 8000b44:	4602      	mov	r2, r0
 8000b46:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b48:	7bbb      	ldrb	r3, [r7, #14]
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d013      	beq.n	8000b76 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b4e:	79f9      	ldrb	r1, [r7, #7]
 8000b50:	7bba      	ldrb	r2, [r7, #14]
 8000b52:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <UnlinkTimer+0x100>)
 8000b54:	460b      	mov	r3, r1
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	440b      	add	r3, r1
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	4403      	add	r3, r0
 8000b5e:	3314      	adds	r3, #20
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b2d8      	uxtb	r0, r3
 8000b64:	4914      	ldr	r1, [pc, #80]	; (8000bb8 <UnlinkTimer+0x100>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3314      	adds	r3, #20
 8000b72:	4602      	mov	r2, r0
 8000b74:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	490f      	ldr	r1, [pc, #60]	; (8000bb8 <UnlinkTimer+0x100>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	330c      	adds	r3, #12
 8000b86:	2201      	movs	r2, #1
 8000b88:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <UnlinkTimer+0xf8>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d107      	bne.n	8000ba4 <UnlinkTimer+0xec>
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d104      	bne.n	8000ba4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <UnlinkTimer+0x104>)
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
}
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	2000019c 	.word	0x2000019c
 8000bb4:	2000019d 	.word	0x2000019d
 8000bb8:	2000010c 	.word	0x2000010c
 8000bbc:	200001a0 	.word	0x200001a0

08000bc0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <ReturnTimeElapsed+0x70>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bce:	d026      	beq.n	8000c1e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000bd0:	f7ff fe02 	bl	80007d8 <ReadRtcSsrValue>
 8000bd4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <ReturnTimeElapsed+0x70>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d805      	bhi.n	8000bec <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <ReturnTimeElapsed+0x70>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e00a      	b.n	8000c02 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <ReturnTimeElapsed+0x74>)
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000bf8:	4b0d      	ldr	r3, [pc, #52]	; (8000c30 <ReturnTimeElapsed+0x70>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <ReturnTimeElapsed+0x78>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	fb02 f303 	mul.w	r3, r2, r3
 8000c0e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	; (8000c3c <ReturnTimeElapsed+0x7c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	40d3      	lsrs	r3, r2
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	e001      	b.n	8000c22 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	b29b      	uxth	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001a0 	.word	0x200001a0
 8000c34:	200002ba 	.word	0x200002ba
 8000c38:	200002b9 	.word	0x200002b9
 8000c3c:	200002b8 	.word	0x200002b8

08000c40 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d108      	bne.n	8000c62 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c50:	f7ff fdc2 	bl	80007d8 <ReadRtcSsrValue>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a24      	ldr	r2, [pc, #144]	; (8000ce8 <RestartWakeupCounter+0xa8>)
 8000c58:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f001 ffc5 	bl	8002bea <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000c60:	e03e      	b.n	8000ce0 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000c62:	88fb      	ldrh	r3, [r7, #6]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d803      	bhi.n	8000c70 <RestartWakeupCounter+0x30>
 8000c68:	4b20      	ldr	r3, [pc, #128]	; (8000cec <RestartWakeupCounter+0xac>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d002      	beq.n	8000c76 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000c76:	bf00      	nop
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <RestartWakeupCounter+0xb0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f7      	beq.n	8000c78 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <RestartWakeupCounter+0xb0>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <RestartWakeupCounter+0xb0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c9c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <RestartWakeupCounter+0xb4>)
 8000ca0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ca4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ca6:	2003      	movs	r0, #3
 8000ca8:	f001 ffad 	bl	8002c06 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <RestartWakeupCounter+0xb8>)
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	0c1b      	lsrs	r3, r3, #16
 8000cb2:	041b      	lsls	r3, r3, #16
 8000cb4:	88fa      	ldrh	r2, [r7, #6]
 8000cb6:	4910      	ldr	r1, [pc, #64]	; (8000cf8 <RestartWakeupCounter+0xb8>)
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000cbc:	f7ff fd8c 	bl	80007d8 <ReadRtcSsrValue>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <RestartWakeupCounter+0xa8>)
 8000cc4:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <RestartWakeupCounter+0xb0>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <RestartWakeupCounter+0xb0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cd8:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000cda:	f3af 8000 	nop.w
  return ;
 8000cde:	bf00      	nop
}
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200001a0 	.word	0x200001a0
 8000cec:	200002b8 	.word	0x200002b8
 8000cf0:	200002b4 	.word	0x200002b4
 8000cf4:	58000800 	.word	0x58000800
 8000cf8:	40002800 	.word	0x40002800

08000cfc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d02:	4b47      	ldr	r3, [pc, #284]	; (8000e20 <RescheduleTimerList+0x124>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0e:	d108      	bne.n	8000d22 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d10:	bf00      	nop
 8000d12:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <RescheduleTimerList+0x128>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f7      	bne.n	8000d12 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d22:	4b40      	ldr	r3, [pc, #256]	; (8000e24 <RescheduleTimerList+0x128>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	4b3e      	ldr	r3, [pc, #248]	; (8000e24 <RescheduleTimerList+0x128>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d34:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d36:	4b3c      	ldr	r3, [pc, #240]	; (8000e28 <RescheduleTimerList+0x12c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d3c:	7bfa      	ldrb	r2, [r7, #15]
 8000d3e:	493b      	ldr	r1, [pc, #236]	; (8000e2c <RescheduleTimerList+0x130>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	3308      	adds	r3, #8
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000d50:	f7ff ff36 	bl	8000bc0 <ReturnTimeElapsed>
 8000d54:	4603      	mov	r3, r0
 8000d56:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000d58:	88fb      	ldrh	r3, [r7, #6]
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d205      	bcs.n	8000d6c <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d64:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <RescheduleTimerList+0x134>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	e04d      	b.n	8000e08 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	4a31      	ldr	r2, [pc, #196]	; (8000e34 <RescheduleTimerList+0x138>)
 8000d70:	8812      	ldrh	r2, [r2, #0]
 8000d72:	b292      	uxth	r2, r2
 8000d74:	4413      	add	r3, r2
 8000d76:	461a      	mov	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d906      	bls.n	8000d8c <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000d7e:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <RescheduleTimerList+0x138>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <RescheduleTimerList+0x134>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
 8000d8a:	e03d      	b.n	8000e08 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <RescheduleTimerList+0x134>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d9c:	e034      	b.n	8000e08 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	4922      	ldr	r1, [pc, #136]	; (8000e2c <RescheduleTimerList+0x130>)
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	440b      	add	r3, r1
 8000dac:	3308      	adds	r3, #8
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d20a      	bcs.n	8000dcc <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000db6:	7bfa      	ldrb	r2, [r7, #15]
 8000db8:	491c      	ldr	r1, [pc, #112]	; (8000e2c <RescheduleTimerList+0x130>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3308      	adds	r3, #8
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e013      	b.n	8000df4 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	4917      	ldr	r1, [pc, #92]	; (8000e2c <RescheduleTimerList+0x130>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	440b      	add	r3, r1
 8000dda:	3308      	adds	r3, #8
 8000ddc:	6819      	ldr	r1, [r3, #0]
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	1ac9      	subs	r1, r1, r3
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <RescheduleTimerList+0x130>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4403      	add	r3, r0
 8000df0:	3308      	adds	r3, #8
 8000df2:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	490d      	ldr	r1, [pc, #52]	; (8000e2c <RescheduleTimerList+0x130>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	440b      	add	r3, r1
 8000e02:	3315      	adds	r3, #21
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d1c7      	bne.n	8000d9e <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e0e:	89bb      	ldrh	r3, [r7, #12]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff15 	bl	8000c40 <RestartWakeupCounter>

  return ;
 8000e16:	bf00      	nop
}
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40002800 	.word	0x40002800
 8000e24:	200002b4 	.word	0x200002b4
 8000e28:	2000019c 	.word	0x2000019c
 8000e2c:	2000010c 	.word	0x2000010c
 8000e30:	200001a4 	.word	0x200001a4
 8000e34:	200002bc 	.word	0x200002bc

08000e38 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8000e42:	617b      	str	r3, [r7, #20]
  return(result);
 8000e44:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e4c:	4b5f      	ldr	r3, [pc, #380]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	22ca      	movs	r2, #202	; 0xca
 8000e54:	625a      	str	r2, [r3, #36]	; 0x24
 8000e56:	4b5d      	ldr	r3, [pc, #372]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2253      	movs	r2, #83	; 0x53
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000e60:	4b5a      	ldr	r3, [pc, #360]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	4b58      	ldr	r3, [pc, #352]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e72:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000e74:	4b56      	ldr	r3, [pc, #344]	; (8000fd0 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000e7c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e80:	4954      	ldr	r1, [pc, #336]	; (8000fd4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	440b      	add	r3, r1
 8000e8c:	330c      	adds	r3, #12
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d172      	bne.n	8000f7c <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000e96:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e9a:	494e      	ldr	r1, [pc, #312]	; (8000fd4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	440b      	add	r3, r1
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000eaa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000eae:	4949      	ldr	r1, [pc, #292]	; (8000fd4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	440b      	add	r3, r1
 8000eba:	3310      	adds	r3, #16
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000ec0:	4b45      	ldr	r3, [pc, #276]	; (8000fd8 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d050      	beq.n	8000f6c <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000eca:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ece:	4941      	ldr	r1, [pc, #260]	; (8000fd4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	00db      	lsls	r3, r3, #3
 8000ed8:	440b      	add	r3, r1
 8000eda:	330d      	adds	r3, #13
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d126      	bne.n	8000f32 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ee8:	2101      	movs	r1, #1
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fde4 	bl	8000ab8 <UnlinkTimer>
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	f383 8810 	msr	PRIMASK, r3
}
 8000efa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000efc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f00:	4934      	ldr	r1, [pc, #208]	; (8000fd4 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	440b      	add	r3, r1
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f14:	4611      	mov	r1, r2
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fa4e 	bl	80013b8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f1c:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	22ca      	movs	r2, #202	; 0xca
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
 8000f26:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2253      	movs	r2, #83	; 0x53
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
 8000f30:	e014      	b.n	8000f5c <HW_TS_RTC_Wakeup_Handler+0x124>
 8000f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f34:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	f383 8810 	msr	PRIMASK, r3
}
 8000f3c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f9ac 	bl	80012a0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	22ca      	movs	r2, #202	; 0xca
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2253      	movs	r2, #83	; 0x53
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f60:	69fa      	ldr	r2, [r7, #28]
 8000f62:	4619      	mov	r1, r3
 8000f64:	69b8      	ldr	r0, [r7, #24]
 8000f66:	f000 faaf 	bl	80014c8 <HW_TS_RTC_Int_AppNot>
 8000f6a:	e025      	b.n	8000fb8 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000f6c:	f7ff fec6 	bl	8000cfc <RescheduleTimerList>
 8000f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f72:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	f383 8810 	msr	PRIMASK, r3
}
 8000f7a:	e01d      	b.n	8000fb8 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f7c:	bf00      	nop
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f7      	beq.n	8000f7e <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fa2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000fa6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000faa:	60da      	str	r2, [r3, #12]
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f383 8810 	msr	PRIMASK, r3
}
 8000fb6:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	22ff      	movs	r2, #255	; 0xff
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000fc2:	bf00      	nop
}
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200002b4 	.word	0x200002b4
 8000fd0:	2000019c 	.word	0x2000019c
 8000fd4:	2000010c 	.word	0x2000010c
 8000fd8:	200001a4 	.word	0x200001a4
 8000fdc:	58000800 	.word	0x58000800

08000fe0 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000fec:	4a64      	ldr	r2, [pc, #400]	; (8001180 <HW_TS_Init+0x1a0>)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000ff2:	4b63      	ldr	r3, [pc, #396]	; (8001180 <HW_TS_Init+0x1a0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	22ca      	movs	r2, #202	; 0xca
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
 8000ffc:	4b60      	ldr	r3, [pc, #384]	; (8001180 <HW_TS_Init+0x1a0>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2253      	movs	r2, #83	; 0x53
 8001004:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001006:	4b5f      	ldr	r3, [pc, #380]	; (8001184 <HW_TS_Init+0x1a4>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	4a5e      	ldr	r2, [pc, #376]	; (8001184 <HW_TS_Init+0x1a4>)
 800100c:	f043 0320 	orr.w	r3, r3, #32
 8001010:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001012:	4b5c      	ldr	r3, [pc, #368]	; (8001184 <HW_TS_Init+0x1a4>)
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f1c3 0304 	rsb	r3, r3, #4
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b58      	ldr	r3, [pc, #352]	; (8001188 <HW_TS_Init+0x1a8>)
 8001026:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001028:	4b56      	ldr	r3, [pc, #344]	; (8001184 <HW_TS_Init+0x1a4>)
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001030:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001034:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	fa92 f2a2 	rbit	r2, r2
 800103c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	2a00      	cmp	r2, #0
 8001046:	d101      	bne.n	800104c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001048:	2220      	movs	r2, #32
 800104a:	e003      	b.n	8001054 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	fab2 f282 	clz	r2, r2
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	40d3      	lsrs	r3, r2
 8001056:	b2db      	uxtb	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b4b      	ldr	r3, [pc, #300]	; (800118c <HW_TS_Init+0x1ac>)
 800105e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001060:	4b48      	ldr	r3, [pc, #288]	; (8001184 <HW_TS_Init+0x1a4>)
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	b29b      	uxth	r3, r3
 8001066:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800106a:	b29b      	uxth	r3, r3
 800106c:	3301      	adds	r3, #1
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b47      	ldr	r3, [pc, #284]	; (8001190 <HW_TS_Init+0x1b0>)
 8001072:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001074:	4b46      	ldr	r3, [pc, #280]	; (8001190 <HW_TS_Init+0x1b0>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a44      	ldr	r2, [pc, #272]	; (800118c <HW_TS_Init+0x1ac>)
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001086:	4a40      	ldr	r2, [pc, #256]	; (8001188 <HW_TS_Init+0x1a8>)
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	40d3      	lsrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001094:	4293      	cmp	r3, r2
 8001096:	d904      	bls.n	80010a2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001098:	4b3e      	ldr	r3, [pc, #248]	; (8001194 <HW_TS_Init+0x1b4>)
 800109a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	e003      	b.n	80010aa <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	4b3b      	ldr	r3, [pc, #236]	; (8001194 <HW_TS_Init+0x1b4>)
 80010a8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010aa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010ae:	f7ff fb81 	bl	80007b4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010b2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010b6:	f7ff fb69 	bl	800078c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d143      	bne.n	8001148 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010c0:	4b35      	ldr	r3, [pc, #212]	; (8001198 <HW_TS_Init+0x1b8>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <HW_TS_Init+0x1bc>)
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295
 80010cc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	77fb      	strb	r3, [r7, #31]
 80010d2:	e00c      	b.n	80010ee <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80010d4:	7ffa      	ldrb	r2, [r7, #31]
 80010d6:	4932      	ldr	r1, [pc, #200]	; (80011a0 <HW_TS_Init+0x1c0>)
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	330c      	adds	r3, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	3301      	adds	r3, #1
 80010ec:	77fb      	strb	r3, [r7, #31]
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
 80010f0:	2b05      	cmp	r3, #5
 80010f2:	d9ef      	bls.n	80010d4 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HW_TS_Init+0x1c4>)
 80010f6:	2206      	movs	r2, #6
 80010f8:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <HW_TS_Init+0x1a0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <HW_TS_Init+0x1a0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800110c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <HW_TS_Init+0x1a0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68db      	ldr	r3, [r3, #12]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HW_TS_Init+0x1a0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001122:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001124:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HW_TS_Init+0x1c8>)
 8001126:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800112a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800112c:	2003      	movs	r0, #3
 800112e:	f001 fd6a 	bl	8002c06 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HW_TS_Init+0x1a0>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HW_TS_Init+0x1a0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	e00a      	b.n	800115e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HW_TS_Init+0x1a0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001154:	2b00      	cmp	r3, #0
 8001156:	d002      	beq.n	800115e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001158:	2003      	movs	r0, #3
 800115a:	f001 fd46 	bl	8002bea <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800115e:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HW_TS_Init+0x1a0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	22ff      	movs	r2, #255	; 0xff
 8001166:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001168:	2200      	movs	r2, #0
 800116a:	2103      	movs	r1, #3
 800116c:	2003      	movs	r0, #3
 800116e:	f001 fcfa 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001172:	2003      	movs	r0, #3
 8001174:	f001 fd11 	bl	8002b9a <HAL_NVIC_EnableIRQ>

  return;
 8001178:	bf00      	nop
}
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	200002b4 	.word	0x200002b4
 8001184:	40002800 	.word	0x40002800
 8001188:	200002b8 	.word	0x200002b8
 800118c:	200002b9 	.word	0x200002b9
 8001190:	200002ba 	.word	0x200002ba
 8001194:	200002bc 	.word	0x200002bc
 8001198:	200001a4 	.word	0x200001a4
 800119c:	200001a0 	.word	0x200001a0
 80011a0:	2000010c 	.word	0x2000010c
 80011a4:	2000019c 	.word	0x2000019c
 80011a8:	58000800 	.word	0x58000800

080011ac <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b08b      	sub	sp, #44	; 0x2c
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011c2:	f3ef 8310 	mrs	r3, PRIMASK
 80011c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80011c8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011d0:	e004      	b.n	80011dc <HW_TS_Create+0x30>
  {
    loop++;
 80011d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011d6:	3301      	adds	r3, #1
 80011d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d80c      	bhi.n	80011fe <HW_TS_Create+0x52>
 80011e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011e8:	492c      	ldr	r1, [pc, #176]	; (800129c <HW_TS_Create+0xf0>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	4413      	add	r3, r2
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	440b      	add	r3, r1
 80011f4:	330c      	adds	r3, #12
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1e9      	bne.n	80011d2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001202:	2b06      	cmp	r3, #6
 8001204:	d038      	beq.n	8001278 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001206:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800120a:	4924      	ldr	r1, [pc, #144]	; (800129c <HW_TS_Create+0xf0>)
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	440b      	add	r3, r1
 8001216:	330c      	adds	r3, #12
 8001218:	2201      	movs	r2, #1
 800121a:	701a      	strb	r2, [r3, #0]
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	f383 8810 	msr	PRIMASK, r3
}
 8001226:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001228:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800122c:	491b      	ldr	r1, [pc, #108]	; (800129c <HW_TS_Create+0xf0>)
 800122e:	4613      	mov	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	4413      	add	r3, r2
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	440b      	add	r3, r1
 8001238:	3310      	adds	r3, #16
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800123e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001242:	4916      	ldr	r1, [pc, #88]	; (800129c <HW_TS_Create+0xf0>)
 8001244:	4613      	mov	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	440b      	add	r3, r1
 800124e:	330d      	adds	r3, #13
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001254:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001258:	4910      	ldr	r1, [pc, #64]	; (800129c <HW_TS_Create+0xf0>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	440b      	add	r3, r1
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800126e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001270:	2300      	movs	r3, #0
 8001272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001276:	e008      	b.n	800128a <HW_TS_Create+0xde>
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	f383 8810 	msr	PRIMASK, r3
}
 8001282:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001284:	2301      	movs	r3, #1
 8001286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800128a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800128e:	4618      	mov	r0, r3
 8001290:	372c      	adds	r7, #44	; 0x2c
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	2000010c 	.word	0x2000010c

080012a0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012aa:	f3ef 8310 	mrs	r3, PRIMASK
 80012ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80012b0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012b4:	b672      	cpsid	i
}
 80012b6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012b8:	2003      	movs	r0, #3
 80012ba:	f001 fc7c 	bl	8002bb6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <HW_TS_Stop+0x100>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	22ca      	movs	r2, #202	; 0xca
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HW_TS_Stop+0x100>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2253      	movs	r2, #83	; 0x53
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012d2:	79fa      	ldrb	r2, [r7, #7]
 80012d4:	4933      	ldr	r1, [pc, #204]	; (80013a4 <HW_TS_Stop+0x104>)
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	330c      	adds	r3, #12
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d148      	bne.n	800137c <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fbe2 	bl	8000ab8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80012f4:	4b2c      	ldr	r3, [pc, #176]	; (80013a8 <HW_TS_Stop+0x108>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80012fa:	7cfb      	ldrb	r3, [r7, #19]
 80012fc:	2b06      	cmp	r3, #6
 80012fe:	d135      	bne.n	800136c <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HW_TS_Stop+0x10c>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800130c:	d108      	bne.n	8001320 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800130e:	bf00      	nop
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HW_TS_Stop+0x100>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1f7      	bne.n	8001310 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <HW_TS_Stop+0x100>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <HW_TS_Stop+0x100>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001332:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001334:	bf00      	nop
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HW_TS_Stop+0x100>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f003 0304 	and.w	r3, r3, #4
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f7      	beq.n	8001336 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HW_TS_Stop+0x100>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HW_TS_Stop+0x100>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800135a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <HW_TS_Stop+0x110>)
 800135e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001362:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001364:	2003      	movs	r0, #3
 8001366:	f001 fc4e 	bl	8002c06 <HAL_NVIC_ClearPendingIRQ>
 800136a:	e007      	b.n	800137c <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <HW_TS_Stop+0x114>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	7cfa      	ldrb	r2, [r7, #19]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 8001378:	f7ff fcc0 	bl	8000cfc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <HW_TS_Stop+0x100>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	22ff      	movs	r2, #255	; 0xff
 8001384:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001386:	2003      	movs	r0, #3
 8001388:	f001 fc07 	bl	8002b9a <HAL_NVIC_EnableIRQ>
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	f383 8810 	msr	PRIMASK, r3
}
 8001396:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001398:	bf00      	nop
}
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002b4 	.word	0x200002b4
 80013a4:	2000010c 	.word	0x2000010c
 80013a8:	2000019c 	.word	0x2000019c
 80013ac:	40002800 	.word	0x40002800
 80013b0:	58000800 	.word	0x58000800
 80013b4:	2000019d 	.word	0x2000019d

080013b8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013c4:	79fa      	ldrb	r2, [r7, #7]
 80013c6:	493c      	ldr	r1, [pc, #240]	; (80014b8 <HW_TS_Start+0x100>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	330c      	adds	r3, #12
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d103      	bne.n	80013e4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff5e 	bl	80012a0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013e4:	f3ef 8310 	mrs	r3, PRIMASK
 80013e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80013ea:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013ee:	b672      	cpsid	i
}
 80013f0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013f2:	2003      	movs	r0, #3
 80013f4:	f001 fbdf 	bl	8002bb6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HW_TS_Start+0x104>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	22ca      	movs	r2, #202	; 0xca
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HW_TS_Start+0x104>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2253      	movs	r2, #83	; 0x53
 800140a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800140c:	79fa      	ldrb	r2, [r7, #7]
 800140e:	492a      	ldr	r1, [pc, #168]	; (80014b8 <HW_TS_Start+0x100>)
 8001410:	4613      	mov	r3, r2
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	330c      	adds	r3, #12
 800141c:	2202      	movs	r2, #2
 800141e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	4925      	ldr	r1, [pc, #148]	; (80014b8 <HW_TS_Start+0x100>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	3308      	adds	r3, #8
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001434:	79fa      	ldrb	r2, [r7, #7]
 8001436:	4920      	ldr	r1, [pc, #128]	; (80014b8 <HW_TS_Start+0x100>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3304      	adds	r3, #4
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fa8a 	bl	8000964 <linkTimer>
 8001450:	4603      	mov	r3, r0
 8001452:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HW_TS_Start+0x108>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HW_TS_Start+0x10c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	7c7a      	ldrb	r2, [r7, #17]
 8001462:	429a      	cmp	r2, r3
 8001464:	d002      	beq.n	800146c <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 8001466:	f7ff fc49 	bl	8000cfc <RescheduleTimerList>
 800146a:	e013      	b.n	8001494 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	4912      	ldr	r1, [pc, #72]	; (80014b8 <HW_TS_Start+0x100>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	3308      	adds	r3, #8
 800147c:	6819      	ldr	r1, [r3, #0]
 800147e:	8a7b      	ldrh	r3, [r7, #18]
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	1ac9      	subs	r1, r1, r3
 8001484:	480c      	ldr	r0, [pc, #48]	; (80014b8 <HW_TS_Start+0x100>)
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4403      	add	r3, r0
 8001490:	3308      	adds	r3, #8
 8001492:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HW_TS_Start+0x104>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	22ff      	movs	r2, #255	; 0xff
 800149c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800149e:	2003      	movs	r0, #3
 80014a0:	f001 fb7b 	bl	8002b9a <HAL_NVIC_EnableIRQ>
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	f383 8810 	msr	PRIMASK, r3
}
 80014ae:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014b0:	bf00      	nop
}
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000010c 	.word	0x2000010c
 80014bc:	200002b4 	.word	0x200002b4
 80014c0:	2000019c 	.word	0x2000019c
 80014c4:	2000019d 	.word	0x2000019d

080014c8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	460b      	mov	r3, r1
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4798      	blx	r3

  return;
 80014da:	bf00      	nop
}
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <LL_PWR_SMPS_Enable>:
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <LL_PWR_SMPS_Enable+0x1c>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4a04      	ldr	r2, [pc, #16]	; (8001500 <LL_PWR_SMPS_Enable+0x1c>)
 80014ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f2:	61d3      	str	r3, [r2, #28]
}
 80014f4:	bf00      	nop
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	58000400 	.word	0x58000400

08001504 <LL_PWR_SMPS_SetStartupCurrent>:
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001514:	4904      	ldr	r1, [pc, #16]	; (8001528 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4313      	orrs	r3, r2
 800151a:	61cb      	str	r3, [r1, #28]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	58000400 	.word	0x58000400

0800152c <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0a1b      	lsrs	r3, r3, #8
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d108      	bne.n	8001558 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f023 020f 	bic.w	r2, r3, #15
 800154e:	4913      	ldr	r1, [pc, #76]	; (800159c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4313      	orrs	r3, r2
 8001554:	61cb      	str	r3, [r1, #28]
}
 8001556:	e019      	b.n	800158c <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3b06      	subs	r3, #6
 800155c:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4413      	add	r3, r2
 8001564:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da02      	bge.n	8001572 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e004      	b.n	800157c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	dd01      	ble.n	800157c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001578:	230f      	movs	r3, #15
 800157a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	f023 020f 	bic.w	r2, r3, #15
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4905      	ldr	r1, [pc, #20]	; (800159c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001588:	4313      	orrs	r3, r2
 800158a:	61cb      	str	r3, [r1, #28]
}
 800158c:	bf00      	nop
 800158e:	371c      	adds	r7, #28
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	1fff7558 	.word	0x1fff7558
 800159c:	58000400 	.word	0x58000400

080015a0 <LL_EXTI_DisableIT_0_31>:
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <LL_EXTI_DisableIT_0_31+0x28>)
 80015aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4905      	ldr	r1, [pc, #20]	; (80015c8 <LL_EXTI_DisableIT_0_31+0x28>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	58000800 	.word	0x58000800

080015cc <LL_EXTI_DisableIT_32_63>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <LL_EXTI_DisableIT_32_63+0x28>)
 80015d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	43db      	mvns	r3, r3
 80015de:	4905      	ldr	r1, [pc, #20]	; (80015f4 <LL_EXTI_DisableIT_32_63+0x28>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	58000800 	.word	0x58000800

080015f8 <LL_RCC_HSE_SetCapacitorTuning>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001606:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001612:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	021b      	lsls	r3, r3, #8
 800161a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800161e:	4313      	orrs	r3, r2
 8001620:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	cafecafe 	.word	0xcafecafe

08001634 <LL_RCC_LSE_SetDriveCapability>:
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	f023 0218 	bic.w	r2, r3, #24
 8001648:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4313      	orrs	r3, r2
 8001650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800166c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016b8:	d101      	bne.n	80016be <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80016ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016de:	d101      	bne.n	80016e4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80016f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001704:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_AHB1_GRP1_EnableClock>:
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800171a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4313      	orrs	r3, r2
 8001728:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4013      	ands	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_AHB2_GRP1_EnableClock>:
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800174c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001752:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4313      	orrs	r3, r2
 800175a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800175c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001768:	68fb      	ldr	r3, [r7, #12]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_AHB3_GRP1_EnableClock>:
{
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800177e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001782:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4313      	orrs	r3, r2
 800178c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800178e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4013      	ands	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800179a:	68fb      	ldr	r3, [r7, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	605a      	str	r2, [r3, #4]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	605a      	str	r2, [r3, #4]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	041b      	lsls	r3, r3, #16
 8001800:	431a      	orrs	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	615a      	str	r2, [r3, #20]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	615a      	str	r2, [r3, #20]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	609a      	str	r2, [r3, #8]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	619a      	str	r2, [r3, #24]
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <LL_LPM_EnableSleep+0x1c>)
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	4a04      	ldr	r2, [pc, #16]	; (8001888 <LL_LPM_EnableSleep+0x1c>)
 8001876:	f023 0304 	bic.w	r3, r3, #4
 800187a:	6113      	str	r3, [r2, #16]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <main+0x5c>)
 8001892:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001896:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001898:	f000 ff6c 	bl	8002774 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 800189c:	f000 fa43 	bl	8001d26 <Reset_Device>
  Config_HSE();
 80018a0:	f000 fa2d 	bl	8001cfe <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a4:	f000 f822 	bl	80018ec <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80018a8:	f000 f8a8 	bl	80019fc <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 80018ac:	f000 fa20 	bl	8001cf0 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 80018b0:	f000 fa7b 	bl	8001daa <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018b4:	f000 f99a 	bl	8001bec <MX_GPIO_Init>
  MX_DMA_Init();
 80018b8:	f000 f97a 	bl	8001bb0 <MX_DMA_Init>
  MX_RF_Init();
 80018bc:	f000 f8b2 	bl	8001a24 <MX_RF_Init>
  MX_RTC_Init();
 80018c0:	f000 f8b8 	bl	8001a34 <MX_RTC_Init>
  MX_SPI1_Init();
 80018c4:	f000 f936 	bl	8001b34 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* -1- Initialize LEDs mounted on P-NUCLEO-WB55 board */
  BSP_LED_Init(LED_BLUE);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 fe39 	bl	8002540 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80018ce:	2002      	movs	r0, #2
 80018d0:	f000 fe36 	bl	8002540 <BSP_LED_Init>

  /* -2- Configure External line 0 (connected to PD.0 pin) in interrupt mode */
  EXTI0_IRQHandler_Config();
 80018d4:	f000 f9ea 	bl	8001cac <EXTI0_IRQHandler_Config>

  /* USER CODE END 2 */
  /* Init code for STM32_WPAN */
  APPE_Init();
 80018d8:	f7fe fe3e 	bl	8000558 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f007 fa76 	bl	8008dd0 <UTIL_SEQ_Run>
 80018e4:	e7fa      	b.n	80018dc <main+0x50>
 80018e6:	bf00      	nop
 80018e8:	58004000 	.word	0x58004000

080018ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0ae      	sub	sp, #184	; 0xb8
 80018f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018f6:	2248      	movs	r2, #72	; 0x48
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f007 fcb6 	bl	800926c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001900:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	615a      	str	r2, [r3, #20]
 8001912:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	2250      	movs	r2, #80	; 0x50
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f007 fca6 	bl	800926c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001920:	f001 fd50 	bl	80033c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fe85 	bl	8001634 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192a:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <SystemClock_Config+0x10c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001932:	4a31      	ldr	r2, [pc, #196]	; (80019f8 <SystemClock_Config+0x10c>)
 8001934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001938:	6013      	str	r3, [r2, #0]
 800193a:	4b2f      	ldr	r3, [pc, #188]	; (80019f8 <SystemClock_Config+0x10c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001942:	603b      	str	r3, [r7, #0]
 8001944:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001946:	2307      	movs	r3, #7
 8001948:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800194a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800194e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001950:	2301      	movs	r3, #1
 8001952:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001958:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800195a:	2340      	movs	r3, #64	; 0x40
 800195c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001966:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800196a:	4618      	mov	r0, r3
 800196c:	f002 f8a6 	bl	8003abc <HAL_RCC_OscConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001976:	f000 fa49 	bl	8001e0c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800197a:	236f      	movs	r3, #111	; 0x6f
 800197c:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800197e:	2302      	movs	r3, #2
 8001980:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001982:	2300      	movs	r3, #0
 8001984:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001986:	2300      	movs	r3, #0
 8001988:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800198a:	2300      	movs	r3, #0
 800198c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001992:	2300      	movs	r3, #0
 8001994:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001996:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800199a:	2101      	movs	r1, #1
 800199c:	4618      	mov	r0, r3
 800199e:	f002 fc19 	bl	80041d4 <HAL_RCC_ClockConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019a8:	f000 fa30 	bl	8001e0c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80019ac:	f643 0303 	movw	r3, #14339	; 0x3803
 80019b0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019be:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80019c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80019c6:	2302      	movs	r3, #2
 80019c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80019ca:	2310      	movs	r3, #16
 80019cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4618      	mov	r0, r3
 80019d2:	f003 f814 	bl	80049fe <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80019dc:	f000 fa16 	bl	8001e0c <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fd8f 	bl	8001504 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80019e6:	2004      	movs	r0, #4
 80019e8:	f7ff fda0 	bl	800152c <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80019ec:	f7ff fd7a 	bl	80014e4 <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 80019f0:	bf00      	nop
 80019f2:	37b8      	adds	r7, #184	; 0xb8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	58000400 	.word	0x58000400

080019fc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <MX_IPCC_Init+0x20>)
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <MX_IPCC_Init+0x24>)
 8001a04:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a06:	4805      	ldr	r0, [pc, #20]	; (8001a1c <MX_IPCC_Init+0x20>)
 8001a08:	f001 fc56 	bl	80032b8 <HAL_IPCC_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a12:	f000 f9fb 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000045c 	.word	0x2000045c
 8001a20:	58000c00 	.word	0x58000c00

08001a24 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = {0};
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001a48:	2300      	movs	r3, #0
 8001a4a:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001a4c:	4b37      	ldr	r3, [pc, #220]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a4e:	4a38      	ldr	r2, [pc, #224]	; (8001b30 <MX_RTC_Init+0xfc>)
 8001a50:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001a58:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a5a:	227f      	movs	r2, #127	; 0x7f
 8001a5c:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001a5e:	4b33      	ldr	r3, [pc, #204]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a60:	22ff      	movs	r2, #255	; 0xff
 8001a62:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a64:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a6a:	4b30      	ldr	r3, [pc, #192]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a70:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a7c:	482b      	ldr	r0, [pc, #172]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a7e:	f003 fa45 	bl	8004f0c <HAL_RTC_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_RTC_Init+0x58>
	{
		Error_Handler();
 8001a88:	f000 f9c0 	bl	8001e0c <Error_Handler>
	}

	/* USER CODE BEGIN Check_RTC_BKUP */
	/* Set Date and Time (if not already done before)*/
	/* Read the Back Up Register 0 Data */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x32F2)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4827      	ldr	r0, [pc, #156]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001a90:	f003 fd99 	bl	80055c6 <HAL_RTCEx_BKUPRead>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d030      	beq.n	8001b00 <MX_RTC_Init+0xcc>
	{
		/* USER CODE END Check_RTC_BKUP */

		/** Initialize RTC and set the Time and Date
		 */
		sTime.Hours = 0x13;
 8001a9e:	2313      	movs	r3, #19
 8001aa0:	713b      	strb	r3, [r7, #4]
		sTime.Minutes = 0x43;
 8001aa2:	2343      	movs	r3, #67	; 0x43
 8001aa4:	717b      	strb	r3, [r7, #5]
		sTime.Seconds = 0x25;
 8001aa6:	2325      	movs	r3, #37	; 0x25
 8001aa8:	71bb      	strb	r3, [r7, #6]
		sTime.SubSeconds = 0x0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4619      	mov	r1, r3
 8001abc:	481b      	ldr	r0, [pc, #108]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001abe:	f003 fac3 	bl	8005048 <HAL_RTC_SetTime>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_RTC_Init+0x98>
		{
			Error_Handler();
 8001ac8:	f000 f9a0 	bl	8001e0c <Error_Handler>
		}
		sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001acc:	2305      	movs	r3, #5
 8001ace:	703b      	strb	r3, [r7, #0]
		sDate.Month = RTC_MONTH_MAY;
 8001ad0:	2305      	movs	r3, #5
 8001ad2:	707b      	strb	r3, [r7, #1]
		sDate.Date = 0x14;
 8001ad4:	2314      	movs	r3, #20
 8001ad6:	70bb      	strb	r3, [r7, #2]
		sDate.Year = 0x21;
 8001ad8:	2321      	movs	r3, #33	; 0x21
 8001ada:	70fb      	strb	r3, [r7, #3]

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4812      	ldr	r0, [pc, #72]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001ae4:	f003 fbd0 	bl	8005288 <HAL_RTC_SetDate>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_RTC_Init+0xbe>
		{
			Error_Handler();
 8001aee:	f000 f98d 	bl	8001e0c <Error_Handler>
		//  {
		//    Error_Handler();
		//  }
		/* USER CODE BEGIN RTC_Init 2 */
		/* Writes a data in a RTC Backup data Register0 */
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001af2:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001af6:	2100      	movs	r1, #0
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_RTC_Init+0xf8>)
 8001afa:	f003 fd4c 	bl	8005596 <HAL_RTCEx_BKUPWrite>
 8001afe:	e00e      	b.n	8001b1e <MX_RTC_Init+0xea>
	}
	else
	{
		/* Check if the Power On Reset flag is set */
		if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST) != RESET)
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
			/* Turn on LED2: Power on reset occurred */
			//BSP_LED_On(LED2);
		}

		/* Check if Pin Reset flag is set */
		if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <MX_RTC_Init+0xea>
		{

			BSP_LED_On(LED_RED);
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f000 fd4b 	bl	80025b4 <BSP_LED_On>
		}
	}
	/* Clear source Reset Flag */
	__HAL_RCC_CLEAR_RESET_FLAGS();
 8001b1e:	f7ff fde7 	bl	80016f0 <LL_RCC_ClearResetFlags>
	//
	//  /* Enable RTC registers write protection */
	//  LL_RTC_EnableWriteProtection(RTC);
	/* USER CODE END RTC_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000618 	.word	0x20000618
 8001b30:	40002800 	.word	0x40002800

08001b34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b3a:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <MX_SPI1_Init+0x78>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b46:	4b18      	ldr	r3, [pc, #96]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b4e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b62:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b82:	2207      	movs	r2, #7
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b8e:	2208      	movs	r2, #8
 8001b90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_SPI1_Init+0x74>)
 8001b94:	f003 fd63 	bl	800565e <HAL_SPI_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001b9e:	f000 f935 	bl	8001e0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000069c 	.word	0x2000069c
 8001bac:	40013000 	.word	0x40013000

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f7ff fdac 	bl	8001712 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7ff fda9 	bl	8001712 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bc0:	2002      	movs	r0, #2
 8001bc2:	f7ff fda6 	bl	8001712 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	210f      	movs	r1, #15
 8001bca:	200e      	movs	r0, #14
 8001bcc:	f000 ffcb 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001bd0:	200e      	movs	r0, #14
 8001bd2:	f000 ffe2 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	210f      	movs	r1, #15
 8001bda:	203a      	movs	r0, #58	; 0x3a
 8001bdc:	f000 ffc3 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001be0:	203a      	movs	r0, #58	; 0x3a
 8001be2:	f000 ffda 	bl	8002b9a <HAL_NVIC_EnableIRQ>

}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
 8001bfc:	60da      	str	r2, [r3, #12]
 8001bfe:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c00:	2004      	movs	r0, #4
 8001c02:	f7ff fd9f 	bl	8001744 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff fd9c 	bl	8001744 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f7ff fd99 	bl	8001744 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c12:	2008      	movs	r0, #8
 8001c14:	f7ff fd96 	bl	8001744 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f247 0123 	movw	r1, #28707	; 0x7023
 8001c1e:	481f      	ldr	r0, [pc, #124]	; (8001c9c <MX_GPIO_Init+0xb0>)
 8001c20:	f001 fadc 	bl	80031dc <HAL_GPIO_WritePin>
                          |LED2_BR_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_SW1_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin;
 8001c24:	2310      	movs	r3, #16
 8001c26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c28:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <MX_GPIO_Init+0xb4>)
 8001c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW1_GPIO_Port, &GPIO_InitStruct);
 8001c30:	1d3b      	adds	r3, r7, #4
 8001c32:	4619      	mov	r1, r3
 8001c34:	481b      	ldr	r0, [pc, #108]	; (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c36:	f001 f961 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED3_BR_Pin LED1_BR_Pin
                           LED2_BR_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001c3a:	f247 0323 	movw	r3, #28707	; 0x7023
 8001c3e:	607b      	str	r3, [r7, #4]
                          |LED2_BR_Pin|LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c40:	2301      	movs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4812      	ldr	r0, [pc, #72]	; (8001c9c <MX_GPIO_Init+0xb0>)
 8001c52:	f001 f953 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_BR_Pin */
  GPIO_InitStruct.Pin = SW1_BR_Pin;
 8001c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_GPIO_Init+0xb4>)
 8001c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_BR_GPIO_Port, &GPIO_InitStruct);
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	480e      	ldr	r0, [pc, #56]	; (8001ca4 <MX_GPIO_Init+0xb8>)
 8001c6a:	f001 f947 	bl	8002efc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_GPIO_Init+0xb4>)
 8001c74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <MX_GPIO_Init+0xbc>)
 8001c80:	f001 f93c 	bl	8002efc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	2006      	movs	r0, #6
 8001c8a:	f000 ff6c 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c8e:	2006      	movs	r0, #6
 8001c90:	f000 ff83 	bl	8002b9a <HAL_NVIC_EnableIRQ>

}
 8001c94:	bf00      	nop
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	48000400 	.word	0x48000400
 8001ca0:	10210000 	.word	0x10210000
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	48000c00 	.word	0x48000c00

08001cac <EXTI0_IRQHandler_Config>:
  * @brief  Configures EXTI line 0 (connected to PD.0 pin) in interrupt mode
  * @param  None
  * @retval None
  */
static void EXTI0_IRQHandler_Config(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;


  /* Enable GPIOC clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb2:	2008      	movs	r0, #8
 8001cb4:	f7ff fd46 	bl	8001744 <LL_AHB2_GRP1_EnableClock>

  /* Configure PD.0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <EXTI0_IRQHandler_Config+0x3c>)
 8001cba:	60bb      	str	r3, [r7, #8]

  GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = GPIO_PIN_0;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <EXTI0_IRQHandler_Config+0x40>)
 8001cca:	f001 f917 	bl	8002efc <HAL_GPIO_Init>


  /* Enable and set line 0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	2006      	movs	r0, #6
 8001cd4:	f000 ff47 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cd8:	2006      	movs	r0, #6
 8001cda:	f000 ff5e 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	10210000 	.word	0x10210000
 8001cec:	48000c00 	.word	0x48000c00

08001cf0 <PeriphClock_Config>:


void PeriphClock_Config(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001cf4:	bf00      	nop
}
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001d04:	2000      	movs	r0, #0
 8001d06:	f005 f9b9 	bl	800707c <OTP_Read>
 8001d0a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	799b      	ldrb	r3, [r3, #6]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fc6e 	bl	80015f8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001d1c:	bf00      	nop
 8001d1e:	bf00      	nop
}  
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <Reset_Device>:


static void Reset_Device( void )
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001d2a:	f000 f827 	bl	8001d7c <Reset_BackupDomain>

	Reset_IPCC();
 8001d2e:	f000 f803 	bl	8001d38 <Reset_IPCC>
#endif

	return;
 8001d32:	bf00      	nop
}
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001d3c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d40:	f7ff fd19 	bl	8001776 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001d44:	213f      	movs	r1, #63	; 0x3f
 8001d46:	480c      	ldr	r0, [pc, #48]	; (8001d78 <Reset_IPCC+0x40>)
 8001d48:	f7ff fd74 	bl	8001834 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001d4c:	213f      	movs	r1, #63	; 0x3f
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <Reset_IPCC+0x40>)
 8001d50:	f7ff fd7e 	bl	8001850 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001d54:	213f      	movs	r1, #63	; 0x3f
 8001d56:	4808      	ldr	r0, [pc, #32]	; (8001d78 <Reset_IPCC+0x40>)
 8001d58:	f7ff fd26 	bl	80017a8 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001d5c:	213f      	movs	r1, #63	; 0x3f
 8001d5e:	4806      	ldr	r0, [pc, #24]	; (8001d78 <Reset_IPCC+0x40>)
 8001d60:	f7ff fd45 	bl	80017ee <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001d64:	213f      	movs	r1, #63	; 0x3f
 8001d66:	4804      	ldr	r0, [pc, #16]	; (8001d78 <Reset_IPCC+0x40>)
 8001d68:	f7ff fd30 	bl	80017cc <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001d6c:	213f      	movs	r1, #63	; 0x3f
 8001d6e:	4802      	ldr	r0, [pc, #8]	; (8001d78 <Reset_IPCC+0x40>)
 8001d70:	f7ff fd4f 	bl	8001812 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001d74:	bf00      	nop
}
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	58000c00 	.word	0x58000c00

08001d7c <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001d80:	f7ff fc90 	bl	80016a4 <LL_RCC_IsActiveFlag_PINRST>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00d      	beq.n	8001da6 <Reset_BackupDomain+0x2a>
 8001d8a:	f7ff fc9e 	bl	80016ca <LL_RCC_IsActiveFlag_SFTRST>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d108      	bne.n	8001da6 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001d94:	f001 fb16 	bl	80033c4 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001d98:	f001 fb14 	bl	80033c4 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001d9c:	f7ff fc60 	bl	8001660 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001da0:	f7ff fc6f 	bl	8001682 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
}
 8001da8:	bd80      	pop	{r7, pc}

08001daa <Init_Exti>:

static void Init_Exti( void )
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
 8001db2:	f7ff fbf5 	bl	80015a0 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001db6:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001dba:	f7ff fc07 	bl	80015cc <LL_EXTI_DisableIT_32_63>

  return;
 8001dbe:	bf00      	nop
}
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b084      	sub	sp, #16
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dca:	f000 fd41 	bl	8002850 <HAL_GetTick>
 8001dce:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d00a      	beq.n	8001df2 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001ddc:	f000 fd50 	bl	8002880 <HAL_GetTickFreq>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dea:	e002      	b.n	8001df2 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001dec:	f7ff fd3e 	bl	800186c <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001df0:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001df2:	f000 fd2d 	bl	8002850 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d8f4      	bhi.n	8001dec <HAL_Delay+0x2a>
  }
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <LL_PWR_SetPowerMode>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <LL_PWR_SetPowerMode+0x24>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 0207 	bic.w	r2, r3, #7
 8001e2c:	4904      	ldr	r1, [pc, #16]	; (8001e40 <LL_PWR_SetPowerMode+0x24>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	58000400 	.word	0x58000400

08001e44 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <LL_PWR_ClearFlag_WU+0x14>)
 8001e4a:	221f      	movs	r2, #31
 8001e4c:	619a      	str	r2, [r3, #24]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	58000400 	.word	0x58000400

08001e5c <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e6e:	d101      	bne.n	8001e74 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	58000400 	.word	0x58000400

08001e84 <LL_RCC_HSE_Enable>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_HSE_IsReady>:
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eb4:	d101      	bne.n	8001eba <LL_RCC_HSE_IsReady+0x18>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <LL_RCC_HSE_IsReady+0x1a>
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_HSI_Enable>:
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed8:	6013      	str	r3, [r2, #0]
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <LL_RCC_HSI_IsReady>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef6:	d101      	bne.n	8001efc <LL_RCC_HSI_IsReady+0x18>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <LL_RCC_HSI_IsReady+0x1a>
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_RCC_SetSysClkSource>:
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f023 0203 	bic.w	r2, r3, #3
 8001f1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	608b      	str	r3, [r1, #8]
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <LL_RCC_GetSysClkSource>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_RCC_SetSMPSClockSource>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	f023 0203 	bic.w	r2, r3, #3
 8001f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4313      	orrs	r3, r2
 8001f62:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr

08001f70 <LL_LPM_EnableSleep>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <LL_LPM_EnableSleep+0x1c>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <LL_LPM_EnableSleep+0x1c>)
 8001f7a:	f023 0304 	bic.w	r3, r3, #4
 8001f7e:	6113      	str	r3, [r2, #16]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <LL_LPM_EnableDeepSleep+0x1c>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a04      	ldr	r2, [pc, #16]	; (8001fac <LL_LPM_EnableDeepSleep+0x1c>)
 8001f9a:	f043 0304 	orr.w	r3, r3, #4
 8001f9e:	6113      	str	r3, [r2, #16]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	3220      	adds	r2, #32
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <LL_HSEM_1StepLock+0x2c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d001      	beq.n	8001fce <LL_HSEM_1StepLock+0x1e>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <LL_HSEM_1StepLock+0x20>
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	80000400 	.word	0x80000400

08001fe0 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode( void )
{
 8002006:	b580      	push	{r7, lr}
 8002008:	af00      	add	r7, sp, #0

  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 800200a:	f000 fc45 	bl	8002898 <HAL_SuspendTick>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU( );
 800200e:	f7ff ff19 	bl	8001e44 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode( LL_PWR_MODE_STANDBY );
 8002012:	2003      	movs	r0, #3
 8002014:	f7ff ff02 	bl	8001e1c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002018:	f7ff ffba 	bl	8001f90 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI( );
 800201c:	bf30      	wfi
/* USER CODE END PWR_EnterOffMode */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}

08002022 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode( void )
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitOffMode */

  HAL_ResumeTick();
 8002026:	f000 fc47 	bl	80028b8 <HAL_ResumeTick>

/* USER CODE END PWR_ExitOffMode */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode( void )
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode ( this will abort the Stop Mode entry ).
   */
  HAL_SuspendTick();
 8002034:	f000 fc30 	bl	8002898 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 8002038:	bf00      	nop
 800203a:	2103      	movs	r1, #3
 800203c:	4814      	ldr	r0, [pc, #80]	; (8002090 <PWR_EnterStopMode+0x60>)
 800203e:	f7ff ffb7 	bl	8001fb0 <LL_HSEM_1StepLock>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f8      	bne.n	800203a <PWR_EnterStopMode+0xa>

  if ( ! LL_HSEM_1StepLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID ) )
 8002048:	2104      	movs	r1, #4
 800204a:	4811      	ldr	r0, [pc, #68]	; (8002090 <PWR_EnterStopMode+0x60>)
 800204c:	f7ff ffb0 	bl	8001fb0 <LL_HSEM_1StepLock>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10c      	bne.n	8002070 <PWR_EnterStopMode+0x40>
  {
    if( LL_PWR_IsActiveFlag_C2DS( ) )
 8002056:	f7ff ff01 	bl	8001e5c <LL_PWR_IsActiveFlag_C2DS>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <PWR_EnterStopMode+0x44>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8002060:	2200      	movs	r2, #0
 8002062:	2104      	movs	r1, #4
 8002064:	480a      	ldr	r0, [pc, #40]	; (8002090 <PWR_EnterStopMode+0x60>)
 8002066:	f7ff ffbb 	bl	8001fe0 <LL_HSEM_ReleaseLock>

      /**
       * The switch on HSI before entering Stop Mode is required 
       */
      Switch_On_HSI( );
 800206a:	f000 f852 	bl	8002112 <Switch_On_HSI>
 800206e:	e001      	b.n	8002074 <PWR_EnterStopMode+0x44>
  else
  {
    /**
     * The switch on HSI before entering Stop Mode is required 
     */
    Switch_On_HSI( );
 8002070:	f000 f84f 	bl	8002112 <Switch_On_HSI>
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 8002074:	2200      	movs	r2, #0
 8002076:	2103      	movs	r1, #3
 8002078:	4805      	ldr	r0, [pc, #20]	; (8002090 <PWR_EnterStopMode+0x60>)
 800207a:	f7ff ffb1 	bl	8001fe0 <LL_HSEM_ReleaseLock>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode( LL_PWR_MODE_STOP2 );
 800207e:	2002      	movs	r0, #2
 8002080:	f7ff fecc 	bl	8001e1c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep( ); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8002084:	f7ff ff84 	bl	8001f90 <LL_LPM_EnableDeepSleep>
   */
#if defined ( __CC_ARM)
  __force_stores( );
#endif

  __WFI();
 8002088:	bf30      	wfi
/* USER CODE END PWR_EnterStopMode */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	58001400 	.word	0x58001400

08002094 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode( void )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0 );
 8002098:	2200      	movs	r2, #0
 800209a:	2104      	movs	r1, #4
 800209c:	4814      	ldr	r0, [pc, #80]	; (80020f0 <PWR_ExitStopMode+0x5c>)
 800209e:	f7ff ff9f 	bl	8001fe0 <LL_HSEM_ReleaseLock>

  while( LL_HSEM_1StepLock( HSEM, CFG_HW_RCC_SEMID ) );
 80020a2:	bf00      	nop
 80020a4:	2103      	movs	r1, #3
 80020a6:	4812      	ldr	r0, [pc, #72]	; (80020f0 <PWR_ExitStopMode+0x5c>)
 80020a8:	f7ff ff82 	bl	8001fb0 <LL_HSEM_1StepLock>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f8      	bne.n	80020a4 <PWR_ExitStopMode+0x10>

  if(LL_RCC_GetSysClkSource( ) == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80020b2:	f7ff ff3d 	bl	8001f30 <LL_RCC_GetSysClkSource>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d110      	bne.n	80020de <PWR_ExitStopMode+0x4a>
  {
    LL_RCC_HSE_Enable( );
 80020bc:	f7ff fee2 	bl	8001e84 <LL_RCC_HSE_Enable>
    while(!LL_RCC_HSE_IsReady( ));
 80020c0:	bf00      	nop
 80020c2:	f7ff feee 	bl	8001ea2 <LL_RCC_HSE_IsReady>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0fa      	beq.n	80020c2 <PWR_ExitStopMode+0x2e>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 80020cc:	2002      	movs	r0, #2
 80020ce:	f7ff ff1b 	bl	8001f08 <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 80020d2:	bf00      	nop
 80020d4:	f7ff ff2c 	bl	8001f30 <LL_RCC_GetSysClkSource>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d1fa      	bne.n	80020d4 <PWR_ExitStopMode+0x40>
     * there is nothing to do here
     */
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock( HSEM, CFG_HW_RCC_SEMID, 0 );
 80020de:	2200      	movs	r2, #0
 80020e0:	2103      	movs	r1, #3
 80020e2:	4803      	ldr	r0, [pc, #12]	; (80020f0 <PWR_ExitStopMode+0x5c>)
 80020e4:	f7ff ff7c 	bl	8001fe0 <LL_HSEM_ReleaseLock>

  HAL_ResumeTick();
 80020e8:	f000 fbe6 	bl	80028b8 <HAL_ResumeTick>

/* USER CODE END PWR_ExitStopMode */
}
 80020ec:	bf00      	nop
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	58001400 	.word	0x58001400

080020f4 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode( void )
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode */

  HAL_SuspendTick();
 80020f8:	f000 fbce 	bl	8002898 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80020fc:	f7ff ff38 	bl	8001f70 <LL_LPM_EnableSleep>
   */
#if defined ( __CC_ARM)
  __force_stores();
#endif

  __WFI( );
 8002100:	bf30      	wfi
/* USER CODE END PWR_EnterSleepMode */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}

08002106 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode( void )
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode */

  HAL_ResumeTick();
 800210a:	f000 fbd5 	bl	80028b8 <HAL_ResumeTick>

/* USER CODE END PWR_ExitSleepMode */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}

08002112 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI( void )
{
 8002112:	b580      	push	{r7, lr}
 8002114:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable( );
 8002116:	f7ff fed6 	bl	8001ec6 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady( ));
 800211a:	bf00      	nop
 800211c:	f7ff fee2 	bl	8001ee4 <LL_RCC_HSI_IsReady>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0fa      	beq.n	800211c <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource( LL_RCC_SYS_CLKSOURCE_HSI );
 8002126:	2001      	movs	r0, #1
 8002128:	f7ff feee 	bl	8001f08 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 800212c:	2000      	movs	r0, #0
 800212e:	f7ff ff0b 	bl	8001f48 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8002132:	bf00      	nop
 8002134:	f7ff fefc 	bl	8001f30 <LL_RCC_GetSysClkSource>
 8002138:	4603      	mov	r3, r0
 800213a:	2b04      	cmp	r3, #4
 800213c:	d1fa      	bne.n	8002134 <Switch_On_HSI+0x22>
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <LL_RCC_SetRTCClockSource>:
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <LL_RCC_EnableRTC>:
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_AHB2_GRP1_EnableClock>:
{
 8002192:	b480      	push	{r7}
 8002194:	b085      	sub	sp, #20
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4013      	ands	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_AHB3_GRP1_EnableClock>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4313      	orrs	r3, r2
 80021da:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021e8:	68fb      	ldr	r3, [r7, #12]
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_APB1_GRP1_EnableClock>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	b085      	sub	sp, #20
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002202:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4313      	orrs	r3, r2
 800220c:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800220e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002212:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4013      	ands	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_APB2_GRP1_EnableClock>:
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4313      	orrs	r3, r2
 800223e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002244:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800224c:	68fb      	ldr	r3, [r7, #12]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800225e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002262:	f7ff ffaf 	bl	80021c4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2100      	movs	r1, #0
 800226a:	202e      	movs	r0, #46	; 0x2e
 800226c:	f000 fc7b 	bl	8002b66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002270:	202e      	movs	r0, #46	; 0x2e
 8002272:	f000 fc92 	bl	8002b9a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <HAL_IPCC_MspInit+0x44>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d113      	bne.n	80022b6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800228e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002292:	f7ff ff97 	bl	80021c4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	202c      	movs	r0, #44	; 0x2c
 800229c:	f000 fc63 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80022a0:	202c      	movs	r0, #44	; 0x2c
 80022a2:	f000 fc7a 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	202d      	movs	r0, #45	; 0x2d
 80022ac:	f000 fc5b 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80022b0:	202d      	movs	r0, #45	; 0x2d
 80022b2:	f000 fc72 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	58000c00 	.word	0x58000c00

080022c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <HAL_RTC_MspInit+0x3c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d110      	bne.n	80022f8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80022d6:	f001 f875 	bl	80033c4 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 80022da:	f001 f873 	bl	80033c4 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 80022de:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022e2:	f7ff ff2f 	bl	8002144 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80022e6:	f7ff ff43 	bl	8002170 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80022ea:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022ee:	f7ff ff82 	bl	80021f6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f003 f97d 	bl	80055f2 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40002800 	.word	0x40002800

08002304 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 030c 	add.w	r3, r7, #12
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_SPI_MspInit+0x5c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d117      	bne.n	8002356 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002326:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800232a:	f7ff ff7d 	bl	8002228 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff ff2f 	bl	8002192 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002334:	23f0      	movs	r3, #240	; 0xf0
 8002336:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002338:	2302      	movs	r3, #2
 800233a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002344:	2305      	movs	r3, #5
 8002346:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002348:	f107 030c 	add.w	r3, r7, #12
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002352:	f000 fdd3 	bl	8002efc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40013000 	.word	0x40013000

08002364 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002368:	bf00      	nop
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <HardFault_Handler+0x4>

08002378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <MemManage_Handler+0x4>

0800237e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <BusFault_Handler+0x4>

08002384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <UsageFault_Handler+0x4>

0800238a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800239c:	bf00      	nop
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b8:	f000 fa36 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f000 ff3b 	bl	8003240 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <DMA1_Channel4_IRQHandler+0x10>)
 80023d6:	f000 fce2 	bl	8002d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	2000063c 	.word	0x2000063c

080023e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <USART1_IRQHandler+0x10>)
 80023ea:	f003 f9db 	bl	80057a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000588 	.word	0x20000588

080023f8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <LPUART1_IRQHandler+0x10>)
 80023fe:	f003 f9d1 	bl	80057a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000498 	.word	0x20000498

0800240c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002410:	f006 fb12 	bl	8008a38 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}

08002418 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800241c:	f006 fb44 	bl	8008aa8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}

08002424 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002428:	f000 ff22 	bl	8003270 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}

08002430 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002434:	4802      	ldr	r0, [pc, #8]	; (8002440 <DMA2_Channel4_IRQHandler+0x10>)
 8002436:	f000 fcb2 	bl	8002d9e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000528 	.word	0x20000528

08002444 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002448:	2010      	movs	r0, #16
 800244a:	f000 fef9 	bl	8003240 <HAL_GPIO_EXTI_IRQHandler>
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}

08002452 <RTC_WKUP_IRQHandler>:
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
}

void RTC_WKUP_IRQHandler(void)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8002456:	f7fe fcef 	bl	8000e38 <HW_TS_RTC_Wakeup_Handler>
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <SystemInit+0xa0>)
 8002466:	2200      	movs	r2, #0
 8002468:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800246a:	4b25      	ldr	r3, [pc, #148]	; (8002500 <SystemInit+0xa0>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <SystemInit+0xa0>)
 8002472:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002476:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800247a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002492:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <SystemInit+0xa4>)
 80024a0:	4013      	ands	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80024a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b0:	f023 0305 	bic.w	r3, r3, #5
 80024b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80024b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80024cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d0:	4a0d      	ldr	r2, [pc, #52]	; (8002508 <SystemInit+0xa8>)
 80024d2:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	4a0b      	ldr	r2, [pc, #44]	; (8002508 <SystemInit+0xa8>)
 80024da:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	e000ed00 	.word	0xe000ed00
 8002504:	faf6fefb 	.word	0xfaf6fefb
 8002508:	22041000 	.word	0x22041000

0800250c <LL_AHB2_GRP1_EnableClock>:
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800251a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4313      	orrs	r3, r2
 8002522:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002528:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002530:	68fb      	ldr	r3, [r7, #12]
}
 8002532:	bf00      	nop
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	2200      	movs	r2, #0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	605a      	str	r2, [r3, #4]
 8002554:	609a      	str	r2, [r3, #8]
 8002556:	60da      	str	r2, [r3, #12]
 8002558:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800255a:	2002      	movs	r0, #2
 800255c:	f7ff ffd6 	bl	800250c <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <BSP_LED_Init+0x6c>)
 8002564:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002568:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800256a:	2301      	movs	r3, #1
 800256c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <BSP_LED_Init+0x70>)
 800257a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800257e:	f107 020c 	add.w	r2, r7, #12
 8002582:	4611      	mov	r1, r2
 8002584:	4618      	mov	r0, r3
 8002586:	f000 fcb9 	bl	8002efc <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <BSP_LED_Init+0x70>)
 800258e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	4a05      	ldr	r2, [pc, #20]	; (80025ac <BSP_LED_Init+0x6c>)
 8002596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800259a:	2200      	movs	r2, #0
 800259c:	4619      	mov	r1, r3
 800259e:	f000 fe1d 	bl	80031dc <HAL_GPIO_WritePin>
}
 80025a2:	bf00      	nop
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	0800aaf4 	.word	0x0800aaf4
 80025b0:	2000000c 	.word	0x2000000c

080025b4 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <BSP_LED_On+0x2c>)
 80025c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <BSP_LED_On+0x30>)
 80025ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ce:	2201      	movs	r2, #1
 80025d0:	4619      	mov	r1, r3
 80025d2:	f000 fe03 	bl	80031dc <HAL_GPIO_WritePin>
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	2000000c 	.word	0x2000000c
 80025e4:	0800aaf4 	.word	0x0800aaf4

080025e8 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	4a07      	ldr	r2, [pc, #28]	; (8002614 <BSP_LED_Off+0x2c>)
 80025f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <BSP_LED_Off+0x30>)
 80025fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002602:	2200      	movs	r2, #0
 8002604:	4619      	mov	r1, r3
 8002606:	f000 fde9 	bl	80031dc <HAL_GPIO_WritePin>
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	2000000c 	.word	0x2000000c
 8002618:	0800aaf4 	.word	0x0800aaf4

0800261c <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	4a07      	ldr	r2, [pc, #28]	; (8002648 <BSP_LED_Toggle+0x2c>)
 800262a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4906      	ldr	r1, [pc, #24]	; (800264c <BSP_LED_Toggle+0x30>)
 8002632:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002636:	4619      	mov	r1, r3
 8002638:	4610      	mov	r0, r2
 800263a:	f000 fde7 	bl	800320c <HAL_GPIO_TogglePin>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000000c 	.word	0x2000000c
 800264c:	0800aaf4 	.word	0x0800aaf4

08002650 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	460a      	mov	r2, r1
 800265a:	71fb      	strb	r3, [r7, #7]
 800265c:	4613      	mov	r3, r2
 800265e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d103      	bne.n	800267e <BSP_PB_Init+0x2e>
 8002676:	2004      	movs	r0, #4
 8002678:	f7ff ff48 	bl	800250c <LL_AHB2_GRP1_EnableClock>
 800267c:	e00c      	b.n	8002698 <BSP_PB_Init+0x48>
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d103      	bne.n	800268c <BSP_PB_Init+0x3c>
 8002684:	2008      	movs	r0, #8
 8002686:	f7ff ff41 	bl	800250c <LL_AHB2_GRP1_EnableClock>
 800268a:	e005      	b.n	8002698 <BSP_PB_Init+0x48>
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d102      	bne.n	8002698 <BSP_PB_Init+0x48>
 8002692:	2008      	movs	r0, #8
 8002694:	f7ff ff3a 	bl	800250c <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002698:	79bb      	ldrb	r3, [r7, #6]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d117      	bne.n	80026ce <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4a20      	ldr	r2, [pc, #128]	; (8002724 <BSP_PB_Init+0xd4>)
 80026a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026a6:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80026a8:	2300      	movs	r3, #0
 80026aa:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80026ac:	2301      	movs	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026b0:	2302      	movs	r3, #2
 80026b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <BSP_PB_Init+0xd8>)
 80026b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026bc:	f107 020c 	add.w	r2, r7, #12
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fc1a 	bl	8002efc <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7ff fb7a 	bl	8001dc2 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80026ce:	79bb      	ldrb	r3, [r7, #6]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d122      	bne.n	800271a <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	4a13      	ldr	r2, [pc, #76]	; (8002724 <BSP_PB_Init+0xd4>)
 80026d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026dc:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80026de:	2301      	movs	r3, #1
 80026e0:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <BSP_PB_Init+0xdc>)
 80026e4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <BSP_PB_Init+0xd8>)
 80026ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ee:	f107 020c 	add.w	r2, r7, #12
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fc01 	bl	8002efc <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <BSP_PB_Init+0xe0>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	b25b      	sxtb	r3, r3
 8002702:	2200      	movs	r2, #0
 8002704:	210f      	movs	r1, #15
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fa2d 	bl	8002b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	4a08      	ldr	r2, [pc, #32]	; (8002730 <BSP_PB_Init+0xe0>)
 8002710:	5cd3      	ldrb	r3, [r2, r3]
 8002712:	b25b      	sxtb	r3, r3
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fa40 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  }
}
 800271a:	bf00      	nop
 800271c:	3720      	adds	r7, #32
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	0800aafc 	.word	0x0800aafc
 8002728:	20000018 	.word	0x20000018
 800272c:	10210000 	.word	0x10210000
 8002730:	0800ab04 	.word	0x0800ab04

08002734 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002738:	4b05      	ldr	r3, [pc, #20]	; (8002750 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6053      	str	r3, [r2, #4]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e0042000 	.word	0xe0042000

08002754 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	6053      	str	r3, [r2, #4]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	e0042000 	.word	0xe0042000

08002774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800277e:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <HAL_Init+0x3c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a0b      	ldr	r2, [pc, #44]	; (80027b0 <HAL_Init+0x3c>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002788:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800278a:	2003      	movs	r0, #3
 800278c:	f000 f9e0 	bl	8002b50 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002790:	2000      	movs	r0, #0
 8002792:	f000 f80f 	bl	80027b4 <HAL_InitTick>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	71fb      	strb	r3, [r7, #7]
 80027a0:	e001      	b.n	80027a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a2:	f7ff fd5a 	bl	800225a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a6:	79fb      	ldrb	r3, [r7, #7]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	58004000 	.word	0x58004000

080027b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80027c0:	4b17      	ldr	r3, [pc, #92]	; (8002820 <HAL_InitTick+0x6c>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d024      	beq.n	8002812 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027c8:	f001 feb0 	bl	800452c <HAL_RCC_GetHCLKFreq>
 80027cc:	4602      	mov	r2, r0
 80027ce:	4b14      	ldr	r3, [pc, #80]	; (8002820 <HAL_InitTick+0x6c>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	4619      	mov	r1, r3
 80027d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f9f6 	bl	8002bd2 <HAL_SYSTICK_Config>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10f      	bne.n	800280c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b0f      	cmp	r3, #15
 80027f0:	d809      	bhi.n	8002806 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f2:	2200      	movs	r2, #0
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	f04f 30ff 	mov.w	r0, #4294967295
 80027fa:	f000 f9b4 	bl	8002b66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027fe:	4a09      	ldr	r2, [pc, #36]	; (8002824 <HAL_InitTick+0x70>)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	e007      	b.n	8002816 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	e004      	b.n	8002816 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e001      	b.n	8002816 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002816:	7bfb      	ldrb	r3, [r7, #15]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000028 	.word	0x20000028
 8002824:	20000024 	.word	0x20000024

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000028 	.word	0x20000028
 800284c:	20000700 	.word	0x20000700

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000700 	.word	0x20000700

08002868 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_GetTickPrio+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000024 	.word	0x20000024

08002880 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002884:	4b03      	ldr	r3, [pc, #12]	; (8002894 <HAL_GetTickFreq+0x14>)
 8002886:	781b      	ldrb	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	20000028 	.word	0x20000028

08002898 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_SuspendTick+0x1c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_SuspendTick+0x1c>)
 80028a2:	f023 0302 	bic.w	r3, r3, #2
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_ResumeTick+0x1c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a04      	ldr	r2, [pc, #16]	; (80028d4 <HAL_ResumeTick+0x1c>)
 80028c2:	f043 0302 	orr.w	r3, r3, #2
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80028dc:	f7ff ff2a 	bl	8002734 <LL_DBGMCU_EnableDBGSleepMode>
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80028e8:	f7ff ff34 	bl	8002754 <LL_DBGMCU_EnableDBGStopMode>
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002900:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800290c:	4013      	ands	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800291c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002922:	4a04      	ldr	r2, [pc, #16]	; (8002934 <__NVIC_SetPriorityGrouping+0x44>)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	60d3      	str	r3, [r2, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800293c:	4b04      	ldr	r3, [pc, #16]	; (8002950 <__NVIC_GetPriorityGrouping+0x18>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	f003 0307 	and.w	r3, r3, #7
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	2b00      	cmp	r3, #0
 8002964:	db0b      	blt.n	800297e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	f003 021f 	and.w	r2, r3, #31
 800296c:	4907      	ldr	r1, [pc, #28]	; (800298c <__NVIC_EnableIRQ+0x38>)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2001      	movs	r0, #1
 8002976:	fa00 f202 	lsl.w	r2, r0, r2
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000e100 	.word	0xe000e100

08002990 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	db12      	blt.n	80029c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	f003 021f 	and.w	r2, r3, #31
 80029a8:	490a      	ldr	r1, [pc, #40]	; (80029d4 <__NVIC_DisableIRQ+0x44>)
 80029aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2001      	movs	r0, #1
 80029b2:	fa00 f202 	lsl.w	r2, r0, r2
 80029b6:	3320      	adds	r3, #32
 80029b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80029bc:	f3bf 8f4f 	dsb	sy
}
 80029c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029c2:	f3bf 8f6f 	isb	sy
}
 80029c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	db0c      	blt.n	8002a04 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	f003 021f 	and.w	r2, r3, #31
 80029f0:	4907      	ldr	r1, [pc, #28]	; (8002a10 <__NVIC_SetPendingIRQ+0x38>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2001      	movs	r0, #1
 80029fa:	fa00 f202 	lsl.w	r2, r0, r2
 80029fe:	3340      	adds	r3, #64	; 0x40
 8002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000e100 	.word	0xe000e100

08002a14 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	db0c      	blt.n	8002a40 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	4907      	ldr	r1, [pc, #28]	; (8002a4c <__NVIC_ClearPendingIRQ+0x38>)
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	2001      	movs	r0, #1
 8002a36:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3a:	3360      	adds	r3, #96	; 0x60
 8002a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000e100 	.word	0xe000e100

08002a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	6039      	str	r1, [r7, #0]
 8002a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	db0a      	blt.n	8002a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	490c      	ldr	r1, [pc, #48]	; (8002a9c <__NVIC_SetPriority+0x4c>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a78:	e00a      	b.n	8002a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	4908      	ldr	r1, [pc, #32]	; (8002aa0 <__NVIC_SetPriority+0x50>)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	3b04      	subs	r3, #4
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	761a      	strb	r2, [r3, #24]
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b089      	sub	sp, #36	; 0x24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f1c3 0307 	rsb	r3, r3, #7
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	bf28      	it	cs
 8002ac2:	2304      	movcs	r3, #4
 8002ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2b06      	cmp	r3, #6
 8002acc:	d902      	bls.n	8002ad4 <NVIC_EncodePriority+0x30>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	3b03      	subs	r3, #3
 8002ad2:	e000      	b.n	8002ad6 <NVIC_EncodePriority+0x32>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43da      	mvns	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	401a      	ands	r2, r3
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa01 f303 	lsl.w	r3, r1, r3
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	4313      	orrs	r3, r2
         );
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b1c:	d301      	bcc.n	8002b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e00f      	b.n	8002b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <SysTick_Config+0x40>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2a:	210f      	movs	r1, #15
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	f7ff ff8e 	bl	8002a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <SysTick_Config+0x40>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3a:	4b04      	ldr	r3, [pc, #16]	; (8002b4c <SysTick_Config+0x40>)
 8002b3c:	2207      	movs	r2, #7
 8002b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	e000e010 	.word	0xe000e010

08002b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff fec9 	bl	80028f0 <__NVIC_SetPriorityGrouping>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b086      	sub	sp, #24
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b74:	f7ff fee0 	bl	8002938 <__NVIC_GetPriorityGrouping>
 8002b78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6978      	ldr	r0, [r7, #20]
 8002b80:	f7ff ff90 	bl	8002aa4 <NVIC_EncodePriority>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff5f 	bl	8002a50 <__NVIC_SetPriority>
}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fed3 	bl	8002954 <__NVIC_EnableIRQ>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fee3 	bl	8002990 <__NVIC_DisableIRQ>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ff96 	bl	8002b0c <SysTick_Config>
 8002be0:	4603      	mov	r3, r0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b082      	sub	sp, #8
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff feed 	bl	80029d8 <__NVIC_SetPendingIRQ>
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fefd 	bl	8002a14 <__NVIC_ClearPendingIRQ>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e04f      	b.n	8002cd4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d008      	beq.n	8002c52 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2204      	movs	r2, #4
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e040      	b.n	8002cd4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 020e 	bic.w	r2, r2, #14
 8002c60:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0201 	bic.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c86:	f003 021c 	and.w	r2, r3, #28
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2101      	movs	r1, #1
 8002c90:	fa01 f202 	lsl.w	r2, r1, r2
 8002c94:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c9e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002cc0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d005      	beq.n	8002d04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2204      	movs	r2, #4
 8002cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
 8002d02:	e047      	b.n	8002d94 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 020e 	bic.w	r2, r2, #14
 8002d12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0201 	bic.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f003 021c 	and.w	r2, r3, #28
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d50:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d68:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002d72:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
    }
  }
  return status;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f003 031c 	and.w	r3, r3, #28
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d026      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x7a>
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d021      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d107      	bne.n	8002df2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0204 	bic.w	r2, r2, #4
 8002df0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f003 021c 	and.w	r2, r3, #28
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	2104      	movs	r1, #4
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d071      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e16:	e06c      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1c:	f003 031c 	and.w	r3, r3, #28
 8002e20:	2202      	movs	r2, #2
 8002e22:	409a      	lsls	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d02e      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xec>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d029      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0320 	and.w	r3, r3, #32
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 020a 	bic.w	r2, r2, #10
 8002e52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	f003 021c 	and.w	r2, r3, #28
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	2102      	movs	r1, #2
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d038      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002e88:	e033      	b.n	8002ef2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	f003 031c 	and.w	r3, r3, #28
 8002e92:	2208      	movs	r2, #8
 8002e94:	409a      	lsls	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d02a      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x156>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d025      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 020e 	bic.w	r2, r2, #14
 8002eb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebc:	f003 021c 	and.w	r2, r3, #28
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d004      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
}
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f0a:	e14c      	b.n	80031a6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2101      	movs	r1, #1
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 813e 	beq.w	80031a0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d00b      	beq.n	8002f44 <HAL_GPIO_Init+0x48>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d007      	beq.n	8002f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f38:	2b11      	cmp	r3, #17
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b12      	cmp	r3, #18
 8002f42:	d130      	bne.n	8002fa6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2203      	movs	r2, #3
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4013      	ands	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 0201 	and.w	r2, r3, #1
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0xea>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b12      	cmp	r3, #18
 8002fe4:	d123      	bne.n	800302e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	08da      	lsrs	r2, r3, #3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3208      	adds	r2, #8
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f003 0307 	and.w	r3, r3, #7
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	4013      	ands	r3, r2
 8003008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0307 	and.w	r3, r3, #7
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	08da      	lsrs	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3208      	adds	r2, #8
 8003028:	6939      	ldr	r1, [r7, #16]
 800302a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	4013      	ands	r3, r2
 8003044:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0203 	and.w	r2, r3, #3
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4313      	orrs	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	f000 8098 	beq.w	80031a0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003070:	4a54      	ldr	r2, [pc, #336]	; (80031c4 <HAL_GPIO_Init+0x2c8>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	3302      	adds	r3, #2
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800309a:	d019      	beq.n	80030d0 <HAL_GPIO_Init+0x1d4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a4a      	ldr	r2, [pc, #296]	; (80031c8 <HAL_GPIO_Init+0x2cc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <HAL_GPIO_Init+0x1d0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a49      	ldr	r2, [pc, #292]	; (80031cc <HAL_GPIO_Init+0x2d0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00d      	beq.n	80030c8 <HAL_GPIO_Init+0x1cc>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <HAL_GPIO_Init+0x2d4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d007      	beq.n	80030c4 <HAL_GPIO_Init+0x1c8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a47      	ldr	r2, [pc, #284]	; (80031d4 <HAL_GPIO_Init+0x2d8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_GPIO_Init+0x1c4>
 80030bc:	2304      	movs	r3, #4
 80030be:	e008      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030c0:	2307      	movs	r3, #7
 80030c2:	e006      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030c4:	2303      	movs	r3, #3
 80030c6:	e004      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e002      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <HAL_GPIO_Init+0x1d6>
 80030d0:	2300      	movs	r3, #0
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	f002 0203 	and.w	r2, r2, #3
 80030d8:	0092      	lsls	r2, r2, #2
 80030da:	4093      	lsls	r3, r2
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030e2:	4938      	ldr	r1, [pc, #224]	; (80031c4 <HAL_GPIO_Init+0x2c8>)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	3302      	adds	r3, #2
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 80030f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	43db      	mvns	r3, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003116:	4a30      	ldr	r2, [pc, #192]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800311e:	4b2e      	ldr	r3, [pc, #184]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003120:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	43db      	mvns	r3, r3
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	4013      	ands	r3, r2
 800312e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003144:	4a24      	ldr	r2, [pc, #144]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800314c:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43db      	mvns	r3, r3
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4013      	ands	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003170:	4a19      	ldr	r2, [pc, #100]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	43db      	mvns	r3, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4013      	ands	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800319a:	4a0f      	ldr	r2, [pc, #60]	; (80031d8 <HAL_GPIO_Init+0x2dc>)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	3301      	adds	r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f47f aeab 	bne.w	8002f0c <HAL_GPIO_Init+0x10>
  }
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	371c      	adds	r7, #28
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	40010000 	.word	0x40010000
 80031c8:	48000400 	.word	0x48000400
 80031cc:	48000800 	.word	0x48000800
 80031d0:	48000c00 	.word	0x48000c00
 80031d4:	48001000 	.word	0x48001000
 80031d8:	58000800 	.word	0x58000800

080031dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ec:	787b      	ldrb	r3, [r7, #1]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031f8:	e002      	b.n	8003200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4013      	ands	r3, r2
 8003224:	041a      	lsls	r2, r3, #16
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43d9      	mvns	r1, r3
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	400b      	ands	r3, r1
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	619a      	str	r2, [r3, #24]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	88fb      	ldrh	r3, [r7, #6]
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d006      	beq.n	8003264 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003258:	88fb      	ldrh	r3, [r7, #6]
 800325a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fa42 	bl	80006e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	58000800 	.word	0x58000800

08003270 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_HSEM_IRQHandler+0x30>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_HSEM_IRQHandler+0x30>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	43db      	mvns	r3, r3
 8003284:	4906      	ldr	r1, [pc, #24]	; (80032a0 <HAL_HSEM_IRQHandler+0x30>)
 8003286:	4013      	ands	r3, r2
 8003288:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800328a:	4a05      	ldr	r2, [pc, #20]	; (80032a0 <HAL_HSEM_IRQHandler+0x30>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f807 	bl	80032a4 <HAL_HSEM_FreeCallback>
}
 8003296:	bf00      	nop
 8003298:	3708      	adds	r7, #8
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	58001500 	.word	0x58001500

080032a4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d01e      	beq.n	8003308 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <HAL_IPCC_Init+0x60>)
 80032cc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe ffce 	bl	800227c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80032e0:	68b8      	ldr	r0, [r7, #8]
 80032e2:	f000 f85b 	bl	800339c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f82c 	bl	8003350 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003306:	e001      	b.n	800330c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800330c:	7bfb      	ldrb	r3, [r7, #15]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	58000c00 	.word	0x58000c00

0800331c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	4613      	mov	r3, r2
 8003342:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	e00f      	b.n	800337e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <IPCC_SetDefaultCallbacks+0x44>)
 8003368:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	3306      	adds	r3, #6
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	4a08      	ldr	r2, [pc, #32]	; (8003398 <IPCC_SetDefaultCallbacks+0x48>)
 8003376:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3301      	adds	r3, #1
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2b05      	cmp	r3, #5
 8003382:	d9ec      	bls.n	800335e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	0800331d 	.word	0x0800331d
 8003398:	08003337 	.word	0x08003337

0800339c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80033b0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	223f      	movs	r2, #63	; 0x3f
 80033b6:	609a      	str	r2, [r3, #8]
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	58000400 	.word	0x58000400

080033e4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <HAL_PWREx_GetVoltageRange+0x18>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	58000400 	.word	0x58000400

08003400 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003412:	d101      	bne.n	8003418 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <LL_RCC_HSE_Enable>:
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_RCC_HSE_Disable>:
{
 8003442:	b480      	push	{r7}
 8003444:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003446:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_RCC_HSE_IsReady>:
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003472:	d101      	bne.n	8003478 <LL_RCC_HSE_IsReady+0x18>
 8003474:	2301      	movs	r3, #1
 8003476:	e000      	b.n	800347a <LL_RCC_HSE_IsReady+0x1a>
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_RCC_HSI_Enable>:
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LL_RCC_HSI_Disable>:
{
 80034a2:	b480      	push	{r7}
 80034a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034b4:	6013      	str	r3, [r2, #0]
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <LL_RCC_HSI_IsReady>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034d2:	d101      	bne.n	80034d8 <LL_RCC_HSI_IsReady+0x18>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <LL_RCC_HSI_IsReady+0x1a>
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80034ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	061b      	lsls	r3, r3, #24
 80034fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <LL_RCC_HSI48_Enable>:
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003516:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800351a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351e:	f043 0301 	orr.w	r3, r3, #1
 8003522:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_RCC_HSI48_Disable>:
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003538:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800353c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003540:	f023 0301 	bic.w	r3, r3, #1
 8003544:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_RCC_HSI48_IsReady>:
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b02      	cmp	r3, #2
 8003564:	d101      	bne.n	800356a <LL_RCC_HSI48_IsReady+0x18>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <LL_RCC_HSI48_IsReady+0x1a>
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_RCC_LSE_Enable>:
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <LL_RCC_LSE_Disable>:
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800359c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a8:	f023 0301 	bic.w	r3, r3, #1
 80035ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_RCC_LSE_EnableBypass>:
{
 80035ba:	b480      	push	{r7}
 80035bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ca:	f043 0304 	orr.w	r3, r3, #4
 80035ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035d2:	bf00      	nop
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <LL_RCC_LSE_DisableBypass>:
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80035e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <LL_RCC_LSE_IsReady>:
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d101      	bne.n	8003616 <LL_RCC_LSE_IsReady+0x18>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <LL_RCC_LSE_IsReady+0x1a>
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_RCC_LSI1_Enable>:
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800363a:	bf00      	nop
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <LL_RCC_LSI1_Disable>:
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003650:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_RCC_LSI1_IsReady>:
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b02      	cmp	r3, #2
 8003678:	d101      	bne.n	800367e <LL_RCC_LSI1_IsReady+0x18>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <LL_RCC_LSI1_IsReady+0x1a>
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <LL_RCC_LSI2_Enable>:
{
 800368a:	b480      	push	{r7}
 800368c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800368e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369a:	f043 0304 	orr.w	r3, r3, #4
 800369e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_RCC_LSI2_Disable>:
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_RCC_LSI2_IsReady>:
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80036d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d101      	bne.n	80036e6 <LL_RCC_LSI2_IsReady+0x18>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <LL_RCC_LSI2_IsReady+0x1a>
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <LL_RCC_LSI2_SetTrimming>:
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003702:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	021b      	lsls	r3, r3, #8
 800370a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_RCC_MSI_Enable>:
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6013      	str	r3, [r2, #0]
}
 8003734:	bf00      	nop
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_RCC_MSI_Disable>:
{
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800374c:	f023 0301 	bic.w	r3, r3, #1
 8003750:	6013      	str	r3, [r2, #0]
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <LL_RCC_MSI_IsReady>:
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d101      	bne.n	8003772 <LL_RCC_MSI_IsReady+0x16>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <LL_RCC_MSI_IsReady+0x18>
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_RCC_MSI_SetRange>:
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003790:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4313      	orrs	r3, r2
 8003798:	600b      	str	r3, [r1, #0]
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <LL_RCC_MSI_GetRange>:
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80037ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037b6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2bb0      	cmp	r3, #176	; 0xb0
 80037bc:	d901      	bls.n	80037c2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80037be:	23b0      	movs	r3, #176	; 0xb0
 80037c0:	607b      	str	r3, [r7, #4]
  return msiRange;
 80037c2:	687b      	ldr	r3, [r7, #4]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80037d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ea:	4313      	orrs	r3, r2
 80037ec:	604b      	str	r3, [r1, #4]
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <LL_RCC_SetSysClkSource>:
{
 80037fa:	b480      	push	{r7}
 80037fc:	b083      	sub	sp, #12
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f023 0203 	bic.w	r2, r3, #3
 800380c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4313      	orrs	r3, r2
 8003814:	608b      	str	r3, [r1, #8]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <LL_RCC_GetSysClkSource>:
{
 8003822:	b480      	push	{r7}
 8003824:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003826:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_RCC_SetAHBPrescaler>:
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003872:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003876:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <LL_RCC_SetAHB4Prescaler>:
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800389e:	f023 020f 	bic.w	r2, r3, #15
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	091b      	lsrs	r3, r3, #4
 80038a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_RCC_SetAPB1Prescaler>:
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80038c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	608b      	str	r3, [r1, #8]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <LL_RCC_SetAPB2Prescaler>:
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80038ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <LL_RCC_GetAHBPrescaler>:
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800391a:	4618      	mov	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_RCC_GetAHB4Prescaler>:
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003936:	4618      	mov	r0, r3
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_RCC_PLL_Enable>:
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	6013      	str	r3, [r2, #0]
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <LL_RCC_PLL_Disable>:
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800396c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003970:	6013      	str	r3, [r2, #0]
}
 8003972:	bf00      	nop
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_RCC_PLL_IsReady>:
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800398e:	d101      	bne.n	8003994 <LL_RCC_PLL_IsReady+0x18>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_RCC_PLL_IsReady+0x1a>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_PLL_GetN>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80039a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	0a1b      	lsrs	r3, r3, #8
 80039ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_PLL_GetR>:
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_RCC_PLL_GetDivider>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_RCC_PLL_GetMainSource>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f003 0303 	and.w	r3, r3, #3
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a14:	d101      	bne.n	8003a1a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr

08003a26 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003a26:	b480      	push	{r7}
 8003a28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a3a:	d101      	bne.n	8003a40 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a60:	d101      	bne.n	8003a66 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e000      	b.n	8003a68 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003a72:	b480      	push	{r7}
 8003a74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a84:	d101      	bne.n	8003a8a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aa8:	d101      	bne.n	8003aae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b08d      	sub	sp, #52	; 0x34
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d101      	bne.n	8003ace <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e37e      	b.n	80041cc <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0320 	and.w	r3, r3, #32
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8092 	beq.w	8003c00 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003adc:	f7ff fea1 	bl	8003822 <LL_RCC_GetSysClkSource>
 8003ae0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae2:	f7ff ff82 	bl	80039ea <LL_RCC_PLL_GetMainSource>
 8003ae6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x3e>
 8003aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d14c      	bne.n	8003b8e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d149      	bne.n	8003b8e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003afa:	f7ff fe2f 	bl	800375c <LL_RCC_MSI_IsReady>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_OscConfig+0x54>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e35d      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003b14:	f7ff fe47 	bl	80037a6 <LL_RCC_MSI_GetRange>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	429c      	cmp	r4, r3
 8003b1c:	d914      	bls.n	8003b48 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 fd16 	bl	8004554 <RCC_SetFlashLatencyFromMSIRange>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e34c      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7ff fe21 	bl	800377e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff fe45 	bl	80037d0 <LL_RCC_MSI_SetCalibTrimming>
 8003b46:	e013      	b.n	8003b70 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff fe16 	bl	800377e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7ff fe3a 	bl	80037d0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fcf7 	bl	8004554 <RCC_SetFlashLatencyFromMSIRange>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e32d      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003b70:	f000 fcdc 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4ab3      	ldr	r2, [pc, #716]	; (8003e44 <HAL_RCC_OscConfig+0x388>)
 8003b78:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b7a:	4bb3      	ldr	r3, [pc, #716]	; (8003e48 <HAL_RCC_OscConfig+0x38c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fe18 	bl	80027b4 <HAL_InitTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d039      	beq.n	8003bfe <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e31e      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d01e      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b96:	f7ff fdc3 	bl	8003720 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe fe59 	bl	8002850 <HAL_GetTick>
 8003b9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ba2:	f7fe fe55 	bl	8002850 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e30b      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003bb4:	f7ff fdd2 	bl	800375c <LL_RCC_MSI_IsReady>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d0f1      	beq.n	8003ba2 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff fddb 	bl	800377e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7ff fdff 	bl	80037d0 <LL_RCC_MSI_SetCalibTrimming>
 8003bd2:	e015      	b.n	8003c00 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bd4:	f7ff fdb3 	bl	800373e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fe3a 	bl	8002850 <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003be0:	f7fe fe36 	bl	8002850 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e2ec      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003bf2:	f7ff fdb3 	bl	800375c <LL_RCC_MSI_IsReady>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f1      	bne.n	8003be0 <HAL_RCC_OscConfig+0x124>
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d04e      	beq.n	8003caa <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c0c:	f7ff fe09 	bl	8003822 <LL_RCC_GetSysClkSource>
 8003c10:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c12:	f7ff feea 	bl	80039ea <LL_RCC_PLL_GetMainSource>
 8003c16:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d005      	beq.n	8003c2a <HAL_RCC_OscConfig+0x16e>
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	2b0c      	cmp	r3, #12
 8003c22:	d10d      	bne.n	8003c40 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d10a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2a:	f7ff fc19 	bl	8003460 <LL_RCC_HSE_IsReady>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d039      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d135      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e2c5      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c48:	d102      	bne.n	8003c50 <HAL_RCC_OscConfig+0x194>
 8003c4a:	f7ff fbeb 	bl	8003424 <LL_RCC_HSE_Enable>
 8003c4e:	e001      	b.n	8003c54 <HAL_RCC_OscConfig+0x198>
 8003c50:	f7ff fbf7 	bl	8003442 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d012      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fdf8 	bl	8002850 <HAL_GetTick>
 8003c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c64:	f7fe fdf4 	bl	8002850 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b64      	cmp	r3, #100	; 0x64
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e2aa      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003c76:	f7ff fbf3 	bl	8003460 <LL_RCC_HSE_IsReady>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f1      	beq.n	8003c64 <HAL_RCC_OscConfig+0x1a8>
 8003c80:	e013      	b.n	8003caa <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fe fde5 	bl	8002850 <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c8a:	f7fe fde1 	bl	8002850 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b64      	cmp	r3, #100	; 0x64
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e297      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003c9c:	f7ff fbe0 	bl	8003460 <LL_RCC_HSE_IsReady>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1f1      	bne.n	8003c8a <HAL_RCC_OscConfig+0x1ce>
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d051      	beq.n	8003d5a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb6:	f7ff fdb4 	bl	8003822 <LL_RCC_GetSysClkSource>
 8003cba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cbc:	f7ff fe95 	bl	80039ea <LL_RCC_PLL_GetMainSource>
 8003cc0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	2b04      	cmp	r3, #4
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x218>
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b0c      	cmp	r3, #12
 8003ccc:	d113      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d110      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd4:	f7ff fbf4 	bl	80034c0 <LL_RCC_HSI_IsReady>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d005      	beq.n	8003cea <HAL_RCC_OscConfig+0x22e>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e270      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fbf8 	bl	80034e4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf4:	e031      	b.n	8003d5a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d019      	beq.n	8003d32 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfe:	f7ff fbc1 	bl	8003484 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fe fda5 	bl	8002850 <HAL_GetTick>
 8003d06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fe fda1 	bl	8002850 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e257      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003d1c:	f7ff fbd0 	bl	80034c0 <LL_RCC_HSI_IsReady>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0f1      	beq.n	8003d0a <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7ff fbda 	bl	80034e4 <LL_RCC_HSI_SetCalibTrimming>
 8003d30:	e013      	b.n	8003d5a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d32:	f7ff fbb6 	bl	80034a2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d36:	f7fe fd8b 	bl	8002850 <HAL_GetTick>
 8003d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3e:	f7fe fd87 	bl	8002850 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e23d      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003d50:	f7ff fbb6 	bl	80034c0 <LL_RCC_HSI_IsReady>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1f1      	bne.n	8003d3e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80a3 	beq.w	8003eba <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d076      	beq.n	8003e6a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0310 	and.w	r3, r3, #16
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d046      	beq.n	8003e16 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003d88:	f7ff fc6d 	bl	8003666 <LL_RCC_LSI1_IsReady>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d113      	bne.n	8003dba <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003d92:	f7ff fc46 	bl	8003622 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d96:	f7fe fd5b 	bl	8002850 <HAL_GetTick>
 8003d9a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d9e:	f7fe fd57 	bl	8002850 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e20d      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003db0:	f7ff fc59 	bl	8003666 <LL_RCC_LSI1_IsReady>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f1      	beq.n	8003d9e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003dba:	f7ff fc66 	bl	800368a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fe fd47 	bl	8002850 <HAL_GetTick>
 8003dc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003dc6:	f7fe fd43 	bl	8002850 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1f9      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003dd8:	f7ff fc79 	bl	80036ce <LL_RCC_LSI2_IsReady>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f1      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fc83 	bl	80036f2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003dec:	f7ff fc2a 	bl	8003644 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe fd2e 	bl	8002850 <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003df8:	f7fe fd2a 	bl	8002850 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e1e0      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003e0a:	f7ff fc2c 	bl	8003666 <LL_RCC_LSI1_IsReady>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f1      	bne.n	8003df8 <HAL_RCC_OscConfig+0x33c>
 8003e14:	e051      	b.n	8003eba <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003e16:	f7ff fc04 	bl	8003622 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fd19 	bl	8002850 <HAL_GetTick>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003e22:	f7fe fd15 	bl	8002850 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1cb      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003e34:	f7ff fc17 	bl	8003666 <LL_RCC_LSI1_IsReady>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d0f1      	beq.n	8003e22 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003e3e:	f7ff fc35 	bl	80036ac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003e42:	e00c      	b.n	8003e5e <HAL_RCC_OscConfig+0x3a2>
 8003e44:	20000008 	.word	0x20000008
 8003e48:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003e4c:	f7fe fd00 	bl	8002850 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e1b6      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003e5e:	f7ff fc36 	bl	80036ce <LL_RCC_LSI2_IsReady>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f1      	bne.n	8003e4c <HAL_RCC_OscConfig+0x390>
 8003e68:	e027      	b.n	8003eba <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003e6a:	f7ff fc1f 	bl	80036ac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7fe fcef 	bl	8002850 <HAL_GetTick>
 8003e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003e76:	f7fe fceb 	bl	8002850 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e1a1      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003e88:	f7ff fc21 	bl	80036ce <LL_RCC_LSI2_IsReady>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f1      	bne.n	8003e76 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003e92:	f7ff fbd7 	bl	8003644 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e96:	f7fe fcdb 	bl	8002850 <HAL_GetTick>
 8003e9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003e9e:	f7fe fcd7 	bl	8002850 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e18d      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003eb0:	f7ff fbd9 	bl	8003666 <LL_RCC_LSI1_IsReady>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f1      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d05b      	beq.n	8003f7e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ec6:	4bb5      	ldr	r3, [pc, #724]	; (800419c <HAL_RCC_OscConfig+0x6e0>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d114      	bne.n	8003efc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003ed2:	f7ff fa77 	bl	80033c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fcbb 	bl	8002850 <HAL_GetTick>
 8003eda:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ede:	f7fe fcb7 	bl	8002850 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e16d      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef0:	4baa      	ldr	r3, [pc, #680]	; (800419c <HAL_RCC_OscConfig+0x6e0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d102      	bne.n	8003f0a <HAL_RCC_OscConfig+0x44e>
 8003f04:	f7ff fb37 	bl	8003576 <LL_RCC_LSE_Enable>
 8003f08:	e00c      	b.n	8003f24 <HAL_RCC_OscConfig+0x468>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b05      	cmp	r3, #5
 8003f10:	d104      	bne.n	8003f1c <HAL_RCC_OscConfig+0x460>
 8003f12:	f7ff fb52 	bl	80035ba <LL_RCC_LSE_EnableBypass>
 8003f16:	f7ff fb2e 	bl	8003576 <LL_RCC_LSE_Enable>
 8003f1a:	e003      	b.n	8003f24 <HAL_RCC_OscConfig+0x468>
 8003f1c:	f7ff fb3c 	bl	8003598 <LL_RCC_LSE_Disable>
 8003f20:	f7ff fb5c 	bl	80035dc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d014      	beq.n	8003f56 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fe fc90 	bl	8002850 <HAL_GetTick>
 8003f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fe fc8c 	bl	8002850 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e140      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003f4a:	f7ff fb58 	bl	80035fe <LL_RCC_LSE_IsReady>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ef      	beq.n	8003f34 <HAL_RCC_OscConfig+0x478>
 8003f54:	e013      	b.n	8003f7e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f56:	f7fe fc7b 	bl	8002850 <HAL_GetTick>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003f5c:	e00a      	b.n	8003f74 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5e:	f7fe fc77 	bl	8002850 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e12b      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003f74:	f7ff fb43 	bl	80035fe <LL_RCC_LSE_IsReady>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1ef      	bne.n	8003f5e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d02c      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d014      	beq.n	8003fbc <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f92:	f7ff fabc 	bl	800350e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f96:	f7fe fc5b 	bl	8002850 <HAL_GetTick>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f9e:	f7fe fc57 	bl	8002850 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e10d      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003fb0:	f7ff facf 	bl	8003552 <LL_RCC_HSI48_IsReady>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f1      	beq.n	8003f9e <HAL_RCC_OscConfig+0x4e2>
 8003fba:	e013      	b.n	8003fe4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fbc:	f7ff fab8 	bl	8003530 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc0:	f7fe fc46 	bl	8002850 <HAL_GetTick>
 8003fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc8:	f7fe fc42 	bl	8002850 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e0f8      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003fda:	f7ff faba 	bl	8003552 <LL_RCC_HSI48_IsReady>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d1f1      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80ee 	beq.w	80041ca <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fee:	f7ff fc18 	bl	8003822 <LL_RCC_GetSysClkSource>
 8003ff2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	2b02      	cmp	r3, #2
 8004002:	f040 80af 	bne.w	8004164 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0203 	and.w	r2, r3, #3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004010:	429a      	cmp	r2, r3
 8004012:	d123      	bne.n	800405c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401e:	429a      	cmp	r2, r3
 8004020:	d11c      	bne.n	800405c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d114      	bne.n	800405c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d10d      	bne.n	800405c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d106      	bne.n	800405c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d05d      	beq.n	8004118 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d058      	beq.n	8004114 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0ab      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004074:	f7ff fc73 	bl	800395e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004078:	f7fe fbea 	bl	8002850 <HAL_GetTick>
 800407c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004080:	f7fe fbe6 	bl	8002850 <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e09c      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ef      	bne.n	8004080 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	4b3e      	ldr	r3, [pc, #248]	; (80041a0 <HAL_RCC_OscConfig+0x6e4>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b8:	0212      	lsls	r2, r2, #8
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040c0:	4311      	orrs	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040c6:	4311      	orrs	r1, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80040cc:	430a      	orrs	r2, r1
 80040ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040d6:	f7ff fc33 	bl	8003940 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040ea:	f7fe fbb1 	bl	8002850 <HAL_GetTick>
 80040ee:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe fbad 	bl	8002850 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e063      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ef      	beq.n	80040f2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004112:	e05a      	b.n	80041ca <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e059      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d151      	bne.n	80041ca <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004126:	f7ff fc0b 	bl	8003940 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800412a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004138:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800413a:	f7fe fb89 	bl	8002850 <HAL_GetTick>
 800413e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004142:	f7fe fb85 	bl	8002850 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e03b      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ef      	beq.n	8004142 <HAL_RCC_OscConfig+0x686>
 8004162:	e032      	b.n	80041ca <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b0c      	cmp	r3, #12
 8004168:	d02d      	beq.n	80041c6 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416a:	f7ff fbf8 	bl	800395e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800416e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004178:	f023 0303 	bic.w	r3, r3, #3
 800417c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800417e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004188:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800418c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004190:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fe fb5d 	bl	8002850 <HAL_GetTick>
 8004196:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004198:	e00d      	b.n	80041b6 <HAL_RCC_OscConfig+0x6fa>
 800419a:	bf00      	nop
 800419c:	58000400 	.word	0x58000400
 80041a0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a4:	f7fe fb54 	bl	8002850 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e00a      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ef      	bne.n	80041a4 <HAL_RCC_OscConfig+0x6e8>
 80041c4:	e001      	b.n	80041ca <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3734      	adds	r7, #52	; 0x34
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}

080041d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e12d      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e8:	4b98      	ldr	r3, [pc, #608]	; (800444c <HAL_RCC_ClockConfig+0x278>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d91b      	bls.n	800422e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b95      	ldr	r3, [pc, #596]	; (800444c <HAL_RCC_ClockConfig+0x278>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 0207 	bic.w	r2, r3, #7
 80041fe:	4993      	ldr	r1, [pc, #588]	; (800444c <HAL_RCC_ClockConfig+0x278>)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	4313      	orrs	r3, r2
 8004204:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004206:	f7fe fb23 	bl	8002850 <HAL_GetTick>
 800420a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420c:	e008      	b.n	8004220 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800420e:	f7fe fb1f 	bl	8002850 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d901      	bls.n	8004220 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e111      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004220:	4b8a      	ldr	r3, [pc, #552]	; (800444c <HAL_RCC_ClockConfig+0x278>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d1ef      	bne.n	800420e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fafb 	bl	800383a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004244:	f7fe fb04 	bl	8002850 <HAL_GetTick>
 8004248:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800424c:	f7fe fb00 	bl	8002850 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e0f2      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800425e:	f7ff fbd0 	bl	8003a02 <LL_RCC_IsActiveFlag_HPRE>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f1      	beq.n	800424c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0320 	and.w	r3, r3, #32
 8004270:	2b00      	cmp	r3, #0
 8004272:	d016      	beq.n	80042a2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff faf2 	bl	8003862 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800427e:	f7fe fae7 	bl	8002850 <HAL_GetTick>
 8004282:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004286:	f7fe fae3 	bl	8002850 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e0d5      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004298:	f7ff fbc5 	bl	8003a26 <LL_RCC_IsActiveFlag_C2HPRE>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f1      	beq.n	8004286 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d016      	beq.n	80042dc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7ff faeb 	bl	800388e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80042b8:	f7fe faca 	bl	8002850 <HAL_GetTick>
 80042bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80042c0:	f7fe fac6 	bl	8002850 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e0b8      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80042d2:	f7ff fbbb 	bl	8003a4c <LL_RCC_IsActiveFlag_SHDHPRE>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d0f1      	beq.n	80042c0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0304 	and.w	r3, r3, #4
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d016      	beq.n	8004316 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fae5 	bl	80038bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80042f2:	f7fe faad 	bl	8002850 <HAL_GetTick>
 80042f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80042fa:	f7fe faa9 	bl	8002850 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e09b      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800430c:	f7ff fbb1 	bl	8003a72 <LL_RCC_IsActiveFlag_PPRE1>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f1      	beq.n	80042fa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d017      	beq.n	8004352 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fadb 	bl	80038e4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800432e:	f7fe fa8f 	bl	8002850 <HAL_GetTick>
 8004332:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004336:	f7fe fa8b 	bl	8002850 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e07d      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004348:	f7ff fba5 	bl	8003a96 <LL_RCC_IsActiveFlag_PPRE2>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f1      	beq.n	8004336 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d043      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d106      	bne.n	8004374 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004366:	f7ff f87b 	bl	8003460 <LL_RCC_HSE_IsReady>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d11e      	bne.n	80043ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e067      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b03      	cmp	r3, #3
 800437a:	d106      	bne.n	800438a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800437c:	f7ff fafe 	bl	800397c <LL_RCC_PLL_IsReady>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d113      	bne.n	80043ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e05c      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d106      	bne.n	80043a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004392:	f7ff f9e3 	bl	800375c <LL_RCC_MSI_IsReady>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e051      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80043a0:	f7ff f88e 	bl	80034c0 <LL_RCC_HSI_IsReady>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e04a      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff fa21 	bl	80037fa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b8:	f7fe fa4a 	bl	8002850 <HAL_GetTick>
 80043bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f7fe fa46 	bl	8002850 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e036      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	f7ff fa24 	bl	8003822 <LL_RCC_GetSysClkSource>
 80043da:	4602      	mov	r2, r0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d1ec      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e6:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x278>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d21b      	bcs.n	800442c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f4:	4b15      	ldr	r3, [pc, #84]	; (800444c <HAL_RCC_ClockConfig+0x278>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f023 0207 	bic.w	r2, r3, #7
 80043fc:	4913      	ldr	r1, [pc, #76]	; (800444c <HAL_RCC_ClockConfig+0x278>)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004404:	f7fe fa24 	bl	8002850 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	e008      	b.n	800441e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800440c:	f7fe fa20 	bl	8002850 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e012      	b.n	8004444 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441e:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_ClockConfig+0x278>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0307 	and.w	r3, r3, #7
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d1ef      	bne.n	800440c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800442c:	f000 f87e 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004430:	4603      	mov	r3, r0
 8004432:	4a07      	ldr	r2, [pc, #28]	; (8004450 <HAL_RCC_ClockConfig+0x27c>)
 8004434:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004436:	f7fe fa17 	bl	8002868 <HAL_GetTickPrio>
 800443a:	4603      	mov	r3, r0
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe f9b9 	bl	80027b4 <HAL_InitTick>
 8004442:	4603      	mov	r3, r0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	58004000 	.word	0x58004000
 8004450:	20000008 	.word	0x20000008

08004454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445a:	f7ff f9e2 	bl	8003822 <LL_RCC_GetSysClkSource>
 800445e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004466:	f7ff f99e 	bl	80037a6 <LL_RCC_MSI_GetRange>
 800446a:	4603      	mov	r3, r0
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	4a2b      	ldr	r2, [pc, #172]	; (8004520 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	e04b      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b04      	cmp	r3, #4
 8004480:	d102      	bne.n	8004488 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004482:	4b28      	ldr	r3, [pc, #160]	; (8004524 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e045      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b08      	cmp	r3, #8
 800448c:	d10a      	bne.n	80044a4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800448e:	f7fe ffb7 	bl	8003400 <LL_RCC_HSE_IsEnabledDiv2>
 8004492:	4603      	mov	r3, r0
 8004494:	2b01      	cmp	r3, #1
 8004496:	d102      	bne.n	800449e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004498:	4b22      	ldr	r3, [pc, #136]	; (8004524 <HAL_RCC_GetSysClockFreq+0xd0>)
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	e03a      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800449e:	4b22      	ldr	r3, [pc, #136]	; (8004528 <HAL_RCC_GetSysClockFreq+0xd4>)
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	e037      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80044a4:	f7ff faa1 	bl	80039ea <LL_RCC_PLL_GetMainSource>
 80044a8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d003      	beq.n	80044b8 <HAL_RCC_GetSysClockFreq+0x64>
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	2b03      	cmp	r3, #3
 80044b4:	d003      	beq.n	80044be <HAL_RCC_GetSysClockFreq+0x6a>
 80044b6:	e00d      	b.n	80044d4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80044b8:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044ba:	60bb      	str	r3, [r7, #8]
        break;
 80044bc:	e015      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80044be:	f7fe ff9f 	bl	8003400 <LL_RCC_HSE_IsEnabledDiv2>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80044c8:	4b16      	ldr	r3, [pc, #88]	; (8004524 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044ca:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80044cc:	e00d      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80044ce:	4b16      	ldr	r3, [pc, #88]	; (8004528 <HAL_RCC_GetSysClockFreq+0xd4>)
 80044d0:	60bb      	str	r3, [r7, #8]
        break;
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80044d4:	f7ff f967 	bl	80037a6 <LL_RCC_MSI_GetRange>
 80044d8:	4603      	mov	r3, r0
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	4a0f      	ldr	r2, [pc, #60]	; (8004520 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e6:	60bb      	str	r3, [r7, #8]
        break;
 80044e8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80044ea:	f7ff fa59 	bl	80039a0 <LL_RCC_PLL_GetN>
 80044ee:	4602      	mov	r2, r0
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	fb03 f402 	mul.w	r4, r3, r2
 80044f6:	f7ff fa6c 	bl	80039d2 <LL_RCC_PLL_GetDivider>
 80044fa:	4603      	mov	r3, r0
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	3301      	adds	r3, #1
 8004500:	fbb4 f4f3 	udiv	r4, r4, r3
 8004504:	f7ff fa59 	bl	80039ba <LL_RCC_PLL_GetR>
 8004508:	4603      	mov	r3, r0
 800450a:	0f5b      	lsrs	r3, r3, #29
 800450c:	3301      	adds	r3, #1
 800450e:	fbb4 f3f3 	udiv	r3, r4, r3
 8004512:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004514:	68fb      	ldr	r3, [r7, #12]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bd90      	pop	{r4, r7, pc}
 800451e:	bf00      	nop
 8004520:	0800aab4 	.word	0x0800aab4
 8004524:	00f42400 	.word	0x00f42400
 8004528:	01e84800 	.word	0x01e84800

0800452c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b598      	push	{r3, r4, r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004530:	f7ff ff90 	bl	8004454 <HAL_RCC_GetSysClockFreq>
 8004534:	4604      	mov	r4, r0
 8004536:	f7ff f9e9 	bl	800390c <LL_RCC_GetAHBPrescaler>
 800453a:	4603      	mov	r3, r0
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	4a03      	ldr	r2, [pc, #12]	; (8004550 <HAL_RCC_GetHCLKFreq+0x24>)
 8004544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004548:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800454c:	4618      	mov	r0, r3
 800454e:	bd98      	pop	{r3, r4, r7, pc}
 8004550:	0800aa74 	.word	0x0800aa74

08004554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004554:	b590      	push	{r4, r7, lr}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2bb0      	cmp	r3, #176	; 0xb0
 8004560:	d903      	bls.n	800456a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e007      	b.n	800457a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a11      	ldr	r2, [pc, #68]	; (80045b8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004578:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800457a:	f7ff f9d3 	bl	8003924 <LL_RCC_GetAHB4Prescaler>
 800457e:	4603      	mov	r3, r0
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	4a0d      	ldr	r2, [pc, #52]	; (80045bc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a0a      	ldr	r2, [pc, #40]	; (80045c0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	0c9c      	lsrs	r4, r3, #18
 800459e:	f7fe ff21 	bl	80033e4 <HAL_PWREx_GetVoltageRange>
 80045a2:	4603      	mov	r3, r0
 80045a4:	4619      	mov	r1, r3
 80045a6:	4620      	mov	r0, r4
 80045a8:	f000 f80c 	bl	80045c4 <RCC_SetFlashLatency>
 80045ac:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd90      	pop	{r4, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	0800aab4 	.word	0x0800aab4
 80045bc:	0800aa74 	.word	0x0800aa74
 80045c0:	431bde83 	.word	0x431bde83

080045c4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80045c4:	b590      	push	{r4, r7, lr}
 80045c6:	b093      	sub	sp, #76	; 0x4c
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80045ce:	4b39      	ldr	r3, [pc, #228]	; (80046b4 <RCC_SetFlashLatency+0xf0>)
 80045d0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80045d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80045da:	4a37      	ldr	r2, [pc, #220]	; (80046b8 <RCC_SetFlashLatency+0xf4>)
 80045dc:	f107 031c 	add.w	r3, r7, #28
 80045e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80045e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80045e6:	4b35      	ldr	r3, [pc, #212]	; (80046bc <RCC_SetFlashLatency+0xf8>)
 80045e8:	f107 040c 	add.w	r4, r7, #12
 80045ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80045f2:	2300      	movs	r3, #0
 80045f4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045fc:	d11c      	bne.n	8004638 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80045fe:	2300      	movs	r3, #0
 8004600:	643b      	str	r3, [r7, #64]	; 0x40
 8004602:	e015      	b.n	8004630 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800460c:	4413      	add	r3, r2
 800460e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d808      	bhi.n	800462a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004620:	4413      	add	r3, r2
 8004622:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004626:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004628:	e022      	b.n	8004670 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800462a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800462c:	3301      	adds	r3, #1
 800462e:	643b      	str	r3, [r7, #64]	; 0x40
 8004630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004632:	2b03      	cmp	r3, #3
 8004634:	d9e6      	bls.n	8004604 <RCC_SetFlashLatency+0x40>
 8004636:	e01b      	b.n	8004670 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004638:	2300      	movs	r3, #0
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800463c:	e015      	b.n	800466a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800463e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004646:	4413      	add	r3, r2
 8004648:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	d808      	bhi.n	8004664 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800465a:	4413      	add	r3, r2
 800465c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004660:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004662:	e005      	b.n	8004670 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004666:	3301      	adds	r3, #1
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	2b02      	cmp	r3, #2
 800466e:	d9e6      	bls.n	800463e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004670:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <RCC_SetFlashLatency+0xfc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 0207 	bic.w	r2, r3, #7
 8004678:	4911      	ldr	r1, [pc, #68]	; (80046c0 <RCC_SetFlashLatency+0xfc>)
 800467a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004680:	f7fe f8e6 	bl	8002850 <HAL_GetTick>
 8004684:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004686:	e008      	b.n	800469a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004688:	f7fe f8e2 	bl	8002850 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e007      	b.n	80046aa <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800469a:	4b09      	ldr	r3, [pc, #36]	; (80046c0 <RCC_SetFlashLatency+0xfc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d1ef      	bne.n	8004688 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	374c      	adds	r7, #76	; 0x4c
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd90      	pop	{r4, r7, pc}
 80046b2:	bf00      	nop
 80046b4:	0800a8dc 	.word	0x0800a8dc
 80046b8:	0800a8ec 	.word	0x0800a8ec
 80046bc:	0800a8f8 	.word	0x0800a8f8
 80046c0:	58004000 	.word	0x58004000

080046c4 <LL_RCC_LSE_IsEnabled>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d101      	bne.n	80046dc <LL_RCC_LSE_IsEnabled+0x18>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <LL_RCC_LSE_IsEnabled+0x1a>
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <LL_RCC_LSE_IsReady>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d101      	bne.n	8004700 <LL_RCC_LSE_IsReady+0x18>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <LL_RCC_LSE_IsReady+0x1a>
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <LL_RCC_SetRFWKPClockSource>:
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004718:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800471c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <LL_RCC_SetSMPSClockSource>:
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004746:	f023 0203 	bic.w	r2, r3, #3
 800474a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4313      	orrs	r3, r2
 8004752:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_RCC_SetSMPSPrescaler>:
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4313      	orrs	r3, r2
 800477a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_RCC_SetUSARTClockSource>:
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f023 0203 	bic.w	r2, r3, #3
 800479c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_RCC_SetLPUARTClockSource>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80047bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_RCC_SetI2CClockSource>:
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80047e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	091b      	lsrs	r3, r3, #4
 80047f4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80047f8:	43db      	mvns	r3, r3
 80047fa:	401a      	ands	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <LL_RCC_SetLPTIMClockSource>:
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004826:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	041b      	lsls	r3, r3, #16
 8004830:	43db      	mvns	r3, r3
 8004832:	401a      	ands	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <LL_RCC_SetSAIClockSource>:
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <LL_RCC_SetRNGClockSource>:
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800488e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <LL_RCC_SetCLK48ClockSource>:
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80048ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <LL_RCC_SetUSBClockSource>:
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7ff ffe3 	bl	80048a6 <LL_RCC_SetCLK48ClockSource>
}
 80048e0:	bf00      	nop
 80048e2:	3708      	adds	r7, #8
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <LL_RCC_SetADCClockSource>:
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80048f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_RCC_SetRTCClockSource>:
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4313      	orrs	r3, r2
 8004930:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <LL_RCC_GetRTCClockSource>:
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_RCC_ForceBackupDomainReset>:
{
 800495a:	b480      	push	{r7}
 800495c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800495e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800496a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004972:	bf00      	nop
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <LL_RCC_ReleaseBackupDomainReset>:
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800498c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004990:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <LL_RCC_PLLSAI1_Enable>:
{
 800499e:	b480      	push	{r7}
 80049a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80049a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_RCC_PLLSAI1_Disable>:
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80049c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049ce:	6013      	str	r3, [r2, #0]
}
 80049d0:	bf00      	nop
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <LL_RCC_PLLSAI1_IsReady>:
{
 80049da:	b480      	push	{r7}
 80049dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80049de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ec:	d101      	bne.n	80049f2 <LL_RCC_PLLSAI1_IsReady+0x18>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b088      	sub	sp, #32
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004a06:	2300      	movs	r3, #0
 8004a08:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d034      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a22:	d021      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004a24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a28:	d81b      	bhi.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a2e:	d01d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004a30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a34:	d815      	bhi.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00b      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a3e:	d110      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a50:	e00d      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f947 	bl	8004cea <RCCEx_PLLSAI1_ConfigNP>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004a60:	e005      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	77fb      	strb	r3, [r7, #31]
        break;
 8004a66:	e002      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004a68:	bf00      	nop
 8004a6a:	e000      	b.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004a6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d105      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fee8 	bl	800484e <LL_RCC_SetSAIClockSource>
 8004a7e:	e001      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7ffb      	ldrb	r3, [r7, #31]
 8004a82:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d046      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004a90:	f7ff ff56 	bl	8004940 <LL_RCC_GetRTCClockSource>
 8004a94:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d03c      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004aa0:	f7fe fc90 	bl	80033c4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ff30 	bl	8004914 <LL_RCC_SetRTCClockSource>
 8004ab4:	e02e      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004ac0:	f7ff ff4b 	bl	800495a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004ac4:	f7ff ff5a 	bl	800497c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004ad6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004ae0:	f7ff fdf0 	bl	80046c4 <LL_RCC_LSE_IsEnabled>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d114      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004aea:	f7fd feb1 	bl	8002850 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004af0:	e00b      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004af2:	f7fd fead 	bl	8002850 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d902      	bls.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	77fb      	strb	r3, [r7, #31]
              break;
 8004b08:	e004      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004b0a:	f7ff fded 	bl	80046e8 <LL_RCC_LSE_IsReady>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d1ee      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004b14:	7ffb      	ldrb	r3, [r7, #31]
 8004b16:	77bb      	strb	r3, [r7, #30]
 8004b18:	e001      	b.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b1a:	7ffb      	ldrb	r3, [r7, #31]
 8004b1c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d004      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fe2a 	bl	8004788 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d004      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff fe35 	bl	80047b4 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fe5d 	bl	800481a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fe52 	bl	800481a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0304 	and.w	r3, r3, #4
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff fe2a 	bl	80047e0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7ff fe1f 	bl	80047e0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d022      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fe8d 	bl	80048d2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bcc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004bd0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bd6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bda:	d10b      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 f8dd 	bl	8004da0 <RCCEx_PLLSAI1_ConfigNQ>
 8004be6:	4603      	mov	r3, r0
 8004be8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004bea:	7ffb      	ldrb	r3, [r7, #31]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 8004bf0:	7ffb      	ldrb	r3, [r7, #31]
 8004bf2:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d02b      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d008      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c12:	d003      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fe2a 	bl	800487a <LL_RCC_SetRNGClockSource>
 8004c26:	e00a      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	2000      	movs	r0, #0
 8004c34:	f7ff fe21 	bl	800487a <LL_RCC_SetRNGClockSource>
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7ff fe34 	bl	80048a6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004c46:	d107      	bne.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d022      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fe3d 	bl	80048e8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c76:	d107      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c86:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c90:	d10b      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3304      	adds	r3, #4
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f8dd 	bl	8004e56 <RCCEx_PLLSAI1_ConfigNR>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 8004ca6:	7ffb      	ldrb	r3, [r7, #31]
 8004ca8:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fd26 	bl	800470c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff fd45 	bl	8004760 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff fd2c 	bl	8004738 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004ce0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004cf6:	f7ff fe61 	bl	80049bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cfa:	f7fd fda9 	bl	8002850 <HAL_GetTick>
 8004cfe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d00:	e009      	b.n	8004d16 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d02:	f7fd fda5 	bl	8002850 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d902      	bls.n	8004d16 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	e004      	b.n	8004d20 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d16:	f7ff fe60 	bl	80049da <LL_RCC_PLLSAI1_IsReady>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d137      	bne.n	8004d96 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d50:	4313      	orrs	r3, r2
 8004d52:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004d54:	f7ff fe23 	bl	800499e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d58:	f7fd fd7a 	bl	8002850 <HAL_GetTick>
 8004d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d5e:	e009      	b.n	8004d74 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d60:	f7fd fd76 	bl	8002850 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d902      	bls.n	8004d74 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	73fb      	strb	r3, [r7, #15]
        break;
 8004d72:	e004      	b.n	8004d7e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d74:	f7ff fe31 	bl	80049da <LL_RCC_PLLSAI1_IsReady>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d1f0      	bne.n	8004d60 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d108      	bne.n	8004d96 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d92:	4313      	orrs	r3, r2
 8004d94:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004dac:	f7ff fe06 	bl	80049bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004db0:	f7fd fd4e 	bl	8002850 <HAL_GetTick>
 8004db4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004db6:	e009      	b.n	8004dcc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004db8:	f7fd fd4a 	bl	8002850 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d902      	bls.n	8004dcc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dca:	e004      	b.n	8004dd6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004dcc:	f7ff fe05 	bl	80049da <LL_RCC_PLLSAI1_IsReady>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d137      	bne.n	8004e4c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	021b      	lsls	r3, r3, #8
 8004dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004df0:	4313      	orrs	r3, r2
 8004df2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e06:	4313      	orrs	r3, r2
 8004e08:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004e0a:	f7ff fdc8 	bl	800499e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0e:	f7fd fd1f 	bl	8002850 <HAL_GetTick>
 8004e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e14:	e009      	b.n	8004e2a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e16:	f7fd fd1b 	bl	8002850 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d902      	bls.n	8004e2a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	73fb      	strb	r3, [r7, #15]
        break;
 8004e28:	e004      	b.n	8004e34 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004e2a:	f7ff fdd6 	bl	80049da <LL_RCC_PLLSAI1_IsReady>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d1f0      	bne.n	8004e16 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d108      	bne.n	8004e4c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004e62:	f7ff fdab 	bl	80049bc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e66:	f7fd fcf3 	bl	8002850 <HAL_GetTick>
 8004e6a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e6c:	e009      	b.n	8004e82 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e6e:	f7fd fcef 	bl	8002850 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d902      	bls.n	8004e82 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e80:	e004      	b.n	8004e8c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e82:	f7ff fdaa 	bl	80049da <LL_RCC_PLLSAI1_IsReady>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d137      	bne.n	8004f02 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004ec0:	f7ff fd6d 	bl	800499e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd fcc4 	bl	8002850 <HAL_GetTick>
 8004ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004eca:	e009      	b.n	8004ee0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ecc:	f7fd fcc0 	bl	8002850 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d902      	bls.n	8004ee0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ede:	e004      	b.n	8004eea <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ee0:	f7ff fd7b 	bl	80049da <LL_RCC_PLLSAI1_IsReady>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d1f0      	bne.n	8004ecc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d108      	bne.n	8004f02 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004efe:	4313      	orrs	r3, r2
 8004f00:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e090      	b.n	8005040 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fd f9c6 	bl	80022c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	22ca      	movs	r2, #202	; 0xca
 8004f46:	625a      	str	r2, [r3, #36]	; 0x24
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2253      	movs	r2, #83	; 0x53
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 faba 	bl	80054ca <RTC_EnterInitMode>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	22ff      	movs	r2, #255	; 0xff
 8004f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2204      	movs	r2, #4
 8004f68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e067      	b.n	8005040 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f82:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6899      	ldr	r1, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68d2      	ldr	r2, [r2, #12]
 8004faa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6919      	ldr	r1, [r3, #16]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	041a      	lsls	r2, r3, #16
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fce:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0203 	bic.w	r2, r2, #3
 8004fde:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69da      	ldr	r2, [r3, #28]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	431a      	orrs	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d113      	bne.n	800502e <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa39 	bl	800547e <HAL_RTC_WaitForSynchro>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00d      	beq.n	800502e <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	22ff      	movs	r2, #255	; 0xff
 8005018:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2204      	movs	r2, #4
 800501e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e008      	b.n	8005040 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	22ff      	movs	r2, #255	; 0xff
 8005034:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800503e:	2300      	movs	r3, #0
  }
}
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f893 3020 	ldrb.w	r3, [r3, #32]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d101      	bne.n	8005062 <HAL_RTC_SetTime+0x1a>
 800505e:	2302      	movs	r3, #2
 8005060:	e0b2      	b.n	80051c8 <HAL_RTC_SetTime+0x180>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d126      	bne.n	80050c6 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2200      	movs	r2, #0
 800508a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fa44 	bl	800551e <RTC_ByteToBcd2>
 8005096:	4603      	mov	r3, r0
 8005098:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	785b      	ldrb	r3, [r3, #1]
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fa3d 	bl	800551e <RTC_ByteToBcd2>
 80050a4:	4603      	mov	r3, r0
 80050a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050a8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	789b      	ldrb	r3, [r3, #2]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fa35 	bl	800551e <RTC_ByteToBcd2>
 80050b4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80050b6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	78db      	ldrb	r3, [r3, #3]
 80050be:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	e018      	b.n	80050f8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d102      	bne.n	80050da <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2200      	movs	r2, #0
 80050d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80050e6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80050ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	78db      	ldrb	r3, [r3, #3]
 80050f2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	22ca      	movs	r2, #202	; 0xca
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2253      	movs	r2, #83	; 0x53
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f9de 	bl	80054ca <RTC_EnterInitMode>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	22ff      	movs	r2, #255	; 0xff
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2204      	movs	r2, #4
 8005120:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e04b      	b.n	80051c8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800513a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800513e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800514e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6899      	ldr	r1, [r3, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	431a      	orrs	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005176:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d113      	bne.n	80051ae <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 f979 	bl	800547e <HAL_RTC_WaitForSynchro>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00d      	beq.n	80051ae <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	22ff      	movs	r2, #255	; 0xff
 8005198:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2204      	movs	r2, #4
 800519e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e00c      	b.n	80051c8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	22ff      	movs	r2, #255	; 0xff
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 80051c6:	2300      	movs	r3, #0
  }
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd90      	pop	{r4, r7, pc}

080051d0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80051fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005202:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	0a1b      	lsrs	r3, r3, #8
 8005218:	b2db      	uxtb	r3, r3
 800521a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800521e:	b2da      	uxtb	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522c:	b2da      	uxtb	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	0c1b      	lsrs	r3, r3, #16
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800523c:	b2da      	uxtb	r2, r3
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11a      	bne.n	800527e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f986 	bl	800555e <RTC_Bcd2ToByte>
 8005252:	4603      	mov	r3, r0
 8005254:	461a      	mov	r2, r3
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	785b      	ldrb	r3, [r3, #1]
 800525e:	4618      	mov	r0, r3
 8005260:	f000 f97d 	bl	800555e <RTC_Bcd2ToByte>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	789b      	ldrb	r3, [r3, #2]
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f974 	bl	800555e <RTC_Bcd2ToByte>
 8005276:	4603      	mov	r3, r0
 8005278:	461a      	mov	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005288:	b590      	push	{r4, r7, lr}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3020 	ldrb.w	r3, [r3, #32]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_RTC_SetDate+0x1a>
 800529e:	2302      	movs	r3, #2
 80052a0:	e09c      	b.n	80053dc <HAL_RTC_SetDate+0x154>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10e      	bne.n	80052d6 <HAL_RTC_SetDate+0x4e>
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d008      	beq.n	80052d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	f023 0310 	bic.w	r3, r3, #16
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	330a      	adds	r3, #10
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d11c      	bne.n	8005316 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	78db      	ldrb	r3, [r3, #3]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f91c 	bl	800551e <RTC_ByteToBcd2>
 80052e6:	4603      	mov	r3, r0
 80052e8:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	785b      	ldrb	r3, [r3, #1]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 f915 	bl	800551e <RTC_ByteToBcd2>
 80052f4:	4603      	mov	r3, r0
 80052f6:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80052f8:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	789b      	ldrb	r3, [r3, #2]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f90d 	bl	800551e <RTC_ByteToBcd2>
 8005304:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005306:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e00e      	b.n	8005334 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	78db      	ldrb	r3, [r3, #3]
 800531a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	785b      	ldrb	r3, [r3, #1]
 8005320:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005322:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8005328:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	22ca      	movs	r2, #202	; 0xca
 800533a:	625a      	str	r2, [r3, #36]	; 0x24
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2253      	movs	r2, #83	; 0x53
 8005342:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 f8c0 	bl	80054ca <RTC_EnterInitMode>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00d      	beq.n	800536c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	22ff      	movs	r2, #255	; 0xff
 8005356:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2204      	movs	r2, #4
 800535c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e037      	b.n	80053dc <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005376:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800537a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800538a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d113      	bne.n	80053c2 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f000 f86f 	bl	800547e <HAL_RTC_WaitForSynchro>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	22ff      	movs	r2, #255	; 0xff
 80053ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2204      	movs	r2, #4
 80053b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e00c      	b.n	80053dc <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	22ff      	movs	r2, #255	; 0xff
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80053da:	2300      	movs	r3, #0
  }
}
 80053dc:	4618      	mov	r0, r3
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd90      	pop	{r4, r7, pc}

080053e4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80053fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	0c1b      	lsrs	r3, r3, #16
 8005404:	b2da      	uxtb	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	0a1b      	lsrs	r3, r3, #8
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	b2da      	uxtb	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	0b5b      	lsrs	r3, r3, #13
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0307 	and.w	r3, r3, #7
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d11a      	bne.n	8005474 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	78db      	ldrb	r3, [r3, #3]
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f88b 	bl	800555e <RTC_Bcd2ToByte>
 8005448:	4603      	mov	r3, r0
 800544a:	461a      	mov	r2, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 f882 	bl	800555e <RTC_Bcd2ToByte>
 800545a:	4603      	mov	r3, r0
 800545c:	461a      	mov	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	789b      	ldrb	r3, [r3, #2]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f879 	bl	800555e <RTC_Bcd2ToByte>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005494:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005496:	f7fd f9db 	bl	8002850 <HAL_GetTick>
 800549a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800549c:	e009      	b.n	80054b2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800549e:	f7fd f9d7 	bl	8002850 <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ac:	d901      	bls.n	80054b2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e007      	b.n	80054c2 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0320 	and.w	r3, r3, #32
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0ee      	beq.n	800549e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d119      	bne.n	8005514 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f04f 32ff 	mov.w	r2, #4294967295
 80054e8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80054ea:	f7fd f9b1 	bl	8002850 <HAL_GetTick>
 80054ee:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80054f0:	e009      	b.n	8005506 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80054f2:	f7fd f9ad 	bl	8002850 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005500:	d901      	bls.n	8005506 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e007      	b.n	8005516 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0ee      	beq.n	80054f2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	4603      	mov	r3, r0
 8005526:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800552c:	79fb      	ldrb	r3, [r7, #7]
 800552e:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 8005530:	e005      	b.n	800553e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3301      	adds	r3, #1
 8005536:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8005538:	7afb      	ldrb	r3, [r7, #11]
 800553a:	3b0a      	subs	r3, #10
 800553c:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800553e:	7afb      	ldrb	r3, [r7, #11]
 8005540:	2b09      	cmp	r3, #9
 8005542:	d8f6      	bhi.n	8005532 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	b2da      	uxtb	r2, r3
 800554c:	7afb      	ldrb	r3, [r7, #11]
 800554e:	4313      	orrs	r3, r2
 8005550:	b2db      	uxtb	r3, r3
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800555e:	b480      	push	{r7}
 8005560:	b085      	sub	sp, #20
 8005562:	af00      	add	r7, sp, #0
 8005564:	4603      	mov	r3, r0
 8005566:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8005568:	79fb      	ldrb	r3, [r7, #7]
 800556a:	091b      	lsrs	r3, r3, #4
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	005b      	lsls	r3, r3, #1
 8005578:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	b2db      	uxtb	r3, r3
 8005586:	4413      	add	r3, r2
 8005588:	b2db      	uxtb	r3, r3
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005596:	b480      	push	{r7}
 8005598:	b087      	sub	sp, #28
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	3350      	adds	r3, #80	; 0x50
 80055a8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4413      	add	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	601a      	str	r2, [r3, #0]
}
 80055ba:	bf00      	nop
 80055bc:	371c      	adds	r7, #28
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b085      	sub	sp, #20
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3350      	adds	r3, #80	; 0x50
 80055d6:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d101      	bne.n	8005608 <HAL_RTCEx_EnableBypassShadow+0x16>
 8005604:	2302      	movs	r3, #2
 8005606:	e024      	b.n	8005652 <HAL_RTCEx_EnableBypassShadow+0x60>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	22ca      	movs	r2, #202	; 0xca
 800561e:	625a      	str	r2, [r3, #36]	; 0x24
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2253      	movs	r2, #83	; 0x53
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0220 	orr.w	r2, r2, #32
 8005636:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	22ff      	movs	r2, #255	; 0xff
 800563e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e095      	b.n	800579c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b00      	cmp	r3, #0
 8005676:	d108      	bne.n	800568a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005680:	d009      	beq.n	8005696 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	61da      	str	r2, [r3, #28]
 8005688:	e005      	b.n	8005696 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fc fe27 	bl	8002304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056cc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056d6:	d902      	bls.n	80056de <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	e002      	b.n	80056e4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80056ec:	d007      	beq.n	80056fe <HAL_SPI_Init+0xa0>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f6:	d002      	beq.n	80056fe <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	431a      	orrs	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005740:	ea42 0103 	orr.w	r1, r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005748:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	f003 0204 	and.w	r2, r3, #4
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800577a:	ea42 0103 	orr.w	r1, r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80057ca:	4013      	ands	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d118      	bne.n	8005806 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d013      	beq.n	8005806 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	f003 0320 	and.w	r3, r3, #32
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d104      	bne.n	80057f2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 81fb 	beq.w	8005bf2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
      }
      return;
 8005804:	e1f5      	b.n	8005bf2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 80ef 	beq.w	80059ec <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4b73      	ldr	r3, [pc, #460]	; (80059e0 <HAL_UART_IRQHandler+0x23c>)
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d105      	bne.n	8005824 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4b72      	ldr	r3, [pc, #456]	; (80059e4 <HAL_UART_IRQHandler+0x240>)
 800581c:	4013      	ands	r3, r2
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 80e4 	beq.w	80059ec <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d010      	beq.n	8005850 <HAL_UART_IRQHandler+0xac>
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00b      	beq.n	8005850 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2201      	movs	r2, #1
 800583e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005846:	f043 0201 	orr.w	r2, r3, #1
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d010      	beq.n	800587c <HAL_UART_IRQHandler+0xd8>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00b      	beq.n	800587c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2202      	movs	r2, #2
 800586a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005872:	f043 0204 	orr.w	r2, r3, #4
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d010      	beq.n	80058a8 <HAL_UART_IRQHandler+0x104>
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00b      	beq.n	80058a8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2204      	movs	r2, #4
 8005896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800589e:	f043 0202 	orr.w	r2, r3, #2
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d015      	beq.n	80058de <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f003 0320 	and.w	r3, r3, #32
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4b48      	ldr	r3, [pc, #288]	; (80059e0 <HAL_UART_IRQHandler+0x23c>)
 80058c0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00b      	beq.n	80058de <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2208      	movs	r2, #8
 80058cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d4:	f043 0208 	orr.w	r2, r3, #8
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d011      	beq.n	800590c <HAL_UART_IRQHandler+0x168>
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00c      	beq.n	800590c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 816f 	beq.w	8005bf6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b00      	cmp	r3, #0
 800592a:	d104      	bne.n	8005936 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800594c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005958:	2b40      	cmp	r3, #64	; 0x40
 800595a:	d004      	beq.n	8005966 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005962:	2b00      	cmp	r3, #0
 8005964:	d031      	beq.n	80059ca <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f970 	bl	8005c4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005976:	2b40      	cmp	r3, #64	; 0x40
 8005978:	d123      	bne.n	80059c2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005988:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598e:	2b00      	cmp	r3, #0
 8005990:	d013      	beq.n	80059ba <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <HAL_UART_IRQHandler+0x244>)
 8005998:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fd f99e 	bl	8002ce0 <HAL_DMA_Abort_IT>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d017      	beq.n	80059da <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80059b4:	4610      	mov	r0, r2
 80059b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	e00f      	b.n	80059da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f930 	bl	8005c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c0:	e00b      	b.n	80059da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f92c 	bl	8005c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059c8:	e007      	b.n	80059da <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f928 	bl	8005c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80059d8:	e10d      	b.n	8005bf6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059da:	bf00      	nop
    return;
 80059dc:	e10b      	b.n	8005bf6 <HAL_UART_IRQHandler+0x452>
 80059de:	bf00      	nop
 80059e0:	10000001 	.word	0x10000001
 80059e4:	04000120 	.word	0x04000120
 80059e8:	08005cb1 	.word	0x08005cb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	f040 80ab 	bne.w	8005b4c <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0310 	and.w	r3, r3, #16
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	f000 80a5 	beq.w	8005b4c <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 809f 	beq.w	8005b4c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2210      	movs	r2, #16
 8005a14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a20:	2b40      	cmp	r3, #64	; 0x40
 8005a22:	d155      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8005a2e:	893b      	ldrh	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 80e2 	beq.w	8005bfa <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a3c:	893a      	ldrh	r2, [r7, #8]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	f080 80db 	bcs.w	8005bfa <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	893a      	ldrh	r2, [r7, #8]
 8005a48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0320 	and.w	r3, r3, #32
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d12b      	bne.n	8005ab4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a6a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0201 	bic.w	r2, r2, #1
 8005a7a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0210 	bic.w	r2, r2, #16
 8005aa8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7fd f8b7 	bl	8002c22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	1ad3      	subs	r3, r2, r3
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f8b3 	bl	8005c34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ace:	e094      	b.n	8005bfa <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8087 	beq.w	8005bfe <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005af0:	897b      	ldrh	r3, [r7, #10]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 8083 	beq.w	8005bfe <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b06:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6812      	ldr	r2, [r2, #0]
 8005b12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b16:	f023 0301 	bic.w	r3, r3, #1
 8005b1a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0210 	bic.w	r2, r2, #16
 8005b3e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b40:	897b      	ldrh	r3, [r7, #10]
 8005b42:	4619      	mov	r1, r3
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f875 	bl	8005c34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b4a:	e058      	b.n	8005bfe <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00d      	beq.n	8005b72 <HAL_UART_IRQHandler+0x3ce>
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d008      	beq.n	8005b72 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8d0 	bl	8005d10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b70:	e048      	b.n	8005c04 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d012      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d104      	bne.n	8005b90 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d034      	beq.n	8005c02 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	4798      	blx	r3
    }
    return;
 8005ba0:	e02f      	b.n	8005c02 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_UART_IRQHandler+0x41a>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d003      	beq.n	8005bbe <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f890 	bl	8005cdc <UART_EndTransmit_IT>
    return;
 8005bbc:	e022      	b.n	8005c04 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_UART_IRQHandler+0x436>
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f8b0 	bl	8005d38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bd8:	e014      	b.n	8005c04 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00f      	beq.n	8005c04 <HAL_UART_IRQHandler+0x460>
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da0c      	bge.n	8005c04 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f89a 	bl	8005d24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bf0:	e008      	b.n	8005c04 <HAL_UART_IRQHandler+0x460>
      return;
 8005bf2:	bf00      	nop
 8005bf4:	e006      	b.n	8005c04 <HAL_UART_IRQHandler+0x460>
    return;
 8005bf6:	bf00      	nop
 8005bf8:	e004      	b.n	8005c04 <HAL_UART_IRQHandler+0x460>
      return;
 8005bfa:	bf00      	nop
 8005bfc:	e002      	b.n	8005c04 <HAL_UART_IRQHandler+0x460>
      return;
 8005bfe:	bf00      	nop
 8005c00:	e000      	b.n	8005c04 <HAL_UART_IRQHandler+0x460>
    return;
 8005c02:	bf00      	nop
  }
}
 8005c04:	3720      	adds	r7, #32
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop

08005c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6812      	ldr	r2, [r2, #0]
 8005c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0210 	bic.w	r2, r2, #16
 8005c8e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff ffa6 	bl	8005c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff ff82 	bl	8005c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d08:	bf00      	nop
 8005d0a:	3708      	adds	r7, #8
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005d52:	2300      	movs	r3, #0
 8005d54:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d56:	f107 0308 	add.w	r3, r7, #8
 8005d5a:	2218      	movs	r2, #24
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 f97c 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d64:	233f      	movs	r3, #63	; 0x3f
 8005d66:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005d68:	2381      	movs	r3, #129	; 0x81
 8005d6a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005d6c:	1dfb      	adds	r3, r7, #7
 8005d6e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005d70:	2301      	movs	r3, #1
 8005d72:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d74:	f107 0308 	add.w	r3, r7, #8
 8005d78:	2100      	movs	r1, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 f832 	bl	8006de4 <hci_send_req>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	da01      	bge.n	8005d8a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005d86:	23ff      	movs	r3, #255	; 0xff
 8005d88:	e000      	b.n	8005d8c <aci_gap_set_non_discoverable+0x40>
  return status;
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8005d94:	b5b0      	push	{r4, r5, r7, lr}
 8005d96:	b0ce      	sub	sp, #312	; 0x138
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	1dfb      	adds	r3, r7, #7
 8005da4:	462a      	mov	r2, r5
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	1d3b      	adds	r3, r7, #4
 8005daa:	4622      	mov	r2, r4
 8005dac:	801a      	strh	r2, [r3, #0]
 8005dae:	1cbb      	adds	r3, r7, #2
 8005db0:	4602      	mov	r2, r0
 8005db2:	801a      	strh	r2, [r3, #0]
 8005db4:	1dbb      	adds	r3, r7, #6
 8005db6:	460a      	mov	r2, r1
 8005db8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005dba:	f107 0310 	add.w	r3, r7, #16
 8005dbe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005dc2:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	f107 0210 	add.w	r2, r7, #16
 8005dcc:	4413      	add	r3, r2
 8005dce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005dd2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005dd6:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005dda:	4413      	add	r3, r2
 8005ddc:	3309      	adds	r3, #9
 8005dde:	f107 0210 	add.w	r2, r7, #16
 8005de2:	4413      	add	r3, r2
 8005de4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005de8:	f107 030f 	add.w	r3, r7, #15
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005df6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005dfa:	1dfa      	adds	r2, r7, #7
 8005dfc:	7812      	ldrb	r2, [r2, #0]
 8005dfe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005e00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e04:	3301      	adds	r3, #1
 8005e06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005e0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e0e:	1d3a      	adds	r2, r7, #4
 8005e10:	8812      	ldrh	r2, [r2, #0]
 8005e12:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e1a:	3302      	adds	r3, #2
 8005e1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005e20:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e24:	1cba      	adds	r2, r7, #2
 8005e26:	8812      	ldrh	r2, [r2, #0]
 8005e28:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e30:	3302      	adds	r3, #2
 8005e32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005e36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e3a:	1dba      	adds	r2, r7, #6
 8005e3c:	7812      	ldrb	r2, [r2, #0]
 8005e3e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e44:	3301      	adds	r3, #1
 8005e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005e4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e4e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005e52:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005e54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e58:	3301      	adds	r3, #1
 8005e5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005e5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e62:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005e66:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005e68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005e72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005e76:	3308      	adds	r3, #8
 8005e78:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005e7c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 f8db 	bl	800703c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005e86:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005e8a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005e8e:	4413      	add	r3, r2
 8005e90:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005e94:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005e98:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005e9c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005ea8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005eac:	3301      	adds	r3, #1
 8005eae:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005eb2:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 f8c0 	bl	800703c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005ebc:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005ec0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005ec4:	4413      	add	r3, r2
 8005ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8005eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ece:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005ed2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ed8:	3302      	adds	r3, #2
 8005eda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005ee6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005ee8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005eec:	3302      	adds	r3, #2
 8005eee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ef2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ef6:	2218      	movs	r2, #24
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f001 f8ae 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f00:	233f      	movs	r3, #63	; 0x3f
 8005f02:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005f06:	2383      	movs	r3, #131	; 0x83
 8005f08:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005f0c:	f107 0310 	add.w	r3, r7, #16
 8005f10:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005f14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f18:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005f1c:	f107 030f 	add.w	r3, r7, #15
 8005f20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f2e:	2100      	movs	r1, #0
 8005f30:	4618      	mov	r0, r3
 8005f32:	f000 ff57 	bl	8006de4 <hci_send_req>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	da01      	bge.n	8005f40 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8005f3c:	23ff      	movs	r3, #255	; 0xff
 8005f3e:	e002      	b.n	8005f46 <aci_gap_set_discoverable+0x1b2>
  return status;
 8005f40:	f107 030f 	add.w	r3, r7, #15
 8005f44:	781b      	ldrb	r3, [r3, #0]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bdb0      	pop	{r4, r5, r7, pc}

08005f50 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b0cc      	sub	sp, #304	; 0x130
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	4602      	mov	r2, r0
 8005f58:	1dfb      	adds	r3, r7, #7
 8005f5a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005f5c:	f107 0310 	add.w	r3, r7, #16
 8005f60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005f64:	f107 030f 	add.w	r3, r7, #15
 8005f68:	2200      	movs	r2, #0
 8005f6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8005f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f76:	1dfa      	adds	r2, r7, #7
 8005f78:	7812      	ldrb	r2, [r2, #0]
 8005f7a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f80:	3301      	adds	r3, #1
 8005f82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f8a:	2218      	movs	r2, #24
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 f864 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f94:	233f      	movs	r3, #63	; 0x3f
 8005f96:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8005f9a:	2385      	movs	r3, #133	; 0x85
 8005f9c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005fa0:	f107 0310 	add.w	r3, r7, #16
 8005fa4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005fa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005fac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005fb0:	f107 030f 	add.w	r3, r7, #15
 8005fb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ff0d 	bl	8006de4 <hci_send_req>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da01      	bge.n	8005fd4 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8005fd0:	23ff      	movs	r3, #255	; 0xff
 8005fd2:	e002      	b.n	8005fda <aci_gap_set_io_capability+0x8a>
  return status;
 8005fd4:	f107 030f 	add.w	r3, r7, #15
 8005fd8:	781b      	ldrb	r3, [r3, #0]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005fe4:	b5b0      	push	{r4, r5, r7, lr}
 8005fe6:	b0cc      	sub	sp, #304	; 0x130
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	4605      	mov	r5, r0
 8005fec:	460c      	mov	r4, r1
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	1dfb      	adds	r3, r7, #7
 8005ff4:	462a      	mov	r2, r5
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	1dbb      	adds	r3, r7, #6
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	1d7b      	adds	r3, r7, #5
 8006000:	4602      	mov	r2, r0
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	1d3b      	adds	r3, r7, #4
 8006006:	460a      	mov	r2, r1
 8006008:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800600a:	f107 0310 	add.w	r3, r7, #16
 800600e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006012:	f107 030f 	add.w	r3, r7, #15
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006024:	1dfa      	adds	r2, r7, #7
 8006026:	7812      	ldrb	r2, [r2, #0]
 8006028:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800602a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800602e:	3301      	adds	r3, #1
 8006030:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006038:	1dba      	adds	r2, r7, #6
 800603a:	7812      	ldrb	r2, [r2, #0]
 800603c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800603e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006042:	3301      	adds	r3, #1
 8006044:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8006048:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800604c:	1d7a      	adds	r2, r7, #5
 800604e:	7812      	ldrb	r2, [r2, #0]
 8006050:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006052:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006056:	3301      	adds	r3, #1
 8006058:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800605c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006060:	1d3a      	adds	r2, r7, #4
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006066:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800606a:	3301      	adds	r3, #1
 800606c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006070:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006074:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006078:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800607a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800607e:	3301      	adds	r3, #1
 8006080:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006088:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800608c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800608e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006092:	3301      	adds	r3, #1
 8006094:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80060a0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80060a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060a6:	3301      	adds	r3, #1
 80060a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80060ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80060b4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80060b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060bc:	3304      	adds	r3, #4
 80060be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80060c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80060ca:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80060cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060d0:	3301      	adds	r3, #1
 80060d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060da:	2218      	movs	r2, #24
 80060dc:	2100      	movs	r1, #0
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 ffbc 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 80060e4:	233f      	movs	r3, #63	; 0x3f
 80060e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80060ea:	2386      	movs	r3, #134	; 0x86
 80060ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80060f0:	f107 0310 	add.w	r3, r7, #16
 80060f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80060f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80060fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006100:	f107 030f 	add.w	r3, r7, #15
 8006104:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006108:	2301      	movs	r3, #1
 800610a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800610e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fe65 	bl	8006de4 <hci_send_req>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	da01      	bge.n	8006124 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8006120:	23ff      	movs	r3, #255	; 0xff
 8006122:	e002      	b.n	800612a <aci_gap_set_authentication_requirement+0x146>
  return status;
 8006124:	f107 030f 	add.w	r3, r7, #15
 8006128:	781b      	ldrb	r3, [r3, #0]
}
 800612a:	4618      	mov	r0, r3
 800612c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006130:	46bd      	mov	sp, r7
 8006132:	bdb0      	pop	{r4, r5, r7, pc}

08006134 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006134:	b590      	push	{r4, r7, lr}
 8006136:	b0cd      	sub	sp, #308	; 0x134
 8006138:	af00      	add	r7, sp, #0
 800613a:	4604      	mov	r4, r0
 800613c:	4608      	mov	r0, r1
 800613e:	4611      	mov	r1, r2
 8006140:	463a      	mov	r2, r7
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	1dfb      	adds	r3, r7, #7
 8006146:	4622      	mov	r2, r4
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	1dbb      	adds	r3, r7, #6
 800614c:	4602      	mov	r2, r0
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	1d7b      	adds	r3, r7, #5
 8006152:	460a      	mov	r2, r1
 8006154:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006156:	f107 0310 	add.w	r3, r7, #16
 800615a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800615e:	f107 0308 	add.w	r3, r7, #8
 8006162:	2207      	movs	r2, #7
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f000 ff78 	bl	800705c <Osal_MemSet>
  int index_input = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006176:	1dfa      	adds	r2, r7, #7
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800617c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006180:	3301      	adds	r3, #1
 8006182:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800618a:	1dba      	adds	r2, r7, #6
 800618c:	7812      	ldrb	r2, [r2, #0]
 800618e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006190:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006194:	3301      	adds	r3, #1
 8006196:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800619a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800619e:	1d7a      	adds	r2, r7, #5
 80061a0:	7812      	ldrb	r2, [r2, #0]
 80061a2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80061a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061a8:	3301      	adds	r3, #1
 80061aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061b2:	2218      	movs	r2, #24
 80061b4:	2100      	movs	r1, #0
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 ff50 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 80061bc:	233f      	movs	r3, #63	; 0x3f
 80061be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80061c2:	238a      	movs	r3, #138	; 0x8a
 80061c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061c8:	f107 0310 	add.w	r3, r7, #16
 80061cc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061d4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80061d8:	f107 0308 	add.w	r3, r7, #8
 80061dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80061e0:	2307      	movs	r3, #7
 80061e2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fdf9 	bl	8006de4 <hci_send_req>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	da01      	bge.n	80061fc <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 80061f8:	23ff      	movs	r3, #255	; 0xff
 80061fa:	e021      	b.n	8006240 <aci_gap_init+0x10c>
  if ( resp.Status )
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <aci_gap_init+0xda>
    return resp.Status;
 8006206:	f107 0308 	add.w	r3, r7, #8
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	e018      	b.n	8006240 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006216:	b29a      	uxth	r2, r3
 8006218:	463b      	mov	r3, r7
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006226:	b29a      	uxth	r2, r3
 8006228:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800622c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006236:	b29a      	uxth	r2, r3
 8006238:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800623c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006246:	46bd      	mov	sp, r7
 8006248:	bd90      	pop	{r4, r7, pc}

0800624a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b0cc      	sub	sp, #304	; 0x130
 800624e:	af00      	add	r7, sp, #0
 8006250:	4602      	mov	r2, r0
 8006252:	463b      	mov	r3, r7
 8006254:	6019      	str	r1, [r3, #0]
 8006256:	1dfb      	adds	r3, r7, #7
 8006258:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006262:	f107 030f 	add.w	r3, r7, #15
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800626a:	2300      	movs	r3, #0
 800626c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006274:	1dfa      	adds	r2, r7, #7
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800627a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800627e:	3301      	adds	r3, #1
 8006280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006284:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006288:	1c58      	adds	r0, r3, #1
 800628a:	1dfb      	adds	r3, r7, #7
 800628c:	781a      	ldrb	r2, [r3, #0]
 800628e:	463b      	mov	r3, r7
 8006290:	6819      	ldr	r1, [r3, #0]
 8006292:	f000 fed3 	bl	800703c <Osal_MemCpy>
  index_input += AdvDataLen;
 8006296:	1dfb      	adds	r3, r7, #7
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800629e:	4413      	add	r3, r2
 80062a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062a8:	2218      	movs	r2, #24
 80062aa:	2100      	movs	r1, #0
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fed5 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 80062b2:	233f      	movs	r3, #63	; 0x3f
 80062b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 80062b8:	238e      	movs	r3, #142	; 0x8e
 80062ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80062be:	f107 0310 	add.w	r3, r7, #16
 80062c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80062c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80062ce:	f107 030f 	add.w	r3, r7, #15
 80062d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fd7e 	bl	8006de4 <hci_send_req>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	da01      	bge.n	80062f2 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 80062ee:	23ff      	movs	r3, #255	; 0xff
 80062f0:	e002      	b.n	80062f8 <aci_gap_update_adv_data+0xae>
  return status;
 80062f2:	f107 030f 	add.w	r3, r7, #15
 80062f6:	781b      	ldrb	r3, [r3, #0]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b088      	sub	sp, #32
 8006306:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800630c:	f107 0308 	add.w	r3, r7, #8
 8006310:	2218      	movs	r2, #24
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fea1 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 800631a:	233f      	movs	r3, #63	; 0x3f
 800631c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800631e:	2392      	movs	r3, #146	; 0x92
 8006320:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006322:	1dfb      	adds	r3, r7, #7
 8006324:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006326:	2301      	movs	r3, #1
 8006328:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800632a:	f107 0308 	add.w	r3, r7, #8
 800632e:	2100      	movs	r1, #0
 8006330:	4618      	mov	r0, r3
 8006332:	f000 fd57 	bl	8006de4 <hci_send_req>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	da01      	bge.n	8006340 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800633c:	23ff      	movs	r3, #255	; 0xff
 800633e:	e000      	b.n	8006342 <aci_gap_configure_whitelist+0x40>
  return status;
 8006340:	79fb      	ldrb	r3, [r7, #7]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b0cc      	sub	sp, #304	; 0x130
 800634e:	af00      	add	r7, sp, #0
 8006350:	4602      	mov	r2, r0
 8006352:	1dbb      	adds	r3, r7, #6
 8006354:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8006356:	f107 0310 	add.w	r3, r7, #16
 800635a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800635e:	f107 030f 	add.w	r3, r7, #15
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800636c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006370:	1dba      	adds	r2, r7, #6
 8006372:	8812      	ldrh	r2, [r2, #0]
 8006374:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006376:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800637a:	3302      	adds	r3, #2
 800637c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006380:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006384:	2218      	movs	r2, #24
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fe67 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 800638e:	233f      	movs	r3, #63	; 0x3f
 8006390:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8006394:	2395      	movs	r3, #149	; 0x95
 8006396:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800639a:	f107 0310 	add.w	r3, r7, #16
 800639e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80063a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80063a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80063aa:	f107 030f 	add.w	r3, r7, #15
 80063ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80063b2:	2301      	movs	r3, #1
 80063b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063bc:	2100      	movs	r1, #0
 80063be:	4618      	mov	r0, r3
 80063c0:	f000 fd10 	bl	8006de4 <hci_send_req>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da01      	bge.n	80063ce <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 80063ca:	23ff      	movs	r3, #255	; 0xff
 80063cc:	e002      	b.n	80063d4 <aci_gap_allow_rebond+0x8a>
  return status;
 80063ce:	f107 030f 	add.w	r3, r7, #15
 80063d2:	781b      	ldrb	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80063de:	b580      	push	{r7, lr}
 80063e0:	b0cc      	sub	sp, #304	; 0x130
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	4602      	mov	r2, r0
 80063e6:	1dbb      	adds	r3, r7, #6
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	1d7b      	adds	r3, r7, #5
 80063ec:	460a      	mov	r2, r1
 80063ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80063f0:	f107 0310 	add.w	r3, r7, #16
 80063f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80063f8:	f107 030f 	add.w	r3, r7, #15
 80063fc:	2200      	movs	r2, #0
 80063fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640a:	1dba      	adds	r2, r7, #6
 800640c:	8812      	ldrh	r2, [r2, #0]
 800640e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006410:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006414:	3302      	adds	r3, #2
 8006416:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800641a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800641e:	1d7a      	adds	r2, r7, #5
 8006420:	7812      	ldrb	r2, [r2, #0]
 8006422:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006424:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006428:	3301      	adds	r3, #1
 800642a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800642e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006432:	2218      	movs	r2, #24
 8006434:	2100      	movs	r1, #0
 8006436:	4618      	mov	r0, r3
 8006438:	f000 fe10 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 800643c:	233f      	movs	r3, #63	; 0x3f
 800643e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8006442:	23a5      	movs	r3, #165	; 0xa5
 8006444:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006448:	f107 0310 	add.w	r3, r7, #16
 800644c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006454:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006458:	f107 030f 	add.w	r3, r7, #15
 800645c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006460:	2301      	movs	r3, #1
 8006462:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006466:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800646a:	2100      	movs	r1, #0
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fcb9 	bl	8006de4 <hci_send_req>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	da01      	bge.n	800647c <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006478:	23ff      	movs	r3, #255	; 0xff
 800647a:	e002      	b.n	8006482 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800647c:	f107 030f 	add.w	r3, r7, #15
 8006480:	781b      	ldrb	r3, [r3, #0]
}
 8006482:	4618      	mov	r0, r3
 8006484:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006492:	2300      	movs	r3, #0
 8006494:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006496:	f107 0308 	add.w	r3, r7, #8
 800649a:	2218      	movs	r2, #24
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fddc 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 80064a4:	233f      	movs	r3, #63	; 0x3f
 80064a6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80064a8:	f240 1301 	movw	r3, #257	; 0x101
 80064ac:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80064ae:	1dfb      	adds	r3, r7, #7
 80064b0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80064b2:	2301      	movs	r3, #1
 80064b4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064b6:	f107 0308 	add.w	r3, r7, #8
 80064ba:	2100      	movs	r1, #0
 80064bc:	4618      	mov	r0, r3
 80064be:	f000 fc91 	bl	8006de4 <hci_send_req>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da01      	bge.n	80064cc <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80064c8:	23ff      	movs	r3, #255	; 0xff
 80064ca:	e000      	b.n	80064ce <aci_gatt_init+0x42>
  return status;
 80064cc:	79fb      	ldrb	r3, [r7, #7]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80064d6:	b590      	push	{r4, r7, lr}
 80064d8:	b0cf      	sub	sp, #316	; 0x13c
 80064da:	af00      	add	r7, sp, #0
 80064dc:	4604      	mov	r4, r0
 80064de:	4638      	mov	r0, r7
 80064e0:	6001      	str	r1, [r0, #0]
 80064e2:	4610      	mov	r0, r2
 80064e4:	4619      	mov	r1, r3
 80064e6:	1dfb      	adds	r3, r7, #7
 80064e8:	4622      	mov	r2, r4
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	1dbb      	adds	r3, r7, #6
 80064ee:	4602      	mov	r2, r0
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	1d7b      	adds	r3, r7, #5
 80064f4:	460a      	mov	r2, r1
 80064f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80064f8:	f107 0310 	add.w	r3, r7, #16
 80064fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006500:	1dfb      	adds	r3, r7, #7
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d007      	beq.n	8006518 <aci_gatt_add_service+0x42>
 8006508:	1dfb      	adds	r3, r7, #7
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d101      	bne.n	8006514 <aci_gatt_add_service+0x3e>
 8006510:	2311      	movs	r3, #17
 8006512:	e002      	b.n	800651a <aci_gatt_add_service+0x44>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <aci_gatt_add_service+0x44>
 8006518:	2303      	movs	r3, #3
 800651a:	f107 0210 	add.w	r2, r7, #16
 800651e:	4413      	add	r3, r2
 8006520:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006524:	f107 030c 	add.w	r3, r7, #12
 8006528:	2203      	movs	r2, #3
 800652a:	2100      	movs	r1, #0
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fd95 	bl	800705c <Osal_MemSet>
  int index_input = 0;
 8006532:	2300      	movs	r3, #0
 8006534:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8006538:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800653c:	1dfa      	adds	r2, r7, #7
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006546:	3301      	adds	r3, #1
 8006548:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800654c:	1dfb      	adds	r3, r7, #7
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d002      	beq.n	800655a <aci_gatt_add_service+0x84>
 8006554:	2b02      	cmp	r3, #2
 8006556:	d004      	beq.n	8006562 <aci_gatt_add_service+0x8c>
 8006558:	e007      	b.n	800656a <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800655a:	2302      	movs	r3, #2
 800655c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006560:	e005      	b.n	800656e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8006562:	2310      	movs	r3, #16
 8006564:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006568:	e001      	b.n	800656e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800656a:	2347      	movs	r3, #71	; 0x47
 800656c:	e05d      	b.n	800662a <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800656e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006572:	1c58      	adds	r0, r3, #1
 8006574:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006578:	463b      	mov	r3, r7
 800657a:	6819      	ldr	r1, [r3, #0]
 800657c:	f000 fd5e 	bl	800703c <Osal_MemCpy>
    index_input += size;
 8006580:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006584:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006588:	4413      	add	r3, r2
 800658a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800658e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006592:	1dba      	adds	r2, r7, #6
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006598:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800659c:	3301      	adds	r3, #1
 800659e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80065a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065a6:	1d7a      	adds	r2, r7, #5
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80065ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065b0:	3301      	adds	r3, #1
 80065b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80065b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065ba:	2218      	movs	r2, #24
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fd4c 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 80065c4:	233f      	movs	r3, #63	; 0x3f
 80065c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80065ca:	f44f 7381 	mov.w	r3, #258	; 0x102
 80065ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80065d2:	f107 0310 	add.w	r3, r7, #16
 80065d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80065da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80065e2:	f107 030c 	add.w	r3, r7, #12
 80065e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80065ea:	2303      	movs	r3, #3
 80065ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80065f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fbf4 	bl	8006de4 <hci_send_req>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	da01      	bge.n	8006606 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8006602:	23ff      	movs	r3, #255	; 0xff
 8006604:	e011      	b.n	800662a <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8006606:	f107 030c 	add.w	r3, r7, #12
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <aci_gatt_add_service+0x142>
    return resp.Status;
 8006610:	f107 030c 	add.w	r3, r7, #12
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	e008      	b.n	800662a <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006620:	b29a      	uxth	r2, r3
 8006622:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006626:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8006630:	46bd      	mov	sp, r7
 8006632:	bd90      	pop	{r4, r7, pc}

08006634 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006634:	b590      	push	{r4, r7, lr}
 8006636:	b0d1      	sub	sp, #324	; 0x144
 8006638:	af00      	add	r7, sp, #0
 800663a:	4604      	mov	r4, r0
 800663c:	4608      	mov	r0, r1
 800663e:	f107 0108 	add.w	r1, r7, #8
 8006642:	600a      	str	r2, [r1, #0]
 8006644:	4619      	mov	r1, r3
 8006646:	f107 030e 	add.w	r3, r7, #14
 800664a:	4622      	mov	r2, r4
 800664c:	801a      	strh	r2, [r3, #0]
 800664e:	f107 030d 	add.w	r3, r7, #13
 8006652:	4602      	mov	r2, r0
 8006654:	701a      	strb	r2, [r3, #0]
 8006656:	1dbb      	adds	r3, r7, #6
 8006658:	460a      	mov	r2, r1
 800665a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800665c:	f107 0318 	add.w	r3, r7, #24
 8006660:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006664:	f107 030d 	add.w	r3, r7, #13
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d008      	beq.n	8006680 <aci_gatt_add_char+0x4c>
 800666e:	f107 030d 	add.w	r3, r7, #13
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b02      	cmp	r3, #2
 8006676:	d101      	bne.n	800667c <aci_gatt_add_char+0x48>
 8006678:	2313      	movs	r3, #19
 800667a:	e002      	b.n	8006682 <aci_gatt_add_char+0x4e>
 800667c:	2303      	movs	r3, #3
 800667e:	e000      	b.n	8006682 <aci_gatt_add_char+0x4e>
 8006680:	2305      	movs	r3, #5
 8006682:	f107 0218 	add.w	r2, r7, #24
 8006686:	4413      	add	r3, r2
 8006688:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800668c:	f107 0314 	add.w	r3, r7, #20
 8006690:	2203      	movs	r2, #3
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fce1 	bl	800705c <Osal_MemSet>
  int index_input = 0;
 800669a:	2300      	movs	r3, #0
 800669c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80066a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80066a4:	f107 020e 	add.w	r2, r7, #14
 80066a8:	8812      	ldrh	r2, [r2, #0]
 80066aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80066ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066b0:	3302      	adds	r3, #2
 80066b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80066b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80066ba:	f107 020d 	add.w	r2, r7, #13
 80066be:	7812      	ldrb	r2, [r2, #0]
 80066c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80066c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066c6:	3301      	adds	r3, #1
 80066c8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80066cc:	f107 030d 	add.w	r3, r7, #13
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d002      	beq.n	80066dc <aci_gatt_add_char+0xa8>
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d004      	beq.n	80066e4 <aci_gatt_add_char+0xb0>
 80066da:	e007      	b.n	80066ec <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 80066dc:	2302      	movs	r3, #2
 80066de:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80066e2:	e005      	b.n	80066f0 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80066e4:	2310      	movs	r3, #16
 80066e6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80066ea:	e001      	b.n	80066f0 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80066ec:	2347      	movs	r3, #71	; 0x47
 80066ee:	e086      	b.n	80067fe <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80066f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80066f4:	1cd8      	adds	r0, r3, #3
 80066f6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80066fa:	f107 0308 	add.w	r3, r7, #8
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	f000 fc9c 	bl	800703c <Osal_MemCpy>
    index_input += size;
 8006704:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8006708:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800670c:	4413      	add	r3, r2
 800670e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006712:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006716:	1dba      	adds	r2, r7, #6
 8006718:	8812      	ldrh	r2, [r2, #0]
 800671a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800671c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006720:	3302      	adds	r3, #2
 8006722:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006726:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800672a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800672e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006730:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006734:	3301      	adds	r3, #1
 8006736:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800673a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800673e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006742:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006744:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006748:	3301      	adds	r3, #1
 800674a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800674e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006752:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8006756:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006758:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800675c:	3301      	adds	r3, #1
 800675e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006762:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006766:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800676a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800676c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006770:	3301      	adds	r3, #1
 8006772:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006776:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800677a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800677e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006780:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006784:	3301      	adds	r3, #1
 8006786:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800678a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800678e:	2218      	movs	r2, #24
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fc62 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006798:	233f      	movs	r3, #63	; 0x3f
 800679a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800679e:	f44f 7382 	mov.w	r3, #260	; 0x104
 80067a2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80067a6:	f107 0318 	add.w	r3, r7, #24
 80067aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80067ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80067b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80067b6:	f107 0314 	add.w	r3, r7, #20
 80067ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80067be:	2303      	movs	r3, #3
 80067c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80067c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fb0a 	bl	8006de4 <hci_send_req>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da01      	bge.n	80067da <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80067d6:	23ff      	movs	r3, #255	; 0xff
 80067d8:	e011      	b.n	80067fe <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 80067da:	f107 0314 	add.w	r3, r7, #20
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80067e4:	f107 0314 	add.w	r3, r7, #20
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	e008      	b.n	80067fe <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 80067ec:	f107 0314 	add.w	r3, r7, #20
 80067f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80067f4:	b29a      	uxth	r2, r3
 80067f6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80067fa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8006804:	46bd      	mov	sp, r7
 8006806:	bd90      	pop	{r4, r7, pc}

08006808 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006808:	b5b0      	push	{r4, r5, r7, lr}
 800680a:	b0cc      	sub	sp, #304	; 0x130
 800680c:	af00      	add	r7, sp, #0
 800680e:	4605      	mov	r5, r0
 8006810:	460c      	mov	r4, r1
 8006812:	4610      	mov	r0, r2
 8006814:	4619      	mov	r1, r3
 8006816:	1dbb      	adds	r3, r7, #6
 8006818:	462a      	mov	r2, r5
 800681a:	801a      	strh	r2, [r3, #0]
 800681c:	1d3b      	adds	r3, r7, #4
 800681e:	4622      	mov	r2, r4
 8006820:	801a      	strh	r2, [r3, #0]
 8006822:	1cfb      	adds	r3, r7, #3
 8006824:	4602      	mov	r2, r0
 8006826:	701a      	strb	r2, [r3, #0]
 8006828:	1cbb      	adds	r3, r7, #2
 800682a:	460a      	mov	r2, r1
 800682c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800682e:	f107 0310 	add.w	r3, r7, #16
 8006832:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006836:	f107 030f 	add.w	r3, r7, #15
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8006844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006848:	1dba      	adds	r2, r7, #6
 800684a:	8812      	ldrh	r2, [r2, #0]
 800684c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800684e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006852:	3302      	adds	r3, #2
 8006854:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8006858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685c:	1d3a      	adds	r2, r7, #4
 800685e:	8812      	ldrh	r2, [r2, #0]
 8006860:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006866:	3302      	adds	r3, #2
 8006868:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800686c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006870:	1cfa      	adds	r2, r7, #3
 8006872:	7812      	ldrb	r2, [r2, #0]
 8006874:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006876:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800687a:	3301      	adds	r3, #1
 800687c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006884:	1cba      	adds	r2, r7, #2
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800688a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800688e:	3301      	adds	r3, #1
 8006890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006898:	1d98      	adds	r0, r3, #6
 800689a:	1cbb      	adds	r3, r7, #2
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	461a      	mov	r2, r3
 80068a0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80068a4:	f000 fbca 	bl	800703c <Osal_MemCpy>
  index_input += Char_Value_Length;
 80068a8:	1cbb      	adds	r3, r7, #2
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80068b0:	4413      	add	r3, r2
 80068b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ba:	2218      	movs	r2, #24
 80068bc:	2100      	movs	r1, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fbcc 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 80068c4:	233f      	movs	r3, #63	; 0x3f
 80068c6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80068ca:	f44f 7383 	mov.w	r3, #262	; 0x106
 80068ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80068d2:	f107 0310 	add.w	r3, r7, #16
 80068d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80068da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80068de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80068e2:	f107 030f 	add.w	r3, r7, #15
 80068e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80068ea:	2301      	movs	r3, #1
 80068ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068f4:	2100      	movs	r1, #0
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fa74 	bl	8006de4 <hci_send_req>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	da01      	bge.n	8006906 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 8006902:	23ff      	movs	r3, #255	; 0xff
 8006904:	e002      	b.n	800690c <aci_gatt_update_char_value+0x104>
  return status;
 8006906:	f107 030f 	add.w	r3, r7, #15
 800690a:	781b      	ldrb	r3, [r3, #0]
}
 800690c:	4618      	mov	r0, r3
 800690e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006912:	46bd      	mov	sp, r7
 8006914:	bdb0      	pop	{r4, r5, r7, pc}

08006916 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b0cc      	sub	sp, #304	; 0x130
 800691a:	af00      	add	r7, sp, #0
 800691c:	463b      	mov	r3, r7
 800691e:	601a      	str	r2, [r3, #0]
 8006920:	1dfb      	adds	r3, r7, #7
 8006922:	4602      	mov	r2, r0
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	1dbb      	adds	r3, r7, #6
 8006928:	460a      	mov	r2, r1
 800692a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800692c:	f107 0310 	add.w	r3, r7, #16
 8006930:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006934:	f107 030f 	add.w	r3, r7, #15
 8006938:	2200      	movs	r2, #0
 800693a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8006942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006946:	1dfa      	adds	r2, r7, #7
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800694c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006950:	3301      	adds	r3, #1
 8006952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8006956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800695a:	1dba      	adds	r2, r7, #6
 800695c:	7812      	ldrb	r2, [r2, #0]
 800695e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006964:	3301      	adds	r3, #1
 8006966:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800696a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800696e:	1c98      	adds	r0, r3, #2
 8006970:	1dbb      	adds	r3, r7, #6
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	463b      	mov	r3, r7
 8006976:	6819      	ldr	r1, [r3, #0]
 8006978:	f000 fb60 	bl	800703c <Osal_MemCpy>
  index_input += Length;
 800697c:	1dbb      	adds	r3, r7, #6
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006984:	4413      	add	r3, r2
 8006986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800698a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800698e:	2218      	movs	r2, #24
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fb62 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006998:	233f      	movs	r3, #63	; 0x3f
 800699a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800699e:	230c      	movs	r3, #12
 80069a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80069ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80069b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80069b4:	f107 030f 	add.w	r3, r7, #15
 80069b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80069bc:	2301      	movs	r3, #1
 80069be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80069c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069c6:	2100      	movs	r1, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 fa0b 	bl	8006de4 <hci_send_req>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	da01      	bge.n	80069d8 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80069d4:	23ff      	movs	r3, #255	; 0xff
 80069d6:	e002      	b.n	80069de <aci_hal_write_config_data+0xc8>
  return status;
 80069d8:	f107 030f 	add.w	r3, r7, #15
 80069dc:	781b      	ldrb	r3, [r3, #0]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b0cc      	sub	sp, #304	; 0x130
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4602      	mov	r2, r0
 80069f0:	1dfb      	adds	r3, r7, #7
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	1dbb      	adds	r3, r7, #6
 80069f6:	460a      	mov	r2, r1
 80069f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80069fa:	f107 0310 	add.w	r3, r7, #16
 80069fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a02:	f107 030f 	add.w	r3, r7, #15
 8006a06:	2200      	movs	r2, #0
 8006a08:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8006a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a14:	1dfa      	adds	r2, r7, #7
 8006a16:	7812      	ldrb	r2, [r2, #0]
 8006a18:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a1e:	3301      	adds	r3, #1
 8006a20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8006a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a28:	1dba      	adds	r2, r7, #6
 8006a2a:	7812      	ldrb	r2, [r2, #0]
 8006a2c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a32:	3301      	adds	r3, #1
 8006a34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a3c:	2218      	movs	r2, #24
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fb0b 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a46:	233f      	movs	r3, #63	; 0x3f
 8006a48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8006a4c:	230f      	movs	r3, #15
 8006a4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a52:	f107 0310 	add.w	r3, r7, #16
 8006a56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a62:	f107 030f 	add.w	r3, r7, #15
 8006a66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a74:	2100      	movs	r1, #0
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 f9b4 	bl	8006de4 <hci_send_req>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	da01      	bge.n	8006a86 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006a82:	23ff      	movs	r3, #255	; 0xff
 8006a84:	e002      	b.n	8006a8c <aci_hal_set_tx_power_level+0xa4>
  return status;
 8006a86:	f107 030f 	add.w	r3, r7, #15
 8006a8a:	781b      	ldrb	r3, [r3, #0]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b0cc      	sub	sp, #304	; 0x130
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	1dbb      	adds	r3, r7, #6
 8006aa0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006aa2:	f107 0310 	add.w	r3, r7, #16
 8006aa6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006aaa:	f107 030f 	add.w	r3, r7, #15
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006ab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006abc:	1dba      	adds	r2, r7, #6
 8006abe:	8812      	ldrh	r2, [r2, #0]
 8006ac0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ac6:	3302      	adds	r3, #2
 8006ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006acc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ad0:	2218      	movs	r2, #24
 8006ad2:	2100      	movs	r1, #0
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fac1 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ada:	233f      	movs	r3, #63	; 0x3f
 8006adc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006ae0:	2318      	movs	r3, #24
 8006ae2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ae6:	f107 0310 	add.w	r3, r7, #16
 8006aea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006aee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006af2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006af6:	f107 030f 	add.w	r3, r7, #15
 8006afa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006b08:	2100      	movs	r1, #0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 f96a 	bl	8006de4 <hci_send_req>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	da01      	bge.n	8006b1a <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 8006b16:	23ff      	movs	r3, #255	; 0xff
 8006b18:	e002      	b.n	8006b20 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8006b1a:	f107 030f 	add.w	r3, r7, #15
 8006b1e:	781b      	ldrb	r3, [r3, #0]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b088      	sub	sp, #32
 8006b2e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006b30:	2300      	movs	r3, #0
 8006b32:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b34:	f107 0308 	add.w	r3, r7, #8
 8006b38:	2218      	movs	r2, #24
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fa8d 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x03;
 8006b42:	2303      	movs	r3, #3
 8006b44:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8006b46:	2303      	movs	r3, #3
 8006b48:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b4a:	1dfb      	adds	r3, r7, #7
 8006b4c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b52:	f107 0308 	add.w	r3, r7, #8
 8006b56:	2100      	movs	r1, #0
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 f943 	bl	8006de4 <hci_send_req>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	da01      	bge.n	8006b68 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006b64:	23ff      	movs	r3, #255	; 0xff
 8006b66:	e000      	b.n	8006b6a <hci_reset+0x40>
  return status;
 8006b68:	79fb      	ldrb	r3, [r7, #7]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3720      	adds	r7, #32
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b0ce      	sub	sp, #312	; 0x138
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	f107 0308 	add.w	r3, r7, #8
 8006b7c:	6019      	str	r1, [r3, #0]
 8006b7e:	1d3b      	adds	r3, r7, #4
 8006b80:	601a      	str	r2, [r3, #0]
 8006b82:	f107 030e 	add.w	r3, r7, #14
 8006b86:	4602      	mov	r2, r0
 8006b88:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8006b8a:	f107 0318 	add.w	r3, r7, #24
 8006b8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006b92:	f107 0310 	add.w	r3, r7, #16
 8006b96:	2205      	movs	r2, #5
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fa5e 	bl	800705c <Osal_MemSet>
  int index_input = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8006ba6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006baa:	f107 020e 	add.w	r2, r7, #14
 8006bae:	8812      	ldrh	r2, [r2, #0]
 8006bb0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006bb2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bb6:	3302      	adds	r3, #2
 8006bb8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006bbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006bc0:	2218      	movs	r2, #24
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f000 fa49 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x08;
 8006bca:	2308      	movs	r3, #8
 8006bcc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8006bd0:	2330      	movs	r3, #48	; 0x30
 8006bd2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006bd6:	f107 0318 	add.w	r3, r7, #24
 8006bda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8006bde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006be2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006be6:	f107 0310 	add.w	r3, r7, #16
 8006bea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8006bee:	2305      	movs	r3, #5
 8006bf0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006bf4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f000 f8f2 	bl	8006de4 <hci_send_req>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da01      	bge.n	8006c0a <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 8006c06:	23ff      	movs	r3, #255	; 0xff
 8006c08:	e016      	b.n	8006c38 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8006c0a:	f107 0310 	add.w	r3, r7, #16
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d003      	beq.n	8006c1c <hci_le_read_phy+0xaa>
    return resp.Status;
 8006c14:	f107 0310 	add.w	r3, r7, #16
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	e00d      	b.n	8006c38 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8006c1c:	f107 0310 	add.w	r3, r7, #16
 8006c20:	78da      	ldrb	r2, [r3, #3]
 8006c22:	f107 0308 	add.w	r3, r7, #8
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8006c2a:	f107 0310 	add.w	r3, r7, #16
 8006c2e:	791a      	ldrb	r2, [r3, #4]
 8006c30:	1d3b      	adds	r3, r7, #4
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8006c42:	b590      	push	{r4, r7, lr}
 8006c44:	b0cd      	sub	sp, #308	; 0x134
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	4604      	mov	r4, r0
 8006c4a:	4608      	mov	r0, r1
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	1dfb      	adds	r3, r7, #7
 8006c50:	4622      	mov	r2, r4
 8006c52:	701a      	strb	r2, [r3, #0]
 8006c54:	1dbb      	adds	r3, r7, #6
 8006c56:	4602      	mov	r2, r0
 8006c58:	701a      	strb	r2, [r3, #0]
 8006c5a:	1d7b      	adds	r3, r7, #5
 8006c5c:	460a      	mov	r2, r1
 8006c5e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006c60:	f107 0310 	add.w	r3, r7, #16
 8006c64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006c68:	f107 030f 	add.w	r3, r7, #15
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006c76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c7a:	1dfa      	adds	r2, r7, #7
 8006c7c:	7812      	ldrb	r2, [r2, #0]
 8006c7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c84:	3301      	adds	r3, #1
 8006c86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c8e:	1dba      	adds	r2, r7, #6
 8006c90:	7812      	ldrb	r2, [r2, #0]
 8006c92:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c98:	3301      	adds	r3, #1
 8006c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca2:	1d7a      	adds	r2, r7, #5
 8006ca4:	7812      	ldrb	r2, [r2, #0]
 8006ca6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006ca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cac:	3301      	adds	r3, #1
 8006cae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006cb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cb6:	2218      	movs	r2, #24
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 f9ce 	bl	800705c <Osal_MemSet>
  rq.ogf = 0x08;
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8006cc6:	2331      	movs	r3, #49	; 0x31
 8006cc8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006ccc:	f107 0310 	add.w	r3, r7, #16
 8006cd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006cdc:	f107 030f 	add.w	r3, r7, #15
 8006ce0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cee:	2100      	movs	r1, #0
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 f877 	bl	8006de4 <hci_send_req>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	da01      	bge.n	8006d00 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006cfc:	23ff      	movs	r3, #255	; 0xff
 8006cfe:	e002      	b.n	8006d06 <hci_le_set_default_phy+0xc4>
  return status;
 8006d00:	f107 030f 	add.w	r3, r7, #15
 8006d04:	781b      	ldrb	r3, [r3, #0]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd90      	pop	{r4, r7, pc}

08006d10 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	4a08      	ldr	r2, [pc, #32]	; (8006d40 <hci_init+0x30>)
 8006d20:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006d22:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <hci_init+0x34>)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006d28:	4806      	ldr	r0, [pc, #24]	; (8006d44 <hci_init+0x34>)
 8006d2a:	f000 f973 	bl	8007014 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 f8d4 	bl	8006ee0 <TlInit>

  return;
 8006d38:	bf00      	nop
}
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	200002e8 	.word	0x200002e8
 8006d44:	200002c0 	.word	0x200002c0

08006d48 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006d4e:	4822      	ldr	r0, [pc, #136]	; (8006dd8 <hci_user_evt_proc+0x90>)
 8006d50:	f000 fcb6 	bl	80076c0 <LST_is_empty>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d12b      	bne.n	8006db2 <hci_user_evt_proc+0x6a>
 8006d5a:	4b20      	ldr	r3, [pc, #128]	; (8006ddc <hci_user_evt_proc+0x94>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d027      	beq.n	8006db2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006d62:	f107 030c 	add.w	r3, r7, #12
 8006d66:	4619      	mov	r1, r3
 8006d68:	481b      	ldr	r0, [pc, #108]	; (8006dd8 <hci_user_evt_proc+0x90>)
 8006d6a:	f000 fd38 	bl	80077de <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006d6e:	4b1c      	ldr	r3, [pc, #112]	; (8006de0 <hci_user_evt_proc+0x98>)
 8006d70:	69db      	ldr	r3, [r3, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006d7e:	4b18      	ldr	r3, [pc, #96]	; (8006de0 <hci_user_evt_proc+0x98>)
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	1d3a      	adds	r2, r7, #4
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006d88:	793a      	ldrb	r2, [r7, #4]
 8006d8a:	4b14      	ldr	r3, [pc, #80]	; (8006ddc <hci_user_evt_proc+0x94>)
 8006d8c:	701a      	strb	r2, [r3, #0]
 8006d8e:	e002      	b.n	8006d96 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006d90:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <hci_user_evt_proc+0x94>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006d96:	4b11      	ldr	r3, [pc, #68]	; (8006ddc <hci_user_evt_proc+0x94>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f000 ffd3 	bl	8007d4c <TL_MM_EvtDone>
 8006da6:	e004      	b.n	8006db2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4619      	mov	r1, r3
 8006dac:	480a      	ldr	r0, [pc, #40]	; (8006dd8 <hci_user_evt_proc+0x90>)
 8006dae:	f000 fca9 	bl	8007704 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006db2:	4809      	ldr	r0, [pc, #36]	; (8006dd8 <hci_user_evt_proc+0x90>)
 8006db4:	f000 fc84 	bl	80076c0 <LST_is_empty>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d107      	bne.n	8006dce <hci_user_evt_proc+0x86>
 8006dbe:	4b07      	ldr	r3, [pc, #28]	; (8006ddc <hci_user_evt_proc+0x94>)
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006dc6:	4804      	ldr	r0, [pc, #16]	; (8006dd8 <hci_user_evt_proc+0x90>)
 8006dc8:	f001 fbc3 	bl	8008552 <hci_notify_asynch_evt>
  }


  return;
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
}
 8006dd0:	3710      	adds	r7, #16
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	200001ac 	.word	0x200001ac
 8006ddc:	200001b8 	.word	0x200001b8
 8006de0:	200002c0 	.word	0x200002c0

08006de4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006df0:	2000      	movs	r0, #0
 8006df2:	f000 f8cb 	bl	8006f8c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006df6:	2300      	movs	r3, #0
 8006df8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	885b      	ldrh	r3, [r3, #2]
 8006dfe:	b21b      	sxth	r3, r3
 8006e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e04:	b21a      	sxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	b21b      	sxth	r3, r3
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	b21b      	sxth	r3, r3
 8006e12:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68db      	ldr	r3, [r3, #12]
 8006e18:	b2d9      	uxtb	r1, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	8bbb      	ldrh	r3, [r7, #28]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f88d 	bl	8006f40 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006e26:	e04e      	b.n	8006ec6 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006e28:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006e2c:	f001 fba8 	bl	8008580 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006e30:	e043      	b.n	8006eba <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006e32:	f107 030c 	add.w	r3, r7, #12
 8006e36:	4619      	mov	r1, r3
 8006e38:	4828      	ldr	r0, [pc, #160]	; (8006edc <hci_send_req+0xf8>)
 8006e3a:	f000 fcd0 	bl	80077de <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	7a5b      	ldrb	r3, [r3, #9]
 8006e42:	2b0f      	cmp	r3, #15
 8006e44:	d114      	bne.n	8006e70 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	330b      	adds	r3, #11
 8006e4a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	885b      	ldrh	r3, [r3, #2]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8bba      	ldrh	r2, [r7, #28]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d104      	bne.n	8006e62 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	7812      	ldrb	r2, [r2, #0]
 8006e60:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d027      	beq.n	8006eba <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e024      	b.n	8006eba <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	330b      	adds	r3, #11
 8006e74:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	8bba      	ldrh	r2, [r7, #28]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d114      	bne.n	8006eae <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	7a9b      	ldrb	r3, [r3, #10]
 8006e88:	3b03      	subs	r3, #3
 8006e8a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	7dfb      	ldrb	r3, [r7, #23]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	bfa8      	it	ge
 8006e96:	461a      	movge	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6918      	ldr	r0, [r3, #16]
 8006ea0:	69bb      	ldr	r3, [r7, #24]
 8006ea2:	1cd9      	adds	r1, r3, #3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f002 f9d1 	bl	8009250 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006eba:	4808      	ldr	r0, [pc, #32]	; (8006edc <hci_send_req+0xf8>)
 8006ebc:	f000 fc00 	bl	80076c0 <LST_is_empty>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0b5      	beq.n	8006e32 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006ec6:	7ffb      	ldrb	r3, [r7, #31]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d0ad      	beq.n	8006e28 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006ecc:	2001      	movs	r0, #1
 8006ece:	f000 f85d 	bl	8006f8c <NotifyCmdStatus>

  return 0;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3720      	adds	r7, #32
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	200002e0 	.word	0x200002e0

08006ee0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006ee8:	480f      	ldr	r0, [pc, #60]	; (8006f28 <TlInit+0x48>)
 8006eea:	f000 fbd9 	bl	80076a0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006eee:	4a0f      	ldr	r2, [pc, #60]	; (8006f2c <TlInit+0x4c>)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006ef4:	480e      	ldr	r0, [pc, #56]	; (8006f30 <TlInit+0x50>)
 8006ef6:	f000 fbd3 	bl	80076a0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006efa:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <TlInit+0x54>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006f00:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <TlInit+0x58>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00a      	beq.n	8006f1e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <TlInit+0x5c>)
 8006f0e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006f10:	4b09      	ldr	r3, [pc, #36]	; (8006f38 <TlInit+0x58>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f107 0208 	add.w	r2, r7, #8
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
  }

  return;
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
}
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	200002e0 	.word	0x200002e0
 8006f2c:	200001b4 	.word	0x200001b4
 8006f30:	200001ac 	.word	0x200001ac
 8006f34:	200001b8 	.word	0x200001b8
 8006f38:	200002c0 	.word	0x200002c0
 8006f3c:	08006fcd 	.word	0x08006fcd

08006f40 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	603a      	str	r2, [r7, #0]
 8006f4a:	80fb      	strh	r3, [r7, #6]
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006f50:	4b0c      	ldr	r3, [pc, #48]	; (8006f84 <SendCmd+0x44>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	88fa      	ldrh	r2, [r7, #6]
 8006f56:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <SendCmd+0x44>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	797a      	ldrb	r2, [r7, #5]
 8006f60:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006f62:	4b08      	ldr	r3, [pc, #32]	; (8006f84 <SendCmd+0x44>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	797a      	ldrb	r2, [r7, #5]
 8006f6a:	6839      	ldr	r1, [r7, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f002 f96f 	bl	8009250 <memcpy>

  hciContext.io.Send(0,0);
 8006f72:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <SendCmd+0x48>)
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	2100      	movs	r1, #0
 8006f78:	2000      	movs	r0, #0
 8006f7a:	4798      	blx	r3

  return;
 8006f7c:	bf00      	nop
}
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	200001b4 	.word	0x200001b4
 8006f88:	200002c0 	.word	0x200002c0

08006f8c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d108      	bne.n	8006fae <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006f9c:	4b0a      	ldr	r3, [pc, #40]	; (8006fc8 <NotifyCmdStatus+0x3c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00d      	beq.n	8006fc0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006fa4:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <NotifyCmdStatus+0x3c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2000      	movs	r0, #0
 8006faa:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006fac:	e008      	b.n	8006fc0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <NotifyCmdStatus+0x3c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d004      	beq.n	8006fc0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006fb6:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <NotifyCmdStatus+0x3c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2001      	movs	r0, #1
 8006fbc:	4798      	blx	r3
  return;
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
}
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	200002e8 	.word	0x200002e8

08006fcc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	7a5b      	ldrb	r3, [r3, #9]
 8006fd8:	2b0f      	cmp	r3, #15
 8006fda:	d003      	beq.n	8006fe4 <TlEvtReceived+0x18>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7a5b      	ldrb	r3, [r3, #9]
 8006fe0:	2b0e      	cmp	r3, #14
 8006fe2:	d107      	bne.n	8006ff4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006fe4:	6879      	ldr	r1, [r7, #4]
 8006fe6:	4809      	ldr	r0, [pc, #36]	; (800700c <TlEvtReceived+0x40>)
 8006fe8:	f000 fbb2 	bl	8007750 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006fec:	2000      	movs	r0, #0
 8006fee:	f001 fabc 	bl	800856a <hci_cmd_resp_release>
 8006ff2:	e006      	b.n	8007002 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	4806      	ldr	r0, [pc, #24]	; (8007010 <TlEvtReceived+0x44>)
 8006ff8:	f000 fbaa 	bl	8007750 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006ffc:	4804      	ldr	r0, [pc, #16]	; (8007010 <TlEvtReceived+0x44>)
 8006ffe:	f001 faa8 	bl	8008552 <hci_notify_asynch_evt>
  }

  return;
 8007002:	bf00      	nop
}
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	200002e0 	.word	0x200002e0
 8007010:	200001ac 	.word	0x200001ac

08007014 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a05      	ldr	r2, [pc, #20]	; (8007034 <hci_register_io_bus+0x20>)
 8007020:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a04      	ldr	r2, [pc, #16]	; (8007038 <hci_register_io_bus+0x24>)
 8007026:	611a      	str	r2, [r3, #16]

  return;
 8007028:	bf00      	nop
}
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr
 8007034:	08007ac5 	.word	0x08007ac5
 8007038:	08007b2d 	.word	0x08007b2d

0800703c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	68b9      	ldr	r1, [r7, #8]
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f002 f8ff 	bl	8009250 <memcpy>
 8007052:	4603      	mov	r3, r0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	68b9      	ldr	r1, [r7, #8]
 800706c:	68f8      	ldr	r0, [r7, #12]
 800706e:	f002 f8fd 	bl	800926c <memset>
 8007072:	4603      	mov	r3, r0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	4603      	mov	r3, r0
 8007084:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <OTP_Read+0x48>)
 8007088:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800708a:	e002      	b.n	8007092 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3b08      	subs	r3, #8
 8007090:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3307      	adds	r3, #7
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	79fa      	ldrb	r2, [r7, #7]
 800709a:	429a      	cmp	r2, r3
 800709c:	d003      	beq.n	80070a6 <OTP_Read+0x2a>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <OTP_Read+0x4c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d1f2      	bne.n	800708c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3307      	adds	r3, #7
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	79fa      	ldrb	r2, [r7, #7]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d001      	beq.n	80070b6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80070b6:	68fb      	ldr	r3, [r7, #12]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	1fff73f8 	.word	0x1fff73f8
 80070c8:	1fff7000 	.word	0x1fff7000

080070cc <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b08a      	sub	sp, #40	; 0x28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3301      	adds	r3, #1
 80070de:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 80070e0:	6a3b      	ldr	r3, [r7, #32]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2bff      	cmp	r3, #255	; 0xff
 80070e6:	d165      	bne.n	80071b4 <PeerToPeer_Event_Handler+0xe8>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	3302      	adds	r3, #2
 80070ec:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	f640 4301 	movw	r3, #3073	; 0xc01
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d156      	bne.n	80071ac <PeerToPeer_Event_Handler+0xe0>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	3302      	adds	r3, #2
 8007102:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	885b      	ldrh	r3, [r3, #2]
 8007108:	b29b      	uxth	r3, r3
 800710a:	461a      	mov	r2, r3
 800710c:	4b2d      	ldr	r3, [pc, #180]	; (80071c4 <PeerToPeer_Event_Handler+0xf8>)
 800710e:	889b      	ldrh	r3, [r3, #4]
 8007110:	3302      	adds	r3, #2
 8007112:	429a      	cmp	r2, r3
 8007114:	d118      	bne.n	8007148 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8007116:	2301      	movs	r3, #1
 8007118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	7a1b      	ldrb	r3, [r3, #8]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b00      	cmp	r3, #0
 8007126:	d007      	beq.n	8007138 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8007128:	2300      	movs	r3, #0
 800712a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800712c:	f107 0308 	add.w	r3, r7, #8
 8007130:	4618      	mov	r0, r3
 8007132:	f001 fa67 	bl	8008604 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8007136:	e03b      	b.n	80071b0 <PeerToPeer_Event_Handler+0xe4>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8007138:	2301      	movs	r3, #1
 800713a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800713c:	f107 0308 	add.w	r3, r7, #8
 8007140:	4618      	mov	r0, r3
 8007142:	f001 fa5f 	bl	8008604 <P2PS_STM_App_Notification>
        break;
 8007146:	e033      	b.n	80071b0 <PeerToPeer_Event_Handler+0xe4>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PReadServerToClientCharHdle + 1)) {
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	885b      	ldrh	r3, [r3, #2]
 800714c:	b29b      	uxth	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	4b1c      	ldr	r3, [pc, #112]	; (80071c4 <PeerToPeer_Event_Handler+0xf8>)
 8007152:	88db      	ldrh	r3, [r3, #6]
 8007154:	3301      	adds	r3, #1
 8007156:	429a      	cmp	r2, r3
 8007158:	d10f      	bne.n	800717a <PeerToPeer_Event_Handler+0xae>
            	Notification.P2P_Evt_Opcode = P2PS_STM_READ_EVT;
 800715a:	2302      	movs	r3, #2
 800715c:	723b      	strb	r3, [r7, #8]
            	Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	b29b      	uxth	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	743b      	strb	r3, [r7, #16]
            	Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	3308      	adds	r3, #8
 800716c:	60fb      	str	r3, [r7, #12]
            	P2PS_STM_App_Notification(&Notification);
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	4618      	mov	r0, r3
 8007174:	f001 fa46 	bl	8008604 <P2PS_STM_App_Notification>
        break;
 8007178:	e01a      	b.n	80071b0 <PeerToPeer_Event_Handler+0xe4>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	885b      	ldrh	r3, [r3, #2]
 800717e:	b29b      	uxth	r3, r3
 8007180:	461a      	mov	r2, r3
 8007182:	4b10      	ldr	r3, [pc, #64]	; (80071c4 <PeerToPeer_Event_Handler+0xf8>)
 8007184:	885b      	ldrh	r3, [r3, #2]
 8007186:	3301      	adds	r3, #1
 8007188:	429a      	cmp	r2, r3
 800718a:	d111      	bne.n	80071b0 <PeerToPeer_Event_Handler+0xe4>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800718c:	2303      	movs	r3, #3
 800718e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	88db      	ldrh	r3, [r3, #6]
 8007194:	b29b      	uxth	r3, r3
 8007196:	b2db      	uxtb	r3, r3
 8007198:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	3308      	adds	r3, #8
 800719e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80071a0:	f107 0308 	add.w	r3, r7, #8
 80071a4:	4618      	mov	r0, r3
 80071a6:	f001 fa2d 	bl	8008604 <P2PS_STM_App_Notification>
        break;
 80071aa:	e001      	b.n	80071b0 <PeerToPeer_Event_Handler+0xe4>

        default:
          break;
 80071ac:	bf00      	nop
 80071ae:	e002      	b.n	80071b6 <PeerToPeer_Event_Handler+0xea>
        break;
 80071b0:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80071b2:	e000      	b.n	80071b6 <PeerToPeer_Event_Handler+0xea>

    default:
      break;
 80071b4:	bf00      	nop
  }

  return(return_value);
 80071b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80071ba:	4618      	mov	r0, r3
 80071bc:	3728      	adds	r7, #40	; 0x28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	200001bc 	.word	0x200001bc

080071c8 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b08a      	sub	sp, #40	; 0x28
 80071cc:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80071ce:	4864      	ldr	r0, [pc, #400]	; (8007360 <P2PS_STM_Init+0x198>)
 80071d0:	f000 fbca 	bl	8007968 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80071d4:	238f      	movs	r3, #143	; 0x8f
 80071d6:	703b      	strb	r3, [r7, #0]
 80071d8:	23e5      	movs	r3, #229	; 0xe5
 80071da:	707b      	strb	r3, [r7, #1]
 80071dc:	23b3      	movs	r3, #179	; 0xb3
 80071de:	70bb      	strb	r3, [r7, #2]
 80071e0:	23d5      	movs	r3, #213	; 0xd5
 80071e2:	70fb      	strb	r3, [r7, #3]
 80071e4:	232e      	movs	r3, #46	; 0x2e
 80071e6:	713b      	strb	r3, [r7, #4]
 80071e8:	237f      	movs	r3, #127	; 0x7f
 80071ea:	717b      	strb	r3, [r7, #5]
 80071ec:	234a      	movs	r3, #74	; 0x4a
 80071ee:	71bb      	strb	r3, [r7, #6]
 80071f0:	2398      	movs	r3, #152	; 0x98
 80071f2:	71fb      	strb	r3, [r7, #7]
 80071f4:	232a      	movs	r3, #42	; 0x2a
 80071f6:	723b      	strb	r3, [r7, #8]
 80071f8:	2348      	movs	r3, #72	; 0x48
 80071fa:	727b      	strb	r3, [r7, #9]
 80071fc:	237a      	movs	r3, #122	; 0x7a
 80071fe:	72bb      	strb	r3, [r7, #10]
 8007200:	23cc      	movs	r3, #204	; 0xcc
 8007202:	72fb      	strb	r3, [r7, #11]
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	733b      	strb	r3, [r7, #12]
 8007208:	23fe      	movs	r3, #254	; 0xfe
 800720a:	737b      	strb	r3, [r7, #13]
 800720c:	2300      	movs	r3, #0
 800720e:	73bb      	strb	r3, [r7, #14]
 8007210:	2300      	movs	r3, #0
 8007212:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8007214:	4639      	mov	r1, r7
 8007216:	4b53      	ldr	r3, [pc, #332]	; (8007364 <P2PS_STM_Init+0x19c>)
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	2308      	movs	r3, #8
 800721c:	2201      	movs	r2, #1
 800721e:	2002      	movs	r0, #2
 8007220:	f7ff f959 	bl	80064d6 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8007224:	2319      	movs	r3, #25
 8007226:	703b      	strb	r3, [r7, #0]
 8007228:	23ed      	movs	r3, #237	; 0xed
 800722a:	707b      	strb	r3, [r7, #1]
 800722c:	2382      	movs	r3, #130	; 0x82
 800722e:	70bb      	strb	r3, [r7, #2]
 8007230:	23ae      	movs	r3, #174	; 0xae
 8007232:	70fb      	strb	r3, [r7, #3]
 8007234:	23ed      	movs	r3, #237	; 0xed
 8007236:	713b      	strb	r3, [r7, #4]
 8007238:	2321      	movs	r3, #33	; 0x21
 800723a:	717b      	strb	r3, [r7, #5]
 800723c:	234c      	movs	r3, #76	; 0x4c
 800723e:	71bb      	strb	r3, [r7, #6]
 8007240:	239d      	movs	r3, #157	; 0x9d
 8007242:	71fb      	strb	r3, [r7, #7]
 8007244:	2341      	movs	r3, #65	; 0x41
 8007246:	723b      	strb	r3, [r7, #8]
 8007248:	2345      	movs	r3, #69	; 0x45
 800724a:	727b      	strb	r3, [r7, #9]
 800724c:	2322      	movs	r3, #34	; 0x22
 800724e:	72bb      	strb	r3, [r7, #10]
 8007250:	238e      	movs	r3, #142	; 0x8e
 8007252:	72fb      	strb	r3, [r7, #11]
 8007254:	2341      	movs	r3, #65	; 0x41
 8007256:	733b      	strb	r3, [r7, #12]
 8007258:	23fe      	movs	r3, #254	; 0xfe
 800725a:	737b      	strb	r3, [r7, #13]
 800725c:	2300      	movs	r3, #0
 800725e:	73bb      	strb	r3, [r7, #14]
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007264:	4b3f      	ldr	r3, [pc, #252]	; (8007364 <P2PS_STM_Init+0x19c>)
 8007266:	8818      	ldrh	r0, [r3, #0]
 8007268:	463a      	mov	r2, r7
 800726a:	4b3f      	ldr	r3, [pc, #252]	; (8007368 <P2PS_STM_Init+0x1a0>)
 800726c:	9305      	str	r3, [sp, #20]
 800726e:	2301      	movs	r3, #1
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	230a      	movs	r3, #10
 8007274:	9303      	str	r3, [sp, #12]
 8007276:	2301      	movs	r3, #1
 8007278:	9302      	str	r3, [sp, #8]
 800727a:	2300      	movs	r3, #0
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	2306      	movs	r3, #6
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	2302      	movs	r3, #2
 8007284:	2102      	movs	r1, #2
 8007286:	f7ff f9d5 	bl	8006634 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800728a:	2319      	movs	r3, #25
 800728c:	703b      	strb	r3, [r7, #0]
 800728e:	23ed      	movs	r3, #237	; 0xed
 8007290:	707b      	strb	r3, [r7, #1]
 8007292:	2382      	movs	r3, #130	; 0x82
 8007294:	70bb      	strb	r3, [r7, #2]
 8007296:	23ae      	movs	r3, #174	; 0xae
 8007298:	70fb      	strb	r3, [r7, #3]
 800729a:	23ed      	movs	r3, #237	; 0xed
 800729c:	713b      	strb	r3, [r7, #4]
 800729e:	2321      	movs	r3, #33	; 0x21
 80072a0:	717b      	strb	r3, [r7, #5]
 80072a2:	234c      	movs	r3, #76	; 0x4c
 80072a4:	71bb      	strb	r3, [r7, #6]
 80072a6:	239d      	movs	r3, #157	; 0x9d
 80072a8:	71fb      	strb	r3, [r7, #7]
 80072aa:	2341      	movs	r3, #65	; 0x41
 80072ac:	723b      	strb	r3, [r7, #8]
 80072ae:	2345      	movs	r3, #69	; 0x45
 80072b0:	727b      	strb	r3, [r7, #9]
 80072b2:	2322      	movs	r3, #34	; 0x22
 80072b4:	72bb      	strb	r3, [r7, #10]
 80072b6:	238e      	movs	r3, #142	; 0x8e
 80072b8:	72fb      	strb	r3, [r7, #11]
 80072ba:	2342      	movs	r3, #66	; 0x42
 80072bc:	733b      	strb	r3, [r7, #12]
 80072be:	23fe      	movs	r3, #254	; 0xfe
 80072c0:	737b      	strb	r3, [r7, #13]
 80072c2:	2300      	movs	r3, #0
 80072c4:	73bb      	strb	r3, [r7, #14]
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80072ca:	4b26      	ldr	r3, [pc, #152]	; (8007364 <P2PS_STM_Init+0x19c>)
 80072cc:	8818      	ldrh	r0, [r3, #0]
 80072ce:	463a      	mov	r2, r7
 80072d0:	4b26      	ldr	r3, [pc, #152]	; (800736c <P2PS_STM_Init+0x1a4>)
 80072d2:	9305      	str	r3, [sp, #20]
 80072d4:	2301      	movs	r3, #1
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	230a      	movs	r3, #10
 80072da:	9303      	str	r3, [sp, #12]
 80072dc:	2301      	movs	r3, #1
 80072de:	9302      	str	r3, [sp, #8]
 80072e0:	2300      	movs	r3, #0
 80072e2:	9301      	str	r3, [sp, #4]
 80072e4:	2310      	movs	r3, #16
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	2304      	movs	r3, #4
 80072ea:	2102      	movs	r1, #2
 80072ec:	f7ff f9a2 	bl	8006634 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PNotifyServerToClientCharHdle));

    /**
	 *   Add Dummy Data Characteristic
	 */
	COPY_P2P_READ_UUID(uuid16.Char_UUID_128);
 80072f0:	2319      	movs	r3, #25
 80072f2:	703b      	strb	r3, [r7, #0]
 80072f4:	23ed      	movs	r3, #237	; 0xed
 80072f6:	707b      	strb	r3, [r7, #1]
 80072f8:	2382      	movs	r3, #130	; 0x82
 80072fa:	70bb      	strb	r3, [r7, #2]
 80072fc:	23ae      	movs	r3, #174	; 0xae
 80072fe:	70fb      	strb	r3, [r7, #3]
 8007300:	23ed      	movs	r3, #237	; 0xed
 8007302:	713b      	strb	r3, [r7, #4]
 8007304:	2321      	movs	r3, #33	; 0x21
 8007306:	717b      	strb	r3, [r7, #5]
 8007308:	234c      	movs	r3, #76	; 0x4c
 800730a:	71bb      	strb	r3, [r7, #6]
 800730c:	239d      	movs	r3, #157	; 0x9d
 800730e:	71fb      	strb	r3, [r7, #7]
 8007310:	2341      	movs	r3, #65	; 0x41
 8007312:	723b      	strb	r3, [r7, #8]
 8007314:	2345      	movs	r3, #69	; 0x45
 8007316:	727b      	strb	r3, [r7, #9]
 8007318:	2322      	movs	r3, #34	; 0x22
 800731a:	72bb      	strb	r3, [r7, #10]
 800731c:	238e      	movs	r3, #142	; 0x8e
 800731e:	72fb      	strb	r3, [r7, #11]
 8007320:	2343      	movs	r3, #67	; 0x43
 8007322:	733b      	strb	r3, [r7, #12]
 8007324:	23fe      	movs	r3, #254	; 0xfe
 8007326:	737b      	strb	r3, [r7, #13]
 8007328:	2300      	movs	r3, #0
 800732a:	73bb      	strb	r3, [r7, #14]
 800732c:	2300      	movs	r3, #0
 800732e:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007330:	4b0c      	ldr	r3, [pc, #48]	; (8007364 <P2PS_STM_Init+0x19c>)
 8007332:	8818      	ldrh	r0, [r3, #0]
 8007334:	463a      	mov	r2, r7
 8007336:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <P2PS_STM_Init+0x1a8>)
 8007338:	9305      	str	r3, [sp, #20]
 800733a:	2301      	movs	r3, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	230a      	movs	r3, #10
 8007340:	9303      	str	r3, [sp, #12]
 8007342:	2301      	movs	r3, #1
 8007344:	9302      	str	r3, [sp, #8]
 8007346:	2300      	movs	r3, #0
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	2306      	movs	r3, #6
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	2302      	movs	r3, #2
 8007350:	2102      	movs	r1, #2
 8007352:	f7ff f96f 	bl	8006634 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8007356:	bf00      	nop
}
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	080070cd 	.word	0x080070cd
 8007364:	200001bc 	.word	0x200001bc
 8007368:	200001be 	.word	0x200001be
 800736c:	200001c0 	.word	0x200001c0
 8007370:	200001c2 	.word	0x200001c2

08007374 <P2PS_STM_App_Update_Char>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 * changed to int32_t -may need to change back if timestamp is not working. Would then need to separate timestamp into bytes
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af02      	add	r7, sp, #8
 800737a:	4603      	mov	r3, r0
 800737c:	6039      	str	r1, [r7, #0]
 800737e:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8007380:	2342      	movs	r3, #66	; 0x42
 8007382:	73fb      	strb	r3, [r7, #15]

  switch(UUID)
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800738a:	4293      	cmp	r3, r2
 800738c:	d004      	beq.n	8007398 <P2PS_STM_App_Update_Char+0x24>
 800738e:	f64f 6243 	movw	r2, #65091	; 0xfe43
 8007392:	4293      	cmp	r3, r2
 8007394:	d00d      	beq.n	80073b2 <P2PS_STM_App_Update_Char+0x3e>
                                 (uint8_t *)  pPayload);

          break;

    default:
      break;
 8007396:	e019      	b.n	80073cc <P2PS_STM_App_Update_Char+0x58>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007398:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <P2PS_STM_App_Update_Char+0x64>)
 800739a:	8818      	ldrh	r0, [r3, #0]
 800739c:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <P2PS_STM_App_Update_Char+0x64>)
 800739e:	8899      	ldrh	r1, [r3, #4]
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	2304      	movs	r3, #4
 80073a6:	2200      	movs	r2, #0
 80073a8:	f7ff fa2e 	bl	8006808 <aci_gatt_update_char_value>
 80073ac:	4603      	mov	r3, r0
 80073ae:	73fb      	strb	r3, [r7, #15]
      break;
 80073b0:	e00c      	b.n	80073cc <P2PS_STM_App_Update_Char+0x58>
         result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <P2PS_STM_App_Update_Char+0x64>)
 80073b4:	8818      	ldrh	r0, [r3, #0]
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <P2PS_STM_App_Update_Char+0x64>)
 80073b8:	88d9      	ldrh	r1, [r3, #6]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	2302      	movs	r3, #2
 80073c0:	2200      	movs	r2, #0
 80073c2:	f7ff fa21 	bl	8006808 <aci_gatt_update_char_value>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
          break;
 80073ca:	bf00      	nop
  }

  return result;
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	200001bc 	.word	0x200001bc

080073dc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80073e4:	f107 030c 	add.w	r3, r7, #12
 80073e8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	2124      	movs	r1, #36	; 0x24
 80073f4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80073f8:	f000 f888 	bl	800750c <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80073fc:	69fb      	ldr	r3, [r7, #28]
 80073fe:	330b      	adds	r3, #11
 8007400:	78db      	ldrb	r3, [r3, #3]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b088      	sub	sp, #32
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007412:	f107 030c 	add.w	r3, r7, #12
 8007416:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	210f      	movs	r1, #15
 8007422:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007426:	f000 f871 	bl	800750c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	330b      	adds	r3, #11
 800742e:	78db      	ldrb	r3, [r3, #3]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3720      	adds	r7, #32
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	4a08      	ldr	r2, [pc, #32]	; (8007468 <shci_init+0x30>)
 8007448:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800744a:	4a08      	ldr	r2, [pc, #32]	; (800746c <shci_init+0x34>)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007450:	4806      	ldr	r0, [pc, #24]	; (800746c <shci_init+0x34>)
 8007452:	f000 f911 	bl	8007678 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4618      	mov	r0, r3
 800745c:	f000 f894 	bl	8007588 <TlInit>

  return;
 8007460:	bf00      	nop
}
 8007462:	3708      	adds	r7, #8
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	2000030c 	.word	0x2000030c
 800746c:	200002ec 	.word	0x200002ec

08007470 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007476:	4822      	ldr	r0, [pc, #136]	; (8007500 <shci_user_evt_proc+0x90>)
 8007478:	f000 f922 	bl	80076c0 <LST_is_empty>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d12b      	bne.n	80074da <shci_user_evt_proc+0x6a>
 8007482:	4b20      	ldr	r3, [pc, #128]	; (8007504 <shci_user_evt_proc+0x94>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d027      	beq.n	80074da <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800748a:	f107 030c 	add.w	r3, r7, #12
 800748e:	4619      	mov	r1, r3
 8007490:	481b      	ldr	r0, [pc, #108]	; (8007500 <shci_user_evt_proc+0x90>)
 8007492:	f000 f9a4 	bl	80077de <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007496:	4b1c      	ldr	r3, [pc, #112]	; (8007508 <shci_user_evt_proc+0x98>)
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00c      	beq.n	80074b8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80074a2:	2301      	movs	r3, #1
 80074a4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <shci_user_evt_proc+0x98>)
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	1d3a      	adds	r2, r7, #4
 80074ac:	4610      	mov	r0, r2
 80074ae:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80074b0:	793a      	ldrb	r2, [r7, #4]
 80074b2:	4b14      	ldr	r3, [pc, #80]	; (8007504 <shci_user_evt_proc+0x94>)
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	e002      	b.n	80074be <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80074b8:	4b12      	ldr	r3, [pc, #72]	; (8007504 <shci_user_evt_proc+0x94>)
 80074ba:	2201      	movs	r2, #1
 80074bc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80074be:	4b11      	ldr	r3, [pc, #68]	; (8007504 <shci_user_evt_proc+0x94>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fc3f 	bl	8007d4c <TL_MM_EvtDone>
 80074ce:	e004      	b.n	80074da <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4619      	mov	r1, r3
 80074d4:	480a      	ldr	r0, [pc, #40]	; (8007500 <shci_user_evt_proc+0x90>)
 80074d6:	f000 f915 	bl	8007704 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80074da:	4809      	ldr	r0, [pc, #36]	; (8007500 <shci_user_evt_proc+0x90>)
 80074dc:	f000 f8f0 	bl	80076c0 <LST_is_empty>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d107      	bne.n	80074f6 <shci_user_evt_proc+0x86>
 80074e6:	4b07      	ldr	r3, [pc, #28]	; (8007504 <shci_user_evt_proc+0x94>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80074ee:	4804      	ldr	r0, [pc, #16]	; (8007500 <shci_user_evt_proc+0x90>)
 80074f0:	f7f9 f8d8 	bl	80006a4 <shci_notify_asynch_evt>
  }


  return;
 80074f4:	bf00      	nop
 80074f6:	bf00      	nop
}
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	200001e8 	.word	0x200001e8
 8007504:	200001f8 	.word	0x200001f8
 8007508:	200002ec 	.word	0x200002ec

0800750c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	60ba      	str	r2, [r7, #8]
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	4603      	mov	r3, r0
 8007518:	81fb      	strh	r3, [r7, #14]
 800751a:	460b      	mov	r3, r1
 800751c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800751e:	2000      	movs	r0, #0
 8007520:	f000 f864 	bl	80075ec <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007524:	4b16      	ldr	r3, [pc, #88]	; (8007580 <shci_send+0x74>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	89fa      	ldrh	r2, [r7, #14]
 800752a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800752e:	4b14      	ldr	r3, [pc, #80]	; (8007580 <shci_send+0x74>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	7b7a      	ldrb	r2, [r7, #13]
 8007534:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007536:	4b12      	ldr	r3, [pc, #72]	; (8007580 <shci_send+0x74>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	330c      	adds	r3, #12
 800753c:	7b7a      	ldrb	r2, [r7, #13]
 800753e:	68b9      	ldr	r1, [r7, #8]
 8007540:	4618      	mov	r0, r3
 8007542:	f001 fe85 	bl	8009250 <memcpy>

  shciContext.io.Send(0,0);
 8007546:	4b0f      	ldr	r3, [pc, #60]	; (8007584 <shci_send+0x78>)
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2100      	movs	r1, #0
 800754c:	2000      	movs	r0, #0
 800754e:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007550:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007554:	f7f9 f8bd 	bl	80006d2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f103 0008 	add.w	r0, r3, #8
 800755e:	4b08      	ldr	r3, [pc, #32]	; (8007580 <shci_send+0x74>)
 8007560:	6819      	ldr	r1, [r3, #0]
 8007562:	4b07      	ldr	r3, [pc, #28]	; (8007580 <shci_send+0x74>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	789b      	ldrb	r3, [r3, #2]
 8007568:	3303      	adds	r3, #3
 800756a:	461a      	mov	r2, r3
 800756c:	f001 fe70 	bl	8009250 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007570:	2001      	movs	r0, #1
 8007572:	f000 f83b 	bl	80075ec <Cmd_SetStatus>

  return;
 8007576:	bf00      	nop
}
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	200001f4 	.word	0x200001f4
 8007584:	200002ec 	.word	0x200002ec

08007588 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007590:	4a10      	ldr	r2, [pc, #64]	; (80075d4 <TlInit+0x4c>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007596:	4810      	ldr	r0, [pc, #64]	; (80075d8 <TlInit+0x50>)
 8007598:	f000 f882 	bl	80076a0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800759c:	2001      	movs	r0, #1
 800759e:	f000 f825 	bl	80075ec <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80075a2:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <TlInit+0x54>)
 80075a4:	2201      	movs	r2, #1
 80075a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80075a8:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <TlInit+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00c      	beq.n	80075ca <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <TlInit+0x5c>)
 80075b6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <TlInit+0x60>)
 80075ba:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80075bc:	4b08      	ldr	r3, [pc, #32]	; (80075e0 <TlInit+0x58>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f107 020c 	add.w	r2, r7, #12
 80075c4:	4610      	mov	r0, r2
 80075c6:	4798      	blx	r3
  }

  return;
 80075c8:	bf00      	nop
 80075ca:	bf00      	nop
}
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200001f4 	.word	0x200001f4
 80075d8:	200001e8 	.word	0x200001e8
 80075dc:	200001f8 	.word	0x200001f8
 80075e0:	200002ec 	.word	0x200002ec
 80075e4:	0800763d 	.word	0x0800763d
 80075e8:	08007655 	.word	0x08007655

080075ec <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10b      	bne.n	8007614 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80075fc:	4b0d      	ldr	r3, [pc, #52]	; (8007634 <Cmd_SetStatus+0x48>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <Cmd_SetStatus+0x48>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2000      	movs	r0, #0
 800760a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800760c:	4b0a      	ldr	r3, [pc, #40]	; (8007638 <Cmd_SetStatus+0x4c>)
 800760e:	2200      	movs	r2, #0
 8007610:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007612:	e00b      	b.n	800762c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007614:	4b08      	ldr	r3, [pc, #32]	; (8007638 <Cmd_SetStatus+0x4c>)
 8007616:	2201      	movs	r2, #1
 8007618:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800761a:	4b06      	ldr	r3, [pc, #24]	; (8007634 <Cmd_SetStatus+0x48>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d004      	beq.n	800762c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007622:	4b04      	ldr	r3, [pc, #16]	; (8007634 <Cmd_SetStatus+0x48>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2001      	movs	r0, #1
 8007628:	4798      	blx	r3
  return;
 800762a:	bf00      	nop
 800762c:	bf00      	nop
}
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	2000030c 	.word	0x2000030c
 8007638:	200001f0 	.word	0x200001f0

0800763c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007644:	2000      	movs	r0, #0
 8007646:	f7f9 f839 	bl	80006bc <shci_cmd_resp_release>

  return;
 800764a:	bf00      	nop
}
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	4805      	ldr	r0, [pc, #20]	; (8007674 <TlUserEvtReceived+0x20>)
 8007660:	f000 f876 	bl	8007750 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007664:	4803      	ldr	r0, [pc, #12]	; (8007674 <TlUserEvtReceived+0x20>)
 8007666:	f7f9 f81d 	bl	80006a4 <shci_notify_asynch_evt>

  return;
 800766a:	bf00      	nop
}
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	200001e8 	.word	0x200001e8

08007678 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007678:	b480      	push	{r7}
 800767a:	b083      	sub	sp, #12
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a05      	ldr	r2, [pc, #20]	; (8007698 <shci_register_io_bus+0x20>)
 8007684:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a04      	ldr	r2, [pc, #16]	; (800769c <shci_register_io_bus+0x24>)
 800768a:	611a      	str	r2, [r3, #16]

  return;
 800768c:	bf00      	nop
}
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	08007bd9 	.word	0x08007bd9
 800769c:	08007c2d 	.word	0x08007c2d

080076a0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	687a      	ldr	r2, [r7, #4]
 80076ac:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	605a      	str	r2, [r3, #4]
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b087      	sub	sp, #28
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076c8:	f3ef 8310 	mrs	r3, PRIMASK
 80076cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80076ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80076d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80076d2:	b672      	cpsid	i
}
 80076d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d102      	bne.n	80076e6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80076e0:	2301      	movs	r3, #1
 80076e2:	75fb      	strb	r3, [r7, #23]
 80076e4:	e001      	b.n	80076ea <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	75fb      	strb	r3, [r7, #23]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f383 8810 	msr	PRIMASK, r3
}
 80076f4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800770e:	f3ef 8310 	mrs	r3, PRIMASK
 8007712:	60fb      	str	r3, [r7, #12]
  return(result);
 8007714:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007718:	b672      	cpsid	i
}
 800771a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	683a      	ldr	r2, [r7, #0]
 800772e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	605a      	str	r2, [r3, #4]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f383 8810 	msr	PRIMASK, r3
}
 8007742:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007744:	bf00      	nop
 8007746:	371c      	adds	r7, #28
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007750:	b480      	push	{r7}
 8007752:	b087      	sub	sp, #28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800775a:	f3ef 8310 	mrs	r3, PRIMASK
 800775e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007760:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007764:	b672      	cpsid	i
}
 8007766:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	683a      	ldr	r2, [r7, #0]
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f383 8810 	msr	PRIMASK, r3
}
 800778e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a4:	f3ef 8310 	mrs	r3, PRIMASK
 80077a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80077aa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80077ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80077ae:	b672      	cpsid	i
}
 80077b0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	6812      	ldr	r2, [r2, #0]
 80077ba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	6852      	ldr	r2, [r2, #4]
 80077c4:	605a      	str	r2, [r3, #4]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f383 8810 	msr	PRIMASK, r3
}
 80077d0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80077d2:	bf00      	nop
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
 80077e6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077e8:	f3ef 8310 	mrs	r3, PRIMASK
 80077ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80077ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80077f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80077f2:	b672      	cpsid	i
}
 80077f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff ffca 	bl	800779c <LST_remove_node>
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f383 8810 	msr	PRIMASK, r3
}
 8007812:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007814:	bf00      	nop
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  return;
 8007820:	bf00      	nop
}
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <BLS_Init>:

__weak void BLS_Init( void )
{
 800782a:	b480      	push	{r7}
 800782c:	af00      	add	r7, sp, #0
  return;
 800782e:	bf00      	nop
}
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  return;
 800783c:	bf00      	nop
}
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <DIS_Init>:
__weak void DIS_Init( void )
{
 8007846:	b480      	push	{r7}
 8007848:	af00      	add	r7, sp, #0
  return;
 800784a:	bf00      	nop
}
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8007854:	b480      	push	{r7}
 8007856:	af00      	add	r7, sp, #0
  return;
 8007858:	bf00      	nop
}
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007862:	b480      	push	{r7}
 8007864:	af00      	add	r7, sp, #0
  return;
 8007866:	bf00      	nop
}
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HRS_Init>:
__weak void HRS_Init( void )
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  return;
 8007874:	bf00      	nop
}
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HTS_Init>:
__weak void HTS_Init( void )
{
 800787e:	b480      	push	{r7}
 8007880:	af00      	add	r7, sp, #0
  return;
 8007882:	bf00      	nop
}
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <IAS_Init>:
__weak void IAS_Init( void )
{
 800788c:	b480      	push	{r7}
 800788e:	af00      	add	r7, sp, #0
  return;
 8007890:	bf00      	nop
}
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <LLS_Init>:
__weak void LLS_Init( void )
{
 800789a:	b480      	push	{r7}
 800789c:	af00      	add	r7, sp, #0
  return;
 800789e:	bf00      	nop
}
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <TPS_Init>:
__weak void TPS_Init( void )
{
 80078a8:	b480      	push	{r7}
 80078aa:	af00      	add	r7, sp, #0
  return;
 80078ac:	bf00      	nop
}
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 80078b6:	b480      	push	{r7}
 80078b8:	af00      	add	r7, sp, #0
  return;
 80078ba:	bf00      	nop
}
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  return;
 80078c8:	bf00      	nop
}
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <MESH_Init>:
__weak void MESH_Init( void )
{
 80078d2:	b480      	push	{r7}
 80078d4:	af00      	add	r7, sp, #0
  return;
 80078d6:	bf00      	nop
}
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 80078e0:	b480      	push	{r7}
 80078e2:	af00      	add	r7, sp, #0
  return;
 80078e4:	bf00      	nop
}
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 80078ee:	b480      	push	{r7}
 80078f0:	af00      	add	r7, sp, #0
  return;
 80078f2:	bf00      	nop
}
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <SVCCTL_Init+0x18>)
 8007902:	2200      	movs	r2, #0
 8007904:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007906:	4b04      	ldr	r3, [pc, #16]	; (8007918 <SVCCTL_Init+0x1c>)
 8007908:	2200      	movs	r2, #0
 800790a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800790c:	f000 f806 	bl	800791c <SVCCTL_SvcInit>

  return;
 8007910:	bf00      	nop
}
 8007912:	bd80      	pop	{r7, pc}
 8007914:	200001c4 	.word	0x200001c4
 8007918:	200001e4 	.word	0x200001e4

0800791c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	af00      	add	r7, sp, #0
  BAS_Init();
 8007920:	f7ff ff7c 	bl	800781c <BAS_Init>

  BLS_Init();
 8007924:	f7ff ff81 	bl	800782a <BLS_Init>

  CRS_STM_Init();
 8007928:	f7ff ff86 	bl	8007838 <CRS_STM_Init>

  DIS_Init();
 800792c:	f7ff ff8b 	bl	8007846 <DIS_Init>

  EDS_STM_Init();
 8007930:	f7ff ff90 	bl	8007854 <EDS_STM_Init>

  HIDS_Init();
 8007934:	f7ff ff95 	bl	8007862 <HIDS_Init>

  HRS_Init();
 8007938:	f7ff ff9a 	bl	8007870 <HRS_Init>

  HTS_Init();
 800793c:	f7ff ff9f 	bl	800787e <HTS_Init>

  IAS_Init();
 8007940:	f7ff ffa4 	bl	800788c <IAS_Init>

  LLS_Init();
 8007944:	f7ff ffa9 	bl	800789a <LLS_Init>

  TPS_Init();
 8007948:	f7ff ffae 	bl	80078a8 <TPS_Init>

  MOTENV_STM_Init();
 800794c:	f7ff ffb3 	bl	80078b6 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007950:	f7ff fc3a 	bl	80071c8 <P2PS_STM_Init>

  OTAS_STM_Init();
 8007954:	f7ff ffb6 	bl	80078c4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007958:	f7ff ffc2 	bl	80078e0 <BVOPUS_STM_Init>

  MESH_Init();
 800795c:	f7ff ffb9 	bl	80078d2 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007960:	f7ff ffc5 	bl	80078ee <SVCCTL_InitCustomSvc>
  
  return;
 8007964:	bf00      	nop
}
 8007966:	bd80      	pop	{r7, pc}

08007968 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007970:	4b09      	ldr	r3, [pc, #36]	; (8007998 <SVCCTL_RegisterSvcHandler+0x30>)
 8007972:	7f1b      	ldrb	r3, [r3, #28]
 8007974:	4619      	mov	r1, r3
 8007976:	4a08      	ldr	r2, [pc, #32]	; (8007998 <SVCCTL_RegisterSvcHandler+0x30>)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800797e:	4b06      	ldr	r3, [pc, #24]	; (8007998 <SVCCTL_RegisterSvcHandler+0x30>)
 8007980:	7f1b      	ldrb	r3, [r3, #28]
 8007982:	3301      	adds	r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	4b04      	ldr	r3, [pc, #16]	; (8007998 <SVCCTL_RegisterSvcHandler+0x30>)
 8007988:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800798a:	bf00      	nop
}
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	200001c4 	.word	0x200001c4

0800799c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3301      	adds	r3, #1
 80079a8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80079aa:	2300      	movs	r3, #0
 80079ac:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2bff      	cmp	r3, #255	; 0xff
 80079b4:	d125      	bne.n	8007a02 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	3302      	adds	r3, #2
 80079ba:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	881b      	ldrh	r3, [r3, #0]
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80079c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079ca:	d118      	bne.n	80079fe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80079cc:	2300      	movs	r3, #0
 80079ce:	757b      	strb	r3, [r7, #21]
 80079d0:	e00d      	b.n	80079ee <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80079d2:	7d7b      	ldrb	r3, [r7, #21]
 80079d4:	4a1a      	ldr	r2, [pc, #104]	; (8007a40 <SVCCTL_UserEvtRx+0xa4>)
 80079d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	4798      	blx	r3
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d108      	bne.n	80079fa <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80079e8:	7d7b      	ldrb	r3, [r7, #21]
 80079ea:	3301      	adds	r3, #1
 80079ec:	757b      	strb	r3, [r7, #21]
 80079ee:	4b14      	ldr	r3, [pc, #80]	; (8007a40 <SVCCTL_UserEvtRx+0xa4>)
 80079f0:	7f1b      	ldrb	r3, [r3, #28]
 80079f2:	7d7a      	ldrb	r2, [r7, #21]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d3ec      	bcc.n	80079d2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80079f8:	e002      	b.n	8007a00 <SVCCTL_UserEvtRx+0x64>
              break;
 80079fa:	bf00      	nop
          break;
 80079fc:	e000      	b.n	8007a00 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80079fe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007a00:	e000      	b.n	8007a04 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007a02:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d00f      	beq.n	8007a2a <SVCCTL_UserEvtRx+0x8e>
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	dc10      	bgt.n	8007a30 <SVCCTL_UserEvtRx+0x94>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <SVCCTL_UserEvtRx+0x7c>
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d006      	beq.n	8007a24 <SVCCTL_UserEvtRx+0x88>
 8007a16:	e00b      	b.n	8007a30 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 faeb 	bl	8007ff4 <SVCCTL_App_Notification>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	75bb      	strb	r3, [r7, #22]
      break;
 8007a22:	e008      	b.n	8007a36 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007a24:	2301      	movs	r3, #1
 8007a26:	75bb      	strb	r3, [r7, #22]
      break;
 8007a28:	e005      	b.n	8007a36 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	75bb      	strb	r3, [r7, #22]
      break;
 8007a2e:	e002      	b.n	8007a36 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007a30:	2301      	movs	r3, #1
 8007a32:	75bb      	strb	r3, [r7, #22]
      break;
 8007a34:	bf00      	nop
  }

  return (return_status);
 8007a36:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	200001c4 	.word	0x200001c4

08007a44 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8007a48:	f001 f878 	bl	8008b3c <HW_IPCC_Enable>

  return;
 8007a4c:	bf00      	nop
}
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <TL_Init>:


void TL_Init( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8007a54:	4b10      	ldr	r3, [pc, #64]	; (8007a98 <TL_Init+0x48>)
 8007a56:	4a11      	ldr	r2, [pc, #68]	; (8007a9c <TL_Init+0x4c>)
 8007a58:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8007a5a:	4b0f      	ldr	r3, [pc, #60]	; (8007a98 <TL_Init+0x48>)
 8007a5c:	4a10      	ldr	r2, [pc, #64]	; (8007aa0 <TL_Init+0x50>)
 8007a5e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007a60:	4b0d      	ldr	r3, [pc, #52]	; (8007a98 <TL_Init+0x48>)
 8007a62:	4a10      	ldr	r2, [pc, #64]	; (8007aa4 <TL_Init+0x54>)
 8007a64:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007a66:	4b0c      	ldr	r3, [pc, #48]	; (8007a98 <TL_Init+0x48>)
 8007a68:	4a0f      	ldr	r2, [pc, #60]	; (8007aa8 <TL_Init+0x58>)
 8007a6a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	; (8007a98 <TL_Init+0x48>)
 8007a6e:	4a0f      	ldr	r2, [pc, #60]	; (8007aac <TL_Init+0x5c>)
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007a72:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <TL_Init+0x48>)
 8007a74:	4a0e      	ldr	r2, [pc, #56]	; (8007ab0 <TL_Init+0x60>)
 8007a76:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007a78:	4b07      	ldr	r3, [pc, #28]	; (8007a98 <TL_Init+0x48>)
 8007a7a:	4a0e      	ldr	r2, [pc, #56]	; (8007ab4 <TL_Init+0x64>)
 8007a7c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8007a7e:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <TL_Init+0x48>)
 8007a80:	4a0d      	ldr	r2, [pc, #52]	; (8007ab8 <TL_Init+0x68>)
 8007a82:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007a84:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <TL_Init+0x48>)
 8007a86:	4a0d      	ldr	r2, [pc, #52]	; (8007abc <TL_Init+0x6c>)
 8007a88:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8007a8a:	4b03      	ldr	r3, [pc, #12]	; (8007a98 <TL_Init+0x48>)
 8007a8c:	4a0c      	ldr	r2, [pc, #48]	; (8007ac0 <TL_Init+0x70>)
 8007a8e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007a90:	f001 f868 	bl	8008b64 <HW_IPCC_Init>

  return;
 8007a94:	bf00      	nop
}
 8007a96:	bd80      	pop	{r7, pc}
 8007a98:	20030000 	.word	0x20030000
 8007a9c:	20030028 	.word	0x20030028
 8007aa0:	20030048 	.word	0x20030048
 8007aa4:	20030058 	.word	0x20030058
 8007aa8:	20030064 	.word	0x20030064
 8007aac:	2003006c 	.word	0x2003006c
 8007ab0:	20030074 	.word	0x20030074
 8007ab4:	2003007c 	.word	0x2003007c
 8007ab8:	20030098 	.word	0x20030098
 8007abc:	2003009c 	.word	0x2003009c
 8007ac0:	200300a8 	.word	0x200300a8

08007ac4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007ad0:	4811      	ldr	r0, [pc, #68]	; (8007b18 <TL_BLE_Init+0x54>)
 8007ad2:	f7ff fde5 	bl	80076a0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007ad6:	4b11      	ldr	r3, [pc, #68]	; (8007b1c <TL_BLE_Init+0x58>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4a0c      	ldr	r2, [pc, #48]	; (8007b20 <TL_BLE_Init+0x5c>)
 8007af0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	4a08      	ldr	r2, [pc, #32]	; (8007b18 <TL_BLE_Init+0x54>)
 8007af6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007af8:	f001 f84a 	bl	8008b90 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a08      	ldr	r2, [pc, #32]	; (8007b24 <TL_BLE_Init+0x60>)
 8007b02:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	4a07      	ldr	r2, [pc, #28]	; (8007b28 <TL_BLE_Init+0x64>)
 8007b0a:	6013      	str	r3, [r2, #0]

  return 0;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	200300c4 	.word	0x200300c4
 8007b1c:	20030000 	.word	0x20030000
 8007b20:	20030a48 	.word	0x20030a48
 8007b24:	20000318 	.word	0x20000318
 8007b28:	2000031c 	.word	0x2000031c

08007b2c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	460b      	mov	r3, r1
 8007b36:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8007b38:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <TL_BLE_SendCmd+0x34>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8007b42:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <TL_BLE_SendCmd+0x34>)
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	2001      	movs	r0, #1
 8007b4c:	f000 f96c 	bl	8007e28 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8007b50:	f001 f828 	bl	8008ba4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	20030000 	.word	0x20030000

08007b64 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8007b6a:	e01c      	b.n	8007ba6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8007b6c:	1d3b      	adds	r3, r7, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4812      	ldr	r0, [pc, #72]	; (8007bbc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007b72:	f7ff fe34 	bl	80077de <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7a5b      	ldrb	r3, [r3, #9]
 8007b7a:	2b0f      	cmp	r3, #15
 8007b7c:	d003      	beq.n	8007b86 <HW_IPCC_BLE_RxEvtNot+0x22>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	7a5b      	ldrb	r3, [r3, #9]
 8007b82:	2b0e      	cmp	r3, #14
 8007b84:	d105      	bne.n	8007b92 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4619      	mov	r1, r3
 8007b8a:	2002      	movs	r0, #2
 8007b8c:	f000 f94c 	bl	8007e28 <OutputDbgTrace>
 8007b90:	e004      	b.n	8007b9c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4619      	mov	r1, r3
 8007b96:	2003      	movs	r0, #3
 8007b98:	f000 f946 	bl	8007e28 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8007b9c:	4b08      	ldr	r3, [pc, #32]	; (8007bc0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007ba6:	4805      	ldr	r0, [pc, #20]	; (8007bbc <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007ba8:	f7ff fd8a 	bl	80076c0 <LST_is_empty>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0dc      	beq.n	8007b6c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007bb2:	bf00      	nop
}
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	200300c4 	.word	0x200300c4
 8007bc0:	20000318 	.word	0x20000318

08007bc4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007bc8:	4b02      	ldr	r3, [pc, #8]	; (8007bd4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4798      	blx	r3

  return;
 8007bce:	bf00      	nop
}
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	2000031c 	.word	0x2000031c

08007bd8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007be4:	480d      	ldr	r0, [pc, #52]	; (8007c1c <TL_SYS_Init+0x44>)
 8007be6:	f7ff fd5b 	bl	80076a0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8007bea:	4b0d      	ldr	r3, [pc, #52]	; (8007c20 <TL_SYS_Init+0x48>)
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4a08      	ldr	r2, [pc, #32]	; (8007c1c <TL_SYS_Init+0x44>)
 8007bfc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8007bfe:	f000 fff3 	bl	8008be8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a07      	ldr	r2, [pc, #28]	; (8007c24 <TL_SYS_Init+0x4c>)
 8007c08:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	4a06      	ldr	r2, [pc, #24]	; (8007c28 <TL_SYS_Init+0x50>)
 8007c10:	6013      	str	r3, [r2, #0]

  return 0;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	200300cc 	.word	0x200300cc
 8007c20:	20030000 	.word	0x20030000
 8007c24:	20000320 	.word	0x20000320
 8007c28:	20000324 	.word	0x20000324

08007c2c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8007c38:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <TL_SYS_SendCmd+0x34>)
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2210      	movs	r2, #16
 8007c40:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <TL_SYS_SendCmd+0x34>)
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	2004      	movs	r0, #4
 8007c4c:	f000 f8ec 	bl	8007e28 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8007c50:	f000 ffd4 	bl	8008bfc <HW_IPCC_SYS_SendCmd>

  return 0;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	20030000 	.word	0x20030000

08007c64 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	2005      	movs	r0, #5
 8007c72:	f000 f8d9 	bl	8007e28 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a03      	ldr	r2, [pc, #12]	; (8007c88 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007c7c:	68d2      	ldr	r2, [r2, #12]
 8007c7e:	6812      	ldr	r2, [r2, #0]
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3

  return;
 8007c84:	bf00      	nop
}
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20030000 	.word	0x20030000
 8007c8c:	20000320 	.word	0x20000320

08007c90 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007c96:	e00e      	b.n	8007cb6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007c98:	1d3b      	adds	r3, r7, #4
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	480b      	ldr	r0, [pc, #44]	; (8007ccc <HW_IPCC_SYS_EvtNot+0x3c>)
 8007c9e:	f7ff fd9e 	bl	80077de <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	2006      	movs	r0, #6
 8007ca8:	f000 f8be 	bl	8007e28 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007cac:	4b08      	ldr	r3, [pc, #32]	; (8007cd0 <HW_IPCC_SYS_EvtNot+0x40>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007cb6:	4805      	ldr	r0, [pc, #20]	; (8007ccc <HW_IPCC_SYS_EvtNot+0x3c>)
 8007cb8:	f7ff fd02 	bl	80076c0 <LST_is_empty>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0ea      	beq.n	8007c98 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007cc2:	bf00      	nop
}
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	200300cc 	.word	0x200300cc
 8007cd0:	20000324 	.word	0x20000324

08007cd4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007cdc:	4817      	ldr	r0, [pc, #92]	; (8007d3c <TL_MM_Init+0x68>)
 8007cde:	f7ff fcdf 	bl	80076a0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007ce2:	4817      	ldr	r0, [pc, #92]	; (8007d40 <TL_MM_Init+0x6c>)
 8007ce4:	f7ff fcdc 	bl	80076a0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007ce8:	4b16      	ldr	r3, [pc, #88]	; (8007d44 <TL_MM_Init+0x70>)
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	4a16      	ldr	r2, [pc, #88]	; (8007d48 <TL_MM_Init+0x74>)
 8007cee:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007cf0:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <TL_MM_Init+0x74>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	6892      	ldr	r2, [r2, #8]
 8007cf8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <TL_MM_Init+0x74>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	68d2      	ldr	r2, [r2, #12]
 8007d02:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007d04:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <TL_MM_Init+0x74>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a0c      	ldr	r2, [pc, #48]	; (8007d3c <TL_MM_Init+0x68>)
 8007d0a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007d0c:	4b0e      	ldr	r3, [pc, #56]	; (8007d48 <TL_MM_Init+0x74>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007d16:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <TL_MM_Init+0x74>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6852      	ldr	r2, [r2, #4]
 8007d1e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <TL_MM_Init+0x74>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6912      	ldr	r2, [r2, #16]
 8007d28:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <TL_MM_Init+0x74>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	6952      	ldr	r2, [r2, #20]
 8007d32:	619a      	str	r2, [r3, #24]

  return;
 8007d34:	bf00      	nop
}
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	200300b4 	.word	0x200300b4
 8007d40:	20000310 	.word	0x20000310
 8007d44:	20030000 	.word	0x20030000
 8007d48:	20000328 	.word	0x20000328

08007d4c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	4807      	ldr	r0, [pc, #28]	; (8007d74 <TL_MM_EvtDone+0x28>)
 8007d58:	f7ff fcfa 	bl	8007750 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	2000      	movs	r0, #0
 8007d60:	f000 f862 	bl	8007e28 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007d64:	4804      	ldr	r0, [pc, #16]	; (8007d78 <TL_MM_EvtDone+0x2c>)
 8007d66:	f000 ff6f 	bl	8008c48 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007d6a:	bf00      	nop
}
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	20000310 	.word	0x20000310
 8007d78:	08007d7d 	.word	0x08007d7d

08007d7c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007d82:	e00c      	b.n	8007d9e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007d84:	1d3b      	adds	r3, r7, #4
 8007d86:	4619      	mov	r1, r3
 8007d88:	480a      	ldr	r0, [pc, #40]	; (8007db4 <SendFreeBuf+0x38>)
 8007d8a:	f7ff fd28 	bl	80077de <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <SendFreeBuf+0x3c>)
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff fcd9 	bl	8007750 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007d9e:	4805      	ldr	r0, [pc, #20]	; (8007db4 <SendFreeBuf+0x38>)
 8007da0:	f7ff fc8e 	bl	80076c0 <LST_is_empty>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0ec      	beq.n	8007d84 <SendFreeBuf+0x8>
  }

  return;
 8007daa:	bf00      	nop
}
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000310 	.word	0x20000310
 8007db8:	20030000 	.word	0x20030000

08007dbc <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007dc0:	4805      	ldr	r0, [pc, #20]	; (8007dd8 <TL_TRACES_Init+0x1c>)
 8007dc2:	f7ff fc6d 	bl	80076a0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007dc6:	4b05      	ldr	r3, [pc, #20]	; (8007ddc <TL_TRACES_Init+0x20>)
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	4a03      	ldr	r2, [pc, #12]	; (8007dd8 <TL_TRACES_Init+0x1c>)
 8007dcc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007dce:	f000 ff71 	bl	8008cb4 <HW_IPCC_TRACES_Init>

  return;
 8007dd2:	bf00      	nop
}
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	200300bc 	.word	0x200300bc
 8007ddc:	20030000 	.word	0x20030000

08007de0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007de6:	e008      	b.n	8007dfa <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007de8:	1d3b      	adds	r3, r7, #4
 8007dea:	4619      	mov	r1, r3
 8007dec:	4808      	ldr	r0, [pc, #32]	; (8007e10 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007dee:	f7ff fcf6 	bl	80077de <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 f80d 	bl	8007e14 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007dfa:	4805      	ldr	r0, [pc, #20]	; (8007e10 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007dfc:	f7ff fc60 	bl	80076c0 <LST_is_empty>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d0f0      	beq.n	8007de8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007e06:	bf00      	nop
}
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	200300bc 	.word	0x200300bc

08007e14 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007e1c:	bf00      	nop
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	6039      	str	r1, [r7, #0]
 8007e32:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007e34:	79fb      	ldrb	r3, [r7, #7]
 8007e36:	2b06      	cmp	r3, #6
 8007e38:	d845      	bhi.n	8007ec6 <OutputDbgTrace+0x9e>
 8007e3a:	a201      	add	r2, pc, #4	; (adr r2, 8007e40 <OutputDbgTrace+0x18>)
 8007e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e40:	08007e5d 	.word	0x08007e5d
 8007e44:	08007e81 	.word	0x08007e81
 8007e48:	08007e87 	.word	0x08007e87
 8007e4c:	08007e9b 	.word	0x08007e9b
 8007e50:	08007ea7 	.word	0x08007ea7
 8007e54:	08007ead 	.word	0x08007ead
 8007e58:	08007ebb 	.word	0x08007ebb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	7a5b      	ldrb	r3, [r3, #9]
 8007e64:	2bff      	cmp	r3, #255	; 0xff
 8007e66:	d005      	beq.n	8007e74 <OutputDbgTrace+0x4c>
 8007e68:	2bff      	cmp	r3, #255	; 0xff
 8007e6a:	dc05      	bgt.n	8007e78 <OutputDbgTrace+0x50>
 8007e6c:	2b0e      	cmp	r3, #14
 8007e6e:	d005      	beq.n	8007e7c <OutputDbgTrace+0x54>
 8007e70:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007e72:	e001      	b.n	8007e78 <OutputDbgTrace+0x50>
          break;
 8007e74:	bf00      	nop
 8007e76:	e027      	b.n	8007ec8 <OutputDbgTrace+0xa0>
          break;
 8007e78:	bf00      	nop
 8007e7a:	e025      	b.n	8007ec8 <OutputDbgTrace+0xa0>
          break;
 8007e7c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007e7e:	e023      	b.n	8007ec8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007e84:	e020      	b.n	8007ec8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	7a5b      	ldrb	r3, [r3, #9]
 8007e8e:	2b0e      	cmp	r3, #14
 8007e90:	d001      	beq.n	8007e96 <OutputDbgTrace+0x6e>
 8007e92:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007e94:	e000      	b.n	8007e98 <OutputDbgTrace+0x70>
          break;
 8007e96:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007e98:	e016      	b.n	8007ec8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	7a5b      	ldrb	r3, [r3, #9]
 8007ea2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007ea4:	e010      	b.n	8007ec8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007eaa:	e00d      	b.n	8007ec8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	7a5b      	ldrb	r3, [r3, #9]
 8007eb4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007eb6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007eb8:	e006      	b.n	8007ec8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	7a5b      	ldrb	r3, [r3, #9]
 8007ec2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007ec4:	e000      	b.n	8007ec8 <OutputDbgTrace+0xa0>

    default:
      break;
 8007ec6:	bf00      	nop
  }

  return;
 8007ec8:	bf00      	nop
}
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007ed8:	4b03      	ldr	r3, [pc, #12]	; (8007ee8 <LL_FLASH_GetUDN+0x14>)
 8007eda:	681b      	ldr	r3, [r3, #0]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	1fff7580 	.word	0x1fff7580

08007eec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007ef0:	4b03      	ldr	r3, [pc, #12]	; (8007f00 <LL_FLASH_GetDeviceID+0x14>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	b2db      	uxtb	r3, r3
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	1fff7584 	.word	0x1fff7584

08007f04 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007f08:	4b03      	ldr	r3, [pc, #12]	; (8007f18 <LL_FLASH_GetSTCompanyID+0x14>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	0a1b      	lsrs	r3, r3, #8
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	1fff7584 	.word	0x1fff7584

08007f1c <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8007f1c:	b5b0      	push	{r4, r5, r7, lr}
 8007f1e:	b08c      	sub	sp, #48	; 0x30
 8007f20:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007f22:	4b2a      	ldr	r3, [pc, #168]	; (8007fcc <APP_BLE_Init+0xb0>)
 8007f24:	463c      	mov	r4, r7
 8007f26:	461d      	mov	r5, r3
 8007f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8007f38:	f000 f954 	bl	80081e4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	2002      	movs	r0, #2
 8007f40:	f000 fee0 	bl	8008d04 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007f44:	4a22      	ldr	r2, [pc, #136]	; (8007fd0 <APP_BLE_Init+0xb4>)
 8007f46:	2100      	movs	r1, #0
 8007f48:	2004      	movs	r0, #4
 8007f4a:	f001 f825 	bl	8008f98 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8007f4e:	463b      	mov	r3, r7
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fa43 	bl	80073dc <SHCI_C2_BLE_Init>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8007f5c:	f7f9 ff56 	bl	8001e0c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007f60:	f000 f956 	bl	8008210 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007f64:	f7ff fcca 	bl	80078fc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007f68:	4b1a      	ldr	r3, [pc, #104]	; (8007fd4 <APP_BLE_Init+0xb8>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007f70:	4b18      	ldr	r3, [pc, #96]	; (8007fd4 <APP_BLE_Init+0xb8>)
 8007f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f76:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007f78:	4a17      	ldr	r2, [pc, #92]	; (8007fd8 <APP_BLE_Init+0xbc>)
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	f001 f80b 	bl	8008f98 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8007f82:	2006      	movs	r0, #6
 8007f84:	f7fe fd87 	bl	8006a96 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8007f88:	f000 fbb6 	bl	80086f8 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8007f8c:	4b13      	ldr	r3, [pc, #76]	; (8007fdc <APP_BLE_Init+0xc0>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	4913      	ldr	r1, [pc, #76]	; (8007fe0 <APP_BLE_Init+0xc4>)
 8007f92:	2000      	movs	r0, #0
 8007f94:	f7f9 f90a 	bl	80011ac <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <APP_BLE_Init+0xc8>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4912      	ldr	r1, [pc, #72]	; (8007fe8 <APP_BLE_Init+0xcc>)
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f7f9 f904 	bl	80011ac <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <APP_BLE_Init+0xb8>)
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007faa:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <APP_BLE_Init+0xb8>)
 8007fac:	2200      	movs	r2, #0
 8007fae:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <APP_BLE_Init+0xd0>)
 8007fb2:	2280      	movs	r2, #128	; 0x80
 8007fb4:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8007fb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <APP_BLE_Init+0xd4>)
 8007fb8:	22a0      	movs	r2, #160	; 0xa0
 8007fba:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8007fbc:	2001      	movs	r0, #1
 8007fbe:	f000 f9e9 	bl	8008394 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8007fc2:	bf00      	nop
}
 8007fc4:	3730      	adds	r7, #48	; 0x30
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	0800a908 	.word	0x0800a908
 8007fd0:	08006d49 	.word	0x08006d49
 8007fd4:	200001fc 	.word	0x200001fc
 8007fd8:	080084fd 	.word	0x080084fd
 8007fdc:	08008535 	.word	0x08008535
 8007fe0:	2000027d 	.word	0x2000027d
 8007fe4:	08008545 	.word	0x08008545
 8007fe8:	2000027e 	.word	0x2000027e
 8007fec:	20000280 	.word	0x20000280
 8007ff0:	20000282 	.word	0x20000282

08007ff4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08c      	sub	sp, #48	; 0x30
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007ffc:	2342      	movs	r3, #66	; 0x42
 8007ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3301      	adds	r3, #1
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	2bff      	cmp	r3, #255	; 0xff
 800800e:	d076      	beq.n	80080fe <SVCCTL_App_Notification+0x10a>
 8008010:	2bff      	cmp	r3, #255	; 0xff
 8008012:	f300 80c9 	bgt.w	80081a8 <SVCCTL_App_Notification+0x1b4>
 8008016:	2b05      	cmp	r3, #5
 8008018:	d002      	beq.n	8008020 <SVCCTL_App_Notification+0x2c>
 800801a:	2b3e      	cmp	r3, #62	; 0x3e
 800801c:	d020      	beq.n	8008060 <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800801e:	e0c3      	b.n	80081a8 <SVCCTL_App_Notification+0x1b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	3302      	adds	r3, #2
 8008024:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800802c:	b29a      	uxth	r2, r3
 800802e:	4b62      	ldr	r3, [pc, #392]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 8008030:	8adb      	ldrh	r3, [r3, #22]
 8008032:	429a      	cmp	r2, r3
 8008034:	d106      	bne.n	8008044 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008036:	4b60      	ldr	r3, [pc, #384]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 8008038:	2200      	movs	r2, #0
 800803a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800803c:	4b5e      	ldr	r3, [pc, #376]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008044:	2001      	movs	r0, #1
 8008046:	f000 f9a5 	bl	8008394 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800804a:	4b5c      	ldr	r3, [pc, #368]	; (80081bc <SVCCTL_App_Notification+0x1c8>)
 800804c:	2201      	movs	r2, #1
 800804e:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008050:	4b59      	ldr	r3, [pc, #356]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 8008052:	8ada      	ldrh	r2, [r3, #22]
 8008054:	4b59      	ldr	r3, [pc, #356]	; (80081bc <SVCCTL_App_Notification+0x1c8>)
 8008056:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8008058:	4858      	ldr	r0, [pc, #352]	; (80081bc <SVCCTL_App_Notification+0x1c8>)
 800805a:	f000 fb39 	bl	80086d0 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800805e:	e0a6      	b.n	80081ae <SVCCTL_App_Notification+0x1ba>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	3302      	adds	r3, #2
 8008064:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	2b0c      	cmp	r3, #12
 800806c:	d005      	beq.n	800807a <SVCCTL_App_Notification+0x86>
 800806e:	2b0c      	cmp	r3, #12
 8008070:	dc41      	bgt.n	80080f6 <SVCCTL_App_Notification+0x102>
 8008072:	2b01      	cmp	r3, #1
 8008074:	d017      	beq.n	80080a6 <SVCCTL_App_Notification+0xb2>
 8008076:	2b03      	cmp	r3, #3
          break;
 8008078:	e03d      	b.n	80080f6 <SVCCTL_App_Notification+0x102>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	3301      	adds	r3, #1
 800807e:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8008080:	4b4d      	ldr	r3, [pc, #308]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 8008082:	8adb      	ldrh	r3, [r3, #22]
 8008084:	f107 020e 	add.w	r2, r7, #14
 8008088:	f107 010f 	add.w	r1, r7, #15
 800808c:	4618      	mov	r0, r3
 800808e:	f7fe fd70 	bl	8006b72 <hci_le_read_phy>
 8008092:	4603      	mov	r3, r0
 8008094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8008098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800809c:	2b00      	cmp	r3, #0
 800809e:	d12c      	bne.n	80080fa <SVCCTL_App_Notification+0x106>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2b02      	cmp	r3, #2
          break;
 80080a4:	e029      	b.n	80080fa <SVCCTL_App_Notification+0x106>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3301      	adds	r3, #1
 80080aa:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80080ac:	4b42      	ldr	r3, [pc, #264]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 80080ae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7f9 f8f4 	bl	80012a0 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80080b8:	4b3f      	ldr	r3, [pc, #252]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 80080ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d104      	bne.n	80080cc <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80080c2:	4b3d      	ldr	r3, [pc, #244]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 80080c4:	2206      	movs	r2, #6
 80080c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 80080ca:	e003      	b.n	80080d4 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80080cc:	4b3a      	ldr	r3, [pc, #232]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 80080ce:	2205      	movs	r2, #5
 80080d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80080da:	b29a      	uxth	r2, r3
 80080dc:	4b36      	ldr	r3, [pc, #216]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 80080de:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80080e0:	4b36      	ldr	r3, [pc, #216]	; (80081bc <SVCCTL_App_Notification+0x1c8>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80080e6:	4b34      	ldr	r3, [pc, #208]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 80080e8:	8ada      	ldrh	r2, [r3, #22]
 80080ea:	4b34      	ldr	r3, [pc, #208]	; (80081bc <SVCCTL_App_Notification+0x1c8>)
 80080ec:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 80080ee:	4833      	ldr	r0, [pc, #204]	; (80081bc <SVCCTL_App_Notification+0x1c8>)
 80080f0:	f000 faee 	bl	80086d0 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80080f4:	e002      	b.n	80080fc <SVCCTL_App_Notification+0x108>
          break;
 80080f6:	bf00      	nop
 80080f8:	e059      	b.n	80081ae <SVCCTL_App_Notification+0x1ba>
          break;
 80080fa:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 80080fc:	e057      	b.n	80081ae <SVCCTL_App_Notification+0x1ba>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80080fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008100:	3302      	adds	r3, #2
 8008102:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	881b      	ldrh	r3, [r3, #0]
 8008108:	b29b      	uxth	r3, r3
 800810a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800810e:	d047      	beq.n	80081a0 <SVCCTL_App_Notification+0x1ac>
 8008110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008114:	dc4a      	bgt.n	80081ac <SVCCTL_App_Notification+0x1b8>
 8008116:	2b04      	cmp	r3, #4
 8008118:	d037      	beq.n	800818a <SVCCTL_App_Notification+0x196>
 800811a:	2b04      	cmp	r3, #4
 800811c:	db46      	blt.n	80081ac <SVCCTL_App_Notification+0x1b8>
 800811e:	f240 420a 	movw	r2, #1034	; 0x40a
 8008122:	4293      	cmp	r3, r2
 8008124:	dc42      	bgt.n	80081ac <SVCCTL_App_Notification+0x1b8>
 8008126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800812a:	db3f      	blt.n	80081ac <SVCCTL_App_Notification+0x1b8>
 800812c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008130:	2b0a      	cmp	r3, #10
 8008132:	d83b      	bhi.n	80081ac <SVCCTL_App_Notification+0x1b8>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <SVCCTL_App_Notification+0x148>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	080081a5 	.word	0x080081a5
 8008140:	08008183 	.word	0x08008183
 8008144:	080081a5 	.word	0x080081a5
 8008148:	080081a5 	.word	0x080081a5
 800814c:	080081a5 	.word	0x080081a5
 8008150:	08008169 	.word	0x08008169
 8008154:	080081ad 	.word	0x080081ad
 8008158:	080081a5 	.word	0x080081a5
 800815c:	080081a5 	.word	0x080081a5
 8008160:	08008175 	.word	0x08008175
 8008164:	080081a5 	.word	0x080081a5
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8008168:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 800816a:	8adb      	ldrh	r3, [r3, #22]
 800816c:	4618      	mov	r0, r3
 800816e:	f7fe f8ec 	bl	800634a <aci_gap_allow_rebond>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8008172:	e018      	b.n	80081a6 <SVCCTL_App_Notification+0x1b2>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8008174:	4b10      	ldr	r3, [pc, #64]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 8008176:	8adb      	ldrh	r3, [r3, #22]
 8008178:	2101      	movs	r1, #1
 800817a:	4618      	mov	r0, r3
 800817c:	f7fe f92f 	bl	80063de <aci_gap_numeric_comparison_value_confirm_yesno>
      break;
 8008180:	e011      	b.n	80081a6 <SVCCTL_App_Notification+0x1b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8008182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008184:	3302      	adds	r3, #2
 8008186:	623b      	str	r3, [r7, #32]
           break;    
 8008188:	e00d      	b.n	80081a6 <SVCCTL_App_Notification+0x1b2>
          BSP_LED_On(LED_GREEN);
 800818a:	2001      	movs	r0, #1
 800818c:	f7fa fa12 	bl	80025b4 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8008190:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <SVCCTL_App_Notification+0x1c4>)
 8008192:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8008196:	210a      	movs	r1, #10
 8008198:	4618      	mov	r0, r3
 800819a:	f7f9 f90d 	bl	80013b8 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800819e:	e002      	b.n	80081a6 <SVCCTL_App_Notification+0x1b2>
      break;
 80081a0:	bf00      	nop
 80081a2:	e003      	b.n	80081ac <SVCCTL_App_Notification+0x1b8>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 80081a4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80081a6:	e001      	b.n	80081ac <SVCCTL_App_Notification+0x1b8>
      break;
 80081a8:	bf00      	nop
 80081aa:	e000      	b.n	80081ae <SVCCTL_App_Notification+0x1ba>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80081ac:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80081ae:	2301      	movs	r3, #1
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3730      	adds	r7, #48	; 0x30
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	200001fc 	.word	0x200001fc
 80081bc:	20000704 	.word	0x20000704

080081c0 <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 80081c4:	f000 facc 	bl	8008760 <P2PS_APP_SW1_Button_Action>
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}

080081cc <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 80081d0:	2100      	movs	r1, #0
 80081d2:	2008      	movs	r0, #8
 80081d4:	f000 ff02 	bl	8008fdc <UTIL_SEQ_SetTask>
  Adv_Request(APP_BLE_FAST_ADV);
 80081d8:	2001      	movs	r0, #1
 80081da:	f000 f8db 	bl	8008394 <Adv_Request>
  return;
 80081de:	bf00      	nop
}
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80081ea:	4b06      	ldr	r3, [pc, #24]	; (8008204 <Ble_Tl_Init+0x20>)
 80081ec:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80081ee:	4b06      	ldr	r3, [pc, #24]	; (8008208 <Ble_Tl_Init+0x24>)
 80081f0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80081f2:	463b      	mov	r3, r7
 80081f4:	4619      	mov	r1, r3
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <Ble_Tl_Init+0x28>)
 80081f8:	f7fe fd8a 	bl	8006d10 <hci_init>

  return;
 80081fc:	bf00      	nop
}
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	200300d4 	.word	0x200300d4
 8008208:	080085cf 	.word	0x080085cf
 800820c:	08008597 	.word	0x08008597

08008210 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8008210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008212:	b08f      	sub	sp, #60	; 0x3c
 8008214:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8008216:	2300      	movs	r3, #0
 8008218:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 800821a:	f7fe fc86 	bl	8006b2a <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800821e:	f000 f929 	bl	8008474 <BleGetBdAddress>
 8008222:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8008224:	69fa      	ldr	r2, [r7, #28]
 8008226:	2106      	movs	r1, #6
 8008228:	2000      	movs	r0, #0
 800822a:	f7fe fb74 	bl	8006916 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	795a      	ldrb	r2, [r3, #5]
 8008232:	4b52      	ldr	r3, [pc, #328]	; (800837c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8008234:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	791a      	ldrb	r2, [r3, #4]
 800823a:	4b50      	ldr	r3, [pc, #320]	; (800837c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800823c:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	78da      	ldrb	r2, [r3, #3]
 8008242:	4b4e      	ldr	r3, [pc, #312]	; (800837c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8008244:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	789a      	ldrb	r2, [r3, #2]
 800824a:	4b4c      	ldr	r3, [pc, #304]	; (800837c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800824c:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	785a      	ldrb	r2, [r3, #1]
 8008252:	4b4a      	ldr	r3, [pc, #296]	; (800837c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8008254:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	781a      	ldrb	r2, [r3, #0]
 800825a:	4b48      	ldr	r3, [pc, #288]	; (800837c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 800825c:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 800825e:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8008262:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8008264:	f7ff fe36 	bl	8007ed4 <LL_FLASH_GetUDN>
 8008268:	4603      	mov	r3, r0
 800826a:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800826c:	1d3b      	adds	r3, r7, #4
 800826e:	461a      	mov	r2, r3
 8008270:	2106      	movs	r1, #6
 8008272:	202e      	movs	r0, #46	; 0x2e
 8008274:	f7fe fb4f 	bl	8006916 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8008278:	4a41      	ldr	r2, [pc, #260]	; (8008380 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800827a:	2110      	movs	r1, #16
 800827c:	2018      	movs	r0, #24
 800827e:	f7fe fb4a 	bl	8006916 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8008282:	4a40      	ldr	r2, [pc, #256]	; (8008384 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8008284:	2110      	movs	r1, #16
 8008286:	2008      	movs	r0, #8
 8008288:	f7fe fb45 	bl	8006916 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800828c:	2118      	movs	r1, #24
 800828e:	2001      	movs	r0, #1
 8008290:	f7fe fbaa 	bl	80069e8 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8008294:	f7fe f8fa 	bl	800648c <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800829c:	7efb      	ldrb	r3, [r7, #27]
 800829e:	f043 0301 	orr.w	r3, r3, #1
 80082a2:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80082a4:	7efb      	ldrb	r3, [r7, #27]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d01e      	beq.n	80082e8 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "BREATHE";
 80082aa:	4b37      	ldr	r3, [pc, #220]	; (8008388 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80082ac:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 80082ae:	f107 0212 	add.w	r2, r7, #18
 80082b2:	7ef8      	ldrb	r0, [r7, #27]
 80082b4:	f107 030e 	add.w	r3, r7, #14
 80082b8:	9301      	str	r3, [sp, #4]
 80082ba:	f107 0310 	add.w	r3, r7, #16
 80082be:	9300      	str	r3, [sp, #0]
 80082c0:	4613      	mov	r3, r2
 80082c2:	2207      	movs	r2, #7
 80082c4:	2100      	movs	r1, #0
 80082c6:	f7fd ff35 	bl	8006134 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 80082ca:	8a7c      	ldrh	r4, [r7, #18]
 80082cc:	8a3d      	ldrh	r5, [r7, #16]
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f7f7 ff56 	bl	8000180 <strlen>
 80082d4:	4603      	mov	r3, r0
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	9300      	str	r3, [sp, #0]
 80082dc:	4613      	mov	r3, r2
 80082de:	2200      	movs	r2, #0
 80082e0:	4629      	mov	r1, r5
 80082e2:	4620      	mov	r0, r4
 80082e4:	f7fe fa90 	bl	8006808 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80082e8:	8a78      	ldrh	r0, [r7, #18]
 80082ea:	89f9      	ldrh	r1, [r7, #14]
 80082ec:	463b      	mov	r3, r7
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	2302      	movs	r3, #2
 80082f2:	2200      	movs	r2, #0
 80082f4:	f7fe fa88 	bl	8006808 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80082f8:	2202      	movs	r2, #2
 80082fa:	2102      	movs	r1, #2
 80082fc:	2000      	movs	r0, #0
 80082fe:	f7fe fca0 	bl	8006c42 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008302:	4b22      	ldr	r3, [pc, #136]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008304:	2201      	movs	r2, #1
 8008306:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008308:	4b20      	ldr	r3, [pc, #128]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	4618      	mov	r0, r3
 800830e:	f7fd fe1f 	bl	8005f50 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008312:	4b1e      	ldr	r3, [pc, #120]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008314:	2201      	movs	r2, #1
 8008316:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008318:	4b1c      	ldr	r3, [pc, #112]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800831a:	2208      	movs	r2, #8
 800831c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800831e:	4b1b      	ldr	r3, [pc, #108]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008320:	2210      	movs	r2, #16
 8008322:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008324:	4b19      	ldr	r3, [pc, #100]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008326:	2200      	movs	r2, #0
 8008328:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800832a:	4b18      	ldr	r3, [pc, #96]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800832c:	4a18      	ldr	r2, [pc, #96]	; (8008390 <Ble_Hci_Gap_Gatt_Init+0x180>)
 800832e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008330:	4b16      	ldr	r3, [pc, #88]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008332:	2201      	movs	r2, #1
 8008334:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008336:	4b15      	ldr	r3, [pc, #84]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008338:	789c      	ldrb	r4, [r3, #2]
 800833a:	4b14      	ldr	r3, [pc, #80]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800833c:	785d      	ldrb	r5, [r3, #1]
 800833e:	4b13      	ldr	r3, [pc, #76]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008340:	791b      	ldrb	r3, [r3, #4]
 8008342:	4a12      	ldr	r2, [pc, #72]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008344:	7952      	ldrb	r2, [r2, #5]
 8008346:	4911      	ldr	r1, [pc, #68]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008348:	78c9      	ldrb	r1, [r1, #3]
 800834a:	4810      	ldr	r0, [pc, #64]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800834c:	6880      	ldr	r0, [r0, #8]
 800834e:	2600      	movs	r6, #0
 8008350:	9604      	str	r6, [sp, #16]
 8008352:	9003      	str	r0, [sp, #12]
 8008354:	9102      	str	r1, [sp, #8]
 8008356:	9201      	str	r2, [sp, #4]
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	2300      	movs	r3, #0
 800835c:	2201      	movs	r2, #1
 800835e:	4629      	mov	r1, r5
 8008360:	4620      	mov	r0, r4
 8008362:	f7fd fe3f 	bl	8005fe4 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008366:	4b09      	ldr	r3, [pc, #36]	; (800838c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008368:	789b      	ldrb	r3, [r3, #2]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d001      	beq.n	8008372 <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 800836e:	f7fd ffc8 	bl	8006302 <aci_gap_configure_whitelist>
   }
}
 8008372:	bf00      	nop
 8008374:	3724      	adds	r7, #36	; 0x24
 8008376:	46bd      	mov	sp, r7
 8008378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837a:	bf00      	nop
 800837c:	2000002c 	.word	0x2000002c
 8008380:	0800ab10 	.word	0x0800ab10
 8008384:	0800ab20 	.word	0x0800ab20
 8008388:	0800a938 	.word	0x0800a938
 800838c:	200001fc 	.word	0x200001fc
 8008390:	0001b207 	.word	0x0001b207

08008394 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b08c      	sub	sp, #48	; 0x30
 8008398:	af08      	add	r7, sp, #32
 800839a:	4603      	mov	r3, r0
 800839c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800839e:	2342      	movs	r3, #66	; 0x42
 80083a0:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d106      	bne.n	80083b6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 80083a8:	4b2b      	ldr	r3, [pc, #172]	; (8008458 <Adv_Request+0xc4>)
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 80083ae:	4b2b      	ldr	r3, [pc, #172]	; (800845c <Adv_Request+0xc8>)
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	81bb      	strh	r3, [r7, #12]
 80083b4:	e005      	b.n	80083c2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80083b6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80083ba:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80083bc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80083c0:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80083c2:	4b27      	ldr	r3, [pc, #156]	; (8008460 <Adv_Request+0xcc>)
 80083c4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7f8 ff69 	bl	80012a0 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d10d      	bne.n	80083f0 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80083d4:	4b22      	ldr	r3, [pc, #136]	; (8008460 <Adv_Request+0xcc>)
 80083d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d004      	beq.n	80083e8 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80083de:	4b20      	ldr	r3, [pc, #128]	; (8008460 <Adv_Request+0xcc>)
 80083e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	d103      	bne.n	80083f0 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80083e8:	f7fd fcb0 	bl	8005d4c <aci_gap_set_non_discoverable>
 80083ec:	4603      	mov	r3, r0
 80083ee:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80083f0:	4a1b      	ldr	r2, [pc, #108]	; (8008460 <Adv_Request+0xcc>)
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80083f8:	4b19      	ldr	r3, [pc, #100]	; (8008460 <Adv_Request+0xcc>)
 80083fa:	7e1b      	ldrb	r3, [r3, #24]
 80083fc:	89ba      	ldrh	r2, [r7, #12]
 80083fe:	89f9      	ldrh	r1, [r7, #14]
 8008400:	2000      	movs	r0, #0
 8008402:	9006      	str	r0, [sp, #24]
 8008404:	2000      	movs	r0, #0
 8008406:	9005      	str	r0, [sp, #20]
 8008408:	4816      	ldr	r0, [pc, #88]	; (8008464 <Adv_Request+0xd0>)
 800840a:	9004      	str	r0, [sp, #16]
 800840c:	9303      	str	r3, [sp, #12]
 800840e:	4b16      	ldr	r3, [pc, #88]	; (8008468 <Adv_Request+0xd4>)
 8008410:	9302      	str	r3, [sp, #8]
 8008412:	2308      	movs	r3, #8
 8008414:	9301      	str	r3, [sp, #4]
 8008416:	2300      	movs	r3, #0
 8008418:	9300      	str	r3, [sp, #0]
 800841a:	2300      	movs	r3, #0
 800841c:	2000      	movs	r0, #0
 800841e:	f7fd fcb9 	bl	8005d94 <aci_gap_set_discoverable>
 8008422:	4603      	mov	r3, r0
 8008424:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8008426:	4911      	ldr	r1, [pc, #68]	; (800846c <Adv_Request+0xd8>)
 8008428:	200e      	movs	r0, #14
 800842a:	f7fd ff0e 	bl	800624a <aci_gap_update_adv_data>
 800842e:	4603      	mov	r3, r0
 8008430:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8008432:	7afb      	ldrb	r3, [r7, #11]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10a      	bne.n	800844e <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8008438:	79fb      	ldrb	r3, [r7, #7]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d107      	bne.n	800844e <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800843e:	4b08      	ldr	r3, [pc, #32]	; (8008460 <Adv_Request+0xcc>)
 8008440:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008444:	490a      	ldr	r1, [pc, #40]	; (8008470 <Adv_Request+0xdc>)
 8008446:	4618      	mov	r0, r3
 8008448:	f7f8 ffb6 	bl	80013b8 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800844c:	bf00      	nop
 800844e:	bf00      	nop
}
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000280 	.word	0x20000280
 800845c:	20000282 	.word	0x20000282
 8008460:	200001fc 	.word	0x200001fc
 8008464:	20000215 	.word	0x20000215
 8008468:	0800ab30 	.word	0x0800ab30
 800846c:	2000002c 	.word	0x2000002c
 8008470:	0001e046 	.word	0x0001e046

08008474 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800847a:	f7ff fd2b 	bl	8007ed4 <LL_FLASH_GetUDN>
 800847e:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008486:	d023      	beq.n	80084d0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008488:	f7ff fd3c 	bl	8007f04 <LL_FLASH_GetSTCompanyID>
 800848c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800848e:	f7ff fd2d 	bl	8007eec <LL_FLASH_GetDeviceID>
 8008492:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	b2da      	uxtb	r2, r3
 8008498:	4b16      	ldr	r3, [pc, #88]	; (80084f4 <BleGetBdAddress+0x80>)
 800849a:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	b2da      	uxtb	r2, r3
 80084a2:	4b14      	ldr	r3, [pc, #80]	; (80084f4 <BleGetBdAddress+0x80>)
 80084a4:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	4b12      	ldr	r3, [pc, #72]	; (80084f4 <BleGetBdAddress+0x80>)
 80084ac:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <BleGetBdAddress+0x80>)
 80084b4:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <BleGetBdAddress+0x80>)
 80084be:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	0c1b      	lsrs	r3, r3, #16
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <BleGetBdAddress+0x80>)
 80084c8:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 80084ca:	4b0a      	ldr	r3, [pc, #40]	; (80084f4 <BleGetBdAddress+0x80>)
 80084cc:	617b      	str	r3, [r7, #20]
 80084ce:	e00b      	b.n	80084e8 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 80084d0:	2000      	movs	r0, #0
 80084d2:	f7fe fdd3 	bl	800707c <OTP_Read>
 80084d6:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	617b      	str	r3, [r7, #20]
 80084e2:	e001      	b.n	80084e8 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <BleGetBdAddress+0x84>)
 80084e6:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 80084e8:	697b      	ldr	r3, [r7, #20]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3718      	adds	r7, #24
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	2000032c 	.word	0x2000032c
 80084f8:	0800ab08 	.word	0x0800ab08

080084fc <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8008502:	2001      	movs	r0, #1
 8008504:	f7fa f870 	bl	80025e8 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008508:	4b09      	ldr	r3, [pc, #36]	; (8008530 <Adv_Cancel+0x34>)
 800850a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800850e:	2b05      	cmp	r3, #5
 8008510:	d00a      	beq.n	8008528 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 8008512:	2300      	movs	r3, #0
 8008514:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008516:	f7fd fc19 	bl	8005d4c <aci_gap_set_non_discoverable>
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800851e:	4b04      	ldr	r3, [pc, #16]	; (8008530 <Adv_Cancel+0x34>)
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008526:	bf00      	nop
 8008528:	bf00      	nop
}
 800852a:	3708      	adds	r7, #8
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	200001fc 	.word	0x200001fc

08008534 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8008538:	2100      	movs	r1, #0
 800853a:	2001      	movs	r0, #1
 800853c:	f000 fd4e 	bl	8008fdc <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8008540:	bf00      	nop
}
 8008542:	bd80      	pop	{r7, pc}

08008544 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8008548:	2001      	movs	r0, #1
 800854a:	f7fa f84d 	bl	80025e8 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 800854e:	bf00      	nop
 8008550:	bd80      	pop	{r7, pc}

08008552 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800855a:	2100      	movs	r1, #0
 800855c:	2004      	movs	r0, #4
 800855e:	f000 fd3d 	bl	8008fdc <UTIL_SEQ_SetTask>
  return;
 8008562:	bf00      	nop
}
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008572:	2001      	movs	r0, #1
 8008574:	f000 fd9e 	bl	80090b4 <UTIL_SEQ_SetEvt>
  return;
 8008578:	bf00      	nop
}
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008588:	2001      	movs	r0, #1
 800858a:	f000 fdb3 	bl	80090f4 <UTIL_SEQ_WaitEvt>
  return;
 800858e:	bf00      	nop
}
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b084      	sub	sp, #16
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	3308      	adds	r3, #8
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7ff f9f7 	bl	800799c <SVCCTL_UserEvtRx>
 80085ae:	4603      	mov	r3, r0
 80085b0:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80085b2:	7afb      	ldrb	r3, [r7, #11]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2201      	movs	r2, #1
 80085bc:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 80085be:	e002      	b.n	80085c6 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	701a      	strb	r2, [r3, #0]
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	4603      	mov	r3, r0
 80085d6:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 80085d8:	79fb      	ldrb	r3, [r7, #7]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d002      	beq.n	80085e4 <BLE_StatusNot+0x16>
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d006      	beq.n	80085f0 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 80085e2:	e00b      	b.n	80085fc <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80085e4:	230f      	movs	r3, #15
 80085e6:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80085e8:	68f8      	ldr	r0, [r7, #12]
 80085ea:	f000 fd23 	bl	8009034 <UTIL_SEQ_PauseTask>
      break;
 80085ee:	e005      	b.n	80085fc <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80085f0:	230f      	movs	r3, #15
 80085f2:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 fd3d 	bl	8009074 <UTIL_SEQ_ResumeTask>
      break;
 80085fa:	bf00      	nop
  }
  return;
 80085fc:	bf00      	nop
}
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <P2PS_STM_App_Notification>:
static void P2PS_TimeChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	2b03      	cmp	r3, #3
 8008612:	d019      	beq.n	8008648 <P2PS_STM_App_Notification+0x44>
 8008614:	2b03      	cmp	r3, #3
 8008616:	dc52      	bgt.n	80086be <P2PS_STM_App_Notification+0xba>
 8008618:	2b00      	cmp	r3, #0
 800861a:	d002      	beq.n	8008622 <P2PS_STM_App_Notification+0x1e>
 800861c:	2b01      	cmp	r3, #1
 800861e:	d00a      	beq.n	8008636 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8008620:	e04d      	b.n	80086be <P2PS_STM_App_Notification+0xba>
      P2P_Server_App_Context.Notification_Status = 1;
 8008622:	4b2a      	ldr	r3, [pc, #168]	; (80086cc <P2PS_STM_App_Notification+0xc8>)
 8008624:	2201      	movs	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]
      HW_TS_Start(P2P_Server_App_Context.Update_timer_Id, TIME_CHANGE_PERIOD);
 8008628:	4b28      	ldr	r3, [pc, #160]	; (80086cc <P2PS_STM_App_Notification+0xc8>)
 800862a:	7b1b      	ldrb	r3, [r3, #12]
 800862c:	21cc      	movs	r1, #204	; 0xcc
 800862e:	4618      	mov	r0, r3
 8008630:	f7f8 fec2 	bl	80013b8 <HW_TS_Start>
      break;
 8008634:	e046      	b.n	80086c4 <P2PS_STM_App_Notification+0xc0>
      P2P_Server_App_Context.Notification_Status = 0;
 8008636:	4b25      	ldr	r3, [pc, #148]	; (80086cc <P2PS_STM_App_Notification+0xc8>)
 8008638:	2200      	movs	r2, #0
 800863a:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(P2P_Server_App_Context.Update_timer_Id);
 800863c:	4b23      	ldr	r3, [pc, #140]	; (80086cc <P2PS_STM_App_Notification+0xc8>)
 800863e:	7b1b      	ldrb	r3, [r3, #12]
 8008640:	4618      	mov	r0, r3
 8008642:	f7f8 fe2d 	bl	80012a0 <HW_TS_Stop>
      break;
 8008646:	e03d      	b.n	80086c4 <P2PS_STM_App_Notification+0xc0>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d117      	bne.n	8008682 <P2PS_STM_App_Notification+0x7e>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	3301      	adds	r3, #1
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d105      	bne.n	800866a <P2PS_STM_App_Notification+0x66>
          BSP_LED_On(LED_BLUE);
 800865e:	2000      	movs	r0, #0
 8008660:	f7f9 ffa8 	bl	80025b4 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8008664:	4b19      	ldr	r3, [pc, #100]	; (80086cc <P2PS_STM_App_Notification+0xc8>)
 8008666:	2201      	movs	r2, #1
 8008668:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	3301      	adds	r3, #1
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d105      	bne.n	8008682 <P2PS_STM_App_Notification+0x7e>
          BSP_LED_Off(LED_BLUE);
 8008676:	2000      	movs	r0, #0
 8008678:	f7f9 ffb6 	bl	80025e8 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800867c:	4b13      	ldr	r3, [pc, #76]	; (80086cc <P2PS_STM_App_Notification+0xc8>)
 800867e:	2200      	movs	r2, #0
 8008680:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d11a      	bne.n	80086c2 <P2PS_STM_App_Notification+0xbe>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	3301      	adds	r3, #1
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d105      	bne.n	80086a4 <P2PS_STM_App_Notification+0xa0>
          BSP_LED_On(LED_BLUE);
 8008698:	2000      	movs	r0, #0
 800869a:	f7f9 ff8b 	bl	80025b4 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800869e:	4b0b      	ldr	r3, [pc, #44]	; (80086cc <P2PS_STM_App_Notification+0xc8>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	3301      	adds	r3, #1
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d108      	bne.n	80086c2 <P2PS_STM_App_Notification+0xbe>
          BSP_LED_Off(LED_BLUE);
 80086b0:	2000      	movs	r0, #0
 80086b2:	f7f9 ff99 	bl	80025e8 <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80086b6:	4b05      	ldr	r3, [pc, #20]	; (80086cc <P2PS_STM_App_Notification+0xc8>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	709a      	strb	r2, [r3, #2]
      break;
 80086bc:	e001      	b.n	80086c2 <P2PS_STM_App_Notification+0xbe>
      break;
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <P2PS_STM_App_Notification+0xc0>
      break;
 80086c2:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 80086c4:	bf00      	nop
}
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	20000284 	.word	0x20000284

080086d0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d005      	beq.n	80086ec <P2PS_APP_Notification+0x1c>
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d000      	beq.n	80086e6 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80086e4:	e003      	b.n	80086ee <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 80086e6:	f000 f825 	bl	8008734 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 80086ea:	e000      	b.n	80086ee <P2PS_APP_Notification+0x1e>
    break;
 80086ec:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80086ee:	bf00      	nop
}
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  UTIL_SEQ_RegTask( 1<< CFG_MY_TASK_NOTIFY_TIME, UTIL_SEQ_RFU, P2PS_Send_Notification );
 80086fc:	4a09      	ldr	r2, [pc, #36]	; (8008724 <P2PS_APP_Init+0x2c>)
 80086fe:	2100      	movs	r1, #0
 8008700:	2008      	movs	r0, #8
 8008702:	f000 fc49 	bl	8008f98 <UTIL_SEQ_RegTask>

  /* Create timer to change the time and update charecteristic */
    HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 8008706:	4b08      	ldr	r3, [pc, #32]	; (8008728 <P2PS_APP_Init+0x30>)
 8008708:	2201      	movs	r2, #1
 800870a:	4908      	ldr	r1, [pc, #32]	; (800872c <P2PS_APP_Init+0x34>)
 800870c:	2000      	movs	r0, #0
 800870e:	f7f8 fd4d 	bl	80011ac <HW_TS_Create>
			P2PS_TimeChange_Timer_Callback);

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8008712:	4b07      	ldr	r3, [pc, #28]	; (8008730 <P2PS_APP_Init+0x38>)
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8008718:	f000 f80c 	bl	8008734 <P2PS_APP_LED_BUTTON_context_Init>
  P2PS_APP_context_Init();
 800871c:	f000 f828 	bl	8008770 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8008720:	bf00      	nop
}
 8008722:	bd80      	pop	{r7, pc}
 8008724:	080087a1 	.word	0x080087a1
 8008728:	08008791 	.word	0x08008791
 800872c:	20000290 	.word	0x20000290
 8008730:	20000284 	.word	0x20000284

08008734 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8008738:	4b08      	ldr	r3, [pc, #32]	; (800875c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800873a:	2201      	movs	r2, #1
 800873c:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800873e:	4b07      	ldr	r3, [pc, #28]	; (800875c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8008740:	2200      	movs	r2, #0
 8008742:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8008744:	4b05      	ldr	r3, [pc, #20]	; (800875c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8008746:	2201      	movs	r2, #1
 8008748:	721a      	strb	r2, [r3, #8]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800874a:	4b04      	ldr	r3, [pc, #16]	; (800875c <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800874c:	2200      	movs	r2, #0
 800874e:	725a      	strb	r2, [r3, #9]
#endif

}
 8008750:	bf00      	nop
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	20000284 	.word	0x20000284

08008760 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8008764:	2100      	movs	r1, #0
 8008766:	2002      	movs	r0, #2
 8008768:	f000 fc38 	bl	8008fdc <UTIL_SEQ_SetTask>

  return;
 800876c:	bf00      	nop
}
 800876e:	bd80      	pop	{r7, pc}

08008770 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 8008770:	b480      	push	{r7}
 8008772:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.TimeControl.TimeStamp = 0xF2;
 8008774:	4b05      	ldr	r3, [pc, #20]	; (800878c <P2PS_APP_context_Init+0x1c>)
 8008776:	22f2      	movs	r2, #242	; 0xf2
 8008778:	809a      	strh	r2, [r3, #4]
	P2P_Server_App_Context.TimeControl.Value = 0x1A;
 800877a:	4b04      	ldr	r3, [pc, #16]	; (800878c <P2PS_APP_context_Init+0x1c>)
 800877c:	221a      	movs	r2, #26
 800877e:	80da      	strh	r2, [r3, #6]
}
 8008780:	bf00      	nop
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	20000284 	.word	0x20000284

08008790 <P2PS_TimeChange_Timer_Callback>:

static void P2PS_TimeChange_Timer_Callback(void)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 8008794:	2100      	movs	r1, #0
 8008796:	2008      	movs	r0, #8
 8008798:	f000 fc20 	bl	8008fdc <UTIL_SEQ_SetTask>
}
 800879c:	bf00      	nop
 800879e:	bd80      	pop	{r7, pc}

080087a0 <P2PS_Send_Notification>:

void P2PS_Send_Notification(void)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
	uint8_t value[4];

	value[0] = (uint8_t)(timestamp >> 24);
 80087a6:	4b1d      	ldr	r3, [pc, #116]	; (800881c <P2PS_Send_Notification+0x7c>)
 80087a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	f04f 0300 	mov.w	r3, #0
 80087b4:	0e02      	lsrs	r2, r0, #24
 80087b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80087ba:	160b      	asrs	r3, r1, #24
 80087bc:	b2d3      	uxtb	r3, r2
 80087be:	713b      	strb	r3, [r7, #4]
	value[1] = (uint8_t)(timestamp >> 16);
 80087c0:	4b16      	ldr	r3, [pc, #88]	; (800881c <P2PS_Send_Notification+0x7c>)
 80087c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087c6:	f04f 0200 	mov.w	r2, #0
 80087ca:	f04f 0300 	mov.w	r3, #0
 80087ce:	0c02      	lsrs	r2, r0, #16
 80087d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80087d4:	140b      	asrs	r3, r1, #16
 80087d6:	b2d3      	uxtb	r3, r2
 80087d8:	717b      	strb	r3, [r7, #5]
	value[2] = (uint8_t)(timestamp >> 8);
 80087da:	4b10      	ldr	r3, [pc, #64]	; (800881c <P2PS_Send_Notification+0x7c>)
 80087dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087e0:	f04f 0200 	mov.w	r2, #0
 80087e4:	f04f 0300 	mov.w	r3, #0
 80087e8:	0a02      	lsrs	r2, r0, #8
 80087ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80087ee:	120b      	asrs	r3, r1, #8
 80087f0:	b2d3      	uxtb	r3, r2
 80087f2:	71bb      	strb	r3, [r7, #6]
	value[3] = (uint8_t)(timestamp);
 80087f4:	4b09      	ldr	r3, [pc, #36]	; (800881c <P2PS_Send_Notification+0x7c>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	b2d3      	uxtb	r3, r2
 80087fc:	71fb      	strb	r3, [r7, #7]

  
   if(P2P_Server_App_Context.Notification_Status){ 
 80087fe:	4b08      	ldr	r3, [pc, #32]	; (8008820 <P2PS_Send_Notification+0x80>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d006      	beq.n	8008814 <P2PS_Send_Notification+0x74>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&value);
 8008806:	1d3b      	adds	r3, r7, #4
 8008808:	4619      	mov	r1, r3
 800880a:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800880e:	f7fe fdb1 	bl	8007374 <P2PS_STM_App_Update_Char>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8008812:	bf00      	nop
 8008814:	bf00      	nop
}
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000418 	.word	0x20000418
 8008820:	20000284 	.word	0x20000284

08008824 <LL_PWR_EnableBootC2>:
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008828:	4b05      	ldr	r3, [pc, #20]	; (8008840 <LL_PWR_EnableBootC2+0x1c>)
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	4a04      	ldr	r2, [pc, #16]	; (8008840 <LL_PWR_EnableBootC2+0x1c>)
 800882e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008832:	60d3      	str	r3, [r2, #12]
}
 8008834:	bf00      	nop
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	58000400 	.word	0x58000400

08008844 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800884c:	4b06      	ldr	r3, [pc, #24]	; (8008868 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800884e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008852:	4905      	ldr	r1, [pc, #20]	; (8008868 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4313      	orrs	r3, r2
 8008858:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	58000800 	.word	0x58000800

0800886c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008874:	4b05      	ldr	r3, [pc, #20]	; (800888c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008876:	6a1a      	ldr	r2, [r3, #32]
 8008878:	4904      	ldr	r1, [pc, #16]	; (800888c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4313      	orrs	r3, r2
 800887e:	620b      	str	r3, [r1, #32]
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	58000800 	.word	0x58000800

08008890 <LL_AHB3_GRP1_EnableClock>:
{
 8008890:	b480      	push	{r7}
 8008892:	b085      	sub	sp, #20
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800889c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800889e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80088a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4013      	ands	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80088b4:	68fb      	ldr	r3, [r7, #12]
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80088c2:	b480      	push	{r7}
 80088c4:	b085      	sub	sp, #20
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80088ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ce:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80088d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4313      	orrs	r3, r2
 80088da:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80088de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088e2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4013      	ands	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80088ec:	68fb      	ldr	r3, [r7, #12]
}
 80088ee:	bf00      	nop
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <LL_C1_IPCC_EnableIT_TXF>:
{
 80088fa:	b480      	push	{r7}
 80088fc:	b083      	sub	sp, #12
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	601a      	str	r2, [r3, #0]
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <LL_C1_IPCC_EnableIT_RXO>:
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f043 0201 	orr.w	r2, r3, #1
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	601a      	str	r2, [r3, #0]
}
 800892e:	bf00      	nop
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800893a:	b480      	push	{r7}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	041b      	lsls	r3, r3, #16
 800894c:	43db      	mvns	r3, r3
 800894e:	401a      	ands	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	605a      	str	r2, [r3, #4]
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	041b      	lsls	r3, r3, #16
 8008972:	431a      	orrs	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	605a      	str	r2, [r3, #4]
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	43db      	mvns	r3, r3
 8008996:	401a      	ands	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	605a      	str	r2, [r3, #4]
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	609a      	str	r2, [r3, #8]
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <LL_C1_IPCC_SetFlag_CHx>:
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	041a      	lsls	r2, r3, #16
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	609a      	str	r2, [r3, #8]
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	68da      	ldr	r2, [r3, #12]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	4013      	ands	r3, r2
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d101      	bne.n	80089fe <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	69da      	ldr	r2, [r3, #28]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	4013      	ands	r3, r2
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d101      	bne.n	8008a28 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
	...

08008a38 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008a3c:	2102      	movs	r1, #2
 8008a3e:	4819      	ldr	r0, [pc, #100]	; (8008aa4 <HW_IPCC_Rx_Handler+0x6c>)
 8008a40:	f7ff ffe4 	bl	8008a0c <LL_C2_IPCC_IsActiveFlag_CHx>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d009      	beq.n	8008a5e <HW_IPCC_Rx_Handler+0x26>
 8008a4a:	4b16      	ldr	r3, [pc, #88]	; (8008aa4 <HW_IPCC_Rx_Handler+0x6c>)
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8008a58:	f000 f8ea 	bl	8008c30 <HW_IPCC_SYS_EvtHandler>
 8008a5c:	e01f      	b.n	8008a9e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008a5e:	2101      	movs	r1, #1
 8008a60:	4810      	ldr	r0, [pc, #64]	; (8008aa4 <HW_IPCC_Rx_Handler+0x6c>)
 8008a62:	f7ff ffd3 	bl	8008a0c <LL_C2_IPCC_IsActiveFlag_CHx>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d008      	beq.n	8008a7e <HW_IPCC_Rx_Handler+0x46>
 8008a6c:	4b0d      	ldr	r3, [pc, #52]	; (8008aa4 <HW_IPCC_Rx_Handler+0x6c>)
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d102      	bne.n	8008a7e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8008a78:	f000 f89e 	bl	8008bb8 <HW_IPCC_BLE_EvtHandler>
 8008a7c:	e00f      	b.n	8008a9e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008a7e:	2108      	movs	r1, #8
 8008a80:	4808      	ldr	r0, [pc, #32]	; (8008aa4 <HW_IPCC_Rx_Handler+0x6c>)
 8008a82:	f7ff ffc3 	bl	8008a0c <LL_C2_IPCC_IsActiveFlag_CHx>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d009      	beq.n	8008aa0 <HW_IPCC_Rx_Handler+0x68>
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <HW_IPCC_Rx_Handler+0x6c>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	43db      	mvns	r3, r3
 8008a92:	f003 0308 	and.w	r3, r3, #8
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008a9a:	f000 f915 	bl	8008cc8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008a9e:	bf00      	nop
 8008aa0:	bf00      	nop
}
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	58000c00 	.word	0x58000c00

08008aa8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008aac:	2102      	movs	r1, #2
 8008aae:	4822      	ldr	r0, [pc, #136]	; (8008b38 <HW_IPCC_Tx_Handler+0x90>)
 8008ab0:	f7ff ff97 	bl	80089e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d109      	bne.n	8008ace <HW_IPCC_Tx_Handler+0x26>
 8008aba:	4b1f      	ldr	r3, [pc, #124]	; (8008b38 <HW_IPCC_Tx_Handler+0x90>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	43db      	mvns	r3, r3
 8008ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d002      	beq.n	8008ace <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008ac8:	f000 f8a6 	bl	8008c18 <HW_IPCC_SYS_CmdEvtHandler>
 8008acc:	e031      	b.n	8008b32 <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008ace:	2102      	movs	r1, #2
 8008ad0:	4819      	ldr	r0, [pc, #100]	; (8008b38 <HW_IPCC_Tx_Handler+0x90>)
 8008ad2:	f7ff ff86 	bl	80089e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d109      	bne.n	8008af0 <HW_IPCC_Tx_Handler+0x48>
 8008adc:	4b16      	ldr	r3, [pc, #88]	; (8008b38 <HW_IPCC_Tx_Handler+0x90>)
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008aea:	f000 f895 	bl	8008c18 <HW_IPCC_SYS_CmdEvtHandler>
 8008aee:	e020      	b.n	8008b32 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008af0:	2108      	movs	r1, #8
 8008af2:	4811      	ldr	r0, [pc, #68]	; (8008b38 <HW_IPCC_Tx_Handler+0x90>)
 8008af4:	f7ff ff75 	bl	80089e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d109      	bne.n	8008b12 <HW_IPCC_Tx_Handler+0x6a>
 8008afe:	4b0e      	ldr	r3, [pc, #56]	; (8008b38 <HW_IPCC_Tx_Handler+0x90>)
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	43db      	mvns	r3, r3
 8008b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8008b0c:	f000 f8be 	bl	8008c8c <HW_IPCC_MM_FreeBufHandler>
 8008b10:	e00f      	b.n	8008b32 <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008b12:	2120      	movs	r1, #32
 8008b14:	4808      	ldr	r0, [pc, #32]	; (8008b38 <HW_IPCC_Tx_Handler+0x90>)
 8008b16:	f7ff ff64 	bl	80089e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d109      	bne.n	8008b34 <HW_IPCC_Tx_Handler+0x8c>
 8008b20:	4b05      	ldr	r3, [pc, #20]	; (8008b38 <HW_IPCC_Tx_Handler+0x90>)
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	43db      	mvns	r3, r3
 8008b26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8008b2e:	f000 f84f 	bl	8008bd0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008b32:	bf00      	nop
 8008b34:	bf00      	nop
}
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	58000c00 	.word	0x58000c00

08008b3c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008b40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b44:	f7ff febd 	bl	80088c2 <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008b48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b4c:	f7ff fe7a 	bl	8008844 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008b50:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b54:	f7ff fe8a 	bl	800886c <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008b58:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8008b5a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8008b5c:	f7ff fe62 	bl	8008824 <LL_PWR_EnableBootC2>

  return;
 8008b60:	bf00      	nop
}
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008b68:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008b6c:	f7ff fe90 	bl	8008890 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008b70:	4806      	ldr	r0, [pc, #24]	; (8008b8c <HW_IPCC_Init+0x28>)
 8008b72:	f7ff fed2 	bl	800891a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008b76:	4805      	ldr	r0, [pc, #20]	; (8008b8c <HW_IPCC_Init+0x28>)
 8008b78:	f7ff febf 	bl	80088fa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008b7c:	202c      	movs	r0, #44	; 0x2c
 8008b7e:	f7fa f80c 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008b82:	202d      	movs	r0, #45	; 0x2d
 8008b84:	f7fa f809 	bl	8002b9a <HAL_NVIC_EnableIRQ>

  return;
 8008b88:	bf00      	nop
}
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	58000c00 	.word	0x58000c00

08008b90 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008b94:	2101      	movs	r1, #1
 8008b96:	4802      	ldr	r0, [pc, #8]	; (8008ba0 <HW_IPCC_BLE_Init+0x10>)
 8008b98:	f7ff fef4 	bl	8008984 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008b9c:	bf00      	nop
}
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	58000c00 	.word	0x58000c00

08008ba4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008ba8:	2101      	movs	r1, #1
 8008baa:	4802      	ldr	r0, [pc, #8]	; (8008bb4 <HW_IPCC_BLE_SendCmd+0x10>)
 8008bac:	f7ff ff0a 	bl	80089c4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008bb0:	bf00      	nop
}
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	58000c00 	.word	0x58000c00

08008bb8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008bbc:	f7fe ffd2 	bl	8007b64 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	4802      	ldr	r0, [pc, #8]	; (8008bcc <HW_IPCC_BLE_EvtHandler+0x14>)
 8008bc4:	f7ff fef0 	bl	80089a8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008bc8:	bf00      	nop
}
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	58000c00 	.word	0x58000c00

08008bd0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008bd4:	2120      	movs	r1, #32
 8008bd6:	4803      	ldr	r0, [pc, #12]	; (8008be4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008bd8:	f7ff fec2 	bl	8008960 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008bdc:	f7fe fff2 	bl	8007bc4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008be0:	bf00      	nop
}
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	58000c00 	.word	0x58000c00

08008be8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008bec:	2102      	movs	r1, #2
 8008bee:	4802      	ldr	r0, [pc, #8]	; (8008bf8 <HW_IPCC_SYS_Init+0x10>)
 8008bf0:	f7ff fec8 	bl	8008984 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008bf4:	bf00      	nop
}
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	58000c00 	.word	0x58000c00

08008bfc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008c00:	2102      	movs	r1, #2
 8008c02:	4804      	ldr	r0, [pc, #16]	; (8008c14 <HW_IPCC_SYS_SendCmd+0x18>)
 8008c04:	f7ff fede 	bl	80089c4 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008c08:	2102      	movs	r1, #2
 8008c0a:	4802      	ldr	r0, [pc, #8]	; (8008c14 <HW_IPCC_SYS_SendCmd+0x18>)
 8008c0c:	f7ff fe95 	bl	800893a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008c10:	bf00      	nop
}
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	58000c00 	.word	0x58000c00

08008c18 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008c1c:	2102      	movs	r1, #2
 8008c1e:	4803      	ldr	r0, [pc, #12]	; (8008c2c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008c20:	f7ff fe9e 	bl	8008960 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008c24:	f7ff f81e 	bl	8007c64 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008c28:	bf00      	nop
}
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	58000c00 	.word	0x58000c00

08008c30 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008c34:	f7ff f82c 	bl	8007c90 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008c38:	2102      	movs	r1, #2
 8008c3a:	4802      	ldr	r0, [pc, #8]	; (8008c44 <HW_IPCC_SYS_EvtHandler+0x14>)
 8008c3c:	f7ff feb4 	bl	80089a8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008c40:	bf00      	nop
}
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	58000c00 	.word	0x58000c00

08008c48 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008c50:	2108      	movs	r1, #8
 8008c52:	480c      	ldr	r0, [pc, #48]	; (8008c84 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008c54:	f7ff fec5 	bl	80089e2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d007      	beq.n	8008c6e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8008c5e:	4a0a      	ldr	r2, [pc, #40]	; (8008c88 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008c64:	2108      	movs	r1, #8
 8008c66:	4807      	ldr	r0, [pc, #28]	; (8008c84 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008c68:	f7ff fe67 	bl	800893a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008c6c:	e006      	b.n	8008c7c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008c72:	2108      	movs	r1, #8
 8008c74:	4803      	ldr	r0, [pc, #12]	; (8008c84 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008c76:	f7ff fea5 	bl	80089c4 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008c7a:	bf00      	nop
}
 8008c7c:	3708      	adds	r7, #8
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	58000c00 	.word	0x58000c00
 8008c88:	20000334 	.word	0x20000334

08008c8c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008c90:	2108      	movs	r1, #8
 8008c92:	4806      	ldr	r0, [pc, #24]	; (8008cac <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008c94:	f7ff fe64 	bl	8008960 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008c98:	4b05      	ldr	r3, [pc, #20]	; (8008cb0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008c9e:	2108      	movs	r1, #8
 8008ca0:	4802      	ldr	r0, [pc, #8]	; (8008cac <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008ca2:	f7ff fe8f 	bl	80089c4 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008ca6:	bf00      	nop
}
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	58000c00 	.word	0x58000c00
 8008cb0:	20000334 	.word	0x20000334

08008cb4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008cb8:	2108      	movs	r1, #8
 8008cba:	4802      	ldr	r0, [pc, #8]	; (8008cc4 <HW_IPCC_TRACES_Init+0x10>)
 8008cbc:	f7ff fe62 	bl	8008984 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008cc0:	bf00      	nop
}
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	58000c00 	.word	0x58000c00

08008cc8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008ccc:	f7ff f888 	bl	8007de0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008cd0:	2108      	movs	r1, #8
 8008cd2:	4802      	ldr	r0, [pc, #8]	; (8008cdc <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008cd4:	f7ff fe68 	bl	80089a8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008cd8:	bf00      	nop
}
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	58000c00 	.word	0x58000c00

08008ce0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008ce4:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <UTIL_LPM_Init+0x1c>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <UTIL_LPM_Init+0x20>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008cf0:	bf00      	nop
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
 8008cfa:	bf00      	nop
 8008cfc:	20000338 	.word	0x20000338
 8008d00:	2000033c 	.word	0x2000033c

08008d04 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b087      	sub	sp, #28
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d10:	f3ef 8310 	mrs	r3, PRIMASK
 8008d14:	613b      	str	r3, [r7, #16]
  return(result);
 8008d16:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d1a:	b672      	cpsid	i
}
 8008d1c:	bf00      	nop
  
  switch(state)
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d008      	beq.n	8008d36 <UTIL_LPM_SetOffMode+0x32>
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d10e      	bne.n	8008d46 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008d28:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <UTIL_LPM_SetOffMode+0x5c>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	4a0b      	ldr	r2, [pc, #44]	; (8008d60 <UTIL_LPM_SetOffMode+0x5c>)
 8008d32:	6013      	str	r3, [r2, #0]
      break;
 8008d34:	e008      	b.n	8008d48 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	43da      	mvns	r2, r3
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <UTIL_LPM_SetOffMode+0x5c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	4a07      	ldr	r2, [pc, #28]	; (8008d60 <UTIL_LPM_SetOffMode+0x5c>)
 8008d42:	6013      	str	r3, [r2, #0]
      break;
 8008d44:	e000      	b.n	8008d48 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008d46:	bf00      	nop
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f383 8810 	msr	PRIMASK, r3
}
 8008d52:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008d54:	bf00      	nop
 8008d56:	371c      	adds	r7, #28
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	2000033c 	.word	0x2000033c

08008d64 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d70:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8008d72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d74:	b672      	cpsid	i
}
 8008d76:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8008d78:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <UTIL_LPM_EnterLowPower+0x60>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d006      	beq.n	8008d8e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8008d80:	4b11      	ldr	r3, [pc, #68]	; (8008dc8 <UTIL_LPM_EnterLowPower+0x64>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8008d86:	4b10      	ldr	r3, [pc, #64]	; (8008dc8 <UTIL_LPM_EnterLowPower+0x64>)
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	4798      	blx	r3
 8008d8c:	e010      	b.n	8008db0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8008d8e:	4b0f      	ldr	r3, [pc, #60]	; (8008dcc <UTIL_LPM_EnterLowPower+0x68>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d006      	beq.n	8008da4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8008d96:	4b0c      	ldr	r3, [pc, #48]	; (8008dc8 <UTIL_LPM_EnterLowPower+0x64>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <UTIL_LPM_EnterLowPower+0x64>)
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	4798      	blx	r3
 8008da2:	e005      	b.n	8008db0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8008da4:	4b08      	ldr	r3, [pc, #32]	; (8008dc8 <UTIL_LPM_EnterLowPower+0x64>)
 8008da6:	691b      	ldr	r3, [r3, #16]
 8008da8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8008daa:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <UTIL_LPM_EnterLowPower+0x64>)
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	4798      	blx	r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f383 8810 	msr	PRIMASK, r3
}
 8008dba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8008dbc:	bf00      	nop
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	20000338 	.word	0x20000338
 8008dc8:	0800aa5c 	.word	0x0800aa5c
 8008dcc:	2000033c 	.word	0x2000033c

08008dd0 <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08c      	sub	sp, #48	; 0x30
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008dd8:	4b67      	ldr	r3, [pc, #412]	; (8008f78 <UTIL_SEQ_Run+0x1a8>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8008dde:	4b66      	ldr	r3, [pc, #408]	; (8008f78 <UTIL_SEQ_Run+0x1a8>)
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4013      	ands	r3, r2
 8008de6:	4a64      	ldr	r2, [pc, #400]	; (8008f78 <UTIL_SEQ_Run+0x1a8>)
 8008de8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008dea:	e083      	b.n	8008ef4 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8008dec:	2300      	movs	r3, #0
 8008dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008df0:	e002      	b.n	8008df8 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	3301      	adds	r3, #1
 8008df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008df8:	4a60      	ldr	r2, [pc, #384]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008e00:	4b5f      	ldr	r3, [pc, #380]	; (8008f80 <UTIL_SEQ_Run+0x1b0>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	401a      	ands	r2, r3
 8008e06:	4b5c      	ldr	r3, [pc, #368]	; (8008f78 <UTIL_SEQ_Run+0x1a8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0f0      	beq.n	8008df2 <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8008e10:	4a5a      	ldr	r2, [pc, #360]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008e18:	4b59      	ldr	r3, [pc, #356]	; (8008f80 <UTIL_SEQ_Run+0x1b0>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	401a      	ands	r2, r3
 8008e1e:	4b56      	ldr	r3, [pc, #344]	; (8008f78 <UTIL_SEQ_Run+0x1a8>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4013      	ands	r3, r2
 8008e24:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008e26:	4a55      	ldr	r2, [pc, #340]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	00db      	lsls	r3, r3, #3
 8008e2c:	4413      	add	r3, r2
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	4013      	ands	r3, r2
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d106      	bne.n	8008e46 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008e38:	4a50      	ldr	r2, [pc, #320]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	00db      	lsls	r3, r3, #3
 8008e3e:	4413      	add	r3, r2
 8008e40:	f04f 32ff 	mov.w	r2, #4294967295
 8008e44:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008e46:	4a4d      	ldr	r2, [pc, #308]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	4413      	add	r3, r2
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	4013      	ands	r3, r2
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f99d 	bl	8009194 <SEQ_BitPosition>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	4b49      	ldr	r3, [pc, #292]	; (8008f84 <UTIL_SEQ_Run+0x1b4>)
 8008e60:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008e62:	4a46      	ldr	r2, [pc, #280]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	4413      	add	r3, r2
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	4b45      	ldr	r3, [pc, #276]	; (8008f84 <UTIL_SEQ_Run+0x1b4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2101      	movs	r1, #1
 8008e72:	fa01 f303 	lsl.w	r3, r1, r3
 8008e76:	43db      	mvns	r3, r3
 8008e78:	401a      	ands	r2, r3
 8008e7a:	4940      	ldr	r1, [pc, #256]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	440b      	add	r3, r1
 8008e82:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e84:	f3ef 8310 	mrs	r3, PRIMASK
 8008e88:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e8a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008e8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008e8e:	b672      	cpsid	i
}
 8008e90:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008e92:	4b3c      	ldr	r3, [pc, #240]	; (8008f84 <UTIL_SEQ_Run+0x1b4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2201      	movs	r2, #1
 8008e98:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9c:	43da      	mvns	r2, r3
 8008e9e:	4b3a      	ldr	r3, [pc, #232]	; (8008f88 <UTIL_SEQ_Run+0x1b8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	4a38      	ldr	r2, [pc, #224]	; (8008f88 <UTIL_SEQ_Run+0x1b8>)
 8008ea6:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eac:	e013      	b.n	8008ed6 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	4a32      	ldr	r2, [pc, #200]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008eb4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008eb8:	4b32      	ldr	r3, [pc, #200]	; (8008f84 <UTIL_SEQ_Run+0x1b4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec2:	43da      	mvns	r2, r3
 8008ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	400a      	ands	r2, r1
 8008eca:	492c      	ldr	r1, [pc, #176]	; (8008f7c <UTIL_SEQ_Run+0x1ac>)
 8008ecc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e8      	bne.n	8008eae <UTIL_SEQ_Run+0xde>
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f383 8810 	msr	PRIMASK, r3
}
 8008ee6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008ee8:	4b26      	ldr	r3, [pc, #152]	; (8008f84 <UTIL_SEQ_Run+0x1b4>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a27      	ldr	r2, [pc, #156]	; (8008f8c <UTIL_SEQ_Run+0x1bc>)
 8008eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ef2:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008ef4:	4b24      	ldr	r3, [pc, #144]	; (8008f88 <UTIL_SEQ_Run+0x1b8>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4b21      	ldr	r3, [pc, #132]	; (8008f80 <UTIL_SEQ_Run+0x1b0>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	401a      	ands	r2, r3
 8008efe:	4b1e      	ldr	r3, [pc, #120]	; (8008f78 <UTIL_SEQ_Run+0x1a8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4013      	ands	r3, r2
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d007      	beq.n	8008f18 <UTIL_SEQ_Run+0x148>
 8008f08:	4b21      	ldr	r3, [pc, #132]	; (8008f90 <UTIL_SEQ_Run+0x1c0>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	4b21      	ldr	r3, [pc, #132]	; (8008f94 <UTIL_SEQ_Run+0x1c4>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4013      	ands	r3, r2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f43f af6a 	beq.w	8008dec <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008f18:	4b1a      	ldr	r3, [pc, #104]	; (8008f84 <UTIL_SEQ_Run+0x1b4>)
 8008f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f1e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008f20:	f000 f92a 	bl	8009178 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f24:	f3ef 8310 	mrs	r3, PRIMASK
 8008f28:	613b      	str	r3, [r7, #16]
  return(result);
 8008f2a:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008f2e:	b672      	cpsid	i
}
 8008f30:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8008f32:	4b15      	ldr	r3, [pc, #84]	; (8008f88 <UTIL_SEQ_Run+0x1b8>)
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	4b12      	ldr	r3, [pc, #72]	; (8008f80 <UTIL_SEQ_Run+0x1b0>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	401a      	ands	r2, r3
 8008f3c:	4b0e      	ldr	r3, [pc, #56]	; (8008f78 <UTIL_SEQ_Run+0x1a8>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4013      	ands	r3, r2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d108      	bne.n	8008f58 <UTIL_SEQ_Run+0x188>
 8008f46:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <UTIL_SEQ_Run+0x1c0>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	4b12      	ldr	r3, [pc, #72]	; (8008f94 <UTIL_SEQ_Run+0x1c4>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4013      	ands	r3, r2
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8008f54:	f7f7 fb93 	bl	800067e <UTIL_SEQ_Idle>
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f383 8810 	msr	PRIMASK, r3
}
 8008f62:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8008f64:	f000 f90f 	bl	8009186 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008f68:	4a03      	ldr	r2, [pc, #12]	; (8008f78 <UTIL_SEQ_Run+0x1a8>)
 8008f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6c:	6013      	str	r3, [r2, #0]

  return;
 8008f6e:	bf00      	nop
}
 8008f70:	3730      	adds	r7, #48	; 0x30
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20000040 	.word	0x20000040
 8008f7c:	200003d0 	.word	0x200003d0
 8008f80:	2000003c 	.word	0x2000003c
 8008f84:	2000034c 	.word	0x2000034c
 8008f88:	20000340 	.word	0x20000340
 8008f8c:	20000350 	.word	0x20000350
 8008f90:	20000344 	.word	0x20000344
 8008f94:	20000348 	.word	0x20000348

08008f98 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8008fa8:	617b      	str	r3, [r7, #20]
  return(result);
 8008faa:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008fae:	b672      	cpsid	i
}
 8008fb0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 f8ee 	bl	8009194 <SEQ_BitPosition>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4a06      	ldr	r2, [pc, #24]	; (8008fd8 <UTIL_SEQ_RegTask+0x40>)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	f383 8810 	msr	PRIMASK, r3
}
 8008fce:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008fd0:	bf00      	nop
}
 8008fd2:	3720      	adds	r7, #32
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	20000350 	.word	0x20000350

08008fdc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b087      	sub	sp, #28
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8008fea:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fec:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008fee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ff0:	b672      	cpsid	i
}
 8008ff2:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008ff4:	4b0d      	ldr	r3, [pc, #52]	; (800902c <UTIL_SEQ_SetTask+0x50>)
 8008ff6:	681a      	ldr	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	4a0b      	ldr	r2, [pc, #44]	; (800902c <UTIL_SEQ_SetTask+0x50>)
 8008ffe:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009000:	4a0b      	ldr	r2, [pc, #44]	; (8009030 <UTIL_SEQ_SetTask+0x54>)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	431a      	orrs	r2, r3
 800900c:	4908      	ldr	r1, [pc, #32]	; (8009030 <UTIL_SEQ_SetTask+0x54>)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	f383 8810 	msr	PRIMASK, r3
}
 800901e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009020:	bf00      	nop
}
 8009022:	371c      	adds	r7, #28
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	20000340 	.word	0x20000340
 8009030:	200003d0 	.word	0x200003d0

08009034 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800903c:	f3ef 8310 	mrs	r3, PRIMASK
 8009040:	60fb      	str	r3, [r7, #12]
  return(result);
 8009042:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009044:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009046:	b672      	cpsid	i
}
 8009048:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	43da      	mvns	r2, r3
 800904e:	4b08      	ldr	r3, [pc, #32]	; (8009070 <UTIL_SEQ_PauseTask+0x3c>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4013      	ands	r3, r2
 8009054:	4a06      	ldr	r2, [pc, #24]	; (8009070 <UTIL_SEQ_PauseTask+0x3c>)
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f383 8810 	msr	PRIMASK, r3
}
 8009062:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009064:	bf00      	nop
}
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	2000003c 	.word	0x2000003c

08009074 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800907c:	f3ef 8310 	mrs	r3, PRIMASK
 8009080:	60fb      	str	r3, [r7, #12]
  return(result);
 8009082:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009084:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009086:	b672      	cpsid	i
}
 8009088:	bf00      	nop

  TaskMask |= TaskId_bm;
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <UTIL_SEQ_ResumeTask+0x3c>)
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4313      	orrs	r3, r2
 8009092:	4a07      	ldr	r2, [pc, #28]	; (80090b0 <UTIL_SEQ_ResumeTask+0x3c>)
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f383 8810 	msr	PRIMASK, r3
}
 80090a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80090a2:	bf00      	nop
}
 80090a4:	371c      	adds	r7, #28
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	2000003c 	.word	0x2000003c

080090b4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090bc:	f3ef 8310 	mrs	r3, PRIMASK
 80090c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80090c2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80090c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090c6:	b672      	cpsid	i
}
 80090c8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80090ca:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <UTIL_SEQ_SetEvt+0x3c>)
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	4a07      	ldr	r2, [pc, #28]	; (80090f0 <UTIL_SEQ_SetEvt+0x3c>)
 80090d4:	6013      	str	r3, [r2, #0]
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f383 8810 	msr	PRIMASK, r3
}
 80090e0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80090e2:	bf00      	nop
}
 80090e4:	371c      	adds	r7, #28
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr
 80090ee:	bf00      	nop
 80090f0:	20000344 	.word	0x20000344

080090f4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80090fc:	4b1b      	ldr	r3, [pc, #108]	; (800916c <UTIL_SEQ_WaitEvt+0x78>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009102:	4b1a      	ldr	r3, [pc, #104]	; (800916c <UTIL_SEQ_WaitEvt+0x78>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d102      	bne.n	8009112 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	e005      	b.n	800911e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8009112:	4b16      	ldr	r3, [pc, #88]	; (800916c <UTIL_SEQ_WaitEvt+0x78>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2201      	movs	r2, #1
 8009118:	fa02 f303 	lsl.w	r3, r2, r3
 800911c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800911e:	4b14      	ldr	r3, [pc, #80]	; (8009170 <UTIL_SEQ_WaitEvt+0x7c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8009124:	4a12      	ldr	r2, [pc, #72]	; (8009170 <UTIL_SEQ_WaitEvt+0x7c>)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800912a:	e005      	b.n	8009138 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800912c:	4b10      	ldr	r3, [pc, #64]	; (8009170 <UTIL_SEQ_WaitEvt+0x7c>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4619      	mov	r1, r3
 8009132:	6978      	ldr	r0, [r7, #20]
 8009134:	f7f7 faa9 	bl	800068a <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8009138:	4b0e      	ldr	r3, [pc, #56]	; (8009174 <UTIL_SEQ_WaitEvt+0x80>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	4b0c      	ldr	r3, [pc, #48]	; (8009170 <UTIL_SEQ_WaitEvt+0x7c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4013      	ands	r3, r2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f2      	beq.n	800912c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009146:	4a09      	ldr	r2, [pc, #36]	; (800916c <UTIL_SEQ_WaitEvt+0x78>)
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800914c:	4b08      	ldr	r3, [pc, #32]	; (8009170 <UTIL_SEQ_WaitEvt+0x7c>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	43da      	mvns	r2, r3
 8009152:	4b08      	ldr	r3, [pc, #32]	; (8009174 <UTIL_SEQ_WaitEvt+0x80>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4013      	ands	r3, r2
 8009158:	4a06      	ldr	r2, [pc, #24]	; (8009174 <UTIL_SEQ_WaitEvt+0x80>)
 800915a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800915c:	4a04      	ldr	r2, [pc, #16]	; (8009170 <UTIL_SEQ_WaitEvt+0x7c>)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6013      	str	r3, [r2, #0]

  return;
 8009162:	bf00      	nop
}
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	2000034c 	.word	0x2000034c
 8009170:	20000348 	.word	0x20000348
 8009174:	20000344 	.word	0x20000344

08009178 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800917c:	bf00      	nop
}
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009186:	b480      	push	{r7}
 8009188:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800918a:	bf00      	nop
}
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	0c1b      	lsrs	r3, r3, #16
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <SEQ_BitPosition+0x20>
 80091aa:	2310      	movs	r3, #16
 80091ac:	73fb      	strb	r3, [r7, #15]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	041b      	lsls	r3, r3, #16
 80091b2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d105      	bne.n	80091ca <SEQ_BitPosition+0x36>
 80091be:	7bfb      	ldrb	r3, [r7, #15]
 80091c0:	3308      	adds	r3, #8
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	021b      	lsls	r3, r3, #8
 80091c8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d105      	bne.n	80091e0 <SEQ_BitPosition+0x4c>
 80091d4:	7bfb      	ldrb	r3, [r7, #15]
 80091d6:	3304      	adds	r3, #4
 80091d8:	73fb      	strb	r3, [r7, #15]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	011b      	lsls	r3, r3, #4
 80091de:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	0f1b      	lsrs	r3, r3, #28
 80091e4:	4a07      	ldr	r2, [pc, #28]	; (8009204 <SEQ_BitPosition+0x70>)
 80091e6:	5cd2      	ldrb	r2, [r2, r3]
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	4413      	add	r3, r2
 80091ec:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
 80091f0:	f1c3 031f 	rsb	r3, r3, #31
 80091f4:	b2db      	uxtb	r3, r3
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	0800ab38 	.word	0x0800ab38

08009208 <__libc_init_array>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	4d0d      	ldr	r5, [pc, #52]	; (8009240 <__libc_init_array+0x38>)
 800920c:	4c0d      	ldr	r4, [pc, #52]	; (8009244 <__libc_init_array+0x3c>)
 800920e:	1b64      	subs	r4, r4, r5
 8009210:	10a4      	asrs	r4, r4, #2
 8009212:	2600      	movs	r6, #0
 8009214:	42a6      	cmp	r6, r4
 8009216:	d109      	bne.n	800922c <__libc_init_array+0x24>
 8009218:	4d0b      	ldr	r5, [pc, #44]	; (8009248 <__libc_init_array+0x40>)
 800921a:	4c0c      	ldr	r4, [pc, #48]	; (800924c <__libc_init_array+0x44>)
 800921c:	f001 fb44 	bl	800a8a8 <_init>
 8009220:	1b64      	subs	r4, r4, r5
 8009222:	10a4      	asrs	r4, r4, #2
 8009224:	2600      	movs	r6, #0
 8009226:	42a6      	cmp	r6, r4
 8009228:	d105      	bne.n	8009236 <__libc_init_array+0x2e>
 800922a:	bd70      	pop	{r4, r5, r6, pc}
 800922c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009230:	4798      	blx	r3
 8009232:	3601      	adds	r6, #1
 8009234:	e7ee      	b.n	8009214 <__libc_init_array+0xc>
 8009236:	f855 3b04 	ldr.w	r3, [r5], #4
 800923a:	4798      	blx	r3
 800923c:	3601      	adds	r6, #1
 800923e:	e7f2      	b.n	8009226 <__libc_init_array+0x1e>
 8009240:	0800adc4 	.word	0x0800adc4
 8009244:	0800adc4 	.word	0x0800adc4
 8009248:	0800adc4 	.word	0x0800adc4
 800924c:	0800adc8 	.word	0x0800adc8

08009250 <memcpy>:
 8009250:	440a      	add	r2, r1
 8009252:	4291      	cmp	r1, r2
 8009254:	f100 33ff 	add.w	r3, r0, #4294967295
 8009258:	d100      	bne.n	800925c <memcpy+0xc>
 800925a:	4770      	bx	lr
 800925c:	b510      	push	{r4, lr}
 800925e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009262:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009266:	4291      	cmp	r1, r2
 8009268:	d1f9      	bne.n	800925e <memcpy+0xe>
 800926a:	bd10      	pop	{r4, pc}

0800926c <memset>:
 800926c:	4402      	add	r2, r0
 800926e:	4603      	mov	r3, r0
 8009270:	4293      	cmp	r3, r2
 8009272:	d100      	bne.n	8009276 <memset+0xa>
 8009274:	4770      	bx	lr
 8009276:	f803 1b01 	strb.w	r1, [r3], #1
 800927a:	e7f9      	b.n	8009270 <memset+0x4>

0800927c <validate_structure>:
 800927c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800927e:	6801      	ldr	r1, [r0, #0]
 8009280:	293b      	cmp	r1, #59	; 0x3b
 8009282:	4604      	mov	r4, r0
 8009284:	d911      	bls.n	80092aa <validate_structure+0x2e>
 8009286:	223c      	movs	r2, #60	; 0x3c
 8009288:	4668      	mov	r0, sp
 800928a:	f000 fcab 	bl	8009be4 <div>
 800928e:	9a01      	ldr	r2, [sp, #4]
 8009290:	6863      	ldr	r3, [r4, #4]
 8009292:	9900      	ldr	r1, [sp, #0]
 8009294:	2a00      	cmp	r2, #0
 8009296:	440b      	add	r3, r1
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	bfbb      	ittet	lt
 800929c:	323c      	addlt	r2, #60	; 0x3c
 800929e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80092a2:	6022      	strge	r2, [r4, #0]
 80092a4:	6022      	strlt	r2, [r4, #0]
 80092a6:	bfb8      	it	lt
 80092a8:	6063      	strlt	r3, [r4, #4]
 80092aa:	6861      	ldr	r1, [r4, #4]
 80092ac:	293b      	cmp	r1, #59	; 0x3b
 80092ae:	d911      	bls.n	80092d4 <validate_structure+0x58>
 80092b0:	223c      	movs	r2, #60	; 0x3c
 80092b2:	4668      	mov	r0, sp
 80092b4:	f000 fc96 	bl	8009be4 <div>
 80092b8:	9a01      	ldr	r2, [sp, #4]
 80092ba:	68a3      	ldr	r3, [r4, #8]
 80092bc:	9900      	ldr	r1, [sp, #0]
 80092be:	2a00      	cmp	r2, #0
 80092c0:	440b      	add	r3, r1
 80092c2:	60a3      	str	r3, [r4, #8]
 80092c4:	bfbb      	ittet	lt
 80092c6:	323c      	addlt	r2, #60	; 0x3c
 80092c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80092cc:	6062      	strge	r2, [r4, #4]
 80092ce:	6062      	strlt	r2, [r4, #4]
 80092d0:	bfb8      	it	lt
 80092d2:	60a3      	strlt	r3, [r4, #8]
 80092d4:	68a1      	ldr	r1, [r4, #8]
 80092d6:	2917      	cmp	r1, #23
 80092d8:	d911      	bls.n	80092fe <validate_structure+0x82>
 80092da:	2218      	movs	r2, #24
 80092dc:	4668      	mov	r0, sp
 80092de:	f000 fc81 	bl	8009be4 <div>
 80092e2:	9a01      	ldr	r2, [sp, #4]
 80092e4:	68e3      	ldr	r3, [r4, #12]
 80092e6:	9900      	ldr	r1, [sp, #0]
 80092e8:	2a00      	cmp	r2, #0
 80092ea:	440b      	add	r3, r1
 80092ec:	60e3      	str	r3, [r4, #12]
 80092ee:	bfbb      	ittet	lt
 80092f0:	3218      	addlt	r2, #24
 80092f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80092f6:	60a2      	strge	r2, [r4, #8]
 80092f8:	60a2      	strlt	r2, [r4, #8]
 80092fa:	bfb8      	it	lt
 80092fc:	60e3      	strlt	r3, [r4, #12]
 80092fe:	6921      	ldr	r1, [r4, #16]
 8009300:	290b      	cmp	r1, #11
 8009302:	d911      	bls.n	8009328 <validate_structure+0xac>
 8009304:	220c      	movs	r2, #12
 8009306:	4668      	mov	r0, sp
 8009308:	f000 fc6c 	bl	8009be4 <div>
 800930c:	9a01      	ldr	r2, [sp, #4]
 800930e:	6963      	ldr	r3, [r4, #20]
 8009310:	9900      	ldr	r1, [sp, #0]
 8009312:	2a00      	cmp	r2, #0
 8009314:	440b      	add	r3, r1
 8009316:	6163      	str	r3, [r4, #20]
 8009318:	bfbb      	ittet	lt
 800931a:	320c      	addlt	r2, #12
 800931c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009320:	6122      	strge	r2, [r4, #16]
 8009322:	6122      	strlt	r2, [r4, #16]
 8009324:	bfb8      	it	lt
 8009326:	6163      	strlt	r3, [r4, #20]
 8009328:	6963      	ldr	r3, [r4, #20]
 800932a:	0799      	lsls	r1, r3, #30
 800932c:	d120      	bne.n	8009370 <validate_structure+0xf4>
 800932e:	2164      	movs	r1, #100	; 0x64
 8009330:	fb93 f2f1 	sdiv	r2, r3, r1
 8009334:	fb01 3212 	mls	r2, r1, r2, r3
 8009338:	b9e2      	cbnz	r2, 8009374 <validate_structure+0xf8>
 800933a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800933e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009342:	fb93 f2f1 	sdiv	r2, r3, r1
 8009346:	fb01 3312 	mls	r3, r1, r2, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	bf14      	ite	ne
 800934e:	231c      	movne	r3, #28
 8009350:	231d      	moveq	r3, #29
 8009352:	68e2      	ldr	r2, [r4, #12]
 8009354:	2a00      	cmp	r2, #0
 8009356:	dc0f      	bgt.n	8009378 <validate_structure+0xfc>
 8009358:	4f33      	ldr	r7, [pc, #204]	; (8009428 <validate_structure+0x1ac>)
 800935a:	260b      	movs	r6, #11
 800935c:	2064      	movs	r0, #100	; 0x64
 800935e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009362:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009366:	f1bc 0f00 	cmp.w	ip, #0
 800936a:	dd31      	ble.n	80093d0 <validate_structure+0x154>
 800936c:	b003      	add	sp, #12
 800936e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009370:	231c      	movs	r3, #28
 8009372:	e7ee      	b.n	8009352 <validate_structure+0xd6>
 8009374:	231d      	movs	r3, #29
 8009376:	e7ec      	b.n	8009352 <validate_structure+0xd6>
 8009378:	4f2b      	ldr	r7, [pc, #172]	; (8009428 <validate_structure+0x1ac>)
 800937a:	f04f 0c00 	mov.w	ip, #0
 800937e:	2564      	movs	r5, #100	; 0x64
 8009380:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8009384:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8009388:	2a01      	cmp	r2, #1
 800938a:	bf14      	ite	ne
 800938c:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8009390:	4618      	moveq	r0, r3
 8009392:	4281      	cmp	r1, r0
 8009394:	ddea      	ble.n	800936c <validate_structure+0xf0>
 8009396:	3201      	adds	r2, #1
 8009398:	1a09      	subs	r1, r1, r0
 800939a:	2a0c      	cmp	r2, #12
 800939c:	60e1      	str	r1, [r4, #12]
 800939e:	6122      	str	r2, [r4, #16]
 80093a0:	d1f0      	bne.n	8009384 <validate_structure+0x108>
 80093a2:	6963      	ldr	r3, [r4, #20]
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	0791      	lsls	r1, r2, #30
 80093a8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80093ac:	d137      	bne.n	800941e <validate_structure+0x1a2>
 80093ae:	fb92 f1f5 	sdiv	r1, r2, r5
 80093b2:	fb05 2211 	mls	r2, r5, r1, r2
 80093b6:	2a00      	cmp	r2, #0
 80093b8:	d133      	bne.n	8009422 <validate_structure+0x1a6>
 80093ba:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80093be:	fb93 f2f6 	sdiv	r2, r3, r6
 80093c2:	fb06 3312 	mls	r3, r6, r2, r3
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	bf14      	ite	ne
 80093ca:	231c      	movne	r3, #28
 80093cc:	231d      	moveq	r3, #29
 80093ce:	e7d9      	b.n	8009384 <validate_structure+0x108>
 80093d0:	6921      	ldr	r1, [r4, #16]
 80093d2:	3901      	subs	r1, #1
 80093d4:	6121      	str	r1, [r4, #16]
 80093d6:	3101      	adds	r1, #1
 80093d8:	d114      	bne.n	8009404 <validate_structure+0x188>
 80093da:	6963      	ldr	r3, [r4, #20]
 80093dc:	1e59      	subs	r1, r3, #1
 80093de:	078a      	lsls	r2, r1, #30
 80093e0:	e9c4 6104 	strd	r6, r1, [r4, #16]
 80093e4:	d117      	bne.n	8009416 <validate_structure+0x19a>
 80093e6:	fb91 f2f0 	sdiv	r2, r1, r0
 80093ea:	fb00 1112 	mls	r1, r0, r2, r1
 80093ee:	b9a1      	cbnz	r1, 800941a <validate_structure+0x19e>
 80093f0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80093f4:	fb93 f2f5 	sdiv	r2, r3, r5
 80093f8:	fb05 3312 	mls	r3, r5, r2, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	bf14      	ite	ne
 8009400:	231c      	movne	r3, #28
 8009402:	231d      	moveq	r3, #29
 8009404:	6922      	ldr	r2, [r4, #16]
 8009406:	2a01      	cmp	r2, #1
 8009408:	bf14      	ite	ne
 800940a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800940e:	461a      	moveq	r2, r3
 8009410:	4462      	add	r2, ip
 8009412:	60e2      	str	r2, [r4, #12]
 8009414:	e7a5      	b.n	8009362 <validate_structure+0xe6>
 8009416:	231c      	movs	r3, #28
 8009418:	e7f4      	b.n	8009404 <validate_structure+0x188>
 800941a:	231d      	movs	r3, #29
 800941c:	e7f2      	b.n	8009404 <validate_structure+0x188>
 800941e:	231c      	movs	r3, #28
 8009420:	e7b0      	b.n	8009384 <validate_structure+0x108>
 8009422:	231d      	movs	r3, #29
 8009424:	e7ae      	b.n	8009384 <validate_structure+0x108>
 8009426:	bf00      	nop
 8009428:	0800ab48 	.word	0x0800ab48

0800942c <mktime>:
 800942c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009430:	b08b      	sub	sp, #44	; 0x2c
 8009432:	4605      	mov	r5, r0
 8009434:	f000 fc2c 	bl	8009c90 <__gettzinfo>
 8009438:	4607      	mov	r7, r0
 800943a:	4628      	mov	r0, r5
 800943c:	f7ff ff1e 	bl	800927c <validate_structure>
 8009440:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009444:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8009448:	68a8      	ldr	r0, [r5, #8]
 800944a:	696e      	ldr	r6, [r5, #20]
 800944c:	fb0a 2303 	mla	r3, sl, r3, r2
 8009450:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8009454:	fb0a 3a00 	mla	sl, sl, r0, r3
 8009458:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 800945c:	4ac3      	ldr	r2, [pc, #780]	; (800976c <mktime+0x340>)
 800945e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009462:	3c01      	subs	r4, #1
 8009464:	2b01      	cmp	r3, #1
 8009466:	4414      	add	r4, r2
 8009468:	dd11      	ble.n	800948e <mktime+0x62>
 800946a:	07b1      	lsls	r1, r6, #30
 800946c:	d10f      	bne.n	800948e <mktime+0x62>
 800946e:	2264      	movs	r2, #100	; 0x64
 8009470:	fb96 f3f2 	sdiv	r3, r6, r2
 8009474:	fb02 6313 	mls	r3, r2, r3, r6
 8009478:	b943      	cbnz	r3, 800948c <mktime+0x60>
 800947a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 800947e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009482:	fb91 f3f2 	sdiv	r3, r1, r2
 8009486:	fb02 1313 	mls	r3, r2, r3, r1
 800948a:	b903      	cbnz	r3, 800948e <mktime+0x62>
 800948c:	3401      	adds	r4, #1
 800948e:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8009492:	3310      	adds	r3, #16
 8009494:	f644 6220 	movw	r2, #20000	; 0x4e20
 8009498:	4293      	cmp	r3, r2
 800949a:	61ec      	str	r4, [r5, #28]
 800949c:	f200 8161 	bhi.w	8009762 <mktime+0x336>
 80094a0:	2e46      	cmp	r6, #70	; 0x46
 80094a2:	dd77      	ble.n	8009594 <mktime+0x168>
 80094a4:	2346      	movs	r3, #70	; 0x46
 80094a6:	f240 1e6d 	movw	lr, #365	; 0x16d
 80094aa:	2164      	movs	r1, #100	; 0x64
 80094ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80094b0:	079a      	lsls	r2, r3, #30
 80094b2:	d169      	bne.n	8009588 <mktime+0x15c>
 80094b4:	fb93 f2f1 	sdiv	r2, r3, r1
 80094b8:	fb01 3212 	mls	r2, r1, r2, r3
 80094bc:	2a00      	cmp	r2, #0
 80094be:	d166      	bne.n	800958e <mktime+0x162>
 80094c0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80094c4:	fb9c f2f0 	sdiv	r2, ip, r0
 80094c8:	fb00 c212 	mls	r2, r0, r2, ip
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	bf14      	ite	ne
 80094d0:	4672      	movne	r2, lr
 80094d2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80094d6:	3301      	adds	r3, #1
 80094d8:	429e      	cmp	r6, r3
 80094da:	4414      	add	r4, r2
 80094dc:	d1e8      	bne.n	80094b0 <mktime+0x84>
 80094de:	4ba4      	ldr	r3, [pc, #656]	; (8009770 <mktime+0x344>)
 80094e0:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80094e4:	fbc3 ab04 	smlal	sl, fp, r3, r4
 80094e8:	f000 f9ee 	bl	80098c8 <__tz_lock>
 80094ec:	f000 f9f8 	bl	80098e0 <_tzset_unlocked>
 80094f0:	4ba0      	ldr	r3, [pc, #640]	; (8009774 <mktime+0x348>)
 80094f2:	f8d3 9000 	ldr.w	r9, [r3]
 80094f6:	f1b9 0f00 	cmp.w	r9, #0
 80094fa:	d03f      	beq.n	800957c <mktime+0x150>
 80094fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8009500:	6968      	ldr	r0, [r5, #20]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f1b9 0f01 	cmp.w	r9, #1
 8009508:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800950c:	46c8      	mov	r8, r9
 800950e:	bfa8      	it	ge
 8009510:	f04f 0801 	movge.w	r8, #1
 8009514:	4283      	cmp	r3, r0
 8009516:	d17f      	bne.n	8009618 <mktime+0x1ec>
 8009518:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800951a:	4619      	mov	r1, r3
 800951c:	17da      	asrs	r2, r3, #31
 800951e:	e9cd 1200 	strd	r1, r2, [sp]
 8009522:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009526:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800952a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800952e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009530:	1a80      	subs	r0, r0, r2
 8009532:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8009536:	4582      	cmp	sl, r0
 8009538:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800953c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009540:	da71      	bge.n	8009626 <mktime+0x1fa>
 8009542:	9800      	ldr	r0, [sp, #0]
 8009544:	6a39      	ldr	r1, [r7, #32]
 8009546:	1a09      	subs	r1, r1, r0
 8009548:	9104      	str	r1, [sp, #16]
 800954a:	9801      	ldr	r0, [sp, #4]
 800954c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800954e:	eb61 0100 	sbc.w	r1, r1, r0
 8009552:	9105      	str	r1, [sp, #20]
 8009554:	6839      	ldr	r1, [r7, #0]
 8009556:	2900      	cmp	r1, #0
 8009558:	d075      	beq.n	8009646 <mktime+0x21a>
 800955a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800955e:	4582      	cmp	sl, r0
 8009560:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009564:	db05      	blt.n	8009572 <mktime+0x146>
 8009566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800956a:	4582      	cmp	sl, r0
 800956c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009570:	db6f      	blt.n	8009652 <mktime+0x226>
 8009572:	f1b9 0f00 	cmp.w	r9, #0
 8009576:	f04f 0900 	mov.w	r9, #0
 800957a:	da6f      	bge.n	800965c <mktime+0x230>
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	eb1a 0a03 	adds.w	sl, sl, r3
 8009582:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009586:	e0ae      	b.n	80096e6 <mktime+0x2ba>
 8009588:	f240 126d 	movw	r2, #365	; 0x16d
 800958c:	e7a3      	b.n	80094d6 <mktime+0xaa>
 800958e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009592:	e7a0      	b.n	80094d6 <mktime+0xaa>
 8009594:	d0a3      	beq.n	80094de <mktime+0xb2>
 8009596:	2345      	movs	r3, #69	; 0x45
 8009598:	f240 1e6d 	movw	lr, #365	; 0x16d
 800959c:	2164      	movs	r1, #100	; 0x64
 800959e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80095a2:	e012      	b.n	80095ca <mktime+0x19e>
 80095a4:	bb62      	cbnz	r2, 8009600 <mktime+0x1d4>
 80095a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80095aa:	fb01 3212 	mls	r2, r1, r2, r3
 80095ae:	bb52      	cbnz	r2, 8009606 <mktime+0x1da>
 80095b0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80095b4:	fb9c f2f0 	sdiv	r2, ip, r0
 80095b8:	fb00 c212 	mls	r2, r0, r2, ip
 80095bc:	2a00      	cmp	r2, #0
 80095be:	bf14      	ite	ne
 80095c0:	4672      	movne	r2, lr
 80095c2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80095c6:	1aa4      	subs	r4, r4, r2
 80095c8:	3b01      	subs	r3, #1
 80095ca:	429e      	cmp	r6, r3
 80095cc:	f003 0203 	and.w	r2, r3, #3
 80095d0:	dbe8      	blt.n	80095a4 <mktime+0x178>
 80095d2:	b9da      	cbnz	r2, 800960c <mktime+0x1e0>
 80095d4:	2264      	movs	r2, #100	; 0x64
 80095d6:	fb96 f3f2 	sdiv	r3, r6, r2
 80095da:	fb02 6313 	mls	r3, r2, r3, r6
 80095de:	b9c3      	cbnz	r3, 8009612 <mktime+0x1e6>
 80095e0:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80095e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80095e8:	fb91 f3f2 	sdiv	r3, r1, r2
 80095ec:	fb02 1313 	mls	r3, r2, r3, r1
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f240 136d 	movw	r3, #365	; 0x16d
 80095f6:	bf08      	it	eq
 80095f8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80095fc:	1ae4      	subs	r4, r4, r3
 80095fe:	e76e      	b.n	80094de <mktime+0xb2>
 8009600:	f240 126d 	movw	r2, #365	; 0x16d
 8009604:	e7df      	b.n	80095c6 <mktime+0x19a>
 8009606:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800960a:	e7dc      	b.n	80095c6 <mktime+0x19a>
 800960c:	f240 136d 	movw	r3, #365	; 0x16d
 8009610:	e7f4      	b.n	80095fc <mktime+0x1d0>
 8009612:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009616:	e7f1      	b.n	80095fc <mktime+0x1d0>
 8009618:	f000 f8ae 	bl	8009778 <__tzcalc_limits>
 800961c:	2800      	cmp	r0, #0
 800961e:	f47f af7b 	bne.w	8009518 <mktime+0xec>
 8009622:	46c1      	mov	r9, r8
 8009624:	e054      	b.n	80096d0 <mktime+0x2a4>
 8009626:	9800      	ldr	r0, [sp, #0]
 8009628:	9902      	ldr	r1, [sp, #8]
 800962a:	1a09      	subs	r1, r1, r0
 800962c:	9108      	str	r1, [sp, #32]
 800962e:	9801      	ldr	r0, [sp, #4]
 8009630:	9903      	ldr	r1, [sp, #12]
 8009632:	eb61 0100 	sbc.w	r1, r1, r0
 8009636:	9109      	str	r1, [sp, #36]	; 0x24
 8009638:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800963c:	4582      	cmp	sl, r0
 800963e:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009642:	dbee      	blt.n	8009622 <mktime+0x1f6>
 8009644:	e77d      	b.n	8009542 <mktime+0x116>
 8009646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800964a:	4582      	cmp	sl, r0
 800964c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009650:	db89      	blt.n	8009566 <mktime+0x13a>
 8009652:	f1b9 0f00 	cmp.w	r9, #0
 8009656:	db3f      	blt.n	80096d8 <mktime+0x2ac>
 8009658:	f04f 0901 	mov.w	r9, #1
 800965c:	ea88 0809 	eor.w	r8, r8, r9
 8009660:	f1b8 0f01 	cmp.w	r8, #1
 8009664:	d134      	bne.n	80096d0 <mktime+0x2a4>
 8009666:	f1b9 0f00 	cmp.w	r9, #0
 800966a:	d04f      	beq.n	800970c <mktime+0x2e0>
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	682a      	ldr	r2, [r5, #0]
 8009670:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8009674:	441a      	add	r2, r3
 8009676:	eb1a 0a03 	adds.w	sl, sl, r3
 800967a:	602a      	str	r2, [r5, #0]
 800967c:	4628      	mov	r0, r5
 800967e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8009682:	f7ff fdfb 	bl	800927c <validate_structure>
 8009686:	68ea      	ldr	r2, [r5, #12]
 8009688:	ebb2 0208 	subs.w	r2, r2, r8
 800968c:	d020      	beq.n	80096d0 <mktime+0x2a4>
 800968e:	2a01      	cmp	r2, #1
 8009690:	dc3e      	bgt.n	8009710 <mktime+0x2e4>
 8009692:	1c90      	adds	r0, r2, #2
 8009694:	bfd8      	it	le
 8009696:	2201      	movle	r2, #1
 8009698:	69eb      	ldr	r3, [r5, #28]
 800969a:	18d3      	adds	r3, r2, r3
 800969c:	4414      	add	r4, r2
 800969e:	d540      	bpl.n	8009722 <mktime+0x2f6>
 80096a0:	1e72      	subs	r2, r6, #1
 80096a2:	0791      	lsls	r1, r2, #30
 80096a4:	d137      	bne.n	8009716 <mktime+0x2ea>
 80096a6:	2164      	movs	r1, #100	; 0x64
 80096a8:	fb92 f3f1 	sdiv	r3, r2, r1
 80096ac:	fb01 2313 	mls	r3, r1, r3, r2
 80096b0:	bba3      	cbnz	r3, 800971c <mktime+0x2f0>
 80096b2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80096b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80096ba:	fb96 f3f2 	sdiv	r3, r6, r2
 80096be:	fb02 6613 	mls	r6, r2, r3, r6
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	f240 136d 	movw	r3, #365	; 0x16d
 80096c8:	bf18      	it	ne
 80096ca:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80096ce:	61eb      	str	r3, [r5, #28]
 80096d0:	f1b9 0f01 	cmp.w	r9, #1
 80096d4:	f47f af52 	bne.w	800957c <mktime+0x150>
 80096d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096da:	eb1a 0a03 	adds.w	sl, sl, r3
 80096de:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80096e2:	f04f 0901 	mov.w	r9, #1
 80096e6:	f000 f8f5 	bl	80098d4 <__tz_unlock>
 80096ea:	3404      	adds	r4, #4
 80096ec:	2307      	movs	r3, #7
 80096ee:	fb94 f3f3 	sdiv	r3, r4, r3
 80096f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80096f6:	1ae4      	subs	r4, r4, r3
 80096f8:	bf48      	it	mi
 80096fa:	3407      	addmi	r4, #7
 80096fc:	f8c5 9020 	str.w	r9, [r5, #32]
 8009700:	61ac      	str	r4, [r5, #24]
 8009702:	4650      	mov	r0, sl
 8009704:	4659      	mov	r1, fp
 8009706:	b00b      	add	sp, #44	; 0x2c
 8009708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970c:	1a9b      	subs	r3, r3, r2
 800970e:	e7ae      	b.n	800966e <mktime+0x242>
 8009710:	f04f 32ff 	mov.w	r2, #4294967295
 8009714:	e7c0      	b.n	8009698 <mktime+0x26c>
 8009716:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800971a:	e7d8      	b.n	80096ce <mktime+0x2a2>
 800971c:	f240 136d 	movw	r3, #365	; 0x16d
 8009720:	e7d5      	b.n	80096ce <mktime+0x2a2>
 8009722:	07b2      	lsls	r2, r6, #30
 8009724:	d117      	bne.n	8009756 <mktime+0x32a>
 8009726:	2164      	movs	r1, #100	; 0x64
 8009728:	fb96 f2f1 	sdiv	r2, r6, r1
 800972c:	fb01 6212 	mls	r2, r1, r2, r6
 8009730:	b9a2      	cbnz	r2, 800975c <mktime+0x330>
 8009732:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8009736:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800973a:	fb96 f2f1 	sdiv	r2, r6, r1
 800973e:	fb01 6612 	mls	r6, r1, r2, r6
 8009742:	2e00      	cmp	r6, #0
 8009744:	f240 126d 	movw	r2, #365	; 0x16d
 8009748:	bf08      	it	eq
 800974a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800974e:	4293      	cmp	r3, r2
 8009750:	bfa8      	it	ge
 8009752:	1a9b      	subge	r3, r3, r2
 8009754:	e7bb      	b.n	80096ce <mktime+0x2a2>
 8009756:	f240 126d 	movw	r2, #365	; 0x16d
 800975a:	e7f8      	b.n	800974e <mktime+0x322>
 800975c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009760:	e7f5      	b.n	800974e <mktime+0x322>
 8009762:	f04f 3aff 	mov.w	sl, #4294967295
 8009766:	f04f 3bff 	mov.w	fp, #4294967295
 800976a:	e7ca      	b.n	8009702 <mktime+0x2d6>
 800976c:	0800ab78 	.word	0x0800ab78
 8009770:	00015180 	.word	0x00015180
 8009774:	200003fc 	.word	0x200003fc

08009778 <__tzcalc_limits>:
 8009778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	4680      	mov	r8, r0
 800977e:	f000 fa87 	bl	8009c90 <__gettzinfo>
 8009782:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009786:	4598      	cmp	r8, r3
 8009788:	f340 8098 	ble.w	80098bc <__tzcalc_limits+0x144>
 800978c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8009790:	4443      	add	r3, r8
 8009792:	109b      	asrs	r3, r3, #2
 8009794:	f240 126d 	movw	r2, #365	; 0x16d
 8009798:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800979c:	fb02 3505 	mla	r5, r2, r5, r3
 80097a0:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80097a4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80097a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80097ac:	441d      	add	r5, r3
 80097ae:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80097b2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80097b6:	fb98 f7f3 	sdiv	r7, r8, r3
 80097ba:	fb03 8717 	mls	r7, r3, r7, r8
 80097be:	4442      	add	r2, r8
 80097c0:	fab7 fc87 	clz	ip, r7
 80097c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80097c8:	f008 0303 	and.w	r3, r8, #3
 80097cc:	4415      	add	r5, r2
 80097ce:	2264      	movs	r2, #100	; 0x64
 80097d0:	f8c0 8004 	str.w	r8, [r0, #4]
 80097d4:	fb98 f6f2 	sdiv	r6, r8, r2
 80097d8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80097dc:	fb02 8616 	mls	r6, r2, r6, r8
 80097e0:	4604      	mov	r4, r0
 80097e2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	f04f 0e07 	mov.w	lr, #7
 80097ec:	7a22      	ldrb	r2, [r4, #8]
 80097ee:	6963      	ldr	r3, [r4, #20]
 80097f0:	2a4a      	cmp	r2, #74	; 0x4a
 80097f2:	d128      	bne.n	8009846 <__tzcalc_limits+0xce>
 80097f4:	9900      	ldr	r1, [sp, #0]
 80097f6:	18ea      	adds	r2, r5, r3
 80097f8:	b901      	cbnz	r1, 80097fc <__tzcalc_limits+0x84>
 80097fa:	b906      	cbnz	r6, 80097fe <__tzcalc_limits+0x86>
 80097fc:	bb0f      	cbnz	r7, 8009842 <__tzcalc_limits+0xca>
 80097fe:	2b3b      	cmp	r3, #59	; 0x3b
 8009800:	bfd4      	ite	le
 8009802:	2300      	movle	r3, #0
 8009804:	2301      	movgt	r3, #1
 8009806:	4413      	add	r3, r2
 8009808:	1e5a      	subs	r2, r3, #1
 800980a:	69a3      	ldr	r3, [r4, #24]
 800980c:	492c      	ldr	r1, [pc, #176]	; (80098c0 <__tzcalc_limits+0x148>)
 800980e:	fb01 3202 	mla	r2, r1, r2, r3
 8009812:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009814:	4413      	add	r3, r2
 8009816:	461a      	mov	r2, r3
 8009818:	17db      	asrs	r3, r3, #31
 800981a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800981e:	3428      	adds	r4, #40	; 0x28
 8009820:	45a3      	cmp	fp, r4
 8009822:	d1e3      	bne.n	80097ec <__tzcalc_limits+0x74>
 8009824:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8009828:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800982c:	4294      	cmp	r4, r2
 800982e:	eb75 0303 	sbcs.w	r3, r5, r3
 8009832:	bfb4      	ite	lt
 8009834:	2301      	movlt	r3, #1
 8009836:	2300      	movge	r3, #0
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	2001      	movs	r0, #1
 800983c:	b003      	add	sp, #12
 800983e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009842:	2300      	movs	r3, #0
 8009844:	e7df      	b.n	8009806 <__tzcalc_limits+0x8e>
 8009846:	2a44      	cmp	r2, #68	; 0x44
 8009848:	d101      	bne.n	800984e <__tzcalc_limits+0xd6>
 800984a:	18ea      	adds	r2, r5, r3
 800984c:	e7dd      	b.n	800980a <__tzcalc_limits+0x92>
 800984e:	9a00      	ldr	r2, [sp, #0]
 8009850:	bb72      	cbnz	r2, 80098b0 <__tzcalc_limits+0x138>
 8009852:	2e00      	cmp	r6, #0
 8009854:	bf0c      	ite	eq
 8009856:	46e0      	moveq	r8, ip
 8009858:	f04f 0801 	movne.w	r8, #1
 800985c:	4919      	ldr	r1, [pc, #100]	; (80098c4 <__tzcalc_limits+0x14c>)
 800985e:	68e2      	ldr	r2, [r4, #12]
 8009860:	9201      	str	r2, [sp, #4]
 8009862:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8009866:	fb0a 1808 	mla	r8, sl, r8, r1
 800986a:	462a      	mov	r2, r5
 800986c:	f04f 0900 	mov.w	r9, #0
 8009870:	f1a8 0804 	sub.w	r8, r8, #4
 8009874:	9901      	ldr	r1, [sp, #4]
 8009876:	f109 0901 	add.w	r9, r9, #1
 800987a:	4549      	cmp	r1, r9
 800987c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8009880:	dc18      	bgt.n	80098b4 <__tzcalc_limits+0x13c>
 8009882:	f102 0804 	add.w	r8, r2, #4
 8009886:	fb98 f9fe 	sdiv	r9, r8, lr
 800988a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800988e:	eba8 0909 	sub.w	r9, r8, r9
 8009892:	ebb3 0909 	subs.w	r9, r3, r9
 8009896:	6923      	ldr	r3, [r4, #16]
 8009898:	f103 33ff 	add.w	r3, r3, #4294967295
 800989c:	bf48      	it	mi
 800989e:	f109 0907 	addmi.w	r9, r9, #7
 80098a2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80098a6:	444b      	add	r3, r9
 80098a8:	4553      	cmp	r3, sl
 80098aa:	da05      	bge.n	80098b8 <__tzcalc_limits+0x140>
 80098ac:	441a      	add	r2, r3
 80098ae:	e7ac      	b.n	800980a <__tzcalc_limits+0x92>
 80098b0:	46e0      	mov	r8, ip
 80098b2:	e7d3      	b.n	800985c <__tzcalc_limits+0xe4>
 80098b4:	4452      	add	r2, sl
 80098b6:	e7dd      	b.n	8009874 <__tzcalc_limits+0xfc>
 80098b8:	3b07      	subs	r3, #7
 80098ba:	e7f5      	b.n	80098a8 <__tzcalc_limits+0x130>
 80098bc:	2000      	movs	r0, #0
 80098be:	e7bd      	b.n	800983c <__tzcalc_limits+0xc4>
 80098c0:	00015180 	.word	0x00015180
 80098c4:	0800ac44 	.word	0x0800ac44

080098c8 <__tz_lock>:
 80098c8:	4801      	ldr	r0, [pc, #4]	; (80098d0 <__tz_lock+0x8>)
 80098ca:	f000 b9e5 	b.w	8009c98 <__retarget_lock_acquire>
 80098ce:	bf00      	nop
 80098d0:	2000070f 	.word	0x2000070f

080098d4 <__tz_unlock>:
 80098d4:	4801      	ldr	r0, [pc, #4]	; (80098dc <__tz_unlock+0x8>)
 80098d6:	f000 b9e1 	b.w	8009c9c <__retarget_lock_release>
 80098da:	bf00      	nop
 80098dc:	2000070f 	.word	0x2000070f

080098e0 <_tzset_unlocked>:
 80098e0:	4b01      	ldr	r3, [pc, #4]	; (80098e8 <_tzset_unlocked+0x8>)
 80098e2:	6818      	ldr	r0, [r3, #0]
 80098e4:	f000 b802 	b.w	80098ec <_tzset_unlocked_r>
 80098e8:	20000044 	.word	0x20000044

080098ec <_tzset_unlocked_r>:
 80098ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f0:	b08d      	sub	sp, #52	; 0x34
 80098f2:	4607      	mov	r7, r0
 80098f4:	f000 f9cc 	bl	8009c90 <__gettzinfo>
 80098f8:	49ae      	ldr	r1, [pc, #696]	; (8009bb4 <_tzset_unlocked_r+0x2c8>)
 80098fa:	4eaf      	ldr	r6, [pc, #700]	; (8009bb8 <_tzset_unlocked_r+0x2cc>)
 80098fc:	4605      	mov	r5, r0
 80098fe:	4638      	mov	r0, r7
 8009900:	f000 f9be 	bl	8009c80 <_getenv_r>
 8009904:	4604      	mov	r4, r0
 8009906:	b970      	cbnz	r0, 8009926 <_tzset_unlocked_r+0x3a>
 8009908:	4bac      	ldr	r3, [pc, #688]	; (8009bbc <_tzset_unlocked_r+0x2d0>)
 800990a:	4aad      	ldr	r2, [pc, #692]	; (8009bc0 <_tzset_unlocked_r+0x2d4>)
 800990c:	6018      	str	r0, [r3, #0]
 800990e:	4bad      	ldr	r3, [pc, #692]	; (8009bc4 <_tzset_unlocked_r+0x2d8>)
 8009910:	6018      	str	r0, [r3, #0]
 8009912:	4bad      	ldr	r3, [pc, #692]	; (8009bc8 <_tzset_unlocked_r+0x2dc>)
 8009914:	6830      	ldr	r0, [r6, #0]
 8009916:	e9c3 2200 	strd	r2, r2, [r3]
 800991a:	f000 f9c1 	bl	8009ca0 <free>
 800991e:	6034      	str	r4, [r6, #0]
 8009920:	b00d      	add	sp, #52	; 0x34
 8009922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009926:	6831      	ldr	r1, [r6, #0]
 8009928:	2900      	cmp	r1, #0
 800992a:	d15f      	bne.n	80099ec <_tzset_unlocked_r+0x100>
 800992c:	6830      	ldr	r0, [r6, #0]
 800992e:	f000 f9b7 	bl	8009ca0 <free>
 8009932:	4620      	mov	r0, r4
 8009934:	f7f6 fc24 	bl	8000180 <strlen>
 8009938:	1c41      	adds	r1, r0, #1
 800993a:	4638      	mov	r0, r7
 800993c:	f000 fa08 	bl	8009d50 <_malloc_r>
 8009940:	6030      	str	r0, [r6, #0]
 8009942:	2800      	cmp	r0, #0
 8009944:	d157      	bne.n	80099f6 <_tzset_unlocked_r+0x10a>
 8009946:	7823      	ldrb	r3, [r4, #0]
 8009948:	4aa0      	ldr	r2, [pc, #640]	; (8009bcc <_tzset_unlocked_r+0x2e0>)
 800994a:	49a1      	ldr	r1, [pc, #644]	; (8009bd0 <_tzset_unlocked_r+0x2e4>)
 800994c:	2b3a      	cmp	r3, #58	; 0x3a
 800994e:	bf08      	it	eq
 8009950:	3401      	addeq	r4, #1
 8009952:	ae0a      	add	r6, sp, #40	; 0x28
 8009954:	4633      	mov	r3, r6
 8009956:	4620      	mov	r0, r4
 8009958:	f000 fa64 	bl	8009e24 <siscanf>
 800995c:	2800      	cmp	r0, #0
 800995e:	dddf      	ble.n	8009920 <_tzset_unlocked_r+0x34>
 8009960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009962:	18e7      	adds	r7, r4, r3
 8009964:	5ce3      	ldrb	r3, [r4, r3]
 8009966:	2b2d      	cmp	r3, #45	; 0x2d
 8009968:	d149      	bne.n	80099fe <_tzset_unlocked_r+0x112>
 800996a:	3701      	adds	r7, #1
 800996c:	f04f 34ff 	mov.w	r4, #4294967295
 8009970:	f10d 0a20 	add.w	sl, sp, #32
 8009974:	f10d 0b1e 	add.w	fp, sp, #30
 8009978:	f04f 0800 	mov.w	r8, #0
 800997c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009980:	4994      	ldr	r1, [pc, #592]	; (8009bd4 <_tzset_unlocked_r+0x2e8>)
 8009982:	9603      	str	r6, [sp, #12]
 8009984:	f8cd b000 	str.w	fp, [sp]
 8009988:	4633      	mov	r3, r6
 800998a:	aa07      	add	r2, sp, #28
 800998c:	4638      	mov	r0, r7
 800998e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8009992:	f8ad 8020 	strh.w	r8, [sp, #32]
 8009996:	f000 fa45 	bl	8009e24 <siscanf>
 800999a:	4540      	cmp	r0, r8
 800999c:	ddc0      	ble.n	8009920 <_tzset_unlocked_r+0x34>
 800999e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80099a2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80099a6:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8009be0 <_tzset_unlocked_r+0x2f4>
 80099aa:	213c      	movs	r1, #60	; 0x3c
 80099ac:	fb01 2203 	mla	r2, r1, r3, r2
 80099b0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80099b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80099b8:	fb01 2303 	mla	r3, r1, r3, r2
 80099bc:	435c      	muls	r4, r3
 80099be:	62ac      	str	r4, [r5, #40]	; 0x28
 80099c0:	4c81      	ldr	r4, [pc, #516]	; (8009bc8 <_tzset_unlocked_r+0x2dc>)
 80099c2:	4b82      	ldr	r3, [pc, #520]	; (8009bcc <_tzset_unlocked_r+0x2e0>)
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099c8:	4981      	ldr	r1, [pc, #516]	; (8009bd0 <_tzset_unlocked_r+0x2e4>)
 80099ca:	441f      	add	r7, r3
 80099cc:	464a      	mov	r2, r9
 80099ce:	4633      	mov	r3, r6
 80099d0:	4638      	mov	r0, r7
 80099d2:	f000 fa27 	bl	8009e24 <siscanf>
 80099d6:	4540      	cmp	r0, r8
 80099d8:	dc16      	bgt.n	8009a08 <_tzset_unlocked_r+0x11c>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	6063      	str	r3, [r4, #4]
 80099de:	4b77      	ldr	r3, [pc, #476]	; (8009bbc <_tzset_unlocked_r+0x2d0>)
 80099e0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	4b77      	ldr	r3, [pc, #476]	; (8009bc4 <_tzset_unlocked_r+0x2d8>)
 80099e6:	f8c3 8000 	str.w	r8, [r3]
 80099ea:	e799      	b.n	8009920 <_tzset_unlocked_r+0x34>
 80099ec:	f7f6 fbd0 	bl	8000190 <strcmp>
 80099f0:	2800      	cmp	r0, #0
 80099f2:	d19b      	bne.n	800992c <_tzset_unlocked_r+0x40>
 80099f4:	e794      	b.n	8009920 <_tzset_unlocked_r+0x34>
 80099f6:	4621      	mov	r1, r4
 80099f8:	f000 fa42 	bl	8009e80 <strcpy>
 80099fc:	e7a3      	b.n	8009946 <_tzset_unlocked_r+0x5a>
 80099fe:	2b2b      	cmp	r3, #43	; 0x2b
 8009a00:	bf08      	it	eq
 8009a02:	3701      	addeq	r7, #1
 8009a04:	2401      	movs	r4, #1
 8009a06:	e7b3      	b.n	8009970 <_tzset_unlocked_r+0x84>
 8009a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a0a:	f8c4 9004 	str.w	r9, [r4, #4]
 8009a0e:	18fc      	adds	r4, r7, r3
 8009a10:	5cfb      	ldrb	r3, [r7, r3]
 8009a12:	2b2d      	cmp	r3, #45	; 0x2d
 8009a14:	f040 808b 	bne.w	8009b2e <_tzset_unlocked_r+0x242>
 8009a18:	3401      	adds	r4, #1
 8009a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8009a1e:	2300      	movs	r3, #0
 8009a20:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009a24:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009a28:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009a2c:	930a      	str	r3, [sp, #40]	; 0x28
 8009a2e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009a32:	e9cd b600 	strd	fp, r6, [sp]
 8009a36:	4967      	ldr	r1, [pc, #412]	; (8009bd4 <_tzset_unlocked_r+0x2e8>)
 8009a38:	4633      	mov	r3, r6
 8009a3a:	aa07      	add	r2, sp, #28
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 f9f1 	bl	8009e24 <siscanf>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	dc78      	bgt.n	8009b38 <_tzset_unlocked_r+0x24c>
 8009a46:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8009a48:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8009a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a4e:	652f      	str	r7, [r5, #80]	; 0x50
 8009a50:	441c      	add	r4, r3
 8009a52:	462f      	mov	r7, r5
 8009a54:	f04f 0900 	mov.w	r9, #0
 8009a58:	7823      	ldrb	r3, [r4, #0]
 8009a5a:	2b2c      	cmp	r3, #44	; 0x2c
 8009a5c:	bf08      	it	eq
 8009a5e:	3401      	addeq	r4, #1
 8009a60:	f894 8000 	ldrb.w	r8, [r4]
 8009a64:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009a68:	d178      	bne.n	8009b5c <_tzset_unlocked_r+0x270>
 8009a6a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009a6e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009a72:	ab09      	add	r3, sp, #36	; 0x24
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	4958      	ldr	r1, [pc, #352]	; (8009bd8 <_tzset_unlocked_r+0x2ec>)
 8009a78:	9603      	str	r6, [sp, #12]
 8009a7a:	4633      	mov	r3, r6
 8009a7c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 f9cf 	bl	8009e24 <siscanf>
 8009a86:	2803      	cmp	r0, #3
 8009a88:	f47f af4a 	bne.w	8009920 <_tzset_unlocked_r+0x34>
 8009a8c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009a90:	1e4b      	subs	r3, r1, #1
 8009a92:	2b0b      	cmp	r3, #11
 8009a94:	f63f af44 	bhi.w	8009920 <_tzset_unlocked_r+0x34>
 8009a98:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009a9c:	1e53      	subs	r3, r2, #1
 8009a9e:	2b04      	cmp	r3, #4
 8009aa0:	f63f af3e 	bhi.w	8009920 <_tzset_unlocked_r+0x34>
 8009aa4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009aa8:	2b06      	cmp	r3, #6
 8009aaa:	f63f af39 	bhi.w	8009920 <_tzset_unlocked_r+0x34>
 8009aae:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009ab2:	f887 8008 	strb.w	r8, [r7, #8]
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aba:	eb04 0803 	add.w	r8, r4, r3
 8009abe:	2302      	movs	r3, #2
 8009ac0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009aca:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009ace:	930a      	str	r3, [sp, #40]	; 0x28
 8009ad0:	f898 3000 	ldrb.w	r3, [r8]
 8009ad4:	2b2f      	cmp	r3, #47	; 0x2f
 8009ad6:	d109      	bne.n	8009aec <_tzset_unlocked_r+0x200>
 8009ad8:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009adc:	e9cd b600 	strd	fp, r6, [sp]
 8009ae0:	493e      	ldr	r1, [pc, #248]	; (8009bdc <_tzset_unlocked_r+0x2f0>)
 8009ae2:	4633      	mov	r3, r6
 8009ae4:	aa07      	add	r2, sp, #28
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	f000 f99c 	bl	8009e24 <siscanf>
 8009aec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009af0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009af4:	213c      	movs	r1, #60	; 0x3c
 8009af6:	fb01 2203 	mla	r2, r1, r3, r2
 8009afa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009afe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009b02:	fb01 2303 	mla	r3, r1, r3, r2
 8009b06:	61bb      	str	r3, [r7, #24]
 8009b08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009b0a:	3728      	adds	r7, #40	; 0x28
 8009b0c:	4444      	add	r4, r8
 8009b0e:	f1b9 0f00 	cmp.w	r9, #0
 8009b12:	d020      	beq.n	8009b56 <_tzset_unlocked_r+0x26a>
 8009b14:	6868      	ldr	r0, [r5, #4]
 8009b16:	f7ff fe2f 	bl	8009778 <__tzcalc_limits>
 8009b1a:	4b28      	ldr	r3, [pc, #160]	; (8009bbc <_tzset_unlocked_r+0x2d0>)
 8009b1c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009b1e:	601a      	str	r2, [r3, #0]
 8009b20:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009b22:	1a9b      	subs	r3, r3, r2
 8009b24:	4a27      	ldr	r2, [pc, #156]	; (8009bc4 <_tzset_unlocked_r+0x2d8>)
 8009b26:	bf18      	it	ne
 8009b28:	2301      	movne	r3, #1
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	e6f8      	b.n	8009920 <_tzset_unlocked_r+0x34>
 8009b2e:	2b2b      	cmp	r3, #43	; 0x2b
 8009b30:	bf08      	it	eq
 8009b32:	3401      	addeq	r4, #1
 8009b34:	2701      	movs	r7, #1
 8009b36:	e772      	b.n	8009a1e <_tzset_unlocked_r+0x132>
 8009b38:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009b3c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009b40:	213c      	movs	r1, #60	; 0x3c
 8009b42:	fb01 2203 	mla	r2, r1, r3, r2
 8009b46:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009b4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009b4e:	fb01 2303 	mla	r3, r1, r3, r2
 8009b52:	435f      	muls	r7, r3
 8009b54:	e77a      	b.n	8009a4c <_tzset_unlocked_r+0x160>
 8009b56:	f04f 0901 	mov.w	r9, #1
 8009b5a:	e77d      	b.n	8009a58 <_tzset_unlocked_r+0x16c>
 8009b5c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8009b60:	bf06      	itte	eq
 8009b62:	3401      	addeq	r4, #1
 8009b64:	4643      	moveq	r3, r8
 8009b66:	2344      	movne	r3, #68	; 0x44
 8009b68:	220a      	movs	r2, #10
 8009b6a:	a90b      	add	r1, sp, #44	; 0x2c
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	9305      	str	r3, [sp, #20]
 8009b70:	f000 fa1e 	bl	8009fb0 <strtoul>
 8009b74:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8009b78:	9b05      	ldr	r3, [sp, #20]
 8009b7a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8009b7e:	45a0      	cmp	r8, r4
 8009b80:	d114      	bne.n	8009bac <_tzset_unlocked_r+0x2c0>
 8009b82:	234d      	movs	r3, #77	; 0x4d
 8009b84:	f1b9 0f00 	cmp.w	r9, #0
 8009b88:	d107      	bne.n	8009b9a <_tzset_unlocked_r+0x2ae>
 8009b8a:	722b      	strb	r3, [r5, #8]
 8009b8c:	2103      	movs	r1, #3
 8009b8e:	2302      	movs	r3, #2
 8009b90:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8009b94:	f8c5 9014 	str.w	r9, [r5, #20]
 8009b98:	e791      	b.n	8009abe <_tzset_unlocked_r+0x1d2>
 8009b9a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8009b9e:	220b      	movs	r2, #11
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	63eb      	str	r3, [r5, #60]	; 0x3c
 8009baa:	e788      	b.n	8009abe <_tzset_unlocked_r+0x1d2>
 8009bac:	b280      	uxth	r0, r0
 8009bae:	723b      	strb	r3, [r7, #8]
 8009bb0:	6178      	str	r0, [r7, #20]
 8009bb2:	e784      	b.n	8009abe <_tzset_unlocked_r+0x1d2>
 8009bb4:	0800aba8 	.word	0x0800aba8
 8009bb8:	200003f8 	.word	0x200003f8
 8009bbc:	20000400 	.word	0x20000400
 8009bc0:	0800abab 	.word	0x0800abab
 8009bc4:	200003fc 	.word	0x200003fc
 8009bc8:	200000a8 	.word	0x200000a8
 8009bcc:	200003eb 	.word	0x200003eb
 8009bd0:	0800abaf 	.word	0x0800abaf
 8009bd4:	0800abd2 	.word	0x0800abd2
 8009bd8:	0800abbe 	.word	0x0800abbe
 8009bdc:	0800abd1 	.word	0x0800abd1
 8009be0:	200003e0 	.word	0x200003e0

08009be4 <div>:
 8009be4:	2900      	cmp	r1, #0
 8009be6:	b510      	push	{r4, lr}
 8009be8:	fb91 f4f2 	sdiv	r4, r1, r2
 8009bec:	fb02 1314 	mls	r3, r2, r4, r1
 8009bf0:	db06      	blt.n	8009c00 <div+0x1c>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	da01      	bge.n	8009bfa <div+0x16>
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	e9c0 4300 	strd	r4, r3, [r0]
 8009bfe:	bd10      	pop	{r4, pc}
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	bfc4      	itt	gt
 8009c04:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009c08:	189b      	addgt	r3, r3, r2
 8009c0a:	e7f6      	b.n	8009bfa <div+0x16>

08009c0c <_findenv_r>:
 8009c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c10:	4607      	mov	r7, r0
 8009c12:	4689      	mov	r9, r1
 8009c14:	4616      	mov	r6, r2
 8009c16:	f000 f9d5 	bl	8009fc4 <__env_lock>
 8009c1a:	4b18      	ldr	r3, [pc, #96]	; (8009c7c <_findenv_r+0x70>)
 8009c1c:	681c      	ldr	r4, [r3, #0]
 8009c1e:	469a      	mov	sl, r3
 8009c20:	b134      	cbz	r4, 8009c30 <_findenv_r+0x24>
 8009c22:	464b      	mov	r3, r9
 8009c24:	4698      	mov	r8, r3
 8009c26:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009c2a:	b139      	cbz	r1, 8009c3c <_findenv_r+0x30>
 8009c2c:	293d      	cmp	r1, #61	; 0x3d
 8009c2e:	d1f9      	bne.n	8009c24 <_findenv_r+0x18>
 8009c30:	4638      	mov	r0, r7
 8009c32:	f000 f9cd 	bl	8009fd0 <__env_unlock>
 8009c36:	2000      	movs	r0, #0
 8009c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	eba8 0809 	sub.w	r8, r8, r9
 8009c40:	46a3      	mov	fp, r4
 8009c42:	f854 0b04 	ldr.w	r0, [r4], #4
 8009c46:	2800      	cmp	r0, #0
 8009c48:	d0f2      	beq.n	8009c30 <_findenv_r+0x24>
 8009c4a:	4642      	mov	r2, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f000 f91f 	bl	8009e90 <strncmp>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d1f4      	bne.n	8009c40 <_findenv_r+0x34>
 8009c56:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009c5a:	eb03 0508 	add.w	r5, r3, r8
 8009c5e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8009c62:	2b3d      	cmp	r3, #61	; 0x3d
 8009c64:	d1ec      	bne.n	8009c40 <_findenv_r+0x34>
 8009c66:	f8da 3000 	ldr.w	r3, [sl]
 8009c6a:	ebab 0303 	sub.w	r3, fp, r3
 8009c6e:	109b      	asrs	r3, r3, #2
 8009c70:	4638      	mov	r0, r7
 8009c72:	6033      	str	r3, [r6, #0]
 8009c74:	f000 f9ac 	bl	8009fd0 <__env_unlock>
 8009c78:	1c68      	adds	r0, r5, #1
 8009c7a:	e7dd      	b.n	8009c38 <_findenv_r+0x2c>
 8009c7c:	20000108 	.word	0x20000108

08009c80 <_getenv_r>:
 8009c80:	b507      	push	{r0, r1, r2, lr}
 8009c82:	aa01      	add	r2, sp, #4
 8009c84:	f7ff ffc2 	bl	8009c0c <_findenv_r>
 8009c88:	b003      	add	sp, #12
 8009c8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009c90 <__gettzinfo>:
 8009c90:	4800      	ldr	r0, [pc, #0]	; (8009c94 <__gettzinfo+0x4>)
 8009c92:	4770      	bx	lr
 8009c94:	200000b0 	.word	0x200000b0

08009c98 <__retarget_lock_acquire>:
 8009c98:	4770      	bx	lr

08009c9a <__retarget_lock_acquire_recursive>:
 8009c9a:	4770      	bx	lr

08009c9c <__retarget_lock_release>:
 8009c9c:	4770      	bx	lr

08009c9e <__retarget_lock_release_recursive>:
 8009c9e:	4770      	bx	lr

08009ca0 <free>:
 8009ca0:	4b02      	ldr	r3, [pc, #8]	; (8009cac <free+0xc>)
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	6818      	ldr	r0, [r3, #0]
 8009ca6:	f000 b803 	b.w	8009cb0 <_free_r>
 8009caa:	bf00      	nop
 8009cac:	20000044 	.word	0x20000044

08009cb0 <_free_r>:
 8009cb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cb2:	2900      	cmp	r1, #0
 8009cb4:	d048      	beq.n	8009d48 <_free_r+0x98>
 8009cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cba:	9001      	str	r0, [sp, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f1a1 0404 	sub.w	r4, r1, #4
 8009cc2:	bfb8      	it	lt
 8009cc4:	18e4      	addlt	r4, r4, r3
 8009cc6:	f000 f989 	bl	8009fdc <__malloc_lock>
 8009cca:	4a20      	ldr	r2, [pc, #128]	; (8009d4c <_free_r+0x9c>)
 8009ccc:	9801      	ldr	r0, [sp, #4]
 8009cce:	6813      	ldr	r3, [r2, #0]
 8009cd0:	4615      	mov	r5, r2
 8009cd2:	b933      	cbnz	r3, 8009ce2 <_free_r+0x32>
 8009cd4:	6063      	str	r3, [r4, #4]
 8009cd6:	6014      	str	r4, [r2, #0]
 8009cd8:	b003      	add	sp, #12
 8009cda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cde:	f000 b983 	b.w	8009fe8 <__malloc_unlock>
 8009ce2:	42a3      	cmp	r3, r4
 8009ce4:	d90b      	bls.n	8009cfe <_free_r+0x4e>
 8009ce6:	6821      	ldr	r1, [r4, #0]
 8009ce8:	1862      	adds	r2, r4, r1
 8009cea:	4293      	cmp	r3, r2
 8009cec:	bf04      	itt	eq
 8009cee:	681a      	ldreq	r2, [r3, #0]
 8009cf0:	685b      	ldreq	r3, [r3, #4]
 8009cf2:	6063      	str	r3, [r4, #4]
 8009cf4:	bf04      	itt	eq
 8009cf6:	1852      	addeq	r2, r2, r1
 8009cf8:	6022      	streq	r2, [r4, #0]
 8009cfa:	602c      	str	r4, [r5, #0]
 8009cfc:	e7ec      	b.n	8009cd8 <_free_r+0x28>
 8009cfe:	461a      	mov	r2, r3
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	b10b      	cbz	r3, 8009d08 <_free_r+0x58>
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	d9fa      	bls.n	8009cfe <_free_r+0x4e>
 8009d08:	6811      	ldr	r1, [r2, #0]
 8009d0a:	1855      	adds	r5, r2, r1
 8009d0c:	42a5      	cmp	r5, r4
 8009d0e:	d10b      	bne.n	8009d28 <_free_r+0x78>
 8009d10:	6824      	ldr	r4, [r4, #0]
 8009d12:	4421      	add	r1, r4
 8009d14:	1854      	adds	r4, r2, r1
 8009d16:	42a3      	cmp	r3, r4
 8009d18:	6011      	str	r1, [r2, #0]
 8009d1a:	d1dd      	bne.n	8009cd8 <_free_r+0x28>
 8009d1c:	681c      	ldr	r4, [r3, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	6053      	str	r3, [r2, #4]
 8009d22:	4421      	add	r1, r4
 8009d24:	6011      	str	r1, [r2, #0]
 8009d26:	e7d7      	b.n	8009cd8 <_free_r+0x28>
 8009d28:	d902      	bls.n	8009d30 <_free_r+0x80>
 8009d2a:	230c      	movs	r3, #12
 8009d2c:	6003      	str	r3, [r0, #0]
 8009d2e:	e7d3      	b.n	8009cd8 <_free_r+0x28>
 8009d30:	6825      	ldr	r5, [r4, #0]
 8009d32:	1961      	adds	r1, r4, r5
 8009d34:	428b      	cmp	r3, r1
 8009d36:	bf04      	itt	eq
 8009d38:	6819      	ldreq	r1, [r3, #0]
 8009d3a:	685b      	ldreq	r3, [r3, #4]
 8009d3c:	6063      	str	r3, [r4, #4]
 8009d3e:	bf04      	itt	eq
 8009d40:	1949      	addeq	r1, r1, r5
 8009d42:	6021      	streq	r1, [r4, #0]
 8009d44:	6054      	str	r4, [r2, #4]
 8009d46:	e7c7      	b.n	8009cd8 <_free_r+0x28>
 8009d48:	b003      	add	sp, #12
 8009d4a:	bd30      	pop	{r4, r5, pc}
 8009d4c:	20000404 	.word	0x20000404

08009d50 <_malloc_r>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	1ccd      	adds	r5, r1, #3
 8009d54:	f025 0503 	bic.w	r5, r5, #3
 8009d58:	3508      	adds	r5, #8
 8009d5a:	2d0c      	cmp	r5, #12
 8009d5c:	bf38      	it	cc
 8009d5e:	250c      	movcc	r5, #12
 8009d60:	2d00      	cmp	r5, #0
 8009d62:	4606      	mov	r6, r0
 8009d64:	db01      	blt.n	8009d6a <_malloc_r+0x1a>
 8009d66:	42a9      	cmp	r1, r5
 8009d68:	d903      	bls.n	8009d72 <_malloc_r+0x22>
 8009d6a:	230c      	movs	r3, #12
 8009d6c:	6033      	str	r3, [r6, #0]
 8009d6e:	2000      	movs	r0, #0
 8009d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d72:	f000 f933 	bl	8009fdc <__malloc_lock>
 8009d76:	4921      	ldr	r1, [pc, #132]	; (8009dfc <_malloc_r+0xac>)
 8009d78:	680a      	ldr	r2, [r1, #0]
 8009d7a:	4614      	mov	r4, r2
 8009d7c:	b99c      	cbnz	r4, 8009da6 <_malloc_r+0x56>
 8009d7e:	4f20      	ldr	r7, [pc, #128]	; (8009e00 <_malloc_r+0xb0>)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	b923      	cbnz	r3, 8009d8e <_malloc_r+0x3e>
 8009d84:	4621      	mov	r1, r4
 8009d86:	4630      	mov	r0, r6
 8009d88:	f000 f83c 	bl	8009e04 <_sbrk_r>
 8009d8c:	6038      	str	r0, [r7, #0]
 8009d8e:	4629      	mov	r1, r5
 8009d90:	4630      	mov	r0, r6
 8009d92:	f000 f837 	bl	8009e04 <_sbrk_r>
 8009d96:	1c43      	adds	r3, r0, #1
 8009d98:	d123      	bne.n	8009de2 <_malloc_r+0x92>
 8009d9a:	230c      	movs	r3, #12
 8009d9c:	6033      	str	r3, [r6, #0]
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f000 f922 	bl	8009fe8 <__malloc_unlock>
 8009da4:	e7e3      	b.n	8009d6e <_malloc_r+0x1e>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	1b5b      	subs	r3, r3, r5
 8009daa:	d417      	bmi.n	8009ddc <_malloc_r+0x8c>
 8009dac:	2b0b      	cmp	r3, #11
 8009dae:	d903      	bls.n	8009db8 <_malloc_r+0x68>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	441c      	add	r4, r3
 8009db4:	6025      	str	r5, [r4, #0]
 8009db6:	e004      	b.n	8009dc2 <_malloc_r+0x72>
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	42a2      	cmp	r2, r4
 8009dbc:	bf0c      	ite	eq
 8009dbe:	600b      	streq	r3, [r1, #0]
 8009dc0:	6053      	strne	r3, [r2, #4]
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f000 f910 	bl	8009fe8 <__malloc_unlock>
 8009dc8:	f104 000b 	add.w	r0, r4, #11
 8009dcc:	1d23      	adds	r3, r4, #4
 8009dce:	f020 0007 	bic.w	r0, r0, #7
 8009dd2:	1ac2      	subs	r2, r0, r3
 8009dd4:	d0cc      	beq.n	8009d70 <_malloc_r+0x20>
 8009dd6:	1a1b      	subs	r3, r3, r0
 8009dd8:	50a3      	str	r3, [r4, r2]
 8009dda:	e7c9      	b.n	8009d70 <_malloc_r+0x20>
 8009ddc:	4622      	mov	r2, r4
 8009dde:	6864      	ldr	r4, [r4, #4]
 8009de0:	e7cc      	b.n	8009d7c <_malloc_r+0x2c>
 8009de2:	1cc4      	adds	r4, r0, #3
 8009de4:	f024 0403 	bic.w	r4, r4, #3
 8009de8:	42a0      	cmp	r0, r4
 8009dea:	d0e3      	beq.n	8009db4 <_malloc_r+0x64>
 8009dec:	1a21      	subs	r1, r4, r0
 8009dee:	4630      	mov	r0, r6
 8009df0:	f000 f808 	bl	8009e04 <_sbrk_r>
 8009df4:	3001      	adds	r0, #1
 8009df6:	d1dd      	bne.n	8009db4 <_malloc_r+0x64>
 8009df8:	e7cf      	b.n	8009d9a <_malloc_r+0x4a>
 8009dfa:	bf00      	nop
 8009dfc:	20000404 	.word	0x20000404
 8009e00:	20000408 	.word	0x20000408

08009e04 <_sbrk_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d06      	ldr	r5, [pc, #24]	; (8009e20 <_sbrk_r+0x1c>)
 8009e08:	2300      	movs	r3, #0
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	4608      	mov	r0, r1
 8009e0e:	602b      	str	r3, [r5, #0]
 8009e10:	f000 fd3c 	bl	800a88c <_sbrk>
 8009e14:	1c43      	adds	r3, r0, #1
 8009e16:	d102      	bne.n	8009e1e <_sbrk_r+0x1a>
 8009e18:	682b      	ldr	r3, [r5, #0]
 8009e1a:	b103      	cbz	r3, 8009e1e <_sbrk_r+0x1a>
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	bd38      	pop	{r3, r4, r5, pc}
 8009e20:	20000714 	.word	0x20000714

08009e24 <siscanf>:
 8009e24:	b40e      	push	{r1, r2, r3}
 8009e26:	b510      	push	{r4, lr}
 8009e28:	b09f      	sub	sp, #124	; 0x7c
 8009e2a:	ac21      	add	r4, sp, #132	; 0x84
 8009e2c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009e30:	f854 2b04 	ldr.w	r2, [r4], #4
 8009e34:	9201      	str	r2, [sp, #4]
 8009e36:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009e3a:	9004      	str	r0, [sp, #16]
 8009e3c:	9008      	str	r0, [sp, #32]
 8009e3e:	f7f6 f99f 	bl	8000180 <strlen>
 8009e42:	4b0c      	ldr	r3, [pc, #48]	; (8009e74 <siscanf+0x50>)
 8009e44:	9005      	str	r0, [sp, #20]
 8009e46:	9009      	str	r0, [sp, #36]	; 0x24
 8009e48:	930d      	str	r3, [sp, #52]	; 0x34
 8009e4a:	480b      	ldr	r0, [pc, #44]	; (8009e78 <siscanf+0x54>)
 8009e4c:	9a01      	ldr	r2, [sp, #4]
 8009e4e:	6800      	ldr	r0, [r0, #0]
 8009e50:	9403      	str	r4, [sp, #12]
 8009e52:	2300      	movs	r3, #0
 8009e54:	9311      	str	r3, [sp, #68]	; 0x44
 8009e56:	9316      	str	r3, [sp, #88]	; 0x58
 8009e58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e5c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009e60:	a904      	add	r1, sp, #16
 8009e62:	4623      	mov	r3, r4
 8009e64:	f000 f946 	bl	800a0f4 <__ssvfiscanf_r>
 8009e68:	b01f      	add	sp, #124	; 0x7c
 8009e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e6e:	b003      	add	sp, #12
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	08009e7d 	.word	0x08009e7d
 8009e78:	20000044 	.word	0x20000044

08009e7c <__seofread>:
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	4770      	bx	lr

08009e80 <strcpy>:
 8009e80:	4603      	mov	r3, r0
 8009e82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e86:	f803 2b01 	strb.w	r2, [r3], #1
 8009e8a:	2a00      	cmp	r2, #0
 8009e8c:	d1f9      	bne.n	8009e82 <strcpy+0x2>
 8009e8e:	4770      	bx	lr

08009e90 <strncmp>:
 8009e90:	b510      	push	{r4, lr}
 8009e92:	b16a      	cbz	r2, 8009eb0 <strncmp+0x20>
 8009e94:	3901      	subs	r1, #1
 8009e96:	1884      	adds	r4, r0, r2
 8009e98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d103      	bne.n	8009eac <strncmp+0x1c>
 8009ea4:	42a0      	cmp	r0, r4
 8009ea6:	d001      	beq.n	8009eac <strncmp+0x1c>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1f5      	bne.n	8009e98 <strncmp+0x8>
 8009eac:	1a98      	subs	r0, r3, r2
 8009eae:	bd10      	pop	{r4, pc}
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	e7fc      	b.n	8009eae <strncmp+0x1e>

08009eb4 <_strtoul_l.isra.0>:
 8009eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eb8:	4e3b      	ldr	r6, [pc, #236]	; (8009fa8 <_strtoul_l.isra.0+0xf4>)
 8009eba:	4686      	mov	lr, r0
 8009ebc:	468c      	mov	ip, r1
 8009ebe:	4660      	mov	r0, ip
 8009ec0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009ec4:	5da5      	ldrb	r5, [r4, r6]
 8009ec6:	f015 0508 	ands.w	r5, r5, #8
 8009eca:	d1f8      	bne.n	8009ebe <_strtoul_l.isra.0+0xa>
 8009ecc:	2c2d      	cmp	r4, #45	; 0x2d
 8009ece:	d134      	bne.n	8009f3a <_strtoul_l.isra.0+0x86>
 8009ed0:	f89c 4000 	ldrb.w	r4, [ip]
 8009ed4:	f04f 0801 	mov.w	r8, #1
 8009ed8:	f100 0c02 	add.w	ip, r0, #2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d05e      	beq.n	8009f9e <_strtoul_l.isra.0+0xea>
 8009ee0:	2b10      	cmp	r3, #16
 8009ee2:	d10c      	bne.n	8009efe <_strtoul_l.isra.0+0x4a>
 8009ee4:	2c30      	cmp	r4, #48	; 0x30
 8009ee6:	d10a      	bne.n	8009efe <_strtoul_l.isra.0+0x4a>
 8009ee8:	f89c 0000 	ldrb.w	r0, [ip]
 8009eec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009ef0:	2858      	cmp	r0, #88	; 0x58
 8009ef2:	d14f      	bne.n	8009f94 <_strtoul_l.isra.0+0xe0>
 8009ef4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009ef8:	2310      	movs	r3, #16
 8009efa:	f10c 0c02 	add.w	ip, ip, #2
 8009efe:	f04f 37ff 	mov.w	r7, #4294967295
 8009f02:	2500      	movs	r5, #0
 8009f04:	fbb7 f7f3 	udiv	r7, r7, r3
 8009f08:	fb03 f907 	mul.w	r9, r3, r7
 8009f0c:	ea6f 0909 	mvn.w	r9, r9
 8009f10:	4628      	mov	r0, r5
 8009f12:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009f16:	2e09      	cmp	r6, #9
 8009f18:	d818      	bhi.n	8009f4c <_strtoul_l.isra.0+0x98>
 8009f1a:	4634      	mov	r4, r6
 8009f1c:	42a3      	cmp	r3, r4
 8009f1e:	dd24      	ble.n	8009f6a <_strtoul_l.isra.0+0xb6>
 8009f20:	2d00      	cmp	r5, #0
 8009f22:	db1f      	blt.n	8009f64 <_strtoul_l.isra.0+0xb0>
 8009f24:	4287      	cmp	r7, r0
 8009f26:	d31d      	bcc.n	8009f64 <_strtoul_l.isra.0+0xb0>
 8009f28:	d101      	bne.n	8009f2e <_strtoul_l.isra.0+0x7a>
 8009f2a:	45a1      	cmp	r9, r4
 8009f2c:	db1a      	blt.n	8009f64 <_strtoul_l.isra.0+0xb0>
 8009f2e:	fb00 4003 	mla	r0, r0, r3, r4
 8009f32:	2501      	movs	r5, #1
 8009f34:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009f38:	e7eb      	b.n	8009f12 <_strtoul_l.isra.0+0x5e>
 8009f3a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f3c:	bf08      	it	eq
 8009f3e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009f42:	46a8      	mov	r8, r5
 8009f44:	bf08      	it	eq
 8009f46:	f100 0c02 	addeq.w	ip, r0, #2
 8009f4a:	e7c7      	b.n	8009edc <_strtoul_l.isra.0+0x28>
 8009f4c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009f50:	2e19      	cmp	r6, #25
 8009f52:	d801      	bhi.n	8009f58 <_strtoul_l.isra.0+0xa4>
 8009f54:	3c37      	subs	r4, #55	; 0x37
 8009f56:	e7e1      	b.n	8009f1c <_strtoul_l.isra.0+0x68>
 8009f58:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009f5c:	2e19      	cmp	r6, #25
 8009f5e:	d804      	bhi.n	8009f6a <_strtoul_l.isra.0+0xb6>
 8009f60:	3c57      	subs	r4, #87	; 0x57
 8009f62:	e7db      	b.n	8009f1c <_strtoul_l.isra.0+0x68>
 8009f64:	f04f 35ff 	mov.w	r5, #4294967295
 8009f68:	e7e4      	b.n	8009f34 <_strtoul_l.isra.0+0x80>
 8009f6a:	2d00      	cmp	r5, #0
 8009f6c:	da07      	bge.n	8009f7e <_strtoul_l.isra.0+0xca>
 8009f6e:	2322      	movs	r3, #34	; 0x22
 8009f70:	f8ce 3000 	str.w	r3, [lr]
 8009f74:	f04f 30ff 	mov.w	r0, #4294967295
 8009f78:	b942      	cbnz	r2, 8009f8c <_strtoul_l.isra.0+0xd8>
 8009f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f7e:	f1b8 0f00 	cmp.w	r8, #0
 8009f82:	d000      	beq.n	8009f86 <_strtoul_l.isra.0+0xd2>
 8009f84:	4240      	negs	r0, r0
 8009f86:	2a00      	cmp	r2, #0
 8009f88:	d0f7      	beq.n	8009f7a <_strtoul_l.isra.0+0xc6>
 8009f8a:	b10d      	cbz	r5, 8009f90 <_strtoul_l.isra.0+0xdc>
 8009f8c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009f90:	6011      	str	r1, [r2, #0]
 8009f92:	e7f2      	b.n	8009f7a <_strtoul_l.isra.0+0xc6>
 8009f94:	2430      	movs	r4, #48	; 0x30
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1b1      	bne.n	8009efe <_strtoul_l.isra.0+0x4a>
 8009f9a:	2308      	movs	r3, #8
 8009f9c:	e7af      	b.n	8009efe <_strtoul_l.isra.0+0x4a>
 8009f9e:	2c30      	cmp	r4, #48	; 0x30
 8009fa0:	d0a2      	beq.n	8009ee8 <_strtoul_l.isra.0+0x34>
 8009fa2:	230a      	movs	r3, #10
 8009fa4:	e7ab      	b.n	8009efe <_strtoul_l.isra.0+0x4a>
 8009fa6:	bf00      	nop
 8009fa8:	0800aca5 	.word	0x0800aca5

08009fac <_strtoul_r>:
 8009fac:	f7ff bf82 	b.w	8009eb4 <_strtoul_l.isra.0>

08009fb0 <strtoul>:
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	460a      	mov	r2, r1
 8009fb4:	4601      	mov	r1, r0
 8009fb6:	4802      	ldr	r0, [pc, #8]	; (8009fc0 <strtoul+0x10>)
 8009fb8:	6800      	ldr	r0, [r0, #0]
 8009fba:	f7ff bf7b 	b.w	8009eb4 <_strtoul_l.isra.0>
 8009fbe:	bf00      	nop
 8009fc0:	20000044 	.word	0x20000044

08009fc4 <__env_lock>:
 8009fc4:	4801      	ldr	r0, [pc, #4]	; (8009fcc <__env_lock+0x8>)
 8009fc6:	f7ff be68 	b.w	8009c9a <__retarget_lock_acquire_recursive>
 8009fca:	bf00      	nop
 8009fcc:	2000070a 	.word	0x2000070a

08009fd0 <__env_unlock>:
 8009fd0:	4801      	ldr	r0, [pc, #4]	; (8009fd8 <__env_unlock+0x8>)
 8009fd2:	f7ff be64 	b.w	8009c9e <__retarget_lock_release_recursive>
 8009fd6:	bf00      	nop
 8009fd8:	2000070a 	.word	0x2000070a

08009fdc <__malloc_lock>:
 8009fdc:	4801      	ldr	r0, [pc, #4]	; (8009fe4 <__malloc_lock+0x8>)
 8009fde:	f7ff be5c 	b.w	8009c9a <__retarget_lock_acquire_recursive>
 8009fe2:	bf00      	nop
 8009fe4:	2000070c 	.word	0x2000070c

08009fe8 <__malloc_unlock>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__malloc_unlock+0x8>)
 8009fea:	f7ff be58 	b.w	8009c9e <__retarget_lock_release_recursive>
 8009fee:	bf00      	nop
 8009ff0:	2000070c 	.word	0x2000070c

08009ff4 <_realloc_r>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	460e      	mov	r6, r1
 8009ffc:	b921      	cbnz	r1, 800a008 <_realloc_r+0x14>
 8009ffe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a002:	4611      	mov	r1, r2
 800a004:	f7ff bea4 	b.w	8009d50 <_malloc_r>
 800a008:	b922      	cbnz	r2, 800a014 <_realloc_r+0x20>
 800a00a:	f7ff fe51 	bl	8009cb0 <_free_r>
 800a00e:	4625      	mov	r5, r4
 800a010:	4628      	mov	r0, r5
 800a012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a014:	f000 fc32 	bl	800a87c <_malloc_usable_size_r>
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d20f      	bcs.n	800a03c <_realloc_r+0x48>
 800a01c:	4621      	mov	r1, r4
 800a01e:	4638      	mov	r0, r7
 800a020:	f7ff fe96 	bl	8009d50 <_malloc_r>
 800a024:	4605      	mov	r5, r0
 800a026:	2800      	cmp	r0, #0
 800a028:	d0f2      	beq.n	800a010 <_realloc_r+0x1c>
 800a02a:	4631      	mov	r1, r6
 800a02c:	4622      	mov	r2, r4
 800a02e:	f7ff f90f 	bl	8009250 <memcpy>
 800a032:	4631      	mov	r1, r6
 800a034:	4638      	mov	r0, r7
 800a036:	f7ff fe3b 	bl	8009cb0 <_free_r>
 800a03a:	e7e9      	b.n	800a010 <_realloc_r+0x1c>
 800a03c:	4635      	mov	r5, r6
 800a03e:	e7e7      	b.n	800a010 <_realloc_r+0x1c>

0800a040 <_sungetc_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	1c4b      	adds	r3, r1, #1
 800a044:	4614      	mov	r4, r2
 800a046:	d103      	bne.n	800a050 <_sungetc_r+0x10>
 800a048:	f04f 35ff 	mov.w	r5, #4294967295
 800a04c:	4628      	mov	r0, r5
 800a04e:	bd38      	pop	{r3, r4, r5, pc}
 800a050:	8993      	ldrh	r3, [r2, #12]
 800a052:	f023 0320 	bic.w	r3, r3, #32
 800a056:	8193      	strh	r3, [r2, #12]
 800a058:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a05a:	6852      	ldr	r2, [r2, #4]
 800a05c:	b2cd      	uxtb	r5, r1
 800a05e:	b18b      	cbz	r3, 800a084 <_sungetc_r+0x44>
 800a060:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a062:	4293      	cmp	r3, r2
 800a064:	dd08      	ble.n	800a078 <_sungetc_r+0x38>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	1e5a      	subs	r2, r3, #1
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a070:	6863      	ldr	r3, [r4, #4]
 800a072:	3301      	adds	r3, #1
 800a074:	6063      	str	r3, [r4, #4]
 800a076:	e7e9      	b.n	800a04c <_sungetc_r+0xc>
 800a078:	4621      	mov	r1, r4
 800a07a:	f000 fbbf 	bl	800a7fc <__submore>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d0f1      	beq.n	800a066 <_sungetc_r+0x26>
 800a082:	e7e1      	b.n	800a048 <_sungetc_r+0x8>
 800a084:	6921      	ldr	r1, [r4, #16]
 800a086:	6823      	ldr	r3, [r4, #0]
 800a088:	b151      	cbz	r1, 800a0a0 <_sungetc_r+0x60>
 800a08a:	4299      	cmp	r1, r3
 800a08c:	d208      	bcs.n	800a0a0 <_sungetc_r+0x60>
 800a08e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a092:	42a9      	cmp	r1, r5
 800a094:	d104      	bne.n	800a0a0 <_sungetc_r+0x60>
 800a096:	3b01      	subs	r3, #1
 800a098:	3201      	adds	r2, #1
 800a09a:	6023      	str	r3, [r4, #0]
 800a09c:	6062      	str	r2, [r4, #4]
 800a09e:	e7d5      	b.n	800a04c <_sungetc_r+0xc>
 800a0a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800a0a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0a8:	6363      	str	r3, [r4, #52]	; 0x34
 800a0aa:	2303      	movs	r3, #3
 800a0ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800a0ae:	4623      	mov	r3, r4
 800a0b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a0b4:	6023      	str	r3, [r4, #0]
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e7dc      	b.n	800a074 <_sungetc_r+0x34>

0800a0ba <__ssrefill_r>:
 800a0ba:	b510      	push	{r4, lr}
 800a0bc:	460c      	mov	r4, r1
 800a0be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a0c0:	b169      	cbz	r1, 800a0de <__ssrefill_r+0x24>
 800a0c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0c6:	4299      	cmp	r1, r3
 800a0c8:	d001      	beq.n	800a0ce <__ssrefill_r+0x14>
 800a0ca:	f7ff fdf1 	bl	8009cb0 <_free_r>
 800a0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0d0:	6063      	str	r3, [r4, #4]
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800a0d6:	b113      	cbz	r3, 800a0de <__ssrefill_r+0x24>
 800a0d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a0da:	6023      	str	r3, [r4, #0]
 800a0dc:	bd10      	pop	{r4, pc}
 800a0de:	6923      	ldr	r3, [r4, #16]
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	6063      	str	r3, [r4, #4]
 800a0e6:	89a3      	ldrh	r3, [r4, #12]
 800a0e8:	f043 0320 	orr.w	r3, r3, #32
 800a0ec:	81a3      	strh	r3, [r4, #12]
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	e7f3      	b.n	800a0dc <__ssrefill_r+0x22>

0800a0f4 <__ssvfiscanf_r>:
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800a0fe:	2100      	movs	r1, #0
 800a100:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800a104:	49b2      	ldr	r1, [pc, #712]	; (800a3d0 <__ssvfiscanf_r+0x2dc>)
 800a106:	91a0      	str	r1, [sp, #640]	; 0x280
 800a108:	f10d 0804 	add.w	r8, sp, #4
 800a10c:	49b1      	ldr	r1, [pc, #708]	; (800a3d4 <__ssvfiscanf_r+0x2e0>)
 800a10e:	4fb2      	ldr	r7, [pc, #712]	; (800a3d8 <__ssvfiscanf_r+0x2e4>)
 800a110:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a3dc <__ssvfiscanf_r+0x2e8>
 800a114:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800a118:	4606      	mov	r6, r0
 800a11a:	91a1      	str	r1, [sp, #644]	; 0x284
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	f892 a000 	ldrb.w	sl, [r2]
 800a122:	f1ba 0f00 	cmp.w	sl, #0
 800a126:	f000 8151 	beq.w	800a3cc <__ssvfiscanf_r+0x2d8>
 800a12a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800a12e:	f013 0308 	ands.w	r3, r3, #8
 800a132:	f102 0501 	add.w	r5, r2, #1
 800a136:	d019      	beq.n	800a16c <__ssvfiscanf_r+0x78>
 800a138:	6863      	ldr	r3, [r4, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	dd0f      	ble.n	800a15e <__ssvfiscanf_r+0x6a>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	5cba      	ldrb	r2, [r7, r2]
 800a144:	0712      	lsls	r2, r2, #28
 800a146:	d401      	bmi.n	800a14c <__ssvfiscanf_r+0x58>
 800a148:	462a      	mov	r2, r5
 800a14a:	e7e8      	b.n	800a11e <__ssvfiscanf_r+0x2a>
 800a14c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a14e:	3201      	adds	r2, #1
 800a150:	9245      	str	r2, [sp, #276]	; 0x114
 800a152:	6862      	ldr	r2, [r4, #4]
 800a154:	3301      	adds	r3, #1
 800a156:	3a01      	subs	r2, #1
 800a158:	6062      	str	r2, [r4, #4]
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	e7ec      	b.n	800a138 <__ssvfiscanf_r+0x44>
 800a15e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a160:	4621      	mov	r1, r4
 800a162:	4630      	mov	r0, r6
 800a164:	4798      	blx	r3
 800a166:	2800      	cmp	r0, #0
 800a168:	d0e9      	beq.n	800a13e <__ssvfiscanf_r+0x4a>
 800a16a:	e7ed      	b.n	800a148 <__ssvfiscanf_r+0x54>
 800a16c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800a170:	f040 8083 	bne.w	800a27a <__ssvfiscanf_r+0x186>
 800a174:	9341      	str	r3, [sp, #260]	; 0x104
 800a176:	9343      	str	r3, [sp, #268]	; 0x10c
 800a178:	7853      	ldrb	r3, [r2, #1]
 800a17a:	2b2a      	cmp	r3, #42	; 0x2a
 800a17c:	bf02      	ittt	eq
 800a17e:	2310      	moveq	r3, #16
 800a180:	1c95      	addeq	r5, r2, #2
 800a182:	9341      	streq	r3, [sp, #260]	; 0x104
 800a184:	220a      	movs	r2, #10
 800a186:	46ab      	mov	fp, r5
 800a188:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800a18c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800a190:	2b09      	cmp	r3, #9
 800a192:	d91d      	bls.n	800a1d0 <__ssvfiscanf_r+0xdc>
 800a194:	4891      	ldr	r0, [pc, #580]	; (800a3dc <__ssvfiscanf_r+0x2e8>)
 800a196:	2203      	movs	r2, #3
 800a198:	f7f6 f80a 	bl	80001b0 <memchr>
 800a19c:	b140      	cbz	r0, 800a1b0 <__ssvfiscanf_r+0xbc>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	eba0 0009 	sub.w	r0, r0, r9
 800a1a4:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a1aa:	4318      	orrs	r0, r3
 800a1ac:	9041      	str	r0, [sp, #260]	; 0x104
 800a1ae:	465d      	mov	r5, fp
 800a1b0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a1b4:	2b78      	cmp	r3, #120	; 0x78
 800a1b6:	d806      	bhi.n	800a1c6 <__ssvfiscanf_r+0xd2>
 800a1b8:	2b57      	cmp	r3, #87	; 0x57
 800a1ba:	d810      	bhi.n	800a1de <__ssvfiscanf_r+0xea>
 800a1bc:	2b25      	cmp	r3, #37	; 0x25
 800a1be:	d05c      	beq.n	800a27a <__ssvfiscanf_r+0x186>
 800a1c0:	d856      	bhi.n	800a270 <__ssvfiscanf_r+0x17c>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d074      	beq.n	800a2b0 <__ssvfiscanf_r+0x1bc>
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	9347      	str	r3, [sp, #284]	; 0x11c
 800a1ca:	230a      	movs	r3, #10
 800a1cc:	9342      	str	r3, [sp, #264]	; 0x108
 800a1ce:	e081      	b.n	800a2d4 <__ssvfiscanf_r+0x1e0>
 800a1d0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a1d2:	fb02 1303 	mla	r3, r2, r3, r1
 800a1d6:	3b30      	subs	r3, #48	; 0x30
 800a1d8:	9343      	str	r3, [sp, #268]	; 0x10c
 800a1da:	465d      	mov	r5, fp
 800a1dc:	e7d3      	b.n	800a186 <__ssvfiscanf_r+0x92>
 800a1de:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800a1e2:	2a20      	cmp	r2, #32
 800a1e4:	d8ef      	bhi.n	800a1c6 <__ssvfiscanf_r+0xd2>
 800a1e6:	a101      	add	r1, pc, #4	; (adr r1, 800a1ec <__ssvfiscanf_r+0xf8>)
 800a1e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a1ec:	0800a2bf 	.word	0x0800a2bf
 800a1f0:	0800a1c7 	.word	0x0800a1c7
 800a1f4:	0800a1c7 	.word	0x0800a1c7
 800a1f8:	0800a31d 	.word	0x0800a31d
 800a1fc:	0800a1c7 	.word	0x0800a1c7
 800a200:	0800a1c7 	.word	0x0800a1c7
 800a204:	0800a1c7 	.word	0x0800a1c7
 800a208:	0800a1c7 	.word	0x0800a1c7
 800a20c:	0800a1c7 	.word	0x0800a1c7
 800a210:	0800a1c7 	.word	0x0800a1c7
 800a214:	0800a1c7 	.word	0x0800a1c7
 800a218:	0800a333 	.word	0x0800a333
 800a21c:	0800a309 	.word	0x0800a309
 800a220:	0800a277 	.word	0x0800a277
 800a224:	0800a277 	.word	0x0800a277
 800a228:	0800a277 	.word	0x0800a277
 800a22c:	0800a1c7 	.word	0x0800a1c7
 800a230:	0800a30d 	.word	0x0800a30d
 800a234:	0800a1c7 	.word	0x0800a1c7
 800a238:	0800a1c7 	.word	0x0800a1c7
 800a23c:	0800a1c7 	.word	0x0800a1c7
 800a240:	0800a1c7 	.word	0x0800a1c7
 800a244:	0800a343 	.word	0x0800a343
 800a248:	0800a315 	.word	0x0800a315
 800a24c:	0800a2b7 	.word	0x0800a2b7
 800a250:	0800a1c7 	.word	0x0800a1c7
 800a254:	0800a1c7 	.word	0x0800a1c7
 800a258:	0800a33f 	.word	0x0800a33f
 800a25c:	0800a1c7 	.word	0x0800a1c7
 800a260:	0800a309 	.word	0x0800a309
 800a264:	0800a1c7 	.word	0x0800a1c7
 800a268:	0800a1c7 	.word	0x0800a1c7
 800a26c:	0800a2bf 	.word	0x0800a2bf
 800a270:	3b45      	subs	r3, #69	; 0x45
 800a272:	2b02      	cmp	r3, #2
 800a274:	d8a7      	bhi.n	800a1c6 <__ssvfiscanf_r+0xd2>
 800a276:	2305      	movs	r3, #5
 800a278:	e02b      	b.n	800a2d2 <__ssvfiscanf_r+0x1de>
 800a27a:	6863      	ldr	r3, [r4, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	dd0d      	ble.n	800a29c <__ssvfiscanf_r+0x1a8>
 800a280:	6823      	ldr	r3, [r4, #0]
 800a282:	781a      	ldrb	r2, [r3, #0]
 800a284:	4552      	cmp	r2, sl
 800a286:	f040 80a1 	bne.w	800a3cc <__ssvfiscanf_r+0x2d8>
 800a28a:	3301      	adds	r3, #1
 800a28c:	6862      	ldr	r2, [r4, #4]
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800a292:	3a01      	subs	r2, #1
 800a294:	3301      	adds	r3, #1
 800a296:	6062      	str	r2, [r4, #4]
 800a298:	9345      	str	r3, [sp, #276]	; 0x114
 800a29a:	e755      	b.n	800a148 <__ssvfiscanf_r+0x54>
 800a29c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a29e:	4621      	mov	r1, r4
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4798      	blx	r3
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d0eb      	beq.n	800a280 <__ssvfiscanf_r+0x18c>
 800a2a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	f040 8084 	bne.w	800a3b8 <__ssvfiscanf_r+0x2c4>
 800a2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b4:	e086      	b.n	800a3c4 <__ssvfiscanf_r+0x2d0>
 800a2b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2b8:	f042 0220 	orr.w	r2, r2, #32
 800a2bc:	9241      	str	r2, [sp, #260]	; 0x104
 800a2be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800a2c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2c4:	9241      	str	r2, [sp, #260]	; 0x104
 800a2c6:	2210      	movs	r2, #16
 800a2c8:	2b6f      	cmp	r3, #111	; 0x6f
 800a2ca:	9242      	str	r2, [sp, #264]	; 0x108
 800a2cc:	bf34      	ite	cc
 800a2ce:	2303      	movcc	r3, #3
 800a2d0:	2304      	movcs	r3, #4
 800a2d2:	9347      	str	r3, [sp, #284]	; 0x11c
 800a2d4:	6863      	ldr	r3, [r4, #4]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	dd41      	ble.n	800a35e <__ssvfiscanf_r+0x26a>
 800a2da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a2dc:	0659      	lsls	r1, r3, #25
 800a2de:	d404      	bmi.n	800a2ea <__ssvfiscanf_r+0x1f6>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	781a      	ldrb	r2, [r3, #0]
 800a2e4:	5cba      	ldrb	r2, [r7, r2]
 800a2e6:	0712      	lsls	r2, r2, #28
 800a2e8:	d440      	bmi.n	800a36c <__ssvfiscanf_r+0x278>
 800a2ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	dc4f      	bgt.n	800a390 <__ssvfiscanf_r+0x29c>
 800a2f0:	466b      	mov	r3, sp
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	a941      	add	r1, sp, #260	; 0x104
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f000 f874 	bl	800a3e4 <_scanf_chars>
 800a2fc:	2801      	cmp	r0, #1
 800a2fe:	d065      	beq.n	800a3cc <__ssvfiscanf_r+0x2d8>
 800a300:	2802      	cmp	r0, #2
 800a302:	f47f af21 	bne.w	800a148 <__ssvfiscanf_r+0x54>
 800a306:	e7cf      	b.n	800a2a8 <__ssvfiscanf_r+0x1b4>
 800a308:	220a      	movs	r2, #10
 800a30a:	e7dd      	b.n	800a2c8 <__ssvfiscanf_r+0x1d4>
 800a30c:	2300      	movs	r3, #0
 800a30e:	9342      	str	r3, [sp, #264]	; 0x108
 800a310:	2303      	movs	r3, #3
 800a312:	e7de      	b.n	800a2d2 <__ssvfiscanf_r+0x1de>
 800a314:	2308      	movs	r3, #8
 800a316:	9342      	str	r3, [sp, #264]	; 0x108
 800a318:	2304      	movs	r3, #4
 800a31a:	e7da      	b.n	800a2d2 <__ssvfiscanf_r+0x1de>
 800a31c:	4629      	mov	r1, r5
 800a31e:	4640      	mov	r0, r8
 800a320:	f000 f9ac 	bl	800a67c <__sccl>
 800a324:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32a:	9341      	str	r3, [sp, #260]	; 0x104
 800a32c:	4605      	mov	r5, r0
 800a32e:	2301      	movs	r3, #1
 800a330:	e7cf      	b.n	800a2d2 <__ssvfiscanf_r+0x1de>
 800a332:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	9341      	str	r3, [sp, #260]	; 0x104
 800a33a:	2300      	movs	r3, #0
 800a33c:	e7c9      	b.n	800a2d2 <__ssvfiscanf_r+0x1de>
 800a33e:	2302      	movs	r3, #2
 800a340:	e7c7      	b.n	800a2d2 <__ssvfiscanf_r+0x1de>
 800a342:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a344:	06c3      	lsls	r3, r0, #27
 800a346:	f53f aeff 	bmi.w	800a148 <__ssvfiscanf_r+0x54>
 800a34a:	9b00      	ldr	r3, [sp, #0]
 800a34c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a34e:	1d19      	adds	r1, r3, #4
 800a350:	9100      	str	r1, [sp, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	07c0      	lsls	r0, r0, #31
 800a356:	bf4c      	ite	mi
 800a358:	801a      	strhmi	r2, [r3, #0]
 800a35a:	601a      	strpl	r2, [r3, #0]
 800a35c:	e6f4      	b.n	800a148 <__ssvfiscanf_r+0x54>
 800a35e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a360:	4621      	mov	r1, r4
 800a362:	4630      	mov	r0, r6
 800a364:	4798      	blx	r3
 800a366:	2800      	cmp	r0, #0
 800a368:	d0b7      	beq.n	800a2da <__ssvfiscanf_r+0x1e6>
 800a36a:	e79d      	b.n	800a2a8 <__ssvfiscanf_r+0x1b4>
 800a36c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a36e:	3201      	adds	r2, #1
 800a370:	9245      	str	r2, [sp, #276]	; 0x114
 800a372:	6862      	ldr	r2, [r4, #4]
 800a374:	3a01      	subs	r2, #1
 800a376:	2a00      	cmp	r2, #0
 800a378:	6062      	str	r2, [r4, #4]
 800a37a:	dd02      	ble.n	800a382 <__ssvfiscanf_r+0x28e>
 800a37c:	3301      	adds	r3, #1
 800a37e:	6023      	str	r3, [r4, #0]
 800a380:	e7ae      	b.n	800a2e0 <__ssvfiscanf_r+0x1ec>
 800a382:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a384:	4621      	mov	r1, r4
 800a386:	4630      	mov	r0, r6
 800a388:	4798      	blx	r3
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d0a8      	beq.n	800a2e0 <__ssvfiscanf_r+0x1ec>
 800a38e:	e78b      	b.n	800a2a8 <__ssvfiscanf_r+0x1b4>
 800a390:	2b04      	cmp	r3, #4
 800a392:	dc06      	bgt.n	800a3a2 <__ssvfiscanf_r+0x2ae>
 800a394:	466b      	mov	r3, sp
 800a396:	4622      	mov	r2, r4
 800a398:	a941      	add	r1, sp, #260	; 0x104
 800a39a:	4630      	mov	r0, r6
 800a39c:	f000 f87a 	bl	800a494 <_scanf_i>
 800a3a0:	e7ac      	b.n	800a2fc <__ssvfiscanf_r+0x208>
 800a3a2:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <__ssvfiscanf_r+0x2ec>)
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f43f aecf 	beq.w	800a148 <__ssvfiscanf_r+0x54>
 800a3aa:	466b      	mov	r3, sp
 800a3ac:	4622      	mov	r2, r4
 800a3ae:	a941      	add	r1, sp, #260	; 0x104
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f3af 8000 	nop.w
 800a3b6:	e7a1      	b.n	800a2fc <__ssvfiscanf_r+0x208>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a3be:	bf18      	it	ne
 800a3c0:	f04f 30ff 	movne.w	r0, #4294967295
 800a3c4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3cc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a3ce:	e7f9      	b.n	800a3c4 <__ssvfiscanf_r+0x2d0>
 800a3d0:	0800a041 	.word	0x0800a041
 800a3d4:	0800a0bb 	.word	0x0800a0bb
 800a3d8:	0800aca5 	.word	0x0800aca5
 800a3dc:	0800ada5 	.word	0x0800ada5
 800a3e0:	00000000 	.word	0x00000000

0800a3e4 <_scanf_chars>:
 800a3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3e8:	4615      	mov	r5, r2
 800a3ea:	688a      	ldr	r2, [r1, #8]
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	b932      	cbnz	r2, 800a400 <_scanf_chars+0x1c>
 800a3f2:	698a      	ldr	r2, [r1, #24]
 800a3f4:	2a00      	cmp	r2, #0
 800a3f6:	bf0c      	ite	eq
 800a3f8:	2201      	moveq	r2, #1
 800a3fa:	f04f 32ff 	movne.w	r2, #4294967295
 800a3fe:	608a      	str	r2, [r1, #8]
 800a400:	6822      	ldr	r2, [r4, #0]
 800a402:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a490 <_scanf_chars+0xac>
 800a406:	06d1      	lsls	r1, r2, #27
 800a408:	bf5f      	itttt	pl
 800a40a:	681a      	ldrpl	r2, [r3, #0]
 800a40c:	1d11      	addpl	r1, r2, #4
 800a40e:	6019      	strpl	r1, [r3, #0]
 800a410:	6816      	ldrpl	r6, [r2, #0]
 800a412:	2700      	movs	r7, #0
 800a414:	69a0      	ldr	r0, [r4, #24]
 800a416:	b188      	cbz	r0, 800a43c <_scanf_chars+0x58>
 800a418:	2801      	cmp	r0, #1
 800a41a:	d107      	bne.n	800a42c <_scanf_chars+0x48>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	781a      	ldrb	r2, [r3, #0]
 800a420:	6963      	ldr	r3, [r4, #20]
 800a422:	5c9b      	ldrb	r3, [r3, r2]
 800a424:	b953      	cbnz	r3, 800a43c <_scanf_chars+0x58>
 800a426:	bb27      	cbnz	r7, 800a472 <_scanf_chars+0x8e>
 800a428:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a42c:	2802      	cmp	r0, #2
 800a42e:	d120      	bne.n	800a472 <_scanf_chars+0x8e>
 800a430:	682b      	ldr	r3, [r5, #0]
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a438:	071b      	lsls	r3, r3, #28
 800a43a:	d41a      	bmi.n	800a472 <_scanf_chars+0x8e>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	06da      	lsls	r2, r3, #27
 800a440:	bf5e      	ittt	pl
 800a442:	682b      	ldrpl	r3, [r5, #0]
 800a444:	781b      	ldrbpl	r3, [r3, #0]
 800a446:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a44a:	682a      	ldr	r2, [r5, #0]
 800a44c:	686b      	ldr	r3, [r5, #4]
 800a44e:	3201      	adds	r2, #1
 800a450:	602a      	str	r2, [r5, #0]
 800a452:	68a2      	ldr	r2, [r4, #8]
 800a454:	3b01      	subs	r3, #1
 800a456:	3a01      	subs	r2, #1
 800a458:	606b      	str	r3, [r5, #4]
 800a45a:	3701      	adds	r7, #1
 800a45c:	60a2      	str	r2, [r4, #8]
 800a45e:	b142      	cbz	r2, 800a472 <_scanf_chars+0x8e>
 800a460:	2b00      	cmp	r3, #0
 800a462:	dcd7      	bgt.n	800a414 <_scanf_chars+0x30>
 800a464:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a468:	4629      	mov	r1, r5
 800a46a:	4640      	mov	r0, r8
 800a46c:	4798      	blx	r3
 800a46e:	2800      	cmp	r0, #0
 800a470:	d0d0      	beq.n	800a414 <_scanf_chars+0x30>
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	f013 0310 	ands.w	r3, r3, #16
 800a478:	d105      	bne.n	800a486 <_scanf_chars+0xa2>
 800a47a:	68e2      	ldr	r2, [r4, #12]
 800a47c:	3201      	adds	r2, #1
 800a47e:	60e2      	str	r2, [r4, #12]
 800a480:	69a2      	ldr	r2, [r4, #24]
 800a482:	b102      	cbz	r2, 800a486 <_scanf_chars+0xa2>
 800a484:	7033      	strb	r3, [r6, #0]
 800a486:	6923      	ldr	r3, [r4, #16]
 800a488:	441f      	add	r7, r3
 800a48a:	6127      	str	r7, [r4, #16]
 800a48c:	2000      	movs	r0, #0
 800a48e:	e7cb      	b.n	800a428 <_scanf_chars+0x44>
 800a490:	0800aca5 	.word	0x0800aca5

0800a494 <_scanf_i>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	4698      	mov	r8, r3
 800a49a:	4b74      	ldr	r3, [pc, #464]	; (800a66c <_scanf_i+0x1d8>)
 800a49c:	460c      	mov	r4, r1
 800a49e:	4682      	mov	sl, r0
 800a4a0:	4616      	mov	r6, r2
 800a4a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	ab03      	add	r3, sp, #12
 800a4aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a4ae:	4b70      	ldr	r3, [pc, #448]	; (800a670 <_scanf_i+0x1dc>)
 800a4b0:	69a1      	ldr	r1, [r4, #24]
 800a4b2:	4a70      	ldr	r2, [pc, #448]	; (800a674 <_scanf_i+0x1e0>)
 800a4b4:	2903      	cmp	r1, #3
 800a4b6:	bf18      	it	ne
 800a4b8:	461a      	movne	r2, r3
 800a4ba:	68a3      	ldr	r3, [r4, #8]
 800a4bc:	9201      	str	r2, [sp, #4]
 800a4be:	1e5a      	subs	r2, r3, #1
 800a4c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a4c4:	bf88      	it	hi
 800a4c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a4ca:	4627      	mov	r7, r4
 800a4cc:	bf82      	ittt	hi
 800a4ce:	eb03 0905 	addhi.w	r9, r3, r5
 800a4d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a4d6:	60a3      	strhi	r3, [r4, #8]
 800a4d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a4dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a4e0:	bf98      	it	ls
 800a4e2:	f04f 0900 	movls.w	r9, #0
 800a4e6:	6023      	str	r3, [r4, #0]
 800a4e8:	463d      	mov	r5, r7
 800a4ea:	f04f 0b00 	mov.w	fp, #0
 800a4ee:	6831      	ldr	r1, [r6, #0]
 800a4f0:	ab03      	add	r3, sp, #12
 800a4f2:	7809      	ldrb	r1, [r1, #0]
 800a4f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a4f8:	2202      	movs	r2, #2
 800a4fa:	f7f5 fe59 	bl	80001b0 <memchr>
 800a4fe:	b328      	cbz	r0, 800a54c <_scanf_i+0xb8>
 800a500:	f1bb 0f01 	cmp.w	fp, #1
 800a504:	d159      	bne.n	800a5ba <_scanf_i+0x126>
 800a506:	6862      	ldr	r2, [r4, #4]
 800a508:	b92a      	cbnz	r2, 800a516 <_scanf_i+0x82>
 800a50a:	6822      	ldr	r2, [r4, #0]
 800a50c:	2308      	movs	r3, #8
 800a50e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a512:	6063      	str	r3, [r4, #4]
 800a514:	6022      	str	r2, [r4, #0]
 800a516:	6822      	ldr	r2, [r4, #0]
 800a518:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a51c:	6022      	str	r2, [r4, #0]
 800a51e:	68a2      	ldr	r2, [r4, #8]
 800a520:	1e51      	subs	r1, r2, #1
 800a522:	60a1      	str	r1, [r4, #8]
 800a524:	b192      	cbz	r2, 800a54c <_scanf_i+0xb8>
 800a526:	6832      	ldr	r2, [r6, #0]
 800a528:	1c51      	adds	r1, r2, #1
 800a52a:	6031      	str	r1, [r6, #0]
 800a52c:	7812      	ldrb	r2, [r2, #0]
 800a52e:	f805 2b01 	strb.w	r2, [r5], #1
 800a532:	6872      	ldr	r2, [r6, #4]
 800a534:	3a01      	subs	r2, #1
 800a536:	2a00      	cmp	r2, #0
 800a538:	6072      	str	r2, [r6, #4]
 800a53a:	dc07      	bgt.n	800a54c <_scanf_i+0xb8>
 800a53c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a540:	4631      	mov	r1, r6
 800a542:	4650      	mov	r0, sl
 800a544:	4790      	blx	r2
 800a546:	2800      	cmp	r0, #0
 800a548:	f040 8085 	bne.w	800a656 <_scanf_i+0x1c2>
 800a54c:	f10b 0b01 	add.w	fp, fp, #1
 800a550:	f1bb 0f03 	cmp.w	fp, #3
 800a554:	d1cb      	bne.n	800a4ee <_scanf_i+0x5a>
 800a556:	6863      	ldr	r3, [r4, #4]
 800a558:	b90b      	cbnz	r3, 800a55e <_scanf_i+0xca>
 800a55a:	230a      	movs	r3, #10
 800a55c:	6063      	str	r3, [r4, #4]
 800a55e:	6863      	ldr	r3, [r4, #4]
 800a560:	4945      	ldr	r1, [pc, #276]	; (800a678 <_scanf_i+0x1e4>)
 800a562:	6960      	ldr	r0, [r4, #20]
 800a564:	1ac9      	subs	r1, r1, r3
 800a566:	f000 f889 	bl	800a67c <__sccl>
 800a56a:	f04f 0b00 	mov.w	fp, #0
 800a56e:	68a3      	ldr	r3, [r4, #8]
 800a570:	6822      	ldr	r2, [r4, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d03d      	beq.n	800a5f2 <_scanf_i+0x15e>
 800a576:	6831      	ldr	r1, [r6, #0]
 800a578:	6960      	ldr	r0, [r4, #20]
 800a57a:	f891 c000 	ldrb.w	ip, [r1]
 800a57e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a582:	2800      	cmp	r0, #0
 800a584:	d035      	beq.n	800a5f2 <_scanf_i+0x15e>
 800a586:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a58a:	d124      	bne.n	800a5d6 <_scanf_i+0x142>
 800a58c:	0510      	lsls	r0, r2, #20
 800a58e:	d522      	bpl.n	800a5d6 <_scanf_i+0x142>
 800a590:	f10b 0b01 	add.w	fp, fp, #1
 800a594:	f1b9 0f00 	cmp.w	r9, #0
 800a598:	d003      	beq.n	800a5a2 <_scanf_i+0x10e>
 800a59a:	3301      	adds	r3, #1
 800a59c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a5a0:	60a3      	str	r3, [r4, #8]
 800a5a2:	6873      	ldr	r3, [r6, #4]
 800a5a4:	3b01      	subs	r3, #1
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	6073      	str	r3, [r6, #4]
 800a5aa:	dd1b      	ble.n	800a5e4 <_scanf_i+0x150>
 800a5ac:	6833      	ldr	r3, [r6, #0]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	6033      	str	r3, [r6, #0]
 800a5b2:	68a3      	ldr	r3, [r4, #8]
 800a5b4:	3b01      	subs	r3, #1
 800a5b6:	60a3      	str	r3, [r4, #8]
 800a5b8:	e7d9      	b.n	800a56e <_scanf_i+0xda>
 800a5ba:	f1bb 0f02 	cmp.w	fp, #2
 800a5be:	d1ae      	bne.n	800a51e <_scanf_i+0x8a>
 800a5c0:	6822      	ldr	r2, [r4, #0]
 800a5c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a5c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a5ca:	d1bf      	bne.n	800a54c <_scanf_i+0xb8>
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	6063      	str	r3, [r4, #4]
 800a5d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a5d4:	e7a2      	b.n	800a51c <_scanf_i+0x88>
 800a5d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a5da:	6022      	str	r2, [r4, #0]
 800a5dc:	780b      	ldrb	r3, [r1, #0]
 800a5de:	f805 3b01 	strb.w	r3, [r5], #1
 800a5e2:	e7de      	b.n	800a5a2 <_scanf_i+0x10e>
 800a5e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5e8:	4631      	mov	r1, r6
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	4798      	blx	r3
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d0df      	beq.n	800a5b2 <_scanf_i+0x11e>
 800a5f2:	6823      	ldr	r3, [r4, #0]
 800a5f4:	05d9      	lsls	r1, r3, #23
 800a5f6:	d50d      	bpl.n	800a614 <_scanf_i+0x180>
 800a5f8:	42bd      	cmp	r5, r7
 800a5fa:	d909      	bls.n	800a610 <_scanf_i+0x17c>
 800a5fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a600:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a604:	4632      	mov	r2, r6
 800a606:	4650      	mov	r0, sl
 800a608:	4798      	blx	r3
 800a60a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a60e:	464d      	mov	r5, r9
 800a610:	42bd      	cmp	r5, r7
 800a612:	d028      	beq.n	800a666 <_scanf_i+0x1d2>
 800a614:	6822      	ldr	r2, [r4, #0]
 800a616:	f012 0210 	ands.w	r2, r2, #16
 800a61a:	d113      	bne.n	800a644 <_scanf_i+0x1b0>
 800a61c:	702a      	strb	r2, [r5, #0]
 800a61e:	6863      	ldr	r3, [r4, #4]
 800a620:	9e01      	ldr	r6, [sp, #4]
 800a622:	4639      	mov	r1, r7
 800a624:	4650      	mov	r0, sl
 800a626:	47b0      	blx	r6
 800a628:	f8d8 3000 	ldr.w	r3, [r8]
 800a62c:	6821      	ldr	r1, [r4, #0]
 800a62e:	1d1a      	adds	r2, r3, #4
 800a630:	f8c8 2000 	str.w	r2, [r8]
 800a634:	f011 0f20 	tst.w	r1, #32
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	d00f      	beq.n	800a65c <_scanf_i+0x1c8>
 800a63c:	6018      	str	r0, [r3, #0]
 800a63e:	68e3      	ldr	r3, [r4, #12]
 800a640:	3301      	adds	r3, #1
 800a642:	60e3      	str	r3, [r4, #12]
 800a644:	1bed      	subs	r5, r5, r7
 800a646:	44ab      	add	fp, r5
 800a648:	6925      	ldr	r5, [r4, #16]
 800a64a:	445d      	add	r5, fp
 800a64c:	6125      	str	r5, [r4, #16]
 800a64e:	2000      	movs	r0, #0
 800a650:	b007      	add	sp, #28
 800a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a656:	f04f 0b00 	mov.w	fp, #0
 800a65a:	e7ca      	b.n	800a5f2 <_scanf_i+0x15e>
 800a65c:	07ca      	lsls	r2, r1, #31
 800a65e:	bf4c      	ite	mi
 800a660:	8018      	strhmi	r0, [r3, #0]
 800a662:	6018      	strpl	r0, [r3, #0]
 800a664:	e7eb      	b.n	800a63e <_scanf_i+0x1aa>
 800a666:	2001      	movs	r0, #1
 800a668:	e7f2      	b.n	800a650 <_scanf_i+0x1bc>
 800a66a:	bf00      	nop
 800a66c:	0800a940 	.word	0x0800a940
 800a670:	08009fad 	.word	0x08009fad
 800a674:	0800a7f9 	.word	0x0800a7f9
 800a678:	0800adc2 	.word	0x0800adc2

0800a67c <__sccl>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	780b      	ldrb	r3, [r1, #0]
 800a680:	4604      	mov	r4, r0
 800a682:	2b5e      	cmp	r3, #94	; 0x5e
 800a684:	bf0b      	itete	eq
 800a686:	784b      	ldrbeq	r3, [r1, #1]
 800a688:	1c48      	addne	r0, r1, #1
 800a68a:	1c88      	addeq	r0, r1, #2
 800a68c:	2200      	movne	r2, #0
 800a68e:	bf08      	it	eq
 800a690:	2201      	moveq	r2, #1
 800a692:	1e61      	subs	r1, r4, #1
 800a694:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a698:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a69c:	42a9      	cmp	r1, r5
 800a69e:	d1fb      	bne.n	800a698 <__sccl+0x1c>
 800a6a0:	b90b      	cbnz	r3, 800a6a6 <__sccl+0x2a>
 800a6a2:	3801      	subs	r0, #1
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
 800a6a6:	f082 0101 	eor.w	r1, r2, #1
 800a6aa:	54e1      	strb	r1, [r4, r3]
 800a6ac:	1c42      	adds	r2, r0, #1
 800a6ae:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a6b2:	2d2d      	cmp	r5, #45	; 0x2d
 800a6b4:	f102 36ff 	add.w	r6, r2, #4294967295
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	d006      	beq.n	800a6ca <__sccl+0x4e>
 800a6bc:	2d5d      	cmp	r5, #93	; 0x5d
 800a6be:	d0f1      	beq.n	800a6a4 <__sccl+0x28>
 800a6c0:	b90d      	cbnz	r5, 800a6c6 <__sccl+0x4a>
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	e7ee      	b.n	800a6a4 <__sccl+0x28>
 800a6c6:	462b      	mov	r3, r5
 800a6c8:	e7ef      	b.n	800a6aa <__sccl+0x2e>
 800a6ca:	7816      	ldrb	r6, [r2, #0]
 800a6cc:	2e5d      	cmp	r6, #93	; 0x5d
 800a6ce:	d0fa      	beq.n	800a6c6 <__sccl+0x4a>
 800a6d0:	42b3      	cmp	r3, r6
 800a6d2:	dcf8      	bgt.n	800a6c6 <__sccl+0x4a>
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	4286      	cmp	r6, r0
 800a6da:	5421      	strb	r1, [r4, r0]
 800a6dc:	dcfb      	bgt.n	800a6d6 <__sccl+0x5a>
 800a6de:	43d8      	mvns	r0, r3
 800a6e0:	4430      	add	r0, r6
 800a6e2:	1c5d      	adds	r5, r3, #1
 800a6e4:	42b3      	cmp	r3, r6
 800a6e6:	bfa8      	it	ge
 800a6e8:	2000      	movge	r0, #0
 800a6ea:	182b      	adds	r3, r5, r0
 800a6ec:	3202      	adds	r2, #2
 800a6ee:	e7de      	b.n	800a6ae <__sccl+0x32>

0800a6f0 <_strtol_l.isra.0>:
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6f6:	d001      	beq.n	800a6fc <_strtol_l.isra.0+0xc>
 800a6f8:	2b24      	cmp	r3, #36	; 0x24
 800a6fa:	d906      	bls.n	800a70a <_strtol_l.isra.0+0x1a>
 800a6fc:	f000 f8b8 	bl	800a870 <__errno>
 800a700:	2316      	movs	r3, #22
 800a702:	6003      	str	r3, [r0, #0]
 800a704:	2000      	movs	r0, #0
 800a706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a70a:	4f3a      	ldr	r7, [pc, #232]	; (800a7f4 <_strtol_l.isra.0+0x104>)
 800a70c:	468e      	mov	lr, r1
 800a70e:	4676      	mov	r6, lr
 800a710:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a714:	5de5      	ldrb	r5, [r4, r7]
 800a716:	f015 0508 	ands.w	r5, r5, #8
 800a71a:	d1f8      	bne.n	800a70e <_strtol_l.isra.0+0x1e>
 800a71c:	2c2d      	cmp	r4, #45	; 0x2d
 800a71e:	d134      	bne.n	800a78a <_strtol_l.isra.0+0x9a>
 800a720:	f89e 4000 	ldrb.w	r4, [lr]
 800a724:	f04f 0801 	mov.w	r8, #1
 800a728:	f106 0e02 	add.w	lr, r6, #2
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d05c      	beq.n	800a7ea <_strtol_l.isra.0+0xfa>
 800a730:	2b10      	cmp	r3, #16
 800a732:	d10c      	bne.n	800a74e <_strtol_l.isra.0+0x5e>
 800a734:	2c30      	cmp	r4, #48	; 0x30
 800a736:	d10a      	bne.n	800a74e <_strtol_l.isra.0+0x5e>
 800a738:	f89e 4000 	ldrb.w	r4, [lr]
 800a73c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a740:	2c58      	cmp	r4, #88	; 0x58
 800a742:	d14d      	bne.n	800a7e0 <_strtol_l.isra.0+0xf0>
 800a744:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a748:	2310      	movs	r3, #16
 800a74a:	f10e 0e02 	add.w	lr, lr, #2
 800a74e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a752:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a756:	2600      	movs	r6, #0
 800a758:	fbbc f9f3 	udiv	r9, ip, r3
 800a75c:	4635      	mov	r5, r6
 800a75e:	fb03 ca19 	mls	sl, r3, r9, ip
 800a762:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a766:	2f09      	cmp	r7, #9
 800a768:	d818      	bhi.n	800a79c <_strtol_l.isra.0+0xac>
 800a76a:	463c      	mov	r4, r7
 800a76c:	42a3      	cmp	r3, r4
 800a76e:	dd24      	ble.n	800a7ba <_strtol_l.isra.0+0xca>
 800a770:	2e00      	cmp	r6, #0
 800a772:	db1f      	blt.n	800a7b4 <_strtol_l.isra.0+0xc4>
 800a774:	45a9      	cmp	r9, r5
 800a776:	d31d      	bcc.n	800a7b4 <_strtol_l.isra.0+0xc4>
 800a778:	d101      	bne.n	800a77e <_strtol_l.isra.0+0x8e>
 800a77a:	45a2      	cmp	sl, r4
 800a77c:	db1a      	blt.n	800a7b4 <_strtol_l.isra.0+0xc4>
 800a77e:	fb05 4503 	mla	r5, r5, r3, r4
 800a782:	2601      	movs	r6, #1
 800a784:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a788:	e7eb      	b.n	800a762 <_strtol_l.isra.0+0x72>
 800a78a:	2c2b      	cmp	r4, #43	; 0x2b
 800a78c:	bf08      	it	eq
 800a78e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a792:	46a8      	mov	r8, r5
 800a794:	bf08      	it	eq
 800a796:	f106 0e02 	addeq.w	lr, r6, #2
 800a79a:	e7c7      	b.n	800a72c <_strtol_l.isra.0+0x3c>
 800a79c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a7a0:	2f19      	cmp	r7, #25
 800a7a2:	d801      	bhi.n	800a7a8 <_strtol_l.isra.0+0xb8>
 800a7a4:	3c37      	subs	r4, #55	; 0x37
 800a7a6:	e7e1      	b.n	800a76c <_strtol_l.isra.0+0x7c>
 800a7a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a7ac:	2f19      	cmp	r7, #25
 800a7ae:	d804      	bhi.n	800a7ba <_strtol_l.isra.0+0xca>
 800a7b0:	3c57      	subs	r4, #87	; 0x57
 800a7b2:	e7db      	b.n	800a76c <_strtol_l.isra.0+0x7c>
 800a7b4:	f04f 36ff 	mov.w	r6, #4294967295
 800a7b8:	e7e4      	b.n	800a784 <_strtol_l.isra.0+0x94>
 800a7ba:	2e00      	cmp	r6, #0
 800a7bc:	da05      	bge.n	800a7ca <_strtol_l.isra.0+0xda>
 800a7be:	2322      	movs	r3, #34	; 0x22
 800a7c0:	6003      	str	r3, [r0, #0]
 800a7c2:	4665      	mov	r5, ip
 800a7c4:	b942      	cbnz	r2, 800a7d8 <_strtol_l.isra.0+0xe8>
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	e79d      	b.n	800a706 <_strtol_l.isra.0+0x16>
 800a7ca:	f1b8 0f00 	cmp.w	r8, #0
 800a7ce:	d000      	beq.n	800a7d2 <_strtol_l.isra.0+0xe2>
 800a7d0:	426d      	negs	r5, r5
 800a7d2:	2a00      	cmp	r2, #0
 800a7d4:	d0f7      	beq.n	800a7c6 <_strtol_l.isra.0+0xd6>
 800a7d6:	b10e      	cbz	r6, 800a7dc <_strtol_l.isra.0+0xec>
 800a7d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a7dc:	6011      	str	r1, [r2, #0]
 800a7de:	e7f2      	b.n	800a7c6 <_strtol_l.isra.0+0xd6>
 800a7e0:	2430      	movs	r4, #48	; 0x30
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1b3      	bne.n	800a74e <_strtol_l.isra.0+0x5e>
 800a7e6:	2308      	movs	r3, #8
 800a7e8:	e7b1      	b.n	800a74e <_strtol_l.isra.0+0x5e>
 800a7ea:	2c30      	cmp	r4, #48	; 0x30
 800a7ec:	d0a4      	beq.n	800a738 <_strtol_l.isra.0+0x48>
 800a7ee:	230a      	movs	r3, #10
 800a7f0:	e7ad      	b.n	800a74e <_strtol_l.isra.0+0x5e>
 800a7f2:	bf00      	nop
 800a7f4:	0800aca5 	.word	0x0800aca5

0800a7f8 <_strtol_r>:
 800a7f8:	f7ff bf7a 	b.w	800a6f0 <_strtol_l.isra.0>

0800a7fc <__submore>:
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	460c      	mov	r4, r1
 800a802:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a808:	4299      	cmp	r1, r3
 800a80a:	d11d      	bne.n	800a848 <__submore+0x4c>
 800a80c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a810:	f7ff fa9e 	bl	8009d50 <_malloc_r>
 800a814:	b918      	cbnz	r0, 800a81e <__submore+0x22>
 800a816:	f04f 30ff 	mov.w	r0, #4294967295
 800a81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a81e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a822:	63a3      	str	r3, [r4, #56]	; 0x38
 800a824:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a828:	6360      	str	r0, [r4, #52]	; 0x34
 800a82a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a82e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a832:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a836:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a83a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a83e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a842:	6020      	str	r0, [r4, #0]
 800a844:	2000      	movs	r0, #0
 800a846:	e7e8      	b.n	800a81a <__submore+0x1e>
 800a848:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a84a:	0077      	lsls	r7, r6, #1
 800a84c:	463a      	mov	r2, r7
 800a84e:	f7ff fbd1 	bl	8009ff4 <_realloc_r>
 800a852:	4605      	mov	r5, r0
 800a854:	2800      	cmp	r0, #0
 800a856:	d0de      	beq.n	800a816 <__submore+0x1a>
 800a858:	eb00 0806 	add.w	r8, r0, r6
 800a85c:	4601      	mov	r1, r0
 800a85e:	4632      	mov	r2, r6
 800a860:	4640      	mov	r0, r8
 800a862:	f7fe fcf5 	bl	8009250 <memcpy>
 800a866:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a86a:	f8c4 8000 	str.w	r8, [r4]
 800a86e:	e7e9      	b.n	800a844 <__submore+0x48>

0800a870 <__errno>:
 800a870:	4b01      	ldr	r3, [pc, #4]	; (800a878 <__errno+0x8>)
 800a872:	6818      	ldr	r0, [r3, #0]
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	20000044 	.word	0x20000044

0800a87c <_malloc_usable_size_r>:
 800a87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a880:	1f18      	subs	r0, r3, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	bfbc      	itt	lt
 800a886:	580b      	ldrlt	r3, [r1, r0]
 800a888:	18c0      	addlt	r0, r0, r3
 800a88a:	4770      	bx	lr

0800a88c <_sbrk>:
 800a88c:	4b04      	ldr	r3, [pc, #16]	; (800a8a0 <_sbrk+0x14>)
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	4602      	mov	r2, r0
 800a892:	b909      	cbnz	r1, 800a898 <_sbrk+0xc>
 800a894:	4903      	ldr	r1, [pc, #12]	; (800a8a4 <_sbrk+0x18>)
 800a896:	6019      	str	r1, [r3, #0]
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	4402      	add	r2, r0
 800a89c:	601a      	str	r2, [r3, #0]
 800a89e:	4770      	bx	lr
 800a8a0:	20000410 	.word	0x20000410
 800a8a4:	20000718 	.word	0x20000718

0800a8a8 <_init>:
 800a8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8aa:	bf00      	nop
 800a8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ae:	bc08      	pop	{r3}
 800a8b0:	469e      	mov	lr, r3
 800a8b2:	4770      	bx	lr

0800a8b4 <_fini>:
 800a8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b6:	bf00      	nop
 800a8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ba:	bc08      	pop	{r3}
 800a8bc:	469e      	mov	lr, r3
 800a8be:	4770      	bx	lr
