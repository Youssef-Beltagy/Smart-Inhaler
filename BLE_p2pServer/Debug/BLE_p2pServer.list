
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a4ac  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  0800a5ec  0800a5ec  0001a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800aad8  0800aad8  0001aad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800aadc  0800aadc  0001aadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000104  20000008  0800aae0  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  2000010c  0800abe4  0002010c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  200001a8  0800ac7d  000201a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001e8  0800acba  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000096  200001fc  0800accb  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000480  20000298  0800ad61  00020298  2**3
                  ALLOC
 11 ._user_heap_stack 00001400  20000718  0800ad61  00020718  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020292  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_line   0002c1da  00000000  00000000  000202c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_info   0003bf4d  00000000  00000000  0004c49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00006af5  00000000  00000000  000883e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000028d8  00000000  00000000  0008eee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f825d  00000000  00000000  000917b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00002650  00000000  00000000  00189a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002ca45  00000000  00000000  0018c068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001b8aad  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000b324  00000000  00000000  001b8b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .stabstr      0000014d  00000000  00000000  001c3e24  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000298 	.word	0x20000298
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a5d4 	.word	0x0800a5d4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000029c 	.word	0x2000029c
 800017c:	0800a5d4 	.word	0x0800a5d4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <strcmp>:
 8000190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000194:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000198:	2a01      	cmp	r2, #1
 800019a:	bf28      	it	cs
 800019c:	429a      	cmpcs	r2, r3
 800019e:	d0f7      	beq.n	8000190 <strcmp>
 80001a0:	1ad0      	subs	r0, r2, r3
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000250:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000252:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000254:	3304      	adds	r3, #4

08000256 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000256:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000258:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800025a:	d3f9      	bcc.n	8000250 <CopyDataInit>
  bx lr
 800025c:	4770      	bx	lr

0800025e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800025e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000260:	3004      	adds	r0, #4

08000262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000262:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000264:	d3fb      	bcc.n	800025e <FillZerobss>
  bx lr
 8000266:	4770      	bx	lr

08000268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000268:	480c      	ldr	r0, [pc, #48]	; (800029c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800026a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800026c:	f001 ff7a 	bl	8002164 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000270:	480b      	ldr	r0, [pc, #44]	; (80002a0 <LoopForever+0x8>)
 8000272:	490c      	ldr	r1, [pc, #48]	; (80002a4 <LoopForever+0xc>)
 8000274:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <LoopForever+0x10>)
 8000276:	2300      	movs	r3, #0
 8000278:	f7ff ffed 	bl	8000256 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800027c:	480b      	ldr	r0, [pc, #44]	; (80002ac <LoopForever+0x14>)
 800027e:	490c      	ldr	r1, [pc, #48]	; (80002b0 <LoopForever+0x18>)
 8000280:	2300      	movs	r3, #0
 8000282:	f7ff ffee 	bl	8000262 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000286:	480b      	ldr	r0, [pc, #44]	; (80002b4 <LoopForever+0x1c>)
 8000288:	490b      	ldr	r1, [pc, #44]	; (80002b8 <LoopForever+0x20>)
 800028a:	2300      	movs	r3, #0
 800028c:	f7ff ffe9 	bl	8000262 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000290:	f008 fe50 	bl	8008f34 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000294:	f001 fb24 	bl	80018e0 <main>

08000298 <LoopForever>:

LoopForever:
  b LoopForever
 8000298:	e7fe      	b.n	8000298 <LoopForever>
 800029a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800029c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80002a0:	20000008 	.word	0x20000008
 80002a4:	2000010c 	.word	0x2000010c
 80002a8:	0800aae0 	.word	0x0800aae0
  INIT_BSS _sbss, _ebss
 80002ac:	20000298 	.word	0x20000298
 80002b0:	20000718 	.word	0x20000718
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80002b4:	200301e0 	.word	0x200301e0
 80002b8:	20030a57 	.word	0x20030a57

080002bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80002bc:	e7fe      	b.n	80002bc <ADC1_IRQHandler>
	...

080002c0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80002ca:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80002ce:	4905      	ldr	r1, [pc, #20]	; (80002e4 <LL_EXTI_EnableIT_32_63+0x24>)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	4313      	orrs	r3, r2
 80002d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	58000800 	.word	0x58000800

080002e8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80002f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80002f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4013      	ands	r3, r2
 800030a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800030c:	68fb      	ldr	r3, [r7, #12]
}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr

0800031a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800031a:	b480      	push	{r7}
 800031c:	b085      	sub	sp, #20
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000326:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800032a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4313      	orrs	r3, r2
 8000332:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000336:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	4013      	ands	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000344:	68fb      	ldr	r3, [r7, #12]
}
 8000346:	bf00      	nop
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000352:	b580      	push	{r7, lr}
 8000354:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000356:	f002 f921 	bl	800259c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800035a:	f002 f925 	bl	80025a8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800035e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000362:	f7ff ffad 	bl	80002c0 <LL_EXTI_EnableIT_32_63>

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
#endif

  APPD_SetCPU2GpioConfig( );
 8000366:	f000 f821 	bl	80003ac <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 800036a:	f000 f8c3 	bl	80004f4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 800036e:	bf00      	nop
}
 8000370:	bd80      	pop	{r7, pc}
	...

08000374 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000374:	b5b0      	push	{r4, r5, r7, lr}
 8000376:	b088      	sub	sp, #32
 8000378:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <APPD_EnableCPU2+0x34>)
 800037c:	1d3c      	adds	r4, r7, #4
 800037e:	461d      	mov	r5, r3
 8000380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000388:	c403      	stmia	r4!, {r0, r1}
 800038a:	8022      	strh	r2, [r4, #0]
 800038c:	3402      	adds	r4, #2
 800038e:	0c13      	lsrs	r3, r2, #16
 8000390:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000392:	f007 fbe3 	bl	8007b5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4618      	mov	r0, r3
 800039a:	f006 ff06 	bl	80071aa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800039e:	bf00      	nop
}
 80003a0:	3720      	adds	r7, #32
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bdb0      	pop	{r4, r5, r7, pc}
 80003a6:	bf00      	nop
 80003a8:	0800a5ec 	.word	0x0800a5ec

080003ac <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b088      	sub	sp, #32
 80003b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80003cc:	2300      	movs	r3, #0
 80003ce:	77fb      	strb	r3, [r7, #31]
 80003d0:	e038      	b.n	8000444 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 80003d2:	7ffb      	ldrb	r3, [r7, #31]
 80003d4:	4a44      	ldr	r2, [pc, #272]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003d6:	00db      	lsls	r3, r3, #3
 80003d8:	4413      	add	r3, r2
 80003da:	799b      	ldrb	r3, [r3, #6]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d02b      	beq.n	8000438 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 80003e0:	7ffb      	ldrb	r3, [r7, #31]
 80003e2:	4a41      	ldr	r2, [pc, #260]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 80003e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003e8:	4a40      	ldr	r2, [pc, #256]	; (80004ec <APPD_SetCPU2GpioConfig+0x140>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d01b      	beq.n	8000426 <APPD_SetCPU2GpioConfig+0x7a>
 80003ee:	4a3f      	ldr	r2, [pc, #252]	; (80004ec <APPD_SetCPU2GpioConfig+0x140>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d823      	bhi.n	800043c <APPD_SetCPU2GpioConfig+0x90>
 80003f4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80003f8:	d003      	beq.n	8000402 <APPD_SetCPU2GpioConfig+0x56>
 80003fa:	4a3d      	ldr	r2, [pc, #244]	; (80004f0 <APPD_SetCPU2GpioConfig+0x144>)
 80003fc:	4293      	cmp	r3, r2
 80003fe:	d009      	beq.n	8000414 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000400:	e01c      	b.n	800043c <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000402:	7ffb      	ldrb	r3, [r7, #31]
 8000404:	4a38      	ldr	r2, [pc, #224]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000406:	00db      	lsls	r3, r3, #3
 8000408:	4413      	add	r3, r2
 800040a:	889a      	ldrh	r2, [r3, #4]
 800040c:	8bbb      	ldrh	r3, [r7, #28]
 800040e:	4313      	orrs	r3, r2
 8000410:	83bb      	strh	r3, [r7, #28]
          break;
 8000412:	e014      	b.n	800043e <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000414:	7ffb      	ldrb	r3, [r7, #31]
 8000416:	4a34      	ldr	r2, [pc, #208]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	4413      	add	r3, r2
 800041c:	889a      	ldrh	r2, [r3, #4]
 800041e:	8b7b      	ldrh	r3, [r7, #26]
 8000420:	4313      	orrs	r3, r2
 8000422:	837b      	strh	r3, [r7, #26]
          break;
 8000424:	e00b      	b.n	800043e <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000426:	7ffb      	ldrb	r3, [r7, #31]
 8000428:	4a2f      	ldr	r2, [pc, #188]	; (80004e8 <APPD_SetCPU2GpioConfig+0x13c>)
 800042a:	00db      	lsls	r3, r3, #3
 800042c:	4413      	add	r3, r2
 800042e:	889a      	ldrh	r2, [r3, #4]
 8000430:	8b3b      	ldrh	r3, [r7, #24]
 8000432:	4313      	orrs	r3, r2
 8000434:	833b      	strh	r3, [r7, #24]
          break;
 8000436:	e002      	b.n	800043e <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000438:	bf00      	nop
 800043a:	e000      	b.n	800043e <APPD_SetCPU2GpioConfig+0x92>
          break;
 800043c:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 800043e:	7ffb      	ldrb	r3, [r7, #31]
 8000440:	3301      	adds	r3, #1
 8000442:	77fb      	strb	r3, [r7, #31]
 8000444:	7ffb      	ldrb	r3, [r7, #31]
 8000446:	2b21      	cmp	r3, #33	; 0x21
 8000448:	d9c3      	bls.n	80003d2 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	2301      	movs	r3, #1
 8000450:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000452:	2303      	movs	r3, #3
 8000454:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000456:	8bbb      	ldrh	r3, [r7, #28]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d014      	beq.n	8000486 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800045c:	8bbb      	ldrh	r3, [r7, #28]
 800045e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	2001      	movs	r0, #1
 8000462:	f7ff ff41 	bl	80002e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ff57 	bl	800031a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f002 fba4 	bl	8002bc0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000478:	8bbb      	ldrh	r3, [r7, #28]
 800047a:	2200      	movs	r2, #0
 800047c:	4619      	mov	r1, r3
 800047e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000482:	f002 fd0d 	bl	8002ea0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000486:	8b7b      	ldrh	r3, [r7, #26]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d012      	beq.n	80004b2 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800048c:	8b7b      	ldrh	r3, [r7, #26]
 800048e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000490:	2002      	movs	r0, #2
 8000492:	f7ff ff29 	bl	80002e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000496:	2002      	movs	r0, #2
 8000498:	f7ff ff3f 	bl	800031a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800049c:	1d3b      	adds	r3, r7, #4
 800049e:	4619      	mov	r1, r3
 80004a0:	4813      	ldr	r0, [pc, #76]	; (80004f0 <APPD_SetCPU2GpioConfig+0x144>)
 80004a2:	f002 fb8d 	bl	8002bc0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80004a6:	8b7b      	ldrh	r3, [r7, #26]
 80004a8:	2200      	movs	r2, #0
 80004aa:	4619      	mov	r1, r3
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <APPD_SetCPU2GpioConfig+0x144>)
 80004ae:	f002 fcf7 	bl	8002ea0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80004b2:	8b3b      	ldrh	r3, [r7, #24]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d013      	beq.n	80004e0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 80004b8:	8b3b      	ldrh	r3, [r7, #24]
 80004ba:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004bc:	2004      	movs	r0, #4
 80004be:	f7ff ff13 	bl	80002e8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80004c2:	2004      	movs	r0, #4
 80004c4:	f7ff ff29 	bl	800031a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4619      	mov	r1, r3
 80004cc:	4807      	ldr	r0, [pc, #28]	; (80004ec <APPD_SetCPU2GpioConfig+0x140>)
 80004ce:	f002 fb77 	bl	8002bc0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 80004d2:	8b3b      	ldrh	r3, [r7, #24]
 80004d4:	2200      	movs	r2, #0
 80004d6:	4619      	mov	r1, r3
 80004d8:	4804      	ldr	r0, [pc, #16]	; (80004ec <APPD_SetCPU2GpioConfig+0x140>)
 80004da:	f002 fce1 	bl	8002ea0 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
}
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	0800a678 	.word	0x0800a678
 80004ec:	48000800 	.word	0x48000800
 80004f0:	48000400 	.word	0x48000400

080004f4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80004f8:	bf00      	nop
}
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
	...

08000504 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <LL_C2_PWR_SetPowerMode+0x28>)
 800050e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000512:	f023 0207 	bic.w	r2, r3, #7
 8000516:	4905      	ldr	r1, [pc, #20]	; (800052c <LL_C2_PWR_SetPowerMode+0x28>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4313      	orrs	r3, r2
 800051c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	58000400 	.word	0x58000400

08000530 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000542:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4313      	orrs	r3, r2
 800054a:	608b      	str	r3, [r1, #8]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 800055c:	f000 f814 	bl	8000588 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000560:	4908      	ldr	r1, [pc, #32]	; (8000584 <APPE_Init+0x2c>)
 8000562:	2000      	movs	r0, #0
 8000564:	f000 fd46 	bl	8000ff4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000568:	f7ff fef3 	bl	8000352 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 800056c:	2101      	movs	r1, #1
 800056e:	2001      	movs	r0, #1
 8000570:	f008 fa94 	bl	8008a9c <UTIL_LPM_SetOffMode>

  Led_Init();
 8000574:	f000 f867 	bl	8000646 <Led_Init>

  Button_Init();
 8000578:	f000 f875 	bl	8000666 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800057c:	f000 f812 	bl	80005a4 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000580:	bf00      	nop
}
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000618 	.word	0x20000618

08000588 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800058c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000590:	f7ff ffce 	bl	8000530 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000594:	f008 fa70 	bl	8008a78 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000598:	2004      	movs	r0, #4
 800059a:	f7ff ffb3 	bl	8000504 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 800059e:	bf00      	nop
}
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80005aa:	f007 f921 	bl	80077f0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 80005ae:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <appe_Tl_Init+0x50>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	2020      	movs	r0, #32
 80005b4:	f008 fb86 	bl	8008cc4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <appe_Tl_Init+0x54>)
 80005ba:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <appe_Tl_Init+0x58>)
 80005be:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <appe_Tl_Init+0x5c>)
 80005c6:	f006 fe07 	bl	80071d8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <appe_Tl_Init+0x60>)
 80005cc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <appe_Tl_Init+0x64>)
 80005d0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <appe_Tl_Init+0x68>)
 80005d4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80005d6:	f240 533c 	movw	r3, #1340	; 0x53c
 80005da:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	4618      	mov	r0, r3
 80005e2:	f007 fa47 	bl	8007a74 <TL_MM_Init>

  TL_Enable();
 80005e6:	f007 f8fd 	bl	80077e4 <TL_Enable>

  return;
 80005ea:	bf00      	nop
}
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	08007211 	.word	0x08007211
 80005f8:	20030724 	.word	0x20030724
 80005fc:	08000611 	.word	0x08000611
 8000600:	08000627 	.word	0x08000627
 8000604:	2003093c 	.word	0x2003093c
 8000608:	20030830 	.word	0x20030830
 800060c:	200301e8 	.word	0x200301e8

08000610 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800061a:	bf00      	nop
}
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 800062e:	f7ff fea1 	bl	8000374 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8000632:	f007 fb43 	bl	8007cbc <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000636:	2100      	movs	r1, #0
 8000638:	2001      	movs	r0, #1
 800063a:	f008 fa2f 	bl	8008a9c <UTIL_LPM_SetOffMode>
  return;
 800063e:	bf00      	nop
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800064a:	2000      	movs	r0, #0
 800064c:	f001 fdfa 	bl	8002244 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000650:	2001      	movs	r0, #1
 8000652:	f001 fdf7 	bl	8002244 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000656:	2002      	movs	r0, #2
 8000658:	f001 fdf4 	bl	8002244 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 800065c:	2001      	movs	r0, #1
 800065e:	f001 fe2b 	bl	80022b8 <BSP_LED_On>
#endif

  return;
 8000662:	bf00      	nop
}
 8000664:	bd80      	pop	{r7, pc}

08000666 <Button_Init>:

static void Button_Init( void )
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800066a:	2101      	movs	r1, #1
 800066c:	2000      	movs	r0, #0
 800066e:	f001 fe71 	bl	8002354 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000672:	2101      	movs	r1, #1
 8000674:	2001      	movs	r0, #1
 8000676:	f001 fe6d 	bl	8002354 <BSP_PB_Init>
#endif

  return;
 800067a:	bf00      	nop
}
 800067c:	bd80      	pop	{r7, pc}

0800067e <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8000682:	bf00      	nop
}
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr

0800068c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8000696:	f04f 30ff 	mov.w	r0, #4294967295
 800069a:	f008 fa2f 	bl	8008afc <UTIL_SEQ_Run>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80006ae:	2100      	movs	r1, #0
 80006b0:	2020      	movs	r0, #32
 80006b2:	f008 fb29 	bl	8008d08 <UTIL_SEQ_SetTask>
  return;
 80006b6:	bf00      	nop
}
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006c6:	2002      	movs	r0, #2
 80006c8:	f008 fb8a 	bl	8008de0 <UTIL_SEQ_SetEvt>
  return;
 80006cc:	bf00      	nop
}
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80006dc:	2002      	movs	r0, #2
 80006de:	f008 fb9f 	bl	8008e20 <UTIL_SEQ_WaitEvt>
  return;
 80006e2:	bf00      	nop
}
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	2b10      	cmp	r3, #16
 80006fa:	d006      	beq.n	800070a <HAL_GPIO_EXTI_Callback+0x1e>
 80006fc:	2b10      	cmp	r3, #16
 80006fe:	dc3d      	bgt.n	800077c <HAL_GPIO_EXTI_Callback+0x90>
 8000700:	2b01      	cmp	r3, #1
 8000702:	d005      	beq.n	8000710 <HAL_GPIO_EXTI_Callback+0x24>
 8000704:	2b02      	cmp	r3, #2
 8000706:	d03b      	beq.n	8000780 <HAL_GPIO_EXTI_Callback+0x94>
    case BUTTON_SW3_PIN:
      //APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8000708:	e038      	b.n	800077c <HAL_GPIO_EXTI_Callback+0x90>
     APP_BLE_Key_Button1_Action();
 800070a:	f007 fc29 	bl	8007f60 <APP_BLE_Key_Button1_Action>
      break; 
 800070e:	e038      	b.n	8000782 <HAL_GPIO_EXTI_Callback+0x96>
        APP_BLE_Key_Button2_Action();
 8000710:	f007 fc2c 	bl	8007f6c <APP_BLE_Key_Button2_Action>
    	BSP_LED_Toggle(LED1);
 8000714:	2000      	movs	r0, #0
 8000716:	f001 fe03 	bl	8002320 <BSP_LED_Toggle>
    	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800071a:	2200      	movs	r2, #0
 800071c:	491b      	ldr	r1, [pc, #108]	; (800078c <HAL_GPIO_EXTI_Callback+0xa0>)
 800071e:	481c      	ldr	r0, [pc, #112]	; (8000790 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000720:	f004 fbb8 	bl	8004e94 <HAL_RTC_GetTime>
    	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8000724:	2200      	movs	r2, #0
 8000726:	491b      	ldr	r1, [pc, #108]	; (8000794 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000728:	4819      	ldr	r0, [pc, #100]	; (8000790 <HAL_GPIO_EXTI_Callback+0xa4>)
 800072a:	f004 fcbd 	bl	80050a8 <HAL_RTC_GetDate>
    	currTime.tm_year = currentDate.Year + 100;  // In fact: 2000 + 18 - 1900
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000730:	78db      	ldrb	r3, [r3, #3]
 8000732:	3364      	adds	r3, #100	; 0x64
 8000734:	4a18      	ldr	r2, [pc, #96]	; (8000798 <HAL_GPIO_EXTI_Callback+0xac>)
 8000736:	6153      	str	r3, [r2, #20]
    	currTime.tm_mday = currentDate.Date;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <HAL_GPIO_EXTI_Callback+0xa8>)
 800073a:	789b      	ldrb	r3, [r3, #2]
 800073c:	461a      	mov	r2, r3
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <HAL_GPIO_EXTI_Callback+0xac>)
 8000740:	60da      	str	r2, [r3, #12]
    	currTime.tm_mon  = currentDate.Month - 1;
 8000742:	4b14      	ldr	r3, [pc, #80]	; (8000794 <HAL_GPIO_EXTI_Callback+0xa8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	3b01      	subs	r3, #1
 8000748:	4a13      	ldr	r2, [pc, #76]	; (8000798 <HAL_GPIO_EXTI_Callback+0xac>)
 800074a:	6113      	str	r3, [r2, #16]
    	currTime.tm_hour = currentTime.Hours;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_GPIO_EXTI_Callback+0xa0>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <HAL_GPIO_EXTI_Callback+0xac>)
 8000754:	609a      	str	r2, [r3, #8]
    	currTime.tm_min  = currentTime.Minutes;
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000758:	785b      	ldrb	r3, [r3, #1]
 800075a:	461a      	mov	r2, r3
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_GPIO_EXTI_Callback+0xac>)
 800075e:	605a      	str	r2, [r3, #4]
    	currTime.tm_sec  = currentTime.Seconds;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000762:	789b      	ldrb	r3, [r3, #2]
 8000764:	461a      	mov	r2, r3
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_GPIO_EXTI_Callback+0xac>)
 8000768:	601a      	str	r2, [r3, #0]
    	timestamp = mktime(&currTime);
 800076a:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_GPIO_EXTI_Callback+0xac>)
 800076c:	f008 fcf4 	bl	8009158 <mktime>
 8000770:	4602      	mov	r2, r0
 8000772:	460b      	mov	r3, r1
 8000774:	4909      	ldr	r1, [pc, #36]	; (800079c <HAL_GPIO_EXTI_Callback+0xb0>)
 8000776:	e9c1 2300 	strd	r2, r3, [r1]
      break; 
 800077a:	e002      	b.n	8000782 <HAL_GPIO_EXTI_Callback+0x96>
      break;
 800077c:	bf00      	nop
 800077e:	e000      	b.n	8000782 <HAL_GPIO_EXTI_Callback+0x96>
      break;
 8000780:	bf00      	nop

  }
  return;
 8000782:	bf00      	nop
}
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000424 	.word	0x20000424
 8000790:	20000618 	.word	0x20000618
 8000794:	20000420 	.word	0x20000420
 8000798:	20000438 	.word	0x20000438
 800079c:	20000418 	.word	0x20000418

080007a0 <LL_EXTI_EnableIT_0_31>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80007aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58000800 	.word	0x58000800

080007c8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4904      	ldr	r1, [pc, #16]	; (80007e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4313      	orrs	r3, r2
 80007da:	600b      	str	r3, [r1, #0]

}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	58000800 	.word	0x58000800

080007ec <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <ReadRtcSsrValue+0x3c>)
 80007f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <ReadRtcSsrValue+0x3c>)
 80007fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fe:	b29b      	uxth	r3, r3
 8000800:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000802:	e005      	b.n	8000810 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <ReadRtcSsrValue+0x3c>)
 800080a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080c:	b29b      	uxth	r3, r3
 800080e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d1f5      	bne.n	8000804 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000818:	683b      	ldr	r3, [r7, #0]
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40002800 	.word	0x40002800

0800082c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	4613      	mov	r3, r2
 800083a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800083c:	79ba      	ldrb	r2, [r7, #6]
 800083e:	491d      	ldr	r1, [pc, #116]	; (80008b4 <LinkTimerAfter+0x88>)
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	440b      	add	r3, r1
 800084a:	3315      	adds	r3, #21
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b06      	cmp	r3, #6
 8000854:	d009      	beq.n	800086a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000856:	7bfa      	ldrb	r2, [r7, #15]
 8000858:	4916      	ldr	r1, [pc, #88]	; (80008b4 <LinkTimerAfter+0x88>)
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3314      	adds	r3, #20
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	4911      	ldr	r1, [pc, #68]	; (80008b4 <LinkTimerAfter+0x88>)
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	3315      	adds	r3, #21
 800087a:	7bfa      	ldrb	r2, [r7, #15]
 800087c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800087e:	79fa      	ldrb	r2, [r7, #7]
 8000880:	490c      	ldr	r1, [pc, #48]	; (80008b4 <LinkTimerAfter+0x88>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3314      	adds	r3, #20
 800088e:	79ba      	ldrb	r2, [r7, #6]
 8000890:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000892:	79ba      	ldrb	r2, [r7, #6]
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <LinkTimerAfter+0x88>)
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	00db      	lsls	r3, r3, #3
 800089e:	440b      	add	r3, r1
 80008a0:	3315      	adds	r3, #21
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	701a      	strb	r2, [r3, #0]

  return;
 80008a6:	bf00      	nop
}
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000010c 	.word	0x2000010c

080008b8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	460a      	mov	r2, r1
 80008c2:	71fb      	strb	r3, [r7, #7]
 80008c4:	4613      	mov	r3, r2
 80008c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <LinkTimerBefore+0xb8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	79ba      	ldrb	r2, [r7, #6]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d032      	beq.n	800093a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80008d4:	79ba      	ldrb	r2, [r7, #6]
 80008d6:	4927      	ldr	r1, [pc, #156]	; (8000974 <LinkTimerBefore+0xbc>)
 80008d8:	4613      	mov	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	4413      	add	r3, r2
 80008de:	00db      	lsls	r3, r3, #3
 80008e0:	440b      	add	r3, r1
 80008e2:	3314      	adds	r3, #20
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80008e8:	7bfa      	ldrb	r2, [r7, #15]
 80008ea:	4922      	ldr	r1, [pc, #136]	; (8000974 <LinkTimerBefore+0xbc>)
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	440b      	add	r3, r1
 80008f6:	3315      	adds	r3, #21
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80008fc:	79fa      	ldrb	r2, [r7, #7]
 80008fe:	491d      	ldr	r1, [pc, #116]	; (8000974 <LinkTimerBefore+0xbc>)
 8000900:	4613      	mov	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	4413      	add	r3, r2
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	440b      	add	r3, r1
 800090a:	3315      	adds	r3, #21
 800090c:	79ba      	ldrb	r2, [r7, #6]
 800090e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000910:	79fa      	ldrb	r2, [r7, #7]
 8000912:	4918      	ldr	r1, [pc, #96]	; (8000974 <LinkTimerBefore+0xbc>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3314      	adds	r3, #20
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000924:	79ba      	ldrb	r2, [r7, #6]
 8000926:	4913      	ldr	r1, [pc, #76]	; (8000974 <LinkTimerBefore+0xbc>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3314      	adds	r3, #20
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000938:	e014      	b.n	8000964 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800093a:	79fa      	ldrb	r2, [r7, #7]
 800093c:	490d      	ldr	r1, [pc, #52]	; (8000974 <LinkTimerBefore+0xbc>)
 800093e:	4613      	mov	r3, r2
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	4413      	add	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	440b      	add	r3, r1
 8000948:	3315      	adds	r3, #21
 800094a:	79ba      	ldrb	r2, [r7, #6]
 800094c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800094e:	79ba      	ldrb	r2, [r7, #6]
 8000950:	4908      	ldr	r1, [pc, #32]	; (8000974 <LinkTimerBefore+0xbc>)
 8000952:	4613      	mov	r3, r2
 8000954:	005b      	lsls	r3, r3, #1
 8000956:	4413      	add	r3, r2
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	440b      	add	r3, r1
 800095c:	3314      	adds	r3, #20
 800095e:	79fa      	ldrb	r2, [r7, #7]
 8000960:	701a      	strb	r2, [r3, #0]
  return;
 8000962:	bf00      	nop
}
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	2000019c 	.word	0x2000019c
 8000974:	2000010c 	.word	0x2000010c

08000978 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000982:	4b4e      	ldr	r3, [pc, #312]	; (8000abc <linkTimer+0x144>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b06      	cmp	r3, #6
 800098a:	d118      	bne.n	80009be <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <linkTimer+0x144>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <linkTimer+0x148>)
 8000994:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000996:	4a49      	ldr	r2, [pc, #292]	; (8000abc <linkTimer+0x144>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	4949      	ldr	r1, [pc, #292]	; (8000ac4 <linkTimer+0x14c>)
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	440b      	add	r3, r1
 80009aa:	3315      	adds	r3, #21
 80009ac:	2206      	movs	r2, #6
 80009ae:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80009b0:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <linkTimer+0x150>)
 80009b2:	f04f 32ff 	mov.w	r2, #4294967295
 80009b6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	81fb      	strh	r3, [r7, #14]
 80009bc:	e078      	b.n	8000ab0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80009be:	f000 f909 	bl	8000bd4 <ReturnTimeElapsed>
 80009c2:	4603      	mov	r3, r0
 80009c4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	493e      	ldr	r1, [pc, #248]	; (8000ac4 <linkTimer+0x14c>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	3308      	adds	r3, #8
 80009d6:	6819      	ldr	r1, [r3, #0]
 80009d8:	89fb      	ldrh	r3, [r7, #14]
 80009da:	79fa      	ldrb	r2, [r7, #7]
 80009dc:	4419      	add	r1, r3
 80009de:	4839      	ldr	r0, [pc, #228]	; (8000ac4 <linkTimer+0x14c>)
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	4403      	add	r3, r0
 80009ea:	3308      	adds	r3, #8
 80009ec:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80009ee:	79fa      	ldrb	r2, [r7, #7]
 80009f0:	4934      	ldr	r1, [pc, #208]	; (8000ac4 <linkTimer+0x14c>)
 80009f2:	4613      	mov	r3, r2
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	4413      	add	r3, r2
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	440b      	add	r3, r1
 80009fc:	3308      	adds	r3, #8
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000a02:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <linkTimer+0x144>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <linkTimer+0x14c>)
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	440b      	add	r3, r1
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	4413      	add	r3, r2
 8000a16:	3308      	adds	r3, #8
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d337      	bcc.n	8000a90 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000a20:	4b26      	ldr	r3, [pc, #152]	; (8000abc <linkTimer+0x144>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000a26:	7b7a      	ldrb	r2, [r7, #13]
 8000a28:	4926      	ldr	r1, [pc, #152]	; (8000ac4 <linkTimer+0x14c>)
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	4413      	add	r3, r2
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	440b      	add	r3, r1
 8000a34:	3315      	adds	r3, #21
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a3a:	e013      	b.n	8000a64 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000a3c:	7b7a      	ldrb	r2, [r7, #13]
 8000a3e:	4921      	ldr	r1, [pc, #132]	; (8000ac4 <linkTimer+0x14c>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	3315      	adds	r3, #21
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000a50:	7b7a      	ldrb	r2, [r7, #13]
 8000a52:	491c      	ldr	r1, [pc, #112]	; (8000ac4 <linkTimer+0x14c>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3315      	adds	r3, #21
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000a64:	7b3b      	ldrb	r3, [r7, #12]
 8000a66:	2b06      	cmp	r3, #6
 8000a68:	d00b      	beq.n	8000a82 <linkTimer+0x10a>
 8000a6a:	7b3a      	ldrb	r2, [r7, #12]
 8000a6c:	4915      	ldr	r1, [pc, #84]	; (8000ac4 <linkTimer+0x14c>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	440b      	add	r3, r1
 8000a78:	3308      	adds	r3, #8
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	429a      	cmp	r2, r3
 8000a80:	d2dc      	bcs.n	8000a3c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000a82:	7b7a      	ldrb	r2, [r7, #13]
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	4611      	mov	r1, r2
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fecf 	bl	800082c <LinkTimerAfter>
 8000a8e:	e00f      	b.n	8000ab0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <linkTimer+0x144>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4611      	mov	r1, r2
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff ff0c 	bl	80008b8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <linkTimer+0x144>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <linkTimer+0x148>)
 8000aa8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <linkTimer+0x144>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000019c 	.word	0x2000019c
 8000ac0:	2000019d 	.word	0x2000019d
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	200001a0 	.word	0x200001a0

08000acc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	460a      	mov	r2, r1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000adc:	4b39      	ldr	r3, [pc, #228]	; (8000bc4 <UnlinkTimer+0xf8>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	79fa      	ldrb	r2, [r7, #7]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d111      	bne.n	8000b0c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ae8:	4b36      	ldr	r3, [pc, #216]	; (8000bc4 <UnlinkTimer+0xf8>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4b36      	ldr	r3, [pc, #216]	; (8000bc8 <UnlinkTimer+0xfc>)
 8000af0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000af2:	79fa      	ldrb	r2, [r7, #7]
 8000af4:	4935      	ldr	r1, [pc, #212]	; (8000bcc <UnlinkTimer+0x100>)
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	440b      	add	r3, r1
 8000b00:	3315      	adds	r3, #21
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4b2f      	ldr	r3, [pc, #188]	; (8000bc4 <UnlinkTimer+0xf8>)
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e03e      	b.n	8000b8a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000b0c:	79fa      	ldrb	r2, [r7, #7]
 8000b0e:	492f      	ldr	r1, [pc, #188]	; (8000bcc <UnlinkTimer+0x100>)
 8000b10:	4613      	mov	r3, r2
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	4413      	add	r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	3314      	adds	r3, #20
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000b20:	79fa      	ldrb	r2, [r7, #7]
 8000b22:	492a      	ldr	r1, [pc, #168]	; (8000bcc <UnlinkTimer+0x100>)
 8000b24:	4613      	mov	r3, r2
 8000b26:	005b      	lsls	r3, r3, #1
 8000b28:	4413      	add	r3, r2
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	440b      	add	r3, r1
 8000b2e:	3315      	adds	r3, #21
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000b34:	79f9      	ldrb	r1, [r7, #7]
 8000b36:	7bfa      	ldrb	r2, [r7, #15]
 8000b38:	4824      	ldr	r0, [pc, #144]	; (8000bcc <UnlinkTimer+0x100>)
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	440b      	add	r3, r1
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	4403      	add	r3, r0
 8000b44:	3315      	adds	r3, #21
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2d8      	uxtb	r0, r3
 8000b4a:	4920      	ldr	r1, [pc, #128]	; (8000bcc <UnlinkTimer+0x100>)
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4413      	add	r3, r2
 8000b52:	00db      	lsls	r3, r3, #3
 8000b54:	440b      	add	r3, r1
 8000b56:	3315      	adds	r3, #21
 8000b58:	4602      	mov	r2, r0
 8000b5a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b5c:	7bbb      	ldrb	r3, [r7, #14]
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d013      	beq.n	8000b8a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000b62:	79f9      	ldrb	r1, [r7, #7]
 8000b64:	7bba      	ldrb	r2, [r7, #14]
 8000b66:	4819      	ldr	r0, [pc, #100]	; (8000bcc <UnlinkTimer+0x100>)
 8000b68:	460b      	mov	r3, r1
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	440b      	add	r3, r1
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	4403      	add	r3, r0
 8000b72:	3314      	adds	r3, #20
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2d8      	uxtb	r0, r3
 8000b78:	4914      	ldr	r1, [pc, #80]	; (8000bcc <UnlinkTimer+0x100>)
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	3314      	adds	r3, #20
 8000b86:	4602      	mov	r2, r0
 8000b88:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000b8a:	79fa      	ldrb	r2, [r7, #7]
 8000b8c:	490f      	ldr	r1, [pc, #60]	; (8000bcc <UnlinkTimer+0x100>)
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	330c      	adds	r3, #12
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <UnlinkTimer+0xf8>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d107      	bne.n	8000bb8 <UnlinkTimer+0xec>
 8000ba8:	79bb      	ldrb	r3, [r7, #6]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d104      	bne.n	8000bb8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <UnlinkTimer+0x104>)
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000bb6:	bf00      	nop
 8000bb8:	bf00      	nop
}
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	2000019c 	.word	0x2000019c
 8000bc8:	2000019d 	.word	0x2000019d
 8000bcc:	2000010c 	.word	0x2000010c
 8000bd0:	200001a0 	.word	0x200001a0

08000bd4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <ReturnTimeElapsed+0x70>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be2:	d026      	beq.n	8000c32 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000be4:	f7ff fe02 	bl	80007ec <ReadRtcSsrValue>
 8000be8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <ReturnTimeElapsed+0x70>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d805      	bhi.n	8000c00 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <ReturnTimeElapsed+0x70>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	1ad3      	subs	r3, r2, r3
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	e00a      	b.n	8000c16 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <ReturnTimeElapsed+0x74>)
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	461a      	mov	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <ReturnTimeElapsed+0x70>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <ReturnTimeElapsed+0x78>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	fb02 f303 	mul.w	r3, r2, r3
 8000c22:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <ReturnTimeElapsed+0x7c>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	40d3      	lsrs	r3, r2
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	e001      	b.n	8000c36 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	b29b      	uxth	r3, r3
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200001a0 	.word	0x200001a0
 8000c48:	200002ba 	.word	0x200002ba
 8000c4c:	200002b9 	.word	0x200002b9
 8000c50:	200002b8 	.word	0x200002b8

08000c54 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000c5e:	88fb      	ldrh	r3, [r7, #6]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d108      	bne.n	8000c76 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000c64:	f7ff fdc2 	bl	80007ec <ReadRtcSsrValue>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <RestartWakeupCounter+0xa8>)
 8000c6c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000c6e:	2003      	movs	r0, #3
 8000c70:	f001 fe1d 	bl	80028ae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000c74:	e03e      	b.n	8000cf4 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000c76:	88fb      	ldrh	r3, [r7, #6]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d803      	bhi.n	8000c84 <RestartWakeupCounter+0x30>
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <RestartWakeupCounter+0xac>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d002      	beq.n	8000c8a <RestartWakeupCounter+0x36>
      Value -= 1;
 8000c84:	88fb      	ldrh	r3, [r7, #6]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000c8a:	bf00      	nop
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <RestartWakeupCounter+0xb0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d0f7      	beq.n	8000c8c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <RestartWakeupCounter+0xb0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <RestartWakeupCounter+0xb0>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000cb0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <RestartWakeupCounter+0xb4>)
 8000cb4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cb8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000cba:	2003      	movs	r0, #3
 8000cbc:	f001 fe05 	bl	80028ca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <RestartWakeupCounter+0xb8>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	0c1b      	lsrs	r3, r3, #16
 8000cc6:	041b      	lsls	r3, r3, #16
 8000cc8:	88fa      	ldrh	r2, [r7, #6]
 8000cca:	4910      	ldr	r1, [pc, #64]	; (8000d0c <RestartWakeupCounter+0xb8>)
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000cd0:	f7ff fd8c 	bl	80007ec <ReadRtcSsrValue>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <RestartWakeupCounter+0xa8>)
 8000cd8:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <RestartWakeupCounter+0xb0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <RestartWakeupCounter+0xb0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000cec:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000cee:	f3af 8000 	nop.w
  return ;
 8000cf2:	bf00      	nop
}
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200001a0 	.word	0x200001a0
 8000d00:	200002b8 	.word	0x200002b8
 8000d04:	200002b4 	.word	0x200002b4
 8000d08:	58000800 	.word	0x58000800
 8000d0c:	40002800 	.word	0x40002800

08000d10 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000d16:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <RescheduleTimerList+0x124>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d22:	d108      	bne.n	8000d36 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000d24:	bf00      	nop
 8000d26:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <RescheduleTimerList+0x128>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d1f7      	bne.n	8000d26 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000d36:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <RescheduleTimerList+0x128>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <RescheduleTimerList+0x128>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d48:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000d4a:	4b3c      	ldr	r3, [pc, #240]	; (8000e3c <RescheduleTimerList+0x12c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000d50:	7bfa      	ldrb	r2, [r7, #15]
 8000d52:	493b      	ldr	r1, [pc, #236]	; (8000e40 <RescheduleTimerList+0x130>)
 8000d54:	4613      	mov	r3, r2
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	4413      	add	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	440b      	add	r3, r1
 8000d5e:	3308      	adds	r3, #8
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000d64:	f7ff ff36 	bl	8000bd4 <ReturnTimeElapsed>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d205      	bcs.n	8000d80 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000d78:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <RescheduleTimerList+0x134>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
 8000d7e:	e04d      	b.n	8000e1c <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <RescheduleTimerList+0x138>)
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	b292      	uxth	r2, r2
 8000d88:	4413      	add	r3, r2
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d906      	bls.n	8000da0 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <RescheduleTimerList+0x138>)
 8000d94:	881b      	ldrh	r3, [r3, #0]
 8000d96:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <RescheduleTimerList+0x134>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e03d      	b.n	8000e1c <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	88fb      	ldrh	r3, [r7, #6]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <RescheduleTimerList+0x134>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000db0:	e034      	b.n	8000e1c <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	4922      	ldr	r1, [pc, #136]	; (8000e40 <RescheduleTimerList+0x130>)
 8000db6:	4613      	mov	r3, r2
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	4413      	add	r3, r2
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	440b      	add	r3, r1
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d20a      	bcs.n	8000de0 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	491c      	ldr	r1, [pc, #112]	; (8000e40 <RescheduleTimerList+0x130>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3308      	adds	r3, #8
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e013      	b.n	8000e08 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000de0:	7bfa      	ldrb	r2, [r7, #15]
 8000de2:	4917      	ldr	r1, [pc, #92]	; (8000e40 <RescheduleTimerList+0x130>)
 8000de4:	4613      	mov	r3, r2
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4413      	add	r3, r2
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	440b      	add	r3, r1
 8000dee:	3308      	adds	r3, #8
 8000df0:	6819      	ldr	r1, [r3, #0]
 8000df2:	88fb      	ldrh	r3, [r7, #6]
 8000df4:	7bfa      	ldrb	r2, [r7, #15]
 8000df6:	1ac9      	subs	r1, r1, r3
 8000df8:	4811      	ldr	r0, [pc, #68]	; (8000e40 <RescheduleTimerList+0x130>)
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	4403      	add	r3, r0
 8000e04:	3308      	adds	r3, #8
 8000e06:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000e08:	7bfa      	ldrb	r2, [r7, #15]
 8000e0a:	490d      	ldr	r1, [pc, #52]	; (8000e40 <RescheduleTimerList+0x130>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	440b      	add	r3, r1
 8000e16:	3315      	adds	r3, #21
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d1c7      	bne.n	8000db2 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000e22:	89bb      	ldrh	r3, [r7, #12]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff15 	bl	8000c54 <RestartWakeupCounter>

  return ;
 8000e2a:	bf00      	nop
}
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40002800 	.word	0x40002800
 8000e38:	200002b4 	.word	0x200002b4
 8000e3c:	2000019c 	.word	0x2000019c
 8000e40:	2000010c 	.word	0x2000010c
 8000e44:	200001a4 	.word	0x200001a4
 8000e48:	200002bc 	.word	0x200002bc

08000e4c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000e52:	f3ef 8310 	mrs	r3, PRIMASK
 8000e56:	617b      	str	r3, [r7, #20]
  return(result);
 8000e58:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000e60:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	22ca      	movs	r2, #202	; 0xca
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
 8000e6a:	4b5d      	ldr	r3, [pc, #372]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2253      	movs	r2, #83	; 0x53
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000e74:	4b5a      	ldr	r3, [pc, #360]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689a      	ldr	r2, [r3, #8]
 8000e7c:	4b58      	ldr	r3, [pc, #352]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e86:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000e88:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000e90:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000e94:	4954      	ldr	r1, [pc, #336]	; (8000fe8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000e96:	4613      	mov	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	440b      	add	r3, r1
 8000ea0:	330c      	adds	r3, #12
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	d172      	bne.n	8000f90 <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000eaa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000eae:	494e      	ldr	r1, [pc, #312]	; (8000fe8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	440b      	add	r3, r1
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ebe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ec2:	4949      	ldr	r1, [pc, #292]	; (8000fe8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	440b      	add	r3, r1
 8000ece:	3310      	adds	r3, #16
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000ed4:	4b45      	ldr	r3, [pc, #276]	; (8000fec <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d050      	beq.n	8000f80 <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000ede:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ee2:	4941      	ldr	r1, [pc, #260]	; (8000fe8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4413      	add	r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	440b      	add	r3, r1
 8000eee:	330d      	adds	r3, #13
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d126      	bne.n	8000f46 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000efc:	2101      	movs	r1, #1
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fde4 	bl	8000acc <UnlinkTimer>
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	f383 8810 	msr	PRIMASK, r3
}
 8000f0e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000f10:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000f14:	4934      	ldr	r1, [pc, #208]	; (8000fe8 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	3304      	adds	r3, #4
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 fa4e 	bl	80013cc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	22ca      	movs	r2, #202	; 0xca
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
 8000f3a:	4b29      	ldr	r3, [pc, #164]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2253      	movs	r2, #83	; 0x53
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
 8000f44:	e014      	b.n	8000f70 <HW_TS_RTC_Wakeup_Handler+0x124>
 8000f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f383 8810 	msr	PRIMASK, r3
}
 8000f50:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000f52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 f9ac 	bl	80012b4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f5c:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	22ca      	movs	r2, #202	; 0xca
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
 8000f66:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2253      	movs	r2, #83	; 0x53
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	4619      	mov	r1, r3
 8000f78:	69b8      	ldr	r0, [r7, #24]
 8000f7a:	f000 faaf 	bl	80014dc <HW_TS_RTC_Int_AppNot>
 8000f7e:	e025      	b.n	8000fcc <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 8000f80:	f7ff fec6 	bl	8000d10 <RescheduleTimerList>
 8000f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f86:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	f383 8810 	msr	PRIMASK, r3
}
 8000f8e:	e01d      	b.n	8000fcc <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000f90:	bf00      	nop
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0f7      	beq.n	8000f92 <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000fb6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 8000fba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fbe:	60da      	str	r2, [r3, #12]
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f383 8810 	msr	PRIMASK, r3
}
 8000fca:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	22ff      	movs	r2, #255	; 0xff
 8000fd4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200002b4 	.word	0x200002b4
 8000fe4:	2000019c 	.word	0x2000019c
 8000fe8:	2000010c 	.word	0x2000010c
 8000fec:	200001a4 	.word	0x200001a4
 8000ff0:	58000800 	.word	0x58000800

08000ff4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001000:	4a64      	ldr	r2, [pc, #400]	; (8001194 <HW_TS_Init+0x1a0>)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001006:	4b63      	ldr	r3, [pc, #396]	; (8001194 <HW_TS_Init+0x1a0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	22ca      	movs	r2, #202	; 0xca
 800100e:	625a      	str	r2, [r3, #36]	; 0x24
 8001010:	4b60      	ldr	r3, [pc, #384]	; (8001194 <HW_TS_Init+0x1a0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2253      	movs	r2, #83	; 0x53
 8001018:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800101a:	4b5f      	ldr	r3, [pc, #380]	; (8001198 <HW_TS_Init+0x1a4>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	4a5e      	ldr	r2, [pc, #376]	; (8001198 <HW_TS_Init+0x1a4>)
 8001020:	f043 0320 	orr.w	r3, r3, #32
 8001024:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001026:	4b5c      	ldr	r3, [pc, #368]	; (8001198 <HW_TS_Init+0x1a4>)
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	b2db      	uxtb	r3, r3
 8001032:	f1c3 0304 	rsb	r3, r3, #4
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b58      	ldr	r3, [pc, #352]	; (800119c <HW_TS_Init+0x1a8>)
 800103a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800103c:	4b56      	ldr	r3, [pc, #344]	; (8001198 <HW_TS_Init+0x1a4>)
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001044:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001048:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	fa92 f2a2 	rbit	r2, r2
 8001050:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	2a00      	cmp	r2, #0
 800105a:	d101      	bne.n	8001060 <HW_TS_Init+0x6c>
  {
    return 32U;
 800105c:	2220      	movs	r2, #32
 800105e:	e003      	b.n	8001068 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	fab2 f282 	clz	r2, r2
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	40d3      	lsrs	r3, r2
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3301      	adds	r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <HW_TS_Init+0x1ac>)
 8001072:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001074:	4b48      	ldr	r3, [pc, #288]	; (8001198 <HW_TS_Init+0x1a4>)
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	b29b      	uxth	r3, r3
 800107a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800107e:	b29b      	uxth	r3, r3
 8001080:	3301      	adds	r3, #1
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HW_TS_Init+0x1b0>)
 8001086:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001088:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <HW_TS_Init+0x1b0>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	4a44      	ldr	r2, [pc, #272]	; (80011a0 <HW_TS_Init+0x1ac>)
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800109a:	4a40      	ldr	r2, [pc, #256]	; (800119c <HW_TS_Init+0x1a8>)
 800109c:	7812      	ldrb	r2, [r2, #0]
 800109e:	40d3      	lsrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d904      	bls.n	80010b6 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80010ac:	4b3e      	ldr	r3, [pc, #248]	; (80011a8 <HW_TS_Init+0x1b4>)
 80010ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b2:	801a      	strh	r2, [r3, #0]
 80010b4:	e003      	b.n	80010be <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HW_TS_Init+0x1b4>)
 80010bc:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010be:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010c2:	f7ff fb81 	bl	80007c8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80010c6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80010ca:	f7ff fb69 	bl	80007a0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d143      	bne.n	800115c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80010d4:	4b35      	ldr	r3, [pc, #212]	; (80011ac <HW_TS_Init+0x1b8>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80010da:	4b35      	ldr	r3, [pc, #212]	; (80011b0 <HW_TS_Init+0x1bc>)
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	77fb      	strb	r3, [r7, #31]
 80010e6:	e00c      	b.n	8001102 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80010e8:	7ffa      	ldrb	r2, [r7, #31]
 80010ea:	4932      	ldr	r1, [pc, #200]	; (80011b4 <HW_TS_Init+0x1c0>)
 80010ec:	4613      	mov	r3, r2
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	440b      	add	r3, r1
 80010f6:	330c      	adds	r3, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80010fc:	7ffb      	ldrb	r3, [r7, #31]
 80010fe:	3301      	adds	r3, #1
 8001100:	77fb      	strb	r3, [r7, #31]
 8001102:	7ffb      	ldrb	r3, [r7, #31]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d9ef      	bls.n	80010e8 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HW_TS_Init+0x1c4>)
 800110a:	2206      	movs	r2, #6
 800110c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <HW_TS_Init+0x1a0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <HW_TS_Init+0x1a0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001120:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <HW_TS_Init+0x1a0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HW_TS_Init+0x1a0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001136:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HW_TS_Init+0x1c8>)
 800113a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800113e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001140:	2003      	movs	r0, #3
 8001142:	f001 fbc2 	bl	80028ca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <HW_TS_Init+0x1a0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <HW_TS_Init+0x1a0>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	e00a      	b.n	8001172 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <HW_TS_Init+0x1a0>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800116c:	2003      	movs	r0, #3
 800116e:	f001 fb9e 	bl	80028ae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HW_TS_Init+0x1a0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	22ff      	movs	r2, #255	; 0xff
 800117a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800117c:	2200      	movs	r2, #0
 800117e:	2103      	movs	r1, #3
 8001180:	2003      	movs	r0, #3
 8001182:	f001 fb52 	bl	800282a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001186:	2003      	movs	r0, #3
 8001188:	f001 fb69 	bl	800285e <HAL_NVIC_EnableIRQ>

  return;
 800118c:	bf00      	nop
}
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200002b4 	.word	0x200002b4
 8001198:	40002800 	.word	0x40002800
 800119c:	200002b8 	.word	0x200002b8
 80011a0:	200002b9 	.word	0x200002b9
 80011a4:	200002ba 	.word	0x200002ba
 80011a8:	200002bc 	.word	0x200002bc
 80011ac:	200001a4 	.word	0x200001a4
 80011b0:	200001a0 	.word	0x200001a0
 80011b4:	2000010c 	.word	0x2000010c
 80011b8:	2000019c 	.word	0x2000019c
 80011bc:	58000800 	.word	0x58000800

080011c0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	603b      	str	r3, [r7, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011d6:	f3ef 8310 	mrs	r3, PRIMASK
 80011da:	61fb      	str	r3, [r7, #28]
  return(result);
 80011dc:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80011e0:	b672      	cpsid	i
}
 80011e2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011e4:	e004      	b.n	80011f0 <HW_TS_Create+0x30>
  {
    loop++;
 80011e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011ea:	3301      	adds	r3, #1
 80011ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80011f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d80c      	bhi.n	8001212 <HW_TS_Create+0x52>
 80011f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80011fc:	492c      	ldr	r1, [pc, #176]	; (80012b0 <HW_TS_Create+0xf0>)
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	330c      	adds	r3, #12
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1e9      	bne.n	80011e6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001212:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001216:	2b06      	cmp	r3, #6
 8001218:	d038      	beq.n	800128c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800121a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800121e:	4924      	ldr	r1, [pc, #144]	; (80012b0 <HW_TS_Create+0xf0>)
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	330c      	adds	r3, #12
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	f383 8810 	msr	PRIMASK, r3
}
 800123a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800123c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001240:	491b      	ldr	r1, [pc, #108]	; (80012b0 <HW_TS_Create+0xf0>)
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	440b      	add	r3, r1
 800124c:	3310      	adds	r3, #16
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8001252:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001256:	4916      	ldr	r1, [pc, #88]	; (80012b0 <HW_TS_Create+0xf0>)
 8001258:	4613      	mov	r3, r2
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4413      	add	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	440b      	add	r3, r1
 8001262:	330d      	adds	r3, #13
 8001264:	79fa      	ldrb	r2, [r7, #7]
 8001266:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001268:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800126c:	4910      	ldr	r1, [pc, #64]	; (80012b0 <HW_TS_Create+0xf0>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	440b      	add	r3, r1
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001282:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800128a:	e008      	b.n	800129e <HW_TS_Create+0xde>
 800128c:	6a3b      	ldr	r3, [r7, #32]
 800128e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f383 8810 	msr	PRIMASK, r3
}
 8001296:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001298:	2301      	movs	r3, #1
 800129a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800129e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	372c      	adds	r7, #44	; 0x2c
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	2000010c 	.word	0x2000010c

080012b4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012be:	f3ef 8310 	mrs	r3, PRIMASK
 80012c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80012c4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012cc:	2003      	movs	r0, #3
 80012ce:	f001 fad4 	bl	800287a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80012d2:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HW_TS_Stop+0x100>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	22ca      	movs	r2, #202	; 0xca
 80012da:	625a      	str	r2, [r3, #36]	; 0x24
 80012dc:	4b35      	ldr	r3, [pc, #212]	; (80013b4 <HW_TS_Stop+0x100>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2253      	movs	r2, #83	; 0x53
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	4933      	ldr	r1, [pc, #204]	; (80013b8 <HW_TS_Stop+0x104>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	440b      	add	r3, r1
 80012f4:	330c      	adds	r3, #12
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d148      	bne.n	8001390 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fbe2 	bl	8000acc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <HW_TS_Stop+0x108>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800130e:	7cfb      	ldrb	r3, [r7, #19]
 8001310:	2b06      	cmp	r3, #6
 8001312:	d135      	bne.n	8001380 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <HW_TS_Stop+0x10c>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001320:	d108      	bne.n	8001334 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001322:	bf00      	nop
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HW_TS_Stop+0x100>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1f7      	bne.n	8001324 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <HW_TS_Stop+0x100>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HW_TS_Stop+0x100>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001346:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001348:	bf00      	nop
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HW_TS_Stop+0x100>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f7      	beq.n	800134a <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800135a:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <HW_TS_Stop+0x100>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HW_TS_Stop+0x100>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800136e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HW_TS_Stop+0x110>)
 8001372:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001376:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001378:	2003      	movs	r0, #3
 800137a:	f001 faa6 	bl	80028ca <HAL_NVIC_ClearPendingIRQ>
 800137e:	e007      	b.n	8001390 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HW_TS_Stop+0x114>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	7cfa      	ldrb	r2, [r7, #19]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 800138c:	f7ff fcc0 	bl	8000d10 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HW_TS_Stop+0x100>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	22ff      	movs	r2, #255	; 0xff
 8001398:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800139a:	2003      	movs	r0, #3
 800139c:	f001 fa5f 	bl	800285e <HAL_NVIC_EnableIRQ>
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f383 8810 	msr	PRIMASK, r3
}
 80013aa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013ac:	bf00      	nop
}
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200002b4 	.word	0x200002b4
 80013b8:	2000010c 	.word	0x2000010c
 80013bc:	2000019c 	.word	0x2000019c
 80013c0:	40002800 	.word	0x40002800
 80013c4:	58000800 	.word	0x58000800
 80013c8:	2000019d 	.word	0x2000019d

080013cc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	493c      	ldr	r1, [pc, #240]	; (80014cc <HW_TS_Start+0x100>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	330c      	adds	r3, #12
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d103      	bne.n	80013f8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff5e 	bl	80012b4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013f8:	f3ef 8310 	mrs	r3, PRIMASK
 80013fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80013fe:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001402:	b672      	cpsid	i
}
 8001404:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001406:	2003      	movs	r0, #3
 8001408:	f001 fa37 	bl	800287a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800140c:	4b30      	ldr	r3, [pc, #192]	; (80014d0 <HW_TS_Start+0x104>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	22ca      	movs	r2, #202	; 0xca
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
 8001416:	4b2e      	ldr	r3, [pc, #184]	; (80014d0 <HW_TS_Start+0x104>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2253      	movs	r2, #83	; 0x53
 800141e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	492a      	ldr	r1, [pc, #168]	; (80014cc <HW_TS_Start+0x100>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	330c      	adds	r3, #12
 8001430:	2202      	movs	r2, #2
 8001432:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001434:	79fa      	ldrb	r2, [r7, #7]
 8001436:	4925      	ldr	r1, [pc, #148]	; (80014cc <HW_TS_Start+0x100>)
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	3308      	adds	r3, #8
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	4920      	ldr	r1, [pc, #128]	; (80014cc <HW_TS_Start+0x100>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	440b      	add	r3, r1
 8001456:	3304      	adds	r3, #4
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff fa8a 	bl	8000978 <linkTimer>
 8001464:	4603      	mov	r3, r0
 8001466:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HW_TS_Start+0x108>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HW_TS_Start+0x10c>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	7c7a      	ldrb	r2, [r7, #17]
 8001476:	429a      	cmp	r2, r3
 8001478:	d002      	beq.n	8001480 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 800147a:	f7ff fc49 	bl	8000d10 <RescheduleTimerList>
 800147e:	e013      	b.n	80014a8 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	4912      	ldr	r1, [pc, #72]	; (80014cc <HW_TS_Start+0x100>)
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	3308      	adds	r3, #8
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	8a7b      	ldrh	r3, [r7, #18]
 8001494:	79fa      	ldrb	r2, [r7, #7]
 8001496:	1ac9      	subs	r1, r1, r3
 8001498:	480c      	ldr	r0, [pc, #48]	; (80014cc <HW_TS_Start+0x100>)
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	00db      	lsls	r3, r3, #3
 80014a2:	4403      	add	r3, r0
 80014a4:	3308      	adds	r3, #8
 80014a6:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HW_TS_Start+0x104>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014b2:	2003      	movs	r0, #3
 80014b4:	f001 f9d3 	bl	800285e <HAL_NVIC_EnableIRQ>
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	f383 8810 	msr	PRIMASK, r3
}
 80014c2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014c4:	bf00      	nop
}
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000010c 	.word	0x2000010c
 80014d0:	200002b4 	.word	0x200002b4
 80014d4:	2000019c 	.word	0x2000019c
 80014d8:	2000019d 	.word	0x2000019d

080014dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	460b      	mov	r3, r1
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4798      	blx	r3

  return;
 80014ee:	bf00      	nop
}
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <LL_PWR_SMPS_Enable>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <LL_PWR_SMPS_Enable+0x1c>)
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <LL_PWR_SMPS_Enable+0x1c>)
 8001502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001506:	61d3      	str	r3, [r2, #28]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	58000400 	.word	0x58000400

08001518 <LL_PWR_SMPS_SetStartupCurrent>:
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001522:	69db      	ldr	r3, [r3, #28]
 8001524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001528:	4904      	ldr	r1, [pc, #16]	; (800153c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4313      	orrs	r3, r2
 800152e:	61cb      	str	r3, [r1, #28]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	58000400 	.word	0x58000400

08001540 <LL_PWR_SMPS_SetOutputVoltageLevel>:
{
 8001540:	b480      	push	{r7}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	0a1b      	lsrs	r3, r3, #8
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	60fb      	str	r3, [r7, #12]
  if(OutputVoltageLevel_calibration == 0UL)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d108      	bne.n	800156c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800155a:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f023 020f 	bic.w	r2, r3, #15
 8001562:	4913      	ldr	r1, [pc, #76]	; (80015b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4313      	orrs	r3, r2
 8001568:	61cb      	str	r3, [r1, #28]
}
 800156a:	e019      	b.n	80015a0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3b06      	subs	r3, #6
 8001570:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4413      	add	r3, r2
 8001578:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2b00      	cmp	r3, #0
 800157e:	da02      	bge.n	8001586 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	e004      	b.n	8001590 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	dd01      	ble.n	8001590 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 800158c:	230f      	movs	r3, #15
 800158e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001590:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	f023 020f 	bic.w	r2, r3, #15
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	4905      	ldr	r1, [pc, #20]	; (80015b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800159c:	4313      	orrs	r3, r2
 800159e:	61cb      	str	r3, [r1, #28]
}
 80015a0:	bf00      	nop
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	1fff7558 	.word	0x1fff7558
 80015b0:	58000400 	.word	0x58000400

080015b4 <LL_EXTI_DisableIT_0_31>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <LL_EXTI_DisableIT_0_31+0x28>)
 80015be:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4905      	ldr	r1, [pc, #20]	; (80015dc <LL_EXTI_DisableIT_0_31+0x28>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	58000800 	.word	0x58000800

080015e0 <LL_EXTI_DisableIT_32_63>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <LL_EXTI_DisableIT_32_63+0x28>)
 80015ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	4905      	ldr	r1, [pc, #20]	; (8001608 <LL_EXTI_DisableIT_32_63+0x28>)
 80015f4:	4013      	ands	r3, r2
 80015f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	58000800 	.word	0x58000800

0800160c <LL_RCC_HSE_SetCapacitorTuning>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800161a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001626:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001632:	4313      	orrs	r3, r2
 8001634:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	cafecafe 	.word	0xcafecafe

08001648 <LL_RCC_LSE_SetDriveCapability>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001650:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001658:	f023 0218 	bic.w	r2, r3, #24
 800165c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4313      	orrs	r3, r2
 8001664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800169a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016cc:	d101      	bne.n	80016d2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80016e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016f2:	d101      	bne.n	80016f8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_AHB1_GRP1_EnableClock>:
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800170c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4013      	ands	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001728:	68fb      	ldr	r3, [r7, #12]
}
 800172a:	bf00      	nop
 800172c:	3714      	adds	r7, #20
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_AHB2_GRP1_EnableClock>:
{
 8001736:	b480      	push	{r7}
 8001738:	b085      	sub	sp, #20
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800173e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001742:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001744:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4313      	orrs	r3, r2
 800174c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800174e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4013      	ands	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800175a:	68fb      	ldr	r3, [r7, #12]
}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_AHB3_GRP1_EnableClock>:
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4313      	orrs	r3, r2
 800177e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4013      	ands	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800178c:	68fb      	ldr	r3, [r7, #12]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	041b      	lsls	r3, r3, #16
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	605a      	str	r2, [r3, #4]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	605a      	str	r2, [r3, #4]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	615a      	str	r2, [r3, #20]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	431a      	orrs	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	615a      	str	r2, [r3, #20]
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
 800182e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	609a      	str	r2, [r3, #8]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
	...

08001860 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <LL_LPM_EnableSleep+0x1c>)
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <LL_LPM_EnableSleep+0x1c>)
 800186a:	f023 0304 	bic.w	r3, r3, #4
 800186e:	6113      	str	r3, [r2, #16]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	22ff      	movs	r2, #255	; 0xff
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	22ca      	movs	r2, #202	; 0xca
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2253      	movs	r2, #83	; 0x53
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 0207 	bic.w	r2, r3, #7
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	431a      	orrs	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	609a      	str	r2, [r3, #8]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <main+0x54>)
 80018e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018ea:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018ec:	f000 fdc4 	bl	8002478 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 80018f0:	f000 fa31 	bl	8001d56 <Reset_Device>
  Config_HSE();
 80018f4:	f000 fa1b 	bl	8001d2e <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f8:	f000 f81e 	bl	8001938 <SystemClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80018fc:	f000 f8a4 	bl	8001a48 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001900:	f000 fa0e 	bl	8001d20 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001904:	f000 fa69 	bl	8001dda <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001908:	f000 f988 	bl	8001c1c <MX_GPIO_Init>
  MX_DMA_Init();
 800190c:	f000 f968 	bl	8001be0 <MX_DMA_Init>
  MX_RF_Init();
 8001910:	f000 f8ae 	bl	8001a70 <MX_RF_Init>
  MX_RTC_Init();
 8001914:	f000 f8b4 	bl	8001a80 <MX_RTC_Init>
  MX_SPI1_Init();
 8001918:	f000 f924 	bl	8001b64 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* -1- Initialize LEDs mounted on P-NUCLEO-WB55 board */
  BSP_LED_Init(LED_BLUE);
 800191c:	2000      	movs	r0, #0
 800191e:	f000 fc91 	bl	8002244 <BSP_LED_Init>

  /* -2- Configure External line 0 (connected to PD.0 pin) in interrupt mode */
  EXTI0_IRQHandler_Config();
 8001922:	f000 f9db 	bl	8001cdc <EXTI0_IRQHandler_Config>

  /* USER CODE END 2 */
  /* Init code for STM32_WPAN */
  APPE_Init();
 8001926:	f7fe fe17 	bl	8000558 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800192a:	f04f 30ff 	mov.w	r0, #4294967295
 800192e:	f007 f8e5 	bl	8008afc <UTIL_SEQ_Run>
 8001932:	e7fa      	b.n	800192a <main+0x4a>
 8001934:	58004000 	.word	0x58004000

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0ae      	sub	sp, #184	; 0xb8
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001942:	2248      	movs	r2, #72	; 0x48
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f007 fb26 	bl	8008f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]
 800195c:	615a      	str	r2, [r3, #20]
 800195e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2250      	movs	r2, #80	; 0x50
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f007 fb16 	bl	8008f98 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800196c:	f001 fb8c 	bl	8003088 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001970:	2000      	movs	r0, #0
 8001972:	f7ff fe69 	bl	8001648 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001976:	4b33      	ldr	r3, [pc, #204]	; (8001a44 <SystemClock_Config+0x10c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800197e:	4a31      	ldr	r2, [pc, #196]	; (8001a44 <SystemClock_Config+0x10c>)
 8001980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <SystemClock_Config+0x10c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001992:	2307      	movs	r3, #7
 8001994:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001996:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800199a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800199c:	2301      	movs	r3, #1
 800199e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019a6:	2340      	movs	r3, #64	; 0x40
 80019a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fee2 	bl	8003780 <HAL_RCC_OscConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80019c2:	f000 fa3b 	bl	8001e3c <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80019c6:	236f      	movs	r3, #111	; 0x6f
 80019c8:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80019ca:	2302      	movs	r3, #2
 80019cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019e6:	2101      	movs	r1, #1
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 fa55 	bl	8003e98 <HAL_RCC_ClockConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019f4:	f000 fa22 	bl	8001e3c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80019f8:	f643 0303 	movw	r3, #14339	; 0x3803
 80019fc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a10:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001a12:	2302      	movs	r3, #2
 8001a14:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001a16:	2310      	movs	r3, #16
 8001a18:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 fe50 	bl	80046c2 <HAL_RCCEx_PeriphCLKConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001a28:	f000 fa08 	bl	8001e3c <Error_Handler>
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff fd73 	bl	8001518 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8001a32:	2004      	movs	r0, #4
 8001a34:	f7ff fd84 	bl	8001540 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001a38:	f7ff fd5e 	bl	80014f8 <LL_PWR_SMPS_Enable>
#endif

  /* USER CODE END Smps */
}
 8001a3c:	bf00      	nop
 8001a3e:	37b8      	adds	r7, #184	; 0xb8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	58000400 	.word	0x58000400

08001a48 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_IPCC_Init+0x20>)
 8001a4e:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <MX_IPCC_Init+0x24>)
 8001a50:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_IPCC_Init+0x20>)
 8001a54:	f001 fa92 	bl	8002f7c <HAL_IPCC_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001a5e:	f000 f9ed 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000045c 	.word	0x2000045c
 8001a6c:	58000c00 	.word	0x58000c00

08001a70 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a94:	2300      	movs	r3, #0
 8001a96:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a98:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001a9a:	4a31      	ldr	r2, [pc, #196]	; (8001b60 <MX_RTC_Init+0xe0>)
 8001a9c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001aa6:	227f      	movs	r2, #127	; 0x7f
 8001aa8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001aac:	22ff      	movs	r2, #255	; 0xff
 8001aae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ab6:	4b29      	ldr	r3, [pc, #164]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ac8:	4824      	ldr	r0, [pc, #144]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001aca:	f003 f881 	bl	8004bd0 <HAL_RTC_Init>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001ad4:	f000 f9b2 	bl	8001e3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x12;
 8001ad8:	2312      	movs	r3, #18
 8001ada:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8001adc:	2320      	movs	r3, #32
 8001ade:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x25;
 8001ae0:	2325      	movs	r3, #37	; 0x25
 8001ae2:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	2201      	movs	r2, #1
 8001af4:	4619      	mov	r1, r3
 8001af6:	4819      	ldr	r0, [pc, #100]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001af8:	f003 f908 	bl	8004d0c <HAL_RTC_SetTime>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8001b02:	f000 f99b 	bl	8001e3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8001b06:	2305      	movs	r3, #5
 8001b08:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x14;
 8001b0e:	2314      	movs	r3, #20
 8001b10:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x21;
 8001b12:	2321      	movs	r3, #33	; 0x21
 8001b14:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001b16:	463b      	mov	r3, r7
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	480f      	ldr	r0, [pc, #60]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001b1e:	f003 fa15 	bl	8004f4c <HAL_RTC_SetDate>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8001b28:	f000 f988 	bl	8001e3c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	2100      	movs	r1, #0
 8001b30:	480a      	ldr	r0, [pc, #40]	; (8001b5c <MX_RTC_Init+0xdc>)
 8001b32:	f003 fb92 	bl	800525a <HAL_RTCEx_SetWakeUpTimer>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8001b3c:	f000 f97e 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001b40:	4807      	ldr	r0, [pc, #28]	; (8001b60 <MX_RTC_Init+0xe0>)
 8001b42:	f7ff feaa 	bl	800189a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001b46:	2100      	movs	r1, #0
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_RTC_Init+0xe0>)
 8001b4a:	f7ff feb6 	bl	80018ba <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <MX_RTC_Init+0xe0>)
 8001b50:	f7ff fe96 	bl	8001880 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000618 	.word	0x20000618
 8001b60:	40002800 	.word	0x40002800

08001b64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b6a:	4a1c      	ldr	r2, [pc, #112]	; (8001bdc <MX_SPI1_Init+0x78>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b7e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b82:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b84:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b8a:	4b13      	ldr	r3, [pc, #76]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b90:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b92:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b96:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bb2:	2207      	movs	r2, #7
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_SPI1_Init+0x74>)
 8001bc4:	f003 fc1a 	bl	80053fc <HAL_SPI_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001bce:	f000 f935 	bl	8001e3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000069c 	.word	0x2000069c
 8001bdc:	40013000 	.word	0x40013000

08001be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001be4:	2004      	movs	r0, #4
 8001be6:	f7ff fd8d 	bl	8001704 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bea:	2001      	movs	r0, #1
 8001bec:	f7ff fd8a 	bl	8001704 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7ff fd87 	bl	8001704 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	200e      	movs	r0, #14
 8001bfc:	f000 fe15 	bl	800282a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001c00:	200e      	movs	r0, #14
 8001c02:	f000 fe2c 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	210f      	movs	r1, #15
 8001c0a:	203a      	movs	r0, #58	; 0x3a
 8001c0c:	f000 fe0d 	bl	800282a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001c10:	203a      	movs	r0, #58	; 0x3a
 8001c12:	f000 fe24 	bl	800285e <HAL_NVIC_EnableIRQ>

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c30:	2004      	movs	r0, #4
 8001c32:	f7ff fd80 	bl	8001736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff fd7d 	bl	8001736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7ff fd7a 	bl	8001736 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c42:	2008      	movs	r0, #8
 8001c44:	f7ff fd77 	bl	8001736 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f247 0123 	movw	r1, #28707	; 0x7023
 8001c4e:	481f      	ldr	r0, [pc, #124]	; (8001ccc <MX_GPIO_Init+0xb0>)
 8001c50:	f001 f926 	bl	8002ea0 <HAL_GPIO_WritePin>
                          |LED2_BR_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : BUTTON_SW1_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW1_Pin;
 8001c54:	2310      	movs	r3, #16
 8001c56:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW1_GPIO_Port, &GPIO_InitStruct);
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	4619      	mov	r1, r3
 8001c64:	481b      	ldr	r0, [pc, #108]	; (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c66:	f000 ffab 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED3_BR_Pin LED1_BR_Pin
                           LED2_BR_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED3_BR_Pin|LED1_BR_Pin
 8001c6a:	f247 0323 	movw	r3, #28707	; 0x7023
 8001c6e:	607b      	str	r3, [r7, #4]
                          |LED2_BR_Pin|LED_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4812      	ldr	r0, [pc, #72]	; (8001ccc <MX_GPIO_Init+0xb0>)
 8001c82:	f000 ff9d 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_BR_Pin */
  GPIO_InitStruct.Pin = SW1_BR_Pin;
 8001c86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c8c:	4b10      	ldr	r3, [pc, #64]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001c8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(SW1_BR_GPIO_Port, &GPIO_InitStruct);
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	480e      	ldr	r0, [pc, #56]	; (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c9a:	f000 ff91 	bl	8002bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_SW2_Pin */
  GPIO_InitStruct.Pin = BUTTON_SW2_Pin;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ca2:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <MX_GPIO_Init+0xb4>)
 8001ca4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON_SW2_GPIO_Port, &GPIO_InitStruct);
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	480a      	ldr	r0, [pc, #40]	; (8001cd8 <MX_GPIO_Init+0xbc>)
 8001cb0:	f000 ff86 	bl	8002bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2006      	movs	r0, #6
 8001cba:	f000 fdb6 	bl	800282a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cbe:	2006      	movs	r0, #6
 8001cc0:	f000 fdcd 	bl	800285e <HAL_NVIC_EnableIRQ>

}
 8001cc4:	bf00      	nop
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	48000400 	.word	0x48000400
 8001cd0:	10210000 	.word	0x10210000
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	48000c00 	.word	0x48000c00

08001cdc <EXTI0_IRQHandler_Config>:
  * @brief  Configures EXTI line 0 (connected to PD.0 pin) in interrupt mode
  * @param  None
  * @retval None
  */
static void EXTI0_IRQHandler_Config(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef   GPIO_InitStructure;


  /* Enable GPIOC clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce2:	2008      	movs	r0, #8
 8001ce4:	f7ff fd27 	bl	8001736 <LL_AHB2_GRP1_EnableClock>

  /* Configure PD.0 pin as input floating */
  GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <EXTI0_IRQHandler_Config+0x3c>)
 8001cea:	60bb      	str	r3, [r7, #8]

  GPIO_InitStructure.Pull = GPIO_PULLUP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Pin = GPIO_PIN_0;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4808      	ldr	r0, [pc, #32]	; (8001d1c <EXTI0_IRQHandler_Config+0x40>)
 8001cfa:	f000 ff61 	bl	8002bc0 <HAL_GPIO_Init>


  /* Enable and set line 0 Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2102      	movs	r1, #2
 8001d02:	2006      	movs	r0, #6
 8001d04:	f000 fd91 	bl	800282a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d08:	2006      	movs	r0, #6
 8001d0a:	f000 fda8 	bl	800285e <HAL_NVIC_EnableIRQ>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	10210000 	.word	0x10210000
 8001d1c:	48000c00 	.word	0x48000c00

08001d20 <PeriphClock_Config>:


void PeriphClock_Config(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001d24:	bf00      	nop
}
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr

08001d2e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001d34:	2000      	movs	r0, #0
 8001d36:	f005 f871 	bl	8006e1c <OTP_Read>
 8001d3a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	799b      	ldrb	r3, [r3, #6]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fc60 	bl	800160c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
}  
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <Reset_Device>:


static void Reset_Device( void )
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001d5a:	f000 f827 	bl	8001dac <Reset_BackupDomain>

	Reset_IPCC();
 8001d5e:	f000 f803 	bl	8001d68 <Reset_IPCC>
#endif

	return;
 8001d62:	bf00      	nop
}
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001d6c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d70:	f7ff fcfa 	bl	8001768 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001d74:	213f      	movs	r1, #63	; 0x3f
 8001d76:	480c      	ldr	r0, [pc, #48]	; (8001da8 <Reset_IPCC+0x40>)
 8001d78:	f7ff fd55 	bl	8001826 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001d7c:	213f      	movs	r1, #63	; 0x3f
 8001d7e:	480a      	ldr	r0, [pc, #40]	; (8001da8 <Reset_IPCC+0x40>)
 8001d80:	f7ff fd5f 	bl	8001842 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001d84:	213f      	movs	r1, #63	; 0x3f
 8001d86:	4808      	ldr	r0, [pc, #32]	; (8001da8 <Reset_IPCC+0x40>)
 8001d88:	f7ff fd07 	bl	800179a <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001d8c:	213f      	movs	r1, #63	; 0x3f
 8001d8e:	4806      	ldr	r0, [pc, #24]	; (8001da8 <Reset_IPCC+0x40>)
 8001d90:	f7ff fd26 	bl	80017e0 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001d94:	213f      	movs	r1, #63	; 0x3f
 8001d96:	4804      	ldr	r0, [pc, #16]	; (8001da8 <Reset_IPCC+0x40>)
 8001d98:	f7ff fd11 	bl	80017be <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001d9c:	213f      	movs	r1, #63	; 0x3f
 8001d9e:	4802      	ldr	r0, [pc, #8]	; (8001da8 <Reset_IPCC+0x40>)
 8001da0:	f7ff fd30 	bl	8001804 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001da4:	bf00      	nop
}
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58000c00 	.word	0x58000c00

08001dac <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001db0:	f7ff fc82 	bl	80016b8 <LL_RCC_IsActiveFlag_PINRST>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00d      	beq.n	8001dd6 <Reset_BackupDomain+0x2a>
 8001dba:	f7ff fc90 	bl	80016de <LL_RCC_IsActiveFlag_SFTRST>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d108      	bne.n	8001dd6 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001dc4:	f001 f960 	bl	8003088 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001dc8:	f001 f95e 	bl	8003088 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001dcc:	f7ff fc52 	bl	8001674 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001dd0:	f7ff fc61 	bl	8001696 <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
}
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <Init_Exti>:

static void Init_Exti( void )
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001dde:	f04f 30ff 	mov.w	r0, #4294967295
 8001de2:	f7ff fbe7 	bl	80015b4 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001de6:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001dea:	f7ff fbf9 	bl	80015e0 <LL_EXTI_DisableIT_32_63>

  return;
 8001dee:	bf00      	nop
}
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dfa:	f000 fbab 	bl	8002554 <HAL_GetTick>
 8001dfe:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0a:	d00a      	beq.n	8001e22 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001e0c:	f000 fbba 	bl	8002584 <HAL_GetTickFreq>
 8001e10:	4603      	mov	r3, r0
 8001e12:	461a      	mov	r2, r3
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4413      	add	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1a:	e002      	b.n	8001e22 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001e1c:	f7ff fd20 	bl	8001860 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001e20:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001e22:	f000 fb97 	bl	8002554 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d8f4      	bhi.n	8001e1c <HAL_Delay+0x2a>
  }
}
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <LL_RCC_SetRTCClockSource>:
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_RCC_EnableRTC>:
{
 8001e76:	b480      	push	{r7}
 8001e78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <LL_AHB2_GRP1_EnableClock>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <LL_AHB3_GRP1_EnableClock>:
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4013      	ands	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_APB1_GRP1_EnableClock>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f20:	68fb      	ldr	r3, [r7, #12]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <LL_APB2_GRP1_EnableClock>:
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001f64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f68:	f7ff ffaf 	bl	8001eca <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	202e      	movs	r0, #46	; 0x2e
 8001f72:	f000 fc5a 	bl	800282a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001f76:	202e      	movs	r0, #46	; 0x2e
 8001f78:	f000 fc71 	bl	800285e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <HAL_IPCC_MspInit+0x44>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d113      	bne.n	8001fba <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001f92:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001f96:	f7ff ff98 	bl	8001eca <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	202c      	movs	r0, #44	; 0x2c
 8001fa0:	f000 fc43 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001fa4:	202c      	movs	r0, #44	; 0x2c
 8001fa6:	f000 fc5a 	bl	800285e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	202d      	movs	r0, #45	; 0x2d
 8001fb0:	f000 fc3b 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001fb4:	202d      	movs	r0, #45	; 0x2d
 8001fb6:	f000 fc52 	bl	800285e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	58000c00 	.word	0x58000c00

08001fc8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0b      	ldr	r2, [pc, #44]	; (8002004 <HAL_RTC_MspInit+0x3c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d110      	bne.n	8001ffc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001fda:	f001 f855 	bl	8003088 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8001fde:	f001 f853 	bl	8003088 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8001fe2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fe6:	f7ff ff30 	bl	8001e4a <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fea:	f7ff ff44 	bl	8001e76 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001fee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ff2:	f7ff ff83 	bl	8001efc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f003 f9ca 	bl	8005390 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40002800 	.word	0x40002800

08002008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b088      	sub	sp, #32
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 030c 	add.w	r3, r7, #12
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <HAL_SPI_MspInit+0x5c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d117      	bne.n	800205a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800202a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800202e:	f7ff ff7e 	bl	8001f2e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	2001      	movs	r0, #1
 8002034:	f7ff ff30 	bl	8001e98 <LL_AHB2_GRP1_EnableClock>
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002038:	23f0      	movs	r3, #240	; 0xf0
 800203a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002048:	2305      	movs	r3, #5
 800204a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 030c 	add.w	r3, r7, #12
 8002050:	4619      	mov	r1, r3
 8002052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002056:	f000 fdb3 	bl	8002bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40013000 	.word	0x40013000

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002076:	b480      	push	{r7}
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207a:	e7fe      	b.n	800207a <HardFault_Handler+0x4>

0800207c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002080:	e7fe      	b.n	8002080 <MemManage_Handler+0x4>

08002082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002082:	b480      	push	{r7}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002086:	e7fe      	b.n	8002086 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	e7fe      	b.n	800208c <UsageFault_Handler+0x4>

0800208e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020bc:	f000 fa36 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80020c8:	2001      	movs	r0, #1
 80020ca:	f000 ff1b 	bl	8002f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <DMA1_Channel4_IRQHandler+0x10>)
 80020da:	f000 fcc2 	bl	8002a62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000063c 	.word	0x2000063c

080020e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020ec:	4802      	ldr	r0, [pc, #8]	; (80020f8 <USART1_IRQHandler+0x10>)
 80020ee:	f003 fa29 	bl	8005544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000588 	.word	0x20000588

080020fc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <LPUART1_IRQHandler+0x10>)
 8002102:	f003 fa1f 	bl	8005544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000498 	.word	0x20000498

08002110 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002114:	f006 fb5c 	bl	80087d0 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002120:	f006 fb8e 	bl	8008840 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800212c:	f000 ff02 	bl	8002f34 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}

08002134 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA2_Channel4_IRQHandler+0x10>)
 800213a:	f000 fc92 	bl	8002a62 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000528 	.word	0x20000528

08002148 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800214c:	2010      	movs	r0, #16
 800214e:	f000 fed9 	bl	8002f04 <HAL_GPIO_EXTI_IRQHandler>
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}

08002156 <RTC_WKUP_IRQHandler>:
{
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
}

void RTC_WKUP_IRQHandler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800215a:	f7fe fe77 	bl	8000e4c <HW_TS_RTC_Wakeup_Handler>
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8002168:	4b26      	ldr	r3, [pc, #152]	; (8002204 <SystemInit+0xa0>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <SystemInit+0xa0>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002174:	4a23      	ldr	r2, [pc, #140]	; (8002204 <SystemInit+0xa0>)
 8002176:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800217a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002196:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a2:	4b19      	ldr	r3, [pc, #100]	; (8002208 <SystemInit+0xa4>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b4:	f023 0305 	bic.w	r3, r3, #5
 80021b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80021bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c8:	f023 0301 	bic.w	r3, r3, #1
 80021cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80021d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d4:	4a0d      	ldr	r2, [pc, #52]	; (800220c <SystemInit+0xa8>)
 80021d6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	4a0b      	ldr	r2, [pc, #44]	; (800220c <SystemInit+0xa8>)
 80021de:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	2200      	movs	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00
 8002208:	faf6fefb 	.word	0xfaf6fefb
 800220c:	22041000 	.word	0x22041000

08002210 <LL_AHB2_GRP1_EnableClock>:
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800221e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4313      	orrs	r3, r2
 8002226:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800222c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002234:	68fb      	ldr	r3, [r7, #12]
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800225e:	2002      	movs	r0, #2
 8002260:	f7ff ffd6 	bl	8002210 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <BSP_LED_Init+0x6c>)
 8002268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800226c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002276:	2302      	movs	r3, #2
 8002278:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <BSP_LED_Init+0x70>)
 800227e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002282:	f107 020c 	add.w	r2, r7, #12
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fc99 	bl	8002bc0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4a08      	ldr	r2, [pc, #32]	; (80022b4 <BSP_LED_Init+0x70>)
 8002292:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <BSP_LED_Init+0x6c>)
 800229a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800229e:	2200      	movs	r2, #0
 80022a0:	4619      	mov	r1, r3
 80022a2:	f000 fdfd 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 80022a6:	bf00      	nop
 80022a8:	3720      	adds	r7, #32
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	0800a808 	.word	0x0800a808
 80022b4:	2000000c 	.word	0x2000000c

080022b8 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <BSP_LED_On+0x2c>)
 80022c6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <BSP_LED_On+0x30>)
 80022ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022d2:	2201      	movs	r2, #1
 80022d4:	4619      	mov	r1, r3
 80022d6:	f000 fde3 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	0800a808 	.word	0x0800a808

080022ec <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	4a07      	ldr	r2, [pc, #28]	; (8002318 <BSP_LED_Off+0x2c>)
 80022fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022fe:	79fb      	ldrb	r3, [r7, #7]
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <BSP_LED_Off+0x30>)
 8002302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002306:	2200      	movs	r2, #0
 8002308:	4619      	mov	r1, r3
 800230a:	f000 fdc9 	bl	8002ea0 <HAL_GPIO_WritePin>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000000c 	.word	0x2000000c
 800231c:	0800a808 	.word	0x0800a808

08002320 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4a07      	ldr	r2, [pc, #28]	; (800234c <BSP_LED_Toggle+0x2c>)
 800232e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	4906      	ldr	r1, [pc, #24]	; (8002350 <BSP_LED_Toggle+0x30>)
 8002336:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f000 fdc7 	bl	8002ed0 <HAL_GPIO_TogglePin>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000000c 	.word	0x2000000c
 8002350:	0800a808 	.word	0x0800a808

08002354 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	460a      	mov	r2, r1
 800235e:	71fb      	strb	r3, [r7, #7]
 8002360:	4613      	mov	r3, r2
 8002362:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <BSP_PB_Init+0x2e>
 800237a:	2004      	movs	r0, #4
 800237c:	f7ff ff48 	bl	8002210 <LL_AHB2_GRP1_EnableClock>
 8002380:	e00c      	b.n	800239c <BSP_PB_Init+0x48>
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d103      	bne.n	8002390 <BSP_PB_Init+0x3c>
 8002388:	2008      	movs	r0, #8
 800238a:	f7ff ff41 	bl	8002210 <LL_AHB2_GRP1_EnableClock>
 800238e:	e005      	b.n	800239c <BSP_PB_Init+0x48>
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d102      	bne.n	800239c <BSP_PB_Init+0x48>
 8002396:	2008      	movs	r0, #8
 8002398:	f7ff ff3a 	bl	8002210 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800239c:	79bb      	ldrb	r3, [r7, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d117      	bne.n	80023d2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4a20      	ldr	r2, [pc, #128]	; (8002428 <BSP_PB_Init+0xd4>)
 80023a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023aa:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80023b0:	2301      	movs	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80023b8:	79fb      	ldrb	r3, [r7, #7]
 80023ba:	4a1c      	ldr	r2, [pc, #112]	; (800242c <BSP_PB_Init+0xd8>)
 80023bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c0:	f107 020c 	add.w	r2, r7, #12
 80023c4:	4611      	mov	r1, r2
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fbfa 	bl	8002bc0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7ff fd10 	bl	8001df2 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80023d2:	79bb      	ldrb	r3, [r7, #6]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d122      	bne.n	800241e <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	4a13      	ldr	r2, [pc, #76]	; (8002428 <BSP_PB_Init+0xd4>)
 80023dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023e0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80023e2:	2301      	movs	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80023e6:	4b12      	ldr	r3, [pc, #72]	; (8002430 <BSP_PB_Init+0xdc>)
 80023e8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80023ea:	79fb      	ldrb	r3, [r7, #7]
 80023ec:	4a0f      	ldr	r2, [pc, #60]	; (800242c <BSP_PB_Init+0xd8>)
 80023ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f2:	f107 020c 	add.w	r2, r7, #12
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 fbe1 	bl	8002bc0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <BSP_PB_Init+0xe0>)
 8002402:	5cd3      	ldrb	r3, [r2, r3]
 8002404:	b25b      	sxtb	r3, r3
 8002406:	2200      	movs	r2, #0
 8002408:	210f      	movs	r1, #15
 800240a:	4618      	mov	r0, r3
 800240c:	f000 fa0d 	bl	800282a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	4a08      	ldr	r2, [pc, #32]	; (8002434 <BSP_PB_Init+0xe0>)
 8002414:	5cd3      	ldrb	r3, [r2, r3]
 8002416:	b25b      	sxtb	r3, r3
 8002418:	4618      	mov	r0, r3
 800241a:	f000 fa20 	bl	800285e <HAL_NVIC_EnableIRQ>
  }
}
 800241e:	bf00      	nop
 8002420:	3720      	adds	r7, #32
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	0800a810 	.word	0x0800a810
 800242c:	20000018 	.word	0x20000018
 8002430:	10210000 	.word	0x10210000
 8002434:	0800a818 	.word	0x0800a818

08002438 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a04      	ldr	r2, [pc, #16]	; (8002454 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6053      	str	r3, [r2, #4]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e0042000 	.word	0xe0042000

08002458 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8002462:	f043 0302 	orr.w	r3, r3, #2
 8002466:	6053      	str	r3, [r2, #4]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	e0042000 	.word	0xe0042000

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_Init+0x3c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a0b      	ldr	r2, [pc, #44]	; (80024b4 <HAL_Init+0x3c>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248e:	2003      	movs	r0, #3
 8002490:	f000 f9c0 	bl	8002814 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002494:	2000      	movs	r0, #0
 8002496:	f000 f80f 	bl	80024b8 <HAL_InitTick>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	71fb      	strb	r3, [r7, #7]
 80024a4:	e001      	b.n	80024aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024a6:	f7ff fd5b 	bl	8001f60 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024aa:	79fb      	ldrb	r3, [r7, #7]
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	58004000 	.word	0x58004000

080024b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <HAL_InitTick+0x6c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d024      	beq.n	8002516 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024cc:	f001 fe90 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 80024d0:	4602      	mov	r2, r0
 80024d2:	4b14      	ldr	r3, [pc, #80]	; (8002524 <HAL_InitTick+0x6c>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	4619      	mov	r1, r3
 80024d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 f9d6 	bl	8002896 <HAL_SYSTICK_Config>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10f      	bne.n	8002510 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b0f      	cmp	r3, #15
 80024f4:	d809      	bhi.n	800250a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f6:	2200      	movs	r2, #0
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	f04f 30ff 	mov.w	r0, #4294967295
 80024fe:	f000 f994 	bl	800282a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_InitTick+0x70>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	e007      	b.n	800251a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	73fb      	strb	r3, [r7, #15]
 800250e:	e004      	b.n	800251a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e001      	b.n	800251a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000028 	.word	0x20000028
 8002528:	20000024 	.word	0x20000024

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000028 	.word	0x20000028
 8002550:	20000700 	.word	0x20000700

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000700 	.word	0x20000700

0800256c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_GetTickPrio+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000024 	.word	0x20000024

08002584 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <HAL_GetTickFreq+0x14>)
 800258a:	781b      	ldrb	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000028 	.word	0x20000028

0800259c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80025a0:	f7ff ff4a 	bl	8002438 <LL_DBGMCU_EnableDBGSleepMode>
}
 80025a4:	bf00      	nop
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80025ac:	f7ff ff54 	bl	8002458 <LL_DBGMCU_EnableDBGStopMode>
}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025d0:	4013      	ands	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <__NVIC_SetPriorityGrouping+0x44>)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	60d3      	str	r3, [r2, #12]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <__NVIC_GetPriorityGrouping+0x18>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 0307 	and.w	r3, r3, #7
}
 800260a:	4618      	mov	r0, r3
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	db0b      	blt.n	8002642 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 021f 	and.w	r2, r3, #31
 8002630:	4907      	ldr	r1, [pc, #28]	; (8002650 <__NVIC_EnableIRQ+0x38>)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	2001      	movs	r0, #1
 800263a:	fa00 f202 	lsl.w	r2, r0, r2
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000e100 	.word	0xe000e100

08002654 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db12      	blt.n	800268c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	490a      	ldr	r1, [pc, #40]	; (8002698 <__NVIC_DisableIRQ+0x44>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	3320      	adds	r3, #32
 800267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002680:	f3bf 8f4f 	dsb	sy
}
 8002684:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002686:	f3bf 8f6f 	isb	sy
}
 800268a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100

0800269c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0c      	blt.n	80026c8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <__NVIC_SetPendingIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	3340      	adds	r3, #64	; 0x40
 80026c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0c      	blt.n	8002704 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <__NVIC_ClearPendingIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	3360      	adds	r3, #96	; 0x60
 8002700:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3b01      	subs	r3, #1
 80027dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e0:	d301      	bcc.n	80027e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00f      	b.n	8002806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e6:	4a0a      	ldr	r2, [pc, #40]	; (8002810 <SysTick_Config+0x40>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027ee:	210f      	movs	r1, #15
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f7ff ff8e 	bl	8002714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f8:	4b05      	ldr	r3, [pc, #20]	; (8002810 <SysTick_Config+0x40>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fe:	4b04      	ldr	r3, [pc, #16]	; (8002810 <SysTick_Config+0x40>)
 8002800:	2207      	movs	r2, #7
 8002802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	e000e010 	.word	0xe000e010

08002814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff fec9 	bl	80025b4 <__NVIC_SetPriorityGrouping>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
 8002836:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002838:	f7ff fee0 	bl	80025fc <__NVIC_GetPriorityGrouping>
 800283c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	6978      	ldr	r0, [r7, #20]
 8002844:	f7ff ff90 	bl	8002768 <NVIC_EncodePriority>
 8002848:	4602      	mov	r2, r0
 800284a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff ff5f 	bl	8002714 <__NVIC_SetPriority>
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fed3 	bl	8002618 <__NVIC_EnableIRQ>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002884:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002888:	4618      	mov	r0, r3
 800288a:	f7ff fee3 	bl	8002654 <__NVIC_DisableIRQ>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b082      	sub	sp, #8
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7ff ff96 	bl	80027d0 <SysTick_Config>
 80028a4:	4603      	mov	r3, r0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff feed 	bl	800269c <__NVIC_SetPendingIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fefd 	bl	80026d8 <__NVIC_ClearPendingIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e04f      	b.n	8002998 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d008      	beq.n	8002916 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2204      	movs	r2, #4
 8002908:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e040      	b.n	8002998 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 020e 	bic.w	r2, r2, #14
 8002924:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002934:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	f003 021c 	and.w	r2, r3, #28
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002962:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00c      	beq.n	8002986 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800297a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002984:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d005      	beq.n	80029c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2204      	movs	r2, #4
 80029c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
 80029c6:	e047      	b.n	8002a58 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 020e 	bic.w	r2, r2, #14
 80029d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fc:	f003 021c 	and.w	r2, r3, #28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a14:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a36:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
    }
  }
  return status;
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a7e:	f003 031c 	and.w	r3, r3, #28
 8002a82:	2204      	movs	r2, #4
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d026      	beq.n	8002adc <HAL_DMA_IRQHandler+0x7a>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d021      	beq.n	8002adc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0204 	bic.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f003 021c 	and.w	r2, r3, #28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ac8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d071      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002ada:	e06c      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f003 031c 	and.w	r3, r3, #28
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d02e      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xec>
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d029      	beq.n	8002b4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 020a 	bic.w	r2, r2, #10
 8002b16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	f003 021c 	and.w	r2, r3, #28
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	2102      	movs	r1, #2
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d038      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b4c:	e033      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f003 031c 	and.w	r3, r3, #28
 8002b56:	2208      	movs	r2, #8
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d02a      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x156>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d025      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 020e 	bic.w	r2, r2, #14
 8002b7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	f003 021c 	and.w	r2, r3, #28
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
}
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bce:	e14c      	b.n	8002e6a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	4013      	ands	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 813e 	beq.w	8002e64 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d00b      	beq.n	8002c08 <HAL_GPIO_Init+0x48>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d007      	beq.n	8002c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bfc:	2b11      	cmp	r3, #17
 8002bfe:	d003      	beq.n	8002c08 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b12      	cmp	r3, #18
 8002c06:	d130      	bne.n	8002c6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c3e:	2201      	movs	r2, #1
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	f003 0201 	and.w	r2, r3, #1
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	2203      	movs	r2, #3
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	005b      	lsls	r3, r3, #1
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d003      	beq.n	8002caa <HAL_GPIO_Init+0xea>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b12      	cmp	r3, #18
 8002ca8:	d123      	bne.n	8002cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	08da      	lsrs	r2, r3, #3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	220f      	movs	r2, #15
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	fa02 f303 	lsl.w	r3, r2, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	08da      	lsrs	r2, r3, #3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3208      	adds	r2, #8
 8002cec:	6939      	ldr	r1, [r7, #16]
 8002cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f003 0203 	and.w	r2, r3, #3
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 8098 	beq.w	8002e64 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002d34:	4a54      	ldr	r2, [pc, #336]	; (8002e88 <HAL_GPIO_Init+0x2c8>)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	089b      	lsrs	r3, r3, #2
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0303 	and.w	r3, r3, #3
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	220f      	movs	r2, #15
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d5e:	d019      	beq.n	8002d94 <HAL_GPIO_Init+0x1d4>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a4a      	ldr	r2, [pc, #296]	; (8002e8c <HAL_GPIO_Init+0x2cc>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d013      	beq.n	8002d90 <HAL_GPIO_Init+0x1d0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a49      	ldr	r2, [pc, #292]	; (8002e90 <HAL_GPIO_Init+0x2d0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00d      	beq.n	8002d8c <HAL_GPIO_Init+0x1cc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a48      	ldr	r2, [pc, #288]	; (8002e94 <HAL_GPIO_Init+0x2d4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d007      	beq.n	8002d88 <HAL_GPIO_Init+0x1c8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a47      	ldr	r2, [pc, #284]	; (8002e98 <HAL_GPIO_Init+0x2d8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_GPIO_Init+0x1c4>
 8002d80:	2304      	movs	r3, #4
 8002d82:	e008      	b.n	8002d96 <HAL_GPIO_Init+0x1d6>
 8002d84:	2307      	movs	r3, #7
 8002d86:	e006      	b.n	8002d96 <HAL_GPIO_Init+0x1d6>
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e004      	b.n	8002d96 <HAL_GPIO_Init+0x1d6>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e002      	b.n	8002d96 <HAL_GPIO_Init+0x1d6>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_GPIO_Init+0x1d6>
 8002d94:	2300      	movs	r3, #0
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	f002 0203 	and.w	r2, r2, #3
 8002d9c:	0092      	lsls	r2, r2, #2
 8002d9e:	4093      	lsls	r3, r2
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002da6:	4938      	ldr	r1, [pc, #224]	; (8002e88 <HAL_GPIO_Init+0x2c8>)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	089b      	lsrs	r3, r3, #2
 8002dac:	3302      	adds	r3, #2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002db4:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_GPIO_Init+0x2dc>)
 8002db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dda:	4a30      	ldr	r2, [pc, #192]	; (8002e9c <HAL_GPIO_Init+0x2dc>)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_GPIO_Init+0x2dc>)
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e08:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <HAL_GPIO_Init+0x2dc>)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e10:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <HAL_GPIO_Init+0x2dc>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e34:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_GPIO_Init+0x2dc>)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_GPIO_Init+0x2dc>)
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	43db      	mvns	r3, r3
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4013      	ands	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e5e:	4a0f      	ldr	r2, [pc, #60]	; (8002e9c <HAL_GPIO_Init+0x2dc>)
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3301      	adds	r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f47f aeab 	bne.w	8002bd0 <HAL_GPIO_Init+0x10>
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40010000 	.word	0x40010000
 8002e8c:	48000400 	.word	0x48000400
 8002e90:	48000800 	.word	0x48000800
 8002e94:	48000c00 	.word	0x48000c00
 8002e98:	48001000 	.word	0x48001000
 8002e9c:	58000800 	.word	0x58000800

08002ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	807b      	strh	r3, [r7, #2]
 8002eac:	4613      	mov	r3, r2
 8002eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb0:	787b      	ldrb	r3, [r7, #1]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ebc:	e002      	b.n	8002ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	041a      	lsls	r2, r3, #16
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	43d9      	mvns	r1, r3
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	400b      	ands	r3, r1
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	619a      	str	r2, [r3, #24]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	88fb      	ldrh	r3, [r7, #6]
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d006      	beq.n	8002f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f1a:	4a05      	ldr	r2, [pc, #20]	; (8002f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f1c:	88fb      	ldrh	r3, [r7, #6]
 8002f1e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fbe2 	bl	80006ec <HAL_GPIO_EXTI_Callback>
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	58000800 	.word	0x58000800

08002f34 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_HSEM_IRQHandler+0x30>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_HSEM_IRQHandler+0x30>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	4906      	ldr	r1, [pc, #24]	; (8002f64 <HAL_HSEM_IRQHandler+0x30>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002f4e:	4a05      	ldr	r2, [pc, #20]	; (8002f64 <HAL_HSEM_IRQHandler+0x30>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f807 	bl	8002f68 <HAL_HSEM_FreeCallback>
}
 8002f5a:	bf00      	nop
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	58001500 	.word	0x58001500

08002f68 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d01e      	beq.n	8002fcc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002f8e:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <HAL_IPCC_Init+0x60>)
 8002f90:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe ffee 	bl	8001f80 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002fa4:	68b8      	ldr	r0, [r7, #8]
 8002fa6:	f000 f85b 	bl	8003060 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f82c 	bl	8003014 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002fca:	e001      	b.n	8002fd0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	58000c00 	.word	0x58000c00

08002fe0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	4613      	mov	r3, r2
 8003006:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e00f      	b.n	8003042 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <IPCC_SetDefaultCallbacks+0x44>)
 800302c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3306      	adds	r3, #6
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	4a08      	ldr	r2, [pc, #32]	; (800305c <IPCC_SetDefaultCallbacks+0x48>)
 800303a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d9ec      	bls.n	8003022 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	08002fe1 	.word	0x08002fe1
 800305c:	08002ffb 	.word	0x08002ffb

08003060 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003074:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	223f      	movs	r2, #63	; 0x3f
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800308c:	4b05      	ldr	r3, [pc, #20]	; (80030a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	58000400 	.word	0x58000400

080030a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030ac:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	58000400 	.word	0x58000400

080030c4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80030c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d6:	d101      	bne.n	80030dc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <LL_RCC_HSE_Enable>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_RCC_HSE_Disable>:
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_RCC_HSE_IsReady>:
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003136:	d101      	bne.n	800313c <LL_RCC_HSE_IsReady+0x18>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <LL_RCC_HSE_IsReady+0x1a>
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_RCC_HSI_Enable>:
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800314c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_RCC_HSI_Disable>:
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003178:	6013      	str	r3, [r2, #0]
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_RCC_HSI_IsReady>:
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003196:	d101      	bne.n	800319c <LL_RCC_HSI_IsReady+0x18>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <LL_RCC_HSI_IsReady+0x1a>
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80031b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	061b      	lsls	r3, r3, #24
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <LL_RCC_HSI48_Enable>:
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_RCC_HSI48_Disable>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <LL_RCC_HSI48_IsReady>:
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800321a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b02      	cmp	r3, #2
 8003228:	d101      	bne.n	800322e <LL_RCC_HSI48_IsReady+0x18>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <LL_RCC_HSI48_IsReady+0x1a>
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <LL_RCC_LSE_Enable>:
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003246:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_RCC_LSE_Disable>:
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003268:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800326c:	f023 0301 	bic.w	r3, r3, #1
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <LL_RCC_LSE_EnableBypass>:
{
 800327e:	b480      	push	{r7}
 8003280:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328e:	f043 0304 	orr.w	r3, r3, #4
 8003292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_RCC_LSE_DisableBypass>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_RCC_LSE_IsReady>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d101      	bne.n	80032da <LL_RCC_LSE_IsReady+0x18>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <LL_RCC_LSE_IsReady+0x1a>
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_RCC_LSI1_Enable>:
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032f6:	f043 0301 	orr.w	r3, r3, #1
 80032fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80032fe:	bf00      	nop
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <LL_RCC_LSI1_Disable>:
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_RCC_LSI1_IsReady>:
{
 800332a:	b480      	push	{r7}
 800332c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800332e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d101      	bne.n	8003342 <LL_RCC_LSI1_IsReady+0x18>
 800333e:	2301      	movs	r3, #1
 8003340:	e000      	b.n	8003344 <LL_RCC_LSI1_IsReady+0x1a>
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <LL_RCC_LSI2_Enable>:
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003356:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800335a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800335e:	f043 0304 	orr.w	r3, r3, #4
 8003362:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <LL_RCC_LSI2_Disable>:
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003380:	f023 0304 	bic.w	r3, r3, #4
 8003384:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <LL_RCC_LSI2_IsReady>:
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800339a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d101      	bne.n	80033aa <LL_RCC_LSI2_IsReady+0x18>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <LL_RCC_LSI2_IsReady+0x1a>
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <LL_RCC_LSI2_SetTrimming>:
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80033be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_RCC_MSI_Enable>:
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6013      	str	r3, [r2, #0]
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <LL_RCC_MSI_Disable>:
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	6013      	str	r3, [r2, #0]
}
 8003416:	bf00      	nop
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LL_RCC_MSI_IsReady>:
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b02      	cmp	r3, #2
 8003430:	d101      	bne.n	8003436 <LL_RCC_MSI_IsReady+0x16>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <LL_RCC_MSI_IsReady+0x18>
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_RCC_MSI_SetRange>:
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800344a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003454:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	600b      	str	r3, [r1, #0]
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <LL_RCC_MSI_GetRange>:
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800347a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2bb0      	cmp	r3, #176	; 0xb0
 8003480:	d901      	bls.n	8003486 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003482:	23b0      	movs	r3, #176	; 0xb0
 8003484:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003486:	687b      	ldr	r3, [r7, #4]
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ae:	4313      	orrs	r3, r2
 80034b0:	604b      	str	r3, [r1, #4]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_RCC_SetSysClkSource>:
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80034c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 0203 	bic.w	r2, r3, #3
 80034d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_RCC_GetSysClkSource>:
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_RCC_SetAHBPrescaler>:
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
}
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <LL_C2_RCC_SetAHBPrescaler>:
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800352e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003532:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003536:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800353a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <LL_RCC_SetAHB4Prescaler>:
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003562:	f023 020f 	bic.w	r2, r3, #15
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800356e:	4313      	orrs	r3, r2
 8003570:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_RCC_SetAPB1Prescaler>:
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003592:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_RCC_SetAPB2Prescaler>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_RCC_GetAHBPrescaler>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_RCC_GetAHB4Prescaler>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_RCC_PLL_Enable>:
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003612:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_RCC_PLL_Disable>:
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003630:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003634:	6013      	str	r3, [r2, #0]
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_RCC_PLL_IsReady>:
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003652:	d101      	bne.n	8003658 <LL_RCC_PLL_IsReady+0x18>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <LL_RCC_PLL_IsReady+0x1a>
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_RCC_PLL_GetN>:
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_RCC_PLL_GetR>:
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800368c:	4618      	mov	r0, r3
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <LL_RCC_PLL_GetDivider>:
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800369a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <LL_RCC_PLL_GetMainSource>:
{
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80036b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0303 	and.w	r3, r3, #3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_RCC_IsActiveFlag_HPRE>:
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d101      	bne.n	80036de <LL_RCC_IsActiveFlag_HPRE+0x18>
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80036ea:	b480      	push	{r7}
 80036ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80036f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036fe:	d101      	bne.n	8003704 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003718:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800371c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003720:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003724:	d101      	bne.n	800372a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800373a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003748:	d101      	bne.n	800374e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800376c:	d101      	bne.n	8003772 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b08d      	sub	sp, #52	; 0x34
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e37e      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8092 	beq.w	80038c4 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037a0:	f7ff fea1 	bl	80034e6 <LL_RCC_GetSysClkSource>
 80037a4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037a6:	f7ff ff82 	bl	80036ae <LL_RCC_PLL_GetMainSource>
 80037aa:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d005      	beq.n	80037be <HAL_RCC_OscConfig+0x3e>
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d14c      	bne.n	8003852 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80037b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d149      	bne.n	8003852 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037be:	f7ff fe2f 	bl	8003420 <LL_RCC_MSI_IsReady>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d005      	beq.n	80037d4 <HAL_RCC_OscConfig+0x54>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e35d      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80037d8:	f7ff fe47 	bl	800346a <LL_RCC_MSI_GetRange>
 80037dc:	4603      	mov	r3, r0
 80037de:	429c      	cmp	r4, r3
 80037e0:	d914      	bls.n	800380c <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fd16 	bl	8004218 <RCC_SetFlashLatencyFromMSIRange>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e34c      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fe21 	bl	8003442 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff fe45 	bl	8003494 <LL_RCC_MSI_SetCalibTrimming>
 800380a:	e013      	b.n	8003834 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fe16 	bl	8003442 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff fe3a 	bl	8003494 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fcf7 	bl	8004218 <RCC_SetFlashLatencyFromMSIRange>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e32d      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003834:	f000 fcdc 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8003838:	4603      	mov	r3, r0
 800383a:	4ab3      	ldr	r2, [pc, #716]	; (8003b08 <HAL_RCC_OscConfig+0x388>)
 800383c:	6013      	str	r3, [r2, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800383e:	4bb3      	ldr	r3, [pc, #716]	; (8003b0c <HAL_RCC_OscConfig+0x38c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fe38 	bl	80024b8 <HAL_InitTick>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d039      	beq.n	80038c2 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e31e      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01e      	beq.n	8003898 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800385a:	f7ff fdc3 	bl	80033e4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800385e:	f7fe fe79 	bl	8002554 <HAL_GetTick>
 8003862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003866:	f7fe fe75 	bl	8002554 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e30b      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003878:	f7ff fdd2 	bl	8003420 <LL_RCC_MSI_IsReady>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f1      	beq.n	8003866 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff fddb 	bl	8003442 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff fdff 	bl	8003494 <LL_RCC_MSI_SetCalibTrimming>
 8003896:	e015      	b.n	80038c4 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003898:	f7ff fdb3 	bl	8003402 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800389c:	f7fe fe5a 	bl	8002554 <HAL_GetTick>
 80038a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038a4:	f7fe fe56 	bl	8002554 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e2ec      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80038b6:	f7ff fdb3 	bl	8003420 <LL_RCC_MSI_IsReady>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1f1      	bne.n	80038a4 <HAL_RCC_OscConfig+0x124>
 80038c0:	e000      	b.n	80038c4 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d04e      	beq.n	800396e <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038d0:	f7ff fe09 	bl	80034e6 <LL_RCC_GetSysClkSource>
 80038d4:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038d6:	f7ff feea 	bl	80036ae <LL_RCC_PLL_GetMainSource>
 80038da:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d005      	beq.n	80038ee <HAL_RCC_OscConfig+0x16e>
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	2b0c      	cmp	r3, #12
 80038e6:	d10d      	bne.n	8003904 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	2b03      	cmp	r3, #3
 80038ec:	d10a      	bne.n	8003904 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ee:	f7ff fc19 	bl	8003124 <LL_RCC_HSE_IsReady>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d039      	beq.n	800396c <HAL_RCC_OscConfig+0x1ec>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d135      	bne.n	800396c <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e2c5      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800390c:	d102      	bne.n	8003914 <HAL_RCC_OscConfig+0x194>
 800390e:	f7ff fbeb 	bl	80030e8 <LL_RCC_HSE_Enable>
 8003912:	e001      	b.n	8003918 <HAL_RCC_OscConfig+0x198>
 8003914:	f7ff fbf7 	bl	8003106 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe fe18 	bl	8002554 <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003928:	f7fe fe14 	bl	8002554 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b64      	cmp	r3, #100	; 0x64
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e2aa      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 800393a:	f7ff fbf3 	bl	8003124 <LL_RCC_HSE_IsReady>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f1      	beq.n	8003928 <HAL_RCC_OscConfig+0x1a8>
 8003944:	e013      	b.n	800396e <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003946:	f7fe fe05 	bl	8002554 <HAL_GetTick>
 800394a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394e:	f7fe fe01 	bl	8002554 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b64      	cmp	r3, #100	; 0x64
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e297      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003960:	f7ff fbe0 	bl	8003124 <LL_RCC_HSE_IsReady>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f1      	bne.n	800394e <HAL_RCC_OscConfig+0x1ce>
 800396a:	e000      	b.n	800396e <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d051      	beq.n	8003a1e <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397a:	f7ff fdb4 	bl	80034e6 <LL_RCC_GetSysClkSource>
 800397e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003980:	f7ff fe95 	bl	80036ae <LL_RCC_PLL_GetMainSource>
 8003984:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b04      	cmp	r3, #4
 800398a:	d005      	beq.n	8003998 <HAL_RCC_OscConfig+0x218>
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	2b0c      	cmp	r3, #12
 8003990:	d113      	bne.n	80039ba <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d110      	bne.n	80039ba <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003998:	f7ff fbf4 	bl	8003184 <LL_RCC_HSI_IsReady>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <HAL_RCC_OscConfig+0x22e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e270      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff fbf8 	bl	80031a8 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b8:	e031      	b.n	8003a1e <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d019      	beq.n	80039f6 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c2:	f7ff fbc1 	bl	8003148 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c6:	f7fe fdc5 	bl	8002554 <HAL_GetTick>
 80039ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ce:	f7fe fdc1 	bl	8002554 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e257      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80039e0:	f7ff fbd0 	bl	8003184 <LL_RCC_HSI_IsReady>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f1      	beq.n	80039ce <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff fbda 	bl	80031a8 <LL_RCC_HSI_SetCalibTrimming>
 80039f4:	e013      	b.n	8003a1e <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039f6:	f7ff fbb6 	bl	8003166 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fa:	f7fe fdab 	bl	8002554 <HAL_GetTick>
 80039fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a02:	f7fe fda7 	bl	8002554 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e23d      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003a14:	f7ff fbb6 	bl	8003184 <LL_RCC_HSI_IsReady>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f1      	bne.n	8003a02 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d106      	bne.n	8003a38 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80a3 	beq.w	8003b7e <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d076      	beq.n	8003b2e <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d046      	beq.n	8003ada <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003a4c:	f7ff fc6d 	bl	800332a <LL_RCC_LSI1_IsReady>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d113      	bne.n	8003a7e <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003a56:	f7ff fc46 	bl	80032e6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a5a:	f7fe fd7b 	bl	8002554 <HAL_GetTick>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003a60:	e008      	b.n	8003a74 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a62:	f7fe fd77 	bl	8002554 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e20d      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003a74:	f7ff fc59 	bl	800332a <LL_RCC_LSI1_IsReady>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0f1      	beq.n	8003a62 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003a7e:	f7ff fc66 	bl	800334e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe fd67 	bl	8002554 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003a8a:	f7fe fd63 	bl	8002554 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1f9      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003a9c:	f7ff fc79 	bl	8003392 <LL_RCC_LSI2_IsReady>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f1      	beq.n	8003a8a <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fc83 	bl	80033b6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003ab0:	f7ff fc2a 	bl	8003308 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fd4e 	bl	8002554 <HAL_GetTick>
 8003ab8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003abc:	f7fe fd4a 	bl	8002554 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1e0      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003ace:	f7ff fc2c 	bl	800332a <LL_RCC_LSI1_IsReady>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f1      	bne.n	8003abc <HAL_RCC_OscConfig+0x33c>
 8003ad8:	e051      	b.n	8003b7e <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003ada:	f7ff fc04 	bl	80032e6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe fd39 	bl	8002554 <HAL_GetTick>
 8003ae2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ae6:	f7fe fd35 	bl	8002554 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1cb      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003af8:	f7ff fc17 	bl	800332a <LL_RCC_LSI1_IsReady>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d0f1      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003b02:	f7ff fc35 	bl	8003370 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003b06:	e00c      	b.n	8003b22 <HAL_RCC_OscConfig+0x3a2>
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003b10:	f7fe fd20 	bl	8002554 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e1b6      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003b22:	f7ff fc36 	bl	8003392 <LL_RCC_LSI2_IsReady>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f1      	bne.n	8003b10 <HAL_RCC_OscConfig+0x390>
 8003b2c:	e027      	b.n	8003b7e <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003b2e:	f7ff fc1f 	bl	8003370 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b32:	f7fe fd0f 	bl	8002554 <HAL_GetTick>
 8003b36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003b38:	e008      	b.n	8003b4c <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003b3a:	f7fe fd0b 	bl	8002554 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b03      	cmp	r3, #3
 8003b46:	d901      	bls.n	8003b4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e1a1      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003b4c:	f7ff fc21 	bl	8003392 <LL_RCC_LSI2_IsReady>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f1      	bne.n	8003b3a <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003b56:	f7ff fbd7 	bl	8003308 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5a:	f7fe fcfb 	bl	8002554 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003b62:	f7fe fcf7 	bl	8002554 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e18d      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003b74:	f7ff fbd9 	bl	800332a <LL_RCC_LSI1_IsReady>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f1      	bne.n	8003b62 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d05b      	beq.n	8003c42 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b8a:	4bb5      	ldr	r3, [pc, #724]	; (8003e60 <HAL_RCC_OscConfig+0x6e0>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d114      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003b96:	f7ff fa77 	bl	8003088 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7fe fcdb 	bl	8002554 <HAL_GetTick>
 8003b9e:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7fe fcd7 	bl	8002554 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e16d      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb4:	4baa      	ldr	r3, [pc, #680]	; (8003e60 <HAL_RCC_OscConfig+0x6e0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d102      	bne.n	8003bce <HAL_RCC_OscConfig+0x44e>
 8003bc8:	f7ff fb37 	bl	800323a <LL_RCC_LSE_Enable>
 8003bcc:	e00c      	b.n	8003be8 <HAL_RCC_OscConfig+0x468>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2b05      	cmp	r3, #5
 8003bd4:	d104      	bne.n	8003be0 <HAL_RCC_OscConfig+0x460>
 8003bd6:	f7ff fb52 	bl	800327e <LL_RCC_LSE_EnableBypass>
 8003bda:	f7ff fb2e 	bl	800323a <LL_RCC_LSE_Enable>
 8003bde:	e003      	b.n	8003be8 <HAL_RCC_OscConfig+0x468>
 8003be0:	f7ff fb3c 	bl	800325c <LL_RCC_LSE_Disable>
 8003be4:	f7ff fb5c 	bl	80032a0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d014      	beq.n	8003c1a <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fe fcb0 	bl	8002554 <HAL_GetTick>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fcac 	bl	8002554 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e140      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003c0e:	f7ff fb58 	bl	80032c2 <LL_RCC_LSE_IsReady>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ef      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x478>
 8003c18:	e013      	b.n	8003c42 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fc9b 	bl	8002554 <HAL_GetTick>
 8003c1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fe fc97 	bl	8002554 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e12b      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003c38:	f7ff fb43 	bl	80032c2 <LL_RCC_LSE_IsReady>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1ef      	bne.n	8003c22 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d02c      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d014      	beq.n	8003c80 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c56:	f7ff fabc 	bl	80031d2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5a:	f7fe fc7b 	bl	8002554 <HAL_GetTick>
 8003c5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c62:	f7fe fc77 	bl	8002554 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e10d      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003c74:	f7ff facf 	bl	8003216 <LL_RCC_HSI48_IsReady>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0f1      	beq.n	8003c62 <HAL_RCC_OscConfig+0x4e2>
 8003c7e:	e013      	b.n	8003ca8 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c80:	f7ff fab8 	bl	80031f4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c84:	f7fe fc66 	bl	8002554 <HAL_GetTick>
 8003c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c8c:	f7fe fc62 	bl	8002554 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0f8      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003c9e:	f7ff faba 	bl	8003216 <LL_RCC_HSI48_IsReady>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1f1      	bne.n	8003c8c <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80ee 	beq.w	8003e8e <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb2:	f7ff fc18 	bl	80034e6 <LL_RCC_GetSysClkSource>
 8003cb6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	f040 80af 	bne.w	8003e28 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0203 	and.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d123      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d11c      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d114      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d10d      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d106      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d05d      	beq.n	8003ddc <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b0c      	cmp	r3, #12
 8003d24:	d058      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0ab      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d38:	f7ff fc73 	bl	8003622 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d3c:	f7fe fc0a 	bl	8002554 <HAL_GetTick>
 8003d40:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d44:	f7fe fc06 	bl	8002554 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e09c      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1ef      	bne.n	8003d44 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	4b3e      	ldr	r3, [pc, #248]	; (8003e64 <HAL_RCC_OscConfig+0x6e4>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003d76:	4311      	orrs	r1, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d7c:	0212      	lsls	r2, r2, #8
 8003d7e:	4311      	orrs	r1, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d84:	4311      	orrs	r1, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d8a:	4311      	orrs	r1, r2
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d90:	430a      	orrs	r2, r1
 8003d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003d9a:	f7ff fc33 	bl	8003604 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dae:	f7fe fbd1 	bl	8002554 <HAL_GetTick>
 8003db2:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fe fbcd 	bl	8002554 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e063      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0ef      	beq.n	8003db6 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd6:	e05a      	b.n	8003e8e <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e059      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d151      	bne.n	8003e8e <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003dea:	f7ff fc0b 	bl	8003604 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003dfe:	f7fe fba9 	bl	8002554 <HAL_GetTick>
 8003e02:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e06:	f7fe fba5 	bl	8002554 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e03b      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ef      	beq.n	8003e06 <HAL_RCC_OscConfig+0x686>
 8003e26:	e032      	b.n	8003e8e <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	d02d      	beq.n	8003e8a <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2e:	f7ff fbf8 	bl	8003622 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3c:	f023 0303 	bic.w	r3, r3, #3
 8003e40:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8003e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e4c:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e54:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e56:	f7fe fb7d 	bl	8002554 <HAL_GetTick>
 8003e5a:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e5c:	e00d      	b.n	8003e7a <HAL_RCC_OscConfig+0x6fa>
 8003e5e:	bf00      	nop
 8003e60:	58000400 	.word	0x58000400
 8003e64:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe fb74 	bl	8002554 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ef      	bne.n	8003e68 <HAL_RCC_OscConfig+0x6e8>
 8003e88:	e001      	b.n	8003e8e <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3734      	adds	r7, #52	; 0x34
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd90      	pop	{r4, r7, pc}

08003e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e12d      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003eac:	4b98      	ldr	r3, [pc, #608]	; (8004110 <HAL_RCC_ClockConfig+0x278>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	683a      	ldr	r2, [r7, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d91b      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eba:	4b95      	ldr	r3, [pc, #596]	; (8004110 <HAL_RCC_ClockConfig+0x278>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f023 0207 	bic.w	r2, r3, #7
 8003ec2:	4993      	ldr	r1, [pc, #588]	; (8004110 <HAL_RCC_ClockConfig+0x278>)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eca:	f7fe fb43 	bl	8002554 <HAL_GetTick>
 8003ece:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ed2:	f7fe fb3f 	bl	8002554 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e111      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee4:	4b8a      	ldr	r3, [pc, #552]	; (8004110 <HAL_RCC_ClockConfig+0x278>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d1ef      	bne.n	8003ed2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d016      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7ff fafb 	bl	80034fe <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f08:	f7fe fb24 	bl	8002554 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f10:	f7fe fb20 	bl	8002554 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0f2      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003f22:	f7ff fbd0 	bl	80036c6 <LL_RCC_IsActiveFlag_HPRE>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f1      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d016      	beq.n	8003f66 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff faf2 	bl	8003526 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f42:	f7fe fb07 	bl	8002554 <HAL_GetTick>
 8003f46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f4a:	f7fe fb03 	bl	8002554 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e0d5      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003f5c:	f7ff fbc5 	bl	80036ea <LL_RCC_IsActiveFlag_C2HPRE>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f1      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d016      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff faeb 	bl	8003552 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003f7c:	f7fe faea 	bl	8002554 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003f84:	f7fe fae6 	bl	8002554 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e0b8      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003f96:	f7ff fbbb 	bl	8003710 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f1      	beq.n	8003f84 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d016      	beq.n	8003fda <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fae5 	bl	8003580 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003fb6:	f7fe facd 	bl	8002554 <HAL_GetTick>
 8003fba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003fbe:	f7fe fac9 	bl	8002554 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e09b      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003fd0:	f7ff fbb1 	bl	8003736 <LL_RCC_IsActiveFlag_PPRE1>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f1      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d017      	beq.n	8004016 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fadb 	bl	80035a8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ff2:	f7fe faaf 	bl	8002554 <HAL_GetTick>
 8003ff6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ffa:	f7fe faab 	bl	8002554 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e07d      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800400c:	f7ff fba5 	bl	800375a <LL_RCC_IsActiveFlag_PPRE2>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f1      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d043      	beq.n	80040aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d106      	bne.n	8004038 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800402a:	f7ff f87b 	bl	8003124 <LL_RCC_HSE_IsReady>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d11e      	bne.n	8004072 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e067      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d106      	bne.n	800404e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004040:	f7ff fafe 	bl	8003640 <LL_RCC_PLL_IsReady>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d113      	bne.n	8004072 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e05c      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d106      	bne.n	8004064 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004056:	f7ff f9e3 	bl	8003420 <LL_RCC_MSI_IsReady>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d108      	bne.n	8004072 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e051      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004064:	f7ff f88e 	bl	8003184 <LL_RCC_HSI_IsReady>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e04a      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fa21 	bl	80034be <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407c:	f7fe fa6a 	bl	8002554 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fe fa66 	bl	8002554 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e036      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	f7ff fa24 	bl	80034e6 <LL_RCC_GetSysClkSource>
 800409e:	4602      	mov	r2, r0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d1ec      	bne.n	8004084 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040aa:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_RCC_ClockConfig+0x278>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d21b      	bcs.n	80040f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b8:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_RCC_ClockConfig+0x278>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f023 0207 	bic.w	r2, r3, #7
 80040c0:	4913      	ldr	r1, [pc, #76]	; (8004110 <HAL_RCC_ClockConfig+0x278>)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c8:	f7fe fa44 	bl	8002554 <HAL_GetTick>
 80040cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80040d0:	f7fe fa40 	bl	8002554 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e012      	b.n	8004108 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCC_ClockConfig+0x278>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d1ef      	bne.n	80040d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80040f0:	f000 f87e 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4a07      	ldr	r2, [pc, #28]	; (8004114 <HAL_RCC_ClockConfig+0x27c>)
 80040f8:	6013      	str	r3, [r2, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80040fa:	f7fe fa37 	bl	800256c <HAL_GetTickPrio>
 80040fe:	4603      	mov	r3, r0
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe f9d9 	bl	80024b8 <HAL_InitTick>
 8004106:	4603      	mov	r3, r0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	58004000 	.word	0x58004000
 8004114:	20000008 	.word	0x20000008

08004118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411e:	f7ff f9e2 	bl	80034e6 <LL_RCC_GetSysClkSource>
 8004122:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800412a:	f7ff f99e 	bl	800346a <LL_RCC_MSI_GetRange>
 800412e:	4603      	mov	r3, r0
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	e04b      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b04      	cmp	r3, #4
 8004144:	d102      	bne.n	800414c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004146:	4b28      	ldr	r3, [pc, #160]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e045      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b08      	cmp	r3, #8
 8004150:	d10a      	bne.n	8004168 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004152:	f7fe ffb7 	bl	80030c4 <LL_RCC_HSE_IsEnabledDiv2>
 8004156:	4603      	mov	r3, r0
 8004158:	2b01      	cmp	r3, #1
 800415a:	d102      	bne.n	8004162 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e03a      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004162:	4b22      	ldr	r3, [pc, #136]	; (80041ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e037      	b.n	80041d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004168:	f7ff faa1 	bl	80036ae <LL_RCC_PLL_GetMainSource>
 800416c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b02      	cmp	r3, #2
 8004172:	d003      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x64>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x6a>
 800417a:	e00d      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800417e:	60bb      	str	r3, [r7, #8]
        break;
 8004180:	e015      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004182:	f7fe ff9f 	bl	80030c4 <LL_RCC_HSE_IsEnabledDiv2>
 8004186:	4603      	mov	r3, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	d102      	bne.n	8004192 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800418c:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800418e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004190:	e00d      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004192:	4b16      	ldr	r3, [pc, #88]	; (80041ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8004194:	60bb      	str	r3, [r7, #8]
        break;
 8004196:	e00a      	b.n	80041ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004198:	f7ff f967 	bl	800346a <LL_RCC_MSI_GetRange>
 800419c:	4603      	mov	r3, r0
 800419e:	091b      	lsrs	r3, r3, #4
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	4a0f      	ldr	r2, [pc, #60]	; (80041e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80041a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041aa:	60bb      	str	r3, [r7, #8]
        break;
 80041ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80041ae:	f7ff fa59 	bl	8003664 <LL_RCC_PLL_GetN>
 80041b2:	4602      	mov	r2, r0
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	fb03 f402 	mul.w	r4, r3, r2
 80041ba:	f7ff fa6c 	bl	8003696 <LL_RCC_PLL_GetDivider>
 80041be:	4603      	mov	r3, r0
 80041c0:	091b      	lsrs	r3, r3, #4
 80041c2:	3301      	adds	r3, #1
 80041c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80041c8:	f7ff fa59 	bl	800367e <LL_RCC_PLL_GetR>
 80041cc:	4603      	mov	r3, r0
 80041ce:	0f5b      	lsrs	r3, r3, #29
 80041d0:	3301      	adds	r3, #1
 80041d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80041d8:	68fb      	ldr	r3, [r7, #12]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd90      	pop	{r4, r7, pc}
 80041e2:	bf00      	nop
 80041e4:	0800a7c8 	.word	0x0800a7c8
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	01e84800 	.word	0x01e84800

080041f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b598      	push	{r3, r4, r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80041f4:	f7ff ff90 	bl	8004118 <HAL_RCC_GetSysClockFreq>
 80041f8:	4604      	mov	r4, r0
 80041fa:	f7ff f9e9 	bl	80035d0 <LL_RCC_GetAHBPrescaler>
 80041fe:	4603      	mov	r3, r0
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	4a03      	ldr	r2, [pc, #12]	; (8004214 <HAL_RCC_GetHCLKFreq+0x24>)
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd98      	pop	{r3, r4, r7, pc}
 8004214:	0800a788 	.word	0x0800a788

08004218 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2bb0      	cmp	r3, #176	; 0xb0
 8004224:	d903      	bls.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004226:	4b15      	ldr	r3, [pc, #84]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e007      	b.n	800423e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f003 030f 	and.w	r3, r3, #15
 8004236:	4a11      	ldr	r2, [pc, #68]	; (800427c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800423e:	f7ff f9d3 	bl	80035e8 <LL_RCC_GetAHB4Prescaler>
 8004242:	4603      	mov	r3, r0
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	4a0d      	ldr	r2, [pc, #52]	; (8004280 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800424c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800425c:	fba2 2303 	umull	r2, r3, r2, r3
 8004260:	0c9c      	lsrs	r4, r3, #18
 8004262:	f7fe ff21 	bl	80030a8 <HAL_PWREx_GetVoltageRange>
 8004266:	4603      	mov	r3, r0
 8004268:	4619      	mov	r1, r3
 800426a:	4620      	mov	r0, r4
 800426c:	f000 f80c 	bl	8004288 <RCC_SetFlashLatency>
 8004270:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}
 800427a:	bf00      	nop
 800427c:	0800a7c8 	.word	0x0800a7c8
 8004280:	0800a788 	.word	0x0800a788
 8004284:	431bde83 	.word	0x431bde83

08004288 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b093      	sub	sp, #76	; 0x4c
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004292:	4b39      	ldr	r3, [pc, #228]	; (8004378 <RCC_SetFlashLatency+0xf0>)
 8004294:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004298:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800429a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800429e:	4a37      	ldr	r2, [pc, #220]	; (800437c <RCC_SetFlashLatency+0xf4>)
 80042a0:	f107 031c 	add.w	r3, r7, #28
 80042a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80042a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80042aa:	4b35      	ldr	r3, [pc, #212]	; (8004380 <RCC_SetFlashLatency+0xf8>)
 80042ac:	f107 040c 	add.w	r4, r7, #12
 80042b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80042b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80042b6:	2300      	movs	r3, #0
 80042b8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042c0:	d11c      	bne.n	80042fc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	643b      	str	r3, [r7, #64]	; 0x40
 80042c6:	e015      	b.n	80042f4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80042c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042d0:	4413      	add	r3, r2
 80042d2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d808      	bhi.n	80042ee <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80042dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042e4:	4413      	add	r3, r2
 80042e6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80042ea:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80042ec:	e022      	b.n	8004334 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80042ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f0:	3301      	adds	r3, #1
 80042f2:	643b      	str	r3, [r7, #64]	; 0x40
 80042f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d9e6      	bls.n	80042c8 <RCC_SetFlashLatency+0x40>
 80042fa:	e01b      	b.n	8004334 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80042fc:	2300      	movs	r3, #0
 80042fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004300:	e015      	b.n	800432e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800430a:	4413      	add	r3, r2
 800430c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d808      	bhi.n	8004328 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800431e:	4413      	add	r3, r2
 8004320:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004324:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004326:	e005      	b.n	8004334 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800432a:	3301      	adds	r3, #1
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800432e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004330:	2b02      	cmp	r3, #2
 8004332:	d9e6      	bls.n	8004302 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <RCC_SetFlashLatency+0xfc>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 0207 	bic.w	r2, r3, #7
 800433c:	4911      	ldr	r1, [pc, #68]	; (8004384 <RCC_SetFlashLatency+0xfc>)
 800433e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004340:	4313      	orrs	r3, r2
 8004342:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004344:	f7fe f906 	bl	8002554 <HAL_GetTick>
 8004348:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800434a:	e008      	b.n	800435e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800434c:	f7fe f902 	bl	8002554 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e007      	b.n	800436e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800435e:	4b09      	ldr	r3, [pc, #36]	; (8004384 <RCC_SetFlashLatency+0xfc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004368:	429a      	cmp	r2, r3
 800436a:	d1ef      	bne.n	800434c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	374c      	adds	r7, #76	; 0x4c
 8004372:	46bd      	mov	sp, r7
 8004374:	bd90      	pop	{r4, r7, pc}
 8004376:	bf00      	nop
 8004378:	0800a608 	.word	0x0800a608
 800437c:	0800a618 	.word	0x0800a618
 8004380:	0800a624 	.word	0x0800a624
 8004384:	58004000 	.word	0x58004000

08004388 <LL_RCC_LSE_IsEnabled>:
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800438c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004394:	f003 0301 	and.w	r3, r3, #1
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <LL_RCC_LSE_IsEnabled+0x18>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <LL_RCC_LSE_IsEnabled+0x1a>
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <LL_RCC_LSE_IsReady>:
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80043b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d101      	bne.n	80043c4 <LL_RCC_LSE_IsReady+0x18>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <LL_RCC_LSE_IsReady+0x1a>
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_RCC_SetRFWKPClockSource>:
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_RCC_SetSMPSClockSource>:
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	f023 0203 	bic.w	r2, r3, #3
 800440e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4313      	orrs	r3, r2
 8004416:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <LL_RCC_SetSMPSPrescaler>:
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800442c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004432:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004436:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4313      	orrs	r3, r2
 800443e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <LL_RCC_SetUSARTClockSource>:
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f023 0203 	bic.w	r2, r3, #3
 8004460:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_RCC_SetLPUARTClockSource>:
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004488:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800448c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <LL_RCC_SetI2CClockSource>:
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80044ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	091b      	lsrs	r3, r3, #4
 80044b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80044bc:	43db      	mvns	r3, r3
 80044be:	401a      	ands	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80044c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044cc:	4313      	orrs	r3, r2
 80044ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_RCC_SetLPTIMClockSource>:
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80044e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	041b      	lsls	r3, r3, #16
 80044f4:	43db      	mvns	r3, r3
 80044f6:	401a      	ands	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	041b      	lsls	r3, r3, #16
 80044fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004500:	4313      	orrs	r3, r2
 8004502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_RCC_SetSAIClockSource>:
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800451a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004522:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_RCC_SetRNGClockSource>:
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <LL_RCC_SetCLK48ClockSource>:
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800457a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800457e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800458a:	bf00      	nop
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <LL_RCC_SetUSBClockSource>:
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff ffe3 	bl	800456a <LL_RCC_SetCLK48ClockSource>
}
 80045a4:	bf00      	nop
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <LL_RCC_SetADCClockSource>:
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80045b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <LL_RCC_SetRTCClockSource>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80045e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <LL_RCC_GetRTCClockSource>:
{
 8004604:	b480      	push	{r7}
 8004606:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <LL_RCC_ForceBackupDomainReset>:
{
 800461e:	b480      	push	{r7}
 8004620:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800462e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004636:	bf00      	nop
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004658:	bf00      	nop
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_RCC_PLLSAI1_Enable>:
{
 8004662:	b480      	push	{r7}
 8004664:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004670:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004674:	6013      	str	r3, [r2, #0]
}
 8004676:	bf00      	nop
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <LL_RCC_PLLSAI1_Disable>:
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004692:	6013      	str	r3, [r2, #0]
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <LL_RCC_PLLSAI1_IsReady>:
{
 800469e:	b480      	push	{r7}
 80046a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80046a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b0:	d101      	bne.n	80046b6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b088      	sub	sp, #32
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80046ca:	2300      	movs	r3, #0
 80046cc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80046ce:	2300      	movs	r3, #0
 80046d0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d034      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046e6:	d021      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80046e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ec:	d81b      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f2:	d01d      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80046f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046f8:	d815      	bhi.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80046fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004702:	d110      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800470e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004712:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004714:	e00d      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	3304      	adds	r3, #4
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f947 	bl	80049ae <RCCEx_PLLSAI1_ConfigNP>
 8004720:	4603      	mov	r3, r0
 8004722:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004724:	e005      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	77fb      	strb	r3, [r7, #31]
        break;
 800472a:	e002      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800472c:	bf00      	nop
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004732:	7ffb      	ldrb	r3, [r7, #31]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fee8 	bl	8004512 <LL_RCC_SetSAIClockSource>
 8004742:	e001      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	7ffb      	ldrb	r3, [r7, #31]
 8004746:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004750:	2b00      	cmp	r3, #0
 8004752:	d046      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004754:	f7ff ff56 	bl	8004604 <LL_RCC_GetRTCClockSource>
 8004758:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	429a      	cmp	r2, r3
 8004762:	d03c      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004764:	f7fe fc90 	bl	8003088 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d105      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff ff30 	bl	80045d8 <LL_RCC_SetRTCClockSource>
 8004778:	e02e      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004784:	f7ff ff4b 	bl	800461e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004788:	f7ff ff5a 	bl	8004640 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800479a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80047a4:	f7ff fdf0 	bl	8004388 <LL_RCC_LSE_IsEnabled>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d114      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80047ae:	f7fd fed1 	bl	8002554 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80047b4:	e00b      	b.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fd fecd 	bl	8002554 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d902      	bls.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	77fb      	strb	r3, [r7, #31]
              break;
 80047cc:	e004      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80047ce:	f7ff fded 	bl	80043ac <LL_RCC_LSE_IsReady>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d1ee      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
 80047da:	77bb      	strb	r3, [r7, #30]
 80047dc:	e001      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047de:	7ffb      	ldrb	r3, [r7, #31]
 80047e0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d004      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff fe2a 	bl	800444c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fe35 	bl	8004478 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0310 	and.w	r3, r3, #16
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fe5d 	bl	80044de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fe52 	bl	80044de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	4618      	mov	r0, r3
 800484c:	f7ff fe2a 	bl	80044a4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b00      	cmp	r3, #0
 800485a:	d004      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fe1f 	bl	80044a4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	2b00      	cmp	r3, #0
 8004870:	d022      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff fe8d 	bl	8004596 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004884:	d107      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004890:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004894:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800489e:	d10b      	bne.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f8dd 	bl	8004a64 <RCCEx_PLLSAI1_ConfigNQ>
 80048aa:	4603      	mov	r3, r0
 80048ac:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 80048ae:	7ffb      	ldrb	r3, [r7, #31]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* set overall return value */
      status = ret;
 80048b4:	7ffb      	ldrb	r3, [r7, #31]
 80048b6:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02b      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d008      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d6:	d003      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fe2a 	bl	800453e <LL_RCC_SetRNGClockSource>
 80048ea:	e00a      	b.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	2000      	movs	r0, #0
 80048f8:	f7ff fe21 	bl	800453e <LL_RCC_SetRNGClockSource>
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff fe34 	bl	800456a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800490a:	d107      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800490c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800491a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff fe3d 	bl	80045ac <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800493a:	d107      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800493c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004950:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004954:	d10b      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f8dd 	bl	8004b1a <RCCEx_PLLSAI1_ConfigNR>
 8004960:	4603      	mov	r3, r0
 8004962:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004964:	7ffb      	ldrb	r3, [r7, #31]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* set overall return value */
      status = ret;
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d004      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff fd26 	bl	80043d0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004994:	4618      	mov	r0, r3
 8004996:	f7ff fd45 	bl	8004424 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fd2c 	bl	80043fc <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80049a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3720      	adds	r7, #32
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80049ba:	f7ff fe61 	bl	8004680 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80049be:	f7fd fdc9 	bl	8002554 <HAL_GetTick>
 80049c2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049c4:	e009      	b.n	80049da <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049c6:	f7fd fdc5 	bl	8002554 <HAL_GetTick>
 80049ca:	4602      	mov	r2, r0
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d902      	bls.n	80049da <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	73fb      	strb	r3, [r7, #15]
      break;
 80049d8:	e004      	b.n	80049e4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80049da:	f7ff fe60 	bl	800469e <LL_RCC_PLLSAI1_IsReady>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f0      	bne.n	80049c6 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d137      	bne.n	8004a5a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	021b      	lsls	r3, r3, #8
 80049fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a14:	4313      	orrs	r3, r2
 8004a16:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004a18:	f7ff fe23 	bl	8004662 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a1c:	f7fd fd9a 	bl	8002554 <HAL_GetTick>
 8004a20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a22:	e009      	b.n	8004a38 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a24:	f7fd fd96 	bl	8002554 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d902      	bls.n	8004a38 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	73fb      	strb	r3, [r7, #15]
        break;
 8004a36:	e004      	b.n	8004a42 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004a38:	f7ff fe31 	bl	800469e <LL_RCC_PLLSAI1_IsReady>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d1f0      	bne.n	8004a24 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d108      	bne.n	8004a5a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a56:	4313      	orrs	r3, r2
 8004a58:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004a70:	f7ff fe06 	bl	8004680 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004a74:	f7fd fd6e 	bl	8002554 <HAL_GetTick>
 8004a78:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a7a:	e009      	b.n	8004a90 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a7c:	f7fd fd6a 	bl	8002554 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d902      	bls.n	8004a90 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8e:	e004      	b.n	8004a9a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004a90:	f7ff fe05 	bl	800469e <LL_RCC_PLLSAI1_IsReady>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f0      	bne.n	8004a7c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d137      	bne.n	8004b10 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aca:	4313      	orrs	r3, r2
 8004acc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004ace:	f7ff fdc8 	bl	8004662 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad2:	f7fd fd3f 	bl	8002554 <HAL_GetTick>
 8004ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ad8:	e009      	b.n	8004aee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ada:	f7fd fd3b 	bl	8002554 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d902      	bls.n	8004aee <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	73fb      	strb	r3, [r7, #15]
        break;
 8004aec:	e004      	b.n	8004af8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004aee:	f7ff fdd6 	bl	800469e <LL_RCC_PLLSAI1_IsReady>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d1f0      	bne.n	8004ada <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d108      	bne.n	8004b10 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004b26:	f7ff fdab 	bl	8004680 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004b2a:	f7fd fd13 	bl	8002554 <HAL_GetTick>
 8004b2e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b30:	e009      	b.n	8004b46 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b32:	f7fd fd0f 	bl	8002554 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d902      	bls.n	8004b46 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	73fb      	strb	r3, [r7, #15]
      break;
 8004b44:	e004      	b.n	8004b50 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004b46:	f7ff fdaa 	bl	800469e <LL_RCC_PLLSAI1_IsReady>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d137      	bne.n	8004bc6 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b80:	4313      	orrs	r3, r2
 8004b82:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004b84:	f7ff fd6d 	bl	8004662 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd fce4 	bl	8002554 <HAL_GetTick>
 8004b8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004b8e:	e009      	b.n	8004ba4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b90:	f7fd fce0 	bl	8002554 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d902      	bls.n	8004ba4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ba2:	e004      	b.n	8004bae <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ba4:	f7ff fd7b 	bl	800469e <LL_RCC_PLLSAI1_IsReady>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d1f0      	bne.n	8004b90 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d108      	bne.n	8004bc6 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb8:	691a      	ldr	r2, [r3, #16]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e090      	b.n	8004d04 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fd f9e6 	bl	8001fc8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	22ca      	movs	r2, #202	; 0xca
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2253      	movs	r2, #83	; 0x53
 8004c12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 faba 	bl	800518e <RTC_EnterInitMode>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	22ff      	movs	r2, #255	; 0xff
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e067      	b.n	8004d04 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6899      	ldr	r1, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6919      	ldr	r1, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	041a      	lsls	r2, r3, #16
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c92:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0203 	bic.w	r2, r2, #3
 8004ca2:	64da      	str	r2, [r3, #76]	; 0x4c
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	431a      	orrs	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d113      	bne.n	8004cf2 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa39 	bl	8005142 <HAL_RTC_WaitForSynchro>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00d      	beq.n	8004cf2 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	22ff      	movs	r2, #255	; 0xff
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e008      	b.n	8004d04 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	22ff      	movs	r2, #255	; 0xff
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8004d02:	2300      	movs	r3, #0
  }
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_RTC_SetTime+0x1a>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0b2      	b.n	8004e8c <HAL_RTC_SetTime+0x180>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2202      	movs	r2, #2
 8004d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d126      	bne.n	8004d8a <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fa44 	bl	80051e2 <RTC_ByteToBcd2>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	785b      	ldrb	r3, [r3, #1]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fa3d 	bl	80051e2 <RTC_ByteToBcd2>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d6c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	789b      	ldrb	r3, [r3, #2]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fa35 	bl	80051e2 <RTC_ByteToBcd2>
 8004d78:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004d7a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	78db      	ldrb	r3, [r3, #3]
 8004d82:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e018      	b.n	8004dbc <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004daa:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004db0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	78db      	ldrb	r3, [r3, #3]
 8004db6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	22ca      	movs	r2, #202	; 0xca
 8004dc2:	625a      	str	r2, [r3, #36]	; 0x24
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2253      	movs	r2, #83	; 0x53
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f9de 	bl	800518e <RTC_EnterInitMode>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00d      	beq.n	8004df4 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2204      	movs	r2, #4
 8004de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e04b      	b.n	8004e8c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004dfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004e02:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e12:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6899      	ldr	r1, [r3, #8]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e3a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d113      	bne.n	8004e72 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f979 	bl	8005142 <HAL_RTC_WaitForSynchro>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	22ff      	movs	r2, #255	; 0xff
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2204      	movs	r2, #4
 8004e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e00c      	b.n	8004e8c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	22ff      	movs	r2, #255	; 0xff
 8004e78:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
  }
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd90      	pop	{r4, r7, pc}

08004e94 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004ec2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	0c1b      	lsrs	r3, r3, #16
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	0a1b      	lsrs	r3, r3, #8
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d11a      	bne.n	8004f42 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f986 	bl	8005222 <RTC_Bcd2ToByte>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f97d 	bl	8005222 <RTC_Bcd2ToByte>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	789b      	ldrb	r3, [r3, #2]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 f974 	bl	8005222 <RTC_Bcd2ToByte>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b087      	sub	sp, #28
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_RTC_SetDate+0x1a>
 8004f62:	2302      	movs	r3, #2
 8004f64:	e09c      	b.n	80050a0 <HAL_RTC_SetDate+0x154>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2202      	movs	r2, #2
 8004f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10e      	bne.n	8004f9a <HAL_RTC_SetDate+0x4e>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	785b      	ldrb	r3, [r3, #1]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	785b      	ldrb	r3, [r3, #1]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	330a      	adds	r3, #10
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d11c      	bne.n	8004fda <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	78db      	ldrb	r3, [r3, #3]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 f91c 	bl	80051e2 <RTC_ByteToBcd2>
 8004faa:	4603      	mov	r3, r0
 8004fac:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	785b      	ldrb	r3, [r3, #1]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 f915 	bl	80051e2 <RTC_ByteToBcd2>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fbc:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	789b      	ldrb	r3, [r3, #2]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f90d 	bl	80051e2 <RTC_ByteToBcd2>
 8004fc8:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004fca:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	e00e      	b.n	8004ff8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	78db      	ldrb	r3, [r3, #3]
 8004fde:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004fe6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8004fec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	22ca      	movs	r2, #202	; 0xca
 8004ffe:	625a      	str	r2, [r3, #36]	; 0x24
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2253      	movs	r2, #83	; 0x53
 8005006:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005008:	68f8      	ldr	r0, [r7, #12]
 800500a:	f000 f8c0 	bl	800518e <RTC_EnterInitMode>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00d      	beq.n	8005030 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	22ff      	movs	r2, #255	; 0xff
 800501a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2204      	movs	r2, #4
 8005020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e037      	b.n	80050a0 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800503a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800503e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800504e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d113      	bne.n	8005086 <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 f86f 	bl	8005142 <HAL_RTC_WaitForSynchro>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00d      	beq.n	8005086 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	22ff      	movs	r2, #255	; 0xff
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2204      	movs	r2, #4
 8005076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e00c      	b.n	80050a0 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	22ff      	movs	r2, #255	; 0xff
 800508c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800509e:	2300      	movs	r3, #0
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	371c      	adds	r7, #28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd90      	pop	{r4, r7, pc}

080050a8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80050be:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80050c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	0a1b      	lsrs	r3, r3, #8
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	f003 031f 	and.w	r3, r3, #31
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050e6:	b2da      	uxtb	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	0b5b      	lsrs	r3, r3, #13
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	f003 0307 	and.w	r3, r3, #7
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d11a      	bne.n	8005138 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	78db      	ldrb	r3, [r3, #3]
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f88b 	bl	8005222 <RTC_Bcd2ToByte>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	4618      	mov	r0, r3
 800511a:	f000 f882 	bl	8005222 <RTC_Bcd2ToByte>
 800511e:	4603      	mov	r3, r0
 8005120:	461a      	mov	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	789b      	ldrb	r3, [r3, #2]
 800512a:	4618      	mov	r0, r3
 800512c:	f000 f879 	bl	8005222 <RTC_Bcd2ToByte>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005142:	b580      	push	{r7, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68da      	ldr	r2, [r3, #12]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005158:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800515a:	f7fd f9fb 	bl	8002554 <HAL_GetTick>
 800515e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005160:	e009      	b.n	8005176 <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005162:	f7fd f9f7 	bl	8002554 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005170:	d901      	bls.n	8005176 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e007      	b.n	8005186 <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ee      	beq.n	8005162 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d119      	bne.n	80051d8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f04f 32ff 	mov.w	r2, #4294967295
 80051ac:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80051ae:	f7fd f9d1 	bl	8002554 <HAL_GetTick>
 80051b2:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80051b4:	e009      	b.n	80051ca <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80051b6:	f7fd f9cd 	bl	8002554 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051c4:	d901      	bls.n	80051ca <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e007      	b.n	80051da <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0ee      	beq.n	80051b6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b085      	sub	sp, #20
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	4603      	mov	r3, r0
 80051ea:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 80051f4:	e005      	b.n	8005202 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80051fc:	7afb      	ldrb	r3, [r7, #11]
 80051fe:	3b0a      	subs	r3, #10
 8005200:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 8005202:	7afb      	ldrb	r3, [r7, #11]
 8005204:	2b09      	cmp	r3, #9
 8005206:	d8f6      	bhi.n	80051f6 <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	b2db      	uxtb	r3, r3
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	b2da      	uxtb	r2, r3
 8005210:	7afb      	ldrb	r3, [r7, #11]
 8005212:	4313      	orrs	r3, r2
 8005214:	b2db      	uxtb	r3, r3
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	4603      	mov	r3, r0
 800522a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800522c:	79fb      	ldrb	r3, [r7, #7]
 800522e:	091b      	lsrs	r3, r3, #4
 8005230:	b2db      	uxtb	r3, r3
 8005232:	461a      	mov	r2, r3
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	79fb      	ldrb	r3, [r7, #7]
 8005244:	f003 030f 	and.w	r3, r3, #15
 8005248:	b2db      	uxtb	r3, r3
 800524a:	4413      	add	r3, r2
 800524c:	b2db      	uxtb	r3, r3
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <HAL_RTCEx_SetWakeUpTimer>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	60b9      	str	r1, [r7, #8]
 8005264:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8005270:	2302      	movs	r3, #2
 8005272:	e089      	b.n	8005388 <HAL_RTCEx_SetWakeUpTimer+0x12e>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	22ca      	movs	r2, #202	; 0xca
 800528a:	625a      	str	r2, [r3, #36]	; 0x24
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2253      	movs	r2, #83	; 0x53
 8005292:	625a      	str	r2, [r3, #36]	; 0x24
 
  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != 0U){
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d020      	beq.n	80052e4 <HAL_RTCEx_SetWakeUpTimer+0x8a>
    tickstart = HAL_GetTick();
 80052a2:	f7fd f957 	bl	8002554 <HAL_GetTick>
 80052a6:	6178      	str	r0, [r7, #20]

   /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80052a8:	e015      	b.n	80052d6 <HAL_RTCEx_SetWakeUpTimer+0x7c>
   {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052aa:	f7fd f953 	bl	8002554 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052b8:	d90d      	bls.n	80052d6 <HAL_RTCEx_SetWakeUpTimer+0x7c>
      {
       /* Enable the write protection for RTC registers */
       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	22ff      	movs	r2, #255	; 0xff
 80052c0:	625a      	str	r2, [r3, #36]	; 0x24

       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2203      	movs	r2, #3
 80052c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

       /* Process Unlocked */ 
       __HAL_UNLOCK(hrtc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2020 	strb.w	r2, [r3, #32]

       return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e058      	b.n	8005388 <HAL_RTCEx_SetWakeUpTimer+0x12e>
   while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1e2      	bne.n	80052aa <HAL_RTCEx_SetWakeUpTimer+0x50>
      }
    }
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f2:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80052f4:	f7fd f92e 	bl	8002554 <HAL_GetTick>
 80052f8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80052fa:	e015      	b.n	8005328 <HAL_RTCEx_SetWakeUpTimer+0xce>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80052fc:	f7fd f92a 	bl	8002554 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800530a:	d90d      	bls.n	8005328 <HAL_RTCEx_SetWakeUpTimer+0xce>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	22ff      	movs	r2, #255	; 0xff
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2203      	movs	r2, #3
 8005318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */ 
      __HAL_UNLOCK(hrtc);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e02f      	b.n	8005388 <HAL_RTCEx_SetWakeUpTimer+0x12e>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0e2      	beq.n	80052fc <HAL_RTCEx_SetWakeUpTimer+0xa2>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0207 	bic.w	r2, r2, #7
 8005344:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6899      	ldr	r1, [r3, #8]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800536c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	22ff      	movs	r2, #255	; 0xff
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_RTCEx_EnableBypassShadow+0x16>
 80053a2:	2302      	movs	r3, #2
 80053a4:	e024      	b.n	80053f0 <HAL_RTCEx_EnableBypassShadow+0x60>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	22ca      	movs	r2, #202	; 0xca
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2253      	movs	r2, #83	; 0x53
 80053c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0220 	orr.w	r2, r2, #32
 80053d4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	22ff      	movs	r2, #255	; 0xff
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e095      	b.n	800553a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	2b00      	cmp	r3, #0
 8005414:	d108      	bne.n	8005428 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800541e:	d009      	beq.n	8005434 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	61da      	str	r2, [r3, #28]
 8005426:	e005      	b.n	8005434 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc fdda 	bl	8002008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800546a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005474:	d902      	bls.n	800547c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e002      	b.n	8005482 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800547c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005480:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800548a:	d007      	beq.n	800549c <HAL_SPI_Init+0xa0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005494:	d002      	beq.n	800549c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	69db      	ldr	r3, [r3, #28]
 80054d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054d4:	431a      	orrs	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	ea42 0103 	orr.w	r1, r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	0c1b      	lsrs	r3, r3, #16
 80054f8:	f003 0204 	and.w	r2, r3, #4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005518:	ea42 0103 	orr.w	r1, r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69db      	ldr	r3, [r3, #28]
 8005552:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	f640 030f 	movw	r3, #2063	; 0x80f
 800556a:	4013      	ands	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d118      	bne.n	80055a6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d013      	beq.n	80055a6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f003 0320 	and.w	r3, r3, #32
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 81fb 	beq.w	8005992 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	4798      	blx	r3
      }
      return;
 80055a4:	e1f5      	b.n	8005992 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 80ef 	beq.w	800578c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4b73      	ldr	r3, [pc, #460]	; (8005780 <HAL_UART_IRQHandler+0x23c>)
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4b72      	ldr	r3, [pc, #456]	; (8005784 <HAL_UART_IRQHandler+0x240>)
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 80e4 	beq.w	800578c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <HAL_UART_IRQHandler+0xac>
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2201      	movs	r2, #1
 80055de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e6:	f043 0201 	orr.w	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d010      	beq.n	800561c <HAL_UART_IRQHandler+0xd8>
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2202      	movs	r2, #2
 800560a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d010      	beq.n	8005648 <HAL_UART_IRQHandler+0x104>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2204      	movs	r2, #4
 8005636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800563e:	f043 0202 	orr.w	r2, r3, #2
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d015      	beq.n	800567e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d104      	bne.n	8005666 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4b48      	ldr	r3, [pc, #288]	; (8005780 <HAL_UART_IRQHandler+0x23c>)
 8005660:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2208      	movs	r2, #8
 800566c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005674:	f043 0208 	orr.w	r2, r3, #8
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005684:	2b00      	cmp	r3, #0
 8005686:	d011      	beq.n	80056ac <HAL_UART_IRQHandler+0x168>
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00c      	beq.n	80056ac <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800569a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a2:	f043 0220 	orr.w	r2, r3, #32
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 816f 	beq.w	8005996 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d104      	bne.n	80056d6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d007      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056ec:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f8:	2b40      	cmp	r3, #64	; 0x40
 80056fa:	d004      	beq.n	8005706 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005702:	2b00      	cmp	r3, #0
 8005704:	d031      	beq.n	800576a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f970 	bl	80059ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005716:	2b40      	cmp	r3, #64	; 0x40
 8005718:	d123      	bne.n	8005762 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005728:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800572e:	2b00      	cmp	r3, #0
 8005730:	d013      	beq.n	800575a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005736:	4a14      	ldr	r2, [pc, #80]	; (8005788 <HAL_UART_IRQHandler+0x244>)
 8005738:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573e:	4618      	mov	r0, r3
 8005740:	f7fd f930 	bl	80029a4 <HAL_DMA_Abort_IT>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d017      	beq.n	800577a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	e00f      	b.n	800577a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f930 	bl	80059c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005760:	e00b      	b.n	800577a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f92c 	bl	80059c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005768:	e007      	b.n	800577a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f928 	bl	80059c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005778:	e10d      	b.n	8005996 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577a:	bf00      	nop
    return;
 800577c:	e10b      	b.n	8005996 <HAL_UART_IRQHandler+0x452>
 800577e:	bf00      	nop
 8005780:	10000001 	.word	0x10000001
 8005784:	04000120 	.word	0x04000120
 8005788:	08005a51 	.word	0x08005a51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005790:	2b01      	cmp	r3, #1
 8005792:	f040 80ab 	bne.w	80058ec <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 80a5 	beq.w	80058ec <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 809f 	beq.w	80058ec <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2210      	movs	r2, #16
 80057b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d155      	bne.n	8005870 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80057ce:	893b      	ldrh	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80e2 	beq.w	800599a <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057dc:	893a      	ldrh	r2, [r7, #8]
 80057de:	429a      	cmp	r2, r3
 80057e0:	f080 80db 	bcs.w	800599a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	893a      	ldrh	r2, [r7, #8]
 80057e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d12b      	bne.n	8005854 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800580a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0201 	bic.w	r2, r2, #1
 800581a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800582a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0210 	bic.w	r2, r2, #16
 8005848:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800584e:	4618      	mov	r0, r3
 8005850:	f7fd f849 	bl	80028e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005860:	b29b      	uxth	r3, r3
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	b29b      	uxth	r3, r3
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f8b3 	bl	80059d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800586e:	e094      	b.n	800599a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800587c:	b29b      	uxth	r3, r3
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005888:	b29b      	uxth	r3, r3
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8087 	beq.w	800599e <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005890:	897b      	ldrh	r3, [r7, #10]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8083 	beq.w	800599e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058a6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6812      	ldr	r2, [r2, #0]
 80058b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0210 	bic.w	r2, r2, #16
 80058de:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058e0:	897b      	ldrh	r3, [r7, #10]
 80058e2:	4619      	mov	r1, r3
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f875 	bl	80059d4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80058ea:	e058      	b.n	800599e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00d      	beq.n	8005912 <HAL_UART_IRQHandler+0x3ce>
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d008      	beq.n	8005912 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8d0 	bl	8005ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005910:	e048      	b.n	80059a4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005918:	2b00      	cmp	r3, #0
 800591a:	d012      	beq.n	8005942 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d104      	bne.n	8005930 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005934:	2b00      	cmp	r3, #0
 8005936:	d034      	beq.n	80059a2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
    }
    return;
 8005940:	e02f      	b.n	80059a2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_UART_IRQHandler+0x41a>
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f890 	bl	8005a7c <UART_EndTransmit_IT>
    return;
 800595c:	e022      	b.n	80059a4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_UART_IRQHandler+0x436>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f8b0 	bl	8005ad8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005978:	e014      	b.n	80059a4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00f      	beq.n	80059a4 <HAL_UART_IRQHandler+0x460>
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	2b00      	cmp	r3, #0
 8005988:	da0c      	bge.n	80059a4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f89a 	bl	8005ac4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005990:	e008      	b.n	80059a4 <HAL_UART_IRQHandler+0x460>
      return;
 8005992:	bf00      	nop
 8005994:	e006      	b.n	80059a4 <HAL_UART_IRQHandler+0x460>
    return;
 8005996:	bf00      	nop
 8005998:	e004      	b.n	80059a4 <HAL_UART_IRQHandler+0x460>
      return;
 800599a:	bf00      	nop
 800599c:	e002      	b.n	80059a4 <HAL_UART_IRQHandler+0x460>
      return;
 800599e:	bf00      	nop
 80059a0:	e000      	b.n	80059a4 <HAL_UART_IRQHandler+0x460>
    return;
 80059a2:	bf00      	nop
  }
}
 80059a4:	3720      	adds	r7, #32
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop

080059ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	460b      	mov	r3, r1
 80059de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0210 	bic.w	r2, r2, #16
 8005a2e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff ffa6 	bl	80059c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a74:	bf00      	nop
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a92:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff ff82 	bl	80059ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa8:	bf00      	nop
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005acc:	bf00      	nop
 8005ace:	370c      	adds	r7, #12
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b088      	sub	sp, #32
 8005af0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005af2:	2300      	movs	r3, #0
 8005af4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	2218      	movs	r2, #24
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 f97c 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b04:	233f      	movs	r3, #63	; 0x3f
 8005b06:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8005b08:	2381      	movs	r3, #129	; 0x81
 8005b0a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005b0c:	1dfb      	adds	r3, r7, #7
 8005b0e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005b10:	2301      	movs	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b14:	f107 0308 	add.w	r3, r7, #8
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 f832 	bl	8006b84 <hci_send_req>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da01      	bge.n	8005b2a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005b26:	23ff      	movs	r3, #255	; 0xff
 8005b28:	e000      	b.n	8005b2c <aci_gap_set_non_discoverable+0x40>
  return status;
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3720      	adds	r7, #32
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8005b34:	b5b0      	push	{r4, r5, r7, lr}
 8005b36:	b0ce      	sub	sp, #312	; 0x138
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	4605      	mov	r5, r0
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	1dfb      	adds	r3, r7, #7
 8005b44:	462a      	mov	r2, r5
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	1d3b      	adds	r3, r7, #4
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	1cbb      	adds	r3, r7, #2
 8005b50:	4602      	mov	r2, r0
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	1dbb      	adds	r3, r7, #6
 8005b56:	460a      	mov	r2, r1
 8005b58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8005b5a:	f107 0310 	add.w	r3, r7, #16
 8005b5e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005b62:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005b66:	3308      	adds	r3, #8
 8005b68:	f107 0210 	add.w	r2, r7, #16
 8005b6c:	4413      	add	r3, r2
 8005b6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005b72:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005b76:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3309      	adds	r3, #9
 8005b7e:	f107 0210 	add.w	r2, r7, #16
 8005b82:	4413      	add	r3, r2
 8005b84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005b88:	f107 030f 	add.w	r3, r7, #15
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8005b96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b9a:	1dfa      	adds	r2, r7, #7
 8005b9c:	7812      	ldrb	r2, [r2, #0]
 8005b9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005baa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bae:	1d3a      	adds	r2, r7, #4
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bba:	3302      	adds	r3, #2
 8005bbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005bc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bc4:	1cba      	adds	r2, r7, #2
 8005bc6:	8812      	ldrh	r2, [r2, #0]
 8005bc8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005bcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8005bd6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bda:	1dba      	adds	r2, r7, #6
 8005bdc:	7812      	ldrb	r2, [r2, #0]
 8005bde:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005be0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005be4:	3301      	adds	r3, #1
 8005be6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005bee:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005bf2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8005bfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c02:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005c06:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8005c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8005c12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005c16:	3308      	adds	r3, #8
 8005c18:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005c1c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f8db 	bl	8006ddc <Osal_MemCpy>
    index_input += Local_Name_Length;
 8005c26:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8005c2a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005c2e:	4413      	add	r3, r2
 8005c30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c38:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005c3c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c42:	3301      	adds	r3, #1
 8005c44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005c48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005c52:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f8c0 	bl	8006ddc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8005c5c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8005c60:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005c64:	4413      	add	r3, r2
 8005c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8005c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8005c72:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005c74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c78:	3302      	adds	r3, #2
 8005c7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8005c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c82:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8005c86:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c96:	2218      	movs	r2, #24
 8005c98:	2100      	movs	r1, #0
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 f8ae 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005ca0:	233f      	movs	r3, #63	; 0x3f
 8005ca2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8005ca6:	2383      	movs	r3, #131	; 0x83
 8005ca8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005cac:	f107 0310 	add.w	r3, r7, #16
 8005cb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005cbc:	f107 030f 	add.w	r3, r7, #15
 8005cc0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005cca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f000 ff57 	bl	8006b84 <hci_send_req>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da01      	bge.n	8005ce0 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8005cdc:	23ff      	movs	r3, #255	; 0xff
 8005cde:	e002      	b.n	8005ce6 <aci_gap_set_discoverable+0x1b2>
  return status;
 8005ce0:	f107 030f 	add.w	r3, r7, #15
 8005ce4:	781b      	ldrb	r3, [r3, #0]
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bdb0      	pop	{r4, r5, r7, pc}

08005cf0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b0cc      	sub	sp, #304	; 0x130
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	1dfb      	adds	r3, r7, #7
 8005cfa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8005cfc:	f107 0310 	add.w	r3, r7, #16
 8005d00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005d04:	f107 030f 	add.w	r3, r7, #15
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8005d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d16:	1dfa      	adds	r2, r7, #7
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005d1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d20:	3301      	adds	r3, #1
 8005d22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d2a:	2218      	movs	r2, #24
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 f864 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005d34:	233f      	movs	r3, #63	; 0x3f
 8005d36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8005d3a:	2385      	movs	r3, #133	; 0x85
 8005d3c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005d40:	f107 0310 	add.w	r3, r7, #16
 8005d44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005d48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005d4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005d50:	f107 030f 	add.w	r3, r7, #15
 8005d54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d62:	2100      	movs	r1, #0
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 ff0d 	bl	8006b84 <hci_send_req>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	da01      	bge.n	8005d74 <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8005d70:	23ff      	movs	r3, #255	; 0xff
 8005d72:	e002      	b.n	8005d7a <aci_gap_set_io_capability+0x8a>
  return status;
 8005d74:	f107 030f 	add.w	r3, r7, #15
 8005d78:	781b      	ldrb	r3, [r3, #0]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	b0cc      	sub	sp, #304	; 0x130
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4605      	mov	r5, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	1dfb      	adds	r3, r7, #7
 8005d94:	462a      	mov	r2, r5
 8005d96:	701a      	strb	r2, [r3, #0]
 8005d98:	1dbb      	adds	r3, r7, #6
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	1d7b      	adds	r3, r7, #5
 8005da0:	4602      	mov	r2, r0
 8005da2:	701a      	strb	r2, [r3, #0]
 8005da4:	1d3b      	adds	r3, r7, #4
 8005da6:	460a      	mov	r2, r1
 8005da8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005daa:	f107 0310 	add.w	r3, r7, #16
 8005dae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005db2:	f107 030f 	add.w	r3, r7, #15
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc4:	1dfa      	adds	r2, r7, #7
 8005dc6:	7812      	ldrb	r2, [r2, #0]
 8005dc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dce:	3301      	adds	r3, #1
 8005dd0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8005dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd8:	1dba      	adds	r2, r7, #6
 8005dda:	7812      	ldrb	r2, [r2, #0]
 8005ddc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005dde:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005de2:	3301      	adds	r3, #1
 8005de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8005de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dec:	1d7a      	adds	r2, r7, #5
 8005dee:	7812      	ldrb	r2, [r2, #0]
 8005df0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005df2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005df6:	3301      	adds	r3, #1
 8005df8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e00:	1d3a      	adds	r2, r7, #4
 8005e02:	7812      	ldrb	r2, [r2, #0]
 8005e04:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005e06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8005e10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e14:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005e18:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005e1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e1e:	3301      	adds	r3, #1
 8005e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e28:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005e2c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e32:	3301      	adds	r3, #1
 8005e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005e40:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e46:	3301      	adds	r3, #1
 8005e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e50:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005e54:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8005e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e66:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005e6a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e70:	3301      	adds	r3, #1
 8005e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e7a:	2218      	movs	r2, #24
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 ffbc 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e84:	233f      	movs	r3, #63	; 0x3f
 8005e86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8005e8a:	2386      	movs	r3, #134	; 0x86
 8005e8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005e90:	f107 0310 	add.w	r3, r7, #16
 8005e94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005e98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ea0:	f107 030f 	add.w	r3, r7, #15
 8005ea4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005eae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fe65 	bl	8006b84 <hci_send_req>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da01      	bge.n	8005ec4 <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8005ec0:	23ff      	movs	r3, #255	; 0xff
 8005ec2:	e002      	b.n	8005eca <aci_gap_set_authentication_requirement+0x146>
  return status;
 8005ec4:	f107 030f 	add.w	r3, r7, #15
 8005ec8:	781b      	ldrb	r3, [r3, #0]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bdb0      	pop	{r4, r5, r7, pc}

08005ed4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b0cd      	sub	sp, #308	; 0x134
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	463a      	mov	r2, r7
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	1dfb      	adds	r3, r7, #7
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	1dbb      	adds	r3, r7, #6
 8005eec:	4602      	mov	r2, r0
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	1d7b      	adds	r3, r7, #5
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8005ef6:	f107 0310 	add.w	r3, r7, #16
 8005efa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005efe:	f107 0308 	add.w	r3, r7, #8
 8005f02:	2207      	movs	r2, #7
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 ff78 	bl	8006dfc <Osal_MemSet>
  int index_input = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8005f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f16:	1dfa      	adds	r2, r7, #7
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f20:	3301      	adds	r3, #1
 8005f22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f2a:	1dba      	adds	r2, r7, #6
 8005f2c:	7812      	ldrb	r2, [r2, #0]
 8005f2e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005f30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f34:	3301      	adds	r3, #1
 8005f36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8005f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f3e:	1d7a      	adds	r2, r7, #5
 8005f40:	7812      	ldrb	r2, [r2, #0]
 8005f42:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005f44:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f48:	3301      	adds	r3, #1
 8005f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f52:	2218      	movs	r2, #24
 8005f54:	2100      	movs	r1, #0
 8005f56:	4618      	mov	r0, r3
 8005f58:	f000 ff50 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f5c:	233f      	movs	r3, #63	; 0x3f
 8005f5e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8005f62:	238a      	movs	r3, #138	; 0x8a
 8005f64:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005f68:	f107 0310 	add.w	r3, r7, #16
 8005f6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8005f78:	f107 0308 	add.w	r3, r7, #8
 8005f7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8005f80:	2307      	movs	r3, #7
 8005f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fdf9 	bl	8006b84 <hci_send_req>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	da01      	bge.n	8005f9c <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8005f98:	23ff      	movs	r3, #255	; 0xff
 8005f9a:	e021      	b.n	8005fe0 <aci_gap_init+0x10c>
  if ( resp.Status )
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <aci_gap_init+0xda>
    return resp.Status;
 8005fa6:	f107 0308 	add.w	r3, r7, #8
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	e018      	b.n	8005fe0 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	463b      	mov	r3, r7
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8005fbe:	f107 0308 	add.w	r3, r7, #8
 8005fc2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005fcc:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8005fce:	f107 0308 	add.w	r3, r7, #8
 8005fd2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005fdc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd90      	pop	{r4, r7, pc}

08005fea <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b0cc      	sub	sp, #304	; 0x130
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	463b      	mov	r3, r7
 8005ff4:	6019      	str	r1, [r3, #0]
 8005ff6:	1dfb      	adds	r3, r7, #7
 8005ff8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005ffa:	f107 0310 	add.w	r3, r7, #16
 8005ffe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006002:	f107 030f 	add.w	r3, r7, #15
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006014:	1dfa      	adds	r2, r7, #7
 8006016:	7812      	ldrb	r2, [r2, #0]
 8006018:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800601a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800601e:	3301      	adds	r3, #1
 8006020:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006024:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006028:	1c58      	adds	r0, r3, #1
 800602a:	1dfb      	adds	r3, r7, #7
 800602c:	781a      	ldrb	r2, [r3, #0]
 800602e:	463b      	mov	r3, r7
 8006030:	6819      	ldr	r1, [r3, #0]
 8006032:	f000 fed3 	bl	8006ddc <Osal_MemCpy>
  index_input += AdvDataLen;
 8006036:	1dfb      	adds	r3, r7, #7
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800603e:	4413      	add	r3, r2
 8006040:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006044:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006048:	2218      	movs	r2, #24
 800604a:	2100      	movs	r1, #0
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fed5 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006052:	233f      	movs	r3, #63	; 0x3f
 8006054:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8006058:	238e      	movs	r3, #142	; 0x8e
 800605a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800605e:	f107 0310 	add.w	r3, r7, #16
 8006062:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006066:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800606a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800606e:	f107 030f 	add.w	r3, r7, #15
 8006072:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006076:	2301      	movs	r3, #1
 8006078:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800607c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006080:	2100      	movs	r1, #0
 8006082:	4618      	mov	r0, r3
 8006084:	f000 fd7e 	bl	8006b84 <hci_send_req>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	da01      	bge.n	8006092 <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800608e:	23ff      	movs	r3, #255	; 0xff
 8006090:	e002      	b.n	8006098 <aci_gap_update_adv_data+0xae>
  return status;
 8006092:	f107 030f 	add.w	r3, r7, #15
 8006096:	781b      	ldrb	r3, [r3, #0]
}
 8006098:	4618      	mov	r0, r3
 800609a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b088      	sub	sp, #32
 80060a6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060ac:	f107 0308 	add.w	r3, r7, #8
 80060b0:	2218      	movs	r2, #24
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f000 fea1 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 80060ba:	233f      	movs	r3, #63	; 0x3f
 80060bc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80060be:	2392      	movs	r3, #146	; 0x92
 80060c0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80060c2:	1dfb      	adds	r3, r7, #7
 80060c4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80060c6:	2301      	movs	r3, #1
 80060c8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060ca:	f107 0308 	add.w	r3, r7, #8
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fd57 	bl	8006b84 <hci_send_req>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	da01      	bge.n	80060e0 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80060dc:	23ff      	movs	r3, #255	; 0xff
 80060de:	e000      	b.n	80060e2 <aci_gap_configure_whitelist+0x40>
  return status;
 80060e0:	79fb      	ldrb	r3, [r7, #7]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3720      	adds	r7, #32
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b0cc      	sub	sp, #304	; 0x130
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	4602      	mov	r2, r0
 80060f2:	1dbb      	adds	r3, r7, #6
 80060f4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 80060f6:	f107 0310 	add.w	r3, r7, #16
 80060fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80060fe:	f107 030f 	add.w	r3, r7, #15
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006106:	2300      	movs	r3, #0
 8006108:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800610c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006110:	1dba      	adds	r2, r7, #6
 8006112:	8812      	ldrh	r2, [r2, #0]
 8006114:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006116:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800611a:	3302      	adds	r3, #2
 800611c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006120:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006124:	2218      	movs	r2, #24
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fe67 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 800612e:	233f      	movs	r3, #63	; 0x3f
 8006130:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8006134:	2395      	movs	r3, #149	; 0x95
 8006136:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800613a:	f107 0310 	add.w	r3, r7, #16
 800613e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006142:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006146:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800614a:	f107 030f 	add.w	r3, r7, #15
 800614e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006152:	2301      	movs	r3, #1
 8006154:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006158:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fd10 	bl	8006b84 <hci_send_req>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	da01      	bge.n	800616e <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800616a:	23ff      	movs	r3, #255	; 0xff
 800616c:	e002      	b.n	8006174 <aci_gap_allow_rebond+0x8a>
  return status;
 800616e:	f107 030f 	add.w	r3, r7, #15
 8006172:	781b      	ldrb	r3, [r3, #0]
}
 8006174:	4618      	mov	r0, r3
 8006176:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b0cc      	sub	sp, #304	; 0x130
 8006182:	af00      	add	r7, sp, #0
 8006184:	4602      	mov	r2, r0
 8006186:	1dbb      	adds	r3, r7, #6
 8006188:	801a      	strh	r2, [r3, #0]
 800618a:	1d7b      	adds	r3, r7, #5
 800618c:	460a      	mov	r2, r1
 800618e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8006190:	f107 0310 	add.w	r3, r7, #16
 8006194:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006198:	f107 030f 	add.w	r3, r7, #15
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80061a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061aa:	1dba      	adds	r2, r7, #6
 80061ac:	8812      	ldrh	r2, [r2, #0]
 80061ae:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80061b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061b4:	3302      	adds	r3, #2
 80061b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	1d7a      	adds	r2, r7, #5
 80061c0:	7812      	ldrb	r2, [r2, #0]
 80061c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80061c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061c8:	3301      	adds	r3, #1
 80061ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80061ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061d2:	2218      	movs	r2, #24
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f000 fe10 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 80061dc:	233f      	movs	r3, #63	; 0x3f
 80061de:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80061e2:	23a5      	movs	r3, #165	; 0xa5
 80061e4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80061e8:	f107 0310 	add.w	r3, r7, #16
 80061ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80061f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80061f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80061f8:	f107 030f 	add.w	r3, r7, #15
 80061fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006200:	2301      	movs	r3, #1
 8006202:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006206:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f000 fcb9 	bl	8006b84 <hci_send_req>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	da01      	bge.n	800621c <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006218:	23ff      	movs	r3, #255	; 0xff
 800621a:	e002      	b.n	8006222 <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800621c:	f107 030f 	add.w	r3, r7, #15
 8006220:	781b      	ldrb	r3, [r3, #0]
}
 8006222:	4618      	mov	r0, r3
 8006224:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006232:	2300      	movs	r3, #0
 8006234:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006236:	f107 0308 	add.w	r3, r7, #8
 800623a:	2218      	movs	r2, #24
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f000 fddc 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006244:	233f      	movs	r3, #63	; 0x3f
 8006246:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006248:	f240 1301 	movw	r3, #257	; 0x101
 800624c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800624e:	1dfb      	adds	r3, r7, #7
 8006250:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006252:	2301      	movs	r3, #1
 8006254:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006256:	f107 0308 	add.w	r3, r7, #8
 800625a:	2100      	movs	r1, #0
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fc91 	bl	8006b84 <hci_send_req>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	da01      	bge.n	800626c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006268:	23ff      	movs	r3, #255	; 0xff
 800626a:	e000      	b.n	800626e <aci_gatt_init+0x42>
  return status;
 800626c:	79fb      	ldrb	r3, [r7, #7]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3720      	adds	r7, #32
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006276:	b590      	push	{r4, r7, lr}
 8006278:	b0cf      	sub	sp, #316	; 0x13c
 800627a:	af00      	add	r7, sp, #0
 800627c:	4604      	mov	r4, r0
 800627e:	4638      	mov	r0, r7
 8006280:	6001      	str	r1, [r0, #0]
 8006282:	4610      	mov	r0, r2
 8006284:	4619      	mov	r1, r3
 8006286:	1dfb      	adds	r3, r7, #7
 8006288:	4622      	mov	r2, r4
 800628a:	701a      	strb	r2, [r3, #0]
 800628c:	1dbb      	adds	r3, r7, #6
 800628e:	4602      	mov	r2, r0
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	1d7b      	adds	r3, r7, #5
 8006294:	460a      	mov	r2, r1
 8006296:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8006298:	f107 0310 	add.w	r3, r7, #16
 800629c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80062a0:	1dfb      	adds	r3, r7, #7
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d007      	beq.n	80062b8 <aci_gatt_add_service+0x42>
 80062a8:	1dfb      	adds	r3, r7, #7
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d101      	bne.n	80062b4 <aci_gatt_add_service+0x3e>
 80062b0:	2311      	movs	r3, #17
 80062b2:	e002      	b.n	80062ba <aci_gatt_add_service+0x44>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <aci_gatt_add_service+0x44>
 80062b8:	2303      	movs	r3, #3
 80062ba:	f107 0210 	add.w	r2, r7, #16
 80062be:	4413      	add	r3, r2
 80062c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80062c4:	f107 030c 	add.w	r3, r7, #12
 80062c8:	2203      	movs	r2, #3
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fd95 	bl	8006dfc <Osal_MemSet>
  int index_input = 0;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80062d8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80062dc:	1dfa      	adds	r2, r7, #7
 80062de:	7812      	ldrb	r2, [r2, #0]
 80062e0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80062e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80062e6:	3301      	adds	r3, #1
 80062e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80062ec:	1dfb      	adds	r3, r7, #7
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d002      	beq.n	80062fa <aci_gatt_add_service+0x84>
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d004      	beq.n	8006302 <aci_gatt_add_service+0x8c>
 80062f8:	e007      	b.n	800630a <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80062fa:	2302      	movs	r3, #2
 80062fc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006300:	e005      	b.n	800630e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8006302:	2310      	movs	r3, #16
 8006304:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8006308:	e001      	b.n	800630e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800630a:	2347      	movs	r3, #71	; 0x47
 800630c:	e05d      	b.n	80063ca <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800630e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006312:	1c58      	adds	r0, r3, #1
 8006314:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8006318:	463b      	mov	r3, r7
 800631a:	6819      	ldr	r1, [r3, #0]
 800631c:	f000 fd5e 	bl	8006ddc <Osal_MemCpy>
    index_input += size;
 8006320:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8006324:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006328:	4413      	add	r3, r2
 800632a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800632e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006332:	1dba      	adds	r2, r7, #6
 8006334:	7812      	ldrb	r2, [r2, #0]
 8006336:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800633c:	3301      	adds	r3, #1
 800633e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006342:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006346:	1d7a      	adds	r2, r7, #5
 8006348:	7812      	ldrb	r2, [r2, #0]
 800634a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800634c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006350:	3301      	adds	r3, #1
 8006352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006356:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800635a:	2218      	movs	r2, #24
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fd4c 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006364:	233f      	movs	r3, #63	; 0x3f
 8006366:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800636a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800636e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006372:	f107 0310 	add.w	r3, r7, #16
 8006376:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800637a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800637e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8006382:	f107 030c 	add.w	r3, r7, #12
 8006386:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800638a:	2303      	movs	r3, #3
 800638c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006390:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006394:	2100      	movs	r1, #0
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fbf4 	bl	8006b84 <hci_send_req>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da01      	bge.n	80063a6 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 80063a2:	23ff      	movs	r3, #255	; 0xff
 80063a4:	e011      	b.n	80063ca <aci_gatt_add_service+0x154>
  if ( resp.Status )
 80063a6:	f107 030c 	add.w	r3, r7, #12
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d003      	beq.n	80063b8 <aci_gatt_add_service+0x142>
    return resp.Status;
 80063b0:	f107 030c 	add.w	r3, r7, #12
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	e008      	b.n	80063ca <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 80063b8:	f107 030c 	add.w	r3, r7, #12
 80063bc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80063c6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd90      	pop	{r4, r7, pc}

080063d4 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80063d4:	b590      	push	{r4, r7, lr}
 80063d6:	b0d1      	sub	sp, #324	; 0x144
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4604      	mov	r4, r0
 80063dc:	4608      	mov	r0, r1
 80063de:	f107 0108 	add.w	r1, r7, #8
 80063e2:	600a      	str	r2, [r1, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	f107 030e 	add.w	r3, r7, #14
 80063ea:	4622      	mov	r2, r4
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	f107 030d 	add.w	r3, r7, #13
 80063f2:	4602      	mov	r2, r0
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	1dbb      	adds	r3, r7, #6
 80063f8:	460a      	mov	r2, r1
 80063fa:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80063fc:	f107 0318 	add.w	r3, r7, #24
 8006400:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006404:	f107 030d 	add.w	r3, r7, #13
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d008      	beq.n	8006420 <aci_gatt_add_char+0x4c>
 800640e:	f107 030d 	add.w	r3, r7, #13
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b02      	cmp	r3, #2
 8006416:	d101      	bne.n	800641c <aci_gatt_add_char+0x48>
 8006418:	2313      	movs	r3, #19
 800641a:	e002      	b.n	8006422 <aci_gatt_add_char+0x4e>
 800641c:	2303      	movs	r3, #3
 800641e:	e000      	b.n	8006422 <aci_gatt_add_char+0x4e>
 8006420:	2305      	movs	r3, #5
 8006422:	f107 0218 	add.w	r2, r7, #24
 8006426:	4413      	add	r3, r2
 8006428:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800642c:	f107 0314 	add.w	r3, r7, #20
 8006430:	2203      	movs	r2, #3
 8006432:	2100      	movs	r1, #0
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fce1 	bl	8006dfc <Osal_MemSet>
  int index_input = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8006440:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006444:	f107 020e 	add.w	r2, r7, #14
 8006448:	8812      	ldrh	r2, [r2, #0]
 800644a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800644c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006450:	3302      	adds	r3, #2
 8006452:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006456:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800645a:	f107 020d 	add.w	r2, r7, #13
 800645e:	7812      	ldrb	r2, [r2, #0]
 8006460:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006462:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006466:	3301      	adds	r3, #1
 8006468:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800646c:	f107 030d 	add.w	r3, r7, #13
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d002      	beq.n	800647c <aci_gatt_add_char+0xa8>
 8006476:	2b02      	cmp	r3, #2
 8006478:	d004      	beq.n	8006484 <aci_gatt_add_char+0xb0>
 800647a:	e007      	b.n	800648c <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800647c:	2302      	movs	r3, #2
 800647e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8006482:	e005      	b.n	8006490 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8006484:	2310      	movs	r3, #16
 8006486:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800648a:	e001      	b.n	8006490 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800648c:	2347      	movs	r3, #71	; 0x47
 800648e:	e086      	b.n	800659e <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006490:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8006494:	1cd8      	adds	r0, r3, #3
 8006496:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800649a:	f107 0308 	add.w	r3, r7, #8
 800649e:	6819      	ldr	r1, [r3, #0]
 80064a0:	f000 fc9c 	bl	8006ddc <Osal_MemCpy>
    index_input += size;
 80064a4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80064a8:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80064ac:	4413      	add	r3, r2
 80064ae:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80064b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064b6:	1dba      	adds	r2, r7, #6
 80064b8:	8812      	ldrh	r2, [r2, #0]
 80064ba:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80064bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064c0:	3302      	adds	r3, #2
 80064c2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80064c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064ca:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80064ce:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80064d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064d4:	3301      	adds	r3, #1
 80064d6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80064da:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064de:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80064e2:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80064e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064e8:	3301      	adds	r3, #1
 80064ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80064ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80064f2:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80064f6:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80064f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80064fc:	3301      	adds	r3, #1
 80064fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006502:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006506:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800650a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800650c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006510:	3301      	adds	r3, #1
 8006512:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006516:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800651a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800651e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006520:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006524:	3301      	adds	r3, #1
 8006526:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800652a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800652e:	2218      	movs	r2, #24
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fc62 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006538:	233f      	movs	r3, #63	; 0x3f
 800653a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800653e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006542:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006546:	f107 0318 	add.w	r3, r7, #24
 800654a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800654e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006552:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800655e:	2303      	movs	r3, #3
 8006560:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006564:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f000 fb0a 	bl	8006b84 <hci_send_req>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	da01      	bge.n	800657a <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8006576:	23ff      	movs	r3, #255	; 0xff
 8006578:	e011      	b.n	800659e <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800657a:	f107 0314 	add.w	r3, r7, #20
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8006584:	f107 0314 	add.w	r3, r7, #20
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	e008      	b.n	800659e <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800658c:	f107 0314 	add.w	r3, r7, #20
 8006590:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006594:	b29a      	uxth	r2, r3
 8006596:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800659a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd90      	pop	{r4, r7, pc}

080065a8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80065a8:	b5b0      	push	{r4, r5, r7, lr}
 80065aa:	b0cc      	sub	sp, #304	; 0x130
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	4605      	mov	r5, r0
 80065b0:	460c      	mov	r4, r1
 80065b2:	4610      	mov	r0, r2
 80065b4:	4619      	mov	r1, r3
 80065b6:	1dbb      	adds	r3, r7, #6
 80065b8:	462a      	mov	r2, r5
 80065ba:	801a      	strh	r2, [r3, #0]
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	4622      	mov	r2, r4
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	1cfb      	adds	r3, r7, #3
 80065c4:	4602      	mov	r2, r0
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	1cbb      	adds	r3, r7, #2
 80065ca:	460a      	mov	r2, r1
 80065cc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80065ce:	f107 0310 	add.w	r3, r7, #16
 80065d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80065d6:	f107 030f 	add.w	r3, r7, #15
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e8:	1dba      	adds	r2, r7, #6
 80065ea:	8812      	ldrh	r2, [r2, #0]
 80065ec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80065ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80065f2:	3302      	adds	r3, #2
 80065f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80065f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065fc:	1d3a      	adds	r2, r7, #4
 80065fe:	8812      	ldrh	r2, [r2, #0]
 8006600:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006602:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006606:	3302      	adds	r3, #2
 8006608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800660c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006610:	1cfa      	adds	r2, r7, #3
 8006612:	7812      	ldrb	r2, [r2, #0]
 8006614:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800661a:	3301      	adds	r3, #1
 800661c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006624:	1cba      	adds	r2, r7, #2
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800662a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800662e:	3301      	adds	r3, #1
 8006630:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006634:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006638:	1d98      	adds	r0, r3, #6
 800663a:	1cbb      	adds	r3, r7, #2
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006644:	f000 fbca 	bl	8006ddc <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006648:	1cbb      	adds	r3, r7, #2
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006650:	4413      	add	r3, r2
 8006652:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800665a:	2218      	movs	r2, #24
 800665c:	2100      	movs	r1, #0
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fbcc 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006664:	233f      	movs	r3, #63	; 0x3f
 8006666:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800666a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800666e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006672:	f107 0310 	add.w	r3, r7, #16
 8006676:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800667a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800667e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006682:	f107 030f 	add.w	r3, r7, #15
 8006686:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800668a:	2301      	movs	r3, #1
 800668c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006690:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006694:	2100      	movs	r1, #0
 8006696:	4618      	mov	r0, r3
 8006698:	f000 fa74 	bl	8006b84 <hci_send_req>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	da01      	bge.n	80066a6 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80066a2:	23ff      	movs	r3, #255	; 0xff
 80066a4:	e002      	b.n	80066ac <aci_gatt_update_char_value+0x104>
  return status;
 80066a6:	f107 030f 	add.w	r3, r7, #15
 80066aa:	781b      	ldrb	r3, [r3, #0]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bdb0      	pop	{r4, r5, r7, pc}

080066b6 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b0cc      	sub	sp, #304	; 0x130
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	463b      	mov	r3, r7
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	1dfb      	adds	r3, r7, #7
 80066c2:	4602      	mov	r2, r0
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	1dbb      	adds	r3, r7, #6
 80066c8:	460a      	mov	r2, r1
 80066ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80066cc:	f107 0310 	add.w	r3, r7, #16
 80066d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80066d4:	f107 030f 	add.w	r3, r7, #15
 80066d8:	2200      	movs	r2, #0
 80066da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80066dc:	2300      	movs	r3, #0
 80066de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80066e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066e6:	1dfa      	adds	r2, r7, #7
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80066ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80066f0:	3301      	adds	r3, #1
 80066f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80066f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066fa:	1dba      	adds	r2, r7, #6
 80066fc:	7812      	ldrb	r2, [r2, #0]
 80066fe:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006700:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006704:	3301      	adds	r3, #1
 8006706:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800670a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800670e:	1c98      	adds	r0, r3, #2
 8006710:	1dbb      	adds	r3, r7, #6
 8006712:	781a      	ldrb	r2, [r3, #0]
 8006714:	463b      	mov	r3, r7
 8006716:	6819      	ldr	r1, [r3, #0]
 8006718:	f000 fb60 	bl	8006ddc <Osal_MemCpy>
  index_input += Length;
 800671c:	1dbb      	adds	r3, r7, #6
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006724:	4413      	add	r3, r2
 8006726:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800672a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800672e:	2218      	movs	r2, #24
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fb62 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 8006738:	233f      	movs	r3, #63	; 0x3f
 800673a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800673e:	230c      	movs	r3, #12
 8006740:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006744:	f107 0310 	add.w	r3, r7, #16
 8006748:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800674c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006750:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006754:	f107 030f 	add.w	r3, r7, #15
 8006758:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800675c:	2301      	movs	r3, #1
 800675e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006762:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fa0b 	bl	8006b84 <hci_send_req>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	da01      	bge.n	8006778 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 8006774:	23ff      	movs	r3, #255	; 0xff
 8006776:	e002      	b.n	800677e <aci_hal_write_config_data+0xc8>
  return status;
 8006778:	f107 030f 	add.w	r3, r7, #15
 800677c:	781b      	ldrb	r3, [r3, #0]
}
 800677e:	4618      	mov	r0, r3
 8006780:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b0cc      	sub	sp, #304	; 0x130
 800678c:	af00      	add	r7, sp, #0
 800678e:	4602      	mov	r2, r0
 8006790:	1dfb      	adds	r3, r7, #7
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	1dbb      	adds	r3, r7, #6
 8006796:	460a      	mov	r2, r1
 8006798:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800679a:	f107 0310 	add.w	r3, r7, #16
 800679e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80067a2:	f107 030f 	add.w	r3, r7, #15
 80067a6:	2200      	movs	r2, #0
 80067a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80067aa:	2300      	movs	r3, #0
 80067ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80067b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067b4:	1dfa      	adds	r2, r7, #7
 80067b6:	7812      	ldrb	r2, [r2, #0]
 80067b8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80067ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067be:	3301      	adds	r3, #1
 80067c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80067c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067c8:	1dba      	adds	r2, r7, #6
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80067ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067d2:	3301      	adds	r3, #1
 80067d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80067d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067dc:	2218      	movs	r2, #24
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f000 fb0b 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 80067e6:	233f      	movs	r3, #63	; 0x3f
 80067e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80067ec:	230f      	movs	r3, #15
 80067ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80067f2:	f107 0310 	add.w	r3, r7, #16
 80067f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80067fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006802:	f107 030f 	add.w	r3, r7, #15
 8006806:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800680a:	2301      	movs	r3, #1
 800680c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006810:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f000 f9b4 	bl	8006b84 <hci_send_req>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	da01      	bge.n	8006826 <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 8006822:	23ff      	movs	r3, #255	; 0xff
 8006824:	e002      	b.n	800682c <aci_hal_set_tx_power_level+0xa4>
  return status;
 8006826:	f107 030f 	add.w	r3, r7, #15
 800682a:	781b      	ldrb	r3, [r3, #0]
}
 800682c:	4618      	mov	r0, r3
 800682e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b0cc      	sub	sp, #304	; 0x130
 800683a:	af00      	add	r7, sp, #0
 800683c:	4602      	mov	r2, r0
 800683e:	1dbb      	adds	r3, r7, #6
 8006840:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006842:	f107 0310 	add.w	r3, r7, #16
 8006846:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800684a:	f107 030f 	add.w	r3, r7, #15
 800684e:	2200      	movs	r2, #0
 8006850:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006852:	2300      	movs	r3, #0
 8006854:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8006858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800685c:	1dba      	adds	r2, r7, #6
 800685e:	8812      	ldrh	r2, [r2, #0]
 8006860:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006866:	3302      	adds	r3, #2
 8006868:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800686c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006870:	2218      	movs	r2, #24
 8006872:	2100      	movs	r1, #0
 8006874:	4618      	mov	r0, r3
 8006876:	f000 fac1 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x3f;
 800687a:	233f      	movs	r3, #63	; 0x3f
 800687c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8006880:	2318      	movs	r3, #24
 8006882:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006886:	f107 0310 	add.w	r3, r7, #16
 800688a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800688e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006892:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006896:	f107 030f 	add.w	r3, r7, #15
 800689a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800689e:	2301      	movs	r3, #1
 80068a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f96a 	bl	8006b84 <hci_send_req>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da01      	bge.n	80068ba <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 80068b6:	23ff      	movs	r3, #255	; 0xff
 80068b8:	e002      	b.n	80068c0 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 80068ba:	f107 030f 	add.w	r3, r7, #15
 80068be:	781b      	ldrb	r3, [r3, #0]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b088      	sub	sp, #32
 80068ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068d4:	f107 0308 	add.w	r3, r7, #8
 80068d8:	2218      	movs	r2, #24
 80068da:	2100      	movs	r1, #0
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 fa8d 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x03;
 80068e2:	2303      	movs	r3, #3
 80068e4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80068e6:	2303      	movs	r3, #3
 80068e8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80068ea:	1dfb      	adds	r3, r7, #7
 80068ec:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80068ee:	2301      	movs	r3, #1
 80068f0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 f943 	bl	8006b84 <hci_send_req>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	da01      	bge.n	8006908 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006904:	23ff      	movs	r3, #255	; 0xff
 8006906:	e000      	b.n	800690a <hci_reset+0x40>
  return status;
 8006908:	79fb      	ldrb	r3, [r7, #7]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3720      	adds	r7, #32
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b0ce      	sub	sp, #312	; 0x138
 8006916:	af00      	add	r7, sp, #0
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	6019      	str	r1, [r3, #0]
 800691e:	1d3b      	adds	r3, r7, #4
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	f107 030e 	add.w	r3, r7, #14
 8006926:	4602      	mov	r2, r0
 8006928:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800692a:	f107 0318 	add.w	r3, r7, #24
 800692e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006932:	f107 0310 	add.w	r3, r7, #16
 8006936:	2205      	movs	r2, #5
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f000 fa5e 	bl	8006dfc <Osal_MemSet>
  int index_input = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8006946:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800694a:	f107 020e 	add.w	r2, r7, #14
 800694e:	8812      	ldrh	r2, [r2, #0]
 8006950:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006952:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006956:	3302      	adds	r3, #2
 8006958:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800695c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006960:	2218      	movs	r2, #24
 8006962:	2100      	movs	r1, #0
 8006964:	4618      	mov	r0, r3
 8006966:	f000 fa49 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x08;
 800696a:	2308      	movs	r3, #8
 800696c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8006970:	2330      	movs	r3, #48	; 0x30
 8006972:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8006976:	f107 0318 	add.w	r3, r7, #24
 800697a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800697e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006982:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8006986:	f107 0310 	add.w	r3, r7, #16
 800698a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800698e:	2305      	movs	r3, #5
 8006990:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006994:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8006998:	2100      	movs	r1, #0
 800699a:	4618      	mov	r0, r3
 800699c:	f000 f8f2 	bl	8006b84 <hci_send_req>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	da01      	bge.n	80069aa <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 80069a6:	23ff      	movs	r3, #255	; 0xff
 80069a8:	e016      	b.n	80069d8 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 80069aa:	f107 0310 	add.w	r3, r7, #16
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <hci_le_read_phy+0xaa>
    return resp.Status;
 80069b4:	f107 0310 	add.w	r3, r7, #16
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	e00d      	b.n	80069d8 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 80069bc:	f107 0310 	add.w	r3, r7, #16
 80069c0:	78da      	ldrb	r2, [r3, #3]
 80069c2:	f107 0308 	add.w	r3, r7, #8
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80069ca:	f107 0310 	add.w	r3, r7, #16
 80069ce:	791a      	ldrb	r2, [r3, #4]
 80069d0:	1d3b      	adds	r3, r7, #4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80069e2:	b590      	push	{r4, r7, lr}
 80069e4:	b0cd      	sub	sp, #308	; 0x134
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4604      	mov	r4, r0
 80069ea:	4608      	mov	r0, r1
 80069ec:	4611      	mov	r1, r2
 80069ee:	1dfb      	adds	r3, r7, #7
 80069f0:	4622      	mov	r2, r4
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	1dbb      	adds	r3, r7, #6
 80069f6:	4602      	mov	r2, r0
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	1d7b      	adds	r3, r7, #5
 80069fc:	460a      	mov	r2, r1
 80069fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006a00:	f107 0310 	add.w	r3, r7, #16
 8006a04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8006a08:	f107 030f 	add.w	r3, r7, #15
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1a:	1dfa      	adds	r2, r7, #7
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a24:	3301      	adds	r3, #1
 8006a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006a2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a2e:	1dba      	adds	r2, r7, #6
 8006a30:	7812      	ldrb	r2, [r2, #0]
 8006a32:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a38:	3301      	adds	r3, #1
 8006a3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8006a3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a42:	1d7a      	adds	r2, r7, #5
 8006a44:	7812      	ldrb	r2, [r2, #0]
 8006a46:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a56:	2218      	movs	r2, #24
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 f9ce 	bl	8006dfc <Osal_MemSet>
  rq.ogf = 0x08;
 8006a60:	2308      	movs	r3, #8
 8006a62:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8006a66:	2331      	movs	r3, #49	; 0x31
 8006a68:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8006a6c:	f107 0310 	add.w	r3, r7, #16
 8006a70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8006a74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006a78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8006a7c:	f107 030f 	add.w	r3, r7, #15
 8006a80:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8006a84:	2301      	movs	r3, #1
 8006a86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 f877 	bl	8006b84 <hci_send_req>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	da01      	bge.n	8006aa0 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006a9c:	23ff      	movs	r3, #255	; 0xff
 8006a9e:	e002      	b.n	8006aa6 <hci_le_set_default_phy+0xc4>
  return status;
 8006aa0:	f107 030f 	add.w	r3, r7, #15
 8006aa4:	781b      	ldrb	r3, [r3, #0]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd90      	pop	{r4, r7, pc}

08006ab0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <hci_init+0x30>)
 8006ac0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8006ac2:	4a08      	ldr	r2, [pc, #32]	; (8006ae4 <hci_init+0x34>)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006ac8:	4806      	ldr	r0, [pc, #24]	; (8006ae4 <hci_init+0x34>)
 8006aca:	f000 f973 	bl	8006db4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 f8d4 	bl	8006c80 <TlInit>

  return;
 8006ad8:	bf00      	nop
}
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	200002e8 	.word	0x200002e8
 8006ae4:	200002c0 	.word	0x200002c0

08006ae8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006aee:	4822      	ldr	r0, [pc, #136]	; (8006b78 <hci_user_evt_proc+0x90>)
 8006af0:	f000 fcb6 	bl	8007460 <LST_is_empty>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d12b      	bne.n	8006b52 <hci_user_evt_proc+0x6a>
 8006afa:	4b20      	ldr	r3, [pc, #128]	; (8006b7c <hci_user_evt_proc+0x94>)
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d027      	beq.n	8006b52 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006b02:	f107 030c 	add.w	r3, r7, #12
 8006b06:	4619      	mov	r1, r3
 8006b08:	481b      	ldr	r0, [pc, #108]	; (8006b78 <hci_user_evt_proc+0x90>)
 8006b0a:	f000 fd38 	bl	800757e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006b0e:	4b1c      	ldr	r3, [pc, #112]	; (8006b80 <hci_user_evt_proc+0x98>)
 8006b10:	69db      	ldr	r3, [r3, #28]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006b1e:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <hci_user_evt_proc+0x98>)
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	1d3a      	adds	r2, r7, #4
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006b28:	793a      	ldrb	r2, [r7, #4]
 8006b2a:	4b14      	ldr	r3, [pc, #80]	; (8006b7c <hci_user_evt_proc+0x94>)
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	e002      	b.n	8006b36 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006b30:	4b12      	ldr	r3, [pc, #72]	; (8006b7c <hci_user_evt_proc+0x94>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <hci_user_evt_proc+0x94>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d004      	beq.n	8006b48 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 ffd3 	bl	8007aec <TL_MM_EvtDone>
 8006b46:	e004      	b.n	8006b52 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	480a      	ldr	r0, [pc, #40]	; (8006b78 <hci_user_evt_proc+0x90>)
 8006b4e:	f000 fca9 	bl	80074a4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006b52:	4809      	ldr	r0, [pc, #36]	; (8006b78 <hci_user_evt_proc+0x90>)
 8006b54:	f000 fc84 	bl	8007460 <LST_is_empty>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d107      	bne.n	8006b6e <hci_user_evt_proc+0x86>
 8006b5e:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <hci_user_evt_proc+0x94>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006b66:	4804      	ldr	r0, [pc, #16]	; (8006b78 <hci_user_evt_proc+0x90>)
 8006b68:	f001 fbbf 	bl	80082ea <hci_notify_asynch_evt>
  }


  return;
 8006b6c:	bf00      	nop
 8006b6e:	bf00      	nop
}
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	200001ac 	.word	0x200001ac
 8006b7c:	200001b8 	.word	0x200001b8
 8006b80:	200002c0 	.word	0x200002c0

08006b84 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006b90:	2000      	movs	r0, #0
 8006b92:	f000 f8cb 	bl	8006d2c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8006b96:	2300      	movs	r3, #0
 8006b98:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	885b      	ldrh	r3, [r3, #2]
 8006b9e:	b21b      	sxth	r3, r3
 8006ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ba4:	b21a      	sxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	029b      	lsls	r3, r3, #10
 8006bac:	b21b      	sxth	r3, r3
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	b21b      	sxth	r3, r3
 8006bb2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	b2d9      	uxtb	r1, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	8bbb      	ldrh	r3, [r7, #28]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f88d 	bl	8006ce0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006bc6:	e04e      	b.n	8006c66 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006bc8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8006bcc:	f001 fba4 	bl	8008318 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006bd0:	e043      	b.n	8006c5a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006bd2:	f107 030c 	add.w	r3, r7, #12
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	4828      	ldr	r0, [pc, #160]	; (8006c7c <hci_send_req+0xf8>)
 8006bda:	f000 fcd0 	bl	800757e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	7a5b      	ldrb	r3, [r3, #9]
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	d114      	bne.n	8006c10 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	330b      	adds	r3, #11
 8006bea:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	885b      	ldrh	r3, [r3, #2]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8bba      	ldrh	r2, [r7, #28]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d104      	bne.n	8006c02 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	7812      	ldrb	r2, [r2, #0]
 8006c00:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	785b      	ldrb	r3, [r3, #1]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d027      	beq.n	8006c5a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	77fb      	strb	r3, [r7, #31]
 8006c0e:	e024      	b.n	8006c5a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	330b      	adds	r3, #11
 8006c14:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	8bba      	ldrh	r2, [r7, #28]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d114      	bne.n	8006c4e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	7a9b      	ldrb	r3, [r3, #10]
 8006c28:	3b03      	subs	r3, #3
 8006c2a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	695a      	ldr	r2, [r3, #20]
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	bfa8      	it	ge
 8006c36:	461a      	movge	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6918      	ldr	r0, [r3, #16]
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	1cd9      	adds	r1, r3, #3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f002 f997 	bl	8008f7c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006c56:	2301      	movs	r3, #1
 8006c58:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8006c5a:	4808      	ldr	r0, [pc, #32]	; (8006c7c <hci_send_req+0xf8>)
 8006c5c:	f000 fc00 	bl	8007460 <LST_is_empty>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0b5      	beq.n	8006bd2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006c66:	7ffb      	ldrb	r3, [r7, #31]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0ad      	beq.n	8006bc8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	f000 f85d 	bl	8006d2c <NotifyCmdStatus>

  return 0;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	200002e0 	.word	0x200002e0

08006c80 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006c88:	480f      	ldr	r0, [pc, #60]	; (8006cc8 <TlInit+0x48>)
 8006c8a:	f000 fbd9 	bl	8007440 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006c8e:	4a0f      	ldr	r2, [pc, #60]	; (8006ccc <TlInit+0x4c>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006c94:	480e      	ldr	r0, [pc, #56]	; (8006cd0 <TlInit+0x50>)
 8006c96:	f000 fbd3 	bl	8007440 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006c9a:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <TlInit+0x54>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <TlInit+0x58>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00a      	beq.n	8006cbe <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <TlInit+0x5c>)
 8006cae:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <TlInit+0x58>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f107 0208 	add.w	r2, r7, #8
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4798      	blx	r3
  }

  return;
 8006cbc:	bf00      	nop
 8006cbe:	bf00      	nop
}
 8006cc0:	3718      	adds	r7, #24
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	200002e0 	.word	0x200002e0
 8006ccc:	200001b4 	.word	0x200001b4
 8006cd0:	200001ac 	.word	0x200001ac
 8006cd4:	200001b8 	.word	0x200001b8
 8006cd8:	200002c0 	.word	0x200002c0
 8006cdc:	08006d6d 	.word	0x08006d6d

08006ce0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	603a      	str	r2, [r7, #0]
 8006cea:	80fb      	strh	r3, [r7, #6]
 8006cec:	460b      	mov	r3, r1
 8006cee:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006cf0:	4b0c      	ldr	r3, [pc, #48]	; (8006d24 <SendCmd+0x44>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	88fa      	ldrh	r2, [r7, #6]
 8006cf6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006cfa:	4b0a      	ldr	r3, [pc, #40]	; (8006d24 <SendCmd+0x44>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	797a      	ldrb	r2, [r7, #5]
 8006d00:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006d02:	4b08      	ldr	r3, [pc, #32]	; (8006d24 <SendCmd+0x44>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	330c      	adds	r3, #12
 8006d08:	797a      	ldrb	r2, [r7, #5]
 8006d0a:	6839      	ldr	r1, [r7, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f002 f935 	bl	8008f7c <memcpy>

  hciContext.io.Send(0,0);
 8006d12:	4b05      	ldr	r3, [pc, #20]	; (8006d28 <SendCmd+0x48>)
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2100      	movs	r1, #0
 8006d18:	2000      	movs	r0, #0
 8006d1a:	4798      	blx	r3

  return;
 8006d1c:	bf00      	nop
}
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	200001b4 	.word	0x200001b4
 8006d28:	200002c0 	.word	0x200002c0

08006d2c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d108      	bne.n	8006d4e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <NotifyCmdStatus+0x3c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00d      	beq.n	8006d60 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006d44:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <NotifyCmdStatus+0x3c>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006d4c:	e008      	b.n	8006d60 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <NotifyCmdStatus+0x3c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d004      	beq.n	8006d60 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006d56:	4b04      	ldr	r3, [pc, #16]	; (8006d68 <NotifyCmdStatus+0x3c>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2001      	movs	r0, #1
 8006d5c:	4798      	blx	r3
  return;
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
}
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200002e8 	.word	0x200002e8

08006d6c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7a5b      	ldrb	r3, [r3, #9]
 8006d78:	2b0f      	cmp	r3, #15
 8006d7a:	d003      	beq.n	8006d84 <TlEvtReceived+0x18>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	7a5b      	ldrb	r3, [r3, #9]
 8006d80:	2b0e      	cmp	r3, #14
 8006d82:	d107      	bne.n	8006d94 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	4809      	ldr	r0, [pc, #36]	; (8006dac <TlEvtReceived+0x40>)
 8006d88:	f000 fbb2 	bl	80074f0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f001 fab8 	bl	8008302 <hci_cmd_resp_release>
 8006d92:	e006      	b.n	8006da2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4806      	ldr	r0, [pc, #24]	; (8006db0 <TlEvtReceived+0x44>)
 8006d98:	f000 fbaa 	bl	80074f0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006d9c:	4804      	ldr	r0, [pc, #16]	; (8006db0 <TlEvtReceived+0x44>)
 8006d9e:	f001 faa4 	bl	80082ea <hci_notify_asynch_evt>
  }

  return;
 8006da2:	bf00      	nop
}
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	200002e0 	.word	0x200002e0
 8006db0:	200001ac 	.word	0x200001ac

08006db4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a05      	ldr	r2, [pc, #20]	; (8006dd4 <hci_register_io_bus+0x20>)
 8006dc0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <hci_register_io_bus+0x24>)
 8006dc6:	611a      	str	r2, [r3, #16]

  return;
 8006dc8:	bf00      	nop
}
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	08007865 	.word	0x08007865
 8006dd8:	080078cd 	.word	0x080078cd

08006ddc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f002 f8c5 	bl	8008f7c <memcpy>
 8006df2:	4603      	mov	r3, r0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f002 f8c3 	bl	8008f98 <memset>
 8006e12:	4603      	mov	r3, r0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	4603      	mov	r3, r0
 8006e24:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006e26:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <OTP_Read+0x48>)
 8006e28:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006e2a:	e002      	b.n	8006e32 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3b08      	subs	r3, #8
 8006e30:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3307      	adds	r3, #7
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	79fa      	ldrb	r2, [r7, #7]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d003      	beq.n	8006e46 <OTP_Read+0x2a>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4a09      	ldr	r2, [pc, #36]	; (8006e68 <OTP_Read+0x4c>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d1f2      	bne.n	8006e2c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3307      	adds	r3, #7
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	79fa      	ldrb	r2, [r7, #7]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d001      	beq.n	8006e56 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006e52:	2300      	movs	r3, #0
 8006e54:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006e56:	68fb      	ldr	r3, [r7, #12]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	1fff73f8 	.word	0x1fff73f8
 8006e68:	1fff7000 	.word	0x1fff7000

08006e6c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08a      	sub	sp, #40	; 0x28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8006e74:	2300      	movs	r3, #0
 8006e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2bff      	cmp	r3, #255	; 0xff
 8006e86:	d165      	bne.n	8006f54 <PeerToPeer_Event_Handler+0xe8>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	3302      	adds	r3, #2
 8006e8c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	881b      	ldrh	r3, [r3, #0]
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	f640 4301 	movw	r3, #3073	; 0xc01
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d156      	bne.n	8006f4c <PeerToPeer_Event_Handler+0xe0>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	885b      	ldrh	r3, [r3, #2]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4b2d      	ldr	r3, [pc, #180]	; (8006f64 <PeerToPeer_Event_Handler+0xf8>)
 8006eae:	889b      	ldrh	r3, [r3, #4]
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d118      	bne.n	8006ee8 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	7a1b      	ldrb	r3, [r3, #8]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d007      	beq.n	8006ed8 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006ecc:	f107 0308 	add.w	r3, r7, #8
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fa63 	bl	800839c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8006ed6:	e03b      	b.n	8006f50 <PeerToPeer_Event_Handler+0xe4>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8006edc:	f107 0308 	add.w	r3, r7, #8
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 fa5b 	bl	800839c <P2PS_STM_App_Notification>
        break;
 8006ee6:	e033      	b.n	8006f50 <PeerToPeer_Event_Handler+0xe4>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PReadServerToClientCharHdle + 1)) {
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	885b      	ldrh	r3, [r3, #2]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	4b1c      	ldr	r3, [pc, #112]	; (8006f64 <PeerToPeer_Event_Handler+0xf8>)
 8006ef2:	88db      	ldrh	r3, [r3, #6]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d10f      	bne.n	8006f1a <PeerToPeer_Event_Handler+0xae>
            	Notification.P2P_Evt_Opcode = P2PS_STM_READ_EVT;
 8006efa:	2302      	movs	r3, #2
 8006efc:	723b      	strb	r3, [r7, #8]
            	Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	88db      	ldrh	r3, [r3, #6]
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	743b      	strb	r3, [r7, #16]
            	Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	60fb      	str	r3, [r7, #12]
            	P2PS_STM_App_Notification(&Notification);
 8006f0e:	f107 0308 	add.w	r3, r7, #8
 8006f12:	4618      	mov	r0, r3
 8006f14:	f001 fa42 	bl	800839c <P2PS_STM_App_Notification>
        break;
 8006f18:	e01a      	b.n	8006f50 <PeerToPeer_Event_Handler+0xe4>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <PeerToPeer_Event_Handler+0xf8>)
 8006f24:	885b      	ldrh	r3, [r3, #2]
 8006f26:	3301      	adds	r3, #1
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d111      	bne.n	8006f50 <PeerToPeer_Event_Handler+0xe4>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	88db      	ldrh	r3, [r3, #6]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8006f40:	f107 0308 	add.w	r3, r7, #8
 8006f44:	4618      	mov	r0, r3
 8006f46:	f001 fa29 	bl	800839c <P2PS_STM_App_Notification>
        break;
 8006f4a:	e001      	b.n	8006f50 <PeerToPeer_Event_Handler+0xe4>

        default:
          break;
 8006f4c:	bf00      	nop
 8006f4e:	e002      	b.n	8006f56 <PeerToPeer_Event_Handler+0xea>
        break;
 8006f50:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006f52:	e000      	b.n	8006f56 <PeerToPeer_Event_Handler+0xea>

    default:
      break;
 8006f54:	bf00      	nop
  }

  return(return_value);
 8006f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3728      	adds	r7, #40	; 0x28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200001bc 	.word	0x200001bc

08006f68 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8006f6e:	4864      	ldr	r0, [pc, #400]	; (8007100 <P2PS_STM_Init+0x198>)
 8006f70:	f000 fbca 	bl	8007708 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8006f74:	238f      	movs	r3, #143	; 0x8f
 8006f76:	703b      	strb	r3, [r7, #0]
 8006f78:	23e5      	movs	r3, #229	; 0xe5
 8006f7a:	707b      	strb	r3, [r7, #1]
 8006f7c:	23b3      	movs	r3, #179	; 0xb3
 8006f7e:	70bb      	strb	r3, [r7, #2]
 8006f80:	23d5      	movs	r3, #213	; 0xd5
 8006f82:	70fb      	strb	r3, [r7, #3]
 8006f84:	232e      	movs	r3, #46	; 0x2e
 8006f86:	713b      	strb	r3, [r7, #4]
 8006f88:	237f      	movs	r3, #127	; 0x7f
 8006f8a:	717b      	strb	r3, [r7, #5]
 8006f8c:	234a      	movs	r3, #74	; 0x4a
 8006f8e:	71bb      	strb	r3, [r7, #6]
 8006f90:	2398      	movs	r3, #152	; 0x98
 8006f92:	71fb      	strb	r3, [r7, #7]
 8006f94:	232a      	movs	r3, #42	; 0x2a
 8006f96:	723b      	strb	r3, [r7, #8]
 8006f98:	2348      	movs	r3, #72	; 0x48
 8006f9a:	727b      	strb	r3, [r7, #9]
 8006f9c:	237a      	movs	r3, #122	; 0x7a
 8006f9e:	72bb      	strb	r3, [r7, #10]
 8006fa0:	23cc      	movs	r3, #204	; 0xcc
 8006fa2:	72fb      	strb	r3, [r7, #11]
 8006fa4:	2340      	movs	r3, #64	; 0x40
 8006fa6:	733b      	strb	r3, [r7, #12]
 8006fa8:	23fe      	movs	r3, #254	; 0xfe
 8006faa:	737b      	strb	r3, [r7, #13]
 8006fac:	2300      	movs	r3, #0
 8006fae:	73bb      	strb	r3, [r7, #14]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8006fb4:	4639      	mov	r1, r7
 8006fb6:	4b53      	ldr	r3, [pc, #332]	; (8007104 <P2PS_STM_Init+0x19c>)
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	2308      	movs	r3, #8
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	2002      	movs	r0, #2
 8006fc0:	f7ff f959 	bl	8006276 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8006fc4:	2319      	movs	r3, #25
 8006fc6:	703b      	strb	r3, [r7, #0]
 8006fc8:	23ed      	movs	r3, #237	; 0xed
 8006fca:	707b      	strb	r3, [r7, #1]
 8006fcc:	2382      	movs	r3, #130	; 0x82
 8006fce:	70bb      	strb	r3, [r7, #2]
 8006fd0:	23ae      	movs	r3, #174	; 0xae
 8006fd2:	70fb      	strb	r3, [r7, #3]
 8006fd4:	23ed      	movs	r3, #237	; 0xed
 8006fd6:	713b      	strb	r3, [r7, #4]
 8006fd8:	2321      	movs	r3, #33	; 0x21
 8006fda:	717b      	strb	r3, [r7, #5]
 8006fdc:	234c      	movs	r3, #76	; 0x4c
 8006fde:	71bb      	strb	r3, [r7, #6]
 8006fe0:	239d      	movs	r3, #157	; 0x9d
 8006fe2:	71fb      	strb	r3, [r7, #7]
 8006fe4:	2341      	movs	r3, #65	; 0x41
 8006fe6:	723b      	strb	r3, [r7, #8]
 8006fe8:	2345      	movs	r3, #69	; 0x45
 8006fea:	727b      	strb	r3, [r7, #9]
 8006fec:	2322      	movs	r3, #34	; 0x22
 8006fee:	72bb      	strb	r3, [r7, #10]
 8006ff0:	238e      	movs	r3, #142	; 0x8e
 8006ff2:	72fb      	strb	r3, [r7, #11]
 8006ff4:	2341      	movs	r3, #65	; 0x41
 8006ff6:	733b      	strb	r3, [r7, #12]
 8006ff8:	23fe      	movs	r3, #254	; 0xfe
 8006ffa:	737b      	strb	r3, [r7, #13]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73bb      	strb	r3, [r7, #14]
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007004:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <P2PS_STM_Init+0x19c>)
 8007006:	8818      	ldrh	r0, [r3, #0]
 8007008:	463a      	mov	r2, r7
 800700a:	4b3f      	ldr	r3, [pc, #252]	; (8007108 <P2PS_STM_Init+0x1a0>)
 800700c:	9305      	str	r3, [sp, #20]
 800700e:	2301      	movs	r3, #1
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	230a      	movs	r3, #10
 8007014:	9303      	str	r3, [sp, #12]
 8007016:	2301      	movs	r3, #1
 8007018:	9302      	str	r3, [sp, #8]
 800701a:	2300      	movs	r3, #0
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	2306      	movs	r3, #6
 8007020:	9300      	str	r3, [sp, #0]
 8007022:	2302      	movs	r3, #2
 8007024:	2102      	movs	r1, #2
 8007026:	f7ff f9d5 	bl	80063d4 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800702a:	2319      	movs	r3, #25
 800702c:	703b      	strb	r3, [r7, #0]
 800702e:	23ed      	movs	r3, #237	; 0xed
 8007030:	707b      	strb	r3, [r7, #1]
 8007032:	2382      	movs	r3, #130	; 0x82
 8007034:	70bb      	strb	r3, [r7, #2]
 8007036:	23ae      	movs	r3, #174	; 0xae
 8007038:	70fb      	strb	r3, [r7, #3]
 800703a:	23ed      	movs	r3, #237	; 0xed
 800703c:	713b      	strb	r3, [r7, #4]
 800703e:	2321      	movs	r3, #33	; 0x21
 8007040:	717b      	strb	r3, [r7, #5]
 8007042:	234c      	movs	r3, #76	; 0x4c
 8007044:	71bb      	strb	r3, [r7, #6]
 8007046:	239d      	movs	r3, #157	; 0x9d
 8007048:	71fb      	strb	r3, [r7, #7]
 800704a:	2341      	movs	r3, #65	; 0x41
 800704c:	723b      	strb	r3, [r7, #8]
 800704e:	2345      	movs	r3, #69	; 0x45
 8007050:	727b      	strb	r3, [r7, #9]
 8007052:	2322      	movs	r3, #34	; 0x22
 8007054:	72bb      	strb	r3, [r7, #10]
 8007056:	238e      	movs	r3, #142	; 0x8e
 8007058:	72fb      	strb	r3, [r7, #11]
 800705a:	2342      	movs	r3, #66	; 0x42
 800705c:	733b      	strb	r3, [r7, #12]
 800705e:	23fe      	movs	r3, #254	; 0xfe
 8007060:	737b      	strb	r3, [r7, #13]
 8007062:	2300      	movs	r3, #0
 8007064:	73bb      	strb	r3, [r7, #14]
 8007066:	2300      	movs	r3, #0
 8007068:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800706a:	4b26      	ldr	r3, [pc, #152]	; (8007104 <P2PS_STM_Init+0x19c>)
 800706c:	8818      	ldrh	r0, [r3, #0]
 800706e:	463a      	mov	r2, r7
 8007070:	4b26      	ldr	r3, [pc, #152]	; (800710c <P2PS_STM_Init+0x1a4>)
 8007072:	9305      	str	r3, [sp, #20]
 8007074:	2301      	movs	r3, #1
 8007076:	9304      	str	r3, [sp, #16]
 8007078:	230a      	movs	r3, #10
 800707a:	9303      	str	r3, [sp, #12]
 800707c:	2301      	movs	r3, #1
 800707e:	9302      	str	r3, [sp, #8]
 8007080:	2300      	movs	r3, #0
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	2310      	movs	r3, #16
 8007086:	9300      	str	r3, [sp, #0]
 8007088:	2304      	movs	r3, #4
 800708a:	2102      	movs	r1, #2
 800708c:	f7ff f9a2 	bl	80063d4 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PNotifyServerToClientCharHdle));

    /**
	 *   Add Dummy Data Characteristic
	 */
	COPY_P2P_READ_UUID(uuid16.Char_UUID_128);
 8007090:	2319      	movs	r3, #25
 8007092:	703b      	strb	r3, [r7, #0]
 8007094:	23ed      	movs	r3, #237	; 0xed
 8007096:	707b      	strb	r3, [r7, #1]
 8007098:	2382      	movs	r3, #130	; 0x82
 800709a:	70bb      	strb	r3, [r7, #2]
 800709c:	23ae      	movs	r3, #174	; 0xae
 800709e:	70fb      	strb	r3, [r7, #3]
 80070a0:	23ed      	movs	r3, #237	; 0xed
 80070a2:	713b      	strb	r3, [r7, #4]
 80070a4:	2321      	movs	r3, #33	; 0x21
 80070a6:	717b      	strb	r3, [r7, #5]
 80070a8:	234c      	movs	r3, #76	; 0x4c
 80070aa:	71bb      	strb	r3, [r7, #6]
 80070ac:	239d      	movs	r3, #157	; 0x9d
 80070ae:	71fb      	strb	r3, [r7, #7]
 80070b0:	2341      	movs	r3, #65	; 0x41
 80070b2:	723b      	strb	r3, [r7, #8]
 80070b4:	2345      	movs	r3, #69	; 0x45
 80070b6:	727b      	strb	r3, [r7, #9]
 80070b8:	2322      	movs	r3, #34	; 0x22
 80070ba:	72bb      	strb	r3, [r7, #10]
 80070bc:	238e      	movs	r3, #142	; 0x8e
 80070be:	72fb      	strb	r3, [r7, #11]
 80070c0:	2343      	movs	r3, #67	; 0x43
 80070c2:	733b      	strb	r3, [r7, #12]
 80070c4:	23fe      	movs	r3, #254	; 0xfe
 80070c6:	737b      	strb	r3, [r7, #13]
 80070c8:	2300      	movs	r3, #0
 80070ca:	73bb      	strb	r3, [r7, #14]
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80070d0:	4b0c      	ldr	r3, [pc, #48]	; (8007104 <P2PS_STM_Init+0x19c>)
 80070d2:	8818      	ldrh	r0, [r3, #0]
 80070d4:	463a      	mov	r2, r7
 80070d6:	4b0e      	ldr	r3, [pc, #56]	; (8007110 <P2PS_STM_Init+0x1a8>)
 80070d8:	9305      	str	r3, [sp, #20]
 80070da:	2301      	movs	r3, #1
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	230a      	movs	r3, #10
 80070e0:	9303      	str	r3, [sp, #12]
 80070e2:	2301      	movs	r3, #1
 80070e4:	9302      	str	r3, [sp, #8]
 80070e6:	2300      	movs	r3, #0
 80070e8:	9301      	str	r3, [sp, #4]
 80070ea:	2306      	movs	r3, #6
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	2302      	movs	r3, #2
 80070f0:	2102      	movs	r1, #2
 80070f2:	f7ff f96f 	bl	80063d4 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80070f6:	bf00      	nop
}
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	08006e6d 	.word	0x08006e6d
 8007104:	200001bc 	.word	0x200001bc
 8007108:	200001be 	.word	0x200001be
 800710c:	200001c0 	.word	0x200001c0
 8007110:	200001c2 	.word	0x200001c2

08007114 <P2PS_STM_App_Update_Char>:
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 * changed to int32_t -may need to change back if timestamp is not working. Would then need to separate timestamp into bytes
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af02      	add	r7, sp, #8
 800711a:	4603      	mov	r3, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8007120:	2342      	movs	r3, #66	; 0x42
 8007122:	73fb      	strb	r3, [r7, #15]

  switch(UUID)
 8007124:	88fb      	ldrh	r3, [r7, #6]
 8007126:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800712a:	4293      	cmp	r3, r2
 800712c:	d004      	beq.n	8007138 <P2PS_STM_App_Update_Char+0x24>
 800712e:	f64f 6243 	movw	r2, #65091	; 0xfe43
 8007132:	4293      	cmp	r3, r2
 8007134:	d00d      	beq.n	8007152 <P2PS_STM_App_Update_Char+0x3e>
                                 (uint8_t *)  pPayload);

          break;

    default:
      break;
 8007136:	e019      	b.n	800716c <P2PS_STM_App_Update_Char+0x58>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <P2PS_STM_App_Update_Char+0x64>)
 800713a:	8818      	ldrh	r0, [r3, #0]
 800713c:	4b0e      	ldr	r3, [pc, #56]	; (8007178 <P2PS_STM_App_Update_Char+0x64>)
 800713e:	8899      	ldrh	r1, [r3, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	2304      	movs	r3, #4
 8007146:	2200      	movs	r2, #0
 8007148:	f7ff fa2e 	bl	80065a8 <aci_gatt_update_char_value>
 800714c:	4603      	mov	r3, r0
 800714e:	73fb      	strb	r3, [r7, #15]
      break;
 8007150:	e00c      	b.n	800716c <P2PS_STM_App_Update_Char+0x58>
         result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007152:	4b09      	ldr	r3, [pc, #36]	; (8007178 <P2PS_STM_App_Update_Char+0x64>)
 8007154:	8818      	ldrh	r0, [r3, #0]
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <P2PS_STM_App_Update_Char+0x64>)
 8007158:	88d9      	ldrh	r1, [r3, #6]
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	2302      	movs	r3, #2
 8007160:	2200      	movs	r2, #0
 8007162:	f7ff fa21 	bl	80065a8 <aci_gatt_update_char_value>
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]
          break;
 800716a:	bf00      	nop
  }

  return result;
 800716c:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	200001bc 	.word	0x200001bc

0800717c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007184:	f107 030c 	add.w	r3, r7, #12
 8007188:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	2124      	movs	r1, #36	; 0x24
 8007194:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007198:	f000 f888 	bl	80072ac <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	330b      	adds	r3, #11
 80071a0:	78db      	ldrb	r3, [r3, #3]
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b088      	sub	sp, #32
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80071b2:	f107 030c 	add.w	r3, r7, #12
 80071b6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	210f      	movs	r1, #15
 80071c2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80071c6:	f000 f871 	bl	80072ac <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	330b      	adds	r3, #11
 80071ce:	78db      	ldrb	r3, [r3, #3]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3720      	adds	r7, #32
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	4a08      	ldr	r2, [pc, #32]	; (8007208 <shci_init+0x30>)
 80071e8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80071ea:	4a08      	ldr	r2, [pc, #32]	; (800720c <shci_init+0x34>)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80071f0:	4806      	ldr	r0, [pc, #24]	; (800720c <shci_init+0x34>)
 80071f2:	f000 f911 	bl	8007418 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f894 	bl	8007328 <TlInit>

  return;
 8007200:	bf00      	nop
}
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	2000030c 	.word	0x2000030c
 800720c:	200002ec 	.word	0x200002ec

08007210 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007216:	4822      	ldr	r0, [pc, #136]	; (80072a0 <shci_user_evt_proc+0x90>)
 8007218:	f000 f922 	bl	8007460 <LST_is_empty>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d12b      	bne.n	800727a <shci_user_evt_proc+0x6a>
 8007222:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <shci_user_evt_proc+0x94>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d027      	beq.n	800727a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800722a:	f107 030c 	add.w	r3, r7, #12
 800722e:	4619      	mov	r1, r3
 8007230:	481b      	ldr	r0, [pc, #108]	; (80072a0 <shci_user_evt_proc+0x90>)
 8007232:	f000 f9a4 	bl	800757e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007236:	4b1c      	ldr	r3, [pc, #112]	; (80072a8 <shci_user_evt_proc+0x98>)
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00c      	beq.n	8007258 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007242:	2301      	movs	r3, #1
 8007244:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007246:	4b18      	ldr	r3, [pc, #96]	; (80072a8 <shci_user_evt_proc+0x98>)
 8007248:	69db      	ldr	r3, [r3, #28]
 800724a:	1d3a      	adds	r2, r7, #4
 800724c:	4610      	mov	r0, r2
 800724e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007250:	793a      	ldrb	r2, [r7, #4]
 8007252:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <shci_user_evt_proc+0x94>)
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	e002      	b.n	800725e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007258:	4b12      	ldr	r3, [pc, #72]	; (80072a4 <shci_user_evt_proc+0x94>)
 800725a:	2201      	movs	r2, #1
 800725c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800725e:	4b11      	ldr	r3, [pc, #68]	; (80072a4 <shci_user_evt_proc+0x94>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d004      	beq.n	8007270 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fc3f 	bl	8007aec <TL_MM_EvtDone>
 800726e:	e004      	b.n	800727a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	4619      	mov	r1, r3
 8007274:	480a      	ldr	r0, [pc, #40]	; (80072a0 <shci_user_evt_proc+0x90>)
 8007276:	f000 f915 	bl	80074a4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800727a:	4809      	ldr	r0, [pc, #36]	; (80072a0 <shci_user_evt_proc+0x90>)
 800727c:	f000 f8f0 	bl	8007460 <LST_is_empty>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d107      	bne.n	8007296 <shci_user_evt_proc+0x86>
 8007286:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <shci_user_evt_proc+0x94>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800728e:	4804      	ldr	r0, [pc, #16]	; (80072a0 <shci_user_evt_proc+0x90>)
 8007290:	f7f9 fa09 	bl	80006a6 <shci_notify_asynch_evt>
  }


  return;
 8007294:	bf00      	nop
 8007296:	bf00      	nop
}
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	200001e8 	.word	0x200001e8
 80072a4:	200001f8 	.word	0x200001f8
 80072a8:	200002ec 	.word	0x200002ec

080072ac <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60ba      	str	r2, [r7, #8]
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	4603      	mov	r3, r0
 80072b8:	81fb      	strh	r3, [r7, #14]
 80072ba:	460b      	mov	r3, r1
 80072bc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80072be:	2000      	movs	r0, #0
 80072c0:	f000 f864 	bl	800738c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80072c4:	4b16      	ldr	r3, [pc, #88]	; (8007320 <shci_send+0x74>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	89fa      	ldrh	r2, [r7, #14]
 80072ca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80072ce:	4b14      	ldr	r3, [pc, #80]	; (8007320 <shci_send+0x74>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	7b7a      	ldrb	r2, [r7, #13]
 80072d4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80072d6:	4b12      	ldr	r3, [pc, #72]	; (8007320 <shci_send+0x74>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	330c      	adds	r3, #12
 80072dc:	7b7a      	ldrb	r2, [r7, #13]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f001 fe4b 	bl	8008f7c <memcpy>

  shciContext.io.Send(0,0);
 80072e6:	4b0f      	ldr	r3, [pc, #60]	; (8007324 <shci_send+0x78>)
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2100      	movs	r1, #0
 80072ec:	2000      	movs	r0, #0
 80072ee:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80072f0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80072f4:	f7f9 f9ee 	bl	80006d4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f103 0008 	add.w	r0, r3, #8
 80072fe:	4b08      	ldr	r3, [pc, #32]	; (8007320 <shci_send+0x74>)
 8007300:	6819      	ldr	r1, [r3, #0]
 8007302:	4b07      	ldr	r3, [pc, #28]	; (8007320 <shci_send+0x74>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	789b      	ldrb	r3, [r3, #2]
 8007308:	3303      	adds	r3, #3
 800730a:	461a      	mov	r2, r3
 800730c:	f001 fe36 	bl	8008f7c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007310:	2001      	movs	r0, #1
 8007312:	f000 f83b 	bl	800738c <Cmd_SetStatus>

  return;
 8007316:	bf00      	nop
}
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200001f4 	.word	0x200001f4
 8007324:	200002ec 	.word	0x200002ec

08007328 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007330:	4a10      	ldr	r2, [pc, #64]	; (8007374 <TlInit+0x4c>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007336:	4810      	ldr	r0, [pc, #64]	; (8007378 <TlInit+0x50>)
 8007338:	f000 f882 	bl	8007440 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800733c:	2001      	movs	r0, #1
 800733e:	f000 f825 	bl	800738c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007342:	4b0e      	ldr	r3, [pc, #56]	; (800737c <TlInit+0x54>)
 8007344:	2201      	movs	r2, #1
 8007346:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007348:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <TlInit+0x58>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00c      	beq.n	800736a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <TlInit+0x5c>)
 8007356:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007358:	4b0b      	ldr	r3, [pc, #44]	; (8007388 <TlInit+0x60>)
 800735a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800735c:	4b08      	ldr	r3, [pc, #32]	; (8007380 <TlInit+0x58>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f107 020c 	add.w	r2, r7, #12
 8007364:	4610      	mov	r0, r2
 8007366:	4798      	blx	r3
  }

  return;
 8007368:	bf00      	nop
 800736a:	bf00      	nop
}
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	200001f4 	.word	0x200001f4
 8007378:	200001e8 	.word	0x200001e8
 800737c:	200001f8 	.word	0x200001f8
 8007380:	200002ec 	.word	0x200002ec
 8007384:	080073dd 	.word	0x080073dd
 8007388:	080073f5 	.word	0x080073f5

0800738c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10b      	bne.n	80073b4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <Cmd_SetStatus+0x48>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d003      	beq.n	80073ac <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80073a4:	4b0b      	ldr	r3, [pc, #44]	; (80073d4 <Cmd_SetStatus+0x48>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2000      	movs	r0, #0
 80073aa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <Cmd_SetStatus+0x4c>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80073b2:	e00b      	b.n	80073cc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80073b4:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <Cmd_SetStatus+0x4c>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80073ba:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <Cmd_SetStatus+0x48>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d004      	beq.n	80073cc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80073c2:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <Cmd_SetStatus+0x48>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2001      	movs	r0, #1
 80073c8:	4798      	blx	r3
  return;
 80073ca:	bf00      	nop
 80073cc:	bf00      	nop
}
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	2000030c 	.word	0x2000030c
 80073d8:	200001f0 	.word	0x200001f0

080073dc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80073e4:	2000      	movs	r0, #0
 80073e6:	f7f9 f96a 	bl	80006be <shci_cmd_resp_release>

  return;
 80073ea:	bf00      	nop
}
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4805      	ldr	r0, [pc, #20]	; (8007414 <TlUserEvtReceived+0x20>)
 8007400:	f000 f876 	bl	80074f0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007404:	4803      	ldr	r0, [pc, #12]	; (8007414 <TlUserEvtReceived+0x20>)
 8007406:	f7f9 f94e 	bl	80006a6 <shci_notify_asynch_evt>

  return;
 800740a:	bf00      	nop
}
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	200001e8 	.word	0x200001e8

08007418 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a05      	ldr	r2, [pc, #20]	; (8007438 <shci_register_io_bus+0x20>)
 8007424:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a04      	ldr	r2, [pc, #16]	; (800743c <shci_register_io_bus+0x24>)
 800742a:	611a      	str	r2, [r3, #16]

  return;
 800742c:	bf00      	nop
}
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	08007979 	.word	0x08007979
 800743c:	080079cd 	.word	0x080079cd

08007440 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	605a      	str	r2, [r3, #4]
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007468:	f3ef 8310 	mrs	r3, PRIMASK
 800746c:	60fb      	str	r3, [r7, #12]
  return(result);
 800746e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007470:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007472:	b672      	cpsid	i
}
 8007474:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	429a      	cmp	r2, r3
 800747e:	d102      	bne.n	8007486 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	75fb      	strb	r3, [r7, #23]
 8007484:	e001      	b.n	800748a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007486:	2300      	movs	r3, #0
 8007488:	75fb      	strb	r3, [r7, #23]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f383 8810 	msr	PRIMASK, r3
}
 8007494:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
}
 8007498:	4618      	mov	r0, r3
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074ae:	f3ef 8310 	mrs	r3, PRIMASK
 80074b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80074b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80074b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80074b8:	b672      	cpsid	i
}
 80074ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	605a      	str	r2, [r3, #4]
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f383 8810 	msr	PRIMASK, r3
}
 80074e2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074fa:	f3ef 8310 	mrs	r3, PRIMASK
 80074fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8007500:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007504:	b672      	cpsid	i
}
 8007506:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	683a      	ldr	r2, [r7, #0]
 800751a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	f383 8810 	msr	PRIMASK, r3
}
 800752e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007544:	f3ef 8310 	mrs	r3, PRIMASK
 8007548:	60fb      	str	r3, [r7, #12]
  return(result);
 800754a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800754c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800754e:	b672      	cpsid	i
}
 8007550:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	6852      	ldr	r2, [r2, #4]
 8007564:	605a      	str	r2, [r3, #4]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f383 8810 	msr	PRIMASK, r3
}
 8007570:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b086      	sub	sp, #24
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
 8007586:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007588:	f3ef 8310 	mrs	r3, PRIMASK
 800758c:	60fb      	str	r3, [r7, #12]
  return(result);
 800758e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007590:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007592:	b672      	cpsid	i
}
 8007594:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff ffca 	bl	800753c <LST_remove_node>
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ac:	693b      	ldr	r3, [r7, #16]
 80075ae:	f383 8810 	msr	PRIMASK, r3
}
 80075b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80075b4:	bf00      	nop
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BAS_Init( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  return;
 80075c0:	bf00      	nop
}
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <BLS_Init>:

__weak void BLS_Init( void )
{
 80075ca:	b480      	push	{r7}
 80075cc:	af00      	add	r7, sp, #0
  return;
 80075ce:	bf00      	nop
}
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  return;
 80075dc:	bf00      	nop
}
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <DIS_Init>:
__weak void DIS_Init( void )
{
 80075e6:	b480      	push	{r7}
 80075e8:	af00      	add	r7, sp, #0
  return;
 80075ea:	bf00      	nop
}
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
  return;
 80075f8:	bf00      	nop
}
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007602:	b480      	push	{r7}
 8007604:	af00      	add	r7, sp, #0
  return;
 8007606:	bf00      	nop
}
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HRS_Init>:
__weak void HRS_Init( void )
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
  return;
 8007614:	bf00      	nop
}
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HTS_Init>:
__weak void HTS_Init( void )
{
 800761e:	b480      	push	{r7}
 8007620:	af00      	add	r7, sp, #0
  return;
 8007622:	bf00      	nop
}
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <IAS_Init>:
__weak void IAS_Init( void )
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  return;
 8007630:	bf00      	nop
}
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <LLS_Init>:
__weak void LLS_Init( void )
{
 800763a:	b480      	push	{r7}
 800763c:	af00      	add	r7, sp, #0
  return;
 800763e:	bf00      	nop
}
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <TPS_Init>:
__weak void TPS_Init( void )
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  return;
 800764c:	bf00      	nop
}
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8007656:	b480      	push	{r7}
 8007658:	af00      	add	r7, sp, #0
  return;
 800765a:	bf00      	nop
}
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8007664:	b480      	push	{r7}
 8007666:	af00      	add	r7, sp, #0
  return;
 8007668:	bf00      	nop
}
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <MESH_Init>:
__weak void MESH_Init( void )
{
 8007672:	b480      	push	{r7}
 8007674:	af00      	add	r7, sp, #0
  return;
 8007676:	bf00      	nop
}
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  return;
 8007684:	bf00      	nop
}
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr

0800768e <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800768e:	b480      	push	{r7}
 8007690:	af00      	add	r7, sp, #0
  return;
 8007692:	bf00      	nop
}
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80076a0:	4b04      	ldr	r3, [pc, #16]	; (80076b4 <SVCCTL_Init+0x18>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80076a6:	4b04      	ldr	r3, [pc, #16]	; (80076b8 <SVCCTL_Init+0x1c>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80076ac:	f000 f806 	bl	80076bc <SVCCTL_SvcInit>

  return;
 80076b0:	bf00      	nop
}
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	200001c4 	.word	0x200001c4
 80076b8:	200001e4 	.word	0x200001e4

080076bc <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
  BAS_Init();
 80076c0:	f7ff ff7c 	bl	80075bc <BAS_Init>

  BLS_Init();
 80076c4:	f7ff ff81 	bl	80075ca <BLS_Init>

  CRS_STM_Init();
 80076c8:	f7ff ff86 	bl	80075d8 <CRS_STM_Init>

  DIS_Init();
 80076cc:	f7ff ff8b 	bl	80075e6 <DIS_Init>

  EDS_STM_Init();
 80076d0:	f7ff ff90 	bl	80075f4 <EDS_STM_Init>

  HIDS_Init();
 80076d4:	f7ff ff95 	bl	8007602 <HIDS_Init>

  HRS_Init();
 80076d8:	f7ff ff9a 	bl	8007610 <HRS_Init>

  HTS_Init();
 80076dc:	f7ff ff9f 	bl	800761e <HTS_Init>

  IAS_Init();
 80076e0:	f7ff ffa4 	bl	800762c <IAS_Init>

  LLS_Init();
 80076e4:	f7ff ffa9 	bl	800763a <LLS_Init>

  TPS_Init();
 80076e8:	f7ff ffae 	bl	8007648 <TPS_Init>

  MOTENV_STM_Init();
 80076ec:	f7ff ffb3 	bl	8007656 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80076f0:	f7ff fc3a 	bl	8006f68 <P2PS_STM_Init>

  OTAS_STM_Init();
 80076f4:	f7ff ffb6 	bl	8007664 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80076f8:	f7ff ffc2 	bl	8007680 <BVOPUS_STM_Init>

  MESH_Init();
 80076fc:	f7ff ffb9 	bl	8007672 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007700:	f7ff ffc5 	bl	800768e <SVCCTL_InitCustomSvc>
  
  return;
 8007704:	bf00      	nop
}
 8007706:	bd80      	pop	{r7, pc}

08007708 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007710:	4b09      	ldr	r3, [pc, #36]	; (8007738 <SVCCTL_RegisterSvcHandler+0x30>)
 8007712:	7f1b      	ldrb	r3, [r3, #28]
 8007714:	4619      	mov	r1, r3
 8007716:	4a08      	ldr	r2, [pc, #32]	; (8007738 <SVCCTL_RegisterSvcHandler+0x30>)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800771e:	4b06      	ldr	r3, [pc, #24]	; (8007738 <SVCCTL_RegisterSvcHandler+0x30>)
 8007720:	7f1b      	ldrb	r3, [r3, #28]
 8007722:	3301      	adds	r3, #1
 8007724:	b2da      	uxtb	r2, r3
 8007726:	4b04      	ldr	r3, [pc, #16]	; (8007738 <SVCCTL_RegisterSvcHandler+0x30>)
 8007728:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800772a:	bf00      	nop
}
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	200001c4 	.word	0x200001c4

0800773c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	3301      	adds	r3, #1
 8007748:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800774a:	2300      	movs	r3, #0
 800774c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2bff      	cmp	r3, #255	; 0xff
 8007754:	d125      	bne.n	80077a2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	3302      	adds	r3, #2
 800775a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800776a:	d118      	bne.n	800779e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800776c:	2300      	movs	r3, #0
 800776e:	757b      	strb	r3, [r7, #21]
 8007770:	e00d      	b.n	800778e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007772:	7d7b      	ldrb	r3, [r7, #21]
 8007774:	4a1a      	ldr	r2, [pc, #104]	; (80077e0 <SVCCTL_UserEvtRx+0xa4>)
 8007776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007782:	7dfb      	ldrb	r3, [r7, #23]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d108      	bne.n	800779a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007788:	7d7b      	ldrb	r3, [r7, #21]
 800778a:	3301      	adds	r3, #1
 800778c:	757b      	strb	r3, [r7, #21]
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <SVCCTL_UserEvtRx+0xa4>)
 8007790:	7f1b      	ldrb	r3, [r3, #28]
 8007792:	7d7a      	ldrb	r2, [r7, #21]
 8007794:	429a      	cmp	r2, r3
 8007796:	d3ec      	bcc.n	8007772 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007798:	e002      	b.n	80077a0 <SVCCTL_UserEvtRx+0x64>
              break;
 800779a:	bf00      	nop
          break;
 800779c:	e000      	b.n	80077a0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800779e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80077a0:	e000      	b.n	80077a4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80077a2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d00f      	beq.n	80077ca <SVCCTL_UserEvtRx+0x8e>
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	dc10      	bgt.n	80077d0 <SVCCTL_UserEvtRx+0x94>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <SVCCTL_UserEvtRx+0x7c>
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d006      	beq.n	80077c4 <SVCCTL_UserEvtRx+0x88>
 80077b6:	e00b      	b.n	80077d0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 faeb 	bl	8007d94 <SVCCTL_App_Notification>
 80077be:	4603      	mov	r3, r0
 80077c0:	75bb      	strb	r3, [r7, #22]
      break;
 80077c2:	e008      	b.n	80077d6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80077c4:	2301      	movs	r3, #1
 80077c6:	75bb      	strb	r3, [r7, #22]
      break;
 80077c8:	e005      	b.n	80077d6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75bb      	strb	r3, [r7, #22]
      break;
 80077ce:	e002      	b.n	80077d6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80077d0:	2301      	movs	r3, #1
 80077d2:	75bb      	strb	r3, [r7, #22]
      break;
 80077d4:	bf00      	nop
  }

  return (return_status);
 80077d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	200001c4 	.word	0x200001c4

080077e4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80077e8:	f001 f874 	bl	80088d4 <HW_IPCC_Enable>

  return;
 80077ec:	bf00      	nop
}
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <TL_Init>:


void TL_Init( void )
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80077f4:	4b10      	ldr	r3, [pc, #64]	; (8007838 <TL_Init+0x48>)
 80077f6:	4a11      	ldr	r2, [pc, #68]	; (800783c <TL_Init+0x4c>)
 80077f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <TL_Init+0x48>)
 80077fc:	4a10      	ldr	r2, [pc, #64]	; (8007840 <TL_Init+0x50>)
 80077fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8007800:	4b0d      	ldr	r3, [pc, #52]	; (8007838 <TL_Init+0x48>)
 8007802:	4a10      	ldr	r2, [pc, #64]	; (8007844 <TL_Init+0x54>)
 8007804:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8007806:	4b0c      	ldr	r3, [pc, #48]	; (8007838 <TL_Init+0x48>)
 8007808:	4a0f      	ldr	r2, [pc, #60]	; (8007848 <TL_Init+0x58>)
 800780a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <TL_Init+0x48>)
 800780e:	4a0f      	ldr	r2, [pc, #60]	; (800784c <TL_Init+0x5c>)
 8007810:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <TL_Init+0x48>)
 8007814:	4a0e      	ldr	r2, [pc, #56]	; (8007850 <TL_Init+0x60>)
 8007816:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <TL_Init+0x48>)
 800781a:	4a0e      	ldr	r2, [pc, #56]	; (8007854 <TL_Init+0x64>)
 800781c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800781e:	4b06      	ldr	r3, [pc, #24]	; (8007838 <TL_Init+0x48>)
 8007820:	4a0d      	ldr	r2, [pc, #52]	; (8007858 <TL_Init+0x68>)
 8007822:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <TL_Init+0x48>)
 8007826:	4a0d      	ldr	r2, [pc, #52]	; (800785c <TL_Init+0x6c>)
 8007828:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800782a:	4b03      	ldr	r3, [pc, #12]	; (8007838 <TL_Init+0x48>)
 800782c:	4a0c      	ldr	r2, [pc, #48]	; (8007860 <TL_Init+0x70>)
 800782e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8007830:	f001 f864 	bl	80088fc <HW_IPCC_Init>

  return;
 8007834:	bf00      	nop
}
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20030000 	.word	0x20030000
 800783c:	20030028 	.word	0x20030028
 8007840:	20030048 	.word	0x20030048
 8007844:	20030058 	.word	0x20030058
 8007848:	20030064 	.word	0x20030064
 800784c:	2003006c 	.word	0x2003006c
 8007850:	20030074 	.word	0x20030074
 8007854:	2003007c 	.word	0x2003007c
 8007858:	20030098 	.word	0x20030098
 800785c:	2003009c 	.word	0x2003009c
 8007860:	200300a8 	.word	0x200300a8

08007864 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8007870:	4811      	ldr	r0, [pc, #68]	; (80078b8 <TL_BLE_Init+0x54>)
 8007872:	f7ff fde5 	bl	8007440 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8007876:	4b11      	ldr	r3, [pc, #68]	; (80078bc <TL_BLE_Init+0x58>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	689a      	ldr	r2, [r3, #8]
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4a0c      	ldr	r2, [pc, #48]	; (80078c0 <TL_BLE_Init+0x5c>)
 8007890:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	4a08      	ldr	r2, [pc, #32]	; (80078b8 <TL_BLE_Init+0x54>)
 8007896:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8007898:	f001 f846 	bl	8008928 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <TL_BLE_Init+0x60>)
 80078a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	4a07      	ldr	r2, [pc, #28]	; (80078c8 <TL_BLE_Init+0x64>)
 80078aa:	6013      	str	r3, [r2, #0]

  return 0;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	200300c4 	.word	0x200300c4
 80078bc:	20030000 	.word	0x20030000
 80078c0:	20030a48 	.word	0x20030a48
 80078c4:	20000318 	.word	0x20000318
 80078c8:	2000031c 	.word	0x2000031c

080078cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	460b      	mov	r3, r1
 80078d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80078d8:	4b09      	ldr	r3, [pc, #36]	; (8007900 <TL_BLE_SendCmd+0x34>)
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2201      	movs	r2, #1
 80078e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <TL_BLE_SendCmd+0x34>)
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4619      	mov	r1, r3
 80078ea:	2001      	movs	r0, #1
 80078ec:	f000 f96c 	bl	8007bc8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80078f0:	f001 f824 	bl	800893c <HW_IPCC_BLE_SendCmd>

  return 0;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3708      	adds	r7, #8
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	20030000 	.word	0x20030000

08007904 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800790a:	e01c      	b.n	8007946 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800790c:	1d3b      	adds	r3, r7, #4
 800790e:	4619      	mov	r1, r3
 8007910:	4812      	ldr	r0, [pc, #72]	; (800795c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007912:	f7ff fe34 	bl	800757e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	7a5b      	ldrb	r3, [r3, #9]
 800791a:	2b0f      	cmp	r3, #15
 800791c:	d003      	beq.n	8007926 <HW_IPCC_BLE_RxEvtNot+0x22>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7a5b      	ldrb	r3, [r3, #9]
 8007922:	2b0e      	cmp	r3, #14
 8007924:	d105      	bne.n	8007932 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4619      	mov	r1, r3
 800792a:	2002      	movs	r0, #2
 800792c:	f000 f94c 	bl	8007bc8 <OutputDbgTrace>
 8007930:	e004      	b.n	800793c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4619      	mov	r1, r3
 8007936:	2003      	movs	r0, #3
 8007938:	f000 f946 	bl	8007bc8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	4610      	mov	r0, r2
 8007944:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8007946:	4805      	ldr	r0, [pc, #20]	; (800795c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8007948:	f7ff fd8a 	bl	8007460 <LST_is_empty>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d0dc      	beq.n	800790c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8007952:	bf00      	nop
}
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	200300c4 	.word	0x200300c4
 8007960:	20000318 	.word	0x20000318

08007964 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8007968:	4b02      	ldr	r3, [pc, #8]	; (8007974 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4798      	blx	r3

  return;
 800796e:	bf00      	nop
}
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	2000031c 	.word	0x2000031c

08007978 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8007984:	480d      	ldr	r0, [pc, #52]	; (80079bc <TL_SYS_Init+0x44>)
 8007986:	f7ff fd5b 	bl	8007440 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800798a:	4b0d      	ldr	r3, [pc, #52]	; (80079c0 <TL_SYS_Init+0x48>)
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	689a      	ldr	r2, [r3, #8]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4a08      	ldr	r2, [pc, #32]	; (80079bc <TL_SYS_Init+0x44>)
 800799c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800799e:	f000 ffef 	bl	8008980 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a07      	ldr	r2, [pc, #28]	; (80079c4 <TL_SYS_Init+0x4c>)
 80079a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	4a06      	ldr	r2, [pc, #24]	; (80079c8 <TL_SYS_Init+0x50>)
 80079b0:	6013      	str	r3, [r2, #0]

  return 0;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	200300cc 	.word	0x200300cc
 80079c0:	20030000 	.word	0x20030000
 80079c4:	20000320 	.word	0x20000320
 80079c8:	20000324 	.word	0x20000324

080079cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <TL_SYS_SendCmd+0x34>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	2210      	movs	r2, #16
 80079e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80079e2:	4b07      	ldr	r3, [pc, #28]	; (8007a00 <TL_SYS_SendCmd+0x34>)
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4619      	mov	r1, r3
 80079ea:	2004      	movs	r0, #4
 80079ec:	f000 f8ec 	bl	8007bc8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80079f0:	f000 ffd0 	bl	8008994 <HW_IPCC_SYS_SendCmd>

  return 0;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3708      	adds	r7, #8
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	20030000 	.word	0x20030000

08007a04 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007a08:	4b07      	ldr	r3, [pc, #28]	; (8007a28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	2005      	movs	r0, #5
 8007a12:	f000 f8d9 	bl	8007bc8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007a16:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a03      	ldr	r2, [pc, #12]	; (8007a28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007a1c:	68d2      	ldr	r2, [r2, #12]
 8007a1e:	6812      	ldr	r2, [r2, #0]
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3

  return;
 8007a24:	bf00      	nop
}
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	20030000 	.word	0x20030000
 8007a2c:	20000320 	.word	0x20000320

08007a30 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007a36:	e00e      	b.n	8007a56 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007a38:	1d3b      	adds	r3, r7, #4
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	480b      	ldr	r0, [pc, #44]	; (8007a6c <HW_IPCC_SYS_EvtNot+0x3c>)
 8007a3e:	f7ff fd9e 	bl	800757e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4619      	mov	r1, r3
 8007a46:	2006      	movs	r0, #6
 8007a48:	f000 f8be 	bl	8007bc8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007a4c:	4b08      	ldr	r3, [pc, #32]	; (8007a70 <HW_IPCC_SYS_EvtNot+0x40>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4610      	mov	r0, r2
 8007a54:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007a56:	4805      	ldr	r0, [pc, #20]	; (8007a6c <HW_IPCC_SYS_EvtNot+0x3c>)
 8007a58:	f7ff fd02 	bl	8007460 <LST_is_empty>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0ea      	beq.n	8007a38 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8007a62:	bf00      	nop
}
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200300cc 	.word	0x200300cc
 8007a70:	20000324 	.word	0x20000324

08007a74 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007a7c:	4817      	ldr	r0, [pc, #92]	; (8007adc <TL_MM_Init+0x68>)
 8007a7e:	f7ff fcdf 	bl	8007440 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007a82:	4817      	ldr	r0, [pc, #92]	; (8007ae0 <TL_MM_Init+0x6c>)
 8007a84:	f7ff fcdc 	bl	8007440 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007a88:	4b16      	ldr	r3, [pc, #88]	; (8007ae4 <TL_MM_Init+0x70>)
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	4a16      	ldr	r2, [pc, #88]	; (8007ae8 <TL_MM_Init+0x74>)
 8007a8e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007a90:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <TL_MM_Init+0x74>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6892      	ldr	r2, [r2, #8]
 8007a98:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007a9a:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <TL_MM_Init+0x74>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	68d2      	ldr	r2, [r2, #12]
 8007aa2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007aa4:	4b10      	ldr	r3, [pc, #64]	; (8007ae8 <TL_MM_Init+0x74>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a0c      	ldr	r2, [pc, #48]	; (8007adc <TL_MM_Init+0x68>)
 8007aaa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8007aac:	4b0e      	ldr	r3, [pc, #56]	; (8007ae8 <TL_MM_Init+0x74>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	6812      	ldr	r2, [r2, #0]
 8007ab4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <TL_MM_Init+0x74>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6852      	ldr	r2, [r2, #4]
 8007abe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007ac0:	4b09      	ldr	r3, [pc, #36]	; (8007ae8 <TL_MM_Init+0x74>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	687a      	ldr	r2, [r7, #4]
 8007ac6:	6912      	ldr	r2, [r2, #16]
 8007ac8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8007aca:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <TL_MM_Init+0x74>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6952      	ldr	r2, [r2, #20]
 8007ad2:	619a      	str	r2, [r3, #24]

  return;
 8007ad4:	bf00      	nop
}
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	200300b4 	.word	0x200300b4
 8007ae0:	20000310 	.word	0x20000310
 8007ae4:	20030000 	.word	0x20030000
 8007ae8:	20000328 	.word	0x20000328

08007aec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4807      	ldr	r0, [pc, #28]	; (8007b14 <TL_MM_EvtDone+0x28>)
 8007af8:	f7ff fcfa 	bl	80074f0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	2000      	movs	r0, #0
 8007b00:	f000 f862 	bl	8007bc8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007b04:	4804      	ldr	r0, [pc, #16]	; (8007b18 <TL_MM_EvtDone+0x2c>)
 8007b06:	f000 ff6b 	bl	80089e0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007b0a:	bf00      	nop
}
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000310 	.word	0x20000310
 8007b18:	08007b1d 	.word	0x08007b1d

08007b1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007b22:	e00c      	b.n	8007b3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007b24:	1d3b      	adds	r3, r7, #4
 8007b26:	4619      	mov	r1, r3
 8007b28:	480a      	ldr	r0, [pc, #40]	; (8007b54 <SendFreeBuf+0x38>)
 8007b2a:	f7ff fd28 	bl	800757e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8007b2e:	4b0a      	ldr	r3, [pc, #40]	; (8007b58 <SendFreeBuf+0x3c>)
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	4611      	mov	r1, r2
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7ff fcd9 	bl	80074f0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8007b3e:	4805      	ldr	r0, [pc, #20]	; (8007b54 <SendFreeBuf+0x38>)
 8007b40:	f7ff fc8e 	bl	8007460 <LST_is_empty>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0ec      	beq.n	8007b24 <SendFreeBuf+0x8>
  }

  return;
 8007b4a:	bf00      	nop
}
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20000310 	.word	0x20000310
 8007b58:	20030000 	.word	0x20030000

08007b5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8007b60:	4805      	ldr	r0, [pc, #20]	; (8007b78 <TL_TRACES_Init+0x1c>)
 8007b62:	f7ff fc6d 	bl	8007440 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007b66:	4b05      	ldr	r3, [pc, #20]	; (8007b7c <TL_TRACES_Init+0x20>)
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	4a03      	ldr	r2, [pc, #12]	; (8007b78 <TL_TRACES_Init+0x1c>)
 8007b6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8007b6e:	f000 ff6d 	bl	8008a4c <HW_IPCC_TRACES_Init>

  return;
 8007b72:	bf00      	nop
}
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	200300bc 	.word	0x200300bc
 8007b7c:	20030000 	.word	0x20030000

08007b80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007b86:	e008      	b.n	8007b9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007b88:	1d3b      	adds	r3, r7, #4
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	4808      	ldr	r0, [pc, #32]	; (8007bb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007b8e:	f7ff fcf6 	bl	800757e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 f80d 	bl	8007bb4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007b9a:	4805      	ldr	r0, [pc, #20]	; (8007bb0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8007b9c:	f7ff fc60 	bl	8007460 <LST_is_empty>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007ba6:	bf00      	nop
}
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200300bc 	.word	0x200300bc

08007bb4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	6039      	str	r1, [r7, #0]
 8007bd2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	2b06      	cmp	r3, #6
 8007bd8:	d845      	bhi.n	8007c66 <OutputDbgTrace+0x9e>
 8007bda:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <OutputDbgTrace+0x18>)
 8007bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be0:	08007bfd 	.word	0x08007bfd
 8007be4:	08007c21 	.word	0x08007c21
 8007be8:	08007c27 	.word	0x08007c27
 8007bec:	08007c3b 	.word	0x08007c3b
 8007bf0:	08007c47 	.word	0x08007c47
 8007bf4:	08007c4d 	.word	0x08007c4d
 8007bf8:	08007c5b 	.word	0x08007c5b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	7a5b      	ldrb	r3, [r3, #9]
 8007c04:	2bff      	cmp	r3, #255	; 0xff
 8007c06:	d005      	beq.n	8007c14 <OutputDbgTrace+0x4c>
 8007c08:	2bff      	cmp	r3, #255	; 0xff
 8007c0a:	dc05      	bgt.n	8007c18 <OutputDbgTrace+0x50>
 8007c0c:	2b0e      	cmp	r3, #14
 8007c0e:	d005      	beq.n	8007c1c <OutputDbgTrace+0x54>
 8007c10:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007c12:	e001      	b.n	8007c18 <OutputDbgTrace+0x50>
          break;
 8007c14:	bf00      	nop
 8007c16:	e027      	b.n	8007c68 <OutputDbgTrace+0xa0>
          break;
 8007c18:	bf00      	nop
 8007c1a:	e025      	b.n	8007c68 <OutputDbgTrace+0xa0>
          break;
 8007c1c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8007c1e:	e023      	b.n	8007c68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007c24:	e020      	b.n	8007c68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	7a5b      	ldrb	r3, [r3, #9]
 8007c2e:	2b0e      	cmp	r3, #14
 8007c30:	d001      	beq.n	8007c36 <OutputDbgTrace+0x6e>
 8007c32:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007c34:	e000      	b.n	8007c38 <OutputDbgTrace+0x70>
          break;
 8007c36:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007c38:	e016      	b.n	8007c68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	7a5b      	ldrb	r3, [r3, #9]
 8007c42:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007c44:	e010      	b.n	8007c68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007c4a:	e00d      	b.n	8007c68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	7a5b      	ldrb	r3, [r3, #9]
 8007c54:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007c56:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007c58:	e006      	b.n	8007c68 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	7a5b      	ldrb	r3, [r3, #9]
 8007c62:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007c64:	e000      	b.n	8007c68 <OutputDbgTrace+0xa0>

    default:
      break;
 8007c66:	bf00      	nop
  }

  return;
 8007c68:	bf00      	nop
}
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007c78:	4b03      	ldr	r3, [pc, #12]	; (8007c88 <LL_FLASH_GetUDN+0x14>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	1fff7580 	.word	0x1fff7580

08007c8c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007c90:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <LL_FLASH_GetDeviceID+0x14>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	b2db      	uxtb	r3, r3
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	1fff7584 	.word	0x1fff7584

08007ca4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8007ca8:	4b03      	ldr	r3, [pc, #12]	; (8007cb8 <LL_FLASH_GetSTCompanyID+0x14>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	0a1b      	lsrs	r3, r3, #8
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr
 8007cb8:	1fff7584 	.word	0x1fff7584

08007cbc <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8007cbc:	b5b0      	push	{r4, r5, r7, lr}
 8007cbe:	b08c      	sub	sp, #48	; 0x30
 8007cc0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007cc2:	4b2a      	ldr	r3, [pc, #168]	; (8007d6c <APP_BLE_Init+0xb0>)
 8007cc4:	463c      	mov	r4, r7
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cd0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007cd4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8007cd8:	f000 f950 	bl	8007f7c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007cdc:	2101      	movs	r1, #1
 8007cde:	2002      	movs	r0, #2
 8007ce0:	f000 fedc 	bl	8008a9c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8007ce4:	4a22      	ldr	r2, [pc, #136]	; (8007d70 <APP_BLE_Init+0xb4>)
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	2004      	movs	r0, #4
 8007cea:	f000 ffeb 	bl	8008cc4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8007cee:	463b      	mov	r3, r7
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7ff fa43 	bl	800717c <SHCI_C2_BLE_Init>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8007cfc:	f7fa f89e 	bl	8001e3c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007d00:	f000 f952 	bl	8007fa8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007d04:	f7ff fcca 	bl	800769c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007d08:	4b1a      	ldr	r3, [pc, #104]	; (8007d74 <APP_BLE_Init+0xb8>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8007d10:	4b18      	ldr	r3, [pc, #96]	; (8007d74 <APP_BLE_Init+0xb8>)
 8007d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d16:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007d18:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <APP_BLE_Init+0xbc>)
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	f000 ffd1 	bl	8008cc4 <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8007d22:	2006      	movs	r0, #6
 8007d24:	f7fe fd87 	bl	8006836 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8007d28:	f000 fbb2 	bl	8008490 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8007d2c:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <APP_BLE_Init+0xc0>)
 8007d2e:	2200      	movs	r2, #0
 8007d30:	4913      	ldr	r1, [pc, #76]	; (8007d80 <APP_BLE_Init+0xc4>)
 8007d32:	2000      	movs	r0, #0
 8007d34:	f7f9 fa44 	bl	80011c0 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8007d38:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <APP_BLE_Init+0xc8>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	4912      	ldr	r1, [pc, #72]	; (8007d88 <APP_BLE_Init+0xcc>)
 8007d3e:	2000      	movs	r0, #0
 8007d40:	f7f9 fa3e 	bl	80011c0 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8007d44:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <APP_BLE_Init+0xb8>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007d4a:	4b0a      	ldr	r3, [pc, #40]	; (8007d74 <APP_BLE_Init+0xb8>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8007d50:	4b0e      	ldr	r3, [pc, #56]	; (8007d8c <APP_BLE_Init+0xd0>)
 8007d52:	2280      	movs	r2, #128	; 0x80
 8007d54:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8007d56:	4b0e      	ldr	r3, [pc, #56]	; (8007d90 <APP_BLE_Init+0xd4>)
 8007d58:	22a0      	movs	r2, #160	; 0xa0
 8007d5a:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	f000 f9e5 	bl	800812c <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8007d62:	bf00      	nop
}
 8007d64:	3730      	adds	r7, #48	; 0x30
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bdb0      	pop	{r4, r5, r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	0800a634 	.word	0x0800a634
 8007d70:	08006ae9 	.word	0x08006ae9
 8007d74:	200001fc 	.word	0x200001fc
 8007d78:	08008295 	.word	0x08008295
 8007d7c:	080082cd 	.word	0x080082cd
 8007d80:	2000027d 	.word	0x2000027d
 8007d84:	080082dd 	.word	0x080082dd
 8007d88:	2000027e 	.word	0x2000027e
 8007d8c:	20000280 	.word	0x20000280
 8007d90:	20000282 	.word	0x20000282

08007d94 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b08c      	sub	sp, #48	; 0x30
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blecore_aci *blecore_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007d9c:	2342      	movs	r3, #66	; 0x42
 8007d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3301      	adds	r3, #1
 8007da6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8007da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2bff      	cmp	r3, #255	; 0xff
 8007dae:	d076      	beq.n	8007e9e <SVCCTL_App_Notification+0x10a>
 8007db0:	2bff      	cmp	r3, #255	; 0xff
 8007db2:	f300 80c9 	bgt.w	8007f48 <SVCCTL_App_Notification+0x1b4>
 8007db6:	2b05      	cmp	r3, #5
 8007db8:	d002      	beq.n	8007dc0 <SVCCTL_App_Notification+0x2c>
 8007dba:	2b3e      	cmp	r3, #62	; 0x3e
 8007dbc:	d020      	beq.n	8007e00 <SVCCTL_App_Notification+0x6c>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007dbe:	e0c3      	b.n	8007f48 <SVCCTL_App_Notification+0x1b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	3302      	adds	r3, #2
 8007dc4:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	4b62      	ldr	r3, [pc, #392]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007dd0:	8adb      	ldrh	r3, [r3, #22]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d106      	bne.n	8007de4 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007dd6:	4b60      	ldr	r3, [pc, #384]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007ddc:	4b5e      	ldr	r3, [pc, #376]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007de4:	2001      	movs	r0, #1
 8007de6:	f000 f9a1 	bl	800812c <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8007dea:	4b5c      	ldr	r3, [pc, #368]	; (8007f5c <SVCCTL_App_Notification+0x1c8>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007df0:	4b59      	ldr	r3, [pc, #356]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007df2:	8ada      	ldrh	r2, [r3, #22]
 8007df4:	4b59      	ldr	r3, [pc, #356]	; (8007f5c <SVCCTL_App_Notification+0x1c8>)
 8007df6:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8007df8:	4858      	ldr	r0, [pc, #352]	; (8007f5c <SVCCTL_App_Notification+0x1c8>)
 8007dfa:	f000 fb35 	bl	8008468 <P2PS_APP_Notification>
    break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007dfe:	e0a6      	b.n	8007f4e <SVCCTL_App_Notification+0x1ba>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	3302      	adds	r3, #2
 8007e04:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b0c      	cmp	r3, #12
 8007e0c:	d005      	beq.n	8007e1a <SVCCTL_App_Notification+0x86>
 8007e0e:	2b0c      	cmp	r3, #12
 8007e10:	dc41      	bgt.n	8007e96 <SVCCTL_App_Notification+0x102>
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d017      	beq.n	8007e46 <SVCCTL_App_Notification+0xb2>
 8007e16:	2b03      	cmp	r3, #3
          break;
 8007e18:	e03d      	b.n	8007e96 <SVCCTL_App_Notification+0x102>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	61bb      	str	r3, [r7, #24]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8007e20:	4b4d      	ldr	r3, [pc, #308]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007e22:	8adb      	ldrh	r3, [r3, #22]
 8007e24:	f107 020e 	add.w	r2, r7, #14
 8007e28:	f107 010f 	add.w	r1, r7, #15
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fe fd70 	bl	8006912 <hci_le_read_phy>
 8007e32:	4603      	mov	r3, r0
 8007e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8007e38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d12c      	bne.n	8007e9a <SVCCTL_App_Notification+0x106>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	2b02      	cmp	r3, #2
          break;
 8007e44:	e029      	b.n	8007e9a <SVCCTL_App_Notification+0x106>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007e4c:	4b42      	ldr	r3, [pc, #264]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007e4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7f9 fa2e 	bl	80012b4 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8007e58:	4b3f      	ldr	r3, [pc, #252]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007e5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d104      	bne.n	8007e6c <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007e62:	4b3d      	ldr	r3, [pc, #244]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007e64:	2206      	movs	r2, #6
 8007e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007e6a:	e003      	b.n	8007e74 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8007e6c:	4b3a      	ldr	r3, [pc, #232]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007e6e:	2205      	movs	r2, #5
 8007e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	4b36      	ldr	r3, [pc, #216]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007e7e:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007e80:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <SVCCTL_App_Notification+0x1c8>)
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007e86:	4b34      	ldr	r3, [pc, #208]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007e88:	8ada      	ldrh	r2, [r3, #22]
 8007e8a:	4b34      	ldr	r3, [pc, #208]	; (8007f5c <SVCCTL_App_Notification+0x1c8>)
 8007e8c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8007e8e:	4833      	ldr	r0, [pc, #204]	; (8007f5c <SVCCTL_App_Notification+0x1c8>)
 8007e90:	f000 faea 	bl	8008468 <P2PS_APP_Notification>
        break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007e94:	e002      	b.n	8007e9c <SVCCTL_App_Notification+0x108>
          break;
 8007e96:	bf00      	nop
 8007e98:	e059      	b.n	8007f4e <SVCCTL_App_Notification+0x1ba>
          break;
 8007e9a:	bf00      	nop
    break; /* HCI_LE_META_EVT_CODE */
 8007e9c:	e057      	b.n	8007f4e <SVCCTL_App_Notification+0x1ba>
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blecore_evt->ecode)
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eae:	d047      	beq.n	8007f40 <SVCCTL_App_Notification+0x1ac>
 8007eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eb4:	dc4a      	bgt.n	8007f4c <SVCCTL_App_Notification+0x1b8>
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	d037      	beq.n	8007f2a <SVCCTL_App_Notification+0x196>
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	db46      	blt.n	8007f4c <SVCCTL_App_Notification+0x1b8>
 8007ebe:	f240 420a 	movw	r2, #1034	; 0x40a
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	dc42      	bgt.n	8007f4c <SVCCTL_App_Notification+0x1b8>
 8007ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eca:	db3f      	blt.n	8007f4c <SVCCTL_App_Notification+0x1b8>
 8007ecc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007ed0:	2b0a      	cmp	r3, #10
 8007ed2:	d83b      	bhi.n	8007f4c <SVCCTL_App_Notification+0x1b8>
 8007ed4:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <SVCCTL_App_Notification+0x148>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007f45 	.word	0x08007f45
 8007ee0:	08007f23 	.word	0x08007f23
 8007ee4:	08007f45 	.word	0x08007f45
 8007ee8:	08007f45 	.word	0x08007f45
 8007eec:	08007f45 	.word	0x08007f45
 8007ef0:	08007f09 	.word	0x08007f09
 8007ef4:	08007f4d 	.word	0x08007f4d
 8007ef8:	08007f45 	.word	0x08007f45
 8007efc:	08007f45 	.word	0x08007f45
 8007f00:	08007f15 	.word	0x08007f15
 8007f04:	08007f45 	.word	0x08007f45
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007f08:	4b13      	ldr	r3, [pc, #76]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007f0a:	8adb      	ldrh	r3, [r3, #22]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe f8ec 	bl	80060ea <aci_gap_allow_rebond>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8007f12:	e018      	b.n	8007f46 <SVCCTL_App_Notification+0x1b2>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8007f14:	4b10      	ldr	r3, [pc, #64]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007f16:	8adb      	ldrh	r3, [r3, #22]
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe f92f 	bl	800617e <aci_gap_numeric_comparison_value_confirm_yesno>
      break;
 8007f20:	e011      	b.n	8007f46 <SVCCTL_App_Notification+0x1b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blecore_evt->data;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	3302      	adds	r3, #2
 8007f26:	623b      	str	r3, [r7, #32]
           break;    
 8007f28:	e00d      	b.n	8007f46 <SVCCTL_App_Notification+0x1b2>
          BSP_LED_On(LED_GREEN);
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	f7fa f9c4 	bl	80022b8 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8007f30:	4b09      	ldr	r3, [pc, #36]	; (8007f58 <SVCCTL_App_Notification+0x1c4>)
 8007f32:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8007f36:	210a      	movs	r1, #10
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7f9 fa47 	bl	80013cc <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007f3e:	e002      	b.n	8007f46 <SVCCTL_App_Notification+0x1b2>
      break;
 8007f40:	bf00      	nop
 8007f42:	e003      	b.n	8007f4c <SVCCTL_App_Notification+0x1b8>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8007f44:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007f46:	e001      	b.n	8007f4c <SVCCTL_App_Notification+0x1b8>
      break;
 8007f48:	bf00      	nop
 8007f4a:	e000      	b.n	8007f4e <SVCCTL_App_Notification+0x1ba>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007f4c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007f4e:	2301      	movs	r3, #1
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3730      	adds	r7, #48	; 0x30
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200001fc 	.word	0x200001fc
 8007f5c:	20000704 	.word	0x20000704

08007f60 <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8007f64:	f000 fac8 	bl	80084f8 <P2PS_APP_SW1_Button_Action>
}
 8007f68:	bf00      	nop
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 8007f70:	2100      	movs	r1, #0
 8007f72:	2010      	movs	r0, #16
 8007f74:	f000 fec8 	bl	8008d08 <UTIL_SEQ_SetTask>

  return;
 8007f78:	bf00      	nop
}
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8007f82:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <Ble_Tl_Init+0x20>)
 8007f84:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <Ble_Tl_Init+0x24>)
 8007f88:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007f8a:	463b      	mov	r3, r7
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <Ble_Tl_Init+0x28>)
 8007f90:	f7fe fd8e 	bl	8006ab0 <hci_init>

  return;
 8007f94:	bf00      	nop
}
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200300d4 	.word	0x200300d4
 8007fa0:	08008367 	.word	0x08008367
 8007fa4:	0800832f 	.word	0x0800832f

08007fa8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 8007fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007faa:	b08f      	sub	sp, #60	; 0x3c
 8007fac:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8007fae:	2300      	movs	r3, #0
 8007fb0:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8007fb2:	f7fe fc8a 	bl	80068ca <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 8007fb6:	f000 f929 	bl	800820c <BleGetBdAddress>
 8007fba:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8007fbc:	69fa      	ldr	r2, [r7, #28]
 8007fbe:	2106      	movs	r1, #6
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	f7fe fb78 	bl	80066b6 <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	795a      	ldrb	r2, [r3, #5]
 8007fca:	4b52      	ldr	r3, [pc, #328]	; (8008114 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007fcc:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 8007fce:	69fb      	ldr	r3, [r7, #28]
 8007fd0:	791a      	ldrb	r2, [r3, #4]
 8007fd2:	4b50      	ldr	r3, [pc, #320]	; (8008114 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007fd4:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	78da      	ldrb	r2, [r3, #3]
 8007fda:	4b4e      	ldr	r3, [pc, #312]	; (8008114 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007fdc:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	789a      	ldrb	r2, [r3, #2]
 8007fe2:	4b4c      	ldr	r3, [pc, #304]	; (8008114 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007fe4:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	785a      	ldrb	r2, [r3, #1]
 8007fea:	4b4a      	ldr	r3, [pc, #296]	; (8008114 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007fec:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 8007fee:	69fb      	ldr	r3, [r7, #28]
 8007ff0:	781a      	ldrb	r2, [r3, #0]
 8007ff2:	4b48      	ldr	r3, [pc, #288]	; (8008114 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007ff4:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8007ff6:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8007ffa:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8007ffc:	f7ff fe3a 	bl	8007c74 <LL_FLASH_GetUDN>
 8008000:	4603      	mov	r3, r0
 8008002:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 8008004:	1d3b      	adds	r3, r7, #4
 8008006:	461a      	mov	r2, r3
 8008008:	2106      	movs	r1, #6
 800800a:	202e      	movs	r0, #46	; 0x2e
 800800c:	f7fe fb53 	bl	80066b6 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8008010:	4a41      	ldr	r2, [pc, #260]	; (8008118 <Ble_Hci_Gap_Gatt_Init+0x170>)
 8008012:	2110      	movs	r1, #16
 8008014:	2018      	movs	r0, #24
 8008016:	f7fe fb4e 	bl	80066b6 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 800801a:	4a40      	ldr	r2, [pc, #256]	; (800811c <Ble_Hci_Gap_Gatt_Init+0x174>)
 800801c:	2110      	movs	r1, #16
 800801e:	2008      	movs	r0, #8
 8008020:	f7fe fb49 	bl	80066b6 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008024:	2118      	movs	r1, #24
 8008026:	2001      	movs	r0, #1
 8008028:	f7fe fbae 	bl	8006788 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 800802c:	f7fe f8fe 	bl	800622c <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008030:	2300      	movs	r3, #0
 8008032:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008034:	7efb      	ldrb	r3, [r7, #27]
 8008036:	f043 0301 	orr.w	r3, r3, #1
 800803a:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 800803c:	7efb      	ldrb	r3, [r7, #27]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01e      	beq.n	8008080 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "BREATHE";
 8008042:	4b37      	ldr	r3, [pc, #220]	; (8008120 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008044:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8008046:	f107 0212 	add.w	r2, r7, #18
 800804a:	7ef8      	ldrb	r0, [r7, #27]
 800804c:	f107 030e 	add.w	r3, r7, #14
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	f107 0310 	add.w	r3, r7, #16
 8008056:	9300      	str	r3, [sp, #0]
 8008058:	4613      	mov	r3, r2
 800805a:	2207      	movs	r2, #7
 800805c:	2100      	movs	r1, #0
 800805e:	f7fd ff39 	bl	8005ed4 <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8008062:	8a7c      	ldrh	r4, [r7, #18]
 8008064:	8a3d      	ldrh	r5, [r7, #16]
 8008066:	6978      	ldr	r0, [r7, #20]
 8008068:	f7f8 f88a 	bl	8000180 <strlen>
 800806c:	4603      	mov	r3, r0
 800806e:	b2da      	uxtb	r2, r3
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	4613      	mov	r3, r2
 8008076:	2200      	movs	r2, #0
 8008078:	4629      	mov	r1, r5
 800807a:	4620      	mov	r0, r4
 800807c:	f7fe fa94 	bl	80065a8 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8008080:	8a78      	ldrh	r0, [r7, #18]
 8008082:	89f9      	ldrh	r1, [r7, #14]
 8008084:	463b      	mov	r3, r7
 8008086:	9300      	str	r3, [sp, #0]
 8008088:	2302      	movs	r3, #2
 800808a:	2200      	movs	r2, #0
 800808c:	f7fe fa8c 	bl	80065a8 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008090:	2202      	movs	r2, #2
 8008092:	2102      	movs	r1, #2
 8008094:	2000      	movs	r0, #0
 8008096:	f7fe fca4 	bl	80069e2 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800809a:	4b22      	ldr	r3, [pc, #136]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 800809c:	2201      	movs	r2, #1
 800809e:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80080a0:	4b20      	ldr	r3, [pc, #128]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fd fe23 	bl	8005cf0 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80080aa:	4b1e      	ldr	r3, [pc, #120]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080ac:	2201      	movs	r2, #1
 80080ae:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80080b0:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080b2:	2208      	movs	r2, #8
 80080b4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80080b6:	4b1b      	ldr	r3, [pc, #108]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080b8:	2210      	movs	r2, #16
 80080ba:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80080bc:	4b19      	ldr	r3, [pc, #100]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080be:	2200      	movs	r2, #0
 80080c0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80080c2:	4b18      	ldr	r3, [pc, #96]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080c4:	4a18      	ldr	r2, [pc, #96]	; (8008128 <Ble_Hci_Gap_Gatt_Init+0x180>)
 80080c6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80080c8:	4b16      	ldr	r3, [pc, #88]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080ca:	2201      	movs	r2, #1
 80080cc:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80080ce:	4b15      	ldr	r3, [pc, #84]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080d0:	789c      	ldrb	r4, [r3, #2]
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080d4:	785d      	ldrb	r5, [r3, #1]
 80080d6:	4b13      	ldr	r3, [pc, #76]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080d8:	791b      	ldrb	r3, [r3, #4]
 80080da:	4a12      	ldr	r2, [pc, #72]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080dc:	7952      	ldrb	r2, [r2, #5]
 80080de:	4911      	ldr	r1, [pc, #68]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080e0:	78c9      	ldrb	r1, [r1, #3]
 80080e2:	4810      	ldr	r0, [pc, #64]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 80080e4:	6880      	ldr	r0, [r0, #8]
 80080e6:	2600      	movs	r6, #0
 80080e8:	9604      	str	r6, [sp, #16]
 80080ea:	9003      	str	r0, [sp, #12]
 80080ec:	9102      	str	r1, [sp, #8]
 80080ee:	9201      	str	r2, [sp, #4]
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	2300      	movs	r3, #0
 80080f4:	2201      	movs	r2, #1
 80080f6:	4629      	mov	r1, r5
 80080f8:	4620      	mov	r0, r4
 80080fa:	f7fd fe43 	bl	8005d84 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80080fe:	4b09      	ldr	r3, [pc, #36]	; (8008124 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008100:	789b      	ldrb	r3, [r3, #2]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8008106:	f7fd ffcc 	bl	80060a2 <aci_gap_configure_whitelist>
   }
}
 800810a:	bf00      	nop
 800810c:	3724      	adds	r7, #36	; 0x24
 800810e:	46bd      	mov	sp, r7
 8008110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008112:	bf00      	nop
 8008114:	2000002c 	.word	0x2000002c
 8008118:	0800a824 	.word	0x0800a824
 800811c:	0800a834 	.word	0x0800a834
 8008120:	0800a664 	.word	0x0800a664
 8008124:	200001fc 	.word	0x200001fc
 8008128:	0001b207 	.word	0x0001b207

0800812c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08c      	sub	sp, #48	; 0x30
 8008130:	af08      	add	r7, sp, #32
 8008132:	4603      	mov	r3, r0
 8008134:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008136:	2342      	movs	r3, #66	; 0x42
 8008138:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 800813a:	79fb      	ldrb	r3, [r7, #7]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d106      	bne.n	800814e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8008140:	4b2b      	ldr	r3, [pc, #172]	; (80081f0 <Adv_Request+0xc4>)
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8008146:	4b2b      	ldr	r3, [pc, #172]	; (80081f4 <Adv_Request+0xc8>)
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	81bb      	strh	r3, [r7, #12]
 800814c:	e005      	b.n	800815a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800814e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8008152:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8008154:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008158:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800815a:	4b27      	ldr	r3, [pc, #156]	; (80081f8 <Adv_Request+0xcc>)
 800815c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008160:	4618      	mov	r0, r3
 8008162:	f7f9 f8a7 	bl	80012b4 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);

    if ((New_Status == APP_BLE_LP_ADV)
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	2b02      	cmp	r3, #2
 800816a:	d10d      	bne.n	8008188 <Adv_Request+0x5c>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800816c:	4b22      	ldr	r3, [pc, #136]	; (80081f8 <Adv_Request+0xcc>)
 800816e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008172:	2b01      	cmp	r3, #1
 8008174:	d004      	beq.n	8008180 <Adv_Request+0x54>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8008176:	4b20      	ldr	r3, [pc, #128]	; (80081f8 <Adv_Request+0xcc>)
 8008178:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800817c:	2b02      	cmp	r3, #2
 800817e:	d103      	bne.n	8008188 <Adv_Request+0x5c>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8008180:	f7fd fcb4 	bl	8005aec <aci_gap_set_non_discoverable>
 8008184:	4603      	mov	r3, r0
 8008186:	72fb      	strb	r3, [r7, #11]
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008188:	4a1b      	ldr	r2, [pc, #108]	; (80081f8 <Adv_Request+0xcc>)
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008190:	4b19      	ldr	r3, [pc, #100]	; (80081f8 <Adv_Request+0xcc>)
 8008192:	7e1b      	ldrb	r3, [r3, #24]
 8008194:	89ba      	ldrh	r2, [r7, #12]
 8008196:	89f9      	ldrh	r1, [r7, #14]
 8008198:	2000      	movs	r0, #0
 800819a:	9006      	str	r0, [sp, #24]
 800819c:	2000      	movs	r0, #0
 800819e:	9005      	str	r0, [sp, #20]
 80081a0:	4816      	ldr	r0, [pc, #88]	; (80081fc <Adv_Request+0xd0>)
 80081a2:	9004      	str	r0, [sp, #16]
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	4b16      	ldr	r3, [pc, #88]	; (8008200 <Adv_Request+0xd4>)
 80081a8:	9302      	str	r3, [sp, #8]
 80081aa:	2308      	movs	r3, #8
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	2300      	movs	r3, #0
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	2000      	movs	r0, #0
 80081b6:	f7fd fcbd 	bl	8005b34 <aci_gap_set_discoverable>
 80081ba:	4603      	mov	r3, r0
 80081bc:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 80081be:	4911      	ldr	r1, [pc, #68]	; (8008204 <Adv_Request+0xd8>)
 80081c0:	200e      	movs	r0, #14
 80081c2:	f7fd ff12 	bl	8005fea <aci_gap_update_adv_data>
 80081c6:	4603      	mov	r3, r0
 80081c8:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 80081ca:	7afb      	ldrb	r3, [r7, #11]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10a      	bne.n	80081e6 <Adv_Request+0xba>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 80081d0:	79fb      	ldrb	r3, [r7, #7]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d107      	bne.n	80081e6 <Adv_Request+0xba>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 80081d6:	4b08      	ldr	r3, [pc, #32]	; (80081f8 <Adv_Request+0xcc>)
 80081d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80081dc:	490a      	ldr	r1, [pc, #40]	; (8008208 <Adv_Request+0xdc>)
 80081de:	4618      	mov	r0, r3
 80081e0:	f7f9 f8f4 	bl	80013cc <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop
}
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	20000280 	.word	0x20000280
 80081f4:	20000282 	.word	0x20000282
 80081f8:	200001fc 	.word	0x200001fc
 80081fc:	20000215 	.word	0x20000215
 8008200:	0800a844 	.word	0x0800a844
 8008204:	2000002c 	.word	0x2000002c
 8008208:	0001e046 	.word	0x0001e046

0800820c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008212:	f7ff fd2f 	bl	8007c74 <LL_FLASH_GetUDN>
 8008216:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821e:	d023      	beq.n	8008268 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008220:	f7ff fd40 	bl	8007ca4 <LL_FLASH_GetSTCompanyID>
 8008224:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008226:	f7ff fd31 	bl	8007c8c <LL_FLASH_GetDeviceID>
 800822a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	b2da      	uxtb	r2, r3
 8008230:	4b16      	ldr	r3, [pc, #88]	; (800828c <BleGetBdAddress+0x80>)
 8008232:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	0a1b      	lsrs	r3, r3, #8
 8008238:	b2da      	uxtb	r2, r3
 800823a:	4b14      	ldr	r3, [pc, #80]	; (800828c <BleGetBdAddress+0x80>)
 800823c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)device_id;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	b2da      	uxtb	r2, r3
 8008242:	4b12      	ldr	r3, [pc, #72]	; (800828c <BleGetBdAddress+0x80>)
 8008244:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)(company_id & 0x000000FF);
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	b2da      	uxtb	r2, r3
 800824a:	4b10      	ldr	r3, [pc, #64]	; (800828c <BleGetBdAddress+0x80>)
 800824c:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	0a1b      	lsrs	r3, r3, #8
 8008252:	b2da      	uxtb	r2, r3
 8008254:	4b0d      	ldr	r3, [pc, #52]	; (800828c <BleGetBdAddress+0x80>)
 8008256:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	0c1b      	lsrs	r3, r3, #16
 800825c:	b2da      	uxtb	r2, r3
 800825e:	4b0b      	ldr	r3, [pc, #44]	; (800828c <BleGetBdAddress+0x80>)
 8008260:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8008262:	4b0a      	ldr	r3, [pc, #40]	; (800828c <BleGetBdAddress+0x80>)
 8008264:	617b      	str	r3, [r7, #20]
 8008266:	e00b      	b.n	8008280 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008268:	2000      	movs	r0, #0
 800826a:	f7fe fdd7 	bl	8006e1c <OTP_Read>
 800826e:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	617b      	str	r3, [r7, #20]
 800827a:	e001      	b.n	8008280 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 800827c:	4b04      	ldr	r3, [pc, #16]	; (8008290 <BleGetBdAddress+0x84>)
 800827e:	617b      	str	r3, [r7, #20]
    }
  }

  return bd_addr;
 8008280:	697b      	ldr	r3, [r7, #20]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3718      	adds	r7, #24
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	2000032c 	.word	0x2000032c
 8008290:	0800a81c 	.word	0x0800a81c

08008294 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 800829a:	2001      	movs	r0, #1
 800829c:	f7fa f826 	bl	80022ec <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <Adv_Cancel+0x34>)
 80082a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d00a      	beq.n	80082c0 <Adv_Cancel+0x2c>

  {

    tBleStatus result = 0x00;
 80082aa:	2300      	movs	r3, #0
 80082ac:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 80082ae:	f7fd fc1d 	bl	8005aec <aci_gap_set_non_discoverable>
 80082b2:	4603      	mov	r3, r0
 80082b4:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80082b6:	4b04      	ldr	r3, [pc, #16]	; (80082c8 <Adv_Cancel+0x34>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 80082be:	bf00      	nop
 80082c0:	bf00      	nop
}
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	200001fc 	.word	0x200001fc

080082cc <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80082d0:	2100      	movs	r1, #0
 80082d2:	2001      	movs	r0, #1
 80082d4:	f000 fd18 	bl	8008d08 <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 80082d8:	bf00      	nop
}
 80082da:	bd80      	pop	{r7, pc}

080082dc <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 80082e0:	2001      	movs	r0, #1
 80082e2:	f7fa f803 	bl	80022ec <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 80082e6:	bf00      	nop
 80082e8:	bd80      	pop	{r7, pc}

080082ea <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80082f2:	2100      	movs	r1, #0
 80082f4:	2004      	movs	r0, #4
 80082f6:	f000 fd07 	bl	8008d08 <UTIL_SEQ_SetTask>
  return;
 80082fa:	bf00      	nop
}
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800830a:	2001      	movs	r0, #1
 800830c:	f000 fd68 	bl	8008de0 <UTIL_SEQ_SetEvt>
  return;
 8008310:	bf00      	nop
}
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008320:	2001      	movs	r0, #1
 8008322:	f000 fd7d 	bl	8008e20 <UTIL_SEQ_WaitEvt>
  return;
 8008326:	bf00      	nop
}
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	3308      	adds	r3, #8
 8008340:	4618      	mov	r0, r3
 8008342:	f7ff f9fb 	bl	800773c <SVCCTL_UserEvtRx>
 8008346:	4603      	mov	r3, r0
 8008348:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800834a:	7afb      	ldrb	r3, [r7, #11]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d003      	beq.n	8008358 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2201      	movs	r2, #1
 8008354:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8008356:	e002      	b.n	800835e <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
}
 800835e:	bf00      	nop
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	4603      	mov	r3, r0
 800836e:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008370:	79fb      	ldrb	r3, [r7, #7]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <BLE_StatusNot+0x16>
 8008376:	2b01      	cmp	r3, #1
 8008378:	d006      	beq.n	8008388 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 800837a:	e00b      	b.n	8008394 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800837c:	231f      	movs	r3, #31
 800837e:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 fced 	bl	8008d60 <UTIL_SEQ_PauseTask>
      break;
 8008386:	e005      	b.n	8008394 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008388:	231f      	movs	r3, #31
 800838a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fd07 	bl	8008da0 <UTIL_SEQ_ResumeTask>
      break;
 8008392:	bf00      	nop
  }
  return;
 8008394:	bf00      	nop
}
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <P2PS_STM_App_Notification>:
static void P2PS_TimeChange_Timer_Callback(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d019      	beq.n	80083e0 <P2PS_STM_App_Notification+0x44>
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	dc52      	bgt.n	8008456 <P2PS_STM_App_Notification+0xba>
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <P2PS_STM_App_Notification+0x1e>
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d00a      	beq.n	80083ce <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 80083b8:	e04d      	b.n	8008456 <P2PS_STM_App_Notification+0xba>
      P2P_Server_App_Context.Notification_Status = 1;
 80083ba:	4b2a      	ldr	r3, [pc, #168]	; (8008464 <P2PS_STM_App_Notification+0xc8>)
 80083bc:	2201      	movs	r2, #1
 80083be:	701a      	strb	r2, [r3, #0]
      HW_TS_Start(P2P_Server_App_Context.Update_timer_Id, TIME_CHANGE_PERIOD);
 80083c0:	4b28      	ldr	r3, [pc, #160]	; (8008464 <P2PS_STM_App_Notification+0xc8>)
 80083c2:	7b1b      	ldrb	r3, [r3, #12]
 80083c4:	21cc      	movs	r1, #204	; 0xcc
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f9 f800 	bl	80013cc <HW_TS_Start>
      break;
 80083cc:	e046      	b.n	800845c <P2PS_STM_App_Notification+0xc0>
      P2P_Server_App_Context.Notification_Status = 0;
 80083ce:	4b25      	ldr	r3, [pc, #148]	; (8008464 <P2PS_STM_App_Notification+0xc8>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	701a      	strb	r2, [r3, #0]
      HW_TS_Stop(P2P_Server_App_Context.Update_timer_Id);
 80083d4:	4b23      	ldr	r3, [pc, #140]	; (8008464 <P2PS_STM_App_Notification+0xc8>)
 80083d6:	7b1b      	ldrb	r3, [r3, #12]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7f8 ff6b 	bl	80012b4 <HW_TS_Stop>
      break;
 80083de:	e03d      	b.n	800845c <P2PS_STM_App_Notification+0xc0>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d117      	bne.n	800841a <P2PS_STM_App_Notification+0x7e>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	3301      	adds	r3, #1
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d105      	bne.n	8008402 <P2PS_STM_App_Notification+0x66>
          BSP_LED_On(LED_BLUE);
 80083f6:	2000      	movs	r0, #0
 80083f8:	f7f9 ff5e 	bl	80022b8 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80083fc:	4b19      	ldr	r3, [pc, #100]	; (8008464 <P2PS_STM_App_Notification+0xc8>)
 80083fe:	2201      	movs	r2, #1
 8008400:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	3301      	adds	r3, #1
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d105      	bne.n	800841a <P2PS_STM_App_Notification+0x7e>
          BSP_LED_Off(LED_BLUE);
 800840e:	2000      	movs	r0, #0
 8008410:	f7f9 ff6c 	bl	80022ec <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <P2PS_STM_App_Notification+0xc8>)
 8008416:	2200      	movs	r2, #0
 8008418:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b01      	cmp	r3, #1
 8008422:	d11a      	bne.n	800845a <P2PS_STM_App_Notification+0xbe>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	3301      	adds	r3, #1
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	2b01      	cmp	r3, #1
 800842e:	d105      	bne.n	800843c <P2PS_STM_App_Notification+0xa0>
          BSP_LED_On(LED_BLUE);
 8008430:	2000      	movs	r0, #0
 8008432:	f7f9 ff41 	bl	80022b8 <BSP_LED_On>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8008436:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <P2PS_STM_App_Notification+0xc8>)
 8008438:	2201      	movs	r2, #1
 800843a:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	3301      	adds	r3, #1
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d108      	bne.n	800845a <P2PS_STM_App_Notification+0xbe>
          BSP_LED_Off(LED_BLUE);
 8008448:	2000      	movs	r0, #0
 800844a:	f7f9 ff4f 	bl	80022ec <BSP_LED_Off>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800844e:	4b05      	ldr	r3, [pc, #20]	; (8008464 <P2PS_STM_App_Notification+0xc8>)
 8008450:	2200      	movs	r2, #0
 8008452:	709a      	strb	r2, [r3, #2]
      break;
 8008454:	e001      	b.n	800845a <P2PS_STM_App_Notification+0xbe>
      break;
 8008456:	bf00      	nop
 8008458:	e000      	b.n	800845c <P2PS_STM_App_Notification+0xc0>
      break;
 800845a:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800845c:	bf00      	nop
}
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000284 	.word	0x20000284

08008468 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d005      	beq.n	8008484 <P2PS_APP_Notification+0x1c>
 8008478:	2b01      	cmp	r3, #1
 800847a:	d000      	beq.n	800847e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800847c:	e003      	b.n	8008486 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800847e:	f000 f825 	bl	80084cc <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8008482:	e000      	b.n	8008486 <P2PS_APP_Notification+0x1e>
    break;
 8008484:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8008486:	bf00      	nop
}
 8008488:	3708      	adds	r7, #8
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
	...

08008490 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  UTIL_SEQ_RegTask( 1<< CFG_MY_TASK_NOTIFY_TIME, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8008494:	4a09      	ldr	r2, [pc, #36]	; (80084bc <P2PS_APP_Init+0x2c>)
 8008496:	2100      	movs	r1, #0
 8008498:	2010      	movs	r0, #16
 800849a:	f000 fc13 	bl	8008cc4 <UTIL_SEQ_RegTask>

  /* Create timer to change the time and update charecteristic */
    HW_TS_Create(CFG_TIM_PROC_ID_ISR,
 800849e:	4b08      	ldr	r3, [pc, #32]	; (80084c0 <P2PS_APP_Init+0x30>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	4908      	ldr	r1, [pc, #32]	; (80084c4 <P2PS_APP_Init+0x34>)
 80084a4:	2000      	movs	r0, #0
 80084a6:	f7f8 fe8b 	bl	80011c0 <HW_TS_Create>
			P2PS_TimeChange_Timer_Callback);

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80084aa:	4b07      	ldr	r3, [pc, #28]	; (80084c8 <P2PS_APP_Init+0x38>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80084b0:	f000 f80c 	bl	80084cc <P2PS_APP_LED_BUTTON_context_Init>
  P2PS_APP_context_Init();
 80084b4:	f000 f828 	bl	8008508 <P2PS_APP_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 80084b8:	bf00      	nop
}
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	08008539 	.word	0x08008539
 80084c0:	08008529 	.word	0x08008529
 80084c4:	20000290 	.word	0x20000290
 80084c8:	20000284 	.word	0x20000284

080084cc <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80084d0:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80084d2:	2201      	movs	r2, #1
 80084d4:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80084d6:	4b07      	ldr	r3, [pc, #28]	; (80084f4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80084d8:	2200      	movs	r2, #0
 80084da:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80084dc:	4b05      	ldr	r3, [pc, #20]	; (80084f4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80084de:	2201      	movs	r2, #1
 80084e0:	721a      	strb	r2, [r3, #8]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80084e2:	4b04      	ldr	r3, [pc, #16]	; (80084f4 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	725a      	strb	r2, [r3, #9]
#endif

}
 80084e8:	bf00      	nop
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	20000284 	.word	0x20000284

080084f8 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80084fc:	2100      	movs	r1, #0
 80084fe:	2002      	movs	r0, #2
 8008500:	f000 fc02 	bl	8008d08 <UTIL_SEQ_SetTask>

  return;
 8008504:	bf00      	nop
}
 8008506:	bd80      	pop	{r7, pc}

08008508 <P2PS_APP_context_Init>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
static void P2PS_APP_context_Init(void)
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.TimeControl.TimeStamp = 0xF2;
 800850c:	4b05      	ldr	r3, [pc, #20]	; (8008524 <P2PS_APP_context_Init+0x1c>)
 800850e:	22f2      	movs	r2, #242	; 0xf2
 8008510:	809a      	strh	r2, [r3, #4]
	P2P_Server_App_Context.TimeControl.Value = 0x1A;
 8008512:	4b04      	ldr	r3, [pc, #16]	; (8008524 <P2PS_APP_context_Init+0x1c>)
 8008514:	221a      	movs	r2, #26
 8008516:	80da      	strh	r2, [r3, #6]
}
 8008518:	bf00      	nop
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	20000284 	.word	0x20000284

08008528 <P2PS_TimeChange_Timer_Callback>:

static void P2PS_TimeChange_Timer_Callback(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<CFG_MY_TASK_NOTIFY_TIME, CFG_SCH_PRIO_0);
 800852c:	2100      	movs	r1, #0
 800852e:	2010      	movs	r0, #16
 8008530:	f000 fbea 	bl	8008d08 <UTIL_SEQ_SetTask>
}
 8008534:	bf00      	nop
 8008536:	bd80      	pop	{r7, pc}

08008538 <P2PS_Send_Notification>:

void P2PS_Send_Notification(void)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
	uint8_t value[4];

	value[0] = (uint8_t)(timestamp >> 24);
 800853e:	4b1d      	ldr	r3, [pc, #116]	; (80085b4 <P2PS_Send_Notification+0x7c>)
 8008540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	0e02      	lsrs	r2, r0, #24
 800854e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008552:	160b      	asrs	r3, r1, #24
 8008554:	b2d3      	uxtb	r3, r2
 8008556:	713b      	strb	r3, [r7, #4]
	value[1] = (uint8_t)(timestamp >> 16);
 8008558:	4b16      	ldr	r3, [pc, #88]	; (80085b4 <P2PS_Send_Notification+0x7c>)
 800855a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800855e:	f04f 0200 	mov.w	r2, #0
 8008562:	f04f 0300 	mov.w	r3, #0
 8008566:	0c02      	lsrs	r2, r0, #16
 8008568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800856c:	140b      	asrs	r3, r1, #16
 800856e:	b2d3      	uxtb	r3, r2
 8008570:	717b      	strb	r3, [r7, #5]
	value[2] = (uint8_t)(timestamp >> 8);
 8008572:	4b10      	ldr	r3, [pc, #64]	; (80085b4 <P2PS_Send_Notification+0x7c>)
 8008574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008578:	f04f 0200 	mov.w	r2, #0
 800857c:	f04f 0300 	mov.w	r3, #0
 8008580:	0a02      	lsrs	r2, r0, #8
 8008582:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008586:	120b      	asrs	r3, r1, #8
 8008588:	b2d3      	uxtb	r3, r2
 800858a:	71bb      	strb	r3, [r7, #6]
	value[3] = (uint8_t)(timestamp);
 800858c:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <P2PS_Send_Notification+0x7c>)
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	b2d3      	uxtb	r3, r2
 8008594:	71fb      	strb	r3, [r7, #7]

  
   if(P2P_Server_App_Context.Notification_Status){ 
 8008596:	4b08      	ldr	r3, [pc, #32]	; (80085b8 <P2PS_Send_Notification+0x80>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d006      	beq.n	80085ac <P2PS_Send_Notification+0x74>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
    APP_DBG_MSG(" \n\r");
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&value);
 800859e:	1d3b      	adds	r3, r7, #4
 80085a0:	4619      	mov	r1, r3
 80085a2:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80085a6:	f7fe fdb5 	bl	8007114 <P2PS_STM_App_Update_Char>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
}
 80085ae:	3708      	adds	r7, #8
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000418 	.word	0x20000418
 80085b8:	20000284 	.word	0x20000284

080085bc <LL_PWR_EnableBootC2>:
{
 80085bc:	b480      	push	{r7}
 80085be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <LL_PWR_EnableBootC2+0x1c>)
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	4a04      	ldr	r2, [pc, #16]	; (80085d8 <LL_PWR_EnableBootC2+0x1c>)
 80085c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085ca:	60d3      	str	r3, [r2, #12]
}
 80085cc:	bf00      	nop
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	58000400 	.word	0x58000400

080085dc <LL_C2_EXTI_EnableEvent_32_63>:
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80085e4:	4b06      	ldr	r3, [pc, #24]	; (8008600 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80085e6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80085ea:	4905      	ldr	r1, [pc, #20]	; (8008600 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	58000800 	.word	0x58000800

08008604 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800860c:	4b05      	ldr	r3, [pc, #20]	; (8008624 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800860e:	6a1a      	ldr	r2, [r3, #32]
 8008610:	4904      	ldr	r1, [pc, #16]	; (8008624 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4313      	orrs	r3, r2
 8008616:	620b      	str	r3, [r1, #32]
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr
 8008624:	58000800 	.word	0x58000800

08008628 <LL_AHB3_GRP1_EnableClock>:
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008636:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4313      	orrs	r3, r2
 800863e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4013      	ands	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800864c:	68fb      	ldr	r3, [r7, #12]
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800865a:	b480      	push	{r7}
 800865c:	b085      	sub	sp, #20
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008666:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800866a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4313      	orrs	r3, r2
 8008672:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800867a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4013      	ands	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008684:	68fb      	ldr	r3, [r7, #12]
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <LL_C1_IPCC_EnableIT_TXF>:
{
 8008692:	b480      	push	{r7}
 8008694:	b083      	sub	sp, #12
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	601a      	str	r2, [r3, #0]
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <LL_C1_IPCC_EnableIT_RXO>:
{
 80086b2:	b480      	push	{r7}
 80086b4:	b083      	sub	sp, #12
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f043 0201 	orr.w	r2, r3, #1
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	601a      	str	r2, [r3, #0]
}
 80086c6:	bf00      	nop
 80086c8:	370c      	adds	r7, #12
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80086d2:	b480      	push	{r7}
 80086d4:	b083      	sub	sp, #12
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	041b      	lsls	r3, r3, #16
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	605a      	str	r2, [r3, #4]
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685a      	ldr	r2, [r3, #4]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	041b      	lsls	r3, r3, #16
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800871c:	b480      	push	{r7}
 800871e:	b083      	sub	sp, #12
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	685a      	ldr	r2, [r3, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	43db      	mvns	r3, r3
 800872e:	401a      	ands	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	605a      	str	r2, [r3, #4]
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	683a      	ldr	r2, [r7, #0]
 800874e:	609a      	str	r2, [r3, #8]
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <LL_C1_IPCC_SetFlag_CHx>:
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	041a      	lsls	r2, r3, #16
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	609a      	str	r2, [r3, #8]
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800877a:	b480      	push	{r7}
 800877c:	b083      	sub	sp, #12
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	4013      	ands	r3, r2
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d101      	bne.n	8008796 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008792:	2301      	movs	r3, #1
 8008794:	e000      	b.n	8008798 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	69da      	ldr	r2, [r3, #28]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	4013      	ands	r3, r2
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d101      	bne.n	80087c0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80087bc:	2301      	movs	r3, #1
 80087be:	e000      	b.n	80087c2 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
	...

080087d0 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80087d4:	2102      	movs	r1, #2
 80087d6:	4819      	ldr	r0, [pc, #100]	; (800883c <HW_IPCC_Rx_Handler+0x6c>)
 80087d8:	f7ff ffe4 	bl	80087a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d009      	beq.n	80087f6 <HW_IPCC_Rx_Handler+0x26>
 80087e2:	4b16      	ldr	r3, [pc, #88]	; (800883c <HW_IPCC_Rx_Handler+0x6c>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	43db      	mvns	r3, r3
 80087e8:	f003 0302 	and.w	r3, r3, #2
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d002      	beq.n	80087f6 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80087f0:	f000 f8ea 	bl	80089c8 <HW_IPCC_SYS_EvtHandler>
 80087f4:	e01f      	b.n	8008836 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80087f6:	2101      	movs	r1, #1
 80087f8:	4810      	ldr	r0, [pc, #64]	; (800883c <HW_IPCC_Rx_Handler+0x6c>)
 80087fa:	f7ff ffd3 	bl	80087a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <HW_IPCC_Rx_Handler+0x46>
 8008804:	4b0d      	ldr	r3, [pc, #52]	; (800883c <HW_IPCC_Rx_Handler+0x6c>)
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f003 0301 	and.w	r3, r3, #1
 800880c:	2b00      	cmp	r3, #0
 800880e:	d102      	bne.n	8008816 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8008810:	f000 f89e 	bl	8008950 <HW_IPCC_BLE_EvtHandler>
 8008814:	e00f      	b.n	8008836 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8008816:	2108      	movs	r1, #8
 8008818:	4808      	ldr	r0, [pc, #32]	; (800883c <HW_IPCC_Rx_Handler+0x6c>)
 800881a:	f7ff ffc3 	bl	80087a4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d009      	beq.n	8008838 <HW_IPCC_Rx_Handler+0x68>
 8008824:	4b05      	ldr	r3, [pc, #20]	; (800883c <HW_IPCC_Rx_Handler+0x6c>)
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	43db      	mvns	r3, r3
 800882a:	f003 0308 	and.w	r3, r3, #8
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8008832:	f000 f915 	bl	8008a60 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8008836:	bf00      	nop
 8008838:	bf00      	nop
}
 800883a:	bd80      	pop	{r7, pc}
 800883c:	58000c00 	.word	0x58000c00

08008840 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008844:	2102      	movs	r1, #2
 8008846:	4822      	ldr	r0, [pc, #136]	; (80088d0 <HW_IPCC_Tx_Handler+0x90>)
 8008848:	f7ff ff97 	bl	800877a <LL_C1_IPCC_IsActiveFlag_CHx>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d109      	bne.n	8008866 <HW_IPCC_Tx_Handler+0x26>
 8008852:	4b1f      	ldr	r3, [pc, #124]	; (80088d0 <HW_IPCC_Tx_Handler+0x90>)
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	43db      	mvns	r3, r3
 8008858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008860:	f000 f8a6 	bl	80089b0 <HW_IPCC_SYS_CmdEvtHandler>
 8008864:	e031      	b.n	80088ca <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008866:	2102      	movs	r1, #2
 8008868:	4819      	ldr	r0, [pc, #100]	; (80088d0 <HW_IPCC_Tx_Handler+0x90>)
 800886a:	f7ff ff86 	bl	800877a <LL_C1_IPCC_IsActiveFlag_CHx>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d109      	bne.n	8008888 <HW_IPCC_Tx_Handler+0x48>
 8008874:	4b16      	ldr	r3, [pc, #88]	; (80088d0 <HW_IPCC_Tx_Handler+0x90>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	43db      	mvns	r3, r3
 800887a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8008882:	f000 f895 	bl	80089b0 <HW_IPCC_SYS_CmdEvtHandler>
 8008886:	e020      	b.n	80088ca <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008888:	2108      	movs	r1, #8
 800888a:	4811      	ldr	r0, [pc, #68]	; (80088d0 <HW_IPCC_Tx_Handler+0x90>)
 800888c:	f7ff ff75 	bl	800877a <LL_C1_IPCC_IsActiveFlag_CHx>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d109      	bne.n	80088aa <HW_IPCC_Tx_Handler+0x6a>
 8008896:	4b0e      	ldr	r3, [pc, #56]	; (80088d0 <HW_IPCC_Tx_Handler+0x90>)
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	43db      	mvns	r3, r3
 800889c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 80088a4:	f000 f8be 	bl	8008a24 <HW_IPCC_MM_FreeBufHandler>
 80088a8:	e00f      	b.n	80088ca <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80088aa:	2120      	movs	r1, #32
 80088ac:	4808      	ldr	r0, [pc, #32]	; (80088d0 <HW_IPCC_Tx_Handler+0x90>)
 80088ae:	f7ff ff64 	bl	800877a <LL_C1_IPCC_IsActiveFlag_CHx>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d109      	bne.n	80088cc <HW_IPCC_Tx_Handler+0x8c>
 80088b8:	4b05      	ldr	r3, [pc, #20]	; (80088d0 <HW_IPCC_Tx_Handler+0x90>)
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	43db      	mvns	r3, r3
 80088be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d002      	beq.n	80088cc <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80088c6:	f000 f84f 	bl	8008968 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80088ca:	bf00      	nop
 80088cc:	bf00      	nop
}
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	58000c00 	.word	0x58000c00

080088d4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80088d8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80088dc:	f7ff febd 	bl	800865a <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80088e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80088e4:	f7ff fe7a 	bl	80085dc <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80088e8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80088ec:	f7ff fe8a 	bl	8008604 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80088f0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80088f2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80088f4:	f7ff fe62 	bl	80085bc <LL_PWR_EnableBootC2>

  return;
 80088f8:	bf00      	nop
}
 80088fa:	bd80      	pop	{r7, pc}

080088fc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008900:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008904:	f7ff fe90 	bl	8008628 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008908:	4806      	ldr	r0, [pc, #24]	; (8008924 <HW_IPCC_Init+0x28>)
 800890a:	f7ff fed2 	bl	80086b2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800890e:	4805      	ldr	r0, [pc, #20]	; (8008924 <HW_IPCC_Init+0x28>)
 8008910:	f7ff febf 	bl	8008692 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008914:	202c      	movs	r0, #44	; 0x2c
 8008916:	f7f9 ffa2 	bl	800285e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800891a:	202d      	movs	r0, #45	; 0x2d
 800891c:	f7f9 ff9f 	bl	800285e <HAL_NVIC_EnableIRQ>

  return;
 8008920:	bf00      	nop
}
 8008922:	bd80      	pop	{r7, pc}
 8008924:	58000c00 	.word	0x58000c00

08008928 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800892c:	2101      	movs	r1, #1
 800892e:	4802      	ldr	r0, [pc, #8]	; (8008938 <HW_IPCC_BLE_Init+0x10>)
 8008930:	f7ff fef4 	bl	800871c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008934:	bf00      	nop
}
 8008936:	bd80      	pop	{r7, pc}
 8008938:	58000c00 	.word	0x58000c00

0800893c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8008940:	2101      	movs	r1, #1
 8008942:	4802      	ldr	r0, [pc, #8]	; (800894c <HW_IPCC_BLE_SendCmd+0x10>)
 8008944:	f7ff ff0a 	bl	800875c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008948:	bf00      	nop
}
 800894a:	bd80      	pop	{r7, pc}
 800894c:	58000c00 	.word	0x58000c00

08008950 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8008954:	f7fe ffd6 	bl	8007904 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008958:	2101      	movs	r1, #1
 800895a:	4802      	ldr	r0, [pc, #8]	; (8008964 <HW_IPCC_BLE_EvtHandler+0x14>)
 800895c:	f7ff fef0 	bl	8008740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008960:	bf00      	nop
}
 8008962:	bd80      	pop	{r7, pc}
 8008964:	58000c00 	.word	0x58000c00

08008968 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800896c:	2120      	movs	r1, #32
 800896e:	4803      	ldr	r0, [pc, #12]	; (800897c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008970:	f7ff fec2 	bl	80086f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8008974:	f7fe fff6 	bl	8007964 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008978:	bf00      	nop
}
 800897a:	bd80      	pop	{r7, pc}
 800897c:	58000c00 	.word	0x58000c00

08008980 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008984:	2102      	movs	r1, #2
 8008986:	4802      	ldr	r0, [pc, #8]	; (8008990 <HW_IPCC_SYS_Init+0x10>)
 8008988:	f7ff fec8 	bl	800871c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800898c:	bf00      	nop
}
 800898e:	bd80      	pop	{r7, pc}
 8008990:	58000c00 	.word	0x58000c00

08008994 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008998:	2102      	movs	r1, #2
 800899a:	4804      	ldr	r0, [pc, #16]	; (80089ac <HW_IPCC_SYS_SendCmd+0x18>)
 800899c:	f7ff fede 	bl	800875c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80089a0:	2102      	movs	r1, #2
 80089a2:	4802      	ldr	r0, [pc, #8]	; (80089ac <HW_IPCC_SYS_SendCmd+0x18>)
 80089a4:	f7ff fe95 	bl	80086d2 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80089a8:	bf00      	nop
}
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	58000c00 	.word	0x58000c00

080089b0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80089b4:	2102      	movs	r1, #2
 80089b6:	4803      	ldr	r0, [pc, #12]	; (80089c4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80089b8:	f7ff fe9e 	bl	80086f8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80089bc:	f7ff f822 	bl	8007a04 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80089c0:	bf00      	nop
}
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	58000c00 	.word	0x58000c00

080089c8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80089cc:	f7ff f830 	bl	8007a30 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80089d0:	2102      	movs	r1, #2
 80089d2:	4802      	ldr	r0, [pc, #8]	; (80089dc <HW_IPCC_SYS_EvtHandler+0x14>)
 80089d4:	f7ff feb4 	bl	8008740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80089d8:	bf00      	nop
}
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	58000c00 	.word	0x58000c00

080089e0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80089e8:	2108      	movs	r1, #8
 80089ea:	480c      	ldr	r0, [pc, #48]	; (8008a1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80089ec:	f7ff fec5 	bl	800877a <LL_C1_IPCC_IsActiveFlag_CHx>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d007      	beq.n	8008a06 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80089f6:	4a0a      	ldr	r2, [pc, #40]	; (8008a20 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80089fc:	2108      	movs	r1, #8
 80089fe:	4807      	ldr	r0, [pc, #28]	; (8008a1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008a00:	f7ff fe67 	bl	80086d2 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8008a04:	e006      	b.n	8008a14 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008a0a:	2108      	movs	r1, #8
 8008a0c:	4803      	ldr	r0, [pc, #12]	; (8008a1c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008a0e:	f7ff fea5 	bl	800875c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8008a12:	bf00      	nop
}
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	58000c00 	.word	0x58000c00
 8008a20:	20000334 	.word	0x20000334

08008a24 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008a28:	2108      	movs	r1, #8
 8008a2a:	4806      	ldr	r0, [pc, #24]	; (8008a44 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008a2c:	f7ff fe64 	bl	80086f8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008a36:	2108      	movs	r1, #8
 8008a38:	4802      	ldr	r0, [pc, #8]	; (8008a44 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008a3a:	f7ff fe8f 	bl	800875c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8008a3e:	bf00      	nop
}
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	58000c00 	.word	0x58000c00
 8008a48:	20000334 	.word	0x20000334

08008a4c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008a50:	2108      	movs	r1, #8
 8008a52:	4802      	ldr	r0, [pc, #8]	; (8008a5c <HW_IPCC_TRACES_Init+0x10>)
 8008a54:	f7ff fe62 	bl	800871c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008a58:	bf00      	nop
}
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	58000c00 	.word	0x58000c00

08008a60 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8008a64:	f7ff f88c 	bl	8007b80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008a68:	2108      	movs	r1, #8
 8008a6a:	4802      	ldr	r0, [pc, #8]	; (8008a74 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008a6c:	f7ff fe68 	bl	8008740 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008a70:	bf00      	nop
}
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	58000c00 	.word	0x58000c00

08008a78 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008a7c:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <UTIL_LPM_Init+0x1c>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8008a82:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <UTIL_LPM_Init+0x20>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008a88:	bf00      	nop
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000338 	.word	0x20000338
 8008a98:	2000033c 	.word	0x2000033c

08008a9c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8008aac:	613b      	str	r3, [r7, #16]
  return(result);
 8008aae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008ab0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008ab2:	b672      	cpsid	i
}
 8008ab4:	bf00      	nop
  
  switch(state)
 8008ab6:	78fb      	ldrb	r3, [r7, #3]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d008      	beq.n	8008ace <UTIL_LPM_SetOffMode+0x32>
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d10e      	bne.n	8008ade <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008ac0:	4b0d      	ldr	r3, [pc, #52]	; (8008af8 <UTIL_LPM_SetOffMode+0x5c>)
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	4a0b      	ldr	r2, [pc, #44]	; (8008af8 <UTIL_LPM_SetOffMode+0x5c>)
 8008aca:	6013      	str	r3, [r2, #0]
      break;
 8008acc:	e008      	b.n	8008ae0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	43da      	mvns	r2, r3
 8008ad2:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <UTIL_LPM_SetOffMode+0x5c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	4a07      	ldr	r2, [pc, #28]	; (8008af8 <UTIL_LPM_SetOffMode+0x5c>)
 8008ada:	6013      	str	r3, [r2, #0]
      break;
 8008adc:	e000      	b.n	8008ae0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008ade:	bf00      	nop
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f383 8810 	msr	PRIMASK, r3
}
 8008aea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008aec:	bf00      	nop
 8008aee:	371c      	adds	r7, #28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	2000033c 	.word	0x2000033c

08008afc <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08c      	sub	sp, #48	; 0x30
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8008b04:	4b67      	ldr	r3, [pc, #412]	; (8008ca4 <UTIL_SEQ_Run+0x1a8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8008b0a:	4b66      	ldr	r3, [pc, #408]	; (8008ca4 <UTIL_SEQ_Run+0x1a8>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4013      	ands	r3, r2
 8008b12:	4a64      	ldr	r2, [pc, #400]	; (8008ca4 <UTIL_SEQ_Run+0x1a8>)
 8008b14:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008b16:	e083      	b.n	8008c20 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008b1c:	e002      	b.n	8008b24 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	3301      	adds	r3, #1
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8008b24:	4a60      	ldr	r2, [pc, #384]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008b2c:	4b5f      	ldr	r3, [pc, #380]	; (8008cac <UTIL_SEQ_Run+0x1b0>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	401a      	ands	r2, r3
 8008b32:	4b5c      	ldr	r3, [pc, #368]	; (8008ca4 <UTIL_SEQ_Run+0x1a8>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4013      	ands	r3, r2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d0f0      	beq.n	8008b1e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8008b3c:	4a5a      	ldr	r2, [pc, #360]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b40:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008b44:	4b59      	ldr	r3, [pc, #356]	; (8008cac <UTIL_SEQ_Run+0x1b0>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	401a      	ands	r2, r3
 8008b4a:	4b56      	ldr	r3, [pc, #344]	; (8008ca4 <UTIL_SEQ_Run+0x1a8>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4013      	ands	r3, r2
 8008b50:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8008b52:	4a55      	ldr	r2, [pc, #340]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	4413      	add	r3, r2
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	4013      	ands	r3, r2
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d106      	bne.n	8008b72 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008b64:	4a50      	ldr	r2, [pc, #320]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b70:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8008b72:	4a4d      	ldr	r2, [pc, #308]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	4413      	add	r3, r2
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7e:	4013      	ands	r3, r2
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 f99d 	bl	8008ec0 <SEQ_BitPosition>
 8008b86:	4603      	mov	r3, r0
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b49      	ldr	r3, [pc, #292]	; (8008cb0 <UTIL_SEQ_Run+0x1b4>)
 8008b8c:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008b8e:	4a46      	ldr	r2, [pc, #280]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	00db      	lsls	r3, r3, #3
 8008b94:	4413      	add	r3, r2
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	4b45      	ldr	r3, [pc, #276]	; (8008cb0 <UTIL_SEQ_Run+0x1b4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2101      	movs	r1, #1
 8008b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba2:	43db      	mvns	r3, r3
 8008ba4:	401a      	ands	r2, r3
 8008ba6:	4940      	ldr	r1, [pc, #256]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	00db      	lsls	r3, r3, #3
 8008bac:	440b      	add	r3, r1
 8008bae:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8008bb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8008bb6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008bb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bba:	b672      	cpsid	i
}
 8008bbc:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008bbe:	4b3c      	ldr	r3, [pc, #240]	; (8008cb0 <UTIL_SEQ_Run+0x1b4>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	43da      	mvns	r2, r3
 8008bca:	4b3a      	ldr	r3, [pc, #232]	; (8008cb4 <UTIL_SEQ_Run+0x1b8>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	4a38      	ldr	r2, [pc, #224]	; (8008cb4 <UTIL_SEQ_Run+0x1b8>)
 8008bd2:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd8:	e013      	b.n	8008c02 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bdc:	3b01      	subs	r3, #1
 8008bde:	4a32      	ldr	r2, [pc, #200]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008be0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008be4:	4b32      	ldr	r3, [pc, #200]	; (8008cb0 <UTIL_SEQ_Run+0x1b4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2201      	movs	r2, #1
 8008bea:	fa02 f303 	lsl.w	r3, r2, r3
 8008bee:	43da      	mvns	r2, r3
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	400a      	ands	r2, r1
 8008bf6:	492c      	ldr	r1, [pc, #176]	; (8008ca8 <UTIL_SEQ_Run+0x1ac>)
 8008bf8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e8      	bne.n	8008bda <UTIL_SEQ_Run+0xde>
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f383 8810 	msr	PRIMASK, r3
}
 8008c12:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008c14:	4b26      	ldr	r3, [pc, #152]	; (8008cb0 <UTIL_SEQ_Run+0x1b4>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a27      	ldr	r2, [pc, #156]	; (8008cb8 <UTIL_SEQ_Run+0x1bc>)
 8008c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c1e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8008c20:	4b24      	ldr	r3, [pc, #144]	; (8008cb4 <UTIL_SEQ_Run+0x1b8>)
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	4b21      	ldr	r3, [pc, #132]	; (8008cac <UTIL_SEQ_Run+0x1b0>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	401a      	ands	r2, r3
 8008c2a:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <UTIL_SEQ_Run+0x1a8>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d007      	beq.n	8008c44 <UTIL_SEQ_Run+0x148>
 8008c34:	4b21      	ldr	r3, [pc, #132]	; (8008cbc <UTIL_SEQ_Run+0x1c0>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	4b21      	ldr	r3, [pc, #132]	; (8008cc0 <UTIL_SEQ_Run+0x1c4>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f43f af6a 	beq.w	8008b18 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008c44:	4b1a      	ldr	r3, [pc, #104]	; (8008cb0 <UTIL_SEQ_Run+0x1b4>)
 8008c46:	f04f 32ff 	mov.w	r2, #4294967295
 8008c4a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008c4c:	f000 f92a 	bl	8008ea4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c50:	f3ef 8310 	mrs	r3, PRIMASK
 8008c54:	613b      	str	r3, [r7, #16]
  return(result);
 8008c56:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008c58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c5a:	b672      	cpsid	i
}
 8008c5c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8008c5e:	4b15      	ldr	r3, [pc, #84]	; (8008cb4 <UTIL_SEQ_Run+0x1b8>)
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	4b12      	ldr	r3, [pc, #72]	; (8008cac <UTIL_SEQ_Run+0x1b0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	401a      	ands	r2, r3
 8008c68:	4b0e      	ldr	r3, [pc, #56]	; (8008ca4 <UTIL_SEQ_Run+0x1a8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d108      	bne.n	8008c84 <UTIL_SEQ_Run+0x188>
 8008c72:	4b12      	ldr	r3, [pc, #72]	; (8008cbc <UTIL_SEQ_Run+0x1c0>)
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	4b12      	ldr	r3, [pc, #72]	; (8008cc0 <UTIL_SEQ_Run+0x1c4>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 8008c80:	f7f7 fcfd 	bl	800067e <UTIL_SEQ_Idle>
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f383 8810 	msr	PRIMASK, r3
}
 8008c8e:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 8008c90:	f000 f90f 	bl	8008eb2 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008c94:	4a03      	ldr	r2, [pc, #12]	; (8008ca4 <UTIL_SEQ_Run+0x1a8>)
 8008c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c98:	6013      	str	r3, [r2, #0]

  return;
 8008c9a:	bf00      	nop
}
 8008c9c:	3730      	adds	r7, #48	; 0x30
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20000040 	.word	0x20000040
 8008ca8:	200003d0 	.word	0x200003d0
 8008cac:	2000003c 	.word	0x2000003c
 8008cb0:	2000034c 	.word	0x2000034c
 8008cb4:	20000340 	.word	0x20000340
 8008cb8:	20000350 	.word	0x20000350
 8008cbc:	20000344 	.word	0x20000344
 8008cc0:	20000348 	.word	0x20000348

08008cc4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b088      	sub	sp, #32
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8008cd4:	617b      	str	r3, [r7, #20]
  return(result);
 8008cd6:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008cd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cda:	b672      	cpsid	i
}
 8008cdc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f000 f8ee 	bl	8008ec0 <SEQ_BitPosition>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4a06      	ldr	r2, [pc, #24]	; (8008d04 <UTIL_SEQ_RegTask+0x40>)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	f383 8810 	msr	PRIMASK, r3
}
 8008cfa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008cfc:	bf00      	nop
}
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	20000350 	.word	0x20000350

08008d08 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d12:	f3ef 8310 	mrs	r3, PRIMASK
 8008d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d18:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d1c:	b672      	cpsid	i
}
 8008d1e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008d20:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <UTIL_SEQ_SetTask+0x50>)
 8008d22:	681a      	ldr	r2, [r3, #0]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	4a0b      	ldr	r2, [pc, #44]	; (8008d58 <UTIL_SEQ_SetTask+0x50>)
 8008d2a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008d2c:	4a0b      	ldr	r2, [pc, #44]	; (8008d5c <UTIL_SEQ_SetTask+0x54>)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	431a      	orrs	r2, r3
 8008d38:	4908      	ldr	r1, [pc, #32]	; (8008d5c <UTIL_SEQ_SetTask+0x54>)
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	f383 8810 	msr	PRIMASK, r3
}
 8008d4a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008d4c:	bf00      	nop
}
 8008d4e:	371c      	adds	r7, #28
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr
 8008d58:	20000340 	.word	0x20000340
 8008d5c:	200003d0 	.word	0x200003d0

08008d60 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d68:	f3ef 8310 	mrs	r3, PRIMASK
 8008d6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008d70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d72:	b672      	cpsid	i
}
 8008d74:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	43da      	mvns	r2, r3
 8008d7a:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <UTIL_SEQ_PauseTask+0x3c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	4a06      	ldr	r2, [pc, #24]	; (8008d9c <UTIL_SEQ_PauseTask+0x3c>)
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f383 8810 	msr	PRIMASK, r3
}
 8008d8e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008d90:	bf00      	nop
}
 8008d92:	371c      	adds	r7, #28
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr
 8008d9c:	2000003c 	.word	0x2000003c

08008da0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008da8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dac:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008db0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008db2:	b672      	cpsid	i
}
 8008db4:	bf00      	nop

  TaskMask |= TaskId_bm;
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <UTIL_SEQ_ResumeTask+0x3c>)
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	4a07      	ldr	r2, [pc, #28]	; (8008ddc <UTIL_SEQ_ResumeTask+0x3c>)
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f383 8810 	msr	PRIMASK, r3
}
 8008dcc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008dce:	bf00      	nop
}
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	2000003c 	.word	0x2000003c

08008de0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008de8:	f3ef 8310 	mrs	r3, PRIMASK
 8008dec:	60fb      	str	r3, [r7, #12]
  return(result);
 8008dee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008df0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008df2:	b672      	cpsid	i
}
 8008df4:	bf00      	nop

  EvtSet |= EvtId_bm;
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <UTIL_SEQ_SetEvt+0x3c>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	4a07      	ldr	r2, [pc, #28]	; (8008e1c <UTIL_SEQ_SetEvt+0x3c>)
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f383 8810 	msr	PRIMASK, r3
}
 8008e0c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008e0e:	bf00      	nop
}
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	20000344 	.word	0x20000344

08008e20 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8008e28:	4b1b      	ldr	r3, [pc, #108]	; (8008e98 <UTIL_SEQ_WaitEvt+0x78>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008e2e:	4b1a      	ldr	r3, [pc, #104]	; (8008e98 <UTIL_SEQ_WaitEvt+0x78>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e36:	d102      	bne.n	8008e3e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	617b      	str	r3, [r7, #20]
 8008e3c:	e005      	b.n	8008e4a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 8008e3e:	4b16      	ldr	r3, [pc, #88]	; (8008e98 <UTIL_SEQ_WaitEvt+0x78>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2201      	movs	r2, #1
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008e4a:	4b14      	ldr	r3, [pc, #80]	; (8008e9c <UTIL_SEQ_WaitEvt+0x7c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 8008e50:	4a12      	ldr	r2, [pc, #72]	; (8008e9c <UTIL_SEQ_WaitEvt+0x7c>)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 8008e56:	e005      	b.n	8008e64 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8008e58:	4b10      	ldr	r3, [pc, #64]	; (8008e9c <UTIL_SEQ_WaitEvt+0x7c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6978      	ldr	r0, [r7, #20]
 8008e60:	f7f7 fc14 	bl	800068c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 8008e64:	4b0e      	ldr	r3, [pc, #56]	; (8008ea0 <UTIL_SEQ_WaitEvt+0x80>)
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <UTIL_SEQ_WaitEvt+0x7c>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d0f2      	beq.n	8008e58 <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008e72:	4a09      	ldr	r2, [pc, #36]	; (8008e98 <UTIL_SEQ_WaitEvt+0x78>)
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 8008e78:	4b08      	ldr	r3, [pc, #32]	; (8008e9c <UTIL_SEQ_WaitEvt+0x7c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	43da      	mvns	r2, r3
 8008e7e:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <UTIL_SEQ_WaitEvt+0x80>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4013      	ands	r3, r2
 8008e84:	4a06      	ldr	r2, [pc, #24]	; (8008ea0 <UTIL_SEQ_WaitEvt+0x80>)
 8008e86:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 8008e88:	4a04      	ldr	r2, [pc, #16]	; (8008e9c <UTIL_SEQ_WaitEvt+0x7c>)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6013      	str	r3, [r2, #0]

  return;
 8008e8e:	bf00      	nop
}
 8008e90:	3718      	adds	r7, #24
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	2000034c 	.word	0x2000034c
 8008e9c:	20000348 	.word	0x20000348
 8008ea0:	20000344 	.word	0x20000344

08008ea4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008ea8:	bf00      	nop
}
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr

08008eb2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008eb6:	bf00      	nop
}
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	0c1b      	lsrs	r3, r3, #16
 8008ed0:	041b      	lsls	r3, r3, #16
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d104      	bne.n	8008ee0 <SEQ_BitPosition+0x20>
 8008ed6:	2310      	movs	r3, #16
 8008ed8:	73fb      	strb	r3, [r7, #15]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	041b      	lsls	r3, r3, #16
 8008ede:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d105      	bne.n	8008ef6 <SEQ_BitPosition+0x36>
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	3308      	adds	r3, #8
 8008eee:	73fb      	strb	r3, [r7, #15]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	021b      	lsls	r3, r3, #8
 8008ef4:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d105      	bne.n	8008f0c <SEQ_BitPosition+0x4c>
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
 8008f02:	3304      	adds	r3, #4
 8008f04:	73fb      	strb	r3, [r7, #15]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	0f1b      	lsrs	r3, r3, #28
 8008f10:	4a07      	ldr	r2, [pc, #28]	; (8008f30 <SEQ_BitPosition+0x70>)
 8008f12:	5cd2      	ldrb	r2, [r2, r3]
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	4413      	add	r3, r2
 8008f18:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	f1c3 031f 	rsb	r3, r3, #31
 8008f20:	b2db      	uxtb	r3, r3
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	0800a84c 	.word	0x0800a84c

08008f34 <__libc_init_array>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	4d0d      	ldr	r5, [pc, #52]	; (8008f6c <__libc_init_array+0x38>)
 8008f38:	4c0d      	ldr	r4, [pc, #52]	; (8008f70 <__libc_init_array+0x3c>)
 8008f3a:	1b64      	subs	r4, r4, r5
 8008f3c:	10a4      	asrs	r4, r4, #2
 8008f3e:	2600      	movs	r6, #0
 8008f40:	42a6      	cmp	r6, r4
 8008f42:	d109      	bne.n	8008f58 <__libc_init_array+0x24>
 8008f44:	4d0b      	ldr	r5, [pc, #44]	; (8008f74 <__libc_init_array+0x40>)
 8008f46:	4c0c      	ldr	r4, [pc, #48]	; (8008f78 <__libc_init_array+0x44>)
 8008f48:	f001 fb44 	bl	800a5d4 <_init>
 8008f4c:	1b64      	subs	r4, r4, r5
 8008f4e:	10a4      	asrs	r4, r4, #2
 8008f50:	2600      	movs	r6, #0
 8008f52:	42a6      	cmp	r6, r4
 8008f54:	d105      	bne.n	8008f62 <__libc_init_array+0x2e>
 8008f56:	bd70      	pop	{r4, r5, r6, pc}
 8008f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f5c:	4798      	blx	r3
 8008f5e:	3601      	adds	r6, #1
 8008f60:	e7ee      	b.n	8008f40 <__libc_init_array+0xc>
 8008f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f66:	4798      	blx	r3
 8008f68:	3601      	adds	r6, #1
 8008f6a:	e7f2      	b.n	8008f52 <__libc_init_array+0x1e>
 8008f6c:	0800aad8 	.word	0x0800aad8
 8008f70:	0800aad8 	.word	0x0800aad8
 8008f74:	0800aad8 	.word	0x0800aad8
 8008f78:	0800aadc 	.word	0x0800aadc

08008f7c <memcpy>:
 8008f7c:	440a      	add	r2, r1
 8008f7e:	4291      	cmp	r1, r2
 8008f80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f84:	d100      	bne.n	8008f88 <memcpy+0xc>
 8008f86:	4770      	bx	lr
 8008f88:	b510      	push	{r4, lr}
 8008f8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f92:	4291      	cmp	r1, r2
 8008f94:	d1f9      	bne.n	8008f8a <memcpy+0xe>
 8008f96:	bd10      	pop	{r4, pc}

08008f98 <memset>:
 8008f98:	4402      	add	r2, r0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d100      	bne.n	8008fa2 <memset+0xa>
 8008fa0:	4770      	bx	lr
 8008fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fa6:	e7f9      	b.n	8008f9c <memset+0x4>

08008fa8 <validate_structure>:
 8008fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008faa:	6801      	ldr	r1, [r0, #0]
 8008fac:	293b      	cmp	r1, #59	; 0x3b
 8008fae:	4604      	mov	r4, r0
 8008fb0:	d911      	bls.n	8008fd6 <validate_structure+0x2e>
 8008fb2:	223c      	movs	r2, #60	; 0x3c
 8008fb4:	4668      	mov	r0, sp
 8008fb6:	f000 fcab 	bl	8009910 <div>
 8008fba:	9a01      	ldr	r2, [sp, #4]
 8008fbc:	6863      	ldr	r3, [r4, #4]
 8008fbe:	9900      	ldr	r1, [sp, #0]
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	440b      	add	r3, r1
 8008fc4:	6063      	str	r3, [r4, #4]
 8008fc6:	bfbb      	ittet	lt
 8008fc8:	323c      	addlt	r2, #60	; 0x3c
 8008fca:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008fce:	6022      	strge	r2, [r4, #0]
 8008fd0:	6022      	strlt	r2, [r4, #0]
 8008fd2:	bfb8      	it	lt
 8008fd4:	6063      	strlt	r3, [r4, #4]
 8008fd6:	6861      	ldr	r1, [r4, #4]
 8008fd8:	293b      	cmp	r1, #59	; 0x3b
 8008fda:	d911      	bls.n	8009000 <validate_structure+0x58>
 8008fdc:	223c      	movs	r2, #60	; 0x3c
 8008fde:	4668      	mov	r0, sp
 8008fe0:	f000 fc96 	bl	8009910 <div>
 8008fe4:	9a01      	ldr	r2, [sp, #4]
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	9900      	ldr	r1, [sp, #0]
 8008fea:	2a00      	cmp	r2, #0
 8008fec:	440b      	add	r3, r1
 8008fee:	60a3      	str	r3, [r4, #8]
 8008ff0:	bfbb      	ittet	lt
 8008ff2:	323c      	addlt	r2, #60	; 0x3c
 8008ff4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8008ff8:	6062      	strge	r2, [r4, #4]
 8008ffa:	6062      	strlt	r2, [r4, #4]
 8008ffc:	bfb8      	it	lt
 8008ffe:	60a3      	strlt	r3, [r4, #8]
 8009000:	68a1      	ldr	r1, [r4, #8]
 8009002:	2917      	cmp	r1, #23
 8009004:	d911      	bls.n	800902a <validate_structure+0x82>
 8009006:	2218      	movs	r2, #24
 8009008:	4668      	mov	r0, sp
 800900a:	f000 fc81 	bl	8009910 <div>
 800900e:	9a01      	ldr	r2, [sp, #4]
 8009010:	68e3      	ldr	r3, [r4, #12]
 8009012:	9900      	ldr	r1, [sp, #0]
 8009014:	2a00      	cmp	r2, #0
 8009016:	440b      	add	r3, r1
 8009018:	60e3      	str	r3, [r4, #12]
 800901a:	bfbb      	ittet	lt
 800901c:	3218      	addlt	r2, #24
 800901e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009022:	60a2      	strge	r2, [r4, #8]
 8009024:	60a2      	strlt	r2, [r4, #8]
 8009026:	bfb8      	it	lt
 8009028:	60e3      	strlt	r3, [r4, #12]
 800902a:	6921      	ldr	r1, [r4, #16]
 800902c:	290b      	cmp	r1, #11
 800902e:	d911      	bls.n	8009054 <validate_structure+0xac>
 8009030:	220c      	movs	r2, #12
 8009032:	4668      	mov	r0, sp
 8009034:	f000 fc6c 	bl	8009910 <div>
 8009038:	9a01      	ldr	r2, [sp, #4]
 800903a:	6963      	ldr	r3, [r4, #20]
 800903c:	9900      	ldr	r1, [sp, #0]
 800903e:	2a00      	cmp	r2, #0
 8009040:	440b      	add	r3, r1
 8009042:	6163      	str	r3, [r4, #20]
 8009044:	bfbb      	ittet	lt
 8009046:	320c      	addlt	r2, #12
 8009048:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800904c:	6122      	strge	r2, [r4, #16]
 800904e:	6122      	strlt	r2, [r4, #16]
 8009050:	bfb8      	it	lt
 8009052:	6163      	strlt	r3, [r4, #20]
 8009054:	6963      	ldr	r3, [r4, #20]
 8009056:	0799      	lsls	r1, r3, #30
 8009058:	d120      	bne.n	800909c <validate_structure+0xf4>
 800905a:	2164      	movs	r1, #100	; 0x64
 800905c:	fb93 f2f1 	sdiv	r2, r3, r1
 8009060:	fb01 3212 	mls	r2, r1, r2, r3
 8009064:	b9e2      	cbnz	r2, 80090a0 <validate_structure+0xf8>
 8009066:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800906a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800906e:	fb93 f2f1 	sdiv	r2, r3, r1
 8009072:	fb01 3312 	mls	r3, r1, r2, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	bf14      	ite	ne
 800907a:	231c      	movne	r3, #28
 800907c:	231d      	moveq	r3, #29
 800907e:	68e2      	ldr	r2, [r4, #12]
 8009080:	2a00      	cmp	r2, #0
 8009082:	dc0f      	bgt.n	80090a4 <validate_structure+0xfc>
 8009084:	4f33      	ldr	r7, [pc, #204]	; (8009154 <validate_structure+0x1ac>)
 8009086:	260b      	movs	r6, #11
 8009088:	2064      	movs	r0, #100	; 0x64
 800908a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800908e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009092:	f1bc 0f00 	cmp.w	ip, #0
 8009096:	dd31      	ble.n	80090fc <validate_structure+0x154>
 8009098:	b003      	add	sp, #12
 800909a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800909c:	231c      	movs	r3, #28
 800909e:	e7ee      	b.n	800907e <validate_structure+0xd6>
 80090a0:	231d      	movs	r3, #29
 80090a2:	e7ec      	b.n	800907e <validate_structure+0xd6>
 80090a4:	4f2b      	ldr	r7, [pc, #172]	; (8009154 <validate_structure+0x1ac>)
 80090a6:	f04f 0c00 	mov.w	ip, #0
 80090aa:	2564      	movs	r5, #100	; 0x64
 80090ac:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80090b0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80090b4:	2a01      	cmp	r2, #1
 80090b6:	bf14      	ite	ne
 80090b8:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 80090bc:	4618      	moveq	r0, r3
 80090be:	4281      	cmp	r1, r0
 80090c0:	ddea      	ble.n	8009098 <validate_structure+0xf0>
 80090c2:	3201      	adds	r2, #1
 80090c4:	1a09      	subs	r1, r1, r0
 80090c6:	2a0c      	cmp	r2, #12
 80090c8:	60e1      	str	r1, [r4, #12]
 80090ca:	6122      	str	r2, [r4, #16]
 80090cc:	d1f0      	bne.n	80090b0 <validate_structure+0x108>
 80090ce:	6963      	ldr	r3, [r4, #20]
 80090d0:	1c5a      	adds	r2, r3, #1
 80090d2:	0791      	lsls	r1, r2, #30
 80090d4:	e9c4 c204 	strd	ip, r2, [r4, #16]
 80090d8:	d137      	bne.n	800914a <validate_structure+0x1a2>
 80090da:	fb92 f1f5 	sdiv	r1, r2, r5
 80090de:	fb05 2211 	mls	r2, r5, r1, r2
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	d133      	bne.n	800914e <validate_structure+0x1a6>
 80090e6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80090ea:	fb93 f2f6 	sdiv	r2, r3, r6
 80090ee:	fb06 3312 	mls	r3, r6, r2, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	bf14      	ite	ne
 80090f6:	231c      	movne	r3, #28
 80090f8:	231d      	moveq	r3, #29
 80090fa:	e7d9      	b.n	80090b0 <validate_structure+0x108>
 80090fc:	6921      	ldr	r1, [r4, #16]
 80090fe:	3901      	subs	r1, #1
 8009100:	6121      	str	r1, [r4, #16]
 8009102:	3101      	adds	r1, #1
 8009104:	d114      	bne.n	8009130 <validate_structure+0x188>
 8009106:	6963      	ldr	r3, [r4, #20]
 8009108:	1e59      	subs	r1, r3, #1
 800910a:	078a      	lsls	r2, r1, #30
 800910c:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8009110:	d117      	bne.n	8009142 <validate_structure+0x19a>
 8009112:	fb91 f2f0 	sdiv	r2, r1, r0
 8009116:	fb00 1112 	mls	r1, r0, r2, r1
 800911a:	b9a1      	cbnz	r1, 8009146 <validate_structure+0x19e>
 800911c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009120:	fb93 f2f5 	sdiv	r2, r3, r5
 8009124:	fb05 3312 	mls	r3, r5, r2, r3
 8009128:	2b00      	cmp	r3, #0
 800912a:	bf14      	ite	ne
 800912c:	231c      	movne	r3, #28
 800912e:	231d      	moveq	r3, #29
 8009130:	6922      	ldr	r2, [r4, #16]
 8009132:	2a01      	cmp	r2, #1
 8009134:	bf14      	ite	ne
 8009136:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800913a:	461a      	moveq	r2, r3
 800913c:	4462      	add	r2, ip
 800913e:	60e2      	str	r2, [r4, #12]
 8009140:	e7a5      	b.n	800908e <validate_structure+0xe6>
 8009142:	231c      	movs	r3, #28
 8009144:	e7f4      	b.n	8009130 <validate_structure+0x188>
 8009146:	231d      	movs	r3, #29
 8009148:	e7f2      	b.n	8009130 <validate_structure+0x188>
 800914a:	231c      	movs	r3, #28
 800914c:	e7b0      	b.n	80090b0 <validate_structure+0x108>
 800914e:	231d      	movs	r3, #29
 8009150:	e7ae      	b.n	80090b0 <validate_structure+0x108>
 8009152:	bf00      	nop
 8009154:	0800a85c 	.word	0x0800a85c

08009158 <mktime>:
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	b08b      	sub	sp, #44	; 0x2c
 800915e:	4605      	mov	r5, r0
 8009160:	f000 fc2c 	bl	80099bc <__gettzinfo>
 8009164:	4607      	mov	r7, r0
 8009166:	4628      	mov	r0, r5
 8009168:	f7ff ff1e 	bl	8008fa8 <validate_structure>
 800916c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009170:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 8009174:	68a8      	ldr	r0, [r5, #8]
 8009176:	696e      	ldr	r6, [r5, #20]
 8009178:	fb0a 2303 	mla	r3, sl, r3, r2
 800917c:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 8009180:	fb0a 3a00 	mla	sl, sl, r0, r3
 8009184:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 8009188:	4ac3      	ldr	r2, [pc, #780]	; (8009498 <mktime+0x340>)
 800918a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800918e:	3c01      	subs	r4, #1
 8009190:	2b01      	cmp	r3, #1
 8009192:	4414      	add	r4, r2
 8009194:	dd11      	ble.n	80091ba <mktime+0x62>
 8009196:	07b1      	lsls	r1, r6, #30
 8009198:	d10f      	bne.n	80091ba <mktime+0x62>
 800919a:	2264      	movs	r2, #100	; 0x64
 800919c:	fb96 f3f2 	sdiv	r3, r6, r2
 80091a0:	fb02 6313 	mls	r3, r2, r3, r6
 80091a4:	b943      	cbnz	r3, 80091b8 <mktime+0x60>
 80091a6:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 80091aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80091ae:	fb91 f3f2 	sdiv	r3, r1, r2
 80091b2:	fb02 1313 	mls	r3, r2, r3, r1
 80091b6:	b903      	cbnz	r3, 80091ba <mktime+0x62>
 80091b8:	3401      	adds	r4, #1
 80091ba:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 80091be:	3310      	adds	r3, #16
 80091c0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80091c4:	4293      	cmp	r3, r2
 80091c6:	61ec      	str	r4, [r5, #28]
 80091c8:	f200 8161 	bhi.w	800948e <mktime+0x336>
 80091cc:	2e46      	cmp	r6, #70	; 0x46
 80091ce:	dd77      	ble.n	80092c0 <mktime+0x168>
 80091d0:	2346      	movs	r3, #70	; 0x46
 80091d2:	f240 1e6d 	movw	lr, #365	; 0x16d
 80091d6:	2164      	movs	r1, #100	; 0x64
 80091d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80091dc:	079a      	lsls	r2, r3, #30
 80091de:	d169      	bne.n	80092b4 <mktime+0x15c>
 80091e0:	fb93 f2f1 	sdiv	r2, r3, r1
 80091e4:	fb01 3212 	mls	r2, r1, r2, r3
 80091e8:	2a00      	cmp	r2, #0
 80091ea:	d166      	bne.n	80092ba <mktime+0x162>
 80091ec:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80091f0:	fb9c f2f0 	sdiv	r2, ip, r0
 80091f4:	fb00 c212 	mls	r2, r0, r2, ip
 80091f8:	2a00      	cmp	r2, #0
 80091fa:	bf14      	ite	ne
 80091fc:	4672      	movne	r2, lr
 80091fe:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009202:	3301      	adds	r3, #1
 8009204:	429e      	cmp	r6, r3
 8009206:	4414      	add	r4, r2
 8009208:	d1e8      	bne.n	80091dc <mktime+0x84>
 800920a:	4ba4      	ldr	r3, [pc, #656]	; (800949c <mktime+0x344>)
 800920c:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8009210:	fbc3 ab04 	smlal	sl, fp, r3, r4
 8009214:	f000 f9ee 	bl	80095f4 <__tz_lock>
 8009218:	f000 f9f8 	bl	800960c <_tzset_unlocked>
 800921c:	4ba0      	ldr	r3, [pc, #640]	; (80094a0 <mktime+0x348>)
 800921e:	f8d3 9000 	ldr.w	r9, [r3]
 8009222:	f1b9 0f00 	cmp.w	r9, #0
 8009226:	d03f      	beq.n	80092a8 <mktime+0x150>
 8009228:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800922c:	6968      	ldr	r0, [r5, #20]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f1b9 0f01 	cmp.w	r9, #1
 8009234:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8009238:	46c8      	mov	r8, r9
 800923a:	bfa8      	it	ge
 800923c:	f04f 0801 	movge.w	r8, #1
 8009240:	4283      	cmp	r3, r0
 8009242:	d17f      	bne.n	8009344 <mktime+0x1ec>
 8009244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009246:	4619      	mov	r1, r3
 8009248:	17da      	asrs	r2, r3, #31
 800924a:	e9cd 1200 	strd	r1, r2, [sp]
 800924e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009252:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8009256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800925a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800925c:	1a80      	subs	r0, r0, r2
 800925e:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 8009262:	4582      	cmp	sl, r0
 8009264:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009268:	eb7b 0101 	sbcs.w	r1, fp, r1
 800926c:	da71      	bge.n	8009352 <mktime+0x1fa>
 800926e:	9800      	ldr	r0, [sp, #0]
 8009270:	6a39      	ldr	r1, [r7, #32]
 8009272:	1a09      	subs	r1, r1, r0
 8009274:	9104      	str	r1, [sp, #16]
 8009276:	9801      	ldr	r0, [sp, #4]
 8009278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800927a:	eb61 0100 	sbc.w	r1, r1, r0
 800927e:	9105      	str	r1, [sp, #20]
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	2900      	cmp	r1, #0
 8009284:	d075      	beq.n	8009372 <mktime+0x21a>
 8009286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800928a:	4582      	cmp	sl, r0
 800928c:	eb7b 0101 	sbcs.w	r1, fp, r1
 8009290:	db05      	blt.n	800929e <mktime+0x146>
 8009292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009296:	4582      	cmp	sl, r0
 8009298:	eb7b 0101 	sbcs.w	r1, fp, r1
 800929c:	db6f      	blt.n	800937e <mktime+0x226>
 800929e:	f1b9 0f00 	cmp.w	r9, #0
 80092a2:	f04f 0900 	mov.w	r9, #0
 80092a6:	da6f      	bge.n	8009388 <mktime+0x230>
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	eb1a 0a03 	adds.w	sl, sl, r3
 80092ae:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80092b2:	e0ae      	b.n	8009412 <mktime+0x2ba>
 80092b4:	f240 126d 	movw	r2, #365	; 0x16d
 80092b8:	e7a3      	b.n	8009202 <mktime+0xaa>
 80092ba:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80092be:	e7a0      	b.n	8009202 <mktime+0xaa>
 80092c0:	d0a3      	beq.n	800920a <mktime+0xb2>
 80092c2:	2345      	movs	r3, #69	; 0x45
 80092c4:	f240 1e6d 	movw	lr, #365	; 0x16d
 80092c8:	2164      	movs	r1, #100	; 0x64
 80092ca:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80092ce:	e012      	b.n	80092f6 <mktime+0x19e>
 80092d0:	bb62      	cbnz	r2, 800932c <mktime+0x1d4>
 80092d2:	fb93 f2f1 	sdiv	r2, r3, r1
 80092d6:	fb01 3212 	mls	r2, r1, r2, r3
 80092da:	bb52      	cbnz	r2, 8009332 <mktime+0x1da>
 80092dc:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 80092e0:	fb9c f2f0 	sdiv	r2, ip, r0
 80092e4:	fb00 c212 	mls	r2, r0, r2, ip
 80092e8:	2a00      	cmp	r2, #0
 80092ea:	bf14      	ite	ne
 80092ec:	4672      	movne	r2, lr
 80092ee:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80092f2:	1aa4      	subs	r4, r4, r2
 80092f4:	3b01      	subs	r3, #1
 80092f6:	429e      	cmp	r6, r3
 80092f8:	f003 0203 	and.w	r2, r3, #3
 80092fc:	dbe8      	blt.n	80092d0 <mktime+0x178>
 80092fe:	b9da      	cbnz	r2, 8009338 <mktime+0x1e0>
 8009300:	2264      	movs	r2, #100	; 0x64
 8009302:	fb96 f3f2 	sdiv	r3, r6, r2
 8009306:	fb02 6313 	mls	r3, r2, r3, r6
 800930a:	b9c3      	cbnz	r3, 800933e <mktime+0x1e6>
 800930c:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8009310:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009314:	fb91 f3f2 	sdiv	r3, r1, r2
 8009318:	fb02 1313 	mls	r3, r2, r3, r1
 800931c:	2b00      	cmp	r3, #0
 800931e:	f240 136d 	movw	r3, #365	; 0x16d
 8009322:	bf08      	it	eq
 8009324:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009328:	1ae4      	subs	r4, r4, r3
 800932a:	e76e      	b.n	800920a <mktime+0xb2>
 800932c:	f240 126d 	movw	r2, #365	; 0x16d
 8009330:	e7df      	b.n	80092f2 <mktime+0x19a>
 8009332:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009336:	e7dc      	b.n	80092f2 <mktime+0x19a>
 8009338:	f240 136d 	movw	r3, #365	; 0x16d
 800933c:	e7f4      	b.n	8009328 <mktime+0x1d0>
 800933e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8009342:	e7f1      	b.n	8009328 <mktime+0x1d0>
 8009344:	f000 f8ae 	bl	80094a4 <__tzcalc_limits>
 8009348:	2800      	cmp	r0, #0
 800934a:	f47f af7b 	bne.w	8009244 <mktime+0xec>
 800934e:	46c1      	mov	r9, r8
 8009350:	e054      	b.n	80093fc <mktime+0x2a4>
 8009352:	9800      	ldr	r0, [sp, #0]
 8009354:	9902      	ldr	r1, [sp, #8]
 8009356:	1a09      	subs	r1, r1, r0
 8009358:	9108      	str	r1, [sp, #32]
 800935a:	9801      	ldr	r0, [sp, #4]
 800935c:	9903      	ldr	r1, [sp, #12]
 800935e:	eb61 0100 	sbc.w	r1, r1, r0
 8009362:	9109      	str	r1, [sp, #36]	; 0x24
 8009364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009368:	4582      	cmp	sl, r0
 800936a:	eb7b 0101 	sbcs.w	r1, fp, r1
 800936e:	dbee      	blt.n	800934e <mktime+0x1f6>
 8009370:	e77d      	b.n	800926e <mktime+0x116>
 8009372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009376:	4582      	cmp	sl, r0
 8009378:	eb7b 0101 	sbcs.w	r1, fp, r1
 800937c:	db89      	blt.n	8009292 <mktime+0x13a>
 800937e:	f1b9 0f00 	cmp.w	r9, #0
 8009382:	db3f      	blt.n	8009404 <mktime+0x2ac>
 8009384:	f04f 0901 	mov.w	r9, #1
 8009388:	ea88 0809 	eor.w	r8, r8, r9
 800938c:	f1b8 0f01 	cmp.w	r8, #1
 8009390:	d134      	bne.n	80093fc <mktime+0x2a4>
 8009392:	f1b9 0f00 	cmp.w	r9, #0
 8009396:	d04f      	beq.n	8009438 <mktime+0x2e0>
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	682a      	ldr	r2, [r5, #0]
 800939c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80093a0:	441a      	add	r2, r3
 80093a2:	eb1a 0a03 	adds.w	sl, sl, r3
 80093a6:	602a      	str	r2, [r5, #0]
 80093a8:	4628      	mov	r0, r5
 80093aa:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 80093ae:	f7ff fdfb 	bl	8008fa8 <validate_structure>
 80093b2:	68ea      	ldr	r2, [r5, #12]
 80093b4:	ebb2 0208 	subs.w	r2, r2, r8
 80093b8:	d020      	beq.n	80093fc <mktime+0x2a4>
 80093ba:	2a01      	cmp	r2, #1
 80093bc:	dc3e      	bgt.n	800943c <mktime+0x2e4>
 80093be:	1c90      	adds	r0, r2, #2
 80093c0:	bfd8      	it	le
 80093c2:	2201      	movle	r2, #1
 80093c4:	69eb      	ldr	r3, [r5, #28]
 80093c6:	18d3      	adds	r3, r2, r3
 80093c8:	4414      	add	r4, r2
 80093ca:	d540      	bpl.n	800944e <mktime+0x2f6>
 80093cc:	1e72      	subs	r2, r6, #1
 80093ce:	0791      	lsls	r1, r2, #30
 80093d0:	d137      	bne.n	8009442 <mktime+0x2ea>
 80093d2:	2164      	movs	r1, #100	; 0x64
 80093d4:	fb92 f3f1 	sdiv	r3, r2, r1
 80093d8:	fb01 2313 	mls	r3, r1, r3, r2
 80093dc:	bba3      	cbnz	r3, 8009448 <mktime+0x2f0>
 80093de:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 80093e2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80093e6:	fb96 f3f2 	sdiv	r3, r6, r2
 80093ea:	fb02 6613 	mls	r6, r2, r3, r6
 80093ee:	2e00      	cmp	r6, #0
 80093f0:	f240 136d 	movw	r3, #365	; 0x16d
 80093f4:	bf18      	it	ne
 80093f6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 80093fa:	61eb      	str	r3, [r5, #28]
 80093fc:	f1b9 0f01 	cmp.w	r9, #1
 8009400:	f47f af52 	bne.w	80092a8 <mktime+0x150>
 8009404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009406:	eb1a 0a03 	adds.w	sl, sl, r3
 800940a:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800940e:	f04f 0901 	mov.w	r9, #1
 8009412:	f000 f8f5 	bl	8009600 <__tz_unlock>
 8009416:	3404      	adds	r4, #4
 8009418:	2307      	movs	r3, #7
 800941a:	fb94 f3f3 	sdiv	r3, r4, r3
 800941e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009422:	1ae4      	subs	r4, r4, r3
 8009424:	bf48      	it	mi
 8009426:	3407      	addmi	r4, #7
 8009428:	f8c5 9020 	str.w	r9, [r5, #32]
 800942c:	61ac      	str	r4, [r5, #24]
 800942e:	4650      	mov	r0, sl
 8009430:	4659      	mov	r1, fp
 8009432:	b00b      	add	sp, #44	; 0x2c
 8009434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009438:	1a9b      	subs	r3, r3, r2
 800943a:	e7ae      	b.n	800939a <mktime+0x242>
 800943c:	f04f 32ff 	mov.w	r2, #4294967295
 8009440:	e7c0      	b.n	80093c4 <mktime+0x26c>
 8009442:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009446:	e7d8      	b.n	80093fa <mktime+0x2a2>
 8009448:	f240 136d 	movw	r3, #365	; 0x16d
 800944c:	e7d5      	b.n	80093fa <mktime+0x2a2>
 800944e:	07b2      	lsls	r2, r6, #30
 8009450:	d117      	bne.n	8009482 <mktime+0x32a>
 8009452:	2164      	movs	r1, #100	; 0x64
 8009454:	fb96 f2f1 	sdiv	r2, r6, r1
 8009458:	fb01 6212 	mls	r2, r1, r2, r6
 800945c:	b9a2      	cbnz	r2, 8009488 <mktime+0x330>
 800945e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8009462:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8009466:	fb96 f2f1 	sdiv	r2, r6, r1
 800946a:	fb01 6612 	mls	r6, r1, r2, r6
 800946e:	2e00      	cmp	r6, #0
 8009470:	f240 126d 	movw	r2, #365	; 0x16d
 8009474:	bf08      	it	eq
 8009476:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800947a:	4293      	cmp	r3, r2
 800947c:	bfa8      	it	ge
 800947e:	1a9b      	subge	r3, r3, r2
 8009480:	e7bb      	b.n	80093fa <mktime+0x2a2>
 8009482:	f240 126d 	movw	r2, #365	; 0x16d
 8009486:	e7f8      	b.n	800947a <mktime+0x322>
 8009488:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800948c:	e7f5      	b.n	800947a <mktime+0x322>
 800948e:	f04f 3aff 	mov.w	sl, #4294967295
 8009492:	f04f 3bff 	mov.w	fp, #4294967295
 8009496:	e7ca      	b.n	800942e <mktime+0x2d6>
 8009498:	0800a88c 	.word	0x0800a88c
 800949c:	00015180 	.word	0x00015180
 80094a0:	200003fc 	.word	0x200003fc

080094a4 <__tzcalc_limits>:
 80094a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a8:	4680      	mov	r8, r0
 80094aa:	f000 fa87 	bl	80099bc <__gettzinfo>
 80094ae:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80094b2:	4598      	cmp	r8, r3
 80094b4:	f340 8098 	ble.w	80095e8 <__tzcalc_limits+0x144>
 80094b8:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80094bc:	4443      	add	r3, r8
 80094be:	109b      	asrs	r3, r3, #2
 80094c0:	f240 126d 	movw	r2, #365	; 0x16d
 80094c4:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80094c8:	fb02 3505 	mla	r5, r2, r5, r3
 80094cc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80094d0:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80094d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80094d8:	441d      	add	r5, r3
 80094da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80094de:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80094e2:	fb98 f7f3 	sdiv	r7, r8, r3
 80094e6:	fb03 8717 	mls	r7, r3, r7, r8
 80094ea:	4442      	add	r2, r8
 80094ec:	fab7 fc87 	clz	ip, r7
 80094f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80094f4:	f008 0303 	and.w	r3, r8, #3
 80094f8:	4415      	add	r5, r2
 80094fa:	2264      	movs	r2, #100	; 0x64
 80094fc:	f8c0 8004 	str.w	r8, [r0, #4]
 8009500:	fb98 f6f2 	sdiv	r6, r8, r2
 8009504:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8009508:	fb02 8616 	mls	r6, r2, r6, r8
 800950c:	4604      	mov	r4, r0
 800950e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	f04f 0e07 	mov.w	lr, #7
 8009518:	7a22      	ldrb	r2, [r4, #8]
 800951a:	6963      	ldr	r3, [r4, #20]
 800951c:	2a4a      	cmp	r2, #74	; 0x4a
 800951e:	d128      	bne.n	8009572 <__tzcalc_limits+0xce>
 8009520:	9900      	ldr	r1, [sp, #0]
 8009522:	18ea      	adds	r2, r5, r3
 8009524:	b901      	cbnz	r1, 8009528 <__tzcalc_limits+0x84>
 8009526:	b906      	cbnz	r6, 800952a <__tzcalc_limits+0x86>
 8009528:	bb0f      	cbnz	r7, 800956e <__tzcalc_limits+0xca>
 800952a:	2b3b      	cmp	r3, #59	; 0x3b
 800952c:	bfd4      	ite	le
 800952e:	2300      	movle	r3, #0
 8009530:	2301      	movgt	r3, #1
 8009532:	4413      	add	r3, r2
 8009534:	1e5a      	subs	r2, r3, #1
 8009536:	69a3      	ldr	r3, [r4, #24]
 8009538:	492c      	ldr	r1, [pc, #176]	; (80095ec <__tzcalc_limits+0x148>)
 800953a:	fb01 3202 	mla	r2, r1, r2, r3
 800953e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009540:	4413      	add	r3, r2
 8009542:	461a      	mov	r2, r3
 8009544:	17db      	asrs	r3, r3, #31
 8009546:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800954a:	3428      	adds	r4, #40	; 0x28
 800954c:	45a3      	cmp	fp, r4
 800954e:	d1e3      	bne.n	8009518 <__tzcalc_limits+0x74>
 8009550:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8009554:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8009558:	4294      	cmp	r4, r2
 800955a:	eb75 0303 	sbcs.w	r3, r5, r3
 800955e:	bfb4      	ite	lt
 8009560:	2301      	movlt	r3, #1
 8009562:	2300      	movge	r3, #0
 8009564:	6003      	str	r3, [r0, #0]
 8009566:	2001      	movs	r0, #1
 8009568:	b003      	add	sp, #12
 800956a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800956e:	2300      	movs	r3, #0
 8009570:	e7df      	b.n	8009532 <__tzcalc_limits+0x8e>
 8009572:	2a44      	cmp	r2, #68	; 0x44
 8009574:	d101      	bne.n	800957a <__tzcalc_limits+0xd6>
 8009576:	18ea      	adds	r2, r5, r3
 8009578:	e7dd      	b.n	8009536 <__tzcalc_limits+0x92>
 800957a:	9a00      	ldr	r2, [sp, #0]
 800957c:	bb72      	cbnz	r2, 80095dc <__tzcalc_limits+0x138>
 800957e:	2e00      	cmp	r6, #0
 8009580:	bf0c      	ite	eq
 8009582:	46e0      	moveq	r8, ip
 8009584:	f04f 0801 	movne.w	r8, #1
 8009588:	4919      	ldr	r1, [pc, #100]	; (80095f0 <__tzcalc_limits+0x14c>)
 800958a:	68e2      	ldr	r2, [r4, #12]
 800958c:	9201      	str	r2, [sp, #4]
 800958e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8009592:	fb0a 1808 	mla	r8, sl, r8, r1
 8009596:	462a      	mov	r2, r5
 8009598:	f04f 0900 	mov.w	r9, #0
 800959c:	f1a8 0804 	sub.w	r8, r8, #4
 80095a0:	9901      	ldr	r1, [sp, #4]
 80095a2:	f109 0901 	add.w	r9, r9, #1
 80095a6:	4549      	cmp	r1, r9
 80095a8:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80095ac:	dc18      	bgt.n	80095e0 <__tzcalc_limits+0x13c>
 80095ae:	f102 0804 	add.w	r8, r2, #4
 80095b2:	fb98 f9fe 	sdiv	r9, r8, lr
 80095b6:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80095ba:	eba8 0909 	sub.w	r9, r8, r9
 80095be:	ebb3 0909 	subs.w	r9, r3, r9
 80095c2:	6923      	ldr	r3, [r4, #16]
 80095c4:	f103 33ff 	add.w	r3, r3, #4294967295
 80095c8:	bf48      	it	mi
 80095ca:	f109 0907 	addmi.w	r9, r9, #7
 80095ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80095d2:	444b      	add	r3, r9
 80095d4:	4553      	cmp	r3, sl
 80095d6:	da05      	bge.n	80095e4 <__tzcalc_limits+0x140>
 80095d8:	441a      	add	r2, r3
 80095da:	e7ac      	b.n	8009536 <__tzcalc_limits+0x92>
 80095dc:	46e0      	mov	r8, ip
 80095de:	e7d3      	b.n	8009588 <__tzcalc_limits+0xe4>
 80095e0:	4452      	add	r2, sl
 80095e2:	e7dd      	b.n	80095a0 <__tzcalc_limits+0xfc>
 80095e4:	3b07      	subs	r3, #7
 80095e6:	e7f5      	b.n	80095d4 <__tzcalc_limits+0x130>
 80095e8:	2000      	movs	r0, #0
 80095ea:	e7bd      	b.n	8009568 <__tzcalc_limits+0xc4>
 80095ec:	00015180 	.word	0x00015180
 80095f0:	0800a958 	.word	0x0800a958

080095f4 <__tz_lock>:
 80095f4:	4801      	ldr	r0, [pc, #4]	; (80095fc <__tz_lock+0x8>)
 80095f6:	f000 b9e5 	b.w	80099c4 <__retarget_lock_acquire>
 80095fa:	bf00      	nop
 80095fc:	2000070f 	.word	0x2000070f

08009600 <__tz_unlock>:
 8009600:	4801      	ldr	r0, [pc, #4]	; (8009608 <__tz_unlock+0x8>)
 8009602:	f000 b9e1 	b.w	80099c8 <__retarget_lock_release>
 8009606:	bf00      	nop
 8009608:	2000070f 	.word	0x2000070f

0800960c <_tzset_unlocked>:
 800960c:	4b01      	ldr	r3, [pc, #4]	; (8009614 <_tzset_unlocked+0x8>)
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	f000 b802 	b.w	8009618 <_tzset_unlocked_r>
 8009614:	20000044 	.word	0x20000044

08009618 <_tzset_unlocked_r>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	b08d      	sub	sp, #52	; 0x34
 800961e:	4607      	mov	r7, r0
 8009620:	f000 f9cc 	bl	80099bc <__gettzinfo>
 8009624:	49ae      	ldr	r1, [pc, #696]	; (80098e0 <_tzset_unlocked_r+0x2c8>)
 8009626:	4eaf      	ldr	r6, [pc, #700]	; (80098e4 <_tzset_unlocked_r+0x2cc>)
 8009628:	4605      	mov	r5, r0
 800962a:	4638      	mov	r0, r7
 800962c:	f000 f9be 	bl	80099ac <_getenv_r>
 8009630:	4604      	mov	r4, r0
 8009632:	b970      	cbnz	r0, 8009652 <_tzset_unlocked_r+0x3a>
 8009634:	4bac      	ldr	r3, [pc, #688]	; (80098e8 <_tzset_unlocked_r+0x2d0>)
 8009636:	4aad      	ldr	r2, [pc, #692]	; (80098ec <_tzset_unlocked_r+0x2d4>)
 8009638:	6018      	str	r0, [r3, #0]
 800963a:	4bad      	ldr	r3, [pc, #692]	; (80098f0 <_tzset_unlocked_r+0x2d8>)
 800963c:	6018      	str	r0, [r3, #0]
 800963e:	4bad      	ldr	r3, [pc, #692]	; (80098f4 <_tzset_unlocked_r+0x2dc>)
 8009640:	6830      	ldr	r0, [r6, #0]
 8009642:	e9c3 2200 	strd	r2, r2, [r3]
 8009646:	f000 f9c1 	bl	80099cc <free>
 800964a:	6034      	str	r4, [r6, #0]
 800964c:	b00d      	add	sp, #52	; 0x34
 800964e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009652:	6831      	ldr	r1, [r6, #0]
 8009654:	2900      	cmp	r1, #0
 8009656:	d15f      	bne.n	8009718 <_tzset_unlocked_r+0x100>
 8009658:	6830      	ldr	r0, [r6, #0]
 800965a:	f000 f9b7 	bl	80099cc <free>
 800965e:	4620      	mov	r0, r4
 8009660:	f7f6 fd8e 	bl	8000180 <strlen>
 8009664:	1c41      	adds	r1, r0, #1
 8009666:	4638      	mov	r0, r7
 8009668:	f000 fa08 	bl	8009a7c <_malloc_r>
 800966c:	6030      	str	r0, [r6, #0]
 800966e:	2800      	cmp	r0, #0
 8009670:	d157      	bne.n	8009722 <_tzset_unlocked_r+0x10a>
 8009672:	7823      	ldrb	r3, [r4, #0]
 8009674:	4aa0      	ldr	r2, [pc, #640]	; (80098f8 <_tzset_unlocked_r+0x2e0>)
 8009676:	49a1      	ldr	r1, [pc, #644]	; (80098fc <_tzset_unlocked_r+0x2e4>)
 8009678:	2b3a      	cmp	r3, #58	; 0x3a
 800967a:	bf08      	it	eq
 800967c:	3401      	addeq	r4, #1
 800967e:	ae0a      	add	r6, sp, #40	; 0x28
 8009680:	4633      	mov	r3, r6
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fa64 	bl	8009b50 <siscanf>
 8009688:	2800      	cmp	r0, #0
 800968a:	dddf      	ble.n	800964c <_tzset_unlocked_r+0x34>
 800968c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800968e:	18e7      	adds	r7, r4, r3
 8009690:	5ce3      	ldrb	r3, [r4, r3]
 8009692:	2b2d      	cmp	r3, #45	; 0x2d
 8009694:	d149      	bne.n	800972a <_tzset_unlocked_r+0x112>
 8009696:	3701      	adds	r7, #1
 8009698:	f04f 34ff 	mov.w	r4, #4294967295
 800969c:	f10d 0a20 	add.w	sl, sp, #32
 80096a0:	f10d 0b1e 	add.w	fp, sp, #30
 80096a4:	f04f 0800 	mov.w	r8, #0
 80096a8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80096ac:	4994      	ldr	r1, [pc, #592]	; (8009900 <_tzset_unlocked_r+0x2e8>)
 80096ae:	9603      	str	r6, [sp, #12]
 80096b0:	f8cd b000 	str.w	fp, [sp]
 80096b4:	4633      	mov	r3, r6
 80096b6:	aa07      	add	r2, sp, #28
 80096b8:	4638      	mov	r0, r7
 80096ba:	f8ad 801e 	strh.w	r8, [sp, #30]
 80096be:	f8ad 8020 	strh.w	r8, [sp, #32]
 80096c2:	f000 fa45 	bl	8009b50 <siscanf>
 80096c6:	4540      	cmp	r0, r8
 80096c8:	ddc0      	ble.n	800964c <_tzset_unlocked_r+0x34>
 80096ca:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80096ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80096d2:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800990c <_tzset_unlocked_r+0x2f4>
 80096d6:	213c      	movs	r1, #60	; 0x3c
 80096d8:	fb01 2203 	mla	r2, r1, r3, r2
 80096dc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80096e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80096e4:	fb01 2303 	mla	r3, r1, r3, r2
 80096e8:	435c      	muls	r4, r3
 80096ea:	62ac      	str	r4, [r5, #40]	; 0x28
 80096ec:	4c81      	ldr	r4, [pc, #516]	; (80098f4 <_tzset_unlocked_r+0x2dc>)
 80096ee:	4b82      	ldr	r3, [pc, #520]	; (80098f8 <_tzset_unlocked_r+0x2e0>)
 80096f0:	6023      	str	r3, [r4, #0]
 80096f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f4:	4981      	ldr	r1, [pc, #516]	; (80098fc <_tzset_unlocked_r+0x2e4>)
 80096f6:	441f      	add	r7, r3
 80096f8:	464a      	mov	r2, r9
 80096fa:	4633      	mov	r3, r6
 80096fc:	4638      	mov	r0, r7
 80096fe:	f000 fa27 	bl	8009b50 <siscanf>
 8009702:	4540      	cmp	r0, r8
 8009704:	dc16      	bgt.n	8009734 <_tzset_unlocked_r+0x11c>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	6063      	str	r3, [r4, #4]
 800970a:	4b77      	ldr	r3, [pc, #476]	; (80098e8 <_tzset_unlocked_r+0x2d0>)
 800970c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800970e:	601a      	str	r2, [r3, #0]
 8009710:	4b77      	ldr	r3, [pc, #476]	; (80098f0 <_tzset_unlocked_r+0x2d8>)
 8009712:	f8c3 8000 	str.w	r8, [r3]
 8009716:	e799      	b.n	800964c <_tzset_unlocked_r+0x34>
 8009718:	f7f6 fd3a 	bl	8000190 <strcmp>
 800971c:	2800      	cmp	r0, #0
 800971e:	d19b      	bne.n	8009658 <_tzset_unlocked_r+0x40>
 8009720:	e794      	b.n	800964c <_tzset_unlocked_r+0x34>
 8009722:	4621      	mov	r1, r4
 8009724:	f000 fa42 	bl	8009bac <strcpy>
 8009728:	e7a3      	b.n	8009672 <_tzset_unlocked_r+0x5a>
 800972a:	2b2b      	cmp	r3, #43	; 0x2b
 800972c:	bf08      	it	eq
 800972e:	3701      	addeq	r7, #1
 8009730:	2401      	movs	r4, #1
 8009732:	e7b3      	b.n	800969c <_tzset_unlocked_r+0x84>
 8009734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009736:	f8c4 9004 	str.w	r9, [r4, #4]
 800973a:	18fc      	adds	r4, r7, r3
 800973c:	5cfb      	ldrb	r3, [r7, r3]
 800973e:	2b2d      	cmp	r3, #45	; 0x2d
 8009740:	f040 808b 	bne.w	800985a <_tzset_unlocked_r+0x242>
 8009744:	3401      	adds	r4, #1
 8009746:	f04f 37ff 	mov.w	r7, #4294967295
 800974a:	2300      	movs	r3, #0
 800974c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009750:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009754:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009758:	930a      	str	r3, [sp, #40]	; 0x28
 800975a:	e9cd a602 	strd	sl, r6, [sp, #8]
 800975e:	e9cd b600 	strd	fp, r6, [sp]
 8009762:	4967      	ldr	r1, [pc, #412]	; (8009900 <_tzset_unlocked_r+0x2e8>)
 8009764:	4633      	mov	r3, r6
 8009766:	aa07      	add	r2, sp, #28
 8009768:	4620      	mov	r0, r4
 800976a:	f000 f9f1 	bl	8009b50 <siscanf>
 800976e:	2800      	cmp	r0, #0
 8009770:	dc78      	bgt.n	8009864 <_tzset_unlocked_r+0x24c>
 8009772:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8009774:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8009778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800977a:	652f      	str	r7, [r5, #80]	; 0x50
 800977c:	441c      	add	r4, r3
 800977e:	462f      	mov	r7, r5
 8009780:	f04f 0900 	mov.w	r9, #0
 8009784:	7823      	ldrb	r3, [r4, #0]
 8009786:	2b2c      	cmp	r3, #44	; 0x2c
 8009788:	bf08      	it	eq
 800978a:	3401      	addeq	r4, #1
 800978c:	f894 8000 	ldrb.w	r8, [r4]
 8009790:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009794:	d178      	bne.n	8009888 <_tzset_unlocked_r+0x270>
 8009796:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800979a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800979e:	ab09      	add	r3, sp, #36	; 0x24
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	4958      	ldr	r1, [pc, #352]	; (8009904 <_tzset_unlocked_r+0x2ec>)
 80097a4:	9603      	str	r6, [sp, #12]
 80097a6:	4633      	mov	r3, r6
 80097a8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80097ac:	4620      	mov	r0, r4
 80097ae:	f000 f9cf 	bl	8009b50 <siscanf>
 80097b2:	2803      	cmp	r0, #3
 80097b4:	f47f af4a 	bne.w	800964c <_tzset_unlocked_r+0x34>
 80097b8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80097bc:	1e4b      	subs	r3, r1, #1
 80097be:	2b0b      	cmp	r3, #11
 80097c0:	f63f af44 	bhi.w	800964c <_tzset_unlocked_r+0x34>
 80097c4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80097c8:	1e53      	subs	r3, r2, #1
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	f63f af3e 	bhi.w	800964c <_tzset_unlocked_r+0x34>
 80097d0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80097d4:	2b06      	cmp	r3, #6
 80097d6:	f63f af39 	bhi.w	800964c <_tzset_unlocked_r+0x34>
 80097da:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80097de:	f887 8008 	strb.w	r8, [r7, #8]
 80097e2:	617b      	str	r3, [r7, #20]
 80097e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e6:	eb04 0803 	add.w	r8, r4, r3
 80097ea:	2302      	movs	r3, #2
 80097ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80097f0:	2300      	movs	r3, #0
 80097f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80097f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80097fa:	930a      	str	r3, [sp, #40]	; 0x28
 80097fc:	f898 3000 	ldrb.w	r3, [r8]
 8009800:	2b2f      	cmp	r3, #47	; 0x2f
 8009802:	d109      	bne.n	8009818 <_tzset_unlocked_r+0x200>
 8009804:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009808:	e9cd b600 	strd	fp, r6, [sp]
 800980c:	493e      	ldr	r1, [pc, #248]	; (8009908 <_tzset_unlocked_r+0x2f0>)
 800980e:	4633      	mov	r3, r6
 8009810:	aa07      	add	r2, sp, #28
 8009812:	4640      	mov	r0, r8
 8009814:	f000 f99c 	bl	8009b50 <siscanf>
 8009818:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800981c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8009820:	213c      	movs	r1, #60	; 0x3c
 8009822:	fb01 2203 	mla	r2, r1, r3, r2
 8009826:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800982a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800982e:	fb01 2303 	mla	r3, r1, r3, r2
 8009832:	61bb      	str	r3, [r7, #24]
 8009834:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009836:	3728      	adds	r7, #40	; 0x28
 8009838:	4444      	add	r4, r8
 800983a:	f1b9 0f00 	cmp.w	r9, #0
 800983e:	d020      	beq.n	8009882 <_tzset_unlocked_r+0x26a>
 8009840:	6868      	ldr	r0, [r5, #4]
 8009842:	f7ff fe2f 	bl	80094a4 <__tzcalc_limits>
 8009846:	4b28      	ldr	r3, [pc, #160]	; (80098e8 <_tzset_unlocked_r+0x2d0>)
 8009848:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800984a:	601a      	str	r2, [r3, #0]
 800984c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800984e:	1a9b      	subs	r3, r3, r2
 8009850:	4a27      	ldr	r2, [pc, #156]	; (80098f0 <_tzset_unlocked_r+0x2d8>)
 8009852:	bf18      	it	ne
 8009854:	2301      	movne	r3, #1
 8009856:	6013      	str	r3, [r2, #0]
 8009858:	e6f8      	b.n	800964c <_tzset_unlocked_r+0x34>
 800985a:	2b2b      	cmp	r3, #43	; 0x2b
 800985c:	bf08      	it	eq
 800985e:	3401      	addeq	r4, #1
 8009860:	2701      	movs	r7, #1
 8009862:	e772      	b.n	800974a <_tzset_unlocked_r+0x132>
 8009864:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8009868:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800986c:	213c      	movs	r1, #60	; 0x3c
 800986e:	fb01 2203 	mla	r2, r1, r3, r2
 8009872:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8009876:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800987a:	fb01 2303 	mla	r3, r1, r3, r2
 800987e:	435f      	muls	r7, r3
 8009880:	e77a      	b.n	8009778 <_tzset_unlocked_r+0x160>
 8009882:	f04f 0901 	mov.w	r9, #1
 8009886:	e77d      	b.n	8009784 <_tzset_unlocked_r+0x16c>
 8009888:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800988c:	bf06      	itte	eq
 800988e:	3401      	addeq	r4, #1
 8009890:	4643      	moveq	r3, r8
 8009892:	2344      	movne	r3, #68	; 0x44
 8009894:	220a      	movs	r2, #10
 8009896:	a90b      	add	r1, sp, #44	; 0x2c
 8009898:	4620      	mov	r0, r4
 800989a:	9305      	str	r3, [sp, #20]
 800989c:	f000 fa1e 	bl	8009cdc <strtoul>
 80098a0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80098a4:	9b05      	ldr	r3, [sp, #20]
 80098a6:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80098aa:	45a0      	cmp	r8, r4
 80098ac:	d114      	bne.n	80098d8 <_tzset_unlocked_r+0x2c0>
 80098ae:	234d      	movs	r3, #77	; 0x4d
 80098b0:	f1b9 0f00 	cmp.w	r9, #0
 80098b4:	d107      	bne.n	80098c6 <_tzset_unlocked_r+0x2ae>
 80098b6:	722b      	strb	r3, [r5, #8]
 80098b8:	2103      	movs	r1, #3
 80098ba:	2302      	movs	r3, #2
 80098bc:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80098c0:	f8c5 9014 	str.w	r9, [r5, #20]
 80098c4:	e791      	b.n	80097ea <_tzset_unlocked_r+0x1d2>
 80098c6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80098ca:	220b      	movs	r2, #11
 80098cc:	2301      	movs	r3, #1
 80098ce:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80098d2:	2300      	movs	r3, #0
 80098d4:	63eb      	str	r3, [r5, #60]	; 0x3c
 80098d6:	e788      	b.n	80097ea <_tzset_unlocked_r+0x1d2>
 80098d8:	b280      	uxth	r0, r0
 80098da:	723b      	strb	r3, [r7, #8]
 80098dc:	6178      	str	r0, [r7, #20]
 80098de:	e784      	b.n	80097ea <_tzset_unlocked_r+0x1d2>
 80098e0:	0800a8bc 	.word	0x0800a8bc
 80098e4:	200003f8 	.word	0x200003f8
 80098e8:	20000400 	.word	0x20000400
 80098ec:	0800a8bf 	.word	0x0800a8bf
 80098f0:	200003fc 	.word	0x200003fc
 80098f4:	200000a8 	.word	0x200000a8
 80098f8:	200003eb 	.word	0x200003eb
 80098fc:	0800a8c3 	.word	0x0800a8c3
 8009900:	0800a8e6 	.word	0x0800a8e6
 8009904:	0800a8d2 	.word	0x0800a8d2
 8009908:	0800a8e5 	.word	0x0800a8e5
 800990c:	200003e0 	.word	0x200003e0

08009910 <div>:
 8009910:	2900      	cmp	r1, #0
 8009912:	b510      	push	{r4, lr}
 8009914:	fb91 f4f2 	sdiv	r4, r1, r2
 8009918:	fb02 1314 	mls	r3, r2, r4, r1
 800991c:	db06      	blt.n	800992c <div+0x1c>
 800991e:	2b00      	cmp	r3, #0
 8009920:	da01      	bge.n	8009926 <div+0x16>
 8009922:	3401      	adds	r4, #1
 8009924:	1a9b      	subs	r3, r3, r2
 8009926:	e9c0 4300 	strd	r4, r3, [r0]
 800992a:	bd10      	pop	{r4, pc}
 800992c:	2b00      	cmp	r3, #0
 800992e:	bfc4      	itt	gt
 8009930:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8009934:	189b      	addgt	r3, r3, r2
 8009936:	e7f6      	b.n	8009926 <div+0x16>

08009938 <_findenv_r>:
 8009938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800993c:	4607      	mov	r7, r0
 800993e:	4689      	mov	r9, r1
 8009940:	4616      	mov	r6, r2
 8009942:	f000 f9d5 	bl	8009cf0 <__env_lock>
 8009946:	4b18      	ldr	r3, [pc, #96]	; (80099a8 <_findenv_r+0x70>)
 8009948:	681c      	ldr	r4, [r3, #0]
 800994a:	469a      	mov	sl, r3
 800994c:	b134      	cbz	r4, 800995c <_findenv_r+0x24>
 800994e:	464b      	mov	r3, r9
 8009950:	4698      	mov	r8, r3
 8009952:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009956:	b139      	cbz	r1, 8009968 <_findenv_r+0x30>
 8009958:	293d      	cmp	r1, #61	; 0x3d
 800995a:	d1f9      	bne.n	8009950 <_findenv_r+0x18>
 800995c:	4638      	mov	r0, r7
 800995e:	f000 f9cd 	bl	8009cfc <__env_unlock>
 8009962:	2000      	movs	r0, #0
 8009964:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009968:	eba8 0809 	sub.w	r8, r8, r9
 800996c:	46a3      	mov	fp, r4
 800996e:	f854 0b04 	ldr.w	r0, [r4], #4
 8009972:	2800      	cmp	r0, #0
 8009974:	d0f2      	beq.n	800995c <_findenv_r+0x24>
 8009976:	4642      	mov	r2, r8
 8009978:	4649      	mov	r1, r9
 800997a:	f000 f91f 	bl	8009bbc <strncmp>
 800997e:	2800      	cmp	r0, #0
 8009980:	d1f4      	bne.n	800996c <_findenv_r+0x34>
 8009982:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009986:	eb03 0508 	add.w	r5, r3, r8
 800998a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800998e:	2b3d      	cmp	r3, #61	; 0x3d
 8009990:	d1ec      	bne.n	800996c <_findenv_r+0x34>
 8009992:	f8da 3000 	ldr.w	r3, [sl]
 8009996:	ebab 0303 	sub.w	r3, fp, r3
 800999a:	109b      	asrs	r3, r3, #2
 800999c:	4638      	mov	r0, r7
 800999e:	6033      	str	r3, [r6, #0]
 80099a0:	f000 f9ac 	bl	8009cfc <__env_unlock>
 80099a4:	1c68      	adds	r0, r5, #1
 80099a6:	e7dd      	b.n	8009964 <_findenv_r+0x2c>
 80099a8:	20000108 	.word	0x20000108

080099ac <_getenv_r>:
 80099ac:	b507      	push	{r0, r1, r2, lr}
 80099ae:	aa01      	add	r2, sp, #4
 80099b0:	f7ff ffc2 	bl	8009938 <_findenv_r>
 80099b4:	b003      	add	sp, #12
 80099b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080099bc <__gettzinfo>:
 80099bc:	4800      	ldr	r0, [pc, #0]	; (80099c0 <__gettzinfo+0x4>)
 80099be:	4770      	bx	lr
 80099c0:	200000b0 	.word	0x200000b0

080099c4 <__retarget_lock_acquire>:
 80099c4:	4770      	bx	lr

080099c6 <__retarget_lock_acquire_recursive>:
 80099c6:	4770      	bx	lr

080099c8 <__retarget_lock_release>:
 80099c8:	4770      	bx	lr

080099ca <__retarget_lock_release_recursive>:
 80099ca:	4770      	bx	lr

080099cc <free>:
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <free+0xc>)
 80099ce:	4601      	mov	r1, r0
 80099d0:	6818      	ldr	r0, [r3, #0]
 80099d2:	f000 b803 	b.w	80099dc <_free_r>
 80099d6:	bf00      	nop
 80099d8:	20000044 	.word	0x20000044

080099dc <_free_r>:
 80099dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099de:	2900      	cmp	r1, #0
 80099e0:	d048      	beq.n	8009a74 <_free_r+0x98>
 80099e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e6:	9001      	str	r0, [sp, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f1a1 0404 	sub.w	r4, r1, #4
 80099ee:	bfb8      	it	lt
 80099f0:	18e4      	addlt	r4, r4, r3
 80099f2:	f000 f989 	bl	8009d08 <__malloc_lock>
 80099f6:	4a20      	ldr	r2, [pc, #128]	; (8009a78 <_free_r+0x9c>)
 80099f8:	9801      	ldr	r0, [sp, #4]
 80099fa:	6813      	ldr	r3, [r2, #0]
 80099fc:	4615      	mov	r5, r2
 80099fe:	b933      	cbnz	r3, 8009a0e <_free_r+0x32>
 8009a00:	6063      	str	r3, [r4, #4]
 8009a02:	6014      	str	r4, [r2, #0]
 8009a04:	b003      	add	sp, #12
 8009a06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a0a:	f000 b983 	b.w	8009d14 <__malloc_unlock>
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	d90b      	bls.n	8009a2a <_free_r+0x4e>
 8009a12:	6821      	ldr	r1, [r4, #0]
 8009a14:	1862      	adds	r2, r4, r1
 8009a16:	4293      	cmp	r3, r2
 8009a18:	bf04      	itt	eq
 8009a1a:	681a      	ldreq	r2, [r3, #0]
 8009a1c:	685b      	ldreq	r3, [r3, #4]
 8009a1e:	6063      	str	r3, [r4, #4]
 8009a20:	bf04      	itt	eq
 8009a22:	1852      	addeq	r2, r2, r1
 8009a24:	6022      	streq	r2, [r4, #0]
 8009a26:	602c      	str	r4, [r5, #0]
 8009a28:	e7ec      	b.n	8009a04 <_free_r+0x28>
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	b10b      	cbz	r3, 8009a34 <_free_r+0x58>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d9fa      	bls.n	8009a2a <_free_r+0x4e>
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	1855      	adds	r5, r2, r1
 8009a38:	42a5      	cmp	r5, r4
 8009a3a:	d10b      	bne.n	8009a54 <_free_r+0x78>
 8009a3c:	6824      	ldr	r4, [r4, #0]
 8009a3e:	4421      	add	r1, r4
 8009a40:	1854      	adds	r4, r2, r1
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	6011      	str	r1, [r2, #0]
 8009a46:	d1dd      	bne.n	8009a04 <_free_r+0x28>
 8009a48:	681c      	ldr	r4, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	6053      	str	r3, [r2, #4]
 8009a4e:	4421      	add	r1, r4
 8009a50:	6011      	str	r1, [r2, #0]
 8009a52:	e7d7      	b.n	8009a04 <_free_r+0x28>
 8009a54:	d902      	bls.n	8009a5c <_free_r+0x80>
 8009a56:	230c      	movs	r3, #12
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	e7d3      	b.n	8009a04 <_free_r+0x28>
 8009a5c:	6825      	ldr	r5, [r4, #0]
 8009a5e:	1961      	adds	r1, r4, r5
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf04      	itt	eq
 8009a64:	6819      	ldreq	r1, [r3, #0]
 8009a66:	685b      	ldreq	r3, [r3, #4]
 8009a68:	6063      	str	r3, [r4, #4]
 8009a6a:	bf04      	itt	eq
 8009a6c:	1949      	addeq	r1, r1, r5
 8009a6e:	6021      	streq	r1, [r4, #0]
 8009a70:	6054      	str	r4, [r2, #4]
 8009a72:	e7c7      	b.n	8009a04 <_free_r+0x28>
 8009a74:	b003      	add	sp, #12
 8009a76:	bd30      	pop	{r4, r5, pc}
 8009a78:	20000404 	.word	0x20000404

08009a7c <_malloc_r>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	1ccd      	adds	r5, r1, #3
 8009a80:	f025 0503 	bic.w	r5, r5, #3
 8009a84:	3508      	adds	r5, #8
 8009a86:	2d0c      	cmp	r5, #12
 8009a88:	bf38      	it	cc
 8009a8a:	250c      	movcc	r5, #12
 8009a8c:	2d00      	cmp	r5, #0
 8009a8e:	4606      	mov	r6, r0
 8009a90:	db01      	blt.n	8009a96 <_malloc_r+0x1a>
 8009a92:	42a9      	cmp	r1, r5
 8009a94:	d903      	bls.n	8009a9e <_malloc_r+0x22>
 8009a96:	230c      	movs	r3, #12
 8009a98:	6033      	str	r3, [r6, #0]
 8009a9a:	2000      	movs	r0, #0
 8009a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a9e:	f000 f933 	bl	8009d08 <__malloc_lock>
 8009aa2:	4921      	ldr	r1, [pc, #132]	; (8009b28 <_malloc_r+0xac>)
 8009aa4:	680a      	ldr	r2, [r1, #0]
 8009aa6:	4614      	mov	r4, r2
 8009aa8:	b99c      	cbnz	r4, 8009ad2 <_malloc_r+0x56>
 8009aaa:	4f20      	ldr	r7, [pc, #128]	; (8009b2c <_malloc_r+0xb0>)
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	b923      	cbnz	r3, 8009aba <_malloc_r+0x3e>
 8009ab0:	4621      	mov	r1, r4
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f000 f83c 	bl	8009b30 <_sbrk_r>
 8009ab8:	6038      	str	r0, [r7, #0]
 8009aba:	4629      	mov	r1, r5
 8009abc:	4630      	mov	r0, r6
 8009abe:	f000 f837 	bl	8009b30 <_sbrk_r>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	d123      	bne.n	8009b0e <_malloc_r+0x92>
 8009ac6:	230c      	movs	r3, #12
 8009ac8:	6033      	str	r3, [r6, #0]
 8009aca:	4630      	mov	r0, r6
 8009acc:	f000 f922 	bl	8009d14 <__malloc_unlock>
 8009ad0:	e7e3      	b.n	8009a9a <_malloc_r+0x1e>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	1b5b      	subs	r3, r3, r5
 8009ad6:	d417      	bmi.n	8009b08 <_malloc_r+0x8c>
 8009ad8:	2b0b      	cmp	r3, #11
 8009ada:	d903      	bls.n	8009ae4 <_malloc_r+0x68>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	441c      	add	r4, r3
 8009ae0:	6025      	str	r5, [r4, #0]
 8009ae2:	e004      	b.n	8009aee <_malloc_r+0x72>
 8009ae4:	6863      	ldr	r3, [r4, #4]
 8009ae6:	42a2      	cmp	r2, r4
 8009ae8:	bf0c      	ite	eq
 8009aea:	600b      	streq	r3, [r1, #0]
 8009aec:	6053      	strne	r3, [r2, #4]
 8009aee:	4630      	mov	r0, r6
 8009af0:	f000 f910 	bl	8009d14 <__malloc_unlock>
 8009af4:	f104 000b 	add.w	r0, r4, #11
 8009af8:	1d23      	adds	r3, r4, #4
 8009afa:	f020 0007 	bic.w	r0, r0, #7
 8009afe:	1ac2      	subs	r2, r0, r3
 8009b00:	d0cc      	beq.n	8009a9c <_malloc_r+0x20>
 8009b02:	1a1b      	subs	r3, r3, r0
 8009b04:	50a3      	str	r3, [r4, r2]
 8009b06:	e7c9      	b.n	8009a9c <_malloc_r+0x20>
 8009b08:	4622      	mov	r2, r4
 8009b0a:	6864      	ldr	r4, [r4, #4]
 8009b0c:	e7cc      	b.n	8009aa8 <_malloc_r+0x2c>
 8009b0e:	1cc4      	adds	r4, r0, #3
 8009b10:	f024 0403 	bic.w	r4, r4, #3
 8009b14:	42a0      	cmp	r0, r4
 8009b16:	d0e3      	beq.n	8009ae0 <_malloc_r+0x64>
 8009b18:	1a21      	subs	r1, r4, r0
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f000 f808 	bl	8009b30 <_sbrk_r>
 8009b20:	3001      	adds	r0, #1
 8009b22:	d1dd      	bne.n	8009ae0 <_malloc_r+0x64>
 8009b24:	e7cf      	b.n	8009ac6 <_malloc_r+0x4a>
 8009b26:	bf00      	nop
 8009b28:	20000404 	.word	0x20000404
 8009b2c:	20000408 	.word	0x20000408

08009b30 <_sbrk_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4d06      	ldr	r5, [pc, #24]	; (8009b4c <_sbrk_r+0x1c>)
 8009b34:	2300      	movs	r3, #0
 8009b36:	4604      	mov	r4, r0
 8009b38:	4608      	mov	r0, r1
 8009b3a:	602b      	str	r3, [r5, #0]
 8009b3c:	f000 fd3c 	bl	800a5b8 <_sbrk>
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	d102      	bne.n	8009b4a <_sbrk_r+0x1a>
 8009b44:	682b      	ldr	r3, [r5, #0]
 8009b46:	b103      	cbz	r3, 8009b4a <_sbrk_r+0x1a>
 8009b48:	6023      	str	r3, [r4, #0]
 8009b4a:	bd38      	pop	{r3, r4, r5, pc}
 8009b4c:	20000714 	.word	0x20000714

08009b50 <siscanf>:
 8009b50:	b40e      	push	{r1, r2, r3}
 8009b52:	b510      	push	{r4, lr}
 8009b54:	b09f      	sub	sp, #124	; 0x7c
 8009b56:	ac21      	add	r4, sp, #132	; 0x84
 8009b58:	f44f 7101 	mov.w	r1, #516	; 0x204
 8009b5c:	f854 2b04 	ldr.w	r2, [r4], #4
 8009b60:	9201      	str	r2, [sp, #4]
 8009b62:	f8ad 101c 	strh.w	r1, [sp, #28]
 8009b66:	9004      	str	r0, [sp, #16]
 8009b68:	9008      	str	r0, [sp, #32]
 8009b6a:	f7f6 fb09 	bl	8000180 <strlen>
 8009b6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ba0 <siscanf+0x50>)
 8009b70:	9005      	str	r0, [sp, #20]
 8009b72:	9009      	str	r0, [sp, #36]	; 0x24
 8009b74:	930d      	str	r3, [sp, #52]	; 0x34
 8009b76:	480b      	ldr	r0, [pc, #44]	; (8009ba4 <siscanf+0x54>)
 8009b78:	9a01      	ldr	r2, [sp, #4]
 8009b7a:	6800      	ldr	r0, [r0, #0]
 8009b7c:	9403      	str	r4, [sp, #12]
 8009b7e:	2300      	movs	r3, #0
 8009b80:	9311      	str	r3, [sp, #68]	; 0x44
 8009b82:	9316      	str	r3, [sp, #88]	; 0x58
 8009b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b88:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009b8c:	a904      	add	r1, sp, #16
 8009b8e:	4623      	mov	r3, r4
 8009b90:	f000 f946 	bl	8009e20 <__ssvfiscanf_r>
 8009b94:	b01f      	add	sp, #124	; 0x7c
 8009b96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b9a:	b003      	add	sp, #12
 8009b9c:	4770      	bx	lr
 8009b9e:	bf00      	nop
 8009ba0:	08009ba9 	.word	0x08009ba9
 8009ba4:	20000044 	.word	0x20000044

08009ba8 <__seofread>:
 8009ba8:	2000      	movs	r0, #0
 8009baa:	4770      	bx	lr

08009bac <strcpy>:
 8009bac:	4603      	mov	r3, r0
 8009bae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bb2:	f803 2b01 	strb.w	r2, [r3], #1
 8009bb6:	2a00      	cmp	r2, #0
 8009bb8:	d1f9      	bne.n	8009bae <strcpy+0x2>
 8009bba:	4770      	bx	lr

08009bbc <strncmp>:
 8009bbc:	b510      	push	{r4, lr}
 8009bbe:	b16a      	cbz	r2, 8009bdc <strncmp+0x20>
 8009bc0:	3901      	subs	r1, #1
 8009bc2:	1884      	adds	r4, r0, r2
 8009bc4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009bc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d103      	bne.n	8009bd8 <strncmp+0x1c>
 8009bd0:	42a0      	cmp	r0, r4
 8009bd2:	d001      	beq.n	8009bd8 <strncmp+0x1c>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1f5      	bne.n	8009bc4 <strncmp+0x8>
 8009bd8:	1a98      	subs	r0, r3, r2
 8009bda:	bd10      	pop	{r4, pc}
 8009bdc:	4610      	mov	r0, r2
 8009bde:	e7fc      	b.n	8009bda <strncmp+0x1e>

08009be0 <_strtoul_l.isra.0>:
 8009be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009be4:	4e3b      	ldr	r6, [pc, #236]	; (8009cd4 <_strtoul_l.isra.0+0xf4>)
 8009be6:	4686      	mov	lr, r0
 8009be8:	468c      	mov	ip, r1
 8009bea:	4660      	mov	r0, ip
 8009bec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009bf0:	5da5      	ldrb	r5, [r4, r6]
 8009bf2:	f015 0508 	ands.w	r5, r5, #8
 8009bf6:	d1f8      	bne.n	8009bea <_strtoul_l.isra.0+0xa>
 8009bf8:	2c2d      	cmp	r4, #45	; 0x2d
 8009bfa:	d134      	bne.n	8009c66 <_strtoul_l.isra.0+0x86>
 8009bfc:	f89c 4000 	ldrb.w	r4, [ip]
 8009c00:	f04f 0801 	mov.w	r8, #1
 8009c04:	f100 0c02 	add.w	ip, r0, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d05e      	beq.n	8009cca <_strtoul_l.isra.0+0xea>
 8009c0c:	2b10      	cmp	r3, #16
 8009c0e:	d10c      	bne.n	8009c2a <_strtoul_l.isra.0+0x4a>
 8009c10:	2c30      	cmp	r4, #48	; 0x30
 8009c12:	d10a      	bne.n	8009c2a <_strtoul_l.isra.0+0x4a>
 8009c14:	f89c 0000 	ldrb.w	r0, [ip]
 8009c18:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009c1c:	2858      	cmp	r0, #88	; 0x58
 8009c1e:	d14f      	bne.n	8009cc0 <_strtoul_l.isra.0+0xe0>
 8009c20:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8009c24:	2310      	movs	r3, #16
 8009c26:	f10c 0c02 	add.w	ip, ip, #2
 8009c2a:	f04f 37ff 	mov.w	r7, #4294967295
 8009c2e:	2500      	movs	r5, #0
 8009c30:	fbb7 f7f3 	udiv	r7, r7, r3
 8009c34:	fb03 f907 	mul.w	r9, r3, r7
 8009c38:	ea6f 0909 	mvn.w	r9, r9
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8009c42:	2e09      	cmp	r6, #9
 8009c44:	d818      	bhi.n	8009c78 <_strtoul_l.isra.0+0x98>
 8009c46:	4634      	mov	r4, r6
 8009c48:	42a3      	cmp	r3, r4
 8009c4a:	dd24      	ble.n	8009c96 <_strtoul_l.isra.0+0xb6>
 8009c4c:	2d00      	cmp	r5, #0
 8009c4e:	db1f      	blt.n	8009c90 <_strtoul_l.isra.0+0xb0>
 8009c50:	4287      	cmp	r7, r0
 8009c52:	d31d      	bcc.n	8009c90 <_strtoul_l.isra.0+0xb0>
 8009c54:	d101      	bne.n	8009c5a <_strtoul_l.isra.0+0x7a>
 8009c56:	45a1      	cmp	r9, r4
 8009c58:	db1a      	blt.n	8009c90 <_strtoul_l.isra.0+0xb0>
 8009c5a:	fb00 4003 	mla	r0, r0, r3, r4
 8009c5e:	2501      	movs	r5, #1
 8009c60:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009c64:	e7eb      	b.n	8009c3e <_strtoul_l.isra.0+0x5e>
 8009c66:	2c2b      	cmp	r4, #43	; 0x2b
 8009c68:	bf08      	it	eq
 8009c6a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009c6e:	46a8      	mov	r8, r5
 8009c70:	bf08      	it	eq
 8009c72:	f100 0c02 	addeq.w	ip, r0, #2
 8009c76:	e7c7      	b.n	8009c08 <_strtoul_l.isra.0+0x28>
 8009c78:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009c7c:	2e19      	cmp	r6, #25
 8009c7e:	d801      	bhi.n	8009c84 <_strtoul_l.isra.0+0xa4>
 8009c80:	3c37      	subs	r4, #55	; 0x37
 8009c82:	e7e1      	b.n	8009c48 <_strtoul_l.isra.0+0x68>
 8009c84:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8009c88:	2e19      	cmp	r6, #25
 8009c8a:	d804      	bhi.n	8009c96 <_strtoul_l.isra.0+0xb6>
 8009c8c:	3c57      	subs	r4, #87	; 0x57
 8009c8e:	e7db      	b.n	8009c48 <_strtoul_l.isra.0+0x68>
 8009c90:	f04f 35ff 	mov.w	r5, #4294967295
 8009c94:	e7e4      	b.n	8009c60 <_strtoul_l.isra.0+0x80>
 8009c96:	2d00      	cmp	r5, #0
 8009c98:	da07      	bge.n	8009caa <_strtoul_l.isra.0+0xca>
 8009c9a:	2322      	movs	r3, #34	; 0x22
 8009c9c:	f8ce 3000 	str.w	r3, [lr]
 8009ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca4:	b942      	cbnz	r2, 8009cb8 <_strtoul_l.isra.0+0xd8>
 8009ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009caa:	f1b8 0f00 	cmp.w	r8, #0
 8009cae:	d000      	beq.n	8009cb2 <_strtoul_l.isra.0+0xd2>
 8009cb0:	4240      	negs	r0, r0
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	d0f7      	beq.n	8009ca6 <_strtoul_l.isra.0+0xc6>
 8009cb6:	b10d      	cbz	r5, 8009cbc <_strtoul_l.isra.0+0xdc>
 8009cb8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009cbc:	6011      	str	r1, [r2, #0]
 8009cbe:	e7f2      	b.n	8009ca6 <_strtoul_l.isra.0+0xc6>
 8009cc0:	2430      	movs	r4, #48	; 0x30
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d1b1      	bne.n	8009c2a <_strtoul_l.isra.0+0x4a>
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	e7af      	b.n	8009c2a <_strtoul_l.isra.0+0x4a>
 8009cca:	2c30      	cmp	r4, #48	; 0x30
 8009ccc:	d0a2      	beq.n	8009c14 <_strtoul_l.isra.0+0x34>
 8009cce:	230a      	movs	r3, #10
 8009cd0:	e7ab      	b.n	8009c2a <_strtoul_l.isra.0+0x4a>
 8009cd2:	bf00      	nop
 8009cd4:	0800a9b9 	.word	0x0800a9b9

08009cd8 <_strtoul_r>:
 8009cd8:	f7ff bf82 	b.w	8009be0 <_strtoul_l.isra.0>

08009cdc <strtoul>:
 8009cdc:	4613      	mov	r3, r2
 8009cde:	460a      	mov	r2, r1
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	4802      	ldr	r0, [pc, #8]	; (8009cec <strtoul+0x10>)
 8009ce4:	6800      	ldr	r0, [r0, #0]
 8009ce6:	f7ff bf7b 	b.w	8009be0 <_strtoul_l.isra.0>
 8009cea:	bf00      	nop
 8009cec:	20000044 	.word	0x20000044

08009cf0 <__env_lock>:
 8009cf0:	4801      	ldr	r0, [pc, #4]	; (8009cf8 <__env_lock+0x8>)
 8009cf2:	f7ff be68 	b.w	80099c6 <__retarget_lock_acquire_recursive>
 8009cf6:	bf00      	nop
 8009cf8:	2000070a 	.word	0x2000070a

08009cfc <__env_unlock>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	; (8009d04 <__env_unlock+0x8>)
 8009cfe:	f7ff be64 	b.w	80099ca <__retarget_lock_release_recursive>
 8009d02:	bf00      	nop
 8009d04:	2000070a 	.word	0x2000070a

08009d08 <__malloc_lock>:
 8009d08:	4801      	ldr	r0, [pc, #4]	; (8009d10 <__malloc_lock+0x8>)
 8009d0a:	f7ff be5c 	b.w	80099c6 <__retarget_lock_acquire_recursive>
 8009d0e:	bf00      	nop
 8009d10:	2000070c 	.word	0x2000070c

08009d14 <__malloc_unlock>:
 8009d14:	4801      	ldr	r0, [pc, #4]	; (8009d1c <__malloc_unlock+0x8>)
 8009d16:	f7ff be58 	b.w	80099ca <__retarget_lock_release_recursive>
 8009d1a:	bf00      	nop
 8009d1c:	2000070c 	.word	0x2000070c

08009d20 <_realloc_r>:
 8009d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d22:	4607      	mov	r7, r0
 8009d24:	4614      	mov	r4, r2
 8009d26:	460e      	mov	r6, r1
 8009d28:	b921      	cbnz	r1, 8009d34 <_realloc_r+0x14>
 8009d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009d2e:	4611      	mov	r1, r2
 8009d30:	f7ff bea4 	b.w	8009a7c <_malloc_r>
 8009d34:	b922      	cbnz	r2, 8009d40 <_realloc_r+0x20>
 8009d36:	f7ff fe51 	bl	80099dc <_free_r>
 8009d3a:	4625      	mov	r5, r4
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d40:	f000 fc32 	bl	800a5a8 <_malloc_usable_size_r>
 8009d44:	42a0      	cmp	r0, r4
 8009d46:	d20f      	bcs.n	8009d68 <_realloc_r+0x48>
 8009d48:	4621      	mov	r1, r4
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	f7ff fe96 	bl	8009a7c <_malloc_r>
 8009d50:	4605      	mov	r5, r0
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d0f2      	beq.n	8009d3c <_realloc_r+0x1c>
 8009d56:	4631      	mov	r1, r6
 8009d58:	4622      	mov	r2, r4
 8009d5a:	f7ff f90f 	bl	8008f7c <memcpy>
 8009d5e:	4631      	mov	r1, r6
 8009d60:	4638      	mov	r0, r7
 8009d62:	f7ff fe3b 	bl	80099dc <_free_r>
 8009d66:	e7e9      	b.n	8009d3c <_realloc_r+0x1c>
 8009d68:	4635      	mov	r5, r6
 8009d6a:	e7e7      	b.n	8009d3c <_realloc_r+0x1c>

08009d6c <_sungetc_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	1c4b      	adds	r3, r1, #1
 8009d70:	4614      	mov	r4, r2
 8009d72:	d103      	bne.n	8009d7c <_sungetc_r+0x10>
 8009d74:	f04f 35ff 	mov.w	r5, #4294967295
 8009d78:	4628      	mov	r0, r5
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	8993      	ldrh	r3, [r2, #12]
 8009d7e:	f023 0320 	bic.w	r3, r3, #32
 8009d82:	8193      	strh	r3, [r2, #12]
 8009d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d86:	6852      	ldr	r2, [r2, #4]
 8009d88:	b2cd      	uxtb	r5, r1
 8009d8a:	b18b      	cbz	r3, 8009db0 <_sungetc_r+0x44>
 8009d8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	dd08      	ble.n	8009da4 <_sungetc_r+0x38>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	1e5a      	subs	r2, r3, #1
 8009d96:	6022      	str	r2, [r4, #0]
 8009d98:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009d9c:	6863      	ldr	r3, [r4, #4]
 8009d9e:	3301      	adds	r3, #1
 8009da0:	6063      	str	r3, [r4, #4]
 8009da2:	e7e9      	b.n	8009d78 <_sungetc_r+0xc>
 8009da4:	4621      	mov	r1, r4
 8009da6:	f000 fbbf 	bl	800a528 <__submore>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d0f1      	beq.n	8009d92 <_sungetc_r+0x26>
 8009dae:	e7e1      	b.n	8009d74 <_sungetc_r+0x8>
 8009db0:	6921      	ldr	r1, [r4, #16]
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	b151      	cbz	r1, 8009dcc <_sungetc_r+0x60>
 8009db6:	4299      	cmp	r1, r3
 8009db8:	d208      	bcs.n	8009dcc <_sungetc_r+0x60>
 8009dba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009dbe:	42a9      	cmp	r1, r5
 8009dc0:	d104      	bne.n	8009dcc <_sungetc_r+0x60>
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	3201      	adds	r2, #1
 8009dc6:	6023      	str	r3, [r4, #0]
 8009dc8:	6062      	str	r2, [r4, #4]
 8009dca:	e7d5      	b.n	8009d78 <_sungetc_r+0xc>
 8009dcc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009dd6:	2303      	movs	r3, #3
 8009dd8:	63a3      	str	r3, [r4, #56]	; 0x38
 8009dda:	4623      	mov	r3, r4
 8009ddc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	2301      	movs	r3, #1
 8009de4:	e7dc      	b.n	8009da0 <_sungetc_r+0x34>

08009de6 <__ssrefill_r>:
 8009de6:	b510      	push	{r4, lr}
 8009de8:	460c      	mov	r4, r1
 8009dea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009dec:	b169      	cbz	r1, 8009e0a <__ssrefill_r+0x24>
 8009dee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009df2:	4299      	cmp	r1, r3
 8009df4:	d001      	beq.n	8009dfa <__ssrefill_r+0x14>
 8009df6:	f7ff fdf1 	bl	80099dc <_free_r>
 8009dfa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009dfc:	6063      	str	r3, [r4, #4]
 8009dfe:	2000      	movs	r0, #0
 8009e00:	6360      	str	r0, [r4, #52]	; 0x34
 8009e02:	b113      	cbz	r3, 8009e0a <__ssrefill_r+0x24>
 8009e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e06:	6023      	str	r3, [r4, #0]
 8009e08:	bd10      	pop	{r4, pc}
 8009e0a:	6923      	ldr	r3, [r4, #16]
 8009e0c:	6023      	str	r3, [r4, #0]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	6063      	str	r3, [r4, #4]
 8009e12:	89a3      	ldrh	r3, [r4, #12]
 8009e14:	f043 0320 	orr.w	r3, r3, #32
 8009e18:	81a3      	strh	r3, [r4, #12]
 8009e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1e:	e7f3      	b.n	8009e08 <__ssrefill_r+0x22>

08009e20 <__ssvfiscanf_r>:
 8009e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e24:	460c      	mov	r4, r1
 8009e26:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009e30:	49b2      	ldr	r1, [pc, #712]	; (800a0fc <__ssvfiscanf_r+0x2dc>)
 8009e32:	91a0      	str	r1, [sp, #640]	; 0x280
 8009e34:	f10d 0804 	add.w	r8, sp, #4
 8009e38:	49b1      	ldr	r1, [pc, #708]	; (800a100 <__ssvfiscanf_r+0x2e0>)
 8009e3a:	4fb2      	ldr	r7, [pc, #712]	; (800a104 <__ssvfiscanf_r+0x2e4>)
 8009e3c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800a108 <__ssvfiscanf_r+0x2e8>
 8009e40:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009e44:	4606      	mov	r6, r0
 8009e46:	91a1      	str	r1, [sp, #644]	; 0x284
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	f892 a000 	ldrb.w	sl, [r2]
 8009e4e:	f1ba 0f00 	cmp.w	sl, #0
 8009e52:	f000 8151 	beq.w	800a0f8 <__ssvfiscanf_r+0x2d8>
 8009e56:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009e5a:	f013 0308 	ands.w	r3, r3, #8
 8009e5e:	f102 0501 	add.w	r5, r2, #1
 8009e62:	d019      	beq.n	8009e98 <__ssvfiscanf_r+0x78>
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd0f      	ble.n	8009e8a <__ssvfiscanf_r+0x6a>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	781a      	ldrb	r2, [r3, #0]
 8009e6e:	5cba      	ldrb	r2, [r7, r2]
 8009e70:	0712      	lsls	r2, r2, #28
 8009e72:	d401      	bmi.n	8009e78 <__ssvfiscanf_r+0x58>
 8009e74:	462a      	mov	r2, r5
 8009e76:	e7e8      	b.n	8009e4a <__ssvfiscanf_r+0x2a>
 8009e78:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009e7a:	3201      	adds	r2, #1
 8009e7c:	9245      	str	r2, [sp, #276]	; 0x114
 8009e7e:	6862      	ldr	r2, [r4, #4]
 8009e80:	3301      	adds	r3, #1
 8009e82:	3a01      	subs	r2, #1
 8009e84:	6062      	str	r2, [r4, #4]
 8009e86:	6023      	str	r3, [r4, #0]
 8009e88:	e7ec      	b.n	8009e64 <__ssvfiscanf_r+0x44>
 8009e8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4630      	mov	r0, r6
 8009e90:	4798      	blx	r3
 8009e92:	2800      	cmp	r0, #0
 8009e94:	d0e9      	beq.n	8009e6a <__ssvfiscanf_r+0x4a>
 8009e96:	e7ed      	b.n	8009e74 <__ssvfiscanf_r+0x54>
 8009e98:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009e9c:	f040 8083 	bne.w	8009fa6 <__ssvfiscanf_r+0x186>
 8009ea0:	9341      	str	r3, [sp, #260]	; 0x104
 8009ea2:	9343      	str	r3, [sp, #268]	; 0x10c
 8009ea4:	7853      	ldrb	r3, [r2, #1]
 8009ea6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea8:	bf02      	ittt	eq
 8009eaa:	2310      	moveq	r3, #16
 8009eac:	1c95      	addeq	r5, r2, #2
 8009eae:	9341      	streq	r3, [sp, #260]	; 0x104
 8009eb0:	220a      	movs	r2, #10
 8009eb2:	46ab      	mov	fp, r5
 8009eb4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009eb8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009ebc:	2b09      	cmp	r3, #9
 8009ebe:	d91d      	bls.n	8009efc <__ssvfiscanf_r+0xdc>
 8009ec0:	4891      	ldr	r0, [pc, #580]	; (800a108 <__ssvfiscanf_r+0x2e8>)
 8009ec2:	2203      	movs	r2, #3
 8009ec4:	f7f6 f974 	bl	80001b0 <memchr>
 8009ec8:	b140      	cbz	r0, 8009edc <__ssvfiscanf_r+0xbc>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	eba0 0009 	sub.w	r0, r0, r9
 8009ed0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ed4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009ed6:	4318      	orrs	r0, r3
 8009ed8:	9041      	str	r0, [sp, #260]	; 0x104
 8009eda:	465d      	mov	r5, fp
 8009edc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ee0:	2b78      	cmp	r3, #120	; 0x78
 8009ee2:	d806      	bhi.n	8009ef2 <__ssvfiscanf_r+0xd2>
 8009ee4:	2b57      	cmp	r3, #87	; 0x57
 8009ee6:	d810      	bhi.n	8009f0a <__ssvfiscanf_r+0xea>
 8009ee8:	2b25      	cmp	r3, #37	; 0x25
 8009eea:	d05c      	beq.n	8009fa6 <__ssvfiscanf_r+0x186>
 8009eec:	d856      	bhi.n	8009f9c <__ssvfiscanf_r+0x17c>
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d074      	beq.n	8009fdc <__ssvfiscanf_r+0x1bc>
 8009ef2:	2303      	movs	r3, #3
 8009ef4:	9347      	str	r3, [sp, #284]	; 0x11c
 8009ef6:	230a      	movs	r3, #10
 8009ef8:	9342      	str	r3, [sp, #264]	; 0x108
 8009efa:	e081      	b.n	800a000 <__ssvfiscanf_r+0x1e0>
 8009efc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009efe:	fb02 1303 	mla	r3, r2, r3, r1
 8009f02:	3b30      	subs	r3, #48	; 0x30
 8009f04:	9343      	str	r3, [sp, #268]	; 0x10c
 8009f06:	465d      	mov	r5, fp
 8009f08:	e7d3      	b.n	8009eb2 <__ssvfiscanf_r+0x92>
 8009f0a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8009f0e:	2a20      	cmp	r2, #32
 8009f10:	d8ef      	bhi.n	8009ef2 <__ssvfiscanf_r+0xd2>
 8009f12:	a101      	add	r1, pc, #4	; (adr r1, 8009f18 <__ssvfiscanf_r+0xf8>)
 8009f14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009f18:	08009feb 	.word	0x08009feb
 8009f1c:	08009ef3 	.word	0x08009ef3
 8009f20:	08009ef3 	.word	0x08009ef3
 8009f24:	0800a049 	.word	0x0800a049
 8009f28:	08009ef3 	.word	0x08009ef3
 8009f2c:	08009ef3 	.word	0x08009ef3
 8009f30:	08009ef3 	.word	0x08009ef3
 8009f34:	08009ef3 	.word	0x08009ef3
 8009f38:	08009ef3 	.word	0x08009ef3
 8009f3c:	08009ef3 	.word	0x08009ef3
 8009f40:	08009ef3 	.word	0x08009ef3
 8009f44:	0800a05f 	.word	0x0800a05f
 8009f48:	0800a035 	.word	0x0800a035
 8009f4c:	08009fa3 	.word	0x08009fa3
 8009f50:	08009fa3 	.word	0x08009fa3
 8009f54:	08009fa3 	.word	0x08009fa3
 8009f58:	08009ef3 	.word	0x08009ef3
 8009f5c:	0800a039 	.word	0x0800a039
 8009f60:	08009ef3 	.word	0x08009ef3
 8009f64:	08009ef3 	.word	0x08009ef3
 8009f68:	08009ef3 	.word	0x08009ef3
 8009f6c:	08009ef3 	.word	0x08009ef3
 8009f70:	0800a06f 	.word	0x0800a06f
 8009f74:	0800a041 	.word	0x0800a041
 8009f78:	08009fe3 	.word	0x08009fe3
 8009f7c:	08009ef3 	.word	0x08009ef3
 8009f80:	08009ef3 	.word	0x08009ef3
 8009f84:	0800a06b 	.word	0x0800a06b
 8009f88:	08009ef3 	.word	0x08009ef3
 8009f8c:	0800a035 	.word	0x0800a035
 8009f90:	08009ef3 	.word	0x08009ef3
 8009f94:	08009ef3 	.word	0x08009ef3
 8009f98:	08009feb 	.word	0x08009feb
 8009f9c:	3b45      	subs	r3, #69	; 0x45
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d8a7      	bhi.n	8009ef2 <__ssvfiscanf_r+0xd2>
 8009fa2:	2305      	movs	r3, #5
 8009fa4:	e02b      	b.n	8009ffe <__ssvfiscanf_r+0x1de>
 8009fa6:	6863      	ldr	r3, [r4, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dd0d      	ble.n	8009fc8 <__ssvfiscanf_r+0x1a8>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	781a      	ldrb	r2, [r3, #0]
 8009fb0:	4552      	cmp	r2, sl
 8009fb2:	f040 80a1 	bne.w	800a0f8 <__ssvfiscanf_r+0x2d8>
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	6862      	ldr	r2, [r4, #4]
 8009fba:	6023      	str	r3, [r4, #0]
 8009fbc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009fbe:	3a01      	subs	r2, #1
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	6062      	str	r2, [r4, #4]
 8009fc4:	9345      	str	r3, [sp, #276]	; 0x114
 8009fc6:	e755      	b.n	8009e74 <__ssvfiscanf_r+0x54>
 8009fc8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4630      	mov	r0, r6
 8009fce:	4798      	blx	r3
 8009fd0:	2800      	cmp	r0, #0
 8009fd2:	d0eb      	beq.n	8009fac <__ssvfiscanf_r+0x18c>
 8009fd4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f040 8084 	bne.w	800a0e4 <__ssvfiscanf_r+0x2c4>
 8009fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe0:	e086      	b.n	800a0f0 <__ssvfiscanf_r+0x2d0>
 8009fe2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009fe4:	f042 0220 	orr.w	r2, r2, #32
 8009fe8:	9241      	str	r2, [sp, #260]	; 0x104
 8009fea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009fec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ff0:	9241      	str	r2, [sp, #260]	; 0x104
 8009ff2:	2210      	movs	r2, #16
 8009ff4:	2b6f      	cmp	r3, #111	; 0x6f
 8009ff6:	9242      	str	r2, [sp, #264]	; 0x108
 8009ff8:	bf34      	ite	cc
 8009ffa:	2303      	movcc	r3, #3
 8009ffc:	2304      	movcs	r3, #4
 8009ffe:	9347      	str	r3, [sp, #284]	; 0x11c
 800a000:	6863      	ldr	r3, [r4, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd41      	ble.n	800a08a <__ssvfiscanf_r+0x26a>
 800a006:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a008:	0659      	lsls	r1, r3, #25
 800a00a:	d404      	bmi.n	800a016 <__ssvfiscanf_r+0x1f6>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	781a      	ldrb	r2, [r3, #0]
 800a010:	5cba      	ldrb	r2, [r7, r2]
 800a012:	0712      	lsls	r2, r2, #28
 800a014:	d440      	bmi.n	800a098 <__ssvfiscanf_r+0x278>
 800a016:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a018:	2b02      	cmp	r3, #2
 800a01a:	dc4f      	bgt.n	800a0bc <__ssvfiscanf_r+0x29c>
 800a01c:	466b      	mov	r3, sp
 800a01e:	4622      	mov	r2, r4
 800a020:	a941      	add	r1, sp, #260	; 0x104
 800a022:	4630      	mov	r0, r6
 800a024:	f000 f874 	bl	800a110 <_scanf_chars>
 800a028:	2801      	cmp	r0, #1
 800a02a:	d065      	beq.n	800a0f8 <__ssvfiscanf_r+0x2d8>
 800a02c:	2802      	cmp	r0, #2
 800a02e:	f47f af21 	bne.w	8009e74 <__ssvfiscanf_r+0x54>
 800a032:	e7cf      	b.n	8009fd4 <__ssvfiscanf_r+0x1b4>
 800a034:	220a      	movs	r2, #10
 800a036:	e7dd      	b.n	8009ff4 <__ssvfiscanf_r+0x1d4>
 800a038:	2300      	movs	r3, #0
 800a03a:	9342      	str	r3, [sp, #264]	; 0x108
 800a03c:	2303      	movs	r3, #3
 800a03e:	e7de      	b.n	8009ffe <__ssvfiscanf_r+0x1de>
 800a040:	2308      	movs	r3, #8
 800a042:	9342      	str	r3, [sp, #264]	; 0x108
 800a044:	2304      	movs	r3, #4
 800a046:	e7da      	b.n	8009ffe <__ssvfiscanf_r+0x1de>
 800a048:	4629      	mov	r1, r5
 800a04a:	4640      	mov	r0, r8
 800a04c:	f000 f9ac 	bl	800a3a8 <__sccl>
 800a050:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a056:	9341      	str	r3, [sp, #260]	; 0x104
 800a058:	4605      	mov	r5, r0
 800a05a:	2301      	movs	r3, #1
 800a05c:	e7cf      	b.n	8009ffe <__ssvfiscanf_r+0x1de>
 800a05e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800a060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a064:	9341      	str	r3, [sp, #260]	; 0x104
 800a066:	2300      	movs	r3, #0
 800a068:	e7c9      	b.n	8009ffe <__ssvfiscanf_r+0x1de>
 800a06a:	2302      	movs	r3, #2
 800a06c:	e7c7      	b.n	8009ffe <__ssvfiscanf_r+0x1de>
 800a06e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800a070:	06c3      	lsls	r3, r0, #27
 800a072:	f53f aeff 	bmi.w	8009e74 <__ssvfiscanf_r+0x54>
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a07a:	1d19      	adds	r1, r3, #4
 800a07c:	9100      	str	r1, [sp, #0]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	07c0      	lsls	r0, r0, #31
 800a082:	bf4c      	ite	mi
 800a084:	801a      	strhmi	r2, [r3, #0]
 800a086:	601a      	strpl	r2, [r3, #0]
 800a088:	e6f4      	b.n	8009e74 <__ssvfiscanf_r+0x54>
 800a08a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a08c:	4621      	mov	r1, r4
 800a08e:	4630      	mov	r0, r6
 800a090:	4798      	blx	r3
 800a092:	2800      	cmp	r0, #0
 800a094:	d0b7      	beq.n	800a006 <__ssvfiscanf_r+0x1e6>
 800a096:	e79d      	b.n	8009fd4 <__ssvfiscanf_r+0x1b4>
 800a098:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800a09a:	3201      	adds	r2, #1
 800a09c:	9245      	str	r2, [sp, #276]	; 0x114
 800a09e:	6862      	ldr	r2, [r4, #4]
 800a0a0:	3a01      	subs	r2, #1
 800a0a2:	2a00      	cmp	r2, #0
 800a0a4:	6062      	str	r2, [r4, #4]
 800a0a6:	dd02      	ble.n	800a0ae <__ssvfiscanf_r+0x28e>
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	e7ae      	b.n	800a00c <__ssvfiscanf_r+0x1ec>
 800a0ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800a0b0:	4621      	mov	r1, r4
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	4798      	blx	r3
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d0a8      	beq.n	800a00c <__ssvfiscanf_r+0x1ec>
 800a0ba:	e78b      	b.n	8009fd4 <__ssvfiscanf_r+0x1b4>
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	dc06      	bgt.n	800a0ce <__ssvfiscanf_r+0x2ae>
 800a0c0:	466b      	mov	r3, sp
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	a941      	add	r1, sp, #260	; 0x104
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	f000 f87a 	bl	800a1c0 <_scanf_i>
 800a0cc:	e7ac      	b.n	800a028 <__ssvfiscanf_r+0x208>
 800a0ce:	4b0f      	ldr	r3, [pc, #60]	; (800a10c <__ssvfiscanf_r+0x2ec>)
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f43f aecf 	beq.w	8009e74 <__ssvfiscanf_r+0x54>
 800a0d6:	466b      	mov	r3, sp
 800a0d8:	4622      	mov	r2, r4
 800a0da:	a941      	add	r1, sp, #260	; 0x104
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f3af 8000 	nop.w
 800a0e2:	e7a1      	b.n	800a028 <__ssvfiscanf_r+0x208>
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a0ea:	bf18      	it	ne
 800a0ec:	f04f 30ff 	movne.w	r0, #4294967295
 800a0f0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800a0f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800a0fa:	e7f9      	b.n	800a0f0 <__ssvfiscanf_r+0x2d0>
 800a0fc:	08009d6d 	.word	0x08009d6d
 800a100:	08009de7 	.word	0x08009de7
 800a104:	0800a9b9 	.word	0x0800a9b9
 800a108:	0800aab9 	.word	0x0800aab9
 800a10c:	00000000 	.word	0x00000000

0800a110 <_scanf_chars>:
 800a110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a114:	4615      	mov	r5, r2
 800a116:	688a      	ldr	r2, [r1, #8]
 800a118:	4680      	mov	r8, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	b932      	cbnz	r2, 800a12c <_scanf_chars+0x1c>
 800a11e:	698a      	ldr	r2, [r1, #24]
 800a120:	2a00      	cmp	r2, #0
 800a122:	bf0c      	ite	eq
 800a124:	2201      	moveq	r2, #1
 800a126:	f04f 32ff 	movne.w	r2, #4294967295
 800a12a:	608a      	str	r2, [r1, #8]
 800a12c:	6822      	ldr	r2, [r4, #0]
 800a12e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800a1bc <_scanf_chars+0xac>
 800a132:	06d1      	lsls	r1, r2, #27
 800a134:	bf5f      	itttt	pl
 800a136:	681a      	ldrpl	r2, [r3, #0]
 800a138:	1d11      	addpl	r1, r2, #4
 800a13a:	6019      	strpl	r1, [r3, #0]
 800a13c:	6816      	ldrpl	r6, [r2, #0]
 800a13e:	2700      	movs	r7, #0
 800a140:	69a0      	ldr	r0, [r4, #24]
 800a142:	b188      	cbz	r0, 800a168 <_scanf_chars+0x58>
 800a144:	2801      	cmp	r0, #1
 800a146:	d107      	bne.n	800a158 <_scanf_chars+0x48>
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	781a      	ldrb	r2, [r3, #0]
 800a14c:	6963      	ldr	r3, [r4, #20]
 800a14e:	5c9b      	ldrb	r3, [r3, r2]
 800a150:	b953      	cbnz	r3, 800a168 <_scanf_chars+0x58>
 800a152:	bb27      	cbnz	r7, 800a19e <_scanf_chars+0x8e>
 800a154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a158:	2802      	cmp	r0, #2
 800a15a:	d120      	bne.n	800a19e <_scanf_chars+0x8e>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a164:	071b      	lsls	r3, r3, #28
 800a166:	d41a      	bmi.n	800a19e <_scanf_chars+0x8e>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	06da      	lsls	r2, r3, #27
 800a16c:	bf5e      	ittt	pl
 800a16e:	682b      	ldrpl	r3, [r5, #0]
 800a170:	781b      	ldrbpl	r3, [r3, #0]
 800a172:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a176:	682a      	ldr	r2, [r5, #0]
 800a178:	686b      	ldr	r3, [r5, #4]
 800a17a:	3201      	adds	r2, #1
 800a17c:	602a      	str	r2, [r5, #0]
 800a17e:	68a2      	ldr	r2, [r4, #8]
 800a180:	3b01      	subs	r3, #1
 800a182:	3a01      	subs	r2, #1
 800a184:	606b      	str	r3, [r5, #4]
 800a186:	3701      	adds	r7, #1
 800a188:	60a2      	str	r2, [r4, #8]
 800a18a:	b142      	cbz	r2, 800a19e <_scanf_chars+0x8e>
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dcd7      	bgt.n	800a140 <_scanf_chars+0x30>
 800a190:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a194:	4629      	mov	r1, r5
 800a196:	4640      	mov	r0, r8
 800a198:	4798      	blx	r3
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d0d0      	beq.n	800a140 <_scanf_chars+0x30>
 800a19e:	6823      	ldr	r3, [r4, #0]
 800a1a0:	f013 0310 	ands.w	r3, r3, #16
 800a1a4:	d105      	bne.n	800a1b2 <_scanf_chars+0xa2>
 800a1a6:	68e2      	ldr	r2, [r4, #12]
 800a1a8:	3201      	adds	r2, #1
 800a1aa:	60e2      	str	r2, [r4, #12]
 800a1ac:	69a2      	ldr	r2, [r4, #24]
 800a1ae:	b102      	cbz	r2, 800a1b2 <_scanf_chars+0xa2>
 800a1b0:	7033      	strb	r3, [r6, #0]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	441f      	add	r7, r3
 800a1b6:	6127      	str	r7, [r4, #16]
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	e7cb      	b.n	800a154 <_scanf_chars+0x44>
 800a1bc:	0800a9b9 	.word	0x0800a9b9

0800a1c0 <_scanf_i>:
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	4698      	mov	r8, r3
 800a1c6:	4b74      	ldr	r3, [pc, #464]	; (800a398 <_scanf_i+0x1d8>)
 800a1c8:	460c      	mov	r4, r1
 800a1ca:	4682      	mov	sl, r0
 800a1cc:	4616      	mov	r6, r2
 800a1ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	ab03      	add	r3, sp, #12
 800a1d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a1da:	4b70      	ldr	r3, [pc, #448]	; (800a39c <_scanf_i+0x1dc>)
 800a1dc:	69a1      	ldr	r1, [r4, #24]
 800a1de:	4a70      	ldr	r2, [pc, #448]	; (800a3a0 <_scanf_i+0x1e0>)
 800a1e0:	2903      	cmp	r1, #3
 800a1e2:	bf18      	it	ne
 800a1e4:	461a      	movne	r2, r3
 800a1e6:	68a3      	ldr	r3, [r4, #8]
 800a1e8:	9201      	str	r2, [sp, #4]
 800a1ea:	1e5a      	subs	r2, r3, #1
 800a1ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a1f0:	bf88      	it	hi
 800a1f2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a1f6:	4627      	mov	r7, r4
 800a1f8:	bf82      	ittt	hi
 800a1fa:	eb03 0905 	addhi.w	r9, r3, r5
 800a1fe:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a202:	60a3      	strhi	r3, [r4, #8]
 800a204:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a208:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a20c:	bf98      	it	ls
 800a20e:	f04f 0900 	movls.w	r9, #0
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	463d      	mov	r5, r7
 800a216:	f04f 0b00 	mov.w	fp, #0
 800a21a:	6831      	ldr	r1, [r6, #0]
 800a21c:	ab03      	add	r3, sp, #12
 800a21e:	7809      	ldrb	r1, [r1, #0]
 800a220:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a224:	2202      	movs	r2, #2
 800a226:	f7f5 ffc3 	bl	80001b0 <memchr>
 800a22a:	b328      	cbz	r0, 800a278 <_scanf_i+0xb8>
 800a22c:	f1bb 0f01 	cmp.w	fp, #1
 800a230:	d159      	bne.n	800a2e6 <_scanf_i+0x126>
 800a232:	6862      	ldr	r2, [r4, #4]
 800a234:	b92a      	cbnz	r2, 800a242 <_scanf_i+0x82>
 800a236:	6822      	ldr	r2, [r4, #0]
 800a238:	2308      	movs	r3, #8
 800a23a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a23e:	6063      	str	r3, [r4, #4]
 800a240:	6022      	str	r2, [r4, #0]
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a248:	6022      	str	r2, [r4, #0]
 800a24a:	68a2      	ldr	r2, [r4, #8]
 800a24c:	1e51      	subs	r1, r2, #1
 800a24e:	60a1      	str	r1, [r4, #8]
 800a250:	b192      	cbz	r2, 800a278 <_scanf_i+0xb8>
 800a252:	6832      	ldr	r2, [r6, #0]
 800a254:	1c51      	adds	r1, r2, #1
 800a256:	6031      	str	r1, [r6, #0]
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	f805 2b01 	strb.w	r2, [r5], #1
 800a25e:	6872      	ldr	r2, [r6, #4]
 800a260:	3a01      	subs	r2, #1
 800a262:	2a00      	cmp	r2, #0
 800a264:	6072      	str	r2, [r6, #4]
 800a266:	dc07      	bgt.n	800a278 <_scanf_i+0xb8>
 800a268:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a26c:	4631      	mov	r1, r6
 800a26e:	4650      	mov	r0, sl
 800a270:	4790      	blx	r2
 800a272:	2800      	cmp	r0, #0
 800a274:	f040 8085 	bne.w	800a382 <_scanf_i+0x1c2>
 800a278:	f10b 0b01 	add.w	fp, fp, #1
 800a27c:	f1bb 0f03 	cmp.w	fp, #3
 800a280:	d1cb      	bne.n	800a21a <_scanf_i+0x5a>
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	b90b      	cbnz	r3, 800a28a <_scanf_i+0xca>
 800a286:	230a      	movs	r3, #10
 800a288:	6063      	str	r3, [r4, #4]
 800a28a:	6863      	ldr	r3, [r4, #4]
 800a28c:	4945      	ldr	r1, [pc, #276]	; (800a3a4 <_scanf_i+0x1e4>)
 800a28e:	6960      	ldr	r0, [r4, #20]
 800a290:	1ac9      	subs	r1, r1, r3
 800a292:	f000 f889 	bl	800a3a8 <__sccl>
 800a296:	f04f 0b00 	mov.w	fp, #0
 800a29a:	68a3      	ldr	r3, [r4, #8]
 800a29c:	6822      	ldr	r2, [r4, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d03d      	beq.n	800a31e <_scanf_i+0x15e>
 800a2a2:	6831      	ldr	r1, [r6, #0]
 800a2a4:	6960      	ldr	r0, [r4, #20]
 800a2a6:	f891 c000 	ldrb.w	ip, [r1]
 800a2aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d035      	beq.n	800a31e <_scanf_i+0x15e>
 800a2b2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a2b6:	d124      	bne.n	800a302 <_scanf_i+0x142>
 800a2b8:	0510      	lsls	r0, r2, #20
 800a2ba:	d522      	bpl.n	800a302 <_scanf_i+0x142>
 800a2bc:	f10b 0b01 	add.w	fp, fp, #1
 800a2c0:	f1b9 0f00 	cmp.w	r9, #0
 800a2c4:	d003      	beq.n	800a2ce <_scanf_i+0x10e>
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	6873      	ldr	r3, [r6, #4]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	6073      	str	r3, [r6, #4]
 800a2d6:	dd1b      	ble.n	800a310 <_scanf_i+0x150>
 800a2d8:	6833      	ldr	r3, [r6, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	6033      	str	r3, [r6, #0]
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	60a3      	str	r3, [r4, #8]
 800a2e4:	e7d9      	b.n	800a29a <_scanf_i+0xda>
 800a2e6:	f1bb 0f02 	cmp.w	fp, #2
 800a2ea:	d1ae      	bne.n	800a24a <_scanf_i+0x8a>
 800a2ec:	6822      	ldr	r2, [r4, #0]
 800a2ee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a2f2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a2f6:	d1bf      	bne.n	800a278 <_scanf_i+0xb8>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	6063      	str	r3, [r4, #4]
 800a2fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a300:	e7a2      	b.n	800a248 <_scanf_i+0x88>
 800a302:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a306:	6022      	str	r2, [r4, #0]
 800a308:	780b      	ldrb	r3, [r1, #0]
 800a30a:	f805 3b01 	strb.w	r3, [r5], #1
 800a30e:	e7de      	b.n	800a2ce <_scanf_i+0x10e>
 800a310:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a314:	4631      	mov	r1, r6
 800a316:	4650      	mov	r0, sl
 800a318:	4798      	blx	r3
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d0df      	beq.n	800a2de <_scanf_i+0x11e>
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	05d9      	lsls	r1, r3, #23
 800a322:	d50d      	bpl.n	800a340 <_scanf_i+0x180>
 800a324:	42bd      	cmp	r5, r7
 800a326:	d909      	bls.n	800a33c <_scanf_i+0x17c>
 800a328:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a32c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a330:	4632      	mov	r2, r6
 800a332:	4650      	mov	r0, sl
 800a334:	4798      	blx	r3
 800a336:	f105 39ff 	add.w	r9, r5, #4294967295
 800a33a:	464d      	mov	r5, r9
 800a33c:	42bd      	cmp	r5, r7
 800a33e:	d028      	beq.n	800a392 <_scanf_i+0x1d2>
 800a340:	6822      	ldr	r2, [r4, #0]
 800a342:	f012 0210 	ands.w	r2, r2, #16
 800a346:	d113      	bne.n	800a370 <_scanf_i+0x1b0>
 800a348:	702a      	strb	r2, [r5, #0]
 800a34a:	6863      	ldr	r3, [r4, #4]
 800a34c:	9e01      	ldr	r6, [sp, #4]
 800a34e:	4639      	mov	r1, r7
 800a350:	4650      	mov	r0, sl
 800a352:	47b0      	blx	r6
 800a354:	f8d8 3000 	ldr.w	r3, [r8]
 800a358:	6821      	ldr	r1, [r4, #0]
 800a35a:	1d1a      	adds	r2, r3, #4
 800a35c:	f8c8 2000 	str.w	r2, [r8]
 800a360:	f011 0f20 	tst.w	r1, #32
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	d00f      	beq.n	800a388 <_scanf_i+0x1c8>
 800a368:	6018      	str	r0, [r3, #0]
 800a36a:	68e3      	ldr	r3, [r4, #12]
 800a36c:	3301      	adds	r3, #1
 800a36e:	60e3      	str	r3, [r4, #12]
 800a370:	1bed      	subs	r5, r5, r7
 800a372:	44ab      	add	fp, r5
 800a374:	6925      	ldr	r5, [r4, #16]
 800a376:	445d      	add	r5, fp
 800a378:	6125      	str	r5, [r4, #16]
 800a37a:	2000      	movs	r0, #0
 800a37c:	b007      	add	sp, #28
 800a37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a382:	f04f 0b00 	mov.w	fp, #0
 800a386:	e7ca      	b.n	800a31e <_scanf_i+0x15e>
 800a388:	07ca      	lsls	r2, r1, #31
 800a38a:	bf4c      	ite	mi
 800a38c:	8018      	strhmi	r0, [r3, #0]
 800a38e:	6018      	strpl	r0, [r3, #0]
 800a390:	e7eb      	b.n	800a36a <_scanf_i+0x1aa>
 800a392:	2001      	movs	r0, #1
 800a394:	e7f2      	b.n	800a37c <_scanf_i+0x1bc>
 800a396:	bf00      	nop
 800a398:	0800a66c 	.word	0x0800a66c
 800a39c:	08009cd9 	.word	0x08009cd9
 800a3a0:	0800a525 	.word	0x0800a525
 800a3a4:	0800aad6 	.word	0x0800aad6

0800a3a8 <__sccl>:
 800a3a8:	b570      	push	{r4, r5, r6, lr}
 800a3aa:	780b      	ldrb	r3, [r1, #0]
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	2b5e      	cmp	r3, #94	; 0x5e
 800a3b0:	bf0b      	itete	eq
 800a3b2:	784b      	ldrbeq	r3, [r1, #1]
 800a3b4:	1c48      	addne	r0, r1, #1
 800a3b6:	1c88      	addeq	r0, r1, #2
 800a3b8:	2200      	movne	r2, #0
 800a3ba:	bf08      	it	eq
 800a3bc:	2201      	moveq	r2, #1
 800a3be:	1e61      	subs	r1, r4, #1
 800a3c0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a3c4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a3c8:	42a9      	cmp	r1, r5
 800a3ca:	d1fb      	bne.n	800a3c4 <__sccl+0x1c>
 800a3cc:	b90b      	cbnz	r3, 800a3d2 <__sccl+0x2a>
 800a3ce:	3801      	subs	r0, #1
 800a3d0:	bd70      	pop	{r4, r5, r6, pc}
 800a3d2:	f082 0101 	eor.w	r1, r2, #1
 800a3d6:	54e1      	strb	r1, [r4, r3]
 800a3d8:	1c42      	adds	r2, r0, #1
 800a3da:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a3de:	2d2d      	cmp	r5, #45	; 0x2d
 800a3e0:	f102 36ff 	add.w	r6, r2, #4294967295
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	d006      	beq.n	800a3f6 <__sccl+0x4e>
 800a3e8:	2d5d      	cmp	r5, #93	; 0x5d
 800a3ea:	d0f1      	beq.n	800a3d0 <__sccl+0x28>
 800a3ec:	b90d      	cbnz	r5, 800a3f2 <__sccl+0x4a>
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	e7ee      	b.n	800a3d0 <__sccl+0x28>
 800a3f2:	462b      	mov	r3, r5
 800a3f4:	e7ef      	b.n	800a3d6 <__sccl+0x2e>
 800a3f6:	7816      	ldrb	r6, [r2, #0]
 800a3f8:	2e5d      	cmp	r6, #93	; 0x5d
 800a3fa:	d0fa      	beq.n	800a3f2 <__sccl+0x4a>
 800a3fc:	42b3      	cmp	r3, r6
 800a3fe:	dcf8      	bgt.n	800a3f2 <__sccl+0x4a>
 800a400:	4618      	mov	r0, r3
 800a402:	3001      	adds	r0, #1
 800a404:	4286      	cmp	r6, r0
 800a406:	5421      	strb	r1, [r4, r0]
 800a408:	dcfb      	bgt.n	800a402 <__sccl+0x5a>
 800a40a:	43d8      	mvns	r0, r3
 800a40c:	4430      	add	r0, r6
 800a40e:	1c5d      	adds	r5, r3, #1
 800a410:	42b3      	cmp	r3, r6
 800a412:	bfa8      	it	ge
 800a414:	2000      	movge	r0, #0
 800a416:	182b      	adds	r3, r5, r0
 800a418:	3202      	adds	r2, #2
 800a41a:	e7de      	b.n	800a3da <__sccl+0x32>

0800a41c <_strtol_l.isra.0>:
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a422:	d001      	beq.n	800a428 <_strtol_l.isra.0+0xc>
 800a424:	2b24      	cmp	r3, #36	; 0x24
 800a426:	d906      	bls.n	800a436 <_strtol_l.isra.0+0x1a>
 800a428:	f000 f8b8 	bl	800a59c <__errno>
 800a42c:	2316      	movs	r3, #22
 800a42e:	6003      	str	r3, [r0, #0]
 800a430:	2000      	movs	r0, #0
 800a432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a436:	4f3a      	ldr	r7, [pc, #232]	; (800a520 <_strtol_l.isra.0+0x104>)
 800a438:	468e      	mov	lr, r1
 800a43a:	4676      	mov	r6, lr
 800a43c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a440:	5de5      	ldrb	r5, [r4, r7]
 800a442:	f015 0508 	ands.w	r5, r5, #8
 800a446:	d1f8      	bne.n	800a43a <_strtol_l.isra.0+0x1e>
 800a448:	2c2d      	cmp	r4, #45	; 0x2d
 800a44a:	d134      	bne.n	800a4b6 <_strtol_l.isra.0+0x9a>
 800a44c:	f89e 4000 	ldrb.w	r4, [lr]
 800a450:	f04f 0801 	mov.w	r8, #1
 800a454:	f106 0e02 	add.w	lr, r6, #2
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d05c      	beq.n	800a516 <_strtol_l.isra.0+0xfa>
 800a45c:	2b10      	cmp	r3, #16
 800a45e:	d10c      	bne.n	800a47a <_strtol_l.isra.0+0x5e>
 800a460:	2c30      	cmp	r4, #48	; 0x30
 800a462:	d10a      	bne.n	800a47a <_strtol_l.isra.0+0x5e>
 800a464:	f89e 4000 	ldrb.w	r4, [lr]
 800a468:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a46c:	2c58      	cmp	r4, #88	; 0x58
 800a46e:	d14d      	bne.n	800a50c <_strtol_l.isra.0+0xf0>
 800a470:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a474:	2310      	movs	r3, #16
 800a476:	f10e 0e02 	add.w	lr, lr, #2
 800a47a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a47e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a482:	2600      	movs	r6, #0
 800a484:	fbbc f9f3 	udiv	r9, ip, r3
 800a488:	4635      	mov	r5, r6
 800a48a:	fb03 ca19 	mls	sl, r3, r9, ip
 800a48e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a492:	2f09      	cmp	r7, #9
 800a494:	d818      	bhi.n	800a4c8 <_strtol_l.isra.0+0xac>
 800a496:	463c      	mov	r4, r7
 800a498:	42a3      	cmp	r3, r4
 800a49a:	dd24      	ble.n	800a4e6 <_strtol_l.isra.0+0xca>
 800a49c:	2e00      	cmp	r6, #0
 800a49e:	db1f      	blt.n	800a4e0 <_strtol_l.isra.0+0xc4>
 800a4a0:	45a9      	cmp	r9, r5
 800a4a2:	d31d      	bcc.n	800a4e0 <_strtol_l.isra.0+0xc4>
 800a4a4:	d101      	bne.n	800a4aa <_strtol_l.isra.0+0x8e>
 800a4a6:	45a2      	cmp	sl, r4
 800a4a8:	db1a      	blt.n	800a4e0 <_strtol_l.isra.0+0xc4>
 800a4aa:	fb05 4503 	mla	r5, r5, r3, r4
 800a4ae:	2601      	movs	r6, #1
 800a4b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a4b4:	e7eb      	b.n	800a48e <_strtol_l.isra.0+0x72>
 800a4b6:	2c2b      	cmp	r4, #43	; 0x2b
 800a4b8:	bf08      	it	eq
 800a4ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a4be:	46a8      	mov	r8, r5
 800a4c0:	bf08      	it	eq
 800a4c2:	f106 0e02 	addeq.w	lr, r6, #2
 800a4c6:	e7c7      	b.n	800a458 <_strtol_l.isra.0+0x3c>
 800a4c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a4cc:	2f19      	cmp	r7, #25
 800a4ce:	d801      	bhi.n	800a4d4 <_strtol_l.isra.0+0xb8>
 800a4d0:	3c37      	subs	r4, #55	; 0x37
 800a4d2:	e7e1      	b.n	800a498 <_strtol_l.isra.0+0x7c>
 800a4d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a4d8:	2f19      	cmp	r7, #25
 800a4da:	d804      	bhi.n	800a4e6 <_strtol_l.isra.0+0xca>
 800a4dc:	3c57      	subs	r4, #87	; 0x57
 800a4de:	e7db      	b.n	800a498 <_strtol_l.isra.0+0x7c>
 800a4e0:	f04f 36ff 	mov.w	r6, #4294967295
 800a4e4:	e7e4      	b.n	800a4b0 <_strtol_l.isra.0+0x94>
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	da05      	bge.n	800a4f6 <_strtol_l.isra.0+0xda>
 800a4ea:	2322      	movs	r3, #34	; 0x22
 800a4ec:	6003      	str	r3, [r0, #0]
 800a4ee:	4665      	mov	r5, ip
 800a4f0:	b942      	cbnz	r2, 800a504 <_strtol_l.isra.0+0xe8>
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	e79d      	b.n	800a432 <_strtol_l.isra.0+0x16>
 800a4f6:	f1b8 0f00 	cmp.w	r8, #0
 800a4fa:	d000      	beq.n	800a4fe <_strtol_l.isra.0+0xe2>
 800a4fc:	426d      	negs	r5, r5
 800a4fe:	2a00      	cmp	r2, #0
 800a500:	d0f7      	beq.n	800a4f2 <_strtol_l.isra.0+0xd6>
 800a502:	b10e      	cbz	r6, 800a508 <_strtol_l.isra.0+0xec>
 800a504:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a508:	6011      	str	r1, [r2, #0]
 800a50a:	e7f2      	b.n	800a4f2 <_strtol_l.isra.0+0xd6>
 800a50c:	2430      	movs	r4, #48	; 0x30
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1b3      	bne.n	800a47a <_strtol_l.isra.0+0x5e>
 800a512:	2308      	movs	r3, #8
 800a514:	e7b1      	b.n	800a47a <_strtol_l.isra.0+0x5e>
 800a516:	2c30      	cmp	r4, #48	; 0x30
 800a518:	d0a4      	beq.n	800a464 <_strtol_l.isra.0+0x48>
 800a51a:	230a      	movs	r3, #10
 800a51c:	e7ad      	b.n	800a47a <_strtol_l.isra.0+0x5e>
 800a51e:	bf00      	nop
 800a520:	0800a9b9 	.word	0x0800a9b9

0800a524 <_strtol_r>:
 800a524:	f7ff bf7a 	b.w	800a41c <_strtol_l.isra.0>

0800a528 <__submore>:
 800a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52c:	460c      	mov	r4, r1
 800a52e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a534:	4299      	cmp	r1, r3
 800a536:	d11d      	bne.n	800a574 <__submore+0x4c>
 800a538:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a53c:	f7ff fa9e 	bl	8009a7c <_malloc_r>
 800a540:	b918      	cbnz	r0, 800a54a <__submore+0x22>
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a54a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a54e:	63a3      	str	r3, [r4, #56]	; 0x38
 800a550:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a554:	6360      	str	r0, [r4, #52]	; 0x34
 800a556:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a55a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a55e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a562:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a566:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a56a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a56e:	6020      	str	r0, [r4, #0]
 800a570:	2000      	movs	r0, #0
 800a572:	e7e8      	b.n	800a546 <__submore+0x1e>
 800a574:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a576:	0077      	lsls	r7, r6, #1
 800a578:	463a      	mov	r2, r7
 800a57a:	f7ff fbd1 	bl	8009d20 <_realloc_r>
 800a57e:	4605      	mov	r5, r0
 800a580:	2800      	cmp	r0, #0
 800a582:	d0de      	beq.n	800a542 <__submore+0x1a>
 800a584:	eb00 0806 	add.w	r8, r0, r6
 800a588:	4601      	mov	r1, r0
 800a58a:	4632      	mov	r2, r6
 800a58c:	4640      	mov	r0, r8
 800a58e:	f7fe fcf5 	bl	8008f7c <memcpy>
 800a592:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a596:	f8c4 8000 	str.w	r8, [r4]
 800a59a:	e7e9      	b.n	800a570 <__submore+0x48>

0800a59c <__errno>:
 800a59c:	4b01      	ldr	r3, [pc, #4]	; (800a5a4 <__errno+0x8>)
 800a59e:	6818      	ldr	r0, [r3, #0]
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20000044 	.word	0x20000044

0800a5a8 <_malloc_usable_size_r>:
 800a5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ac:	1f18      	subs	r0, r3, #4
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	bfbc      	itt	lt
 800a5b2:	580b      	ldrlt	r3, [r1, r0]
 800a5b4:	18c0      	addlt	r0, r0, r3
 800a5b6:	4770      	bx	lr

0800a5b8 <_sbrk>:
 800a5b8:	4b04      	ldr	r3, [pc, #16]	; (800a5cc <_sbrk+0x14>)
 800a5ba:	6819      	ldr	r1, [r3, #0]
 800a5bc:	4602      	mov	r2, r0
 800a5be:	b909      	cbnz	r1, 800a5c4 <_sbrk+0xc>
 800a5c0:	4903      	ldr	r1, [pc, #12]	; (800a5d0 <_sbrk+0x18>)
 800a5c2:	6019      	str	r1, [r3, #0]
 800a5c4:	6818      	ldr	r0, [r3, #0]
 800a5c6:	4402      	add	r2, r0
 800a5c8:	601a      	str	r2, [r3, #0]
 800a5ca:	4770      	bx	lr
 800a5cc:	20000410 	.word	0x20000410
 800a5d0:	20000718 	.word	0x20000718

0800a5d4 <_init>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	bf00      	nop
 800a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5da:	bc08      	pop	{r3}
 800a5dc:	469e      	mov	lr, r3
 800a5de:	4770      	bx	lr

0800a5e0 <_fini>:
 800a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5e2:	bf00      	nop
 800a5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e6:	bc08      	pop	{r3}
 800a5e8:	469e      	mov	lr, r3
 800a5ea:	4770      	bx	lr
